# 1 "./xhpl.cil.c"
# 1 "/home/westwind/mpibench/1hpl/hpl-1.0/testing/ptest/crestAll//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "./xhpl.cil.c"
# 57 "../HPL_pddriver.c"
void __globinit_stdout(void) ;
extern void __CrestInit(void) __attribute__((__crest_skip__)) ;
extern void __CrestGetMPIInfo(void) __attribute__((__crest_skip__)) ;
extern void __CrestWorldSizeWithLimit(unsigned long addr , int limit ) __attribute__((__crest_skip__)) ;
extern void __CrestRankNonDefaultComm2(long long val , unsigned long addr ) __attribute__((__crest_skip__)) ;
extern void __CrestRankNonDefaultComm1(unsigned long addr ) __attribute__((__crest_skip__)) ;
extern void __CrestRank(unsigned long addr ) __attribute__((__crest_skip__)) ;
extern void __CrestHandleReturn(int id , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestReturn(int id ) __attribute__((__crest_skip__)) ;
extern void __CrestCall(int id , unsigned int fid ) __attribute__((__crest_skip__)) ;
extern void __CrestBranch(int id , int bid , unsigned char b ) __attribute__((__crest_skip__)) ;
extern void __CrestApply2(int id , int op , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestApply1(int id , int op , long long val ) __attribute__((__crest_skip__)) ;
extern void __CrestClearStack(int id ) __attribute__((__crest_skip__)) ;
extern void __CrestStore(int id , unsigned long addr ) __attribute__((__crest_skip__)) ;
extern void __CrestLoad(int id , unsigned long addr , long long val ) __attribute__((__crest_skip__)) ;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
typedef unsigned long size_t;
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
# 132 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
# 44 "/usr/include/stdio.h"
struct _IO_FILE;
# 48 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
# 154 "/usr/include/libio.h"
typedef void _IO_lock_t;
# 160 "/usr/include/libio.h"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
# 245 "/usr/include/libio.h"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
};
# 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_gesv.h"
enum __anonenum_HPL_T_FACT_27 {
    HPL_LEFT_LOOKING = 301,
    HPL_CROUT = 302,
    HPL_RIGHT_LOOKING = 303
} ;
# 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_gesv.h"
typedef enum __anonenum_HPL_T_FACT_27 HPL_T_FACT;
# 96 "//usr/include/mpich/mpi.h"
typedef int MPI_Datatype;
# 265 "//usr/include/mpich/mpi.h"
typedef int MPI_Comm;
# 429 "//usr/include/mpich/mpi.h"
typedef int MPI_Request;
# 535 "//usr/include/mpich/mpi.h"
typedef long long MPI_Count;
# 559 "//usr/include/mpich/mpi.h"
struct MPI_Status {
   int MPI_SOURCE ;
   int MPI_TAG ;
   int MPI_ERROR ;
   MPI_Count count ;
   int cancelled ;
   int abi_slush_fund[2] ;
};
# 559 "//usr/include/mpich/mpi.h"
typedef struct MPI_Status MPI_Status;
# 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
enum __anonenum_HPL_T_ORDER_29 {
    HPL_ROW_MAJOR = 201,
    HPL_COLUMN_MAJOR = 202
} ;
# 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef enum __anonenum_HPL_T_ORDER_29 HPL_T_ORDER;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
struct HPL_S_grid {
   MPI_Comm all_comm ;
   MPI_Comm row_comm ;
   MPI_Comm col_comm ;
   HPL_T_ORDER order ;
   int iam ;
   int myrow ;
   int mycol ;
   int nprow ;
   int npcol ;
   int nprocs ;
   int row_ip2 ;
   int row_hdim ;
   int row_ip2m1 ;
   int row_mask ;
   int col_ip2 ;
   int col_hdim ;
   int col_ip2m1 ;
   int col_mask ;
};
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef struct HPL_S_grid HPL_T_grid;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
struct HPL_S_palg;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
struct HPL_S_pmat;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
struct HPL_S_panel {
   struct HPL_S_grid *grid ;
   struct HPL_S_palg *algo ;
   struct HPL_S_pmat *pmat ;
   double *A ;
   double *WORK ;
   double *L2 ;
   double *L1 ;
   double *DPIV ;
   double *DINFO ;
   double *U ;
   int *IWORK ;
   void ***buffers[2] ;
   int counts[2] ;
   MPI_Datatype dtypes[2] ;
   MPI_Request request[1] ;
   MPI_Status status[1] ;
   int nb ;
   int jb ;
   int m ;
   int n ;
   int ia ;
   int ja ;
   int mp ;
   int nq ;
   int ii ;
   int jj ;
   int lda ;
   int prow ;
   int pcol ;
   int msgid ;
   int ldl2 ;
   int len ;
};
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
typedef struct HPL_S_panel HPL_T_panel;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
enum __anonenum_HPL_T_TOP_30 {
    HPL_1RING = 401,
    HPL_1RING_M = 402,
    HPL_2RING = 403,
    HPL_2RING_M = 404,
    HPL_BLONG = 405,
    HPL_BLONG_M = 406
} ;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
typedef enum __anonenum_HPL_T_TOP_30 HPL_T_TOP;
# 68 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
enum __anonenum_HPL_T_SWAP_31 {
    HPL_SWAP00 = 451,
    HPL_SWAP01 = 452,
    HPL_SW_MIX = 453,
    HPL_NO_SWP = 499
} ;
# 68 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef enum __anonenum_HPL_T_SWAP_31 HPL_T_SWAP;
# 77 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
struct HPL_S_palg {
   HPL_T_TOP btopo ;
   int depth ;
   int nbdiv ;
   int nbmin ;
   HPL_T_FACT pfact ;
   HPL_T_FACT rfact ;
   void (*pffun)(HPL_T_panel * , int const , int const , int const , double * ) ;
   void (*rffun)(HPL_T_panel * , int const , int const , int const , double * ) ;
   void (*upfun)(HPL_T_panel * , int * , HPL_T_panel * , int const ) ;
   HPL_T_SWAP fswap ;
   int fsthr ;
   int equil ;
   int align ;
};
# 77 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef struct HPL_S_palg HPL_T_palg;
# 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
struct HPL_S_pmat {
   double *A ;
   double *X ;
   int n ;
   int nb ;
   int ld ;
   int mp ;
   int nq ;
   int info ;
};
# 70 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptest.h"
struct HPL_S_test {
   double epsil ;
   double thrsh ;
   FILE *outfp ;
   int kfail ;
   int kpass ;
   int kskip ;
   int ktest ;
};
# 70 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptest.h"
typedef struct HPL_S_test HPL_T_test;
# 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
enum __anonenum_HPL_T_MACH_26 {
    HPL_MACH_EPS = 900,
    HPL_MACH_SFMIN = 901,
    HPL_MACH_BASE = 902,
    HPL_MACH_PREC = 903,
    HPL_MACH_MLEN = 904,
    HPL_MACH_RND = 905,
    HPL_MACH_EMIN = 906,
    HPL_MACH_RMIN = 907,
    HPL_MACH_EMAX = 908,
    HPL_MACH_RMAX = 909
} ;
# 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
typedef enum __anonenum_HPL_T_MACH_26 HPL_T_MACH;
# 59 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
enum __anonenum_HPL_T_TYPE_28 {
    HPL_INT = 100,
    HPL_DOUBLE = 101
} ;
# 59 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef enum __anonenum_HPL_T_TYPE_28 HPL_T_TYPE;
# 59 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_ORDER {
    HplRowMajor = 101,
    HplColumnMajor = 102
} ;
# 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_TRANS {
    HplNoTrans = 111,
    HplTrans = 112,
    HplConjTrans = 113
} ;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
enum __anonenum_HPL_T_NORM_25 {
    HPL_NORM_A = 800,
    HPL_NORM_1 = 801,
    HPL_NORM_I = 802
} ;
# 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
typedef enum __anonenum_HPL_T_NORM_25 HPL_T_NORM;
# 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef struct HPL_S_pmat HPL_T_pmat;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
enum __anonenum_HPL_T_PTIME_33 {
    HPL_WALL_PTIME = 101,
    HPL_CPU_PTIME = 102
} ;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
typedef enum __anonenum_HPL_T_PTIME_33 HPL_T_PTIME;
# 70 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
enum __anonenum_HPL_T_PTIME_OP_34 {
    HPL_AMAX_PTIME = 201,
    HPL_AMIN_PTIME = 202,
    HPL_SUM_PTIME = 203
} ;
# 70 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
typedef enum __anonenum_HPL_T_PTIME_OP_34 HPL_T_PTIME_OP;
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
# 79 "/usr/include/stdio.h"
typedef __gnuc_va_list va_list;
# 533 "//usr/include/mpich/mpi.h"
typedef long MPI_Aint;
# 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_UPLO {
    HplUpper = 121,
    HplLower = 122
} ;
# 65 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_DIAG {
    HplNonUnit = 131,
    HplUnit = 132
} ;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_SIDE {
    HplLeft = 141,
    HplRight = 142
} ;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
enum __anonenum_HPL_T_TIME_32 {
    HPL_WALL_TIME = 101,
    HPL_CPU_TIME = 102
} ;
# 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
typedef enum __anonenum_HPL_T_TIME_32 HPL_T_TIME;
# 139 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
# 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h"
struct timeval {
   __time_t tv_sec ;
   __suseconds_t tv_usec ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_35 {
   long ru_maxrss ;
   __syscall_slong_t __ru_maxrss_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_36 {
   long ru_ixrss ;
   __syscall_slong_t __ru_ixrss_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_37 {
   long ru_idrss ;
   __syscall_slong_t __ru_idrss_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_38 {
   long ru_isrss ;
   __syscall_slong_t __ru_isrss_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_39 {
   long ru_minflt ;
   __syscall_slong_t __ru_minflt_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_40 {
   long ru_majflt ;
   __syscall_slong_t __ru_majflt_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_41 {
   long ru_nswap ;
   __syscall_slong_t __ru_nswap_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_42 {
   long ru_inblock ;
   __syscall_slong_t __ru_inblock_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_43 {
   long ru_oublock ;
   __syscall_slong_t __ru_oublock_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_44 {
   long ru_msgsnd ;
   __syscall_slong_t __ru_msgsnd_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_45 {
   long ru_msgrcv ;
   __syscall_slong_t __ru_msgrcv_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_46 {
   long ru_nsignals ;
   __syscall_slong_t __ru_nsignals_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_47 {
   long ru_nvcsw ;
   __syscall_slong_t __ru_nvcsw_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_48 {
   long ru_nivcsw ;
   __syscall_slong_t __ru_nivcsw_word ;
};
# 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   union __anonunion____missing_field_name_35 __annonCompField1 ;
   union __anonunion____missing_field_name_36 __annonCompField2 ;
   union __anonunion____missing_field_name_37 __annonCompField3 ;
   union __anonunion____missing_field_name_38 __annonCompField4 ;
   union __anonunion____missing_field_name_39 __annonCompField5 ;
   union __anonunion____missing_field_name_40 __annonCompField6 ;
   union __anonunion____missing_field_name_41 __annonCompField7 ;
   union __anonunion____missing_field_name_42 __annonCompField8 ;
   union __anonunion____missing_field_name_43 __annonCompField9 ;
   union __anonunion____missing_field_name_44 __annonCompField10 ;
   union __anonunion____missing_field_name_45 __annonCompField11 ;
   union __anonunion____missing_field_name_46 __annonCompField12 ;
   union __anonunion____missing_field_name_47 __annonCompField13 ;
   union __anonunion____missing_field_name_48 __annonCompField14 ;
};
# 43 "/usr/include/x86_64-linux-gnu/sys/resource.h"
typedef int __rusage_who_t;
# 55 "/usr/include/x86_64-linux-gnu/sys/time.h"
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
# 61 "/usr/include/x86_64-linux-gnu/sys/time.h"
typedef struct timezone * __restrict __timezone_ptr_t;
# 1 "HPL_pddriver.o"
#pragma merger("0","./HPL_pddriver.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 169 "/usr/include/stdio.h"
extern struct _IO_FILE *stdout ;
# 170 "/usr/include/stdio.h"
extern struct _IO_FILE *stderr ;
# 237 "/usr/include/stdio.h"
extern int fclose(FILE *__stream ) ;
# 543 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) exit)(int __status ) ;
# 82 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_fprintf(FILE *STREAM , char const *FORM , ...) ;
# 992 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_size(MPI_Comm comm , int *size ) ;
# 993 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_rank(MPI_Comm comm , int *rank ) ;
# 1041 "//usr/include/mpich/mpi.h"
extern int MPI_Init(int *argc , char ***argv ) ;
# 1042 "//usr/include/mpich/mpi.h"
extern int MPI_Finalize(void) ;
# 129 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_init(MPI_Comm COMM , HPL_T_ORDER const ORDER , int const NPROW ,
                  int const NPCOL , HPL_T_grid *GRID ) ;
# 137 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_exit(HPL_T_grid *GRID ) ;
# 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_info(HPL_T_grid const *GRID , int *NPROW , int *NPCOL , int *MYROW ,
                  int *MYCOL ) ;
# 110 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpancrN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 118 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpancrT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 126 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanllN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 134 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanllT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanrlN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanrlT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK ) ;
# 159 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpancrN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 167 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpancrT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 175 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanllN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 183 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanllT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 191 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanrlN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 199 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanrlT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK ) ;
# 283 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateNN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 290 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateNT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 297 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateTN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 304 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateTT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 109 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptest.h"
void HPL_pdinfo(HPL_T_test *TEST , int *NS , int *N , int *NBS , int *NB , HPL_T_ORDER *PMAPPIN ,
                int *NPQS , int *P , int *Q , int *NPFS , HPL_T_FACT *PF , int *NBMS ,
                int *NBM , int *NDVS , int *NDV , int *NRFS , HPL_T_FACT *RF , int *NTPS ,
                HPL_T_TOP *TP , int *NDHS , int *DH , HPL_T_SWAP *FSWAP , int *TSWAP ,
                int *L1NOTRAN , int *UNOTRAN , int *EQUIL , int *ALIGN ) ;
# 139 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptest.h"
void HPL_pdtest(HPL_T_test *TEST , HPL_T_grid *GRID , HPL_T_palg *ALGO , int const N ,
                int const NB ) ;
# 225 "/home/westwind/myInstall/Develop/crest.mpi/include/crest.h"
extern void __CrestInt(int *x ) __attribute__((__crest_skip__)) ;
# 226 "/home/westwind/myInstall/Develop/crest.mpi/include/crest.h"
extern void __CrestIntWithLimit(int *x , long long limit ) __attribute__((__crest_skip__)) ;
# 57 "../HPL_pddriver.c"
int main(int ARGC , char **ARGV )
{
  int nval[20] ;
  int nbval[20] ;
  int pval[20] ;
  int qval[20] ;
  int nbmval[20] ;
  int ndvval[20] ;
  int ndhval[20] ;
  HPL_T_FACT pfaval[20] ;
  HPL_T_FACT rfaval[20] ;
  HPL_T_TOP topval[20] ;
  HPL_T_grid grid ;
  HPL_T_palg algo ;
  HPL_T_test test ;
  int L1notran ;
  int Unotran ;
  int align ;
  int equil___1 ;
  int in ;
  int inb ;
  int inbm ;
  int indh ;
  int indv ;
  int ipfa ;
  int ipq ;
  int irfa ;
  int itop ;
  int mycol ;
  int myrow ;
  int ns ;
  int nbs ;
  int nbms ;
  int ndhs ;
  int ndvs ;
  int npcol ;
  int npfs ;
  int npqs ;
  int nprow ;
  int nrfs ;
  int ntps ;
  int rank ;
  int size ;
  int tswap___3 ;
  HPL_T_ORDER pmapping ;
  HPL_T_FACT rpfa ;
  HPL_T_SWAP fswap___3 ;
  int i ;
  int i___0 ;
  int i___1 ;
  int i___2 ;
  int i___3 ;
  int i___4 ;
  int i___5 ;
  int __retres55 ;

  {
  __globinit_stdout();
  __CrestCall(2, 1);
  __CrestStore(1, (unsigned long )(& ARGC));
# 113 "../HPL_pddriver.c"
  MPI_Init(& ARGC, & ARGV);
  __CrestGetMPIInfo();
  __CrestLoad(3, (unsigned long )0, (long long )1140850688);
  __CrestRank((unsigned long )(& rank));
# 117 "../HPL_pddriver.c"
  MPI_Comm_rank(1140850688, & rank);
  __CrestClearStack(4);
  __CrestLoad(5, (unsigned long )0, (long long )1140850688);
  __CrestWorldSizeWithLimit((unsigned long )(& size), 16);
# 118 "../HPL_pddriver.c"
  MPI_Comm_size(1140850688, & size);
  __CrestClearStack(6);
# 158 "../HPL_pddriver.c"
  __CrestIntWithLimit(& ns, 2LL);
  __CrestLoad(7, (unsigned long )0, (long long )0);
  __CrestStore(8, (unsigned long )(& i));
# 159 "../HPL_pddriver.c"
  i = 0;
# 159 "../HPL_pddriver.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(11, (unsigned long )(& i), (long long )i);
    __CrestLoad(10, (unsigned long )0, (long long )20);
    __CrestApply2(9, 16, (long long )(i < 20));
# 159 "../HPL_pddriver.c"
    if (i < 20) {
      __CrestBranch(12, 6, 1);

    } else {
      __CrestBranch(13, 7, 0);
# 159 "../HPL_pddriver.c"
      goto while_break;
    }
    }
# 161 "../HPL_pddriver.c"
    __CrestIntWithLimit(& nval[i], 30LL);
    __CrestLoad(16, (unsigned long )(& i), (long long )i);
    __CrestLoad(15, (unsigned long )0, (long long )1);
    __CrestApply2(14, 0, (long long )(i + 1));
    __CrestStore(17, (unsigned long )(& i));
# 159 "../HPL_pddriver.c"
    i ++;
  }
  while_break:
# 166 "../HPL_pddriver.c"
  __CrestIntWithLimit(& nbs, 2LL);
  __CrestLoad(18, (unsigned long )0, (long long )0);
  __CrestStore(19, (unsigned long )(& i___0));
# 167 "../HPL_pddriver.c"
  i___0 = 0;
# 167 "../HPL_pddriver.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(22, (unsigned long )(& i___0), (long long )i___0);
    __CrestLoad(21, (unsigned long )0, (long long )20);
    __CrestApply2(20, 16, (long long )(i___0 < 20));
# 167 "../HPL_pddriver.c"
    if (i___0 < 20) {
      __CrestBranch(23, 15, 1);

    } else {
      __CrestBranch(24, 16, 0);
# 167 "../HPL_pddriver.c"
      goto while_break___0;
    }
    }
# 169 "../HPL_pddriver.c"
    __CrestIntWithLimit(& nbval[i___0], 10LL);
    __CrestLoad(27, (unsigned long )(& i___0), (long long )i___0);
    __CrestLoad(26, (unsigned long )0, (long long )1);
    __CrestApply2(25, 0, (long long )(i___0 + 1));
    __CrestStore(28, (unsigned long )(& i___0));
# 167 "../HPL_pddriver.c"
    i___0 ++;
  }
  while_break___0:
# 176 "../HPL_pddriver.c"
  __CrestIntWithLimit(& npqs, 1LL);
  __CrestLoad(29, (unsigned long )0, (long long )0);
  __CrestStore(30, (unsigned long )(& i___1));
# 177 "../HPL_pddriver.c"
  i___1 = 0;
# 177 "../HPL_pddriver.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(33, (unsigned long )(& i___1), (long long )i___1);
    __CrestLoad(32, (unsigned long )0, (long long )20);
    __CrestApply2(31, 16, (long long )(i___1 < 20));
# 177 "../HPL_pddriver.c"
    if (i___1 < 20) {
      __CrestBranch(34, 24, 1);

    } else {
      __CrestBranch(35, 25, 0);
# 177 "../HPL_pddriver.c"
      goto while_break___1;
    }
    }
# 179 "../HPL_pddriver.c"
    __CrestIntWithLimit(& pval[i___1], 8LL);
    __CrestLoad(38, (unsigned long )(& i___1), (long long )i___1);
    __CrestLoad(37, (unsigned long )0, (long long )1);
    __CrestApply2(36, 0, (long long )(i___1 + 1));
    __CrestStore(39, (unsigned long )(& i___1));
# 177 "../HPL_pddriver.c"
    i___1 ++;
  }
  while_break___1:
  __CrestLoad(40, (unsigned long )0, (long long )0);
  __CrestStore(41, (unsigned long )(& i___2));
# 181 "../HPL_pddriver.c"
  i___2 = 0;
# 181 "../HPL_pddriver.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(44, (unsigned long )(& i___2), (long long )i___2);
    __CrestLoad(43, (unsigned long )0, (long long )20);
    __CrestApply2(42, 16, (long long )(i___2 < 20));
# 181 "../HPL_pddriver.c"
    if (i___2 < 20) {
      __CrestBranch(45, 33, 1);

    } else {
      __CrestBranch(46, 34, 0);
# 181 "../HPL_pddriver.c"
      goto while_break___2;
    }
    }
    __CrestLoad(49, (unsigned long )(& i___2), (long long )i___2);
    __CrestLoad(48, (unsigned long )0, (long long )1);
    __CrestApply2(47, 0, (long long )(i___2 + 1));
    __CrestStore(50, (unsigned long )(& i___2));
# 181 "../HPL_pddriver.c"
    i___2 ++;
  }
  while_break___2:
# 189 "../HPL_pddriver.c"
  __CrestIntWithLimit(& npfs, 1LL);
# 194 "../HPL_pddriver.c"
  __CrestIntWithLimit(& nbms, 1LL);
  __CrestLoad(51, (unsigned long )0, (long long )0);
  __CrestStore(52, (unsigned long )(& i___3));
# 195 "../HPL_pddriver.c"
  i___3 = 0;
# 195 "../HPL_pddriver.c"
  while (1) {
    while_continue___3: ;
    {
    __CrestLoad(55, (unsigned long )(& i___3), (long long )i___3);
    __CrestLoad(54, (unsigned long )0, (long long )20);
    __CrestApply2(53, 16, (long long )(i___3 < 20));
# 195 "../HPL_pddriver.c"
    if (i___3 < 20) {
      __CrestBranch(56, 42, 1);

    } else {
      __CrestBranch(57, 43, 0);
# 195 "../HPL_pddriver.c"
      goto while_break___3;
    }
    }
# 197 "../HPL_pddriver.c"
    __CrestIntWithLimit(& nbmval[i___3], 5LL);
    __CrestLoad(60, (unsigned long )(& i___3), (long long )i___3);
    __CrestLoad(59, (unsigned long )0, (long long )1);
    __CrestApply2(58, 0, (long long )(i___3 + 1));
    __CrestStore(61, (unsigned long )(& i___3));
# 195 "../HPL_pddriver.c"
    i___3 ++;
  }
  while_break___3:
# 201 "../HPL_pddriver.c"
  __CrestIntWithLimit(& ndvs, 1LL);
  __CrestLoad(62, (unsigned long )0, (long long )0);
  __CrestStore(63, (unsigned long )(& i___4));
# 202 "../HPL_pddriver.c"
  i___4 = 0;
# 202 "../HPL_pddriver.c"
  while (1) {
    while_continue___4: ;
    {
    __CrestLoad(66, (unsigned long )(& i___4), (long long )i___4);
    __CrestLoad(65, (unsigned long )0, (long long )20);
    __CrestApply2(64, 16, (long long )(i___4 < 20));
# 202 "../HPL_pddriver.c"
    if (i___4 < 20) {
      __CrestBranch(67, 51, 1);

    } else {
      __CrestBranch(68, 52, 0);
# 202 "../HPL_pddriver.c"
      goto while_break___4;
    }
    }
# 204 "../HPL_pddriver.c"
    __CrestIntWithLimit(& ndvval[i___4], 4LL);
    __CrestLoad(71, (unsigned long )(& i___4), (long long )i___4);
    __CrestLoad(70, (unsigned long )0, (long long )1);
    __CrestApply2(69, 0, (long long )(i___4 + 1));
    __CrestStore(72, (unsigned long )(& i___4));
# 202 "../HPL_pddriver.c"
    i___4 ++;
  }
  while_break___4:
# 208 "../HPL_pddriver.c"
  __CrestIntWithLimit(& nrfs, 1LL);
# 213 "../HPL_pddriver.c"
  __CrestIntWithLimit(& ntps, 1LL);
# 218 "../HPL_pddriver.c"
  __CrestIntWithLimit(& ndhs, 1LL);
  __CrestLoad(73, (unsigned long )0, (long long )0);
  __CrestStore(74, (unsigned long )(& i___5));
# 219 "../HPL_pddriver.c"
  i___5 = 0;
# 219 "../HPL_pddriver.c"
  while (1) {
    while_continue___5: ;
    {
    __CrestLoad(77, (unsigned long )(& i___5), (long long )i___5);
    __CrestLoad(76, (unsigned long )0, (long long )20);
    __CrestApply2(75, 16, (long long )(i___5 < 20));
# 219 "../HPL_pddriver.c"
    if (i___5 < 20) {
      __CrestBranch(78, 60, 1);

    } else {
      __CrestBranch(79, 61, 0);
# 219 "../HPL_pddriver.c"
      goto while_break___5;
    }
    }
# 221 "../HPL_pddriver.c"
    __CrestIntWithLimit(& ndhval[i___5], 4LL);
    __CrestLoad(82, (unsigned long )(& i___5), (long long )i___5);
    __CrestLoad(81, (unsigned long )0, (long long )1);
    __CrestApply2(80, 0, (long long )(i___5 + 1));
    __CrestStore(83, (unsigned long )(& i___5));
# 219 "../HPL_pddriver.c"
    i___5 ++;
  }
  while_break___5:
# 224 "../HPL_pddriver.c"
  __CrestInt(& tswap___3);
# 228 "../HPL_pddriver.c"
  __CrestInt(& L1notran);
# 230 "../HPL_pddriver.c"
  __CrestInt(& Unotran);
# 232 "../HPL_pddriver.c"
  __CrestInt(& equil___1);
# 234 "../HPL_pddriver.c"
  __CrestInt(& align);
# 251 "../HPL_pddriver.c"
  HPL_pdinfo(& test, & ns, nval, & nbs, nbval, & pmapping, & npqs, pval, qval, & npfs,
             pfaval, & nbms, nbmval, & ndvs, ndvval, & nrfs, rfaval, & ntps, topval,
             & ndhs, ndhval, & fswap___3, & tswap___3, & L1notran, & Unotran, & equil___1,
             & align);
  __CrestClearStack(84);
  __CrestLoad(85, (unsigned long )0, (long long )0);
  __CrestStore(86, (unsigned long )(& ipq));
# 259 "../HPL_pddriver.c"
  ipq = 0;
# 259 "../HPL_pddriver.c"
  while (1) {
    while_continue___6: ;
    {
    __CrestLoad(89, (unsigned long )(& ipq), (long long )ipq);
    __CrestLoad(88, (unsigned long )(& npqs), (long long )npqs);
    __CrestApply2(87, 16, (long long )(ipq < npqs));
# 259 "../HPL_pddriver.c"
    if (ipq < npqs) {
      __CrestBranch(90, 69, 1);

    } else {
      __CrestBranch(91, 70, 0);
# 259 "../HPL_pddriver.c"
      goto while_break___6;
    }
    }
    __CrestLoad(92, (unsigned long )0, (long long )1140850688);
    __CrestLoad(93, (unsigned long )(& pmapping), (long long )pmapping);
    __CrestLoad(94, (unsigned long )(& pval[ipq]), (long long )pval[ipq]);
    __CrestLoad(95, (unsigned long )(& qval[ipq]), (long long )qval[ipq]);
# 261 "../HPL_pddriver.c"
    HPL_grid_init(1140850688, (HPL_T_ORDER const )pmapping, (int const )pval[ipq],
                  (int const )qval[ipq], & grid);
    __CrestClearStack(96);
# 263 "../HPL_pddriver.c"
    HPL_grid_info((HPL_T_grid const *)(& grid), & nprow, & npcol, & myrow, & mycol);
    __CrestClearStack(97);
    {
    __CrestLoad(100, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(99, (unsigned long )0, (long long )0);
    __CrestApply2(98, 16, (long long )(myrow < 0));
# 265 "../HPL_pddriver.c"
    if (myrow < 0) {
      __CrestBranch(101, 73, 1);
# 266 "../HPL_pddriver.c"
      goto label_end_of_npqs;
    } else {
      __CrestBranch(102, 74, 0);
      {
      __CrestLoad(105, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(104, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(103, 17, (long long )(myrow >= nprow));
# 265 "../HPL_pddriver.c"
      if (myrow >= nprow) {
        __CrestBranch(106, 75, 1);
# 266 "../HPL_pddriver.c"
        goto label_end_of_npqs;
      } else {
        __CrestBranch(107, 76, 0);
        {
        __CrestLoad(110, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(109, (unsigned long )0, (long long )0);
        __CrestApply2(108, 16, (long long )(mycol < 0));
# 265 "../HPL_pddriver.c"
        if (mycol < 0) {
          __CrestBranch(111, 77, 1);
# 266 "../HPL_pddriver.c"
          goto label_end_of_npqs;
        } else {
          __CrestBranch(112, 78, 0);
          {
          __CrestLoad(115, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(114, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(113, 17, (long long )(mycol >= npcol));
# 265 "../HPL_pddriver.c"
          if (mycol >= npcol) {
            __CrestBranch(116, 79, 1);
# 266 "../HPL_pddriver.c"
            goto label_end_of_npqs;
          } else {
            __CrestBranch(117, 80, 0);

          }
          }
        }
        }
      }
      }
    }
    }
    __CrestLoad(118, (unsigned long )0, (long long )0);
    __CrestStore(119, (unsigned long )(& in));
# 268 "../HPL_pddriver.c"
    in = 0;
    {
# 268 "../HPL_pddriver.c"
    while (1) {
      while_continue___7: ;
      {
      __CrestLoad(122, (unsigned long )(& in), (long long )in);
      __CrestLoad(121, (unsigned long )(& ns), (long long )ns);
      __CrestApply2(120, 16, (long long )(in < ns));
# 268 "../HPL_pddriver.c"
      if (in < ns) {
        __CrestBranch(123, 86, 1);

      } else {
        __CrestBranch(124, 87, 0);
# 268 "../HPL_pddriver.c"
        goto while_break___7;
      }
      }
      __CrestLoad(125, (unsigned long )0, (long long )0);
      __CrestStore(126, (unsigned long )(& inb));
# 270 "../HPL_pddriver.c"
      inb = 0;
      {
# 270 "../HPL_pddriver.c"
      while (1) {
        while_continue___8: ;
        {
        __CrestLoad(129, (unsigned long )(& inb), (long long )inb);
        __CrestLoad(128, (unsigned long )(& nbs), (long long )nbs);
        __CrestApply2(127, 16, (long long )(inb < nbs));
# 270 "../HPL_pddriver.c"
        if (inb < nbs) {
          __CrestBranch(130, 93, 1);

        } else {
          __CrestBranch(131, 94, 0);
# 270 "../HPL_pddriver.c"
          goto while_break___8;
        }
        }
        __CrestLoad(132, (unsigned long )0, (long long )0);
        __CrestStore(133, (unsigned long )(& indh));
# 272 "../HPL_pddriver.c"
        indh = 0;
        {
# 272 "../HPL_pddriver.c"
        while (1) {
          while_continue___9: ;
          {
          __CrestLoad(136, (unsigned long )(& indh), (long long )indh);
          __CrestLoad(135, (unsigned long )(& ndhs), (long long )ndhs);
          __CrestApply2(134, 16, (long long )(indh < ndhs));
# 272 "../HPL_pddriver.c"
          if (indh < ndhs) {
            __CrestBranch(137, 100, 1);

          } else {
            __CrestBranch(138, 101, 0);
# 272 "../HPL_pddriver.c"
            goto while_break___9;
          }
          }
          __CrestLoad(139, (unsigned long )0, (long long )0);
          __CrestStore(140, (unsigned long )(& itop));
# 274 "../HPL_pddriver.c"
          itop = 0;
          {
# 274 "../HPL_pddriver.c"
          while (1) {
            while_continue___10: ;
            {
            __CrestLoad(143, (unsigned long )(& itop), (long long )itop);
            __CrestLoad(142, (unsigned long )(& ntps), (long long )ntps);
            __CrestApply2(141, 16, (long long )(itop < ntps));
# 274 "../HPL_pddriver.c"
            if (itop < ntps) {
              __CrestBranch(144, 107, 1);

            } else {
              __CrestBranch(145, 108, 0);
# 274 "../HPL_pddriver.c"
              goto while_break___10;
            }
            }
            __CrestLoad(146, (unsigned long )0, (long long )0);
            __CrestStore(147, (unsigned long )(& irfa));
# 276 "../HPL_pddriver.c"
            irfa = 0;
            {
# 276 "../HPL_pddriver.c"
            while (1) {
              while_continue___11: ;
              {
              __CrestLoad(150, (unsigned long )(& irfa), (long long )irfa);
              __CrestLoad(149, (unsigned long )(& nrfs), (long long )nrfs);
              __CrestApply2(148, 16, (long long )(irfa < nrfs));
# 276 "../HPL_pddriver.c"
              if (irfa < nrfs) {
                __CrestBranch(151, 114, 1);

              } else {
                __CrestBranch(152, 115, 0);
# 276 "../HPL_pddriver.c"
                goto while_break___11;
              }
              }
              __CrestLoad(153, (unsigned long )0, (long long )0);
              __CrestStore(154, (unsigned long )(& ipfa));
# 278 "../HPL_pddriver.c"
              ipfa = 0;
              {
# 278 "../HPL_pddriver.c"
              while (1) {
                while_continue___12: ;
                {
                __CrestLoad(157, (unsigned long )(& ipfa), (long long )ipfa);
                __CrestLoad(156, (unsigned long )(& npfs), (long long )npfs);
                __CrestApply2(155, 16, (long long )(ipfa < npfs));
# 278 "../HPL_pddriver.c"
                if (ipfa < npfs) {
                  __CrestBranch(158, 121, 1);

                } else {
                  __CrestBranch(159, 122, 0);
# 278 "../HPL_pddriver.c"
                  goto while_break___12;
                }
                }
                __CrestLoad(160, (unsigned long )0, (long long )0);
                __CrestStore(161, (unsigned long )(& inbm));
# 280 "../HPL_pddriver.c"
                inbm = 0;
                {
# 280 "../HPL_pddriver.c"
                while (1) {
                  while_continue___13: ;
                  {
                  __CrestLoad(164, (unsigned long )(& inbm), (long long )inbm);
                  __CrestLoad(163, (unsigned long )(& nbms), (long long )nbms);
                  __CrestApply2(162, 16, (long long )(inbm < nbms));
# 280 "../HPL_pddriver.c"
                  if (inbm < nbms) {
                    __CrestBranch(165, 128, 1);

                  } else {
                    __CrestBranch(166, 129, 0);
# 280 "../HPL_pddriver.c"
                    goto while_break___13;
                  }
                  }
                  __CrestLoad(167, (unsigned long )0, (long long )0);
                  __CrestStore(168, (unsigned long )(& indv));
# 282 "../HPL_pddriver.c"
                  indv = 0;
                  {
# 282 "../HPL_pddriver.c"
                  while (1) {
                    while_continue___14: ;
                    {
                    __CrestLoad(171, (unsigned long )(& indv), (long long )indv);
                    __CrestLoad(170, (unsigned long )(& ndvs), (long long )ndvs);
                    __CrestApply2(169, 16, (long long )(indv < ndvs));
# 282 "../HPL_pddriver.c"
                    if (indv < ndvs) {
                      __CrestBranch(172, 135, 1);

                    } else {
                      __CrestBranch(173, 136, 0);
# 282 "../HPL_pddriver.c"
                      goto while_break___14;
                    }
                    }
                    __CrestLoad(174, (unsigned long )(& topval[itop]), (long long )topval[itop]);
                    __CrestStore(175, (unsigned long )(& algo.btopo));
# 287 "../HPL_pddriver.c"
                    algo.btopo = topval[itop];
                    __CrestLoad(176, (unsigned long )(& ndhval[indh]), (long long )ndhval[indh]);
                    __CrestStore(177, (unsigned long )(& algo.depth));
# 287 "../HPL_pddriver.c"
                    algo.depth = ndhval[indh];
                    __CrestLoad(178, (unsigned long )(& nbmval[inbm]), (long long )nbmval[inbm]);
                    __CrestStore(179, (unsigned long )(& algo.nbmin));
# 288 "../HPL_pddriver.c"
                    algo.nbmin = nbmval[inbm];
                    __CrestLoad(180, (unsigned long )(& ndvval[indv]), (long long )ndvval[indv]);
                    __CrestStore(181, (unsigned long )(& algo.nbdiv));
# 288 "../HPL_pddriver.c"
                    algo.nbdiv = ndvval[indv];
                    __CrestLoad(182, (unsigned long )(& pfaval[ipfa]), (long long )pfaval[ipfa]);
                    __CrestStore(183, (unsigned long )(& rpfa));
# 290 "../HPL_pddriver.c"
                    rpfa = pfaval[ipfa];
                    __CrestLoad(184, (unsigned long )(& rpfa), (long long )rpfa);
                    __CrestStore(185, (unsigned long )(& algo.pfact));
# 290 "../HPL_pddriver.c"
                    algo.pfact = rpfa;
                    {
                    __CrestLoad(188, (unsigned long )(& L1notran), (long long )L1notran);
                    __CrestLoad(187, (unsigned long )0, (long long )0);
                    __CrestApply2(186, 13, (long long )(L1notran != 0));
# 292 "../HPL_pddriver.c"
                    if (L1notran != 0) {
                      __CrestBranch(189, 139, 1);
                      {
                      __CrestLoad(193, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestLoad(192, (unsigned long )0, (long long )301U);
                      __CrestApply2(191, 12, (long long )((unsigned int )rpfa == 301U));
# 294 "../HPL_pddriver.c"
                      if ((unsigned int )rpfa == 301U) {
                        __CrestBranch(194, 140, 1);
# 294 "../HPL_pddriver.c"
                        algo.pffun = & HPL_pdpanllN;
                      } else {
                        __CrestBranch(195, 141, 0);
                        {
                        __CrestLoad(198, (unsigned long )(& rpfa), (long long )rpfa);
                        __CrestLoad(197, (unsigned long )0, (long long )302U);
                        __CrestApply2(196, 12, (long long )((unsigned int )rpfa == 302U));
# 295 "../HPL_pddriver.c"
                        if ((unsigned int )rpfa == 302U) {
                          __CrestBranch(199, 142, 1);
# 295 "../HPL_pddriver.c"
                          algo.pffun = & HPL_pdpancrN;
                        } else {
                          __CrestBranch(200, 143, 0);
# 296 "../HPL_pddriver.c"
                          algo.pffun = & HPL_pdpanrlN;
                        }
                        }
                      }
                      }
                      __CrestLoad(201, (unsigned long )(& rfaval[irfa]), (long long )rfaval[irfa]);
                      __CrestStore(202, (unsigned long )(& rpfa));
# 298 "../HPL_pddriver.c"
                      rpfa = rfaval[irfa];
                      __CrestLoad(203, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestStore(204, (unsigned long )(& algo.rfact));
# 298 "../HPL_pddriver.c"
                      algo.rfact = rpfa;
                      {
                      __CrestLoad(207, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestLoad(206, (unsigned long )0, (long long )301U);
                      __CrestApply2(205, 12, (long long )((unsigned int )rpfa == 301U));
# 299 "../HPL_pddriver.c"
                      if ((unsigned int )rpfa == 301U) {
                        __CrestBranch(208, 146, 1);
# 299 "../HPL_pddriver.c"
                        algo.rffun = & HPL_pdrpanllN;
                      } else {
                        __CrestBranch(209, 147, 0);
                        {
                        __CrestLoad(212, (unsigned long )(& rpfa), (long long )rpfa);
                        __CrestLoad(211, (unsigned long )0, (long long )302U);
                        __CrestApply2(210, 12, (long long )((unsigned int )rpfa == 302U));
# 300 "../HPL_pddriver.c"
                        if ((unsigned int )rpfa == 302U) {
                          __CrestBranch(213, 148, 1);
# 300 "../HPL_pddriver.c"
                          algo.rffun = & HPL_pdrpancrN;
                        } else {
                          __CrestBranch(214, 149, 0);
# 301 "../HPL_pddriver.c"
                          algo.rffun = & HPL_pdrpanrlN;
                        }
                        }
                      }
                      }
                      {
                      __CrestLoad(217, (unsigned long )(& Unotran), (long long )Unotran);
                      __CrestLoad(216, (unsigned long )0, (long long )0);
                      __CrestApply2(215, 13, (long long )(Unotran != 0));
# 303 "../HPL_pddriver.c"
                      if (Unotran != 0) {
                        __CrestBranch(218, 151, 1);
# 303 "../HPL_pddriver.c"
                        algo.upfun = & HPL_pdupdateNN;
                      } else {
                        __CrestBranch(219, 152, 0);
# 304 "../HPL_pddriver.c"
                        algo.upfun = & HPL_pdupdateNT;
                      }
                      }
                    } else {
                      __CrestBranch(190, 153, 0);
                      {
                      __CrestLoad(222, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestLoad(221, (unsigned long )0, (long long )301U);
                      __CrestApply2(220, 12, (long long )((unsigned int )rpfa == 301U));
# 308 "../HPL_pddriver.c"
                      if ((unsigned int )rpfa == 301U) {
                        __CrestBranch(223, 154, 1);
# 308 "../HPL_pddriver.c"
                        algo.pffun = & HPL_pdpanllT;
                      } else {
                        __CrestBranch(224, 155, 0);
                        {
                        __CrestLoad(227, (unsigned long )(& rpfa), (long long )rpfa);
                        __CrestLoad(226, (unsigned long )0, (long long )302U);
                        __CrestApply2(225, 12, (long long )((unsigned int )rpfa == 302U));
# 309 "../HPL_pddriver.c"
                        if ((unsigned int )rpfa == 302U) {
                          __CrestBranch(228, 156, 1);
# 309 "../HPL_pddriver.c"
                          algo.pffun = & HPL_pdpancrT;
                        } else {
                          __CrestBranch(229, 157, 0);
# 310 "../HPL_pddriver.c"
                          algo.pffun = & HPL_pdpanrlT;
                        }
                        }
                      }
                      }
                      __CrestLoad(230, (unsigned long )(& rfaval[irfa]), (long long )rfaval[irfa]);
                      __CrestStore(231, (unsigned long )(& rpfa));
# 312 "../HPL_pddriver.c"
                      rpfa = rfaval[irfa];
                      __CrestLoad(232, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestStore(233, (unsigned long )(& algo.rfact));
# 312 "../HPL_pddriver.c"
                      algo.rfact = rpfa;
                      {
                      __CrestLoad(236, (unsigned long )(& rpfa), (long long )rpfa);
                      __CrestLoad(235, (unsigned long )0, (long long )301U);
                      __CrestApply2(234, 12, (long long )((unsigned int )rpfa == 301U));
# 313 "../HPL_pddriver.c"
                      if ((unsigned int )rpfa == 301U) {
                        __CrestBranch(237, 160, 1);
# 313 "../HPL_pddriver.c"
                        algo.rffun = & HPL_pdrpanllT;
                      } else {
                        __CrestBranch(238, 161, 0);
                        {
                        __CrestLoad(241, (unsigned long )(& rpfa), (long long )rpfa);
                        __CrestLoad(240, (unsigned long )0, (long long )302U);
                        __CrestApply2(239, 12, (long long )((unsigned int )rpfa == 302U));
# 314 "../HPL_pddriver.c"
                        if ((unsigned int )rpfa == 302U) {
                          __CrestBranch(242, 162, 1);
# 314 "../HPL_pddriver.c"
                          algo.rffun = & HPL_pdrpancrT;
                        } else {
                          __CrestBranch(243, 163, 0);
# 315 "../HPL_pddriver.c"
                          algo.rffun = & HPL_pdrpanrlT;
                        }
                        }
                      }
                      }
                      {
                      __CrestLoad(246, (unsigned long )(& Unotran), (long long )Unotran);
                      __CrestLoad(245, (unsigned long )0, (long long )0);
                      __CrestApply2(244, 13, (long long )(Unotran != 0));
# 317 "../HPL_pddriver.c"
                      if (Unotran != 0) {
                        __CrestBranch(247, 165, 1);
# 317 "../HPL_pddriver.c"
                        algo.upfun = & HPL_pdupdateTN;
                      } else {
                        __CrestBranch(248, 166, 0);
# 318 "../HPL_pddriver.c"
                        algo.upfun = & HPL_pdupdateTT;
                      }
                      }
                    }
                    }
                    __CrestLoad(249, (unsigned long )(& fswap___3), (long long )fswap___3);
                    __CrestStore(250, (unsigned long )(& algo.fswap));
# 321 "../HPL_pddriver.c"
                    algo.fswap = fswap___3;
                    __CrestLoad(251, (unsigned long )(& tswap___3), (long long )tswap___3);
                    __CrestStore(252, (unsigned long )(& algo.fsthr));
# 321 "../HPL_pddriver.c"
                    algo.fsthr = tswap___3;
                    __CrestLoad(253, (unsigned long )(& equil___1), (long long )equil___1);
                    __CrestStore(254, (unsigned long )(& algo.equil));
# 322 "../HPL_pddriver.c"
                    algo.equil = equil___1;
                    __CrestLoad(255, (unsigned long )(& align), (long long )align);
                    __CrestStore(256, (unsigned long )(& algo.align));
# 322 "../HPL_pddriver.c"
                    algo.align = align;
                    __CrestLoad(257, (unsigned long )(& nval[in]), (long long )nval[in]);
                    __CrestLoad(258, (unsigned long )(& nbval[inb]), (long long )nbval[inb]);
# 324 "../HPL_pddriver.c"
                    HPL_pdtest(& test, & grid, & algo, (int const )nval[in], (int const )nbval[inb]);
                    __CrestClearStack(259);
                    __CrestLoad(262, (unsigned long )(& indv), (long long )indv);
                    __CrestLoad(261, (unsigned long )0, (long long )1);
                    __CrestApply2(260, 0, (long long )(indv + 1));
                    __CrestStore(263, (unsigned long )(& indv));
# 282 "../HPL_pddriver.c"
                    indv ++;
                  }
                  while_break___14: ;
                  }
                  __CrestLoad(266, (unsigned long )(& inbm), (long long )inbm);
                  __CrestLoad(265, (unsigned long )0, (long long )1);
                  __CrestApply2(264, 0, (long long )(inbm + 1));
                  __CrestStore(267, (unsigned long )(& inbm));
# 280 "../HPL_pddriver.c"
                  inbm ++;
                }
                while_break___13: ;
                }
                __CrestLoad(270, (unsigned long )(& ipfa), (long long )ipfa);
                __CrestLoad(269, (unsigned long )0, (long long )1);
                __CrestApply2(268, 0, (long long )(ipfa + 1));
                __CrestStore(271, (unsigned long )(& ipfa));
# 278 "../HPL_pddriver.c"
                ipfa ++;
              }
              while_break___12: ;
              }
              __CrestLoad(274, (unsigned long )(& irfa), (long long )irfa);
              __CrestLoad(273, (unsigned long )0, (long long )1);
              __CrestApply2(272, 0, (long long )(irfa + 1));
              __CrestStore(275, (unsigned long )(& irfa));
# 276 "../HPL_pddriver.c"
              irfa ++;
            }
            while_break___11: ;
            }
            __CrestLoad(278, (unsigned long )(& itop), (long long )itop);
            __CrestLoad(277, (unsigned long )0, (long long )1);
            __CrestApply2(276, 0, (long long )(itop + 1));
            __CrestStore(279, (unsigned long )(& itop));
# 274 "../HPL_pddriver.c"
            itop ++;
          }
          while_break___10: ;
          }
          __CrestLoad(282, (unsigned long )(& indh), (long long )indh);
          __CrestLoad(281, (unsigned long )0, (long long )1);
          __CrestApply2(280, 0, (long long )(indh + 1));
          __CrestStore(283, (unsigned long )(& indh));
# 272 "../HPL_pddriver.c"
          indh ++;
        }
        while_break___9: ;
        }
        __CrestLoad(286, (unsigned long )(& inb), (long long )inb);
        __CrestLoad(285, (unsigned long )0, (long long )1);
        __CrestApply2(284, 0, (long long )(inb + 1));
        __CrestStore(287, (unsigned long )(& inb));
# 270 "../HPL_pddriver.c"
        inb ++;
      }
      while_break___8: ;
      }
      __CrestLoad(290, (unsigned long )(& in), (long long )in);
      __CrestLoad(289, (unsigned long )0, (long long )1);
      __CrestApply2(288, 0, (long long )(in + 1));
      __CrestStore(291, (unsigned long )(& in));
# 268 "../HPL_pddriver.c"
      in ++;
    }
    while_break___7: ;
    }
# 334 "../HPL_pddriver.c"
    HPL_grid_exit(& grid);
    __CrestClearStack(292);
    label_end_of_npqs:
    __CrestLoad(295, (unsigned long )(& ipq), (long long )ipq);
    __CrestLoad(294, (unsigned long )0, (long long )1);
    __CrestApply2(293, 0, (long long )(ipq + 1));
    __CrestStore(296, (unsigned long )(& ipq));
# 259 "../HPL_pddriver.c"
    ipq ++;
  }
  while_break___6:
  __CrestLoad(299, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(298, (unsigned long )0, (long long )0);
  __CrestApply2(297, 12, (long long )(rank == 0));
# 340 "../HPL_pddriver.c"
  if (rank == 0) {
    __CrestBranch(300, 187, 1);
    __CrestLoad(306, (unsigned long )(& test.kpass), (long long )test.kpass);
    __CrestLoad(305, (unsigned long )(& test.kfail), (long long )test.kfail);
    __CrestApply2(304, 0, (long long )(test.kpass + test.kfail));
    __CrestLoad(303, (unsigned long )(& test.kskip), (long long )test.kskip);
    __CrestApply2(302, 0, (long long )((test.kpass + test.kfail) + test.kskip));
    __CrestStore(307, (unsigned long )(& test.ktest));
# 342 "../HPL_pddriver.c"
    test.ktest = (test.kpass + test.kfail) + test.kskip;
# 344 "../HPL_pddriver.c"
    HPL_fprintf(test.outfp, "%s%s\n", "======================================", "======================================");
    __CrestClearStack(308);
    __CrestLoad(309, (unsigned long )(& test.ktest), (long long )test.ktest);
# 354 "../HPL_pddriver.c"
    HPL_fprintf(test.outfp, "\n%s %6d %s\n", "Finished", test.ktest, "tests with the following results:");
    __CrestClearStack(310);
    {
    __CrestLoad(313, (unsigned long )(& test.thrsh), (long long )test.thrsh);
    __CrestLoad(312, (unsigned long )0, (long long )0.0);
    __CrestApply2(311, 14, (long long )(test.thrsh > 0.0));
# 356 "../HPL_pddriver.c"
    if (test.thrsh > 0.0) {
      __CrestBranch(314, 189, 1);
      __CrestLoad(316, (unsigned long )(& test.kpass), (long long )test.kpass);
# 358 "../HPL_pddriver.c"
      HPL_fprintf(test.outfp, "         %6d %s\n", test.kpass, "tests completed and passed residual checks,");
      __CrestClearStack(317);
      __CrestLoad(318, (unsigned long )(& test.kfail), (long long )test.kfail);
# 360 "../HPL_pddriver.c"
      HPL_fprintf(test.outfp, "         %6d %s\n", test.kfail, "tests completed and failed residual checks,");
      __CrestClearStack(319);
      __CrestLoad(320, (unsigned long )(& test.kskip), (long long )test.kskip);
# 362 "../HPL_pddriver.c"
      HPL_fprintf(test.outfp, "         %6d %s\n", test.kskip, "tests skipped because of illegal input values.");
      __CrestClearStack(321);
    } else {
      __CrestBranch(315, 190, 0);
      __CrestLoad(322, (unsigned long )(& test.kpass), (long long )test.kpass);
# 367 "../HPL_pddriver.c"
      HPL_fprintf(test.outfp, "         %6d %s\n", test.kpass, "tests completed without checking,");
      __CrestClearStack(323);
      __CrestLoad(324, (unsigned long )(& test.kskip), (long long )test.kskip);
# 369 "../HPL_pddriver.c"
      HPL_fprintf(test.outfp, "         %6d %s\n", test.kskip, "tests skipped because of illegal input values.");
      __CrestClearStack(325);
    }
    }
# 373 "../HPL_pddriver.c"
    HPL_fprintf(test.outfp, "%s%s\n", "--------------------------------------", "--------------------------------------");
    __CrestClearStack(326);
# 376 "../HPL_pddriver.c"
    HPL_fprintf(test.outfp, "\nEnd of Tests.\n");
    __CrestClearStack(327);
# 377 "../HPL_pddriver.c"
    HPL_fprintf(test.outfp, "%s%s\n", "======================================", "======================================");
    __CrestClearStack(328);
    {
    __CrestLoad(331, (unsigned long )(& test.outfp), (long long )((unsigned long )test.outfp));
    __CrestLoad(330, (unsigned long )(& stdout), (long long )((unsigned long )stdout));
    __CrestApply2(329, 13, (long long )((unsigned long )test.outfp != (unsigned long )stdout));
# 381 "../HPL_pddriver.c"
    if ((unsigned long )test.outfp != (unsigned long )stdout) {
      __CrestBranch(332, 193, 1);
      {
      __CrestLoad(336, (unsigned long )(& test.outfp), (long long )((unsigned long )test.outfp));
      __CrestLoad(335, (unsigned long )(& stderr), (long long )((unsigned long )stderr));
      __CrestApply2(334, 13, (long long )((unsigned long )test.outfp != (unsigned long )stderr));
# 381 "../HPL_pddriver.c"
      if ((unsigned long )test.outfp != (unsigned long )stderr) {
        __CrestBranch(337, 194, 1);
# 382 "../HPL_pddriver.c"
        fclose(test.outfp);
        __CrestClearStack(339);
      } else {
        __CrestBranch(338, 195, 0);

      }
      }
    } else {
      __CrestBranch(333, 196, 0);

    }
    }
  } else {
    __CrestBranch(301, 197, 0);

  }
# 387 "../HPL_pddriver.c"
  MPI_Finalize();
  __CrestClearStack(340);
  __CrestLoad(341, (unsigned long )0, (long long )0);
# 388 "../HPL_pddriver.c"
  exit(0);
  __CrestClearStack(342);
  __CrestLoad(343, (unsigned long )0, (long long )0);
  __CrestStore(344, (unsigned long )(& __retres55));
# 390 "../HPL_pddriver.c"
  __retres55 = 0;
  __CrestLoad(345, (unsigned long )(& __retres55), (long long )__retres55);
  __CrestReturn(346);
# 57 "../HPL_pddriver.c"
  return (__retres55);
}
}
# 1 "HPL_pdinfo.o"
#pragma merger("0","./HPL_pdinfo.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 272 "/usr/include/stdio.h"
extern FILE *fopen(char const * __restrict __filename , char const * __restrict __modes ) ;
# 433 "/usr/include/stdio.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) sscanf)(char const * __restrict __s ,
                                                                             char const * __restrict __format
                                                                             , ...) __asm__("__isoc99_sscanf") ;
# 622 "/usr/include/stdio.h"
extern char *fgets(char * __restrict __s , int __n , FILE * __restrict __stream ) ;
# 144 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) double ( __attribute__((__nonnull__(1), __leaf__)) atof)(char const *__nptr ) __attribute__((__pure__)) ;
# 147 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) atoi)(char const *__nptr ) __attribute__((__pure__)) ;
# 466 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size ) __attribute__((__malloc__)) ;
# 483 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
# 399 "/usr/include/string.h"
extern __attribute__((__nothrow__)) size_t ( __attribute__((__nonnull__(1), __leaf__)) strlen)(char const *__s ) __attribute__((__pure__)) ;
# 161 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_broadcast(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , int const ROOT ,
                  MPI_Comm COMM ) ;
# 178 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_all_reduce(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , void (* const OP)(int const ,
                                                                                                    void const * ,
                                                                                                    void * ,
                                                                                                    HPL_T_TYPE const ) ,
                   MPI_Comm COMM ) ;
# 187 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_max(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE ) ;
# 466 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pwarn(FILE *STREAM , int LINE , char const *SRNAME , char const *FORM
               , ...) ;
# 486 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
double HPL_pdlamch(MPI_Comm COMM , HPL_T_MACH const CMACH ) ;
# 53 "../HPL_pdinfo.c"
void HPL_pdinfo(HPL_T_test *TEST , int *NS , int *N , int *NBS , int *NB , HPL_T_ORDER *PMAPPIN ,
                int *NPQS , int *P , int *Q , int *NPFS , HPL_T_FACT *PF , int *NBMS ,
                int *NBM , int *NDVS , int *NDV , int *NRFS , HPL_T_FACT *RF , int *NTPS ,
                HPL_T_TOP *TP , int *NDHS , int *DH , HPL_T_SWAP *FSWAP , int *TSWAP ,
                int *L1NOTRAN , int *UNOTRAN , int *EQUIL , int *ALIGN )
{
  char file[256] ;
  char line[256] ;
  char auth[256] ;
  char num[256] ;
  FILE *infp ;
  int *iwork ;
  char *lineptr ;
  int error ;
  int fid ;
  int i ;
  int j ;
  int lwork ;
  int maxp ;
  int nprocs ;
  int rank ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  FILE *tmp___2 ;
  size_t tmp___3 ;
  size_t tmp___4 ;
  int tmp___6 ;
  size_t tmp___7 ;
  int tmp___8 ;
  size_t tmp___9 ;
  int tmp___10 ;
  size_t tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  size_t tmp___14 ;
  size_t tmp___15 ;
  size_t tmp___16 ;
  void *tmp___17 ;
  void *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  int *mem_84 ;
  int *mem_85 ;
  int *mem_86 ;
  int *mem_87 ;
  int *mem_88 ;
  int *mem_89 ;
  HPL_T_FACT *mem_90 ;
  HPL_T_FACT *mem_91 ;
  HPL_T_FACT *mem_92 ;
  HPL_T_FACT *mem_93 ;
  int *mem_94 ;
  int *mem_95 ;
  HPL_T_FACT *mem_96 ;
  HPL_T_FACT *mem_97 ;
  HPL_T_FACT *mem_98 ;
  HPL_T_FACT *mem_99 ;
  HPL_T_TOP *mem_100 ;
  HPL_T_TOP *mem_101 ;
  HPL_T_TOP *mem_102 ;
  HPL_T_TOP *mem_103 ;
  HPL_T_TOP *mem_104 ;
  HPL_T_TOP *mem_105 ;
  HPL_T_TOP *mem_106 ;
  int *mem_107 ;
  int *mem_108 ;
  int *mem_109 ;
  int *mem_110 ;
  int *mem_111 ;
  int *mem_112 ;
  int *mem_113 ;
  int *mem_114 ;
  int *mem_115 ;
  int *mem_116 ;
  int *mem_117 ;
  int *mem_118 ;
  int *mem_119 ;
  int *mem_120 ;
  int *mem_121 ;
  int *mem_122 ;
  int *mem_123 ;
  int *mem_124 ;
  int *mem_125 ;
  int *mem_126 ;
  int *mem_127 ;
  int *mem_128 ;
  int *mem_129 ;
  int *mem_130 ;
  int *mem_131 ;
  int *mem_132 ;
  int *mem_133 ;
  int *mem_134 ;
  int *mem_135 ;
  int *mem_136 ;
  int *mem_137 ;
  int *mem_138 ;
  int *mem_139 ;
  int *mem_140 ;
  int *mem_141 ;
  int *mem_142 ;
  int *mem_143 ;
  int *mem_144 ;
  int *mem_145 ;
  int *mem_146 ;
  HPL_T_FACT *mem_147 ;
  int *mem_148 ;
  HPL_T_FACT *mem_149 ;
  int *mem_150 ;
  HPL_T_FACT *mem_151 ;
  int *mem_152 ;
  int *mem_153 ;
  int *mem_154 ;
  int *mem_155 ;
  int *mem_156 ;
  HPL_T_FACT *mem_157 ;
  int *mem_158 ;
  HPL_T_FACT *mem_159 ;
  int *mem_160 ;
  HPL_T_FACT *mem_161 ;
  int *mem_162 ;
  HPL_T_TOP *mem_163 ;
  int *mem_164 ;
  HPL_T_TOP *mem_165 ;
  int *mem_166 ;
  HPL_T_TOP *mem_167 ;
  int *mem_168 ;
  HPL_T_TOP *mem_169 ;
  int *mem_170 ;
  HPL_T_TOP *mem_171 ;
  int *mem_172 ;
  HPL_T_TOP *mem_173 ;
  int *mem_174 ;
  int *mem_175 ;
  int *mem_176 ;
  int *mem_177 ;
  int *mem_178 ;
  int *mem_179 ;
  int *mem_180 ;
  int *mem_181 ;
  int *mem_182 ;
  int *mem_183 ;
  int *mem_184 ;
  int *mem_185 ;
  int *mem_186 ;
  int *mem_187 ;
  int *mem_188 ;
  HPL_T_FACT *mem_189 ;
  int *mem_190 ;
  HPL_T_FACT *mem_191 ;
  int *mem_192 ;
  HPL_T_FACT *mem_193 ;
  int *mem_194 ;
  int *mem_195 ;
  int *mem_196 ;
  int *mem_197 ;
  int *mem_198 ;
  HPL_T_FACT *mem_199 ;
  int *mem_200 ;
  HPL_T_FACT *mem_201 ;
  int *mem_202 ;
  HPL_T_FACT *mem_203 ;
  int *mem_204 ;
  HPL_T_TOP *mem_205 ;
  int *mem_206 ;
  HPL_T_TOP *mem_207 ;
  int *mem_208 ;
  HPL_T_TOP *mem_209 ;
  int *mem_210 ;
  HPL_T_TOP *mem_211 ;
  int *mem_212 ;
  HPL_T_TOP *mem_213 ;
  int *mem_214 ;
  HPL_T_TOP *mem_215 ;
  int *mem_216 ;
  int *mem_217 ;
  int *mem_218 ;
  int *mem_219 ;
  int *mem_220 ;
  int *mem_221 ;
  int *mem_222 ;
  int *mem_223 ;
  int *mem_224 ;
  int *mem_225 ;
  int *mem_226 ;
  int *mem_227 ;
  int *mem_228 ;
  int *mem_229 ;
  int *mem_230 ;
  int *mem_231 ;
  int *mem_232 ;
  HPL_T_FACT *mem_233 ;
  HPL_T_FACT *mem_234 ;
  HPL_T_FACT *mem_235 ;
  HPL_T_FACT *mem_236 ;
  HPL_T_FACT *mem_237 ;
  HPL_T_FACT *mem_238 ;
  HPL_T_FACT *mem_239 ;
  HPL_T_FACT *mem_240 ;
  HPL_T_FACT *mem_241 ;
  int *mem_242 ;
  int *mem_243 ;
  int *mem_244 ;
  int *mem_245 ;
  int *mem_246 ;
  int *mem_247 ;
  HPL_T_FACT *mem_248 ;
  HPL_T_FACT *mem_249 ;
  HPL_T_FACT *mem_250 ;
  HPL_T_FACT *mem_251 ;
  HPL_T_FACT *mem_252 ;
  HPL_T_FACT *mem_253 ;
  HPL_T_FACT *mem_254 ;
  HPL_T_FACT *mem_255 ;
  HPL_T_FACT *mem_256 ;
  HPL_T_TOP *mem_257 ;
  HPL_T_TOP *mem_258 ;
  HPL_T_TOP *mem_259 ;
  HPL_T_TOP *mem_260 ;
  HPL_T_TOP *mem_261 ;
  HPL_T_TOP *mem_262 ;
  HPL_T_TOP *mem_263 ;
  HPL_T_TOP *mem_264 ;
  HPL_T_TOP *mem_265 ;
  HPL_T_TOP *mem_266 ;
  HPL_T_TOP *mem_267 ;
  HPL_T_TOP *mem_268 ;
  HPL_T_TOP *mem_269 ;
  HPL_T_TOP *mem_270 ;
  HPL_T_TOP *mem_271 ;
  HPL_T_TOP *mem_272 ;
  HPL_T_TOP *mem_273 ;
  HPL_T_TOP *mem_274 ;
  int *mem_275 ;
  int *mem_276 ;
  int *mem_277 ;

  {
  __CrestCall(347, 2);
# 274 "../HPL_pdinfo.c"
  iwork = (int *)((void *)0);
  __CrestLoad(348, (unsigned long )0, (long long )0);
  __CrestStore(349, (unsigned long )(& error));
# 276 "../HPL_pdinfo.c"
  error = 0;
  __CrestLoad(350, (unsigned long )0, (long long )1140850688);
  __CrestRank((unsigned long )(& rank));
# 281 "../HPL_pdinfo.c"
  MPI_Comm_rank(1140850688, & rank);
  __CrestClearStack(351);
  __CrestLoad(352, (unsigned long )0, (long long )1140850688);
  __CrestWorldSizeWithLimit((unsigned long )(& size), 16);
# 282 "../HPL_pdinfo.c"
  MPI_Comm_size(1140850688, & size);
  __CrestClearStack(353);
# 286 "../HPL_pdinfo.c"
  TEST->outfp = stderr;
# 286 "../HPL_pdinfo.c"
  TEST->epsil = 2.0e-16;
# 286 "../HPL_pdinfo.c"
  TEST->thrsh = 16.0;
  __CrestLoad(354, (unsigned long )0, (long long )0);
  __CrestStore(355, (unsigned long )(& tmp___1));
# 287 "../HPL_pdinfo.c"
  tmp___1 = 0;
  __CrestLoad(356, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(357, (unsigned long )(& TEST->ktest));
# 287 "../HPL_pdinfo.c"
  TEST->ktest = tmp___1;
  __CrestLoad(358, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(359, (unsigned long )(& tmp___0));
# 287 "../HPL_pdinfo.c"
  tmp___0 = tmp___1;
  __CrestLoad(360, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(361, (unsigned long )(& TEST->kskip));
# 287 "../HPL_pdinfo.c"
  TEST->kskip = tmp___0;
  __CrestLoad(362, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(363, (unsigned long )(& tmp));
# 287 "../HPL_pdinfo.c"
  tmp = tmp___0;
  __CrestLoad(364, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(365, (unsigned long )(& TEST->kpass));
# 287 "../HPL_pdinfo.c"
  TEST->kpass = tmp;
  __CrestLoad(366, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(367, (unsigned long )(& TEST->kfail));
# 287 "../HPL_pdinfo.c"
  TEST->kfail = tmp;
  {
  __CrestLoad(370, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(369, (unsigned long )0, (long long )0);
  __CrestApply2(368, 12, (long long )(rank == 0));
# 292 "../HPL_pdinfo.c"
  if (rank == 0) {
    __CrestBranch(371, 203, 1);
# 297 "../HPL_pdinfo.c"
    infp = fopen((char const * __restrict )"HPL.dat", (char const * __restrict )"r");
    __CrestClearStack(373);
    {
    __CrestLoad(376, (unsigned long )(& infp), (long long )((unsigned long )infp));
    __CrestLoad(375, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(374, 12, (long long )((unsigned long )infp == (unsigned long )((void *)0)));
# 297 "../HPL_pdinfo.c"
    if ((unsigned long )infp == (unsigned long )((void *)0)) {
      __CrestBranch(377, 205, 1);
      __CrestLoad(379, (unsigned long )0, (long long )299);
# 299 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 299, "HPL_pdinfo", "cannot open file HPL.dat");
      __CrestClearStack(380);
      __CrestLoad(381, (unsigned long )0, (long long )1);
      __CrestStore(382, (unsigned long )(& error));
# 301 "../HPL_pdinfo.c"
      error = 1;
# 301 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(378, 207, 0);

    }
    }
    __CrestLoad(383, (unsigned long )0, (long long )254);
# 304 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(384);
    __CrestLoad(385, (unsigned long )0, (long long )254);
# 305 "../HPL_pdinfo.c"
    fgets((char * __restrict )(auth), 254, (FILE * __restrict )infp);
    __CrestClearStack(386);
    __CrestLoad(387, (unsigned long )0, (long long )254);
# 309 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(388);
# 310 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           file);
    __CrestClearStack(389);
    __CrestLoad(390, (unsigned long )0, (long long )254);
# 311 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(391);
# 312 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           num);
    __CrestClearStack(392);
# 313 "../HPL_pdinfo.c"
    fid = atoi((char const *)(num));
    __CrestHandleReturn(394, (long long )fid);
    __CrestStore(393, (unsigned long )(& fid));
    {
    __CrestLoad(397, (unsigned long )(& fid), (long long )fid);
    __CrestLoad(396, (unsigned long )0, (long long )6);
    __CrestApply2(395, 12, (long long )(fid == 6));
# 314 "../HPL_pdinfo.c"
    if (fid == 6) {
      __CrestBranch(398, 210, 1);
# 314 "../HPL_pdinfo.c"
      TEST->outfp = stdout;
    } else {
      __CrestBranch(399, 211, 0);
      {
      __CrestLoad(402, (unsigned long )(& fid), (long long )fid);
      __CrestLoad(401, (unsigned long )0, (long long )7);
      __CrestApply2(400, 12, (long long )(fid == 7));
# 315 "../HPL_pdinfo.c"
      if (fid == 7) {
        __CrestBranch(403, 212, 1);
# 315 "../HPL_pdinfo.c"
        TEST->outfp = stderr;
      } else {
        __CrestBranch(404, 213, 0);
# 316 "../HPL_pdinfo.c"
        tmp___2 = fopen((char const * __restrict )(file), (char const * __restrict )"w");
        __CrestClearStack(405);
# 316 "../HPL_pdinfo.c"
        TEST->outfp = tmp___2;
        {
        __CrestLoad(408, (unsigned long )(& tmp___2), (long long )((unsigned long )tmp___2));
        __CrestLoad(407, (unsigned long )0, (long long )((unsigned long )((void *)0)));
        __CrestApply2(406, 12, (long long )((unsigned long )tmp___2 == (unsigned long )((void *)0)));
# 316 "../HPL_pdinfo.c"
        if ((unsigned long )tmp___2 == (unsigned long )((void *)0)) {
          __CrestBranch(409, 215, 1);
          __CrestLoad(411, (unsigned long )0, (long long )318);
# 318 "../HPL_pdinfo.c"
          HPL_pwarn(stderr, 318, "HPL_pdinfo", "cannot open file %s.", file);
          __CrestClearStack(412);
          __CrestLoad(413, (unsigned long )0, (long long )1);
          __CrestStore(414, (unsigned long )(& error));
# 320 "../HPL_pdinfo.c"
          error = 1;
# 320 "../HPL_pdinfo.c"
          goto label_error;
        } else {
          __CrestBranch(410, 217, 0);

        }
        }
      }
      }
    }
    }
    __CrestLoad(415, (unsigned long )0, (long long )254);
# 327 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(416);
    {
    __CrestLoad(419, (unsigned long )NS, (long long )*NS);
    __CrestLoad(418, (unsigned long )0, (long long )1);
    __CrestApply2(417, 16, (long long )(*NS < 1));
# 329 "../HPL_pdinfo.c"
    if (*NS < 1) {
      __CrestBranch(420, 220, 1);
      __CrestLoad(422, (unsigned long )0, (long long )331);
      __CrestLoad(423, (unsigned long )0, (long long )20);
# 331 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 331, "HPL_pdinfo", "%s %d", "Number of values of N is less than 1 or greater than",
                20);
      __CrestClearStack(424);
      __CrestLoad(425, (unsigned long )0, (long long )1);
      __CrestStore(426, (unsigned long )(& error));
# 334 "../HPL_pdinfo.c"
      error = 1;
# 334 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(421, 222, 0);
      {
      __CrestLoad(429, (unsigned long )NS, (long long )*NS);
      __CrestLoad(428, (unsigned long )0, (long long )20);
      __CrestApply2(427, 14, (long long )(*NS > 20));
# 329 "../HPL_pdinfo.c"
      if (*NS > 20) {
        __CrestBranch(430, 223, 1);
        __CrestLoad(432, (unsigned long )0, (long long )331);
        __CrestLoad(433, (unsigned long )0, (long long )20);
# 331 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 331, "HPL_pdinfo", "%s %d", "Number of values of N is less than 1 or greater than",
                  20);
        __CrestClearStack(434);
        __CrestLoad(435, (unsigned long )0, (long long )1);
        __CrestStore(436, (unsigned long )(& error));
# 334 "../HPL_pdinfo.c"
        error = 1;
# 334 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(431, 225, 0);

      }
      }
    }
    }
    __CrestLoad(437, (unsigned long )0, (long long )254);
# 337 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(438);
# 337 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(439, (unsigned long )0, (long long )0);
    __CrestStore(440, (unsigned long )(& i));
# 338 "../HPL_pdinfo.c"
    i = 0;
    {
# 338 "../HPL_pdinfo.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(443, (unsigned long )(& i), (long long )i);
      __CrestLoad(442, (unsigned long )NS, (long long )*NS);
      __CrestApply2(441, 16, (long long )(i < *NS));
# 338 "../HPL_pdinfo.c"
      if (i < *NS) {
        __CrestBranch(444, 231, 1);

      } else {
        __CrestBranch(445, 232, 0);
# 338 "../HPL_pdinfo.c"
        goto while_break;
      }
      }
# 340 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(446);
# 340 "../HPL_pdinfo.c"
      tmp___3 = strlen((char const *)(num));
      __CrestHandleReturn(448, (long long )tmp___3);
      __CrestStore(447, (unsigned long )(& tmp___3));
# 340 "../HPL_pdinfo.c"
      lineptr += tmp___3 + 1UL;
      {
# 341 "../HPL_pdinfo.c"
      mem_84 = N + i;
      {
      __CrestLoad(451, (unsigned long )mem_84, (long long )*mem_84);
      __CrestLoad(450, (unsigned long )0, (long long )0);
      __CrestApply2(449, 16, (long long )(*mem_84 < 0));
# 341 "../HPL_pdinfo.c"
      if (*mem_84 < 0) {
        __CrestBranch(452, 237, 1);
        __CrestLoad(454, (unsigned long )0, (long long )344);
# 344 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 344, "HPL_pdinfo", "Value of N less than 0");
        __CrestClearStack(455);
        __CrestLoad(456, (unsigned long )0, (long long )1);
        __CrestStore(457, (unsigned long )(& error));
# 346 "../HPL_pdinfo.c"
        error = 1;
# 346 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(453, 239, 0);

      }
      }
      }
      __CrestLoad(460, (unsigned long )(& i), (long long )i);
      __CrestLoad(459, (unsigned long )0, (long long )1);
      __CrestApply2(458, 0, (long long )(i + 1));
      __CrestStore(461, (unsigned long )(& i));
# 338 "../HPL_pdinfo.c"
      i ++;
    }
    while_break: ;
    }
    __CrestLoad(462, (unsigned long )0, (long long )254);
# 352 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(463);
    {
    __CrestLoad(466, (unsigned long )NBS, (long long )*NBS);
    __CrestLoad(465, (unsigned long )0, (long long )1);
    __CrestApply2(464, 16, (long long )(*NBS < 1));
# 354 "../HPL_pdinfo.c"
    if (*NBS < 1) {
      __CrestBranch(467, 244, 1);
      __CrestLoad(469, (unsigned long )0, (long long )356);
      __CrestLoad(470, (unsigned long )0, (long long )20);
# 356 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 356, "HPL_pdinfo", "%s %s %d", "Number of values of NB is less than 1 or",
                "greater than", 20);
      __CrestClearStack(471);
      __CrestLoad(472, (unsigned long )0, (long long )1);
      __CrestStore(473, (unsigned long )(& error));
# 359 "../HPL_pdinfo.c"
      error = 1;
# 359 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(468, 246, 0);
      {
      __CrestLoad(476, (unsigned long )NBS, (long long )*NBS);
      __CrestLoad(475, (unsigned long )0, (long long )20);
      __CrestApply2(474, 14, (long long )(*NBS > 20));
# 354 "../HPL_pdinfo.c"
      if (*NBS > 20) {
        __CrestBranch(477, 247, 1);
        __CrestLoad(479, (unsigned long )0, (long long )356);
        __CrestLoad(480, (unsigned long )0, (long long )20);
# 356 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 356, "HPL_pdinfo", "%s %s %d", "Number of values of NB is less than 1 or",
                  "greater than", 20);
        __CrestClearStack(481);
        __CrestLoad(482, (unsigned long )0, (long long )1);
        __CrestStore(483, (unsigned long )(& error));
# 359 "../HPL_pdinfo.c"
        error = 1;
# 359 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(478, 249, 0);

      }
      }
    }
    }
    __CrestLoad(484, (unsigned long )0, (long long )254);
# 362 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(485);
# 362 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(486, (unsigned long )0, (long long )0);
    __CrestStore(487, (unsigned long )(& i));
# 363 "../HPL_pdinfo.c"
    i = 0;
    {
# 363 "../HPL_pdinfo.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(490, (unsigned long )(& i), (long long )i);
      __CrestLoad(489, (unsigned long )NBS, (long long )*NBS);
      __CrestApply2(488, 16, (long long )(i < *NBS));
# 363 "../HPL_pdinfo.c"
      if (i < *NBS) {
        __CrestBranch(491, 255, 1);

      } else {
        __CrestBranch(492, 256, 0);
# 363 "../HPL_pdinfo.c"
        goto while_break___0;
      }
      }
# 365 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(493);
# 365 "../HPL_pdinfo.c"
      tmp___4 = strlen((char const *)(num));
      __CrestHandleReturn(495, (long long )tmp___4);
      __CrestStore(494, (unsigned long )(& tmp___4));
# 365 "../HPL_pdinfo.c"
      lineptr += tmp___4 + 1UL;
      {
# 366 "../HPL_pdinfo.c"
      mem_85 = NB + i;
      {
      __CrestLoad(498, (unsigned long )mem_85, (long long )*mem_85);
      __CrestLoad(497, (unsigned long )0, (long long )1);
      __CrestApply2(496, 16, (long long )(*mem_85 < 1));
# 366 "../HPL_pdinfo.c"
      if (*mem_85 < 1) {
        __CrestBranch(499, 261, 1);
        __CrestLoad(501, (unsigned long )0, (long long )369);
# 369 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 369, "HPL_pdinfo", "Value of NB less than 1");
        __CrestClearStack(502);
        __CrestLoad(503, (unsigned long )0, (long long )1);
        __CrestStore(504, (unsigned long )(& error));
# 371 "../HPL_pdinfo.c"
        error = 1;
# 371 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(500, 263, 0);

      }
      }
      }
      __CrestLoad(507, (unsigned long )(& i), (long long )i);
      __CrestLoad(506, (unsigned long )0, (long long )1);
      __CrestApply2(505, 0, (long long )(i + 1));
      __CrestStore(508, (unsigned long )(& i));
# 363 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(509, (unsigned long )0, (long long )254);
# 377 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(510);
# 378 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           num);
    __CrestClearStack(511);
# 379 "../HPL_pdinfo.c"
    tmp___6 = atoi((char const *)(num));
    __CrestHandleReturn(513, (long long )tmp___6);
    __CrestStore(512, (unsigned long )(& tmp___6));
    {
    __CrestLoad(516, (unsigned long )(& tmp___6), (long long )tmp___6);
    __CrestLoad(515, (unsigned long )0, (long long )1);
    __CrestApply2(514, 12, (long long )(tmp___6 == 1));
# 379 "../HPL_pdinfo.c"
    if (tmp___6 == 1) {
      __CrestBranch(517, 268, 1);
      __CrestLoad(519, (unsigned long )0, (long long )((HPL_T_ORDER )202));
      __CrestStore(520, (unsigned long )PMAPPIN);
# 379 "../HPL_pdinfo.c"
      *PMAPPIN = (HPL_T_ORDER )202;
    } else {
      __CrestBranch(518, 269, 0);
      __CrestLoad(521, (unsigned long )0, (long long )((HPL_T_ORDER )201));
      __CrestStore(522, (unsigned long )PMAPPIN);
# 379 "../HPL_pdinfo.c"
      *PMAPPIN = (HPL_T_ORDER )201;
    }
    }
    __CrestLoad(523, (unsigned long )0, (long long )254);
# 381 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(524);
    {
    __CrestLoad(527, (unsigned long )NPQS, (long long )*NPQS);
    __CrestLoad(526, (unsigned long )0, (long long )1);
    __CrestApply2(525, 16, (long long )(*NPQS < 1));
# 383 "../HPL_pdinfo.c"
    if (*NPQS < 1) {
      __CrestBranch(528, 272, 1);
      __CrestLoad(530, (unsigned long )0, (long long )385);
      __CrestLoad(531, (unsigned long )0, (long long )20);
# 385 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 385, "HPL_pdinfo", "%s %s %d", "Number of values of grids is less",
                "than 1 or greater than", 20);
      __CrestClearStack(532);
      __CrestLoad(533, (unsigned long )0, (long long )1);
      __CrestStore(534, (unsigned long )(& error));
# 388 "../HPL_pdinfo.c"
      error = 1;
# 388 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(529, 274, 0);
      {
      __CrestLoad(537, (unsigned long )NPQS, (long long )*NPQS);
      __CrestLoad(536, (unsigned long )0, (long long )20);
      __CrestApply2(535, 14, (long long )(*NPQS > 20));
# 383 "../HPL_pdinfo.c"
      if (*NPQS > 20) {
        __CrestBranch(538, 275, 1);
        __CrestLoad(540, (unsigned long )0, (long long )385);
        __CrestLoad(541, (unsigned long )0, (long long )20);
# 385 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 385, "HPL_pdinfo", "%s %s %d", "Number of values of grids is less",
                  "than 1 or greater than", 20);
        __CrestClearStack(542);
        __CrestLoad(543, (unsigned long )0, (long long )1);
        __CrestStore(544, (unsigned long )(& error));
# 388 "../HPL_pdinfo.c"
        error = 1;
# 388 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(539, 277, 0);

      }
      }
    }
    }
    __CrestLoad(545, (unsigned long )0, (long long )254);
# 391 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(546);
# 391 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(547, (unsigned long )0, (long long )0);
    __CrestStore(548, (unsigned long )(& i));
# 392 "../HPL_pdinfo.c"
    i = 0;
    {
# 392 "../HPL_pdinfo.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(551, (unsigned long )(& i), (long long )i);
      __CrestLoad(550, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(549, 16, (long long )(i < *NPQS));
# 392 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(552, 283, 1);

      } else {
        __CrestBranch(553, 284, 0);
# 392 "../HPL_pdinfo.c"
        goto while_break___1;
      }
      }
# 394 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(554);
# 394 "../HPL_pdinfo.c"
      tmp___7 = strlen((char const *)(num));
      __CrestHandleReturn(556, (long long )tmp___7);
      __CrestStore(555, (unsigned long )(& tmp___7));
# 394 "../HPL_pdinfo.c"
      lineptr += tmp___7 + 1UL;
# 396 "../HPL_pdinfo.c"
      tmp___8 = atoi((char const *)(num));
      __CrestHandleReturn(558, (long long )tmp___8);
      __CrestStore(557, (unsigned long )(& tmp___8));
# 396 "../HPL_pdinfo.c"
      mem_86 = P + i;
      __CrestLoad(559, (unsigned long )(& tmp___8), (long long )tmp___8);
      __CrestStore(560, (unsigned long )mem_86);
# 396 "../HPL_pdinfo.c"
      *mem_86 = tmp___8;
      {
      __CrestLoad(563, (unsigned long )(& tmp___8), (long long )tmp___8);
      __CrestLoad(562, (unsigned long )0, (long long )1);
      __CrestApply2(561, 16, (long long )(tmp___8 < 1));
# 396 "../HPL_pdinfo.c"
      if (tmp___8 < 1) {
        __CrestBranch(564, 287, 1);
        __CrestLoad(566, (unsigned long )0, (long long )398);
# 398 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 398, "HPL_pdinfo", "Value of P less than 1");
        __CrestClearStack(567);
        __CrestLoad(568, (unsigned long )0, (long long )1);
        __CrestStore(569, (unsigned long )(& error));
# 400 "../HPL_pdinfo.c"
        error = 1;
# 400 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(565, 289, 0);

      }
      }
      __CrestLoad(572, (unsigned long )(& i), (long long )i);
      __CrestLoad(571, (unsigned long )0, (long long )1);
      __CrestApply2(570, 0, (long long )(i + 1));
      __CrestStore(573, (unsigned long )(& i));
# 392 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___1: ;
    }
    __CrestLoad(574, (unsigned long )0, (long long )254);
# 403 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(575);
# 403 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(576, (unsigned long )0, (long long )0);
    __CrestStore(577, (unsigned long )(& i));
# 404 "../HPL_pdinfo.c"
    i = 0;
    {
# 404 "../HPL_pdinfo.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(580, (unsigned long )(& i), (long long )i);
      __CrestLoad(579, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(578, 16, (long long )(i < *NPQS));
# 404 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(581, 297, 1);

      } else {
        __CrestBranch(582, 298, 0);
# 404 "../HPL_pdinfo.c"
        goto while_break___2;
      }
      }
# 406 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(583);
# 406 "../HPL_pdinfo.c"
      tmp___9 = strlen((char const *)(num));
      __CrestHandleReturn(585, (long long )tmp___9);
      __CrestStore(584, (unsigned long )(& tmp___9));
# 406 "../HPL_pdinfo.c"
      lineptr += tmp___9 + 1UL;
# 408 "../HPL_pdinfo.c"
      tmp___10 = atoi((char const *)(num));
      __CrestHandleReturn(587, (long long )tmp___10);
      __CrestStore(586, (unsigned long )(& tmp___10));
# 408 "../HPL_pdinfo.c"
      mem_87 = Q + i;
      __CrestLoad(588, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestStore(589, (unsigned long )mem_87);
# 408 "../HPL_pdinfo.c"
      *mem_87 = tmp___10;
      {
      __CrestLoad(592, (unsigned long )(& tmp___10), (long long )tmp___10);
      __CrestLoad(591, (unsigned long )0, (long long )1);
      __CrestApply2(590, 16, (long long )(tmp___10 < 1));
# 408 "../HPL_pdinfo.c"
      if (tmp___10 < 1) {
        __CrestBranch(593, 301, 1);
        __CrestLoad(595, (unsigned long )0, (long long )410);
# 410 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 410, "HPL_pdinfo", "Value of Q less than 1");
        __CrestClearStack(596);
        __CrestLoad(597, (unsigned long )0, (long long )1);
        __CrestStore(598, (unsigned long )(& error));
# 412 "../HPL_pdinfo.c"
        error = 1;
# 412 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(594, 303, 0);

      }
      }
      __CrestLoad(601, (unsigned long )(& i), (long long )i);
      __CrestLoad(600, (unsigned long )0, (long long )1);
      __CrestApply2(599, 0, (long long )(i + 1));
      __CrestStore(602, (unsigned long )(& i));
# 404 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___2: ;
    }
    __CrestLoad(603, (unsigned long )0, (long long )0);
    __CrestStore(604, (unsigned long )(& maxp));
# 418 "../HPL_pdinfo.c"
    maxp = 0;
    __CrestLoad(605, (unsigned long )0, (long long )0);
    __CrestStore(606, (unsigned long )(& i));
# 419 "../HPL_pdinfo.c"
    i = 0;
    {
# 419 "../HPL_pdinfo.c"
    while (1) {
      while_continue___3: ;
      {
      __CrestLoad(609, (unsigned long )(& i), (long long )i);
      __CrestLoad(608, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(607, 16, (long long )(i < *NPQS));
# 419 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(610, 311, 1);

      } else {
        __CrestBranch(611, 312, 0);
# 419 "../HPL_pdinfo.c"
        goto while_break___3;
      }
      }
# 420 "../HPL_pdinfo.c"
      mem_88 = P + i;
# 420 "../HPL_pdinfo.c"
      mem_89 = Q + i;
      __CrestLoad(614, (unsigned long )mem_88, (long long )*mem_88);
      __CrestLoad(613, (unsigned long )mem_89, (long long )*mem_89);
      __CrestApply2(612, 2, (long long )(*mem_88 * *mem_89));
      __CrestStore(615, (unsigned long )(& nprocs));
# 420 "../HPL_pdinfo.c"
      nprocs = *mem_88 * *mem_89;
      {
      __CrestLoad(618, (unsigned long )(& maxp), (long long )maxp);
      __CrestLoad(617, (unsigned long )(& nprocs), (long long )nprocs);
      __CrestApply2(616, 14, (long long )(maxp > nprocs));
# 420 "../HPL_pdinfo.c"
      if (maxp > nprocs) {
        __CrestBranch(619, 315, 1);
        __CrestLoad(621, (unsigned long )(& maxp), (long long )maxp);
        __CrestStore(622, (unsigned long )(& maxp));
# 420 "../HPL_pdinfo.c"
        maxp = maxp;
      } else {
        __CrestBranch(620, 316, 0);
        __CrestLoad(623, (unsigned long )(& nprocs), (long long )nprocs);
        __CrestStore(624, (unsigned long )(& maxp));
# 420 "../HPL_pdinfo.c"
        maxp = nprocs;
      }
      }
      __CrestLoad(627, (unsigned long )(& i), (long long )i);
      __CrestLoad(626, (unsigned long )0, (long long )1);
      __CrestApply2(625, 0, (long long )(i + 1));
      __CrestStore(628, (unsigned long )(& i));
# 419 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___3: ;
    }
    {
    __CrestLoad(631, (unsigned long )(& maxp), (long long )maxp);
    __CrestLoad(630, (unsigned long )(& size), (long long )size);
    __CrestApply2(629, 14, (long long )(maxp > size));
# 421 "../HPL_pdinfo.c"
    if (maxp > size) {
      __CrestBranch(632, 320, 1);
      __CrestLoad(634, (unsigned long )0, (long long )423);
      __CrestLoad(635, (unsigned long )(& maxp), (long long )maxp);
# 423 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 423, "HPL_pdinfo", "Need at least %d processes for these tests",
                maxp);
      __CrestClearStack(636);
      __CrestLoad(637, (unsigned long )0, (long long )1);
      __CrestStore(638, (unsigned long )(& error));
# 425 "../HPL_pdinfo.c"
      error = 1;
# 425 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(633, 322, 0);

    }
    }
    __CrestLoad(639, (unsigned long )0, (long long )254);
# 430 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(640);
# 431 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           num);
    __CrestClearStack(641);
# 431 "../HPL_pdinfo.c"
    TEST->thrsh = atof((char const *)(num));
    __CrestClearStack(642);
    __CrestLoad(643, (unsigned long )0, (long long )254);
# 435 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(644);
    {
    __CrestLoad(647, (unsigned long )NPFS, (long long )*NPFS);
    __CrestLoad(646, (unsigned long )0, (long long )1);
    __CrestApply2(645, 16, (long long )(*NPFS < 1));
# 437 "../HPL_pdinfo.c"
    if (*NPFS < 1) {
      __CrestBranch(648, 325, 1);
      __CrestLoad(650, (unsigned long )0, (long long )439);
      __CrestLoad(651, (unsigned long )0, (long long )20);
# 439 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 439, "HPL_pdinfo", "%s %s %d", "number of values of PFACT",
                "is less than 1 or greater than", 20);
      __CrestClearStack(652);
      __CrestLoad(653, (unsigned long )0, (long long )1);
      __CrestStore(654, (unsigned long )(& error));
# 442 "../HPL_pdinfo.c"
      error = 1;
# 442 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(649, 327, 0);
      {
      __CrestLoad(657, (unsigned long )NPFS, (long long )*NPFS);
      __CrestLoad(656, (unsigned long )0, (long long )20);
      __CrestApply2(655, 14, (long long )(*NPFS > 20));
# 437 "../HPL_pdinfo.c"
      if (*NPFS > 20) {
        __CrestBranch(658, 328, 1);
        __CrestLoad(660, (unsigned long )0, (long long )439);
        __CrestLoad(661, (unsigned long )0, (long long )20);
# 439 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 439, "HPL_pdinfo", "%s %s %d", "number of values of PFACT",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(662);
        __CrestLoad(663, (unsigned long )0, (long long )1);
        __CrestStore(664, (unsigned long )(& error));
# 442 "../HPL_pdinfo.c"
        error = 1;
# 442 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(659, 330, 0);

      }
      }
    }
    }
    __CrestLoad(665, (unsigned long )0, (long long )254);
# 444 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(666);
# 444 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(667, (unsigned long )0, (long long )0);
    __CrestStore(668, (unsigned long )(& i));
# 445 "../HPL_pdinfo.c"
    i = 0;
    {
# 445 "../HPL_pdinfo.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(671, (unsigned long )(& i), (long long )i);
      __CrestLoad(670, (unsigned long )NPFS, (long long )*NPFS);
      __CrestApply2(669, 16, (long long )(i < *NPFS));
# 445 "../HPL_pdinfo.c"
      if (i < *NPFS) {
        __CrestBranch(672, 336, 1);

      } else {
        __CrestBranch(673, 337, 0);
# 445 "../HPL_pdinfo.c"
        goto while_break___4;
      }
      }
# 447 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(674);
# 447 "../HPL_pdinfo.c"
      tmp___11 = strlen((char const *)(num));
      __CrestHandleReturn(676, (long long )tmp___11);
      __CrestStore(675, (unsigned long )(& tmp___11));
# 447 "../HPL_pdinfo.c"
      lineptr += tmp___11 + 1UL;
# 448 "../HPL_pdinfo.c"
      j = atoi((char const *)(num));
      __CrestHandleReturn(678, (long long )j);
      __CrestStore(677, (unsigned long )(& j));
      {
      __CrestLoad(681, (unsigned long )(& j), (long long )j);
      __CrestLoad(680, (unsigned long )0, (long long )0);
      __CrestApply2(679, 12, (long long )(j == 0));
# 449 "../HPL_pdinfo.c"
      if (j == 0) {
        __CrestBranch(682, 340, 1);
# 449 "../HPL_pdinfo.c"
        mem_90 = PF + i;
        __CrestLoad(684, (unsigned long )0, (long long )((HPL_T_FACT )301));
        __CrestStore(685, (unsigned long )mem_90);
# 449 "../HPL_pdinfo.c"
        *mem_90 = (HPL_T_FACT )301;
      } else {
        __CrestBranch(683, 341, 0);
        {
        __CrestLoad(688, (unsigned long )(& j), (long long )j);
        __CrestLoad(687, (unsigned long )0, (long long )1);
        __CrestApply2(686, 12, (long long )(j == 1));
# 450 "../HPL_pdinfo.c"
        if (j == 1) {
          __CrestBranch(689, 342, 1);
# 450 "../HPL_pdinfo.c"
          mem_91 = PF + i;
          __CrestLoad(691, (unsigned long )0, (long long )((HPL_T_FACT )302));
          __CrestStore(692, (unsigned long )mem_91);
# 450 "../HPL_pdinfo.c"
          *mem_91 = (HPL_T_FACT )302;
        } else {
          __CrestBranch(690, 343, 0);
          {
          __CrestLoad(695, (unsigned long )(& j), (long long )j);
          __CrestLoad(694, (unsigned long )0, (long long )2);
          __CrestApply2(693, 12, (long long )(j == 2));
# 451 "../HPL_pdinfo.c"
          if (j == 2) {
            __CrestBranch(696, 344, 1);
# 451 "../HPL_pdinfo.c"
            mem_92 = PF + i;
            __CrestLoad(698, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(699, (unsigned long )mem_92);
# 451 "../HPL_pdinfo.c"
            *mem_92 = (HPL_T_FACT )303;
          } else {
            __CrestBranch(697, 345, 0);
# 452 "../HPL_pdinfo.c"
            mem_93 = PF + i;
            __CrestLoad(700, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(701, (unsigned long )mem_93);
# 452 "../HPL_pdinfo.c"
            *mem_93 = (HPL_T_FACT )303;
          }
          }
        }
        }
      }
      }
      __CrestLoad(704, (unsigned long )(& i), (long long )i);
      __CrestLoad(703, (unsigned long )0, (long long )1);
      __CrestApply2(702, 0, (long long )(i + 1));
      __CrestStore(705, (unsigned long )(& i));
# 445 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___4: ;
    }
    __CrestLoad(706, (unsigned long )0, (long long )254);
# 457 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(707);
    {
    __CrestLoad(710, (unsigned long )NBMS, (long long )*NBMS);
    __CrestLoad(709, (unsigned long )0, (long long )1);
    __CrestApply2(708, 16, (long long )(*NBMS < 1));
# 459 "../HPL_pdinfo.c"
    if (*NBMS < 1) {
      __CrestBranch(711, 350, 1);
      __CrestLoad(713, (unsigned long )0, (long long )461);
      __CrestLoad(714, (unsigned long )0, (long long )20);
# 461 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 461, "HPL_pdinfo", "%s %s %d", "Number of values of NBMIN",
                "is less than 1 or greater than", 20);
      __CrestClearStack(715);
      __CrestLoad(716, (unsigned long )0, (long long )1);
      __CrestStore(717, (unsigned long )(& error));
# 464 "../HPL_pdinfo.c"
      error = 1;
# 464 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(712, 352, 0);
      {
      __CrestLoad(720, (unsigned long )NBMS, (long long )*NBMS);
      __CrestLoad(719, (unsigned long )0, (long long )20);
      __CrestApply2(718, 14, (long long )(*NBMS > 20));
# 459 "../HPL_pdinfo.c"
      if (*NBMS > 20) {
        __CrestBranch(721, 353, 1);
        __CrestLoad(723, (unsigned long )0, (long long )461);
        __CrestLoad(724, (unsigned long )0, (long long )20);
# 461 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 461, "HPL_pdinfo", "%s %s %d", "Number of values of NBMIN",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(725);
        __CrestLoad(726, (unsigned long )0, (long long )1);
        __CrestStore(727, (unsigned long )(& error));
# 464 "../HPL_pdinfo.c"
        error = 1;
# 464 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(722, 355, 0);

      }
      }
    }
    }
    __CrestLoad(728, (unsigned long )0, (long long )254);
# 466 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(729);
# 466 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(730, (unsigned long )0, (long long )0);
    __CrestStore(731, (unsigned long )(& i));
# 467 "../HPL_pdinfo.c"
    i = 0;
    {
# 467 "../HPL_pdinfo.c"
    while (1) {
      while_continue___5: ;
      {
      __CrestLoad(734, (unsigned long )(& i), (long long )i);
      __CrestLoad(733, (unsigned long )NBMS, (long long )*NBMS);
      __CrestApply2(732, 16, (long long )(i < *NBMS));
# 467 "../HPL_pdinfo.c"
      if (i < *NBMS) {
        __CrestBranch(735, 361, 1);

      } else {
        __CrestBranch(736, 362, 0);
# 467 "../HPL_pdinfo.c"
        goto while_break___5;
      }
      }
# 469 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(737);
# 469 "../HPL_pdinfo.c"
      tmp___12 = strlen((char const *)(num));
      __CrestHandleReturn(739, (long long )tmp___12);
      __CrestStore(738, (unsigned long )(& tmp___12));
# 469 "../HPL_pdinfo.c"
      lineptr += tmp___12 + 1UL;
      {
# 471 "../HPL_pdinfo.c"
      mem_94 = NBM + i;
      {
      __CrestLoad(742, (unsigned long )mem_94, (long long )*mem_94);
      __CrestLoad(741, (unsigned long )0, (long long )1);
      __CrestApply2(740, 16, (long long )(*mem_94 < 1));
# 471 "../HPL_pdinfo.c"
      if (*mem_94 < 1) {
        __CrestBranch(743, 367, 1);
        __CrestLoad(745, (unsigned long )0, (long long )473);
# 473 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 473, "HPL_pdinfo", "Value of NBMIN less than 1");
        __CrestClearStack(746);
        __CrestLoad(747, (unsigned long )0, (long long )1);
        __CrestStore(748, (unsigned long )(& error));
# 475 "../HPL_pdinfo.c"
        error = 1;
# 475 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(744, 369, 0);

      }
      }
      }
      __CrestLoad(751, (unsigned long )(& i), (long long )i);
      __CrestLoad(750, (unsigned long )0, (long long )1);
      __CrestApply2(749, 0, (long long )(i + 1));
      __CrestStore(752, (unsigned long )(& i));
# 467 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___5: ;
    }
    __CrestLoad(753, (unsigned long )0, (long long )254);
# 481 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(754);
    {
    __CrestLoad(757, (unsigned long )NDVS, (long long )*NDVS);
    __CrestLoad(756, (unsigned long )0, (long long )1);
    __CrestApply2(755, 16, (long long )(*NDVS < 1));
# 483 "../HPL_pdinfo.c"
    if (*NDVS < 1) {
      __CrestBranch(758, 374, 1);
      __CrestLoad(760, (unsigned long )0, (long long )485);
      __CrestLoad(761, (unsigned long )0, (long long )20);
# 485 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 485, "HPL_pdinfo", "%s %s %d", "Number of values of NDIV",
                "is less than 1 or greater than", 20);
      __CrestClearStack(762);
      __CrestLoad(763, (unsigned long )0, (long long )1);
      __CrestStore(764, (unsigned long )(& error));
# 488 "../HPL_pdinfo.c"
      error = 1;
# 488 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(759, 376, 0);
      {
      __CrestLoad(767, (unsigned long )NDVS, (long long )*NDVS);
      __CrestLoad(766, (unsigned long )0, (long long )20);
      __CrestApply2(765, 14, (long long )(*NDVS > 20));
# 483 "../HPL_pdinfo.c"
      if (*NDVS > 20) {
        __CrestBranch(768, 377, 1);
        __CrestLoad(770, (unsigned long )0, (long long )485);
        __CrestLoad(771, (unsigned long )0, (long long )20);
# 485 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 485, "HPL_pdinfo", "%s %s %d", "Number of values of NDIV",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(772);
        __CrestLoad(773, (unsigned long )0, (long long )1);
        __CrestStore(774, (unsigned long )(& error));
# 488 "../HPL_pdinfo.c"
        error = 1;
# 488 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(769, 379, 0);

      }
      }
    }
    }
    __CrestLoad(775, (unsigned long )0, (long long )254);
# 490 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(776);
# 490 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(777, (unsigned long )0, (long long )0);
    __CrestStore(778, (unsigned long )(& i));
# 491 "../HPL_pdinfo.c"
    i = 0;
    {
# 491 "../HPL_pdinfo.c"
    while (1) {
      while_continue___6: ;
      {
      __CrestLoad(781, (unsigned long )(& i), (long long )i);
      __CrestLoad(780, (unsigned long )NDVS, (long long )*NDVS);
      __CrestApply2(779, 16, (long long )(i < *NDVS));
# 491 "../HPL_pdinfo.c"
      if (i < *NDVS) {
        __CrestBranch(782, 385, 1);

      } else {
        __CrestBranch(783, 386, 0);
# 491 "../HPL_pdinfo.c"
        goto while_break___6;
      }
      }
# 493 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(784);
# 493 "../HPL_pdinfo.c"
      tmp___13 = strlen((char const *)(num));
      __CrestHandleReturn(786, (long long )tmp___13);
      __CrestStore(785, (unsigned long )(& tmp___13));
# 493 "../HPL_pdinfo.c"
      lineptr += tmp___13 + 1UL;
      {
# 494 "../HPL_pdinfo.c"
      mem_95 = NDV + i;
      {
      __CrestLoad(789, (unsigned long )mem_95, (long long )*mem_95);
      __CrestLoad(788, (unsigned long )0, (long long )2);
      __CrestApply2(787, 16, (long long )(*mem_95 < 2));
# 494 "../HPL_pdinfo.c"
      if (*mem_95 < 2) {
        __CrestBranch(790, 391, 1);
        __CrestLoad(792, (unsigned long )0, (long long )497);
# 497 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 497, "HPL_pdinfo", "Value of NDIV less than 2");
        __CrestClearStack(793);
        __CrestLoad(794, (unsigned long )0, (long long )1);
        __CrestStore(795, (unsigned long )(& error));
# 499 "../HPL_pdinfo.c"
        error = 1;
# 499 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(791, 393, 0);

      }
      }
      }
      __CrestLoad(798, (unsigned long )(& i), (long long )i);
      __CrestLoad(797, (unsigned long )0, (long long )1);
      __CrestApply2(796, 0, (long long )(i + 1));
      __CrestStore(799, (unsigned long )(& i));
# 491 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___6: ;
    }
    __CrestLoad(800, (unsigned long )0, (long long )254);
# 505 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(801);
    {
    __CrestLoad(804, (unsigned long )NRFS, (long long )*NRFS);
    __CrestLoad(803, (unsigned long )0, (long long )1);
    __CrestApply2(802, 16, (long long )(*NRFS < 1));
# 507 "../HPL_pdinfo.c"
    if (*NRFS < 1) {
      __CrestBranch(805, 398, 1);
      __CrestLoad(807, (unsigned long )0, (long long )509);
      __CrestLoad(808, (unsigned long )0, (long long )20);
# 509 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 509, "HPL_pdinfo", "%s %s %d", "Number of values of RFACT",
                "is less than 1 or greater than", 20);
      __CrestClearStack(809);
      __CrestLoad(810, (unsigned long )0, (long long )1);
      __CrestStore(811, (unsigned long )(& error));
# 512 "../HPL_pdinfo.c"
      error = 1;
# 512 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(806, 400, 0);
      {
      __CrestLoad(814, (unsigned long )NRFS, (long long )*NRFS);
      __CrestLoad(813, (unsigned long )0, (long long )20);
      __CrestApply2(812, 14, (long long )(*NRFS > 20));
# 507 "../HPL_pdinfo.c"
      if (*NRFS > 20) {
        __CrestBranch(815, 401, 1);
        __CrestLoad(817, (unsigned long )0, (long long )509);
        __CrestLoad(818, (unsigned long )0, (long long )20);
# 509 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 509, "HPL_pdinfo", "%s %s %d", "Number of values of RFACT",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(819);
        __CrestLoad(820, (unsigned long )0, (long long )1);
        __CrestStore(821, (unsigned long )(& error));
# 512 "../HPL_pdinfo.c"
        error = 1;
# 512 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(816, 403, 0);

      }
      }
    }
    }
    __CrestLoad(822, (unsigned long )0, (long long )254);
# 514 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(823);
# 514 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(824, (unsigned long )0, (long long )0);
    __CrestStore(825, (unsigned long )(& i));
# 515 "../HPL_pdinfo.c"
    i = 0;
    {
# 515 "../HPL_pdinfo.c"
    while (1) {
      while_continue___7: ;
      {
      __CrestLoad(828, (unsigned long )(& i), (long long )i);
      __CrestLoad(827, (unsigned long )NRFS, (long long )*NRFS);
      __CrestApply2(826, 16, (long long )(i < *NRFS));
# 515 "../HPL_pdinfo.c"
      if (i < *NRFS) {
        __CrestBranch(829, 409, 1);

      } else {
        __CrestBranch(830, 410, 0);
# 515 "../HPL_pdinfo.c"
        goto while_break___7;
      }
      }
# 517 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(831);
# 517 "../HPL_pdinfo.c"
      tmp___14 = strlen((char const *)(num));
      __CrestHandleReturn(833, (long long )tmp___14);
      __CrestStore(832, (unsigned long )(& tmp___14));
# 517 "../HPL_pdinfo.c"
      lineptr += tmp___14 + 1UL;
# 518 "../HPL_pdinfo.c"
      j = atoi((char const *)(num));
      __CrestHandleReturn(835, (long long )j);
      __CrestStore(834, (unsigned long )(& j));
      {
      __CrestLoad(838, (unsigned long )(& j), (long long )j);
      __CrestLoad(837, (unsigned long )0, (long long )0);
      __CrestApply2(836, 12, (long long )(j == 0));
# 519 "../HPL_pdinfo.c"
      if (j == 0) {
        __CrestBranch(839, 413, 1);
# 519 "../HPL_pdinfo.c"
        mem_96 = RF + i;
        __CrestLoad(841, (unsigned long )0, (long long )((HPL_T_FACT )301));
        __CrestStore(842, (unsigned long )mem_96);
# 519 "../HPL_pdinfo.c"
        *mem_96 = (HPL_T_FACT )301;
      } else {
        __CrestBranch(840, 414, 0);
        {
        __CrestLoad(845, (unsigned long )(& j), (long long )j);
        __CrestLoad(844, (unsigned long )0, (long long )1);
        __CrestApply2(843, 12, (long long )(j == 1));
# 520 "../HPL_pdinfo.c"
        if (j == 1) {
          __CrestBranch(846, 415, 1);
# 520 "../HPL_pdinfo.c"
          mem_97 = RF + i;
          __CrestLoad(848, (unsigned long )0, (long long )((HPL_T_FACT )302));
          __CrestStore(849, (unsigned long )mem_97);
# 520 "../HPL_pdinfo.c"
          *mem_97 = (HPL_T_FACT )302;
        } else {
          __CrestBranch(847, 416, 0);
          {
          __CrestLoad(852, (unsigned long )(& j), (long long )j);
          __CrestLoad(851, (unsigned long )0, (long long )2);
          __CrestApply2(850, 12, (long long )(j == 2));
# 521 "../HPL_pdinfo.c"
          if (j == 2) {
            __CrestBranch(853, 417, 1);
# 521 "../HPL_pdinfo.c"
            mem_98 = RF + i;
            __CrestLoad(855, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(856, (unsigned long )mem_98);
# 521 "../HPL_pdinfo.c"
            *mem_98 = (HPL_T_FACT )303;
          } else {
            __CrestBranch(854, 418, 0);
# 522 "../HPL_pdinfo.c"
            mem_99 = RF + i;
            __CrestLoad(857, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(858, (unsigned long )mem_99);
# 522 "../HPL_pdinfo.c"
            *mem_99 = (HPL_T_FACT )303;
          }
          }
        }
        }
      }
      }
      __CrestLoad(861, (unsigned long )(& i), (long long )i);
      __CrestLoad(860, (unsigned long )0, (long long )1);
      __CrestApply2(859, 0, (long long )(i + 1));
      __CrestStore(862, (unsigned long )(& i));
# 515 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___7: ;
    }
    __CrestLoad(863, (unsigned long )0, (long long )254);
# 527 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(864);
    {
    __CrestLoad(867, (unsigned long )NTPS, (long long )*NTPS);
    __CrestLoad(866, (unsigned long )0, (long long )1);
    __CrestApply2(865, 16, (long long )(*NTPS < 1));
# 529 "../HPL_pdinfo.c"
    if (*NTPS < 1) {
      __CrestBranch(868, 423, 1);
      __CrestLoad(870, (unsigned long )0, (long long )531);
      __CrestLoad(871, (unsigned long )0, (long long )20);
# 531 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 531, "HPL_pdinfo", "%s %s %d", "Number of values of BCAST",
                "is less than 1 or greater than", 20);
      __CrestClearStack(872);
      __CrestLoad(873, (unsigned long )0, (long long )1);
      __CrestStore(874, (unsigned long )(& error));
# 534 "../HPL_pdinfo.c"
      error = 1;
# 534 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(869, 425, 0);
      {
      __CrestLoad(877, (unsigned long )NTPS, (long long )*NTPS);
      __CrestLoad(876, (unsigned long )0, (long long )20);
      __CrestApply2(875, 14, (long long )(*NTPS > 20));
# 529 "../HPL_pdinfo.c"
      if (*NTPS > 20) {
        __CrestBranch(878, 426, 1);
        __CrestLoad(880, (unsigned long )0, (long long )531);
        __CrestLoad(881, (unsigned long )0, (long long )20);
# 531 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 531, "HPL_pdinfo", "%s %s %d", "Number of values of BCAST",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(882);
        __CrestLoad(883, (unsigned long )0, (long long )1);
        __CrestStore(884, (unsigned long )(& error));
# 534 "../HPL_pdinfo.c"
        error = 1;
# 534 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(879, 428, 0);

      }
      }
    }
    }
    __CrestLoad(885, (unsigned long )0, (long long )254);
# 536 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(886);
# 536 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(887, (unsigned long )0, (long long )0);
    __CrestStore(888, (unsigned long )(& i));
# 537 "../HPL_pdinfo.c"
    i = 0;
    {
# 537 "../HPL_pdinfo.c"
    while (1) {
      while_continue___8: ;
      {
      __CrestLoad(891, (unsigned long )(& i), (long long )i);
      __CrestLoad(890, (unsigned long )NTPS, (long long )*NTPS);
      __CrestApply2(889, 16, (long long )(i < *NTPS));
# 537 "../HPL_pdinfo.c"
      if (i < *NTPS) {
        __CrestBranch(892, 434, 1);

      } else {
        __CrestBranch(893, 435, 0);
# 537 "../HPL_pdinfo.c"
        goto while_break___8;
      }
      }
# 539 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(894);
# 539 "../HPL_pdinfo.c"
      tmp___15 = strlen((char const *)(num));
      __CrestHandleReturn(896, (long long )tmp___15);
      __CrestStore(895, (unsigned long )(& tmp___15));
# 539 "../HPL_pdinfo.c"
      lineptr += tmp___15 + 1UL;
# 540 "../HPL_pdinfo.c"
      j = atoi((char const *)(num));
      __CrestHandleReturn(898, (long long )j);
      __CrestStore(897, (unsigned long )(& j));
      {
      __CrestLoad(901, (unsigned long )(& j), (long long )j);
      __CrestLoad(900, (unsigned long )0, (long long )0);
      __CrestApply2(899, 12, (long long )(j == 0));
# 541 "../HPL_pdinfo.c"
      if (j == 0) {
        __CrestBranch(902, 438, 1);
# 541 "../HPL_pdinfo.c"
        mem_100 = TP + i;
        __CrestLoad(904, (unsigned long )0, (long long )((HPL_T_TOP )401));
        __CrestStore(905, (unsigned long )mem_100);
# 541 "../HPL_pdinfo.c"
        *mem_100 = (HPL_T_TOP )401;
      } else {
        __CrestBranch(903, 439, 0);
        {
        __CrestLoad(908, (unsigned long )(& j), (long long )j);
        __CrestLoad(907, (unsigned long )0, (long long )1);
        __CrestApply2(906, 12, (long long )(j == 1));
# 542 "../HPL_pdinfo.c"
        if (j == 1) {
          __CrestBranch(909, 440, 1);
# 542 "../HPL_pdinfo.c"
          mem_101 = TP + i;
          __CrestLoad(911, (unsigned long )0, (long long )((HPL_T_TOP )402));
          __CrestStore(912, (unsigned long )mem_101);
# 542 "../HPL_pdinfo.c"
          *mem_101 = (HPL_T_TOP )402;
        } else {
          __CrestBranch(910, 441, 0);
          {
          __CrestLoad(915, (unsigned long )(& j), (long long )j);
          __CrestLoad(914, (unsigned long )0, (long long )2);
          __CrestApply2(913, 12, (long long )(j == 2));
# 543 "../HPL_pdinfo.c"
          if (j == 2) {
            __CrestBranch(916, 442, 1);
# 543 "../HPL_pdinfo.c"
            mem_102 = TP + i;
            __CrestLoad(918, (unsigned long )0, (long long )((HPL_T_TOP )403));
            __CrestStore(919, (unsigned long )mem_102);
# 543 "../HPL_pdinfo.c"
            *mem_102 = (HPL_T_TOP )403;
          } else {
            __CrestBranch(917, 443, 0);
            {
            __CrestLoad(922, (unsigned long )(& j), (long long )j);
            __CrestLoad(921, (unsigned long )0, (long long )3);
            __CrestApply2(920, 12, (long long )(j == 3));
# 544 "../HPL_pdinfo.c"
            if (j == 3) {
              __CrestBranch(923, 444, 1);
# 544 "../HPL_pdinfo.c"
              mem_103 = TP + i;
              __CrestLoad(925, (unsigned long )0, (long long )((HPL_T_TOP )404));
              __CrestStore(926, (unsigned long )mem_103);
# 544 "../HPL_pdinfo.c"
              *mem_103 = (HPL_T_TOP )404;
            } else {
              __CrestBranch(924, 445, 0);
              {
              __CrestLoad(929, (unsigned long )(& j), (long long )j);
              __CrestLoad(928, (unsigned long )0, (long long )4);
              __CrestApply2(927, 12, (long long )(j == 4));
# 545 "../HPL_pdinfo.c"
              if (j == 4) {
                __CrestBranch(930, 446, 1);
# 545 "../HPL_pdinfo.c"
                mem_104 = TP + i;
                __CrestLoad(932, (unsigned long )0, (long long )((HPL_T_TOP )405));
                __CrestStore(933, (unsigned long )mem_104);
# 545 "../HPL_pdinfo.c"
                *mem_104 = (HPL_T_TOP )405;
              } else {
                __CrestBranch(931, 447, 0);
                {
                __CrestLoad(936, (unsigned long )(& j), (long long )j);
                __CrestLoad(935, (unsigned long )0, (long long )5);
                __CrestApply2(934, 12, (long long )(j == 5));
# 546 "../HPL_pdinfo.c"
                if (j == 5) {
                  __CrestBranch(937, 448, 1);
# 546 "../HPL_pdinfo.c"
                  mem_105 = TP + i;
                  __CrestLoad(939, (unsigned long )0, (long long )((HPL_T_TOP )406));
                  __CrestStore(940, (unsigned long )mem_105);
# 546 "../HPL_pdinfo.c"
                  *mem_105 = (HPL_T_TOP )406;
                } else {
                  __CrestBranch(938, 449, 0);
# 547 "../HPL_pdinfo.c"
                  mem_106 = TP + i;
                  __CrestLoad(941, (unsigned long )0, (long long )((HPL_T_TOP )402));
                  __CrestStore(942, (unsigned long )mem_106);
# 547 "../HPL_pdinfo.c"
                  *mem_106 = (HPL_T_TOP )402;
                }
                }
              }
              }
            }
            }
          }
          }
        }
        }
      }
      }
      __CrestLoad(945, (unsigned long )(& i), (long long )i);
      __CrestLoad(944, (unsigned long )0, (long long )1);
      __CrestApply2(943, 0, (long long )(i + 1));
      __CrestStore(946, (unsigned long )(& i));
# 537 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___8: ;
    }
    __CrestLoad(947, (unsigned long )0, (long long )254);
# 552 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(948);
    {
    __CrestLoad(951, (unsigned long )NDHS, (long long )*NDHS);
    __CrestLoad(950, (unsigned long )0, (long long )1);
    __CrestApply2(949, 16, (long long )(*NDHS < 1));
# 554 "../HPL_pdinfo.c"
    if (*NDHS < 1) {
      __CrestBranch(952, 454, 1);
      __CrestLoad(954, (unsigned long )0, (long long )556);
      __CrestLoad(955, (unsigned long )0, (long long )20);
# 556 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 556, "HPL_pdinfo", "%s %s %d", "Number of values of DEPTH",
                "is less than 1 or greater than", 20);
      __CrestClearStack(956);
      __CrestLoad(957, (unsigned long )0, (long long )1);
      __CrestStore(958, (unsigned long )(& error));
# 559 "../HPL_pdinfo.c"
      error = 1;
# 559 "../HPL_pdinfo.c"
      goto label_error;
    } else {
      __CrestBranch(953, 456, 0);
      {
      __CrestLoad(961, (unsigned long )NDHS, (long long )*NDHS);
      __CrestLoad(960, (unsigned long )0, (long long )20);
      __CrestApply2(959, 14, (long long )(*NDHS > 20));
# 554 "../HPL_pdinfo.c"
      if (*NDHS > 20) {
        __CrestBranch(962, 457, 1);
        __CrestLoad(964, (unsigned long )0, (long long )556);
        __CrestLoad(965, (unsigned long )0, (long long )20);
# 556 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 556, "HPL_pdinfo", "%s %s %d", "Number of values of DEPTH",
                  "is less than 1 or greater than", 20);
        __CrestClearStack(966);
        __CrestLoad(967, (unsigned long )0, (long long )1);
        __CrestStore(968, (unsigned long )(& error));
# 559 "../HPL_pdinfo.c"
        error = 1;
# 559 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(963, 459, 0);

      }
      }
    }
    }
    __CrestLoad(969, (unsigned long )0, (long long )254);
# 561 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(970);
# 561 "../HPL_pdinfo.c"
    lineptr = line;
    __CrestLoad(971, (unsigned long )0, (long long )0);
    __CrestStore(972, (unsigned long )(& i));
# 562 "../HPL_pdinfo.c"
    i = 0;
    {
# 562 "../HPL_pdinfo.c"
    while (1) {
      while_continue___9: ;
      {
      __CrestLoad(975, (unsigned long )(& i), (long long )i);
      __CrestLoad(974, (unsigned long )NDHS, (long long )*NDHS);
      __CrestApply2(973, 16, (long long )(i < *NDHS));
# 562 "../HPL_pdinfo.c"
      if (i < *NDHS) {
        __CrestBranch(976, 465, 1);

      } else {
        __CrestBranch(977, 466, 0);
# 562 "../HPL_pdinfo.c"
        goto while_break___9;
      }
      }
# 564 "../HPL_pdinfo.c"
      sscanf((char const * __restrict )lineptr, (char const * __restrict )"%s",
             num);
      __CrestClearStack(978);
# 565 "../HPL_pdinfo.c"
      tmp___16 = strlen((char const *)(num));
      __CrestHandleReturn(980, (long long )tmp___16);
      __CrestStore(979, (unsigned long )(& tmp___16));
# 565 "../HPL_pdinfo.c"
      lineptr += tmp___16 + 1UL;
      {
# 566 "../HPL_pdinfo.c"
      mem_107 = DH + i;
      {
      __CrestLoad(983, (unsigned long )mem_107, (long long )*mem_107);
      __CrestLoad(982, (unsigned long )0, (long long )0);
      __CrestApply2(981, 16, (long long )(*mem_107 < 0));
# 566 "../HPL_pdinfo.c"
      if (*mem_107 < 0) {
        __CrestBranch(984, 471, 1);
        __CrestLoad(986, (unsigned long )0, (long long )569);
# 569 "../HPL_pdinfo.c"
        HPL_pwarn(stderr, 569, "HPL_pdinfo", "Value of DEPTH less than 0");
        __CrestClearStack(987);
        __CrestLoad(988, (unsigned long )0, (long long )1);
        __CrestStore(989, (unsigned long )(& error));
# 571 "../HPL_pdinfo.c"
        error = 1;
# 571 "../HPL_pdinfo.c"
        goto label_error;
      } else {
        __CrestBranch(985, 473, 0);

      }
      }
      }
      __CrestLoad(992, (unsigned long )(& i), (long long )i);
      __CrestLoad(991, (unsigned long )0, (long long )1);
      __CrestApply2(990, 0, (long long )(i + 1));
      __CrestStore(993, (unsigned long )(& i));
# 562 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___9: ;
    }
    __CrestLoad(994, (unsigned long )0, (long long )254);
# 577 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(995);
# 578 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           num);
    __CrestClearStack(996);
# 578 "../HPL_pdinfo.c"
    j = atoi((char const *)(num));
    __CrestHandleReturn(998, (long long )j);
    __CrestStore(997, (unsigned long )(& j));
    {
    __CrestLoad(1001, (unsigned long )(& j), (long long )j);
    __CrestLoad(1000, (unsigned long )0, (long long )0);
    __CrestApply2(999, 12, (long long )(j == 0));
# 579 "../HPL_pdinfo.c"
    if (j == 0) {
      __CrestBranch(1002, 478, 1);
      __CrestLoad(1004, (unsigned long )0, (long long )((HPL_T_SWAP )451));
      __CrestStore(1005, (unsigned long )FSWAP);
# 579 "../HPL_pdinfo.c"
      *FSWAP = (HPL_T_SWAP )451;
    } else {
      __CrestBranch(1003, 479, 0);
      {
      __CrestLoad(1008, (unsigned long )(& j), (long long )j);
      __CrestLoad(1007, (unsigned long )0, (long long )1);
      __CrestApply2(1006, 12, (long long )(j == 1));
# 580 "../HPL_pdinfo.c"
      if (j == 1) {
        __CrestBranch(1009, 480, 1);
        __CrestLoad(1011, (unsigned long )0, (long long )((HPL_T_SWAP )452));
        __CrestStore(1012, (unsigned long )FSWAP);
# 580 "../HPL_pdinfo.c"
        *FSWAP = (HPL_T_SWAP )452;
      } else {
        __CrestBranch(1010, 481, 0);
        {
        __CrestLoad(1015, (unsigned long )(& j), (long long )j);
        __CrestLoad(1014, (unsigned long )0, (long long )2);
        __CrestApply2(1013, 12, (long long )(j == 2));
# 581 "../HPL_pdinfo.c"
        if (j == 2) {
          __CrestBranch(1016, 482, 1);
          __CrestLoad(1018, (unsigned long )0, (long long )((HPL_T_SWAP )453));
          __CrestStore(1019, (unsigned long )FSWAP);
# 581 "../HPL_pdinfo.c"
          *FSWAP = (HPL_T_SWAP )453;
        } else {
          __CrestBranch(1017, 483, 0);
          __CrestLoad(1020, (unsigned long )0, (long long )((HPL_T_SWAP )452));
          __CrestStore(1021, (unsigned long )FSWAP);
# 582 "../HPL_pdinfo.c"
          *FSWAP = (HPL_T_SWAP )452;
        }
        }
      }
      }
    }
    }
    __CrestLoad(1022, (unsigned long )0, (long long )254);
# 586 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(1023);
# 587 "../HPL_pdinfo.c"
    sscanf((char const * __restrict )(line), (char const * __restrict )"%s",
           num);
    __CrestClearStack(1024);
# 587 "../HPL_pdinfo.c"
    *TSWAP = atoi((char const *)(num));
    __CrestHandleReturn(1026, (long long )*TSWAP);
    __CrestStore(1025, (unsigned long )TSWAP);
    {
    __CrestLoad(1029, (unsigned long )TSWAP, (long long )*TSWAP);
    __CrestLoad(1028, (unsigned long )0, (long long )0);
    __CrestApply2(1027, 15, (long long )(*TSWAP <= 0));
# 588 "../HPL_pdinfo.c"
    if (*TSWAP <= 0) {
      __CrestBranch(1030, 486, 1);
      __CrestLoad(1032, (unsigned long )0, (long long )0);
      __CrestStore(1033, (unsigned long )TSWAP);
# 588 "../HPL_pdinfo.c"
      *TSWAP = 0;
    } else {
      __CrestBranch(1031, 487, 0);

    }
    }
    __CrestLoad(1034, (unsigned long )0, (long long )254);
# 592 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(1035);
    {
    __CrestLoad(1038, (unsigned long )L1NOTRAN, (long long )*L1NOTRAN);
    __CrestLoad(1037, (unsigned long )0, (long long )0);
    __CrestApply2(1036, 13, (long long )(*L1NOTRAN != 0));
# 594 "../HPL_pdinfo.c"
    if (*L1NOTRAN != 0) {
      __CrestBranch(1039, 490, 1);
      {
      __CrestLoad(1043, (unsigned long )L1NOTRAN, (long long )*L1NOTRAN);
      __CrestLoad(1042, (unsigned long )0, (long long )1);
      __CrestApply2(1041, 13, (long long )(*L1NOTRAN != 1));
# 594 "../HPL_pdinfo.c"
      if (*L1NOTRAN != 1) {
        __CrestBranch(1044, 491, 1);
        __CrestLoad(1046, (unsigned long )0, (long long )0);
        __CrestStore(1047, (unsigned long )L1NOTRAN);
# 594 "../HPL_pdinfo.c"
        *L1NOTRAN = 0;
      } else {
        __CrestBranch(1045, 492, 0);

      }
      }
    } else {
      __CrestBranch(1040, 493, 0);

    }
    }
    __CrestLoad(1048, (unsigned long )0, (long long )254);
# 598 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(1049);
    {
    __CrestLoad(1052, (unsigned long )UNOTRAN, (long long )*UNOTRAN);
    __CrestLoad(1051, (unsigned long )0, (long long )0);
    __CrestApply2(1050, 13, (long long )(*UNOTRAN != 0));
# 600 "../HPL_pdinfo.c"
    if (*UNOTRAN != 0) {
      __CrestBranch(1053, 496, 1);
      {
      __CrestLoad(1057, (unsigned long )UNOTRAN, (long long )*UNOTRAN);
      __CrestLoad(1056, (unsigned long )0, (long long )1);
      __CrestApply2(1055, 13, (long long )(*UNOTRAN != 1));
# 600 "../HPL_pdinfo.c"
      if (*UNOTRAN != 1) {
        __CrestBranch(1058, 497, 1);
        __CrestLoad(1060, (unsigned long )0, (long long )0);
        __CrestStore(1061, (unsigned long )UNOTRAN);
# 600 "../HPL_pdinfo.c"
        *UNOTRAN = 0;
      } else {
        __CrestBranch(1059, 498, 0);

      }
      }
    } else {
      __CrestBranch(1054, 499, 0);

    }
    }
    __CrestLoad(1062, (unsigned long )0, (long long )254);
# 604 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(1063);
    {
    __CrestLoad(1066, (unsigned long )EQUIL, (long long )*EQUIL);
    __CrestLoad(1065, (unsigned long )0, (long long )0);
    __CrestApply2(1064, 13, (long long )(*EQUIL != 0));
# 606 "../HPL_pdinfo.c"
    if (*EQUIL != 0) {
      __CrestBranch(1067, 502, 1);
      {
      __CrestLoad(1071, (unsigned long )EQUIL, (long long )*EQUIL);
      __CrestLoad(1070, (unsigned long )0, (long long )1);
      __CrestApply2(1069, 13, (long long )(*EQUIL != 1));
# 606 "../HPL_pdinfo.c"
      if (*EQUIL != 1) {
        __CrestBranch(1072, 503, 1);
        __CrestLoad(1074, (unsigned long )0, (long long )1);
        __CrestStore(1075, (unsigned long )EQUIL);
# 606 "../HPL_pdinfo.c"
        *EQUIL = 1;
      } else {
        __CrestBranch(1073, 504, 0);

      }
      }
    } else {
      __CrestBranch(1068, 505, 0);

    }
    }
    __CrestLoad(1076, (unsigned long )0, (long long )254);
# 610 "../HPL_pdinfo.c"
    fgets((char * __restrict )(line), 254, (FILE * __restrict )infp);
    __CrestClearStack(1077);
    {
    __CrestLoad(1080, (unsigned long )ALIGN, (long long )*ALIGN);
    __CrestLoad(1079, (unsigned long )0, (long long )0);
    __CrestApply2(1078, 15, (long long )(*ALIGN <= 0));
# 612 "../HPL_pdinfo.c"
    if (*ALIGN <= 0) {
      __CrestBranch(1081, 508, 1);
      __CrestLoad(1083, (unsigned long )0, (long long )4);
      __CrestStore(1084, (unsigned long )ALIGN);
# 612 "../HPL_pdinfo.c"
      *ALIGN = 4;
    } else {
      __CrestBranch(1082, 509, 0);

    }
    }
    label_error:
# 617 "../HPL_pdinfo.c"
    fclose(infp);
    __CrestClearStack(1085);
  } else {
    __CrestBranch(372, 511, 0);
# 619 "../HPL_pdinfo.c"
    TEST->outfp = (FILE *)((void *)0);
  }
  }
  __CrestLoad(1086, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(1087, (unsigned long )0, (long long )((HPL_T_TYPE const )100));
  __CrestLoad(1088, (unsigned long )0, (long long )1140850688);
# 623 "../HPL_pdinfo.c"
  HPL_all_reduce((void *)(& error), (int const )1, (HPL_T_TYPE const )100, (void (* const )(int const ,
                                                                                                 void const * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const ))(& HPL_max),
                 1140850688);
  __CrestClearStack(1089);
  {
  __CrestLoad(1092, (unsigned long )(& error), (long long )error);
  __CrestLoad(1091, (unsigned long )0, (long long )0);
  __CrestApply2(1090, 13, (long long )(error != 0));
# 625 "../HPL_pdinfo.c"
  if (error != 0) {
    __CrestBranch(1093, 514, 1);
    {
    __CrestLoad(1097, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(1096, (unsigned long )0, (long long )0);
    __CrestApply2(1095, 12, (long long )(rank == 0));
# 627 "../HPL_pdinfo.c"
    if (rank == 0) {
      __CrestBranch(1098, 515, 1);
      __CrestLoad(1100, (unsigned long )0, (long long )628);
# 628 "../HPL_pdinfo.c"
      HPL_pwarn(stderr, 628, "HPL_pdinfo", "Illegal input in file HPL.dat. Exiting ...");
      __CrestClearStack(1101);
    } else {
      __CrestBranch(1099, 516, 0);

    }
    }
# 630 "../HPL_pdinfo.c"
    MPI_Finalize();
    __CrestClearStack(1102);
    __CrestLoad(1103, (unsigned long )0, (long long )1);
# 634 "../HPL_pdinfo.c"
    exit(1);
    __CrestClearStack(1104);
  } else {
    __CrestBranch(1094, 518, 0);

  }
  }
  __CrestLoad(1105, (unsigned long )0, (long long )1140850688);
  __CrestLoad(1106, (unsigned long )0, (long long )((HPL_T_MACH const )900));
# 639 "../HPL_pdinfo.c"
  TEST->epsil = HPL_pdlamch(1140850688, (HPL_T_MACH const )900);
  __CrestClearStack(1107);
  __CrestLoad(1108, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(1109, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
  __CrestLoad(1110, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(1111, (unsigned long )0, (long long )1140850688);
# 643 "../HPL_pdinfo.c"
  HPL_broadcast((void *)(& TEST->thrsh), (int const )1, (HPL_T_TYPE const )101,
                (int const )0, 1140850688);
  __CrestClearStack(1112);
  __CrestLoad(1113, (unsigned long )0, (long long )(15UL * sizeof(int )));
# 648 "../HPL_pdinfo.c"
  tmp___17 = malloc(15UL * sizeof(int ));
  __CrestClearStack(1114);
# 648 "../HPL_pdinfo.c"
  iwork = (int *)tmp___17;
  {
  __CrestLoad(1117, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(1116, (unsigned long )0, (long long )0);
  __CrestApply2(1115, 12, (long long )(rank == 0));
# 649 "../HPL_pdinfo.c"
  if (rank == 0) {
    __CrestBranch(1118, 521, 1);
# 651 "../HPL_pdinfo.c"
    mem_108 = iwork + 0;
    __CrestLoad(1120, (unsigned long )NS, (long long )*NS);
    __CrestStore(1121, (unsigned long )mem_108);
# 651 "../HPL_pdinfo.c"
    *mem_108 = *NS;
# 651 "../HPL_pdinfo.c"
    mem_109 = iwork + 1;
    __CrestLoad(1122, (unsigned long )NBS, (long long )*NBS);
    __CrestStore(1123, (unsigned long )mem_109);
# 651 "../HPL_pdinfo.c"
    *mem_109 = *NBS;
    {
    __CrestLoad(1126, (unsigned long )PMAPPIN, (long long )*PMAPPIN);
    __CrestLoad(1125, (unsigned long )0, (long long )201U);
    __CrestApply2(1124, 12, (long long )((unsigned int )*PMAPPIN == 201U));
# 652 "../HPL_pdinfo.c"
    if ((unsigned int )*PMAPPIN == 201U) {
      __CrestBranch(1127, 523, 1);
# 652 "../HPL_pdinfo.c"
      mem_110 = iwork + 2;
      __CrestLoad(1129, (unsigned long )0, (long long )0);
      __CrestStore(1130, (unsigned long )mem_110);
# 652 "../HPL_pdinfo.c"
      *mem_110 = 0;
    } else {
      __CrestBranch(1128, 524, 0);
# 652 "../HPL_pdinfo.c"
      mem_111 = iwork + 2;
      __CrestLoad(1131, (unsigned long )0, (long long )1);
      __CrestStore(1132, (unsigned long )mem_111);
# 652 "../HPL_pdinfo.c"
      *mem_111 = 1;
    }
    }
# 653 "../HPL_pdinfo.c"
    mem_112 = iwork + 3;
    __CrestLoad(1133, (unsigned long )NPQS, (long long )*NPQS);
    __CrestStore(1134, (unsigned long )mem_112);
# 653 "../HPL_pdinfo.c"
    *mem_112 = *NPQS;
# 653 "../HPL_pdinfo.c"
    mem_113 = iwork + 4;
    __CrestLoad(1135, (unsigned long )NPFS, (long long )*NPFS);
    __CrestStore(1136, (unsigned long )mem_113);
# 653 "../HPL_pdinfo.c"
    *mem_113 = *NPFS;
# 653 "../HPL_pdinfo.c"
    mem_114 = iwork + 5;
    __CrestLoad(1137, (unsigned long )NBMS, (long long )*NBMS);
    __CrestStore(1138, (unsigned long )mem_114);
# 653 "../HPL_pdinfo.c"
    *mem_114 = *NBMS;
# 654 "../HPL_pdinfo.c"
    mem_115 = iwork + 6;
    __CrestLoad(1139, (unsigned long )NDVS, (long long )*NDVS);
    __CrestStore(1140, (unsigned long )mem_115);
# 654 "../HPL_pdinfo.c"
    *mem_115 = *NDVS;
# 654 "../HPL_pdinfo.c"
    mem_116 = iwork + 7;
    __CrestLoad(1141, (unsigned long )NRFS, (long long )*NRFS);
    __CrestStore(1142, (unsigned long )mem_116);
# 654 "../HPL_pdinfo.c"
    *mem_116 = *NRFS;
# 654 "../HPL_pdinfo.c"
    mem_117 = iwork + 8;
    __CrestLoad(1143, (unsigned long )NTPS, (long long )*NTPS);
    __CrestStore(1144, (unsigned long )mem_117);
# 654 "../HPL_pdinfo.c"
    *mem_117 = *NTPS;
# 655 "../HPL_pdinfo.c"
    mem_118 = iwork + 9;
    __CrestLoad(1145, (unsigned long )NDHS, (long long )*NDHS);
    __CrestStore(1146, (unsigned long )mem_118);
# 655 "../HPL_pdinfo.c"
    *mem_118 = *NDHS;
# 655 "../HPL_pdinfo.c"
    mem_119 = iwork + 10;
    __CrestLoad(1147, (unsigned long )TSWAP, (long long )*TSWAP);
    __CrestStore(1148, (unsigned long )mem_119);
# 655 "../HPL_pdinfo.c"
    *mem_119 = *TSWAP;
# 655 "../HPL_pdinfo.c"
    mem_120 = iwork + 11;
    __CrestLoad(1149, (unsigned long )L1NOTRAN, (long long )*L1NOTRAN);
    __CrestStore(1150, (unsigned long )mem_120);
# 655 "../HPL_pdinfo.c"
    *mem_120 = *L1NOTRAN;
# 656 "../HPL_pdinfo.c"
    mem_121 = iwork + 12;
    __CrestLoad(1151, (unsigned long )UNOTRAN, (long long )*UNOTRAN);
    __CrestStore(1152, (unsigned long )mem_121);
# 656 "../HPL_pdinfo.c"
    *mem_121 = *UNOTRAN;
# 656 "../HPL_pdinfo.c"
    mem_122 = iwork + 13;
    __CrestLoad(1153, (unsigned long )EQUIL, (long long )*EQUIL);
    __CrestStore(1154, (unsigned long )mem_122);
# 656 "../HPL_pdinfo.c"
    *mem_122 = *EQUIL;
# 656 "../HPL_pdinfo.c"
    mem_123 = iwork + 14;
    __CrestLoad(1155, (unsigned long )ALIGN, (long long )*ALIGN);
    __CrestStore(1156, (unsigned long )mem_123);
# 656 "../HPL_pdinfo.c"
    *mem_123 = *ALIGN;
  } else {
    __CrestBranch(1119, 526, 0);

  }
  }
  __CrestLoad(1157, (unsigned long )0, (long long )((int const )15));
  __CrestLoad(1158, (unsigned long )0, (long long )((HPL_T_TYPE const )100));
  __CrestLoad(1159, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(1160, (unsigned long )0, (long long )1140850688);
# 658 "../HPL_pdinfo.c"
  HPL_broadcast((void *)iwork, (int const )15, (HPL_T_TYPE const )100, (int const )0,
                1140850688);
  __CrestClearStack(1161);
  {
  __CrestLoad(1164, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(1163, (unsigned long )0, (long long )0);
  __CrestApply2(1162, 13, (long long )(rank != 0));
# 659 "../HPL_pdinfo.c"
  if (rank != 0) {
    __CrestBranch(1165, 529, 1);
# 661 "../HPL_pdinfo.c"
    mem_124 = iwork + 0;
    __CrestLoad(1167, (unsigned long )mem_124, (long long )*mem_124);
    __CrestStore(1168, (unsigned long )NS);
# 661 "../HPL_pdinfo.c"
    *NS = *mem_124;
# 661 "../HPL_pdinfo.c"
    mem_125 = iwork + 1;
    __CrestLoad(1169, (unsigned long )mem_125, (long long )*mem_125);
    __CrestStore(1170, (unsigned long )NBS);
# 661 "../HPL_pdinfo.c"
    *NBS = *mem_125;
    {
# 662 "../HPL_pdinfo.c"
    mem_126 = iwork + 2;
    {
    __CrestLoad(1173, (unsigned long )mem_126, (long long )*mem_126);
    __CrestLoad(1172, (unsigned long )0, (long long )0);
    __CrestApply2(1171, 12, (long long )(*mem_126 == 0));
# 662 "../HPL_pdinfo.c"
    if (*mem_126 == 0) {
      __CrestBranch(1174, 533, 1);
      __CrestLoad(1176, (unsigned long )0, (long long )((HPL_T_ORDER )201));
      __CrestStore(1177, (unsigned long )PMAPPIN);
# 662 "../HPL_pdinfo.c"
      *PMAPPIN = (HPL_T_ORDER )201;
    } else {
      __CrestBranch(1175, 534, 0);
      __CrestLoad(1178, (unsigned long )0, (long long )((HPL_T_ORDER )202));
      __CrestStore(1179, (unsigned long )PMAPPIN);
# 662 "../HPL_pdinfo.c"
      *PMAPPIN = (HPL_T_ORDER )202;
    }
    }
    }
# 663 "../HPL_pdinfo.c"
    mem_127 = iwork + 3;
    __CrestLoad(1180, (unsigned long )mem_127, (long long )*mem_127);
    __CrestStore(1181, (unsigned long )NPQS);
# 663 "../HPL_pdinfo.c"
    *NPQS = *mem_127;
# 663 "../HPL_pdinfo.c"
    mem_128 = iwork + 4;
    __CrestLoad(1182, (unsigned long )mem_128, (long long )*mem_128);
    __CrestStore(1183, (unsigned long )NPFS);
# 663 "../HPL_pdinfo.c"
    *NPFS = *mem_128;
# 663 "../HPL_pdinfo.c"
    mem_129 = iwork + 5;
    __CrestLoad(1184, (unsigned long )mem_129, (long long )*mem_129);
    __CrestStore(1185, (unsigned long )NBMS);
# 663 "../HPL_pdinfo.c"
    *NBMS = *mem_129;
# 664 "../HPL_pdinfo.c"
    mem_130 = iwork + 6;
    __CrestLoad(1186, (unsigned long )mem_130, (long long )*mem_130);
    __CrestStore(1187, (unsigned long )NDVS);
# 664 "../HPL_pdinfo.c"
    *NDVS = *mem_130;
# 664 "../HPL_pdinfo.c"
    mem_131 = iwork + 7;
    __CrestLoad(1188, (unsigned long )mem_131, (long long )*mem_131);
    __CrestStore(1189, (unsigned long )NRFS);
# 664 "../HPL_pdinfo.c"
    *NRFS = *mem_131;
# 664 "../HPL_pdinfo.c"
    mem_132 = iwork + 8;
    __CrestLoad(1190, (unsigned long )mem_132, (long long )*mem_132);
    __CrestStore(1191, (unsigned long )NTPS);
# 664 "../HPL_pdinfo.c"
    *NTPS = *mem_132;
# 665 "../HPL_pdinfo.c"
    mem_133 = iwork + 9;
    __CrestLoad(1192, (unsigned long )mem_133, (long long )*mem_133);
    __CrestStore(1193, (unsigned long )NDHS);
# 665 "../HPL_pdinfo.c"
    *NDHS = *mem_133;
# 665 "../HPL_pdinfo.c"
    mem_134 = iwork + 10;
    __CrestLoad(1194, (unsigned long )mem_134, (long long )*mem_134);
    __CrestStore(1195, (unsigned long )TSWAP);
# 665 "../HPL_pdinfo.c"
    *TSWAP = *mem_134;
# 665 "../HPL_pdinfo.c"
    mem_135 = iwork + 11;
    __CrestLoad(1196, (unsigned long )mem_135, (long long )*mem_135);
    __CrestStore(1197, (unsigned long )L1NOTRAN);
# 665 "../HPL_pdinfo.c"
    *L1NOTRAN = *mem_135;
# 666 "../HPL_pdinfo.c"
    mem_136 = iwork + 12;
    __CrestLoad(1198, (unsigned long )mem_136, (long long )*mem_136);
    __CrestStore(1199, (unsigned long )UNOTRAN);
# 666 "../HPL_pdinfo.c"
    *UNOTRAN = *mem_136;
# 666 "../HPL_pdinfo.c"
    mem_137 = iwork + 13;
    __CrestLoad(1200, (unsigned long )mem_137, (long long )*mem_137);
    __CrestStore(1201, (unsigned long )EQUIL);
# 666 "../HPL_pdinfo.c"
    *EQUIL = *mem_137;
# 666 "../HPL_pdinfo.c"
    mem_138 = iwork + 14;
    __CrestLoad(1202, (unsigned long )mem_138, (long long )*mem_138);
    __CrestStore(1203, (unsigned long )ALIGN);
# 666 "../HPL_pdinfo.c"
    *ALIGN = *mem_138;
  } else {
    __CrestBranch(1166, 536, 0);

  }
  }
  {
  __CrestLoad(1206, (unsigned long )(& iwork), (long long )((unsigned long )iwork));
  __CrestLoad(1205, (unsigned long )0, (long long )0);
  __CrestApply2(1204, 13, (long long )(iwork != 0));
# 668 "../HPL_pdinfo.c"
  if (iwork != 0) {
    __CrestBranch(1207, 538, 1);
# 668 "../HPL_pdinfo.c"
    free((void *)iwork);
    __CrestClearStack(1209);
  } else {
    __CrestBranch(1208, 539, 0);

  }
  }
  __CrestLoad(1230, (unsigned long )NS, (long long )*NS);
  __CrestLoad(1229, (unsigned long )NBS, (long long )*NBS);
  __CrestApply2(1228, 0, (long long )(*NS + *NBS));
  __CrestLoad(1227, (unsigned long )0, (long long )2);
  __CrestLoad(1226, (unsigned long )NPQS, (long long )*NPQS);
  __CrestApply2(1225, 2, (long long )(2 * *NPQS));
  __CrestApply2(1224, 0, (long long )((*NS + *NBS) + 2 * *NPQS));
  __CrestLoad(1223, (unsigned long )NPFS, (long long )*NPFS);
  __CrestApply2(1222, 0, (long long )(((*NS + *NBS) + 2 * *NPQS) + *NPFS));
  __CrestLoad(1221, (unsigned long )NBMS, (long long )*NBMS);
  __CrestApply2(1220, 0, (long long )((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS));
  __CrestLoad(1219, (unsigned long )NDVS, (long long )*NDVS);
  __CrestApply2(1218, 0, (long long )(((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS));
  __CrestLoad(1217, (unsigned long )NRFS, (long long )*NRFS);
  __CrestApply2(1216, 0, (long long )((((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS) + *NRFS));
  __CrestLoad(1215, (unsigned long )NTPS, (long long )*NTPS);
  __CrestApply2(1214, 0, (long long )(((((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS) + *NRFS) + *NTPS));
  __CrestLoad(1213, (unsigned long )NDHS, (long long )*NDHS);
  __CrestApply2(1212, 0, (long long )((((((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS) + *NRFS) + *NTPS) + *NDHS));
  __CrestLoad(1211, (unsigned long )0, (long long )1);
  __CrestApply2(1210, 0, (long long )(((((((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS) + *NRFS) + *NTPS) + *NDHS) + 1));
  __CrestStore(1231, (unsigned long )(& lwork));
# 672 "../HPL_pdinfo.c"
  lwork = ((((((((*NS + *NBS) + 2 * *NPQS) + *NPFS) + *NBMS) + *NDVS) + *NRFS) + *NTPS) + *NDHS) + 1;
  __CrestLoad(1234, (unsigned long )(& lwork), (long long )lwork);
  __CrestLoad(1233, (unsigned long )0, (long long )sizeof(int ));
  __CrestApply2(1232, 2, (long long )((unsigned long )lwork * sizeof(int )));
# 674 "../HPL_pdinfo.c"
  tmp___18 = malloc((unsigned long )lwork * sizeof(int ));
  __CrestClearStack(1235);
# 674 "../HPL_pdinfo.c"
  iwork = (int *)tmp___18;
  {
  __CrestLoad(1238, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(1237, (unsigned long )0, (long long )0);
  __CrestApply2(1236, 12, (long long )(rank == 0));
# 675 "../HPL_pdinfo.c"
  if (rank == 0) {
    __CrestBranch(1239, 542, 1);
    __CrestLoad(1241, (unsigned long )0, (long long )0);
    __CrestStore(1242, (unsigned long )(& j));
# 677 "../HPL_pdinfo.c"
    j = 0;
    __CrestLoad(1243, (unsigned long )0, (long long )0);
    __CrestStore(1244, (unsigned long )(& i));
# 678 "../HPL_pdinfo.c"
    i = 0;
    {
# 678 "../HPL_pdinfo.c"
    while (1) {
      while_continue___10: ;
      {
      __CrestLoad(1247, (unsigned long )(& i), (long long )i);
      __CrestLoad(1246, (unsigned long )NS, (long long )*NS);
      __CrestApply2(1245, 16, (long long )(i < *NS));
# 678 "../HPL_pdinfo.c"
      if (i < *NS) {
        __CrestBranch(1248, 547, 1);

      } else {
        __CrestBranch(1249, 548, 0);
# 678 "../HPL_pdinfo.c"
        goto while_break___10;
      }
      }
# 678 "../HPL_pdinfo.c"
      mem_139 = iwork + j;
# 678 "../HPL_pdinfo.c"
      mem_140 = N + i;
      __CrestLoad(1250, (unsigned long )mem_140, (long long )*mem_140);
      __CrestStore(1251, (unsigned long )mem_139);
# 678 "../HPL_pdinfo.c"
      *mem_139 = *mem_140;
      __CrestLoad(1254, (unsigned long )(& j), (long long )j);
      __CrestLoad(1253, (unsigned long )0, (long long )1);
      __CrestApply2(1252, 0, (long long )(j + 1));
      __CrestStore(1255, (unsigned long )(& j));
# 678 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1258, (unsigned long )(& i), (long long )i);
      __CrestLoad(1257, (unsigned long )0, (long long )1);
      __CrestApply2(1256, 0, (long long )(i + 1));
      __CrestStore(1259, (unsigned long )(& i));
# 678 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___10: ;
    }
    __CrestLoad(1260, (unsigned long )0, (long long )0);
    __CrestStore(1261, (unsigned long )(& i));
# 679 "../HPL_pdinfo.c"
    i = 0;
    {
# 679 "../HPL_pdinfo.c"
    while (1) {
      while_continue___11: ;
      {
      __CrestLoad(1264, (unsigned long )(& i), (long long )i);
      __CrestLoad(1263, (unsigned long )NBS, (long long )*NBS);
      __CrestApply2(1262, 16, (long long )(i < *NBS));
# 679 "../HPL_pdinfo.c"
      if (i < *NBS) {
        __CrestBranch(1265, 556, 1);

      } else {
        __CrestBranch(1266, 557, 0);
# 679 "../HPL_pdinfo.c"
        goto while_break___11;
      }
      }
# 679 "../HPL_pdinfo.c"
      mem_141 = iwork + j;
# 679 "../HPL_pdinfo.c"
      mem_142 = NB + i;
      __CrestLoad(1267, (unsigned long )mem_142, (long long )*mem_142);
      __CrestStore(1268, (unsigned long )mem_141);
# 679 "../HPL_pdinfo.c"
      *mem_141 = *mem_142;
      __CrestLoad(1271, (unsigned long )(& j), (long long )j);
      __CrestLoad(1270, (unsigned long )0, (long long )1);
      __CrestApply2(1269, 0, (long long )(j + 1));
      __CrestStore(1272, (unsigned long )(& j));
# 679 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1275, (unsigned long )(& i), (long long )i);
      __CrestLoad(1274, (unsigned long )0, (long long )1);
      __CrestApply2(1273, 0, (long long )(i + 1));
      __CrestStore(1276, (unsigned long )(& i));
# 679 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___11: ;
    }
    __CrestLoad(1277, (unsigned long )0, (long long )0);
    __CrestStore(1278, (unsigned long )(& i));
# 680 "../HPL_pdinfo.c"
    i = 0;
    {
# 680 "../HPL_pdinfo.c"
    while (1) {
      while_continue___12: ;
      {
      __CrestLoad(1281, (unsigned long )(& i), (long long )i);
      __CrestLoad(1280, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(1279, 16, (long long )(i < *NPQS));
# 680 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(1282, 565, 1);

      } else {
        __CrestBranch(1283, 566, 0);
# 680 "../HPL_pdinfo.c"
        goto while_break___12;
      }
      }
# 680 "../HPL_pdinfo.c"
      mem_143 = iwork + j;
# 680 "../HPL_pdinfo.c"
      mem_144 = P + i;
      __CrestLoad(1284, (unsigned long )mem_144, (long long )*mem_144);
      __CrestStore(1285, (unsigned long )mem_143);
# 680 "../HPL_pdinfo.c"
      *mem_143 = *mem_144;
      __CrestLoad(1288, (unsigned long )(& j), (long long )j);
      __CrestLoad(1287, (unsigned long )0, (long long )1);
      __CrestApply2(1286, 0, (long long )(j + 1));
      __CrestStore(1289, (unsigned long )(& j));
# 680 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1292, (unsigned long )(& i), (long long )i);
      __CrestLoad(1291, (unsigned long )0, (long long )1);
      __CrestApply2(1290, 0, (long long )(i + 1));
      __CrestStore(1293, (unsigned long )(& i));
# 680 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___12: ;
    }
    __CrestLoad(1294, (unsigned long )0, (long long )0);
    __CrestStore(1295, (unsigned long )(& i));
# 681 "../HPL_pdinfo.c"
    i = 0;
    {
# 681 "../HPL_pdinfo.c"
    while (1) {
      while_continue___13: ;
      {
      __CrestLoad(1298, (unsigned long )(& i), (long long )i);
      __CrestLoad(1297, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(1296, 16, (long long )(i < *NPQS));
# 681 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(1299, 574, 1);

      } else {
        __CrestBranch(1300, 575, 0);
# 681 "../HPL_pdinfo.c"
        goto while_break___13;
      }
      }
# 681 "../HPL_pdinfo.c"
      mem_145 = iwork + j;
# 681 "../HPL_pdinfo.c"
      mem_146 = Q + i;
      __CrestLoad(1301, (unsigned long )mem_146, (long long )*mem_146);
      __CrestStore(1302, (unsigned long )mem_145);
# 681 "../HPL_pdinfo.c"
      *mem_145 = *mem_146;
      __CrestLoad(1305, (unsigned long )(& j), (long long )j);
      __CrestLoad(1304, (unsigned long )0, (long long )1);
      __CrestApply2(1303, 0, (long long )(j + 1));
      __CrestStore(1306, (unsigned long )(& j));
# 681 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1309, (unsigned long )(& i), (long long )i);
      __CrestLoad(1308, (unsigned long )0, (long long )1);
      __CrestApply2(1307, 0, (long long )(i + 1));
      __CrestStore(1310, (unsigned long )(& i));
# 681 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___13: ;
    }
    __CrestLoad(1311, (unsigned long )0, (long long )0);
    __CrestStore(1312, (unsigned long )(& i));
# 682 "../HPL_pdinfo.c"
    i = 0;
    {
# 682 "../HPL_pdinfo.c"
    while (1) {
      while_continue___14: ;
      {
      __CrestLoad(1315, (unsigned long )(& i), (long long )i);
      __CrestLoad(1314, (unsigned long )NPFS, (long long )*NPFS);
      __CrestApply2(1313, 16, (long long )(i < *NPFS));
# 682 "../HPL_pdinfo.c"
      if (i < *NPFS) {
        __CrestBranch(1316, 583, 1);

      } else {
        __CrestBranch(1317, 584, 0);
# 682 "../HPL_pdinfo.c"
        goto while_break___14;
      }
      }
      {
# 684 "../HPL_pdinfo.c"
      mem_147 = PF + i;
      {
      __CrestLoad(1320, (unsigned long )mem_147, (long long )*mem_147);
      __CrestLoad(1319, (unsigned long )0, (long long )301U);
      __CrestApply2(1318, 12, (long long )((unsigned int )*mem_147 == 301U));
# 684 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_147 == 301U) {
        __CrestBranch(1321, 588, 1);
# 684 "../HPL_pdinfo.c"
        mem_148 = iwork + j;
        __CrestLoad(1323, (unsigned long )0, (long long )0);
        __CrestStore(1324, (unsigned long )mem_148);
# 684 "../HPL_pdinfo.c"
        *mem_148 = 0;
      } else {
        __CrestBranch(1322, 589, 0);
        {
# 685 "../HPL_pdinfo.c"
        mem_149 = PF + i;
        {
        __CrestLoad(1327, (unsigned long )mem_149, (long long )*mem_149);
        __CrestLoad(1326, (unsigned long )0, (long long )302U);
        __CrestApply2(1325, 12, (long long )((unsigned int )*mem_149 == 302U));
# 685 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_149 == 302U) {
          __CrestBranch(1328, 592, 1);
# 685 "../HPL_pdinfo.c"
          mem_150 = iwork + j;
          __CrestLoad(1330, (unsigned long )0, (long long )1);
          __CrestStore(1331, (unsigned long )mem_150);
# 685 "../HPL_pdinfo.c"
          *mem_150 = 1;
        } else {
          __CrestBranch(1329, 593, 0);
          {
# 686 "../HPL_pdinfo.c"
          mem_151 = PF + i;
          {
          __CrestLoad(1334, (unsigned long )mem_151, (long long )*mem_151);
          __CrestLoad(1333, (unsigned long )0, (long long )303U);
          __CrestApply2(1332, 12, (long long )((unsigned int )*mem_151 == 303U));
# 686 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_151 == 303U) {
            __CrestBranch(1335, 596, 1);
# 686 "../HPL_pdinfo.c"
            mem_152 = iwork + j;
            __CrestLoad(1337, (unsigned long )0, (long long )2);
            __CrestStore(1338, (unsigned long )mem_152);
# 686 "../HPL_pdinfo.c"
            *mem_152 = 2;
          } else {
            __CrestBranch(1336, 597, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1341, (unsigned long )(& j), (long long )j);
      __CrestLoad(1340, (unsigned long )0, (long long )1);
      __CrestApply2(1339, 0, (long long )(j + 1));
      __CrestStore(1342, (unsigned long )(& j));
# 687 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1345, (unsigned long )(& i), (long long )i);
      __CrestLoad(1344, (unsigned long )0, (long long )1);
      __CrestApply2(1343, 0, (long long )(i + 1));
      __CrestStore(1346, (unsigned long )(& i));
# 682 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___14: ;
    }
    __CrestLoad(1347, (unsigned long )0, (long long )0);
    __CrestStore(1348, (unsigned long )(& i));
# 689 "../HPL_pdinfo.c"
    i = 0;
    {
# 689 "../HPL_pdinfo.c"
    while (1) {
      while_continue___15: ;
      {
      __CrestLoad(1351, (unsigned long )(& i), (long long )i);
      __CrestLoad(1350, (unsigned long )NBMS, (long long )*NBMS);
      __CrestApply2(1349, 16, (long long )(i < *NBMS));
# 689 "../HPL_pdinfo.c"
      if (i < *NBMS) {
        __CrestBranch(1352, 605, 1);

      } else {
        __CrestBranch(1353, 606, 0);
# 689 "../HPL_pdinfo.c"
        goto while_break___15;
      }
      }
# 689 "../HPL_pdinfo.c"
      mem_153 = iwork + j;
# 689 "../HPL_pdinfo.c"
      mem_154 = NBM + i;
      __CrestLoad(1354, (unsigned long )mem_154, (long long )*mem_154);
      __CrestStore(1355, (unsigned long )mem_153);
# 689 "../HPL_pdinfo.c"
      *mem_153 = *mem_154;
      __CrestLoad(1358, (unsigned long )(& j), (long long )j);
      __CrestLoad(1357, (unsigned long )0, (long long )1);
      __CrestApply2(1356, 0, (long long )(j + 1));
      __CrestStore(1359, (unsigned long )(& j));
# 689 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1362, (unsigned long )(& i), (long long )i);
      __CrestLoad(1361, (unsigned long )0, (long long )1);
      __CrestApply2(1360, 0, (long long )(i + 1));
      __CrestStore(1363, (unsigned long )(& i));
# 689 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___15: ;
    }
    __CrestLoad(1364, (unsigned long )0, (long long )0);
    __CrestStore(1365, (unsigned long )(& i));
# 690 "../HPL_pdinfo.c"
    i = 0;
    {
# 690 "../HPL_pdinfo.c"
    while (1) {
      while_continue___16: ;
      {
      __CrestLoad(1368, (unsigned long )(& i), (long long )i);
      __CrestLoad(1367, (unsigned long )NDVS, (long long )*NDVS);
      __CrestApply2(1366, 16, (long long )(i < *NDVS));
# 690 "../HPL_pdinfo.c"
      if (i < *NDVS) {
        __CrestBranch(1369, 614, 1);

      } else {
        __CrestBranch(1370, 615, 0);
# 690 "../HPL_pdinfo.c"
        goto while_break___16;
      }
      }
# 690 "../HPL_pdinfo.c"
      mem_155 = iwork + j;
# 690 "../HPL_pdinfo.c"
      mem_156 = NDV + i;
      __CrestLoad(1371, (unsigned long )mem_156, (long long )*mem_156);
      __CrestStore(1372, (unsigned long )mem_155);
# 690 "../HPL_pdinfo.c"
      *mem_155 = *mem_156;
      __CrestLoad(1375, (unsigned long )(& j), (long long )j);
      __CrestLoad(1374, (unsigned long )0, (long long )1);
      __CrestApply2(1373, 0, (long long )(j + 1));
      __CrestStore(1376, (unsigned long )(& j));
# 690 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1379, (unsigned long )(& i), (long long )i);
      __CrestLoad(1378, (unsigned long )0, (long long )1);
      __CrestApply2(1377, 0, (long long )(i + 1));
      __CrestStore(1380, (unsigned long )(& i));
# 690 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___16: ;
    }
    __CrestLoad(1381, (unsigned long )0, (long long )0);
    __CrestStore(1382, (unsigned long )(& i));
# 691 "../HPL_pdinfo.c"
    i = 0;
    {
# 691 "../HPL_pdinfo.c"
    while (1) {
      while_continue___17: ;
      {
      __CrestLoad(1385, (unsigned long )(& i), (long long )i);
      __CrestLoad(1384, (unsigned long )NRFS, (long long )*NRFS);
      __CrestApply2(1383, 16, (long long )(i < *NRFS));
# 691 "../HPL_pdinfo.c"
      if (i < *NRFS) {
        __CrestBranch(1386, 623, 1);

      } else {
        __CrestBranch(1387, 624, 0);
# 691 "../HPL_pdinfo.c"
        goto while_break___17;
      }
      }
      {
# 693 "../HPL_pdinfo.c"
      mem_157 = RF + i;
      {
      __CrestLoad(1390, (unsigned long )mem_157, (long long )*mem_157);
      __CrestLoad(1389, (unsigned long )0, (long long )301U);
      __CrestApply2(1388, 12, (long long )((unsigned int )*mem_157 == 301U));
# 693 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_157 == 301U) {
        __CrestBranch(1391, 628, 1);
# 693 "../HPL_pdinfo.c"
        mem_158 = iwork + j;
        __CrestLoad(1393, (unsigned long )0, (long long )0);
        __CrestStore(1394, (unsigned long )mem_158);
# 693 "../HPL_pdinfo.c"
        *mem_158 = 0;
      } else {
        __CrestBranch(1392, 629, 0);
        {
# 694 "../HPL_pdinfo.c"
        mem_159 = RF + i;
        {
        __CrestLoad(1397, (unsigned long )mem_159, (long long )*mem_159);
        __CrestLoad(1396, (unsigned long )0, (long long )302U);
        __CrestApply2(1395, 12, (long long )((unsigned int )*mem_159 == 302U));
# 694 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_159 == 302U) {
          __CrestBranch(1398, 632, 1);
# 694 "../HPL_pdinfo.c"
          mem_160 = iwork + j;
          __CrestLoad(1400, (unsigned long )0, (long long )1);
          __CrestStore(1401, (unsigned long )mem_160);
# 694 "../HPL_pdinfo.c"
          *mem_160 = 1;
        } else {
          __CrestBranch(1399, 633, 0);
          {
# 695 "../HPL_pdinfo.c"
          mem_161 = RF + i;
          {
          __CrestLoad(1404, (unsigned long )mem_161, (long long )*mem_161);
          __CrestLoad(1403, (unsigned long )0, (long long )303U);
          __CrestApply2(1402, 12, (long long )((unsigned int )*mem_161 == 303U));
# 695 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_161 == 303U) {
            __CrestBranch(1405, 636, 1);
# 695 "../HPL_pdinfo.c"
            mem_162 = iwork + j;
            __CrestLoad(1407, (unsigned long )0, (long long )2);
            __CrestStore(1408, (unsigned long )mem_162);
# 695 "../HPL_pdinfo.c"
            *mem_162 = 2;
          } else {
            __CrestBranch(1406, 637, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1411, (unsigned long )(& j), (long long )j);
      __CrestLoad(1410, (unsigned long )0, (long long )1);
      __CrestApply2(1409, 0, (long long )(j + 1));
      __CrestStore(1412, (unsigned long )(& j));
# 696 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1415, (unsigned long )(& i), (long long )i);
      __CrestLoad(1414, (unsigned long )0, (long long )1);
      __CrestApply2(1413, 0, (long long )(i + 1));
      __CrestStore(1416, (unsigned long )(& i));
# 691 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___17: ;
    }
    __CrestLoad(1417, (unsigned long )0, (long long )0);
    __CrestStore(1418, (unsigned long )(& i));
# 698 "../HPL_pdinfo.c"
    i = 0;
    {
# 698 "../HPL_pdinfo.c"
    while (1) {
      while_continue___18: ;
      {
      __CrestLoad(1421, (unsigned long )(& i), (long long )i);
      __CrestLoad(1420, (unsigned long )NTPS, (long long )*NTPS);
      __CrestApply2(1419, 16, (long long )(i < *NTPS));
# 698 "../HPL_pdinfo.c"
      if (i < *NTPS) {
        __CrestBranch(1422, 645, 1);

      } else {
        __CrestBranch(1423, 646, 0);
# 698 "../HPL_pdinfo.c"
        goto while_break___18;
      }
      }
      {
# 700 "../HPL_pdinfo.c"
      mem_163 = TP + i;
      {
      __CrestLoad(1426, (unsigned long )mem_163, (long long )*mem_163);
      __CrestLoad(1425, (unsigned long )0, (long long )401U);
      __CrestApply2(1424, 12, (long long )((unsigned int )*mem_163 == 401U));
# 700 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_163 == 401U) {
        __CrestBranch(1427, 650, 1);
# 700 "../HPL_pdinfo.c"
        mem_164 = iwork + j;
        __CrestLoad(1429, (unsigned long )0, (long long )0);
        __CrestStore(1430, (unsigned long )mem_164);
# 700 "../HPL_pdinfo.c"
        *mem_164 = 0;
      } else {
        __CrestBranch(1428, 651, 0);
        {
# 701 "../HPL_pdinfo.c"
        mem_165 = TP + i;
        {
        __CrestLoad(1433, (unsigned long )mem_165, (long long )*mem_165);
        __CrestLoad(1432, (unsigned long )0, (long long )402U);
        __CrestApply2(1431, 12, (long long )((unsigned int )*mem_165 == 402U));
# 701 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_165 == 402U) {
          __CrestBranch(1434, 654, 1);
# 701 "../HPL_pdinfo.c"
          mem_166 = iwork + j;
          __CrestLoad(1436, (unsigned long )0, (long long )1);
          __CrestStore(1437, (unsigned long )mem_166);
# 701 "../HPL_pdinfo.c"
          *mem_166 = 1;
        } else {
          __CrestBranch(1435, 655, 0);
          {
# 702 "../HPL_pdinfo.c"
          mem_167 = TP + i;
          {
          __CrestLoad(1440, (unsigned long )mem_167, (long long )*mem_167);
          __CrestLoad(1439, (unsigned long )0, (long long )403U);
          __CrestApply2(1438, 12, (long long )((unsigned int )*mem_167 == 403U));
# 702 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_167 == 403U) {
            __CrestBranch(1441, 658, 1);
# 702 "../HPL_pdinfo.c"
            mem_168 = iwork + j;
            __CrestLoad(1443, (unsigned long )0, (long long )2);
            __CrestStore(1444, (unsigned long )mem_168);
# 702 "../HPL_pdinfo.c"
            *mem_168 = 2;
          } else {
            __CrestBranch(1442, 659, 0);
            {
# 703 "../HPL_pdinfo.c"
            mem_169 = TP + i;
            {
            __CrestLoad(1447, (unsigned long )mem_169, (long long )*mem_169);
            __CrestLoad(1446, (unsigned long )0, (long long )404U);
            __CrestApply2(1445, 12, (long long )((unsigned int )*mem_169 == 404U));
# 703 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_169 == 404U) {
              __CrestBranch(1448, 662, 1);
# 703 "../HPL_pdinfo.c"
              mem_170 = iwork + j;
              __CrestLoad(1450, (unsigned long )0, (long long )3);
              __CrestStore(1451, (unsigned long )mem_170);
# 703 "../HPL_pdinfo.c"
              *mem_170 = 3;
            } else {
              __CrestBranch(1449, 663, 0);
              {
# 704 "../HPL_pdinfo.c"
              mem_171 = TP + i;
              {
              __CrestLoad(1454, (unsigned long )mem_171, (long long )*mem_171);
              __CrestLoad(1453, (unsigned long )0, (long long )405U);
              __CrestApply2(1452, 12, (long long )((unsigned int )*mem_171 == 405U));
# 704 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_171 == 405U) {
                __CrestBranch(1455, 666, 1);
# 704 "../HPL_pdinfo.c"
                mem_172 = iwork + j;
                __CrestLoad(1457, (unsigned long )0, (long long )4);
                __CrestStore(1458, (unsigned long )mem_172);
# 704 "../HPL_pdinfo.c"
                *mem_172 = 4;
              } else {
                __CrestBranch(1456, 667, 0);
                {
# 705 "../HPL_pdinfo.c"
                mem_173 = TP + i;
                {
                __CrestLoad(1461, (unsigned long )mem_173, (long long )*mem_173);
                __CrestLoad(1460, (unsigned long )0, (long long )406U);
                __CrestApply2(1459, 12, (long long )((unsigned int )*mem_173 == 406U));
# 705 "../HPL_pdinfo.c"
                if ((unsigned int )*mem_173 == 406U) {
                  __CrestBranch(1462, 670, 1);
# 705 "../HPL_pdinfo.c"
                  mem_174 = iwork + j;
                  __CrestLoad(1464, (unsigned long )0, (long long )5);
                  __CrestStore(1465, (unsigned long )mem_174);
# 705 "../HPL_pdinfo.c"
                  *mem_174 = 5;
                } else {
                  __CrestBranch(1463, 671, 0);

                }
                }
                }
              }
              }
              }
            }
            }
            }
          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1468, (unsigned long )(& j), (long long )j);
      __CrestLoad(1467, (unsigned long )0, (long long )1);
      __CrestApply2(1466, 0, (long long )(j + 1));
      __CrestStore(1469, (unsigned long )(& j));
# 706 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1472, (unsigned long )(& i), (long long )i);
      __CrestLoad(1471, (unsigned long )0, (long long )1);
      __CrestApply2(1470, 0, (long long )(i + 1));
      __CrestStore(1473, (unsigned long )(& i));
# 698 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___18: ;
    }
    __CrestLoad(1474, (unsigned long )0, (long long )0);
    __CrestStore(1475, (unsigned long )(& i));
# 708 "../HPL_pdinfo.c"
    i = 0;
    {
# 708 "../HPL_pdinfo.c"
    while (1) {
      while_continue___19: ;
      {
      __CrestLoad(1478, (unsigned long )(& i), (long long )i);
      __CrestLoad(1477, (unsigned long )NDHS, (long long )*NDHS);
      __CrestApply2(1476, 16, (long long )(i < *NDHS));
# 708 "../HPL_pdinfo.c"
      if (i < *NDHS) {
        __CrestBranch(1479, 679, 1);

      } else {
        __CrestBranch(1480, 680, 0);
# 708 "../HPL_pdinfo.c"
        goto while_break___19;
      }
      }
# 708 "../HPL_pdinfo.c"
      mem_175 = iwork + j;
# 708 "../HPL_pdinfo.c"
      mem_176 = DH + i;
      __CrestLoad(1481, (unsigned long )mem_176, (long long )*mem_176);
      __CrestStore(1482, (unsigned long )mem_175);
# 708 "../HPL_pdinfo.c"
      *mem_175 = *mem_176;
      __CrestLoad(1485, (unsigned long )(& j), (long long )j);
      __CrestLoad(1484, (unsigned long )0, (long long )1);
      __CrestApply2(1483, 0, (long long )(j + 1));
      __CrestStore(1486, (unsigned long )(& j));
# 708 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1489, (unsigned long )(& i), (long long )i);
      __CrestLoad(1488, (unsigned long )0, (long long )1);
      __CrestApply2(1487, 0, (long long )(i + 1));
      __CrestStore(1490, (unsigned long )(& i));
# 708 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___19: ;
    }
    {
    __CrestLoad(1493, (unsigned long )FSWAP, (long long )*FSWAP);
    __CrestLoad(1492, (unsigned long )0, (long long )451U);
    __CrestApply2(1491, 12, (long long )((unsigned int )*FSWAP == 451U));
# 710 "../HPL_pdinfo.c"
    if ((unsigned int )*FSWAP == 451U) {
      __CrestBranch(1494, 684, 1);
# 710 "../HPL_pdinfo.c"
      mem_177 = iwork + j;
      __CrestLoad(1496, (unsigned long )0, (long long )0);
      __CrestStore(1497, (unsigned long )mem_177);
# 710 "../HPL_pdinfo.c"
      *mem_177 = 0;
    } else {
      __CrestBranch(1495, 685, 0);
      {
      __CrestLoad(1500, (unsigned long )FSWAP, (long long )*FSWAP);
      __CrestLoad(1499, (unsigned long )0, (long long )452U);
      __CrestApply2(1498, 12, (long long )((unsigned int )*FSWAP == 452U));
# 711 "../HPL_pdinfo.c"
      if ((unsigned int )*FSWAP == 452U) {
        __CrestBranch(1501, 686, 1);
# 711 "../HPL_pdinfo.c"
        mem_178 = iwork + j;
        __CrestLoad(1503, (unsigned long )0, (long long )1);
        __CrestStore(1504, (unsigned long )mem_178);
# 711 "../HPL_pdinfo.c"
        *mem_178 = 1;
      } else {
        __CrestBranch(1502, 687, 0);
        {
        __CrestLoad(1507, (unsigned long )FSWAP, (long long )*FSWAP);
        __CrestLoad(1506, (unsigned long )0, (long long )453U);
        __CrestApply2(1505, 12, (long long )((unsigned int )*FSWAP == 453U));
# 712 "../HPL_pdinfo.c"
        if ((unsigned int )*FSWAP == 453U) {
          __CrestBranch(1508, 688, 1);
# 712 "../HPL_pdinfo.c"
          mem_179 = iwork + j;
          __CrestLoad(1510, (unsigned long )0, (long long )2);
          __CrestStore(1511, (unsigned long )mem_179);
# 712 "../HPL_pdinfo.c"
          *mem_179 = 2;
        } else {
          __CrestBranch(1509, 689, 0);

        }
        }
      }
      }
    }
    }
    __CrestLoad(1514, (unsigned long )(& j), (long long )j);
    __CrestLoad(1513, (unsigned long )0, (long long )1);
    __CrestApply2(1512, 0, (long long )(j + 1));
    __CrestStore(1515, (unsigned long )(& j));
# 713 "../HPL_pdinfo.c"
    j ++;
  } else {
    __CrestBranch(1240, 691, 0);

  }
  }
  __CrestLoad(1516, (unsigned long )(& lwork), (long long )lwork);
  __CrestLoad(1517, (unsigned long )0, (long long )((HPL_T_TYPE const )100));
  __CrestLoad(1518, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(1519, (unsigned long )0, (long long )1140850688);
# 715 "../HPL_pdinfo.c"
  HPL_broadcast((void *)iwork, (int const )lwork, (HPL_T_TYPE const )100, (int const )0,
                1140850688);
  __CrestClearStack(1520);
  {
  __CrestLoad(1523, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(1522, (unsigned long )0, (long long )0);
  __CrestApply2(1521, 13, (long long )(rank != 0));
# 717 "../HPL_pdinfo.c"
  if (rank != 0) {
    __CrestBranch(1524, 694, 1);
    __CrestLoad(1526, (unsigned long )0, (long long )0);
    __CrestStore(1527, (unsigned long )(& j));
# 719 "../HPL_pdinfo.c"
    j = 0;
    __CrestLoad(1528, (unsigned long )0, (long long )0);
    __CrestStore(1529, (unsigned long )(& i));
# 720 "../HPL_pdinfo.c"
    i = 0;
    {
# 720 "../HPL_pdinfo.c"
    while (1) {
      while_continue___20: ;
      {
      __CrestLoad(1532, (unsigned long )(& i), (long long )i);
      __CrestLoad(1531, (unsigned long )NS, (long long )*NS);
      __CrestApply2(1530, 16, (long long )(i < *NS));
# 720 "../HPL_pdinfo.c"
      if (i < *NS) {
        __CrestBranch(1533, 699, 1);

      } else {
        __CrestBranch(1534, 700, 0);
# 720 "../HPL_pdinfo.c"
        goto while_break___20;
      }
      }
# 720 "../HPL_pdinfo.c"
      mem_180 = N + i;
# 720 "../HPL_pdinfo.c"
      mem_181 = iwork + j;
      __CrestLoad(1535, (unsigned long )mem_181, (long long )*mem_181);
      __CrestStore(1536, (unsigned long )mem_180);
# 720 "../HPL_pdinfo.c"
      *mem_180 = *mem_181;
      __CrestLoad(1539, (unsigned long )(& j), (long long )j);
      __CrestLoad(1538, (unsigned long )0, (long long )1);
      __CrestApply2(1537, 0, (long long )(j + 1));
      __CrestStore(1540, (unsigned long )(& j));
# 720 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1543, (unsigned long )(& i), (long long )i);
      __CrestLoad(1542, (unsigned long )0, (long long )1);
      __CrestApply2(1541, 0, (long long )(i + 1));
      __CrestStore(1544, (unsigned long )(& i));
# 720 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___20: ;
    }
    __CrestLoad(1545, (unsigned long )0, (long long )0);
    __CrestStore(1546, (unsigned long )(& i));
# 721 "../HPL_pdinfo.c"
    i = 0;
    {
# 721 "../HPL_pdinfo.c"
    while (1) {
      while_continue___21: ;
      {
      __CrestLoad(1549, (unsigned long )(& i), (long long )i);
      __CrestLoad(1548, (unsigned long )NBS, (long long )*NBS);
      __CrestApply2(1547, 16, (long long )(i < *NBS));
# 721 "../HPL_pdinfo.c"
      if (i < *NBS) {
        __CrestBranch(1550, 708, 1);

      } else {
        __CrestBranch(1551, 709, 0);
# 721 "../HPL_pdinfo.c"
        goto while_break___21;
      }
      }
# 721 "../HPL_pdinfo.c"
      mem_182 = NB + i;
# 721 "../HPL_pdinfo.c"
      mem_183 = iwork + j;
      __CrestLoad(1552, (unsigned long )mem_183, (long long )*mem_183);
      __CrestStore(1553, (unsigned long )mem_182);
# 721 "../HPL_pdinfo.c"
      *mem_182 = *mem_183;
      __CrestLoad(1556, (unsigned long )(& j), (long long )j);
      __CrestLoad(1555, (unsigned long )0, (long long )1);
      __CrestApply2(1554, 0, (long long )(j + 1));
      __CrestStore(1557, (unsigned long )(& j));
# 721 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1560, (unsigned long )(& i), (long long )i);
      __CrestLoad(1559, (unsigned long )0, (long long )1);
      __CrestApply2(1558, 0, (long long )(i + 1));
      __CrestStore(1561, (unsigned long )(& i));
# 721 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___21: ;
    }
    __CrestLoad(1562, (unsigned long )0, (long long )0);
    __CrestStore(1563, (unsigned long )(& i));
# 722 "../HPL_pdinfo.c"
    i = 0;
    {
# 722 "../HPL_pdinfo.c"
    while (1) {
      while_continue___22: ;
      {
      __CrestLoad(1566, (unsigned long )(& i), (long long )i);
      __CrestLoad(1565, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(1564, 16, (long long )(i < *NPQS));
# 722 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(1567, 717, 1);

      } else {
        __CrestBranch(1568, 718, 0);
# 722 "../HPL_pdinfo.c"
        goto while_break___22;
      }
      }
# 722 "../HPL_pdinfo.c"
      mem_184 = P + i;
# 722 "../HPL_pdinfo.c"
      mem_185 = iwork + j;
      __CrestLoad(1569, (unsigned long )mem_185, (long long )*mem_185);
      __CrestStore(1570, (unsigned long )mem_184);
# 722 "../HPL_pdinfo.c"
      *mem_184 = *mem_185;
      __CrestLoad(1573, (unsigned long )(& j), (long long )j);
      __CrestLoad(1572, (unsigned long )0, (long long )1);
      __CrestApply2(1571, 0, (long long )(j + 1));
      __CrestStore(1574, (unsigned long )(& j));
# 722 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1577, (unsigned long )(& i), (long long )i);
      __CrestLoad(1576, (unsigned long )0, (long long )1);
      __CrestApply2(1575, 0, (long long )(i + 1));
      __CrestStore(1578, (unsigned long )(& i));
# 722 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___22: ;
    }
    __CrestLoad(1579, (unsigned long )0, (long long )0);
    __CrestStore(1580, (unsigned long )(& i));
# 723 "../HPL_pdinfo.c"
    i = 0;
    {
# 723 "../HPL_pdinfo.c"
    while (1) {
      while_continue___23: ;
      {
      __CrestLoad(1583, (unsigned long )(& i), (long long )i);
      __CrestLoad(1582, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(1581, 16, (long long )(i < *NPQS));
# 723 "../HPL_pdinfo.c"
      if (i < *NPQS) {
        __CrestBranch(1584, 726, 1);

      } else {
        __CrestBranch(1585, 727, 0);
# 723 "../HPL_pdinfo.c"
        goto while_break___23;
      }
      }
# 723 "../HPL_pdinfo.c"
      mem_186 = Q + i;
# 723 "../HPL_pdinfo.c"
      mem_187 = iwork + j;
      __CrestLoad(1586, (unsigned long )mem_187, (long long )*mem_187);
      __CrestStore(1587, (unsigned long )mem_186);
# 723 "../HPL_pdinfo.c"
      *mem_186 = *mem_187;
      __CrestLoad(1590, (unsigned long )(& j), (long long )j);
      __CrestLoad(1589, (unsigned long )0, (long long )1);
      __CrestApply2(1588, 0, (long long )(j + 1));
      __CrestStore(1591, (unsigned long )(& j));
# 723 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1594, (unsigned long )(& i), (long long )i);
      __CrestLoad(1593, (unsigned long )0, (long long )1);
      __CrestApply2(1592, 0, (long long )(i + 1));
      __CrestStore(1595, (unsigned long )(& i));
# 723 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___23: ;
    }
    __CrestLoad(1596, (unsigned long )0, (long long )0);
    __CrestStore(1597, (unsigned long )(& i));
# 725 "../HPL_pdinfo.c"
    i = 0;
    {
# 725 "../HPL_pdinfo.c"
    while (1) {
      while_continue___24: ;
      {
      __CrestLoad(1600, (unsigned long )(& i), (long long )i);
      __CrestLoad(1599, (unsigned long )NPFS, (long long )*NPFS);
      __CrestApply2(1598, 16, (long long )(i < *NPFS));
# 725 "../HPL_pdinfo.c"
      if (i < *NPFS) {
        __CrestBranch(1601, 735, 1);

      } else {
        __CrestBranch(1602, 736, 0);
# 725 "../HPL_pdinfo.c"
        goto while_break___24;
      }
      }
      {
# 727 "../HPL_pdinfo.c"
      mem_188 = iwork + j;
      {
      __CrestLoad(1605, (unsigned long )mem_188, (long long )*mem_188);
      __CrestLoad(1604, (unsigned long )0, (long long )0);
      __CrestApply2(1603, 12, (long long )(*mem_188 == 0));
# 727 "../HPL_pdinfo.c"
      if (*mem_188 == 0) {
        __CrestBranch(1606, 740, 1);
# 727 "../HPL_pdinfo.c"
        mem_189 = PF + i;
        __CrestLoad(1608, (unsigned long )0, (long long )((HPL_T_FACT )301));
        __CrestStore(1609, (unsigned long )mem_189);
# 727 "../HPL_pdinfo.c"
        *mem_189 = (HPL_T_FACT )301;
      } else {
        __CrestBranch(1607, 741, 0);
        {
# 728 "../HPL_pdinfo.c"
        mem_190 = iwork + j;
        {
        __CrestLoad(1612, (unsigned long )mem_190, (long long )*mem_190);
        __CrestLoad(1611, (unsigned long )0, (long long )1);
        __CrestApply2(1610, 12, (long long )(*mem_190 == 1));
# 728 "../HPL_pdinfo.c"
        if (*mem_190 == 1) {
          __CrestBranch(1613, 744, 1);
# 728 "../HPL_pdinfo.c"
          mem_191 = PF + i;
          __CrestLoad(1615, (unsigned long )0, (long long )((HPL_T_FACT )302));
          __CrestStore(1616, (unsigned long )mem_191);
# 728 "../HPL_pdinfo.c"
          *mem_191 = (HPL_T_FACT )302;
        } else {
          __CrestBranch(1614, 745, 0);
          {
# 729 "../HPL_pdinfo.c"
          mem_192 = iwork + j;
          {
          __CrestLoad(1619, (unsigned long )mem_192, (long long )*mem_192);
          __CrestLoad(1618, (unsigned long )0, (long long )2);
          __CrestApply2(1617, 12, (long long )(*mem_192 == 2));
# 729 "../HPL_pdinfo.c"
          if (*mem_192 == 2) {
            __CrestBranch(1620, 748, 1);
# 729 "../HPL_pdinfo.c"
            mem_193 = PF + i;
            __CrestLoad(1622, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(1623, (unsigned long )mem_193);
# 729 "../HPL_pdinfo.c"
            *mem_193 = (HPL_T_FACT )303;
          } else {
            __CrestBranch(1621, 749, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1626, (unsigned long )(& j), (long long )j);
      __CrestLoad(1625, (unsigned long )0, (long long )1);
      __CrestApply2(1624, 0, (long long )(j + 1));
      __CrestStore(1627, (unsigned long )(& j));
# 730 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1630, (unsigned long )(& i), (long long )i);
      __CrestLoad(1629, (unsigned long )0, (long long )1);
      __CrestApply2(1628, 0, (long long )(i + 1));
      __CrestStore(1631, (unsigned long )(& i));
# 725 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___24: ;
    }
    __CrestLoad(1632, (unsigned long )0, (long long )0);
    __CrestStore(1633, (unsigned long )(& i));
# 732 "../HPL_pdinfo.c"
    i = 0;
    {
# 732 "../HPL_pdinfo.c"
    while (1) {
      while_continue___25: ;
      {
      __CrestLoad(1636, (unsigned long )(& i), (long long )i);
      __CrestLoad(1635, (unsigned long )NBMS, (long long )*NBMS);
      __CrestApply2(1634, 16, (long long )(i < *NBMS));
# 732 "../HPL_pdinfo.c"
      if (i < *NBMS) {
        __CrestBranch(1637, 757, 1);

      } else {
        __CrestBranch(1638, 758, 0);
# 732 "../HPL_pdinfo.c"
        goto while_break___25;
      }
      }
# 732 "../HPL_pdinfo.c"
      mem_194 = NBM + i;
# 732 "../HPL_pdinfo.c"
      mem_195 = iwork + j;
      __CrestLoad(1639, (unsigned long )mem_195, (long long )*mem_195);
      __CrestStore(1640, (unsigned long )mem_194);
# 732 "../HPL_pdinfo.c"
      *mem_194 = *mem_195;
      __CrestLoad(1643, (unsigned long )(& j), (long long )j);
      __CrestLoad(1642, (unsigned long )0, (long long )1);
      __CrestApply2(1641, 0, (long long )(j + 1));
      __CrestStore(1644, (unsigned long )(& j));
# 732 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1647, (unsigned long )(& i), (long long )i);
      __CrestLoad(1646, (unsigned long )0, (long long )1);
      __CrestApply2(1645, 0, (long long )(i + 1));
      __CrestStore(1648, (unsigned long )(& i));
# 732 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___25: ;
    }
    __CrestLoad(1649, (unsigned long )0, (long long )0);
    __CrestStore(1650, (unsigned long )(& i));
# 733 "../HPL_pdinfo.c"
    i = 0;
    {
# 733 "../HPL_pdinfo.c"
    while (1) {
      while_continue___26: ;
      {
      __CrestLoad(1653, (unsigned long )(& i), (long long )i);
      __CrestLoad(1652, (unsigned long )NDVS, (long long )*NDVS);
      __CrestApply2(1651, 16, (long long )(i < *NDVS));
# 733 "../HPL_pdinfo.c"
      if (i < *NDVS) {
        __CrestBranch(1654, 766, 1);

      } else {
        __CrestBranch(1655, 767, 0);
# 733 "../HPL_pdinfo.c"
        goto while_break___26;
      }
      }
# 733 "../HPL_pdinfo.c"
      mem_196 = NDV + i;
# 733 "../HPL_pdinfo.c"
      mem_197 = iwork + j;
      __CrestLoad(1656, (unsigned long )mem_197, (long long )*mem_197);
      __CrestStore(1657, (unsigned long )mem_196);
# 733 "../HPL_pdinfo.c"
      *mem_196 = *mem_197;
      __CrestLoad(1660, (unsigned long )(& j), (long long )j);
      __CrestLoad(1659, (unsigned long )0, (long long )1);
      __CrestApply2(1658, 0, (long long )(j + 1));
      __CrestStore(1661, (unsigned long )(& j));
# 733 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1664, (unsigned long )(& i), (long long )i);
      __CrestLoad(1663, (unsigned long )0, (long long )1);
      __CrestApply2(1662, 0, (long long )(i + 1));
      __CrestStore(1665, (unsigned long )(& i));
# 733 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___26: ;
    }
    __CrestLoad(1666, (unsigned long )0, (long long )0);
    __CrestStore(1667, (unsigned long )(& i));
# 734 "../HPL_pdinfo.c"
    i = 0;
    {
# 734 "../HPL_pdinfo.c"
    while (1) {
      while_continue___27: ;
      {
      __CrestLoad(1670, (unsigned long )(& i), (long long )i);
      __CrestLoad(1669, (unsigned long )NRFS, (long long )*NRFS);
      __CrestApply2(1668, 16, (long long )(i < *NRFS));
# 734 "../HPL_pdinfo.c"
      if (i < *NRFS) {
        __CrestBranch(1671, 775, 1);

      } else {
        __CrestBranch(1672, 776, 0);
# 734 "../HPL_pdinfo.c"
        goto while_break___27;
      }
      }
      {
# 736 "../HPL_pdinfo.c"
      mem_198 = iwork + j;
      {
      __CrestLoad(1675, (unsigned long )mem_198, (long long )*mem_198);
      __CrestLoad(1674, (unsigned long )0, (long long )0);
      __CrestApply2(1673, 12, (long long )(*mem_198 == 0));
# 736 "../HPL_pdinfo.c"
      if (*mem_198 == 0) {
        __CrestBranch(1676, 780, 1);
# 736 "../HPL_pdinfo.c"
        mem_199 = RF + i;
        __CrestLoad(1678, (unsigned long )0, (long long )((HPL_T_FACT )301));
        __CrestStore(1679, (unsigned long )mem_199);
# 736 "../HPL_pdinfo.c"
        *mem_199 = (HPL_T_FACT )301;
      } else {
        __CrestBranch(1677, 781, 0);
        {
# 737 "../HPL_pdinfo.c"
        mem_200 = iwork + j;
        {
        __CrestLoad(1682, (unsigned long )mem_200, (long long )*mem_200);
        __CrestLoad(1681, (unsigned long )0, (long long )1);
        __CrestApply2(1680, 12, (long long )(*mem_200 == 1));
# 737 "../HPL_pdinfo.c"
        if (*mem_200 == 1) {
          __CrestBranch(1683, 784, 1);
# 737 "../HPL_pdinfo.c"
          mem_201 = RF + i;
          __CrestLoad(1685, (unsigned long )0, (long long )((HPL_T_FACT )302));
          __CrestStore(1686, (unsigned long )mem_201);
# 737 "../HPL_pdinfo.c"
          *mem_201 = (HPL_T_FACT )302;
        } else {
          __CrestBranch(1684, 785, 0);
          {
# 738 "../HPL_pdinfo.c"
          mem_202 = iwork + j;
          {
          __CrestLoad(1689, (unsigned long )mem_202, (long long )*mem_202);
          __CrestLoad(1688, (unsigned long )0, (long long )2);
          __CrestApply2(1687, 12, (long long )(*mem_202 == 2));
# 738 "../HPL_pdinfo.c"
          if (*mem_202 == 2) {
            __CrestBranch(1690, 788, 1);
# 738 "../HPL_pdinfo.c"
            mem_203 = RF + i;
            __CrestLoad(1692, (unsigned long )0, (long long )((HPL_T_FACT )303));
            __CrestStore(1693, (unsigned long )mem_203);
# 738 "../HPL_pdinfo.c"
            *mem_203 = (HPL_T_FACT )303;
          } else {
            __CrestBranch(1691, 789, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1696, (unsigned long )(& j), (long long )j);
      __CrestLoad(1695, (unsigned long )0, (long long )1);
      __CrestApply2(1694, 0, (long long )(j + 1));
      __CrestStore(1697, (unsigned long )(& j));
# 739 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1700, (unsigned long )(& i), (long long )i);
      __CrestLoad(1699, (unsigned long )0, (long long )1);
      __CrestApply2(1698, 0, (long long )(i + 1));
      __CrestStore(1701, (unsigned long )(& i));
# 734 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___27: ;
    }
    __CrestLoad(1702, (unsigned long )0, (long long )0);
    __CrestStore(1703, (unsigned long )(& i));
# 741 "../HPL_pdinfo.c"
    i = 0;
    {
# 741 "../HPL_pdinfo.c"
    while (1) {
      while_continue___28: ;
      {
      __CrestLoad(1706, (unsigned long )(& i), (long long )i);
      __CrestLoad(1705, (unsigned long )NTPS, (long long )*NTPS);
      __CrestApply2(1704, 16, (long long )(i < *NTPS));
# 741 "../HPL_pdinfo.c"
      if (i < *NTPS) {
        __CrestBranch(1707, 797, 1);

      } else {
        __CrestBranch(1708, 798, 0);
# 741 "../HPL_pdinfo.c"
        goto while_break___28;
      }
      }
      {
# 743 "../HPL_pdinfo.c"
      mem_204 = iwork + j;
      {
      __CrestLoad(1711, (unsigned long )mem_204, (long long )*mem_204);
      __CrestLoad(1710, (unsigned long )0, (long long )0);
      __CrestApply2(1709, 12, (long long )(*mem_204 == 0));
# 743 "../HPL_pdinfo.c"
      if (*mem_204 == 0) {
        __CrestBranch(1712, 802, 1);
# 743 "../HPL_pdinfo.c"
        mem_205 = TP + i;
        __CrestLoad(1714, (unsigned long )0, (long long )((HPL_T_TOP )401));
        __CrestStore(1715, (unsigned long )mem_205);
# 743 "../HPL_pdinfo.c"
        *mem_205 = (HPL_T_TOP )401;
      } else {
        __CrestBranch(1713, 803, 0);
        {
# 744 "../HPL_pdinfo.c"
        mem_206 = iwork + j;
        {
        __CrestLoad(1718, (unsigned long )mem_206, (long long )*mem_206);
        __CrestLoad(1717, (unsigned long )0, (long long )1);
        __CrestApply2(1716, 12, (long long )(*mem_206 == 1));
# 744 "../HPL_pdinfo.c"
        if (*mem_206 == 1) {
          __CrestBranch(1719, 806, 1);
# 744 "../HPL_pdinfo.c"
          mem_207 = TP + i;
          __CrestLoad(1721, (unsigned long )0, (long long )((HPL_T_TOP )402));
          __CrestStore(1722, (unsigned long )mem_207);
# 744 "../HPL_pdinfo.c"
          *mem_207 = (HPL_T_TOP )402;
        } else {
          __CrestBranch(1720, 807, 0);
          {
# 745 "../HPL_pdinfo.c"
          mem_208 = iwork + j;
          {
          __CrestLoad(1725, (unsigned long )mem_208, (long long )*mem_208);
          __CrestLoad(1724, (unsigned long )0, (long long )2);
          __CrestApply2(1723, 12, (long long )(*mem_208 == 2));
# 745 "../HPL_pdinfo.c"
          if (*mem_208 == 2) {
            __CrestBranch(1726, 810, 1);
# 745 "../HPL_pdinfo.c"
            mem_209 = TP + i;
            __CrestLoad(1728, (unsigned long )0, (long long )((HPL_T_TOP )403));
            __CrestStore(1729, (unsigned long )mem_209);
# 745 "../HPL_pdinfo.c"
            *mem_209 = (HPL_T_TOP )403;
          } else {
            __CrestBranch(1727, 811, 0);
            {
# 746 "../HPL_pdinfo.c"
            mem_210 = iwork + j;
            {
            __CrestLoad(1732, (unsigned long )mem_210, (long long )*mem_210);
            __CrestLoad(1731, (unsigned long )0, (long long )3);
            __CrestApply2(1730, 12, (long long )(*mem_210 == 3));
# 746 "../HPL_pdinfo.c"
            if (*mem_210 == 3) {
              __CrestBranch(1733, 814, 1);
# 746 "../HPL_pdinfo.c"
              mem_211 = TP + i;
              __CrestLoad(1735, (unsigned long )0, (long long )((HPL_T_TOP )404));
              __CrestStore(1736, (unsigned long )mem_211);
# 746 "../HPL_pdinfo.c"
              *mem_211 = (HPL_T_TOP )404;
            } else {
              __CrestBranch(1734, 815, 0);
              {
# 747 "../HPL_pdinfo.c"
              mem_212 = iwork + j;
              {
              __CrestLoad(1739, (unsigned long )mem_212, (long long )*mem_212);
              __CrestLoad(1738, (unsigned long )0, (long long )4);
              __CrestApply2(1737, 12, (long long )(*mem_212 == 4));
# 747 "../HPL_pdinfo.c"
              if (*mem_212 == 4) {
                __CrestBranch(1740, 818, 1);
# 747 "../HPL_pdinfo.c"
                mem_213 = TP + i;
                __CrestLoad(1742, (unsigned long )0, (long long )((HPL_T_TOP )405));
                __CrestStore(1743, (unsigned long )mem_213);
# 747 "../HPL_pdinfo.c"
                *mem_213 = (HPL_T_TOP )405;
              } else {
                __CrestBranch(1741, 819, 0);
                {
# 748 "../HPL_pdinfo.c"
                mem_214 = iwork + j;
                {
                __CrestLoad(1746, (unsigned long )mem_214, (long long )*mem_214);
                __CrestLoad(1745, (unsigned long )0, (long long )5);
                __CrestApply2(1744, 12, (long long )(*mem_214 == 5));
# 748 "../HPL_pdinfo.c"
                if (*mem_214 == 5) {
                  __CrestBranch(1747, 822, 1);
# 748 "../HPL_pdinfo.c"
                  mem_215 = TP + i;
                  __CrestLoad(1749, (unsigned long )0, (long long )((HPL_T_TOP )406));
                  __CrestStore(1750, (unsigned long )mem_215);
# 748 "../HPL_pdinfo.c"
                  *mem_215 = (HPL_T_TOP )406;
                } else {
                  __CrestBranch(1748, 823, 0);

                }
                }
                }
              }
              }
              }
            }
            }
            }
          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(1753, (unsigned long )(& j), (long long )j);
      __CrestLoad(1752, (unsigned long )0, (long long )1);
      __CrestApply2(1751, 0, (long long )(j + 1));
      __CrestStore(1754, (unsigned long )(& j));
# 749 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1757, (unsigned long )(& i), (long long )i);
      __CrestLoad(1756, (unsigned long )0, (long long )1);
      __CrestApply2(1755, 0, (long long )(i + 1));
      __CrestStore(1758, (unsigned long )(& i));
# 741 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___28: ;
    }
    __CrestLoad(1759, (unsigned long )0, (long long )0);
    __CrestStore(1760, (unsigned long )(& i));
# 751 "../HPL_pdinfo.c"
    i = 0;
    {
# 751 "../HPL_pdinfo.c"
    while (1) {
      while_continue___29: ;
      {
      __CrestLoad(1763, (unsigned long )(& i), (long long )i);
      __CrestLoad(1762, (unsigned long )NDHS, (long long )*NDHS);
      __CrestApply2(1761, 16, (long long )(i < *NDHS));
# 751 "../HPL_pdinfo.c"
      if (i < *NDHS) {
        __CrestBranch(1764, 831, 1);

      } else {
        __CrestBranch(1765, 832, 0);
# 751 "../HPL_pdinfo.c"
        goto while_break___29;
      }
      }
# 751 "../HPL_pdinfo.c"
      mem_216 = DH + i;
# 751 "../HPL_pdinfo.c"
      mem_217 = iwork + j;
      __CrestLoad(1766, (unsigned long )mem_217, (long long )*mem_217);
      __CrestStore(1767, (unsigned long )mem_216);
# 751 "../HPL_pdinfo.c"
      *mem_216 = *mem_217;
      __CrestLoad(1770, (unsigned long )(& j), (long long )j);
      __CrestLoad(1769, (unsigned long )0, (long long )1);
      __CrestApply2(1768, 0, (long long )(j + 1));
      __CrestStore(1771, (unsigned long )(& j));
# 751 "../HPL_pdinfo.c"
      j ++;
      __CrestLoad(1774, (unsigned long )(& i), (long long )i);
      __CrestLoad(1773, (unsigned long )0, (long long )1);
      __CrestApply2(1772, 0, (long long )(i + 1));
      __CrestStore(1775, (unsigned long )(& i));
# 751 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___29: ;
    }
    {
# 753 "../HPL_pdinfo.c"
    mem_218 = iwork + j;
    {
    __CrestLoad(1778, (unsigned long )mem_218, (long long )*mem_218);
    __CrestLoad(1777, (unsigned long )0, (long long )0);
    __CrestApply2(1776, 12, (long long )(*mem_218 == 0));
# 753 "../HPL_pdinfo.c"
    if (*mem_218 == 0) {
      __CrestBranch(1779, 838, 1);
      __CrestLoad(1781, (unsigned long )0, (long long )((HPL_T_SWAP )451));
      __CrestStore(1782, (unsigned long )FSWAP);
# 753 "../HPL_pdinfo.c"
      *FSWAP = (HPL_T_SWAP )451;
    } else {
      __CrestBranch(1780, 839, 0);
      {
# 754 "../HPL_pdinfo.c"
      mem_219 = iwork + j;
      {
      __CrestLoad(1785, (unsigned long )mem_219, (long long )*mem_219);
      __CrestLoad(1784, (unsigned long )0, (long long )1);
      __CrestApply2(1783, 12, (long long )(*mem_219 == 1));
# 754 "../HPL_pdinfo.c"
      if (*mem_219 == 1) {
        __CrestBranch(1786, 842, 1);
        __CrestLoad(1788, (unsigned long )0, (long long )((HPL_T_SWAP )452));
        __CrestStore(1789, (unsigned long )FSWAP);
# 754 "../HPL_pdinfo.c"
        *FSWAP = (HPL_T_SWAP )452;
      } else {
        __CrestBranch(1787, 843, 0);
        {
# 755 "../HPL_pdinfo.c"
        mem_220 = iwork + j;
        {
        __CrestLoad(1792, (unsigned long )mem_220, (long long )*mem_220);
        __CrestLoad(1791, (unsigned long )0, (long long )2);
        __CrestApply2(1790, 12, (long long )(*mem_220 == 2));
# 755 "../HPL_pdinfo.c"
        if (*mem_220 == 2) {
          __CrestBranch(1793, 846, 1);
          __CrestLoad(1795, (unsigned long )0, (long long )((HPL_T_SWAP )453));
          __CrestStore(1796, (unsigned long )FSWAP);
# 755 "../HPL_pdinfo.c"
          *FSWAP = (HPL_T_SWAP )453;
        } else {
          __CrestBranch(1794, 847, 0);

        }
        }
        }
      }
      }
      }
    }
    }
    }
    __CrestLoad(1799, (unsigned long )(& j), (long long )j);
    __CrestLoad(1798, (unsigned long )0, (long long )1);
    __CrestApply2(1797, 0, (long long )(j + 1));
    __CrestStore(1800, (unsigned long )(& j));
# 756 "../HPL_pdinfo.c"
    j ++;
  } else {
    __CrestBranch(1525, 849, 0);

  }
  }
  {
  __CrestLoad(1803, (unsigned long )(& iwork), (long long )((unsigned long )iwork));
  __CrestLoad(1802, (unsigned long )0, (long long )0);
  __CrestApply2(1801, 13, (long long )(iwork != 0));
# 758 "../HPL_pdinfo.c"
  if (iwork != 0) {
    __CrestBranch(1804, 851, 1);
# 758 "../HPL_pdinfo.c"
    free((void *)iwork);
    __CrestClearStack(1806);
  } else {
    __CrestBranch(1805, 852, 0);

  }
  }
  {
  __CrestLoad(1809, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(1808, (unsigned long )0, (long long )0);
  __CrestApply2(1807, 12, (long long )(rank == 0));
# 762 "../HPL_pdinfo.c"
  if (rank == 0) {
    __CrestBranch(1810, 854, 1);
# 764 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s%s\n", "======================================", "======================================");
    __CrestClearStack(1812);
# 767 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s%s\n", "HPLinpack 1.0a  --  High-Performance Linpack benchmark  --  ",
                " January 20, 2004");
    __CrestClearStack(1813);
# 770 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s%s\n", "Written by A. Petitet and R. Clint Whaley,  ",
                "Innovative Computing Labs.,  UTK");
    __CrestClearStack(1814);
# 773 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s%s\n", "======================================", "======================================");
    __CrestClearStack(1815);
# 777 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\n%s\n", "An explanation of the input/output parameters follows:");
    __CrestClearStack(1816);
# 779 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "T/V    : Wall time / encoded variant.");
    __CrestClearStack(1817);
# 781 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "N      : The order of the coefficient matrix A.");
    __CrestClearStack(1818);
# 783 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "NB     : The partitioning blocking factor.");
    __CrestClearStack(1819);
# 785 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "P      : The number of process rows.");
    __CrestClearStack(1820);
# 787 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "Q      : The number of process columns.");
    __CrestClearStack(1821);
# 789 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "Time   : Time in seconds to solve the linear system.");
    __CrestClearStack(1822);
# 791 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n\n", "Gflops : Rate of execution for solving the linear system.");
    __CrestClearStack(1823);
# 793 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "%s\n", "The following parameter values will be used:");
    __CrestClearStack(1824);
# 798 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nN      :");
    __CrestClearStack(1825);
    __CrestLoad(1826, (unsigned long )0, (long long )0);
    __CrestStore(1827, (unsigned long )(& i));
# 799 "../HPL_pdinfo.c"
    i = 0;
    {
# 799 "../HPL_pdinfo.c"
    while (1) {
      while_continue___30: ;
      {
      __CrestLoad(1830, (unsigned long )0, (long long )8);
      __CrestLoad(1829, (unsigned long )NS, (long long )*NS);
      __CrestApply2(1828, 16, (long long )(8 < *NS));
# 799 "../HPL_pdinfo.c"
      if (8 < *NS) {
        __CrestBranch(1831, 859, 1);
        __CrestLoad(1833, (unsigned long )0, (long long )8);
        __CrestStore(1834, (unsigned long )(& tmp___19));
# 799 "../HPL_pdinfo.c"
        tmp___19 = 8;
      } else {
        __CrestBranch(1832, 860, 0);
        __CrestLoad(1835, (unsigned long )NS, (long long )*NS);
        __CrestStore(1836, (unsigned long )(& tmp___19));
# 799 "../HPL_pdinfo.c"
        tmp___19 = *NS;
      }
      }
      {
      __CrestLoad(1839, (unsigned long )(& i), (long long )i);
      __CrestLoad(1838, (unsigned long )(& tmp___19), (long long )tmp___19);
      __CrestApply2(1837, 16, (long long )(i < tmp___19));
# 799 "../HPL_pdinfo.c"
      if (i < tmp___19) {
        __CrestBranch(1840, 862, 1);

      } else {
        __CrestBranch(1841, 863, 0);
# 799 "../HPL_pdinfo.c"
        goto while_break___30;
      }
      }
# 800 "../HPL_pdinfo.c"
      mem_221 = N + i;
      __CrestLoad(1842, (unsigned long )mem_221, (long long )*mem_221);
# 800 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_221);
      __CrestClearStack(1843);
      __CrestLoad(1846, (unsigned long )(& i), (long long )i);
      __CrestLoad(1845, (unsigned long )0, (long long )1);
      __CrestApply2(1844, 0, (long long )(i + 1));
      __CrestStore(1847, (unsigned long )(& i));
# 799 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___30: ;
    }
    {
    __CrestLoad(1850, (unsigned long )NS, (long long )*NS);
    __CrestLoad(1849, (unsigned long )0, (long long )8);
    __CrestApply2(1848, 14, (long long )(*NS > 8));
# 801 "../HPL_pdinfo.c"
    if (*NS > 8) {
      __CrestBranch(1851, 867, 1);
# 803 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(1853);
      __CrestLoad(1854, (unsigned long )0, (long long )8);
      __CrestStore(1855, (unsigned long )(& i));
# 804 "../HPL_pdinfo.c"
      i = 8;
      {
# 804 "../HPL_pdinfo.c"
      while (1) {
        while_continue___31: ;
        {
        __CrestLoad(1858, (unsigned long )0, (long long )16);
        __CrestLoad(1857, (unsigned long )NS, (long long )*NS);
        __CrestApply2(1856, 16, (long long )(16 < *NS));
# 804 "../HPL_pdinfo.c"
        if (16 < *NS) {
          __CrestBranch(1859, 872, 1);
          __CrestLoad(1861, (unsigned long )0, (long long )16);
          __CrestStore(1862, (unsigned long )(& tmp___20));
# 804 "../HPL_pdinfo.c"
          tmp___20 = 16;
        } else {
          __CrestBranch(1860, 873, 0);
          __CrestLoad(1863, (unsigned long )NS, (long long )*NS);
          __CrestStore(1864, (unsigned long )(& tmp___20));
# 804 "../HPL_pdinfo.c"
          tmp___20 = *NS;
        }
        }
        {
        __CrestLoad(1867, (unsigned long )(& i), (long long )i);
        __CrestLoad(1866, (unsigned long )(& tmp___20), (long long )tmp___20);
        __CrestApply2(1865, 16, (long long )(i < tmp___20));
# 804 "../HPL_pdinfo.c"
        if (i < tmp___20) {
          __CrestBranch(1868, 875, 1);

        } else {
          __CrestBranch(1869, 876, 0);
# 804 "../HPL_pdinfo.c"
          goto while_break___31;
        }
        }
# 805 "../HPL_pdinfo.c"
        mem_222 = N + i;
        __CrestLoad(1870, (unsigned long )mem_222, (long long )*mem_222);
# 805 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_222);
        __CrestClearStack(1871);
        __CrestLoad(1874, (unsigned long )(& i), (long long )i);
        __CrestLoad(1873, (unsigned long )0, (long long )1);
        __CrestApply2(1872, 0, (long long )(i + 1));
        __CrestStore(1875, (unsigned long )(& i));
# 804 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___31: ;
      }
      {
      __CrestLoad(1878, (unsigned long )NS, (long long )*NS);
      __CrestLoad(1877, (unsigned long )0, (long long )16);
      __CrestApply2(1876, 14, (long long )(*NS > 16));
# 806 "../HPL_pdinfo.c"
      if (*NS > 16) {
        __CrestBranch(1879, 880, 1);
# 808 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(1881);
        __CrestLoad(1882, (unsigned long )0, (long long )16);
        __CrestStore(1883, (unsigned long )(& i));
# 809 "../HPL_pdinfo.c"
        i = 16;
        {
# 809 "../HPL_pdinfo.c"
        while (1) {
          while_continue___32: ;
          {
          __CrestLoad(1886, (unsigned long )(& i), (long long )i);
          __CrestLoad(1885, (unsigned long )NS, (long long )*NS);
          __CrestApply2(1884, 16, (long long )(i < *NS));
# 809 "../HPL_pdinfo.c"
          if (i < *NS) {
            __CrestBranch(1887, 885, 1);

          } else {
            __CrestBranch(1888, 886, 0);
# 809 "../HPL_pdinfo.c"
            goto while_break___32;
          }
          }
# 810 "../HPL_pdinfo.c"
          mem_223 = N + i;
          __CrestLoad(1889, (unsigned long )mem_223, (long long )*mem_223);
# 810 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_223);
          __CrestClearStack(1890);
          __CrestLoad(1893, (unsigned long )(& i), (long long )i);
          __CrestLoad(1892, (unsigned long )0, (long long )1);
          __CrestApply2(1891, 0, (long long )(i + 1));
          __CrestStore(1894, (unsigned long )(& i));
# 809 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___32: ;
        }
      } else {
        __CrestBranch(1880, 889, 0);

      }
      }
    } else {
      __CrestBranch(1852, 890, 0);

    }
    }
# 816 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nNB     :");
    __CrestClearStack(1895);
    __CrestLoad(1896, (unsigned long )0, (long long )0);
    __CrestStore(1897, (unsigned long )(& i));
# 817 "../HPL_pdinfo.c"
    i = 0;
    {
# 817 "../HPL_pdinfo.c"
    while (1) {
      while_continue___33: ;
      {
      __CrestLoad(1900, (unsigned long )0, (long long )8);
      __CrestLoad(1899, (unsigned long )NBS, (long long )*NBS);
      __CrestApply2(1898, 16, (long long )(8 < *NBS));
# 817 "../HPL_pdinfo.c"
      if (8 < *NBS) {
        __CrestBranch(1901, 896, 1);
        __CrestLoad(1903, (unsigned long )0, (long long )8);
        __CrestStore(1904, (unsigned long )(& tmp___21));
# 817 "../HPL_pdinfo.c"
        tmp___21 = 8;
      } else {
        __CrestBranch(1902, 897, 0);
        __CrestLoad(1905, (unsigned long )NBS, (long long )*NBS);
        __CrestStore(1906, (unsigned long )(& tmp___21));
# 817 "../HPL_pdinfo.c"
        tmp___21 = *NBS;
      }
      }
      {
      __CrestLoad(1909, (unsigned long )(& i), (long long )i);
      __CrestLoad(1908, (unsigned long )(& tmp___21), (long long )tmp___21);
      __CrestApply2(1907, 16, (long long )(i < tmp___21));
# 817 "../HPL_pdinfo.c"
      if (i < tmp___21) {
        __CrestBranch(1910, 899, 1);

      } else {
        __CrestBranch(1911, 900, 0);
# 817 "../HPL_pdinfo.c"
        goto while_break___33;
      }
      }
# 818 "../HPL_pdinfo.c"
      mem_224 = NB + i;
      __CrestLoad(1912, (unsigned long )mem_224, (long long )*mem_224);
# 818 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_224);
      __CrestClearStack(1913);
      __CrestLoad(1916, (unsigned long )(& i), (long long )i);
      __CrestLoad(1915, (unsigned long )0, (long long )1);
      __CrestApply2(1914, 0, (long long )(i + 1));
      __CrestStore(1917, (unsigned long )(& i));
# 817 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___33: ;
    }
    {
    __CrestLoad(1920, (unsigned long )NBS, (long long )*NBS);
    __CrestLoad(1919, (unsigned long )0, (long long )8);
    __CrestApply2(1918, 14, (long long )(*NBS > 8));
# 819 "../HPL_pdinfo.c"
    if (*NBS > 8) {
      __CrestBranch(1921, 904, 1);
# 821 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(1923);
      __CrestLoad(1924, (unsigned long )0, (long long )8);
      __CrestStore(1925, (unsigned long )(& i));
# 822 "../HPL_pdinfo.c"
      i = 8;
      {
# 822 "../HPL_pdinfo.c"
      while (1) {
        while_continue___34: ;
        {
        __CrestLoad(1928, (unsigned long )0, (long long )16);
        __CrestLoad(1927, (unsigned long )NBS, (long long )*NBS);
        __CrestApply2(1926, 16, (long long )(16 < *NBS));
# 822 "../HPL_pdinfo.c"
        if (16 < *NBS) {
          __CrestBranch(1929, 909, 1);
          __CrestLoad(1931, (unsigned long )0, (long long )16);
          __CrestStore(1932, (unsigned long )(& tmp___22));
# 822 "../HPL_pdinfo.c"
          tmp___22 = 16;
        } else {
          __CrestBranch(1930, 910, 0);
          __CrestLoad(1933, (unsigned long )NBS, (long long )*NBS);
          __CrestStore(1934, (unsigned long )(& tmp___22));
# 822 "../HPL_pdinfo.c"
          tmp___22 = *NBS;
        }
        }
        {
        __CrestLoad(1937, (unsigned long )(& i), (long long )i);
        __CrestLoad(1936, (unsigned long )(& tmp___22), (long long )tmp___22);
        __CrestApply2(1935, 16, (long long )(i < tmp___22));
# 822 "../HPL_pdinfo.c"
        if (i < tmp___22) {
          __CrestBranch(1938, 912, 1);

        } else {
          __CrestBranch(1939, 913, 0);
# 822 "../HPL_pdinfo.c"
          goto while_break___34;
        }
        }
# 823 "../HPL_pdinfo.c"
        mem_225 = NB + i;
        __CrestLoad(1940, (unsigned long )mem_225, (long long )*mem_225);
# 823 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_225);
        __CrestClearStack(1941);
        __CrestLoad(1944, (unsigned long )(& i), (long long )i);
        __CrestLoad(1943, (unsigned long )0, (long long )1);
        __CrestApply2(1942, 0, (long long )(i + 1));
        __CrestStore(1945, (unsigned long )(& i));
# 822 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___34: ;
      }
      {
      __CrestLoad(1948, (unsigned long )NBS, (long long )*NBS);
      __CrestLoad(1947, (unsigned long )0, (long long )16);
      __CrestApply2(1946, 14, (long long )(*NBS > 16));
# 824 "../HPL_pdinfo.c"
      if (*NBS > 16) {
        __CrestBranch(1949, 917, 1);
# 826 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(1951);
        __CrestLoad(1952, (unsigned long )0, (long long )16);
        __CrestStore(1953, (unsigned long )(& i));
# 827 "../HPL_pdinfo.c"
        i = 16;
        {
# 827 "../HPL_pdinfo.c"
        while (1) {
          while_continue___35: ;
          {
          __CrestLoad(1956, (unsigned long )(& i), (long long )i);
          __CrestLoad(1955, (unsigned long )NBS, (long long )*NBS);
          __CrestApply2(1954, 16, (long long )(i < *NBS));
# 827 "../HPL_pdinfo.c"
          if (i < *NBS) {
            __CrestBranch(1957, 922, 1);

          } else {
            __CrestBranch(1958, 923, 0);
# 827 "../HPL_pdinfo.c"
            goto while_break___35;
          }
          }
# 828 "../HPL_pdinfo.c"
          mem_226 = NB + i;
          __CrestLoad(1959, (unsigned long )mem_226, (long long )*mem_226);
# 828 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_226);
          __CrestClearStack(1960);
          __CrestLoad(1963, (unsigned long )(& i), (long long )i);
          __CrestLoad(1962, (unsigned long )0, (long long )1);
          __CrestApply2(1961, 0, (long long )(i + 1));
          __CrestStore(1964, (unsigned long )(& i));
# 827 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___35: ;
        }
      } else {
        __CrestBranch(1950, 926, 0);

      }
      }
    } else {
      __CrestBranch(1922, 927, 0);

    }
    }
# 834 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nPMAP   :");
    __CrestClearStack(1965);
    {
    __CrestLoad(1968, (unsigned long )PMAPPIN, (long long )*PMAPPIN);
    __CrestLoad(1967, (unsigned long )0, (long long )201U);
    __CrestApply2(1966, 12, (long long )((unsigned int )*PMAPPIN == 201U));
# 835 "../HPL_pdinfo.c"
    if ((unsigned int )*PMAPPIN == 201U) {
      __CrestBranch(1969, 930, 1);
# 836 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " Row-major process mapping");
      __CrestClearStack(1971);
    } else {
      __CrestBranch(1970, 931, 0);
      {
      __CrestLoad(1974, (unsigned long )PMAPPIN, (long long )*PMAPPIN);
      __CrestLoad(1973, (unsigned long )0, (long long )202U);
      __CrestApply2(1972, 12, (long long )((unsigned int )*PMAPPIN == 202U));
# 837 "../HPL_pdinfo.c"
      if ((unsigned int )*PMAPPIN == 202U) {
        __CrestBranch(1975, 932, 1);
# 838 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, " Column-major process mapping");
        __CrestClearStack(1977);
      } else {
        __CrestBranch(1976, 933, 0);

      }
      }
    }
    }
# 842 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nP      :");
    __CrestClearStack(1978);
    __CrestLoad(1979, (unsigned long )0, (long long )0);
    __CrestStore(1980, (unsigned long )(& i));
# 843 "../HPL_pdinfo.c"
    i = 0;
    {
# 843 "../HPL_pdinfo.c"
    while (1) {
      while_continue___36: ;
      {
      __CrestLoad(1983, (unsigned long )0, (long long )8);
      __CrestLoad(1982, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(1981, 16, (long long )(8 < *NPQS));
# 843 "../HPL_pdinfo.c"
      if (8 < *NPQS) {
        __CrestBranch(1984, 939, 1);
        __CrestLoad(1986, (unsigned long )0, (long long )8);
        __CrestStore(1987, (unsigned long )(& tmp___23));
# 843 "../HPL_pdinfo.c"
        tmp___23 = 8;
      } else {
        __CrestBranch(1985, 940, 0);
        __CrestLoad(1988, (unsigned long )NPQS, (long long )*NPQS);
        __CrestStore(1989, (unsigned long )(& tmp___23));
# 843 "../HPL_pdinfo.c"
        tmp___23 = *NPQS;
      }
      }
      {
      __CrestLoad(1992, (unsigned long )(& i), (long long )i);
      __CrestLoad(1991, (unsigned long )(& tmp___23), (long long )tmp___23);
      __CrestApply2(1990, 16, (long long )(i < tmp___23));
# 843 "../HPL_pdinfo.c"
      if (i < tmp___23) {
        __CrestBranch(1993, 942, 1);

      } else {
        __CrestBranch(1994, 943, 0);
# 843 "../HPL_pdinfo.c"
        goto while_break___36;
      }
      }
# 844 "../HPL_pdinfo.c"
      mem_227 = P + i;
      __CrestLoad(1995, (unsigned long )mem_227, (long long )*mem_227);
# 844 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_227);
      __CrestClearStack(1996);
      __CrestLoad(1999, (unsigned long )(& i), (long long )i);
      __CrestLoad(1998, (unsigned long )0, (long long )1);
      __CrestApply2(1997, 0, (long long )(i + 1));
      __CrestStore(2000, (unsigned long )(& i));
# 843 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___36: ;
    }
    {
    __CrestLoad(2003, (unsigned long )NPQS, (long long )*NPQS);
    __CrestLoad(2002, (unsigned long )0, (long long )8);
    __CrestApply2(2001, 14, (long long )(*NPQS > 8));
# 845 "../HPL_pdinfo.c"
    if (*NPQS > 8) {
      __CrestBranch(2004, 947, 1);
# 847 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2006);
      __CrestLoad(2007, (unsigned long )0, (long long )8);
      __CrestStore(2008, (unsigned long )(& i));
# 848 "../HPL_pdinfo.c"
      i = 8;
      {
# 848 "../HPL_pdinfo.c"
      while (1) {
        while_continue___37: ;
        {
        __CrestLoad(2011, (unsigned long )0, (long long )16);
        __CrestLoad(2010, (unsigned long )NPQS, (long long )*NPQS);
        __CrestApply2(2009, 16, (long long )(16 < *NPQS));
# 848 "../HPL_pdinfo.c"
        if (16 < *NPQS) {
          __CrestBranch(2012, 952, 1);
          __CrestLoad(2014, (unsigned long )0, (long long )16);
          __CrestStore(2015, (unsigned long )(& tmp___24));
# 848 "../HPL_pdinfo.c"
          tmp___24 = 16;
        } else {
          __CrestBranch(2013, 953, 0);
          __CrestLoad(2016, (unsigned long )NPQS, (long long )*NPQS);
          __CrestStore(2017, (unsigned long )(& tmp___24));
# 848 "../HPL_pdinfo.c"
          tmp___24 = *NPQS;
        }
        }
        {
        __CrestLoad(2020, (unsigned long )(& i), (long long )i);
        __CrestLoad(2019, (unsigned long )(& tmp___24), (long long )tmp___24);
        __CrestApply2(2018, 16, (long long )(i < tmp___24));
# 848 "../HPL_pdinfo.c"
        if (i < tmp___24) {
          __CrestBranch(2021, 955, 1);

        } else {
          __CrestBranch(2022, 956, 0);
# 848 "../HPL_pdinfo.c"
          goto while_break___37;
        }
        }
# 849 "../HPL_pdinfo.c"
        mem_228 = P + i;
        __CrestLoad(2023, (unsigned long )mem_228, (long long )*mem_228);
# 849 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_228);
        __CrestClearStack(2024);
        __CrestLoad(2027, (unsigned long )(& i), (long long )i);
        __CrestLoad(2026, (unsigned long )0, (long long )1);
        __CrestApply2(2025, 0, (long long )(i + 1));
        __CrestStore(2028, (unsigned long )(& i));
# 848 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___37: ;
      }
      {
      __CrestLoad(2031, (unsigned long )NPQS, (long long )*NPQS);
      __CrestLoad(2030, (unsigned long )0, (long long )16);
      __CrestApply2(2029, 14, (long long )(*NPQS > 16));
# 850 "../HPL_pdinfo.c"
      if (*NPQS > 16) {
        __CrestBranch(2032, 960, 1);
# 852 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2034);
        __CrestLoad(2035, (unsigned long )0, (long long )16);
        __CrestStore(2036, (unsigned long )(& i));
# 853 "../HPL_pdinfo.c"
        i = 16;
        {
# 853 "../HPL_pdinfo.c"
        while (1) {
          while_continue___38: ;
          {
          __CrestLoad(2039, (unsigned long )(& i), (long long )i);
          __CrestLoad(2038, (unsigned long )NPQS, (long long )*NPQS);
          __CrestApply2(2037, 16, (long long )(i < *NPQS));
# 853 "../HPL_pdinfo.c"
          if (i < *NPQS) {
            __CrestBranch(2040, 965, 1);

          } else {
            __CrestBranch(2041, 966, 0);
# 853 "../HPL_pdinfo.c"
            goto while_break___38;
          }
          }
# 854 "../HPL_pdinfo.c"
          mem_229 = P + i;
          __CrestLoad(2042, (unsigned long )mem_229, (long long )*mem_229);
# 854 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_229);
          __CrestClearStack(2043);
          __CrestLoad(2046, (unsigned long )(& i), (long long )i);
          __CrestLoad(2045, (unsigned long )0, (long long )1);
          __CrestApply2(2044, 0, (long long )(i + 1));
          __CrestStore(2047, (unsigned long )(& i));
# 853 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___38: ;
        }
      } else {
        __CrestBranch(2033, 969, 0);

      }
      }
    } else {
      __CrestBranch(2005, 970, 0);

    }
    }
# 857 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nQ      :");
    __CrestClearStack(2048);
    __CrestLoad(2049, (unsigned long )0, (long long )0);
    __CrestStore(2050, (unsigned long )(& i));
# 858 "../HPL_pdinfo.c"
    i = 0;
    {
# 858 "../HPL_pdinfo.c"
    while (1) {
      while_continue___39: ;
      {
      __CrestLoad(2053, (unsigned long )0, (long long )8);
      __CrestLoad(2052, (unsigned long )NPQS, (long long )*NPQS);
      __CrestApply2(2051, 16, (long long )(8 < *NPQS));
# 858 "../HPL_pdinfo.c"
      if (8 < *NPQS) {
        __CrestBranch(2054, 976, 1);
        __CrestLoad(2056, (unsigned long )0, (long long )8);
        __CrestStore(2057, (unsigned long )(& tmp___25));
# 858 "../HPL_pdinfo.c"
        tmp___25 = 8;
      } else {
        __CrestBranch(2055, 977, 0);
        __CrestLoad(2058, (unsigned long )NPQS, (long long )*NPQS);
        __CrestStore(2059, (unsigned long )(& tmp___25));
# 858 "../HPL_pdinfo.c"
        tmp___25 = *NPQS;
      }
      }
      {
      __CrestLoad(2062, (unsigned long )(& i), (long long )i);
      __CrestLoad(2061, (unsigned long )(& tmp___25), (long long )tmp___25);
      __CrestApply2(2060, 16, (long long )(i < tmp___25));
# 858 "../HPL_pdinfo.c"
      if (i < tmp___25) {
        __CrestBranch(2063, 979, 1);

      } else {
        __CrestBranch(2064, 980, 0);
# 858 "../HPL_pdinfo.c"
        goto while_break___39;
      }
      }
# 859 "../HPL_pdinfo.c"
      mem_230 = Q + i;
      __CrestLoad(2065, (unsigned long )mem_230, (long long )*mem_230);
# 859 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_230);
      __CrestClearStack(2066);
      __CrestLoad(2069, (unsigned long )(& i), (long long )i);
      __CrestLoad(2068, (unsigned long )0, (long long )1);
      __CrestApply2(2067, 0, (long long )(i + 1));
      __CrestStore(2070, (unsigned long )(& i));
# 858 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___39: ;
    }
    {
    __CrestLoad(2073, (unsigned long )NPQS, (long long )*NPQS);
    __CrestLoad(2072, (unsigned long )0, (long long )8);
    __CrestApply2(2071, 14, (long long )(*NPQS > 8));
# 860 "../HPL_pdinfo.c"
    if (*NPQS > 8) {
      __CrestBranch(2074, 984, 1);
# 862 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2076);
      __CrestLoad(2077, (unsigned long )0, (long long )8);
      __CrestStore(2078, (unsigned long )(& i));
# 863 "../HPL_pdinfo.c"
      i = 8;
      {
# 863 "../HPL_pdinfo.c"
      while (1) {
        while_continue___40: ;
        {
        __CrestLoad(2081, (unsigned long )0, (long long )16);
        __CrestLoad(2080, (unsigned long )NPQS, (long long )*NPQS);
        __CrestApply2(2079, 16, (long long )(16 < *NPQS));
# 863 "../HPL_pdinfo.c"
        if (16 < *NPQS) {
          __CrestBranch(2082, 989, 1);
          __CrestLoad(2084, (unsigned long )0, (long long )16);
          __CrestStore(2085, (unsigned long )(& tmp___26));
# 863 "../HPL_pdinfo.c"
          tmp___26 = 16;
        } else {
          __CrestBranch(2083, 990, 0);
          __CrestLoad(2086, (unsigned long )NPQS, (long long )*NPQS);
          __CrestStore(2087, (unsigned long )(& tmp___26));
# 863 "../HPL_pdinfo.c"
          tmp___26 = *NPQS;
        }
        }
        {
        __CrestLoad(2090, (unsigned long )(& i), (long long )i);
        __CrestLoad(2089, (unsigned long )(& tmp___26), (long long )tmp___26);
        __CrestApply2(2088, 16, (long long )(i < tmp___26));
# 863 "../HPL_pdinfo.c"
        if (i < tmp___26) {
          __CrestBranch(2091, 992, 1);

        } else {
          __CrestBranch(2092, 993, 0);
# 863 "../HPL_pdinfo.c"
          goto while_break___40;
        }
        }
# 864 "../HPL_pdinfo.c"
        mem_231 = Q + i;
        __CrestLoad(2093, (unsigned long )mem_231, (long long )*mem_231);
# 864 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_231);
        __CrestClearStack(2094);
        __CrestLoad(2097, (unsigned long )(& i), (long long )i);
        __CrestLoad(2096, (unsigned long )0, (long long )1);
        __CrestApply2(2095, 0, (long long )(i + 1));
        __CrestStore(2098, (unsigned long )(& i));
# 863 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___40: ;
      }
      {
      __CrestLoad(2101, (unsigned long )NPQS, (long long )*NPQS);
      __CrestLoad(2100, (unsigned long )0, (long long )16);
      __CrestApply2(2099, 14, (long long )(*NPQS > 16));
# 865 "../HPL_pdinfo.c"
      if (*NPQS > 16) {
        __CrestBranch(2102, 997, 1);
# 867 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2104);
        __CrestLoad(2105, (unsigned long )0, (long long )16);
        __CrestStore(2106, (unsigned long )(& i));
# 868 "../HPL_pdinfo.c"
        i = 16;
        {
# 868 "../HPL_pdinfo.c"
        while (1) {
          while_continue___41: ;
          {
          __CrestLoad(2109, (unsigned long )(& i), (long long )i);
          __CrestLoad(2108, (unsigned long )NPQS, (long long )*NPQS);
          __CrestApply2(2107, 16, (long long )(i < *NPQS));
# 868 "../HPL_pdinfo.c"
          if (i < *NPQS) {
            __CrestBranch(2110, 1002, 1);

          } else {
            __CrestBranch(2111, 1003, 0);
# 868 "../HPL_pdinfo.c"
            goto while_break___41;
          }
          }
# 869 "../HPL_pdinfo.c"
          mem_232 = Q + i;
          __CrestLoad(2112, (unsigned long )mem_232, (long long )*mem_232);
# 869 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_232);
          __CrestClearStack(2113);
          __CrestLoad(2116, (unsigned long )(& i), (long long )i);
          __CrestLoad(2115, (unsigned long )0, (long long )1);
          __CrestApply2(2114, 0, (long long )(i + 1));
          __CrestStore(2117, (unsigned long )(& i));
# 868 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___41: ;
        }
      } else {
        __CrestBranch(2103, 1006, 0);

      }
      }
    } else {
      __CrestBranch(2075, 1007, 0);

    }
    }
# 875 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nPFACT  :");
    __CrestClearStack(2118);
    __CrestLoad(2119, (unsigned long )0, (long long )0);
    __CrestStore(2120, (unsigned long )(& i));
# 876 "../HPL_pdinfo.c"
    i = 0;
    {
# 876 "../HPL_pdinfo.c"
    while (1) {
      while_continue___42: ;
      {
      __CrestLoad(2123, (unsigned long )0, (long long )8);
      __CrestLoad(2122, (unsigned long )NPFS, (long long )*NPFS);
      __CrestApply2(2121, 16, (long long )(8 < *NPFS));
# 876 "../HPL_pdinfo.c"
      if (8 < *NPFS) {
        __CrestBranch(2124, 1013, 1);
        __CrestLoad(2126, (unsigned long )0, (long long )8);
        __CrestStore(2127, (unsigned long )(& tmp___27));
# 876 "../HPL_pdinfo.c"
        tmp___27 = 8;
      } else {
        __CrestBranch(2125, 1014, 0);
        __CrestLoad(2128, (unsigned long )NPFS, (long long )*NPFS);
        __CrestStore(2129, (unsigned long )(& tmp___27));
# 876 "../HPL_pdinfo.c"
        tmp___27 = *NPFS;
      }
      }
      {
      __CrestLoad(2132, (unsigned long )(& i), (long long )i);
      __CrestLoad(2131, (unsigned long )(& tmp___27), (long long )tmp___27);
      __CrestApply2(2130, 16, (long long )(i < tmp___27));
# 876 "../HPL_pdinfo.c"
      if (i < tmp___27) {
        __CrestBranch(2133, 1016, 1);

      } else {
        __CrestBranch(2134, 1017, 0);
# 876 "../HPL_pdinfo.c"
        goto while_break___42;
      }
      }
      {
# 878 "../HPL_pdinfo.c"
      mem_233 = PF + i;
      {
      __CrestLoad(2137, (unsigned long )mem_233, (long long )*mem_233);
      __CrestLoad(2136, (unsigned long )0, (long long )301U);
      __CrestApply2(2135, 12, (long long )((unsigned int )*mem_233 == 301U));
# 878 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_233 == 301U) {
        __CrestBranch(2138, 1021, 1);
# 879 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "    Left ");
        __CrestClearStack(2140);
      } else {
        __CrestBranch(2139, 1022, 0);
        {
# 880 "../HPL_pdinfo.c"
        mem_234 = PF + i;
        {
        __CrestLoad(2143, (unsigned long )mem_234, (long long )*mem_234);
        __CrestLoad(2142, (unsigned long )0, (long long )302U);
        __CrestApply2(2141, 12, (long long )((unsigned int )*mem_234 == 302U));
# 880 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_234 == 302U) {
          __CrestBranch(2144, 1025, 1);
# 881 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "   Crout ");
          __CrestClearStack(2146);
        } else {
          __CrestBranch(2145, 1026, 0);
          {
# 882 "../HPL_pdinfo.c"
          mem_235 = PF + i;
          {
          __CrestLoad(2149, (unsigned long )mem_235, (long long )*mem_235);
          __CrestLoad(2148, (unsigned long )0, (long long )303U);
          __CrestApply2(2147, 12, (long long )((unsigned int )*mem_235 == 303U));
# 882 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_235 == 303U) {
            __CrestBranch(2150, 1029, 1);
# 883 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   Right ");
            __CrestClearStack(2152);
          } else {
            __CrestBranch(2151, 1030, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(2155, (unsigned long )(& i), (long long )i);
      __CrestLoad(2154, (unsigned long )0, (long long )1);
      __CrestApply2(2153, 0, (long long )(i + 1));
      __CrestStore(2156, (unsigned long )(& i));
# 876 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___42: ;
    }
    {
    __CrestLoad(2159, (unsigned long )NPFS, (long long )*NPFS);
    __CrestLoad(2158, (unsigned long )0, (long long )8);
    __CrestApply2(2157, 14, (long long )(*NPFS > 8));
# 885 "../HPL_pdinfo.c"
    if (*NPFS > 8) {
      __CrestBranch(2160, 1034, 1);
# 887 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2162);
      __CrestLoad(2163, (unsigned long )0, (long long )8);
      __CrestStore(2164, (unsigned long )(& i));
# 888 "../HPL_pdinfo.c"
      i = 8;
      {
# 888 "../HPL_pdinfo.c"
      while (1) {
        while_continue___43: ;
        {
        __CrestLoad(2167, (unsigned long )0, (long long )16);
        __CrestLoad(2166, (unsigned long )NPFS, (long long )*NPFS);
        __CrestApply2(2165, 16, (long long )(16 < *NPFS));
# 888 "../HPL_pdinfo.c"
        if (16 < *NPFS) {
          __CrestBranch(2168, 1039, 1);
          __CrestLoad(2170, (unsigned long )0, (long long )16);
          __CrestStore(2171, (unsigned long )(& tmp___28));
# 888 "../HPL_pdinfo.c"
          tmp___28 = 16;
        } else {
          __CrestBranch(2169, 1040, 0);
          __CrestLoad(2172, (unsigned long )NPFS, (long long )*NPFS);
          __CrestStore(2173, (unsigned long )(& tmp___28));
# 888 "../HPL_pdinfo.c"
          tmp___28 = *NPFS;
        }
        }
        {
        __CrestLoad(2176, (unsigned long )(& i), (long long )i);
        __CrestLoad(2175, (unsigned long )(& tmp___28), (long long )tmp___28);
        __CrestApply2(2174, 16, (long long )(i < tmp___28));
# 888 "../HPL_pdinfo.c"
        if (i < tmp___28) {
          __CrestBranch(2177, 1042, 1);

        } else {
          __CrestBranch(2178, 1043, 0);
# 888 "../HPL_pdinfo.c"
          goto while_break___43;
        }
        }
        {
# 890 "../HPL_pdinfo.c"
        mem_236 = PF + i;
        {
        __CrestLoad(2181, (unsigned long )mem_236, (long long )*mem_236);
        __CrestLoad(2180, (unsigned long )0, (long long )301U);
        __CrestApply2(2179, 12, (long long )((unsigned int )*mem_236 == 301U));
# 890 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_236 == 301U) {
          __CrestBranch(2182, 1047, 1);
# 891 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "    Left ");
          __CrestClearStack(2184);
        } else {
          __CrestBranch(2183, 1048, 0);
          {
# 892 "../HPL_pdinfo.c"
          mem_237 = PF + i;
          {
          __CrestLoad(2187, (unsigned long )mem_237, (long long )*mem_237);
          __CrestLoad(2186, (unsigned long )0, (long long )302U);
          __CrestApply2(2185, 12, (long long )((unsigned int )*mem_237 == 302U));
# 892 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_237 == 302U) {
            __CrestBranch(2188, 1051, 1);
# 893 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   Crout ");
            __CrestClearStack(2190);
          } else {
            __CrestBranch(2189, 1052, 0);
            {
# 894 "../HPL_pdinfo.c"
            mem_238 = PF + i;
            {
            __CrestLoad(2193, (unsigned long )mem_238, (long long )*mem_238);
            __CrestLoad(2192, (unsigned long )0, (long long )303U);
            __CrestApply2(2191, 12, (long long )((unsigned int )*mem_238 == 303U));
# 894 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_238 == 303U) {
              __CrestBranch(2194, 1055, 1);
# 895 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "   Right ");
              __CrestClearStack(2196);
            } else {
              __CrestBranch(2195, 1056, 0);

            }
            }
            }
          }
          }
          }
        }
        }
        }
        __CrestLoad(2199, (unsigned long )(& i), (long long )i);
        __CrestLoad(2198, (unsigned long )0, (long long )1);
        __CrestApply2(2197, 0, (long long )(i + 1));
        __CrestStore(2200, (unsigned long )(& i));
# 888 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___43: ;
      }
      {
      __CrestLoad(2203, (unsigned long )NPFS, (long long )*NPFS);
      __CrestLoad(2202, (unsigned long )0, (long long )16);
      __CrestApply2(2201, 14, (long long )(*NPFS > 16));
# 897 "../HPL_pdinfo.c"
      if (*NPFS > 16) {
        __CrestBranch(2204, 1060, 1);
# 899 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2206);
        __CrestLoad(2207, (unsigned long )0, (long long )16);
        __CrestStore(2208, (unsigned long )(& i));
# 900 "../HPL_pdinfo.c"
        i = 16;
        {
# 900 "../HPL_pdinfo.c"
        while (1) {
          while_continue___44: ;
          {
          __CrestLoad(2211, (unsigned long )(& i), (long long )i);
          __CrestLoad(2210, (unsigned long )NPFS, (long long )*NPFS);
          __CrestApply2(2209, 16, (long long )(i < *NPFS));
# 900 "../HPL_pdinfo.c"
          if (i < *NPFS) {
            __CrestBranch(2212, 1065, 1);

          } else {
            __CrestBranch(2213, 1066, 0);
# 900 "../HPL_pdinfo.c"
            goto while_break___44;
          }
          }
          {
# 902 "../HPL_pdinfo.c"
          mem_239 = PF + i;
          {
          __CrestLoad(2216, (unsigned long )mem_239, (long long )*mem_239);
          __CrestLoad(2215, (unsigned long )0, (long long )301U);
          __CrestApply2(2214, 12, (long long )((unsigned int )*mem_239 == 301U));
# 902 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_239 == 301U) {
            __CrestBranch(2217, 1070, 1);
# 903 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "    Left ");
            __CrestClearStack(2219);
          } else {
            __CrestBranch(2218, 1071, 0);
            {
# 904 "../HPL_pdinfo.c"
            mem_240 = PF + i;
            {
            __CrestLoad(2222, (unsigned long )mem_240, (long long )*mem_240);
            __CrestLoad(2221, (unsigned long )0, (long long )302U);
            __CrestApply2(2220, 12, (long long )((unsigned int )*mem_240 == 302U));
# 904 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_240 == 302U) {
              __CrestBranch(2223, 1074, 1);
# 905 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "   Crout ");
              __CrestClearStack(2225);
            } else {
              __CrestBranch(2224, 1075, 0);
              {
# 906 "../HPL_pdinfo.c"
              mem_241 = PF + i;
              {
              __CrestLoad(2228, (unsigned long )mem_241, (long long )*mem_241);
              __CrestLoad(2227, (unsigned long )0, (long long )303U);
              __CrestApply2(2226, 12, (long long )((unsigned int )*mem_241 == 303U));
# 906 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_241 == 303U) {
                __CrestBranch(2229, 1078, 1);
# 907 "../HPL_pdinfo.c"
                HPL_fprintf(TEST->outfp, "   Right ");
                __CrestClearStack(2231);
              } else {
                __CrestBranch(2230, 1079, 0);

              }
              }
              }
            }
            }
            }
          }
          }
          }
          __CrestLoad(2234, (unsigned long )(& i), (long long )i);
          __CrestLoad(2233, (unsigned long )0, (long long )1);
          __CrestApply2(2232, 0, (long long )(i + 1));
          __CrestStore(2235, (unsigned long )(& i));
# 900 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___44: ;
        }
      } else {
        __CrestBranch(2205, 1082, 0);

      }
      }
    } else {
      __CrestBranch(2161, 1083, 0);

    }
    }
# 914 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nNBMIN  :");
    __CrestClearStack(2236);
    __CrestLoad(2237, (unsigned long )0, (long long )0);
    __CrestStore(2238, (unsigned long )(& i));
# 915 "../HPL_pdinfo.c"
    i = 0;
    {
# 915 "../HPL_pdinfo.c"
    while (1) {
      while_continue___45: ;
      {
      __CrestLoad(2241, (unsigned long )0, (long long )8);
      __CrestLoad(2240, (unsigned long )NBMS, (long long )*NBMS);
      __CrestApply2(2239, 16, (long long )(8 < *NBMS));
# 915 "../HPL_pdinfo.c"
      if (8 < *NBMS) {
        __CrestBranch(2242, 1089, 1);
        __CrestLoad(2244, (unsigned long )0, (long long )8);
        __CrestStore(2245, (unsigned long )(& tmp___29));
# 915 "../HPL_pdinfo.c"
        tmp___29 = 8;
      } else {
        __CrestBranch(2243, 1090, 0);
        __CrestLoad(2246, (unsigned long )NBMS, (long long )*NBMS);
        __CrestStore(2247, (unsigned long )(& tmp___29));
# 915 "../HPL_pdinfo.c"
        tmp___29 = *NBMS;
      }
      }
      {
      __CrestLoad(2250, (unsigned long )(& i), (long long )i);
      __CrestLoad(2249, (unsigned long )(& tmp___29), (long long )tmp___29);
      __CrestApply2(2248, 16, (long long )(i < tmp___29));
# 915 "../HPL_pdinfo.c"
      if (i < tmp___29) {
        __CrestBranch(2251, 1092, 1);

      } else {
        __CrestBranch(2252, 1093, 0);
# 915 "../HPL_pdinfo.c"
        goto while_break___45;
      }
      }
# 916 "../HPL_pdinfo.c"
      mem_242 = NBM + i;
      __CrestLoad(2253, (unsigned long )mem_242, (long long )*mem_242);
# 916 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_242);
      __CrestClearStack(2254);
      __CrestLoad(2257, (unsigned long )(& i), (long long )i);
      __CrestLoad(2256, (unsigned long )0, (long long )1);
      __CrestApply2(2255, 0, (long long )(i + 1));
      __CrestStore(2258, (unsigned long )(& i));
# 915 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___45: ;
    }
    {
    __CrestLoad(2261, (unsigned long )NBMS, (long long )*NBMS);
    __CrestLoad(2260, (unsigned long )0, (long long )8);
    __CrestApply2(2259, 14, (long long )(*NBMS > 8));
# 917 "../HPL_pdinfo.c"
    if (*NBMS > 8) {
      __CrestBranch(2262, 1097, 1);
# 919 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2264);
      __CrestLoad(2265, (unsigned long )0, (long long )8);
      __CrestStore(2266, (unsigned long )(& i));
# 920 "../HPL_pdinfo.c"
      i = 8;
      {
# 920 "../HPL_pdinfo.c"
      while (1) {
        while_continue___46: ;
        {
        __CrestLoad(2269, (unsigned long )0, (long long )16);
        __CrestLoad(2268, (unsigned long )NBMS, (long long )*NBMS);
        __CrestApply2(2267, 16, (long long )(16 < *NBMS));
# 920 "../HPL_pdinfo.c"
        if (16 < *NBMS) {
          __CrestBranch(2270, 1102, 1);
          __CrestLoad(2272, (unsigned long )0, (long long )16);
          __CrestStore(2273, (unsigned long )(& tmp___30));
# 920 "../HPL_pdinfo.c"
          tmp___30 = 16;
        } else {
          __CrestBranch(2271, 1103, 0);
          __CrestLoad(2274, (unsigned long )NBMS, (long long )*NBMS);
          __CrestStore(2275, (unsigned long )(& tmp___30));
# 920 "../HPL_pdinfo.c"
          tmp___30 = *NBMS;
        }
        }
        {
        __CrestLoad(2278, (unsigned long )(& i), (long long )i);
        __CrestLoad(2277, (unsigned long )(& tmp___30), (long long )tmp___30);
        __CrestApply2(2276, 16, (long long )(i < tmp___30));
# 920 "../HPL_pdinfo.c"
        if (i < tmp___30) {
          __CrestBranch(2279, 1105, 1);

        } else {
          __CrestBranch(2280, 1106, 0);
# 920 "../HPL_pdinfo.c"
          goto while_break___46;
        }
        }
# 921 "../HPL_pdinfo.c"
        mem_243 = NBM + i;
        __CrestLoad(2281, (unsigned long )mem_243, (long long )*mem_243);
# 921 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_243);
        __CrestClearStack(2282);
        __CrestLoad(2285, (unsigned long )(& i), (long long )i);
        __CrestLoad(2284, (unsigned long )0, (long long )1);
        __CrestApply2(2283, 0, (long long )(i + 1));
        __CrestStore(2286, (unsigned long )(& i));
# 920 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___46: ;
      }
      {
      __CrestLoad(2289, (unsigned long )NBMS, (long long )*NBMS);
      __CrestLoad(2288, (unsigned long )0, (long long )16);
      __CrestApply2(2287, 14, (long long )(*NBMS > 16));
# 922 "../HPL_pdinfo.c"
      if (*NBMS > 16) {
        __CrestBranch(2290, 1110, 1);
# 924 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2292);
        __CrestLoad(2293, (unsigned long )0, (long long )16);
        __CrestStore(2294, (unsigned long )(& i));
# 925 "../HPL_pdinfo.c"
        i = 16;
        {
# 925 "../HPL_pdinfo.c"
        while (1) {
          while_continue___47: ;
          {
          __CrestLoad(2297, (unsigned long )(& i), (long long )i);
          __CrestLoad(2296, (unsigned long )NBMS, (long long )*NBMS);
          __CrestApply2(2295, 16, (long long )(i < *NBMS));
# 925 "../HPL_pdinfo.c"
          if (i < *NBMS) {
            __CrestBranch(2298, 1115, 1);

          } else {
            __CrestBranch(2299, 1116, 0);
# 925 "../HPL_pdinfo.c"
            goto while_break___47;
          }
          }
# 926 "../HPL_pdinfo.c"
          mem_244 = NBM + i;
          __CrestLoad(2300, (unsigned long )mem_244, (long long )*mem_244);
# 926 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_244);
          __CrestClearStack(2301);
          __CrestLoad(2304, (unsigned long )(& i), (long long )i);
          __CrestLoad(2303, (unsigned long )0, (long long )1);
          __CrestApply2(2302, 0, (long long )(i + 1));
          __CrestStore(2305, (unsigned long )(& i));
# 925 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___47: ;
        }
      } else {
        __CrestBranch(2291, 1119, 0);

      }
      }
    } else {
      __CrestBranch(2263, 1120, 0);

    }
    }
# 932 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nNDIV   :");
    __CrestClearStack(2306);
    __CrestLoad(2307, (unsigned long )0, (long long )0);
    __CrestStore(2308, (unsigned long )(& i));
# 933 "../HPL_pdinfo.c"
    i = 0;
    {
# 933 "../HPL_pdinfo.c"
    while (1) {
      while_continue___48: ;
      {
      __CrestLoad(2311, (unsigned long )0, (long long )8);
      __CrestLoad(2310, (unsigned long )NDVS, (long long )*NDVS);
      __CrestApply2(2309, 16, (long long )(8 < *NDVS));
# 933 "../HPL_pdinfo.c"
      if (8 < *NDVS) {
        __CrestBranch(2312, 1126, 1);
        __CrestLoad(2314, (unsigned long )0, (long long )8);
        __CrestStore(2315, (unsigned long )(& tmp___31));
# 933 "../HPL_pdinfo.c"
        tmp___31 = 8;
      } else {
        __CrestBranch(2313, 1127, 0);
        __CrestLoad(2316, (unsigned long )NDVS, (long long )*NDVS);
        __CrestStore(2317, (unsigned long )(& tmp___31));
# 933 "../HPL_pdinfo.c"
        tmp___31 = *NDVS;
      }
      }
      {
      __CrestLoad(2320, (unsigned long )(& i), (long long )i);
      __CrestLoad(2319, (unsigned long )(& tmp___31), (long long )tmp___31);
      __CrestApply2(2318, 16, (long long )(i < tmp___31));
# 933 "../HPL_pdinfo.c"
      if (i < tmp___31) {
        __CrestBranch(2321, 1129, 1);

      } else {
        __CrestBranch(2322, 1130, 0);
# 933 "../HPL_pdinfo.c"
        goto while_break___48;
      }
      }
# 934 "../HPL_pdinfo.c"
      mem_245 = NDV + i;
      __CrestLoad(2323, (unsigned long )mem_245, (long long )*mem_245);
# 934 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_245);
      __CrestClearStack(2324);
      __CrestLoad(2327, (unsigned long )(& i), (long long )i);
      __CrestLoad(2326, (unsigned long )0, (long long )1);
      __CrestApply2(2325, 0, (long long )(i + 1));
      __CrestStore(2328, (unsigned long )(& i));
# 933 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___48: ;
    }
    {
    __CrestLoad(2331, (unsigned long )NDVS, (long long )*NDVS);
    __CrestLoad(2330, (unsigned long )0, (long long )8);
    __CrestApply2(2329, 14, (long long )(*NDVS > 8));
# 935 "../HPL_pdinfo.c"
    if (*NDVS > 8) {
      __CrestBranch(2332, 1134, 1);
# 937 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2334);
      __CrestLoad(2335, (unsigned long )0, (long long )8);
      __CrestStore(2336, (unsigned long )(& i));
# 938 "../HPL_pdinfo.c"
      i = 8;
      {
# 938 "../HPL_pdinfo.c"
      while (1) {
        while_continue___49: ;
        {
        __CrestLoad(2339, (unsigned long )0, (long long )16);
        __CrestLoad(2338, (unsigned long )NDVS, (long long )*NDVS);
        __CrestApply2(2337, 16, (long long )(16 < *NDVS));
# 938 "../HPL_pdinfo.c"
        if (16 < *NDVS) {
          __CrestBranch(2340, 1139, 1);
          __CrestLoad(2342, (unsigned long )0, (long long )16);
          __CrestStore(2343, (unsigned long )(& tmp___32));
# 938 "../HPL_pdinfo.c"
          tmp___32 = 16;
        } else {
          __CrestBranch(2341, 1140, 0);
          __CrestLoad(2344, (unsigned long )NDVS, (long long )*NDVS);
          __CrestStore(2345, (unsigned long )(& tmp___32));
# 938 "../HPL_pdinfo.c"
          tmp___32 = *NDVS;
        }
        }
        {
        __CrestLoad(2348, (unsigned long )(& i), (long long )i);
        __CrestLoad(2347, (unsigned long )(& tmp___32), (long long )tmp___32);
        __CrestApply2(2346, 16, (long long )(i < tmp___32));
# 938 "../HPL_pdinfo.c"
        if (i < tmp___32) {
          __CrestBranch(2349, 1142, 1);

        } else {
          __CrestBranch(2350, 1143, 0);
# 938 "../HPL_pdinfo.c"
          goto while_break___49;
        }
        }
# 939 "../HPL_pdinfo.c"
        mem_246 = NDV + i;
        __CrestLoad(2351, (unsigned long )mem_246, (long long )*mem_246);
# 939 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_246);
        __CrestClearStack(2352);
        __CrestLoad(2355, (unsigned long )(& i), (long long )i);
        __CrestLoad(2354, (unsigned long )0, (long long )1);
        __CrestApply2(2353, 0, (long long )(i + 1));
        __CrestStore(2356, (unsigned long )(& i));
# 938 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___49: ;
      }
      {
      __CrestLoad(2359, (unsigned long )NDVS, (long long )*NDVS);
      __CrestLoad(2358, (unsigned long )0, (long long )16);
      __CrestApply2(2357, 14, (long long )(*NDVS > 16));
# 940 "../HPL_pdinfo.c"
      if (*NDVS > 16) {
        __CrestBranch(2360, 1147, 1);
# 942 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2362);
        __CrestLoad(2363, (unsigned long )0, (long long )16);
        __CrestStore(2364, (unsigned long )(& i));
# 943 "../HPL_pdinfo.c"
        i = 16;
        {
# 943 "../HPL_pdinfo.c"
        while (1) {
          while_continue___50: ;
          {
          __CrestLoad(2367, (unsigned long )(& i), (long long )i);
          __CrestLoad(2366, (unsigned long )NDVS, (long long )*NDVS);
          __CrestApply2(2365, 16, (long long )(i < *NDVS));
# 943 "../HPL_pdinfo.c"
          if (i < *NDVS) {
            __CrestBranch(2368, 1152, 1);

          } else {
            __CrestBranch(2369, 1153, 0);
# 943 "../HPL_pdinfo.c"
            goto while_break___50;
          }
          }
# 944 "../HPL_pdinfo.c"
          mem_247 = NDV + i;
          __CrestLoad(2370, (unsigned long )mem_247, (long long )*mem_247);
# 944 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_247);
          __CrestClearStack(2371);
          __CrestLoad(2374, (unsigned long )(& i), (long long )i);
          __CrestLoad(2373, (unsigned long )0, (long long )1);
          __CrestApply2(2372, 0, (long long )(i + 1));
          __CrestStore(2375, (unsigned long )(& i));
# 943 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___50: ;
        }
      } else {
        __CrestBranch(2361, 1156, 0);

      }
      }
    } else {
      __CrestBranch(2333, 1157, 0);

    }
    }
# 950 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nRFACT  :");
    __CrestClearStack(2376);
    __CrestLoad(2377, (unsigned long )0, (long long )0);
    __CrestStore(2378, (unsigned long )(& i));
# 951 "../HPL_pdinfo.c"
    i = 0;
    {
# 951 "../HPL_pdinfo.c"
    while (1) {
      while_continue___51: ;
      {
      __CrestLoad(2381, (unsigned long )0, (long long )8);
      __CrestLoad(2380, (unsigned long )NRFS, (long long )*NRFS);
      __CrestApply2(2379, 16, (long long )(8 < *NRFS));
# 951 "../HPL_pdinfo.c"
      if (8 < *NRFS) {
        __CrestBranch(2382, 1163, 1);
        __CrestLoad(2384, (unsigned long )0, (long long )8);
        __CrestStore(2385, (unsigned long )(& tmp___33));
# 951 "../HPL_pdinfo.c"
        tmp___33 = 8;
      } else {
        __CrestBranch(2383, 1164, 0);
        __CrestLoad(2386, (unsigned long )NRFS, (long long )*NRFS);
        __CrestStore(2387, (unsigned long )(& tmp___33));
# 951 "../HPL_pdinfo.c"
        tmp___33 = *NRFS;
      }
      }
      {
      __CrestLoad(2390, (unsigned long )(& i), (long long )i);
      __CrestLoad(2389, (unsigned long )(& tmp___33), (long long )tmp___33);
      __CrestApply2(2388, 16, (long long )(i < tmp___33));
# 951 "../HPL_pdinfo.c"
      if (i < tmp___33) {
        __CrestBranch(2391, 1166, 1);

      } else {
        __CrestBranch(2392, 1167, 0);
# 951 "../HPL_pdinfo.c"
        goto while_break___51;
      }
      }
      {
# 953 "../HPL_pdinfo.c"
      mem_248 = RF + i;
      {
      __CrestLoad(2395, (unsigned long )mem_248, (long long )*mem_248);
      __CrestLoad(2394, (unsigned long )0, (long long )301U);
      __CrestApply2(2393, 12, (long long )((unsigned int )*mem_248 == 301U));
# 953 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_248 == 301U) {
        __CrestBranch(2396, 1171, 1);
# 954 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "    Left ");
        __CrestClearStack(2398);
      } else {
        __CrestBranch(2397, 1172, 0);
        {
# 955 "../HPL_pdinfo.c"
        mem_249 = RF + i;
        {
        __CrestLoad(2401, (unsigned long )mem_249, (long long )*mem_249);
        __CrestLoad(2400, (unsigned long )0, (long long )302U);
        __CrestApply2(2399, 12, (long long )((unsigned int )*mem_249 == 302U));
# 955 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_249 == 302U) {
          __CrestBranch(2402, 1175, 1);
# 956 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "   Crout ");
          __CrestClearStack(2404);
        } else {
          __CrestBranch(2403, 1176, 0);
          {
# 957 "../HPL_pdinfo.c"
          mem_250 = RF + i;
          {
          __CrestLoad(2407, (unsigned long )mem_250, (long long )*mem_250);
          __CrestLoad(2406, (unsigned long )0, (long long )303U);
          __CrestApply2(2405, 12, (long long )((unsigned int )*mem_250 == 303U));
# 957 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_250 == 303U) {
            __CrestBranch(2408, 1179, 1);
# 958 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   Right ");
            __CrestClearStack(2410);
          } else {
            __CrestBranch(2409, 1180, 0);

          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(2413, (unsigned long )(& i), (long long )i);
      __CrestLoad(2412, (unsigned long )0, (long long )1);
      __CrestApply2(2411, 0, (long long )(i + 1));
      __CrestStore(2414, (unsigned long )(& i));
# 951 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___51: ;
    }
    {
    __CrestLoad(2417, (unsigned long )NRFS, (long long )*NRFS);
    __CrestLoad(2416, (unsigned long )0, (long long )8);
    __CrestApply2(2415, 14, (long long )(*NRFS > 8));
# 960 "../HPL_pdinfo.c"
    if (*NRFS > 8) {
      __CrestBranch(2418, 1184, 1);
# 962 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2420);
      __CrestLoad(2421, (unsigned long )0, (long long )8);
      __CrestStore(2422, (unsigned long )(& i));
# 963 "../HPL_pdinfo.c"
      i = 8;
      {
# 963 "../HPL_pdinfo.c"
      while (1) {
        while_continue___52: ;
        {
        __CrestLoad(2425, (unsigned long )0, (long long )16);
        __CrestLoad(2424, (unsigned long )NRFS, (long long )*NRFS);
        __CrestApply2(2423, 16, (long long )(16 < *NRFS));
# 963 "../HPL_pdinfo.c"
        if (16 < *NRFS) {
          __CrestBranch(2426, 1189, 1);
          __CrestLoad(2428, (unsigned long )0, (long long )16);
          __CrestStore(2429, (unsigned long )(& tmp___34));
# 963 "../HPL_pdinfo.c"
          tmp___34 = 16;
        } else {
          __CrestBranch(2427, 1190, 0);
          __CrestLoad(2430, (unsigned long )NRFS, (long long )*NRFS);
          __CrestStore(2431, (unsigned long )(& tmp___34));
# 963 "../HPL_pdinfo.c"
          tmp___34 = *NRFS;
        }
        }
        {
        __CrestLoad(2434, (unsigned long )(& i), (long long )i);
        __CrestLoad(2433, (unsigned long )(& tmp___34), (long long )tmp___34);
        __CrestApply2(2432, 16, (long long )(i < tmp___34));
# 963 "../HPL_pdinfo.c"
        if (i < tmp___34) {
          __CrestBranch(2435, 1192, 1);

        } else {
          __CrestBranch(2436, 1193, 0);
# 963 "../HPL_pdinfo.c"
          goto while_break___52;
        }
        }
        {
# 965 "../HPL_pdinfo.c"
        mem_251 = RF + i;
        {
        __CrestLoad(2439, (unsigned long )mem_251, (long long )*mem_251);
        __CrestLoad(2438, (unsigned long )0, (long long )301U);
        __CrestApply2(2437, 12, (long long )((unsigned int )*mem_251 == 301U));
# 965 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_251 == 301U) {
          __CrestBranch(2440, 1197, 1);
# 966 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "    Left ");
          __CrestClearStack(2442);
        } else {
          __CrestBranch(2441, 1198, 0);
          {
# 967 "../HPL_pdinfo.c"
          mem_252 = RF + i;
          {
          __CrestLoad(2445, (unsigned long )mem_252, (long long )*mem_252);
          __CrestLoad(2444, (unsigned long )0, (long long )302U);
          __CrestApply2(2443, 12, (long long )((unsigned int )*mem_252 == 302U));
# 967 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_252 == 302U) {
            __CrestBranch(2446, 1201, 1);
# 968 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   Crout ");
            __CrestClearStack(2448);
          } else {
            __CrestBranch(2447, 1202, 0);
            {
# 969 "../HPL_pdinfo.c"
            mem_253 = RF + i;
            {
            __CrestLoad(2451, (unsigned long )mem_253, (long long )*mem_253);
            __CrestLoad(2450, (unsigned long )0, (long long )303U);
            __CrestApply2(2449, 12, (long long )((unsigned int )*mem_253 == 303U));
# 969 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_253 == 303U) {
              __CrestBranch(2452, 1205, 1);
# 970 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "   Right ");
              __CrestClearStack(2454);
            } else {
              __CrestBranch(2453, 1206, 0);

            }
            }
            }
          }
          }
          }
        }
        }
        }
        __CrestLoad(2457, (unsigned long )(& i), (long long )i);
        __CrestLoad(2456, (unsigned long )0, (long long )1);
        __CrestApply2(2455, 0, (long long )(i + 1));
        __CrestStore(2458, (unsigned long )(& i));
# 963 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___52: ;
      }
      {
      __CrestLoad(2461, (unsigned long )NRFS, (long long )*NRFS);
      __CrestLoad(2460, (unsigned long )0, (long long )16);
      __CrestApply2(2459, 14, (long long )(*NRFS > 16));
# 972 "../HPL_pdinfo.c"
      if (*NRFS > 16) {
        __CrestBranch(2462, 1210, 1);
# 974 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2464);
        __CrestLoad(2465, (unsigned long )0, (long long )16);
        __CrestStore(2466, (unsigned long )(& i));
# 975 "../HPL_pdinfo.c"
        i = 16;
        {
# 975 "../HPL_pdinfo.c"
        while (1) {
          while_continue___53: ;
          {
          __CrestLoad(2469, (unsigned long )(& i), (long long )i);
          __CrestLoad(2468, (unsigned long )NRFS, (long long )*NRFS);
          __CrestApply2(2467, 16, (long long )(i < *NRFS));
# 975 "../HPL_pdinfo.c"
          if (i < *NRFS) {
            __CrestBranch(2470, 1215, 1);

          } else {
            __CrestBranch(2471, 1216, 0);
# 975 "../HPL_pdinfo.c"
            goto while_break___53;
          }
          }
          {
# 977 "../HPL_pdinfo.c"
          mem_254 = RF + i;
          {
          __CrestLoad(2474, (unsigned long )mem_254, (long long )*mem_254);
          __CrestLoad(2473, (unsigned long )0, (long long )301U);
          __CrestApply2(2472, 12, (long long )((unsigned int )*mem_254 == 301U));
# 977 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_254 == 301U) {
            __CrestBranch(2475, 1220, 1);
# 978 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "    Left ");
            __CrestClearStack(2477);
          } else {
            __CrestBranch(2476, 1221, 0);
            {
# 979 "../HPL_pdinfo.c"
            mem_255 = RF + i;
            {
            __CrestLoad(2480, (unsigned long )mem_255, (long long )*mem_255);
            __CrestLoad(2479, (unsigned long )0, (long long )302U);
            __CrestApply2(2478, 12, (long long )((unsigned int )*mem_255 == 302U));
# 979 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_255 == 302U) {
              __CrestBranch(2481, 1224, 1);
# 980 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "   Crout ");
              __CrestClearStack(2483);
            } else {
              __CrestBranch(2482, 1225, 0);
              {
# 981 "../HPL_pdinfo.c"
              mem_256 = RF + i;
              {
              __CrestLoad(2486, (unsigned long )mem_256, (long long )*mem_256);
              __CrestLoad(2485, (unsigned long )0, (long long )303U);
              __CrestApply2(2484, 12, (long long )((unsigned int )*mem_256 == 303U));
# 981 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_256 == 303U) {
                __CrestBranch(2487, 1228, 1);
# 982 "../HPL_pdinfo.c"
                HPL_fprintf(TEST->outfp, "   Right ");
                __CrestClearStack(2489);
              } else {
                __CrestBranch(2488, 1229, 0);

              }
              }
              }
            }
            }
            }
          }
          }
          }
          __CrestLoad(2492, (unsigned long )(& i), (long long )i);
          __CrestLoad(2491, (unsigned long )0, (long long )1);
          __CrestApply2(2490, 0, (long long )(i + 1));
          __CrestStore(2493, (unsigned long )(& i));
# 975 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___53: ;
        }
      } else {
        __CrestBranch(2463, 1232, 0);

      }
      }
    } else {
      __CrestBranch(2419, 1233, 0);

    }
    }
# 989 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nBCAST  :");
    __CrestClearStack(2494);
    __CrestLoad(2495, (unsigned long )0, (long long )0);
    __CrestStore(2496, (unsigned long )(& i));
# 990 "../HPL_pdinfo.c"
    i = 0;
    {
# 990 "../HPL_pdinfo.c"
    while (1) {
      while_continue___54: ;
      {
      __CrestLoad(2499, (unsigned long )0, (long long )8);
      __CrestLoad(2498, (unsigned long )NTPS, (long long )*NTPS);
      __CrestApply2(2497, 16, (long long )(8 < *NTPS));
# 990 "../HPL_pdinfo.c"
      if (8 < *NTPS) {
        __CrestBranch(2500, 1239, 1);
        __CrestLoad(2502, (unsigned long )0, (long long )8);
        __CrestStore(2503, (unsigned long )(& tmp___35));
# 990 "../HPL_pdinfo.c"
        tmp___35 = 8;
      } else {
        __CrestBranch(2501, 1240, 0);
        __CrestLoad(2504, (unsigned long )NTPS, (long long )*NTPS);
        __CrestStore(2505, (unsigned long )(& tmp___35));
# 990 "../HPL_pdinfo.c"
        tmp___35 = *NTPS;
      }
      }
      {
      __CrestLoad(2508, (unsigned long )(& i), (long long )i);
      __CrestLoad(2507, (unsigned long )(& tmp___35), (long long )tmp___35);
      __CrestApply2(2506, 16, (long long )(i < tmp___35));
# 990 "../HPL_pdinfo.c"
      if (i < tmp___35) {
        __CrestBranch(2509, 1242, 1);

      } else {
        __CrestBranch(2510, 1243, 0);
# 990 "../HPL_pdinfo.c"
        goto while_break___54;
      }
      }
      {
# 992 "../HPL_pdinfo.c"
      mem_257 = TP + i;
      {
      __CrestLoad(2513, (unsigned long )mem_257, (long long )*mem_257);
      __CrestLoad(2512, (unsigned long )0, (long long )401U);
      __CrestApply2(2511, 12, (long long )((unsigned int )*mem_257 == 401U));
# 992 "../HPL_pdinfo.c"
      if ((unsigned int )*mem_257 == 401U) {
        __CrestBranch(2514, 1247, 1);
# 993 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "   1ring ");
        __CrestClearStack(2516);
      } else {
        __CrestBranch(2515, 1248, 0);
        {
# 994 "../HPL_pdinfo.c"
        mem_258 = TP + i;
        {
        __CrestLoad(2519, (unsigned long )mem_258, (long long )*mem_258);
        __CrestLoad(2518, (unsigned long )0, (long long )402U);
        __CrestApply2(2517, 12, (long long )((unsigned int )*mem_258 == 402U));
# 994 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_258 == 402U) {
          __CrestBranch(2520, 1251, 1);
# 995 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "  1ringM ");
          __CrestClearStack(2522);
        } else {
          __CrestBranch(2521, 1252, 0);
          {
# 996 "../HPL_pdinfo.c"
          mem_259 = TP + i;
          {
          __CrestLoad(2525, (unsigned long )mem_259, (long long )*mem_259);
          __CrestLoad(2524, (unsigned long )0, (long long )403U);
          __CrestApply2(2523, 12, (long long )((unsigned int )*mem_259 == 403U));
# 996 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_259 == 403U) {
            __CrestBranch(2526, 1255, 1);
# 997 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   2ring ");
            __CrestClearStack(2528);
          } else {
            __CrestBranch(2527, 1256, 0);
            {
# 998 "../HPL_pdinfo.c"
            mem_260 = TP + i;
            {
            __CrestLoad(2531, (unsigned long )mem_260, (long long )*mem_260);
            __CrestLoad(2530, (unsigned long )0, (long long )404U);
            __CrestApply2(2529, 12, (long long )((unsigned int )*mem_260 == 404U));
# 998 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_260 == 404U) {
              __CrestBranch(2532, 1259, 1);
# 999 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "  2ringM ");
              __CrestClearStack(2534);
            } else {
              __CrestBranch(2533, 1260, 0);
              {
# 1000 "../HPL_pdinfo.c"
              mem_261 = TP + i;
              {
              __CrestLoad(2537, (unsigned long )mem_261, (long long )*mem_261);
              __CrestLoad(2536, (unsigned long )0, (long long )405U);
              __CrestApply2(2535, 12, (long long )((unsigned int )*mem_261 == 405U));
# 1000 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_261 == 405U) {
                __CrestBranch(2538, 1263, 1);
# 1001 "../HPL_pdinfo.c"
                HPL_fprintf(TEST->outfp, "   Blong ");
                __CrestClearStack(2540);
              } else {
                __CrestBranch(2539, 1264, 0);
                {
# 1002 "../HPL_pdinfo.c"
                mem_262 = TP + i;
                {
                __CrestLoad(2543, (unsigned long )mem_262, (long long )*mem_262);
                __CrestLoad(2542, (unsigned long )0, (long long )406U);
                __CrestApply2(2541, 12, (long long )((unsigned int )*mem_262 == 406U));
# 1002 "../HPL_pdinfo.c"
                if ((unsigned int )*mem_262 == 406U) {
                  __CrestBranch(2544, 1267, 1);
# 1003 "../HPL_pdinfo.c"
                  HPL_fprintf(TEST->outfp, "  BlongM ");
                  __CrestClearStack(2546);
                } else {
                  __CrestBranch(2545, 1268, 0);

                }
                }
                }
              }
              }
              }
            }
            }
            }
          }
          }
          }
        }
        }
        }
      }
      }
      }
      __CrestLoad(2549, (unsigned long )(& i), (long long )i);
      __CrestLoad(2548, (unsigned long )0, (long long )1);
      __CrestApply2(2547, 0, (long long )(i + 1));
      __CrestStore(2550, (unsigned long )(& i));
# 990 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___54: ;
    }
    {
    __CrestLoad(2553, (unsigned long )NTPS, (long long )*NTPS);
    __CrestLoad(2552, (unsigned long )0, (long long )8);
    __CrestApply2(2551, 14, (long long )(*NTPS > 8));
# 1005 "../HPL_pdinfo.c"
    if (*NTPS > 8) {
      __CrestBranch(2554, 1272, 1);
# 1007 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2556);
      __CrestLoad(2557, (unsigned long )0, (long long )8);
      __CrestStore(2558, (unsigned long )(& i));
# 1008 "../HPL_pdinfo.c"
      i = 8;
      {
# 1008 "../HPL_pdinfo.c"
      while (1) {
        while_continue___55: ;
        {
        __CrestLoad(2561, (unsigned long )0, (long long )16);
        __CrestLoad(2560, (unsigned long )NTPS, (long long )*NTPS);
        __CrestApply2(2559, 16, (long long )(16 < *NTPS));
# 1008 "../HPL_pdinfo.c"
        if (16 < *NTPS) {
          __CrestBranch(2562, 1277, 1);
          __CrestLoad(2564, (unsigned long )0, (long long )16);
          __CrestStore(2565, (unsigned long )(& tmp___36));
# 1008 "../HPL_pdinfo.c"
          tmp___36 = 16;
        } else {
          __CrestBranch(2563, 1278, 0);
          __CrestLoad(2566, (unsigned long )NTPS, (long long )*NTPS);
          __CrestStore(2567, (unsigned long )(& tmp___36));
# 1008 "../HPL_pdinfo.c"
          tmp___36 = *NTPS;
        }
        }
        {
        __CrestLoad(2570, (unsigned long )(& i), (long long )i);
        __CrestLoad(2569, (unsigned long )(& tmp___36), (long long )tmp___36);
        __CrestApply2(2568, 16, (long long )(i < tmp___36));
# 1008 "../HPL_pdinfo.c"
        if (i < tmp___36) {
          __CrestBranch(2571, 1280, 1);

        } else {
          __CrestBranch(2572, 1281, 0);
# 1008 "../HPL_pdinfo.c"
          goto while_break___55;
        }
        }
        {
# 1010 "../HPL_pdinfo.c"
        mem_263 = TP + i;
        {
        __CrestLoad(2575, (unsigned long )mem_263, (long long )*mem_263);
        __CrestLoad(2574, (unsigned long )0, (long long )401U);
        __CrestApply2(2573, 12, (long long )((unsigned int )*mem_263 == 401U));
# 1010 "../HPL_pdinfo.c"
        if ((unsigned int )*mem_263 == 401U) {
          __CrestBranch(2576, 1285, 1);
# 1011 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "   1ring ");
          __CrestClearStack(2578);
        } else {
          __CrestBranch(2577, 1286, 0);
          {
# 1012 "../HPL_pdinfo.c"
          mem_264 = TP + i;
          {
          __CrestLoad(2581, (unsigned long )mem_264, (long long )*mem_264);
          __CrestLoad(2580, (unsigned long )0, (long long )402U);
          __CrestApply2(2579, 12, (long long )((unsigned int )*mem_264 == 402U));
# 1012 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_264 == 402U) {
            __CrestBranch(2582, 1289, 1);
# 1013 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "  1ringM ");
            __CrestClearStack(2584);
          } else {
            __CrestBranch(2583, 1290, 0);
            {
# 1014 "../HPL_pdinfo.c"
            mem_265 = TP + i;
            {
            __CrestLoad(2587, (unsigned long )mem_265, (long long )*mem_265);
            __CrestLoad(2586, (unsigned long )0, (long long )403U);
            __CrestApply2(2585, 12, (long long )((unsigned int )*mem_265 == 403U));
# 1014 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_265 == 403U) {
              __CrestBranch(2588, 1293, 1);
# 1015 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "   2ring ");
              __CrestClearStack(2590);
            } else {
              __CrestBranch(2589, 1294, 0);
              {
# 1016 "../HPL_pdinfo.c"
              mem_266 = TP + i;
              {
              __CrestLoad(2593, (unsigned long )mem_266, (long long )*mem_266);
              __CrestLoad(2592, (unsigned long )0, (long long )404U);
              __CrestApply2(2591, 12, (long long )((unsigned int )*mem_266 == 404U));
# 1016 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_266 == 404U) {
                __CrestBranch(2594, 1297, 1);
# 1017 "../HPL_pdinfo.c"
                HPL_fprintf(TEST->outfp, "  2ringM ");
                __CrestClearStack(2596);
              } else {
                __CrestBranch(2595, 1298, 0);
                {
# 1018 "../HPL_pdinfo.c"
                mem_267 = TP + i;
                {
                __CrestLoad(2599, (unsigned long )mem_267, (long long )*mem_267);
                __CrestLoad(2598, (unsigned long )0, (long long )405U);
                __CrestApply2(2597, 12, (long long )((unsigned int )*mem_267 == 405U));
# 1018 "../HPL_pdinfo.c"
                if ((unsigned int )*mem_267 == 405U) {
                  __CrestBranch(2600, 1301, 1);
# 1019 "../HPL_pdinfo.c"
                  HPL_fprintf(TEST->outfp, "   Blong ");
                  __CrestClearStack(2602);
                } else {
                  __CrestBranch(2601, 1302, 0);
                  {
# 1020 "../HPL_pdinfo.c"
                  mem_268 = TP + i;
                  {
                  __CrestLoad(2605, (unsigned long )mem_268, (long long )*mem_268);
                  __CrestLoad(2604, (unsigned long )0, (long long )406U);
                  __CrestApply2(2603, 12, (long long )((unsigned int )*mem_268 == 406U));
# 1020 "../HPL_pdinfo.c"
                  if ((unsigned int )*mem_268 == 406U) {
                    __CrestBranch(2606, 1305, 1);
# 1021 "../HPL_pdinfo.c"
                    HPL_fprintf(TEST->outfp, "  BlongM ");
                    __CrestClearStack(2608);
                  } else {
                    __CrestBranch(2607, 1306, 0);

                  }
                  }
                  }
                }
                }
                }
              }
              }
              }
            }
            }
            }
          }
          }
          }
        }
        }
        }
        __CrestLoad(2611, (unsigned long )(& i), (long long )i);
        __CrestLoad(2610, (unsigned long )0, (long long )1);
        __CrestApply2(2609, 0, (long long )(i + 1));
        __CrestStore(2612, (unsigned long )(& i));
# 1008 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___55: ;
      }
      {
      __CrestLoad(2615, (unsigned long )NTPS, (long long )*NTPS);
      __CrestLoad(2614, (unsigned long )0, (long long )16);
      __CrestApply2(2613, 14, (long long )(*NTPS > 16));
# 1023 "../HPL_pdinfo.c"
      if (*NTPS > 16) {
        __CrestBranch(2616, 1310, 1);
# 1025 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2618);
        __CrestLoad(2619, (unsigned long )0, (long long )16);
        __CrestStore(2620, (unsigned long )(& i));
# 1026 "../HPL_pdinfo.c"
        i = 16;
        {
# 1026 "../HPL_pdinfo.c"
        while (1) {
          while_continue___56: ;
          {
          __CrestLoad(2623, (unsigned long )(& i), (long long )i);
          __CrestLoad(2622, (unsigned long )NTPS, (long long )*NTPS);
          __CrestApply2(2621, 16, (long long )(i < *NTPS));
# 1026 "../HPL_pdinfo.c"
          if (i < *NTPS) {
            __CrestBranch(2624, 1315, 1);

          } else {
            __CrestBranch(2625, 1316, 0);
# 1026 "../HPL_pdinfo.c"
            goto while_break___56;
          }
          }
          {
# 1028 "../HPL_pdinfo.c"
          mem_269 = TP + i;
          {
          __CrestLoad(2628, (unsigned long )mem_269, (long long )*mem_269);
          __CrestLoad(2627, (unsigned long )0, (long long )401U);
          __CrestApply2(2626, 12, (long long )((unsigned int )*mem_269 == 401U));
# 1028 "../HPL_pdinfo.c"
          if ((unsigned int )*mem_269 == 401U) {
            __CrestBranch(2629, 1320, 1);
# 1029 "../HPL_pdinfo.c"
            HPL_fprintf(TEST->outfp, "   1ring ");
            __CrestClearStack(2631);
          } else {
            __CrestBranch(2630, 1321, 0);
            {
# 1030 "../HPL_pdinfo.c"
            mem_270 = TP + i;
            {
            __CrestLoad(2634, (unsigned long )mem_270, (long long )*mem_270);
            __CrestLoad(2633, (unsigned long )0, (long long )402U);
            __CrestApply2(2632, 12, (long long )((unsigned int )*mem_270 == 402U));
# 1030 "../HPL_pdinfo.c"
            if ((unsigned int )*mem_270 == 402U) {
              __CrestBranch(2635, 1324, 1);
# 1031 "../HPL_pdinfo.c"
              HPL_fprintf(TEST->outfp, "  1ringM ");
              __CrestClearStack(2637);
            } else {
              __CrestBranch(2636, 1325, 0);
              {
# 1032 "../HPL_pdinfo.c"
              mem_271 = TP + i;
              {
              __CrestLoad(2640, (unsigned long )mem_271, (long long )*mem_271);
              __CrestLoad(2639, (unsigned long )0, (long long )403U);
              __CrestApply2(2638, 12, (long long )((unsigned int )*mem_271 == 403U));
# 1032 "../HPL_pdinfo.c"
              if ((unsigned int )*mem_271 == 403U) {
                __CrestBranch(2641, 1328, 1);
# 1033 "../HPL_pdinfo.c"
                HPL_fprintf(TEST->outfp, "   2ring ");
                __CrestClearStack(2643);
              } else {
                __CrestBranch(2642, 1329, 0);
                {
# 1034 "../HPL_pdinfo.c"
                mem_272 = TP + i;
                {
                __CrestLoad(2646, (unsigned long )mem_272, (long long )*mem_272);
                __CrestLoad(2645, (unsigned long )0, (long long )404U);
                __CrestApply2(2644, 12, (long long )((unsigned int )*mem_272 == 404U));
# 1034 "../HPL_pdinfo.c"
                if ((unsigned int )*mem_272 == 404U) {
                  __CrestBranch(2647, 1332, 1);
# 1035 "../HPL_pdinfo.c"
                  HPL_fprintf(TEST->outfp, "  2ringM ");
                  __CrestClearStack(2649);
                } else {
                  __CrestBranch(2648, 1333, 0);
                  {
# 1036 "../HPL_pdinfo.c"
                  mem_273 = TP + i;
                  {
                  __CrestLoad(2652, (unsigned long )mem_273, (long long )*mem_273);
                  __CrestLoad(2651, (unsigned long )0, (long long )405U);
                  __CrestApply2(2650, 12, (long long )((unsigned int )*mem_273 == 405U));
# 1036 "../HPL_pdinfo.c"
                  if ((unsigned int )*mem_273 == 405U) {
                    __CrestBranch(2653, 1336, 1);
# 1037 "../HPL_pdinfo.c"
                    HPL_fprintf(TEST->outfp, "   Blong ");
                    __CrestClearStack(2655);
                  } else {
                    __CrestBranch(2654, 1337, 0);
                    {
# 1038 "../HPL_pdinfo.c"
                    mem_274 = TP + i;
                    {
                    __CrestLoad(2658, (unsigned long )mem_274, (long long )*mem_274);
                    __CrestLoad(2657, (unsigned long )0, (long long )406U);
                    __CrestApply2(2656, 12, (long long )((unsigned int )*mem_274 == 406U));
# 1038 "../HPL_pdinfo.c"
                    if ((unsigned int )*mem_274 == 406U) {
                      __CrestBranch(2659, 1340, 1);
# 1039 "../HPL_pdinfo.c"
                      HPL_fprintf(TEST->outfp, "  BlongM ");
                      __CrestClearStack(2661);
                    } else {
                      __CrestBranch(2660, 1341, 0);

                    }
                    }
                    }
                  }
                  }
                  }
                }
                }
                }
              }
              }
              }
            }
            }
            }
          }
          }
          }
          __CrestLoad(2664, (unsigned long )(& i), (long long )i);
          __CrestLoad(2663, (unsigned long )0, (long long )1);
          __CrestApply2(2662, 0, (long long )(i + 1));
          __CrestStore(2665, (unsigned long )(& i));
# 1026 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___56: ;
        }
      } else {
        __CrestBranch(2617, 1344, 0);

      }
      }
    } else {
      __CrestBranch(2555, 1345, 0);

    }
    }
# 1046 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nDEPTH  :");
    __CrestClearStack(2666);
    __CrestLoad(2667, (unsigned long )0, (long long )0);
    __CrestStore(2668, (unsigned long )(& i));
# 1047 "../HPL_pdinfo.c"
    i = 0;
    {
# 1047 "../HPL_pdinfo.c"
    while (1) {
      while_continue___57: ;
      {
      __CrestLoad(2671, (unsigned long )0, (long long )8);
      __CrestLoad(2670, (unsigned long )NDHS, (long long )*NDHS);
      __CrestApply2(2669, 16, (long long )(8 < *NDHS));
# 1047 "../HPL_pdinfo.c"
      if (8 < *NDHS) {
        __CrestBranch(2672, 1351, 1);
        __CrestLoad(2674, (unsigned long )0, (long long )8);
        __CrestStore(2675, (unsigned long )(& tmp___37));
# 1047 "../HPL_pdinfo.c"
        tmp___37 = 8;
      } else {
        __CrestBranch(2673, 1352, 0);
        __CrestLoad(2676, (unsigned long )NDHS, (long long )*NDHS);
        __CrestStore(2677, (unsigned long )(& tmp___37));
# 1047 "../HPL_pdinfo.c"
        tmp___37 = *NDHS;
      }
      }
      {
      __CrestLoad(2680, (unsigned long )(& i), (long long )i);
      __CrestLoad(2679, (unsigned long )(& tmp___37), (long long )tmp___37);
      __CrestApply2(2678, 16, (long long )(i < tmp___37));
# 1047 "../HPL_pdinfo.c"
      if (i < tmp___37) {
        __CrestBranch(2681, 1354, 1);

      } else {
        __CrestBranch(2682, 1355, 0);
# 1047 "../HPL_pdinfo.c"
        goto while_break___57;
      }
      }
# 1048 "../HPL_pdinfo.c"
      mem_275 = DH + i;
      __CrestLoad(2683, (unsigned long )mem_275, (long long )*mem_275);
# 1048 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%8d ", *mem_275);
      __CrestClearStack(2684);
      __CrestLoad(2687, (unsigned long )(& i), (long long )i);
      __CrestLoad(2686, (unsigned long )0, (long long )1);
      __CrestApply2(2685, 0, (long long )(i + 1));
      __CrestStore(2688, (unsigned long )(& i));
# 1047 "../HPL_pdinfo.c"
      i ++;
    }
    while_break___57: ;
    }
    {
    __CrestLoad(2691, (unsigned long )NDHS, (long long )*NDHS);
    __CrestLoad(2690, (unsigned long )0, (long long )8);
    __CrestApply2(2689, 14, (long long )(*NDHS > 8));
# 1049 "../HPL_pdinfo.c"
    if (*NDHS > 8) {
      __CrestBranch(2692, 1359, 1);
# 1051 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "\n        ");
      __CrestClearStack(2694);
      __CrestLoad(2695, (unsigned long )0, (long long )8);
      __CrestStore(2696, (unsigned long )(& i));
# 1052 "../HPL_pdinfo.c"
      i = 8;
      {
# 1052 "../HPL_pdinfo.c"
      while (1) {
        while_continue___58: ;
        {
        __CrestLoad(2699, (unsigned long )0, (long long )16);
        __CrestLoad(2698, (unsigned long )NDHS, (long long )*NDHS);
        __CrestApply2(2697, 16, (long long )(16 < *NDHS));
# 1052 "../HPL_pdinfo.c"
        if (16 < *NDHS) {
          __CrestBranch(2700, 1364, 1);
          __CrestLoad(2702, (unsigned long )0, (long long )16);
          __CrestStore(2703, (unsigned long )(& tmp___38));
# 1052 "../HPL_pdinfo.c"
          tmp___38 = 16;
        } else {
          __CrestBranch(2701, 1365, 0);
          __CrestLoad(2704, (unsigned long )NDHS, (long long )*NDHS);
          __CrestStore(2705, (unsigned long )(& tmp___38));
# 1052 "../HPL_pdinfo.c"
          tmp___38 = *NDHS;
        }
        }
        {
        __CrestLoad(2708, (unsigned long )(& i), (long long )i);
        __CrestLoad(2707, (unsigned long )(& tmp___38), (long long )tmp___38);
        __CrestApply2(2706, 16, (long long )(i < tmp___38));
# 1052 "../HPL_pdinfo.c"
        if (i < tmp___38) {
          __CrestBranch(2709, 1367, 1);

        } else {
          __CrestBranch(2710, 1368, 0);
# 1052 "../HPL_pdinfo.c"
          goto while_break___58;
        }
        }
# 1053 "../HPL_pdinfo.c"
        mem_276 = DH + i;
        __CrestLoad(2711, (unsigned long )mem_276, (long long )*mem_276);
# 1053 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "%8d ", *mem_276);
        __CrestClearStack(2712);
        __CrestLoad(2715, (unsigned long )(& i), (long long )i);
        __CrestLoad(2714, (unsigned long )0, (long long )1);
        __CrestApply2(2713, 0, (long long )(i + 1));
        __CrestStore(2716, (unsigned long )(& i));
# 1052 "../HPL_pdinfo.c"
        i ++;
      }
      while_break___58: ;
      }
      {
      __CrestLoad(2719, (unsigned long )NDHS, (long long )*NDHS);
      __CrestLoad(2718, (unsigned long )0, (long long )16);
      __CrestApply2(2717, 14, (long long )(*NDHS > 16));
# 1054 "../HPL_pdinfo.c"
      if (*NDHS > 16) {
        __CrestBranch(2720, 1372, 1);
# 1056 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, "\n        ");
        __CrestClearStack(2722);
        __CrestLoad(2723, (unsigned long )0, (long long )16);
        __CrestStore(2724, (unsigned long )(& i));
# 1057 "../HPL_pdinfo.c"
        i = 16;
        {
# 1057 "../HPL_pdinfo.c"
        while (1) {
          while_continue___59: ;
          {
          __CrestLoad(2727, (unsigned long )(& i), (long long )i);
          __CrestLoad(2726, (unsigned long )NDHS, (long long )*NDHS);
          __CrestApply2(2725, 16, (long long )(i < *NDHS));
# 1057 "../HPL_pdinfo.c"
          if (i < *NDHS) {
            __CrestBranch(2728, 1377, 1);

          } else {
            __CrestBranch(2729, 1378, 0);
# 1057 "../HPL_pdinfo.c"
            goto while_break___59;
          }
          }
# 1058 "../HPL_pdinfo.c"
          mem_277 = DH + i;
          __CrestLoad(2730, (unsigned long )mem_277, (long long )*mem_277);
# 1058 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, "%8d ", *mem_277);
          __CrestClearStack(2731);
          __CrestLoad(2734, (unsigned long )(& i), (long long )i);
          __CrestLoad(2733, (unsigned long )0, (long long )1);
          __CrestApply2(2732, 0, (long long )(i + 1));
          __CrestStore(2735, (unsigned long )(& i));
# 1057 "../HPL_pdinfo.c"
          i ++;
        }
        while_break___59: ;
        }
      } else {
        __CrestBranch(2721, 1381, 0);

      }
      }
    } else {
      __CrestBranch(2693, 1382, 0);

    }
    }
# 1064 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nSWAP   :");
    __CrestClearStack(2736);
    {
    __CrestLoad(2739, (unsigned long )FSWAP, (long long )*FSWAP);
    __CrestLoad(2738, (unsigned long )0, (long long )451U);
    __CrestApply2(2737, 12, (long long )((unsigned int )*FSWAP == 451U));
# 1065 "../HPL_pdinfo.c"
    if ((unsigned int )*FSWAP == 451U) {
      __CrestBranch(2740, 1385, 1);
# 1066 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " Binary-exchange");
      __CrestClearStack(2742);
    } else {
      __CrestBranch(2741, 1386, 0);
      {
      __CrestLoad(2745, (unsigned long )FSWAP, (long long )*FSWAP);
      __CrestLoad(2744, (unsigned long )0, (long long )452U);
      __CrestApply2(2743, 12, (long long )((unsigned int )*FSWAP == 452U));
# 1067 "../HPL_pdinfo.c"
      if ((unsigned int )*FSWAP == 452U) {
        __CrestBranch(2746, 1387, 1);
# 1068 "../HPL_pdinfo.c"
        HPL_fprintf(TEST->outfp, " Spread-roll (long)");
        __CrestClearStack(2748);
      } else {
        __CrestBranch(2747, 1388, 0);
        {
        __CrestLoad(2751, (unsigned long )FSWAP, (long long )*FSWAP);
        __CrestLoad(2750, (unsigned long )0, (long long )453U);
        __CrestApply2(2749, 12, (long long )((unsigned int )*FSWAP == 453U));
# 1069 "../HPL_pdinfo.c"
        if ((unsigned int )*FSWAP == 453U) {
          __CrestBranch(2752, 1389, 1);
          __CrestLoad(2754, (unsigned long )TSWAP, (long long )*TSWAP);
# 1070 "../HPL_pdinfo.c"
          HPL_fprintf(TEST->outfp, " Mix (threshold = %d)", *TSWAP);
          __CrestClearStack(2755);
        } else {
          __CrestBranch(2753, 1390, 0);

        }
        }
      }
      }
    }
    }
# 1074 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nL1     :");
    __CrestClearStack(2756);
    {
    __CrestLoad(2759, (unsigned long )L1NOTRAN, (long long )*L1NOTRAN);
    __CrestLoad(2758, (unsigned long )0, (long long )0);
    __CrestApply2(2757, 13, (long long )(*L1NOTRAN != 0));
# 1075 "../HPL_pdinfo.c"
    if (*L1NOTRAN != 0) {
      __CrestBranch(2760, 1393, 1);
# 1076 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " no-transposed form");
      __CrestClearStack(2762);
    } else {
      __CrestBranch(2761, 1394, 0);
# 1078 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " transposed form");
      __CrestClearStack(2763);
    }
    }
# 1082 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nU      :");
    __CrestClearStack(2764);
    {
    __CrestLoad(2767, (unsigned long )UNOTRAN, (long long )*UNOTRAN);
    __CrestLoad(2766, (unsigned long )0, (long long )0);
    __CrestApply2(2765, 13, (long long )(*UNOTRAN != 0));
# 1083 "../HPL_pdinfo.c"
    if (*UNOTRAN != 0) {
      __CrestBranch(2768, 1397, 1);
# 1084 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " no-transposed form");
      __CrestClearStack(2770);
    } else {
      __CrestBranch(2769, 1398, 0);
# 1086 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " transposed form");
      __CrestClearStack(2771);
    }
    }
# 1090 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nEQUIL  :");
    __CrestClearStack(2772);
    {
    __CrestLoad(2775, (unsigned long )EQUIL, (long long )*EQUIL);
    __CrestLoad(2774, (unsigned long )0, (long long )0);
    __CrestApply2(2773, 13, (long long )(*EQUIL != 0));
# 1091 "../HPL_pdinfo.c"
    if (*EQUIL != 0) {
      __CrestBranch(2776, 1401, 1);
# 1092 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " yes");
      __CrestClearStack(2778);
    } else {
      __CrestBranch(2777, 1402, 0);
# 1094 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, " no");
      __CrestClearStack(2779);
    }
    }
    __CrestLoad(2780, (unsigned long )ALIGN, (long long )*ALIGN);
# 1098 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\nALIGN  : %d double precision words", *ALIGN);
    __CrestClearStack(2781);
# 1101 "../HPL_pdinfo.c"
    HPL_fprintf(TEST->outfp, "\n\n");
    __CrestClearStack(2782);
    {
    __CrestLoad(2785, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
    __CrestLoad(2784, (unsigned long )0, (long long )0.0);
    __CrestApply2(2783, 14, (long long )(TEST->thrsh > 0.0));
# 1105 "../HPL_pdinfo.c"
    if (TEST->thrsh > 0.0) {
      __CrestBranch(2786, 1405, 1);
# 1107 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s%s\n\n", "--------------------------------------",
                  "--------------------------------------");
      __CrestClearStack(2788);
# 1110 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s\n", "- The matrix A is randomly generated for each test.");
      __CrestClearStack(2789);
# 1112 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s\n", "- The following scaled residual checks will be computed:");
      __CrestClearStack(2790);
# 1114 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s\n", "   1) ||Ax-b||_oo / ( eps * ||A||_1  * N        )");
      __CrestClearStack(2791);
# 1116 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s\n", "   2) ||Ax-b||_oo / ( eps * ||A||_1  * ||x||_1  )");
      __CrestClearStack(2792);
# 1118 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s\n", "   3) ||Ax-b||_oo / ( eps * ||A||_oo * ||x||_oo )");
      __CrestClearStack(2793);
# 1120 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s %21.6e\n", "- The relative machine precision (eps) is taken to be",
                  TEST->epsil);
      __CrestClearStack(2794);
# 1123 "../HPL_pdinfo.c"
      HPL_fprintf(TEST->outfp, "%s   %11.1f\n\n", "- Computational tests pass if scaled residuals are less than ",
                  TEST->thrsh);
      __CrestClearStack(2795);
    } else {
      __CrestBranch(2787, 1406, 0);

    }
    }
  } else {
    __CrestBranch(1811, 1407, 0);

  }
  }

  {
  __CrestReturn(2796);
# 53 "../HPL_pdinfo.c"
  return;
  }
}
}
# 1 "HPL_pdtest.o"
#pragma merger("0","./HPL_pdtest.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 124 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dgemv(enum HPL_ORDER const , enum HPL_TRANS const , int const ,
                        int const , double const , double const * , int const ,
                        double const * , int const , double const , double * ,
                        int const ) ;
# 157 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_barrier(MPI_Comm COMM ) ;
# 169 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_reduce(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , void (* const OP)(int const ,
                                                                                                void const * ,
                                                                                                void * ,
                                                                                                HPL_T_TYPE const ) ,
               int const ROOT , MPI_Comm COMM ) ;
# 201 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_sum(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE ) ;
# 260 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxg2p(int const IG , int const INB , int const NB , int const SRCPROC ,
                int const NPROCS ) ;
# 296 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_numroc(int const N , int const INB , int const NB , int const PROC ,
               int const SRCPROC , int const NPROCS ) ;
# 491 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
double HPL_pdlange(HPL_T_grid const *GRID , HPL_T_NORM const NORM , int const M ,
                   int const N , int const NB , double const *A , int const LDA ) ;
# 330 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesv(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
# 81 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
void HPL_ptimer(int const I ) ;
# 82 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
void HPL_ptimer_boot(void) ;
# 83 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
void HPL_ptimer_combine(MPI_Comm COMM , HPL_T_PTIME_OP const OPE , HPL_T_PTIME const TMTYPE ,
                        int const N , int const IBEG , double *TIMES ) ;
# 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pmatgen.h"
void HPL_pdmatgen(HPL_T_grid const *GRID , int const M , int const N , int const NB ,
                  double *A , int const LDA , int const ISEED ) ;
# 132 "../HPL_pdtest.c"
static int first = 1;
# 53 "../HPL_pdtest.c"
void HPL_pdtest(HPL_T_test *TEST , HPL_T_grid *GRID , HPL_T_palg *ALGO , int const N ,
                int const NB )
{
  HPL_T_pmat mat ;
  double wtime[1] ;
  int info[3] ;
  double Anorm1 ;
  double AnormI ;
  double Gflops ;
  double Xnorm1 ;
  double XnormI ;
  double resid0 ;
  double resid1 ;
  double resid2 ;
  double resid3 ;
  double *Bptr ;
  void *vptr ;
  int ii ;
  int ip2 ;
  int mycol ;
  int myrow ;
  int npcol ;
  int nprow ;
  int nq ;
  char ctop ;
  char cpfact ;
  char crfact ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  double tmp___5 ;
  char const *tmp___6 ;
  char const *tmp___7 ;
  char const *tmp___8 ;
  double *mem_40 ;

  {
  __CrestCall(2799, 3);
  __CrestStore(2798, (unsigned long )(& NB));
  __CrestStore(2797, (unsigned long )(& N));
# 131 "../HPL_pdtest.c"
  vptr = (void *)0;
# 138 "../HPL_pdtest.c"
  HPL_grid_info((HPL_T_grid const *)GRID, & nprow, & npcol, & myrow, & mycol);
  __CrestClearStack(2800);
  __CrestLoad(2801, (unsigned long )(& N), (long long )N);
  __CrestStore(2802, (unsigned long )(& mat.n));
# 140 "../HPL_pdtest.c"
  mat.n = (int )N;
  __CrestLoad(2803, (unsigned long )(& NB), (long long )NB);
  __CrestStore(2804, (unsigned long )(& mat.nb));
# 140 "../HPL_pdtest.c"
  mat.nb = (int )NB;
  __CrestLoad(2805, (unsigned long )0, (long long )0);
  __CrestStore(2806, (unsigned long )(& mat.info));
# 140 "../HPL_pdtest.c"
  mat.info = 0;
  __CrestLoad(2807, (unsigned long )(& N), (long long )N);
  __CrestLoad(2808, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(2809, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(2810, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(2811, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(2812, (unsigned long )(& nprow), (long long )nprow);
# 141 "../HPL_pdtest.c"
  mat.mp = HPL_numroc(N, NB, NB, (int const )myrow, (int const )0, (int const )nprow);
  __CrestHandleReturn(2814, (long long )mat.mp);
  __CrestStore(2813, (unsigned long )(& mat.mp));
  __CrestLoad(2815, (unsigned long )(& N), (long long )N);
  __CrestLoad(2816, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(2817, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(2818, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(2819, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(2820, (unsigned long )(& npcol), (long long )npcol);
# 142 "../HPL_pdtest.c"
  nq = HPL_numroc(N, NB, NB, (int const )mycol, (int const )0, (int const )npcol);
  __CrestHandleReturn(2822, (long long )nq);
  __CrestStore(2821, (unsigned long )(& nq));
  __CrestLoad(2825, (unsigned long )(& nq), (long long )nq);
  __CrestLoad(2824, (unsigned long )0, (long long )1);
  __CrestApply2(2823, 0, (long long )(nq + 1));
  __CrestStore(2826, (unsigned long )(& mat.nq));
# 143 "../HPL_pdtest.c"
  mat.nq = nq + 1;
  {
  __CrestLoad(2829, (unsigned long )0, (long long )1);
  __CrestLoad(2828, (unsigned long )(& mat.mp), (long long )mat.mp);
  __CrestApply2(2827, 14, (long long )(1 > mat.mp));
# 153 "../HPL_pdtest.c"
  if (1 > mat.mp) {
    __CrestBranch(2830, 1412, 1);
    __CrestLoad(2832, (unsigned long )0, (long long )1);
    __CrestStore(2833, (unsigned long )(& tmp));
# 153 "../HPL_pdtest.c"
    tmp = 1;
  } else {
    __CrestBranch(2831, 1413, 0);
    __CrestLoad(2834, (unsigned long )(& mat.mp), (long long )mat.mp);
    __CrestStore(2835, (unsigned long )(& tmp));
# 153 "../HPL_pdtest.c"
    tmp = mat.mp;
  }
  }
  __CrestLoad(2842, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(2841, (unsigned long )0, (long long )1);
  __CrestApply2(2840, 1, (long long )(tmp - 1));
  __CrestLoad(2839, (unsigned long )(& ALGO->align), (long long )ALGO->align);
  __CrestApply2(2838, 3, (long long )((tmp - 1) / ALGO->align));
  __CrestLoad(2837, (unsigned long )(& ALGO->align), (long long )ALGO->align);
  __CrestApply2(2836, 2, (long long )(((tmp - 1) / ALGO->align) * ALGO->align));
  __CrestStore(2843, (unsigned long )(& mat.ld));
# 153 "../HPL_pdtest.c"
  mat.ld = ((tmp - 1) / ALGO->align) * ALGO->align;
  {
# 154 "../HPL_pdtest.c"
  while (1) {
    while_continue: ;
    __CrestLoad(2846, (unsigned long )(& mat.ld), (long long )mat.ld);
    __CrestLoad(2845, (unsigned long )(& ALGO->align), (long long )ALGO->align);
    __CrestApply2(2844, 0, (long long )(mat.ld + ALGO->align));
    __CrestStore(2847, (unsigned long )(& mat.ld));
# 156 "../HPL_pdtest.c"
    mat.ld += ALGO->align;
    __CrestLoad(2848, (unsigned long )(& mat.ld), (long long )mat.ld);
    __CrestStore(2849, (unsigned long )(& ii));
# 156 "../HPL_pdtest.c"
    ii = mat.ld;
    __CrestLoad(2850, (unsigned long )0, (long long )1);
    __CrestStore(2851, (unsigned long )(& ip2));
# 156 "../HPL_pdtest.c"
    ip2 = 1;
    {
# 157 "../HPL_pdtest.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(2854, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(2853, (unsigned long )0, (long long )1);
      __CrestApply2(2852, 14, (long long )(ii > 1));
# 157 "../HPL_pdtest.c"
      if (ii > 1) {
        __CrestBranch(2855, 1423, 1);

      } else {
        __CrestBranch(2856, 1424, 0);
# 157 "../HPL_pdtest.c"
        goto while_break___0;
      }
      }
      __CrestLoad(2859, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(2858, (unsigned long )0, (long long )1);
      __CrestApply2(2857, 9, (long long )(ii >> 1));
      __CrestStore(2860, (unsigned long )(& ii));
# 157 "../HPL_pdtest.c"
      ii >>= 1;
      __CrestLoad(2863, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(2862, (unsigned long )0, (long long )1);
      __CrestApply2(2861, 8, (long long )(ip2 << 1));
      __CrestStore(2864, (unsigned long )(& ip2));
# 157 "../HPL_pdtest.c"
      ip2 <<= 1;
    }
    while_break___0: ;
    }
    {
    __CrestLoad(2867, (unsigned long )(& mat.ld), (long long )mat.ld);
    __CrestLoad(2866, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(2865, 12, (long long )(mat.ld == ip2));
# 154 "../HPL_pdtest.c"
    if (mat.ld == ip2) {
      __CrestBranch(2868, 1428, 1);

    } else {
      __CrestBranch(2869, 1429, 0);
# 154 "../HPL_pdtest.c"
      goto while_break;
    }
    }
  }
  while_break: ;
  }
  __CrestLoad(2878, (unsigned long )(& ALGO->align), (long long )ALGO->align);
  __CrestLoad(2877, (unsigned long )(& mat.ld), (long long )mat.ld);
  __CrestLoad(2876, (unsigned long )0, (long long )1);
  __CrestApply2(2875, 0, (long long )(mat.ld + 1));
  __CrestLoad(2874, (unsigned long )(& mat.nq), (long long )mat.nq);
  __CrestApply2(2873, 2, (long long )((mat.ld + 1) * mat.nq));
  __CrestApply2(2872, 0, (long long )(ALGO->align + (mat.ld + 1) * mat.nq));
  __CrestLoad(2871, (unsigned long )0, (long long )sizeof(double ));
  __CrestApply2(2870, 2, (long long )((unsigned long )(ALGO->align + (mat.ld + 1) * mat.nq) * sizeof(double )));
# 163 "../HPL_pdtest.c"
  tmp___0 = malloc((unsigned long )(ALGO->align + (mat.ld + 1) * mat.nq) * sizeof(double ));
  __CrestClearStack(2879);
# 163 "../HPL_pdtest.c"
  vptr = tmp___0;
  __CrestLoad(2882, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(2881, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(2880, 12, (long long )((unsigned long )vptr == (unsigned long )((void *)0)));
  __CrestStore(2883, (unsigned long )(& info[0]));
# 164 "../HPL_pdtest.c"
  info[0] = (unsigned long )vptr == (unsigned long )((void *)0);
  __CrestLoad(2884, (unsigned long )(& myrow), (long long )myrow);
  __CrestStore(2885, (unsigned long )(& info[1]));
# 164 "../HPL_pdtest.c"
  info[1] = myrow;
  __CrestLoad(2886, (unsigned long )(& mycol), (long long )mycol);
  __CrestStore(2887, (unsigned long )(& info[2]));
# 164 "../HPL_pdtest.c"
  info[2] = mycol;
  __CrestLoad(2888, (unsigned long )0, (long long )((int const )3));
  __CrestLoad(2889, (unsigned long )0, (long long )((HPL_T_TYPE const )100));
  __CrestLoad(2890, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
# 165 "../HPL_pdtest.c"
  HPL_all_reduce((void *)(info), (int const )3, (HPL_T_TYPE const )100, (void (* const )(int const ,
                                                                                              void const * ,
                                                                                              void * ,
                                                                                              HPL_T_TYPE const ))(& HPL_max),
                 GRID->all_comm);
  __CrestClearStack(2891);
  {
  __CrestLoad(2894, (unsigned long )(& info[0]), (long long )info[0]);
  __CrestLoad(2893, (unsigned long )0, (long long )0);
  __CrestApply2(2892, 13, (long long )(info[0] != 0));
# 167 "../HPL_pdtest.c"
  if (info[0] != 0) {
    __CrestBranch(2895, 1433, 1);
    {
    __CrestLoad(2899, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(2898, (unsigned long )0, (long long )0);
    __CrestApply2(2897, 12, (long long )(myrow == 0));
# 169 "../HPL_pdtest.c"
    if (myrow == 0) {
      __CrestBranch(2900, 1434, 1);
      {
      __CrestLoad(2904, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(2903, (unsigned long )0, (long long )0);
      __CrestApply2(2902, 12, (long long )(mycol == 0));
# 169 "../HPL_pdtest.c"
      if (mycol == 0) {
        __CrestBranch(2905, 1435, 1);
        __CrestLoad(2907, (unsigned long )0, (long long )170);
        __CrestLoad(2908, (unsigned long )(& info[1]), (long long )info[1]);
        __CrestLoad(2909, (unsigned long )(& info[2]), (long long )info[2]);
# 170 "../HPL_pdtest.c"
        HPL_pwarn(TEST->outfp, 170, "HPL_pdtest", "[%d,%d] %s", info[1], info[2],
                  "Memory allocation failed for A, x and b. Skip.");
        __CrestClearStack(2910);
      } else {
        __CrestBranch(2906, 1436, 0);

      }
      }
    } else {
      __CrestBranch(2901, 1437, 0);

    }
    }
    __CrestLoad(2913, (unsigned long )(& TEST->kskip), (long long )TEST->kskip);
    __CrestLoad(2912, (unsigned long )0, (long long )1);
    __CrestApply2(2911, 0, (long long )(TEST->kskip + 1));
    __CrestStore(2914, (unsigned long )(& TEST->kskip));
# 173 "../HPL_pdtest.c"
    (TEST->kskip) ++;
# 174 "../HPL_pdtest.c"
    goto return_label;
  } else {
    __CrestBranch(2896, 1441, 0);

  }
  }
# 179 "../HPL_pdtest.c"
  mat.A = (double *)(((((size_t )vptr + (size_t )ALGO->align * sizeof(double )) - 1UL) / ((size_t )ALGO->align * sizeof(double ))) * ((size_t )ALGO->align * sizeof(double )));
# 181 "../HPL_pdtest.c"
  mat.X = mat.A + mat.ld * mat.nq;
  __CrestLoad(2915, (unsigned long )(& N), (long long )N);
  __CrestLoad(2918, (unsigned long )(& N), (long long )N);
  __CrestLoad(2917, (unsigned long )0, (long long )1);
  __CrestApply2(2916, 0, (long long )(N + 1));
  __CrestLoad(2919, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(2920, (unsigned long )(& mat.ld), (long long )mat.ld);
  __CrestLoad(2921, (unsigned long )0, (long long )((int const )100));
# 182 "../HPL_pdtest.c"
  HPL_pdmatgen((HPL_T_grid const *)GRID, N, N + 1, NB, mat.A, (int const )mat.ld,
               (int const )100);
  __CrestClearStack(2922);
# 191 "../HPL_pdtest.c"
  HPL_ptimer_boot();
  __CrestClearStack(2923);
  __CrestLoad(2924, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
# 191 "../HPL_pdtest.c"
  HPL_barrier(GRID->all_comm);
  __CrestClearStack(2925);
  __CrestLoad(2926, (unsigned long )0, (long long )((int const )0));
# 192 "../HPL_pdtest.c"
  HPL_ptimer((int const )0);
  __CrestClearStack(2927);
# 193 "../HPL_pdtest.c"
  HPL_pdgesv(GRID, ALGO, & mat);
  __CrestClearStack(2928);
  __CrestLoad(2929, (unsigned long )0, (long long )((int const )0));
# 194 "../HPL_pdtest.c"
  HPL_ptimer((int const )0);
  __CrestClearStack(2930);
  __CrestLoad(2931, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestLoad(2932, (unsigned long )0, (long long )((HPL_T_PTIME_OP const )201));
  __CrestLoad(2933, (unsigned long )0, (long long )((HPL_T_PTIME const )101));
  __CrestLoad(2934, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(2935, (unsigned long )0, (long long )((int const )0));
# 202 "../HPL_pdtest.c"
  HPL_ptimer_combine(GRID->all_comm, (HPL_T_PTIME_OP const )201, (HPL_T_PTIME const )101,
                     (int const )1, (int const )0, wtime);
  __CrestClearStack(2936);
  {
  __CrestLoad(2939, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(2938, (unsigned long )0, (long long )0);
  __CrestApply2(2937, 12, (long long )(myrow == 0));
# 205 "../HPL_pdtest.c"
  if (myrow == 0) {
    __CrestBranch(2940, 1444, 1);
    {
    __CrestLoad(2944, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(2943, (unsigned long )0, (long long )0);
    __CrestApply2(2942, 12, (long long )(mycol == 0));
# 205 "../HPL_pdtest.c"
    if (mycol == 0) {
      __CrestBranch(2945, 1445, 1);
      {
      __CrestLoad(2949, (unsigned long )(& first), (long long )first);
      __CrestLoad(2948, (unsigned long )0, (long long )0);
      __CrestApply2(2947, 13, (long long )(first != 0));
# 207 "../HPL_pdtest.c"
      if (first != 0) {
        __CrestBranch(2950, 1446, 1);
# 209 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%s\n", "======================================",
                    "======================================");
        __CrestClearStack(2952);
# 212 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%s\n", "T/V                N    NB     P     Q",
                    "               Time             Gflops");
        __CrestClearStack(2953);
# 215 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%s\n", "--------------------------------------",
                    "--------------------------------------");
        __CrestClearStack(2954);
        {
        __CrestLoad(2957, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
        __CrestLoad(2956, (unsigned long )0, (long long )0.0);
        __CrestApply2(2955, 15, (long long )(TEST->thrsh <= 0.0));
# 218 "../HPL_pdtest.c"
        if (TEST->thrsh <= 0.0) {
          __CrestBranch(2958, 1448, 1);
          __CrestLoad(2960, (unsigned long )0, (long long )0);
          __CrestStore(2961, (unsigned long )(& first));
# 218 "../HPL_pdtest.c"
          first = 0;
        } else {
          __CrestBranch(2959, 1449, 0);

        }
        }
      } else {
        __CrestBranch(2951, 1450, 0);

      }
      }
# 224 "../HPL_pdtest.c"
      Gflops = (((double )N / 1.0e+9) * ((double )N / wtime[0])) * ((2.0 / 3.0) * (double )N + 3.0 / 2.0);
      {
      __CrestLoad(2964, (unsigned long )(& ALGO->pfact), (long long )ALGO->pfact);
      __CrestLoad(2963, (unsigned long )0, (long long )301U);
      __CrestApply2(2962, 12, (long long )((unsigned int )ALGO->pfact == 301U));
# 228 "../HPL_pdtest.c"
      if ((unsigned int )ALGO->pfact == 301U) {
        __CrestBranch(2965, 1453, 1);
        __CrestLoad(2967, (unsigned long )0, (long long )((char )'L'));
        __CrestStore(2968, (unsigned long )(& cpfact));
# 228 "../HPL_pdtest.c"
        cpfact = (char )'L';
      } else {
        __CrestBranch(2966, 1454, 0);
        {
        __CrestLoad(2971, (unsigned long )(& ALGO->pfact), (long long )ALGO->pfact);
        __CrestLoad(2970, (unsigned long )0, (long long )302U);
        __CrestApply2(2969, 12, (long long )((unsigned int )ALGO->pfact == 302U));
# 228 "../HPL_pdtest.c"
        if ((unsigned int )ALGO->pfact == 302U) {
          __CrestBranch(2972, 1455, 1);
          __CrestLoad(2974, (unsigned long )0, (long long )'C');
          __CrestStore(2975, (unsigned long )(& tmp___1));
# 228 "../HPL_pdtest.c"
          tmp___1 = 'C';
        } else {
          __CrestBranch(2973, 1456, 0);
          __CrestLoad(2976, (unsigned long )0, (long long )'R');
          __CrestStore(2977, (unsigned long )(& tmp___1));
# 228 "../HPL_pdtest.c"
          tmp___1 = 'R';
        }
        }
        __CrestLoad(2978, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestStore(2979, (unsigned long )(& cpfact));
# 228 "../HPL_pdtest.c"
        cpfact = (char )tmp___1;
      }
      }
      {
      __CrestLoad(2982, (unsigned long )(& ALGO->rfact), (long long )ALGO->rfact);
      __CrestLoad(2981, (unsigned long )0, (long long )301U);
      __CrestApply2(2980, 12, (long long )((unsigned int )ALGO->rfact == 301U));
# 230 "../HPL_pdtest.c"
      if ((unsigned int )ALGO->rfact == 301U) {
        __CrestBranch(2983, 1459, 1);
        __CrestLoad(2985, (unsigned long )0, (long long )((char )'L'));
        __CrestStore(2986, (unsigned long )(& crfact));
# 230 "../HPL_pdtest.c"
        crfact = (char )'L';
      } else {
        __CrestBranch(2984, 1460, 0);
        {
        __CrestLoad(2989, (unsigned long )(& ALGO->rfact), (long long )ALGO->rfact);
        __CrestLoad(2988, (unsigned long )0, (long long )302U);
        __CrestApply2(2987, 12, (long long )((unsigned int )ALGO->rfact == 302U));
# 230 "../HPL_pdtest.c"
        if ((unsigned int )ALGO->rfact == 302U) {
          __CrestBranch(2990, 1461, 1);
          __CrestLoad(2992, (unsigned long )0, (long long )'C');
          __CrestStore(2993, (unsigned long )(& tmp___2));
# 230 "../HPL_pdtest.c"
          tmp___2 = 'C';
        } else {
          __CrestBranch(2991, 1462, 0);
          __CrestLoad(2994, (unsigned long )0, (long long )'R');
          __CrestStore(2995, (unsigned long )(& tmp___2));
# 230 "../HPL_pdtest.c"
          tmp___2 = 'R';
        }
        }
        __CrestLoad(2996, (unsigned long )(& tmp___2), (long long )tmp___2);
        __CrestStore(2997, (unsigned long )(& crfact));
# 230 "../HPL_pdtest.c"
        crfact = (char )tmp___2;
      }
      }
      {
      __CrestLoad(3000, (unsigned long )(& ALGO->btopo), (long long )ALGO->btopo);
      __CrestLoad(2999, (unsigned long )0, (long long )401U);
      __CrestApply2(2998, 12, (long long )((unsigned int )ALGO->btopo == 401U));
# 233 "../HPL_pdtest.c"
      if ((unsigned int )ALGO->btopo == 401U) {
        __CrestBranch(3001, 1465, 1);
        __CrestLoad(3003, (unsigned long )0, (long long )((char )'0'));
        __CrestStore(3004, (unsigned long )(& ctop));
# 233 "../HPL_pdtest.c"
        ctop = (char )'0';
      } else {
        __CrestBranch(3002, 1466, 0);
        {
        __CrestLoad(3007, (unsigned long )(& ALGO->btopo), (long long )ALGO->btopo);
        __CrestLoad(3006, (unsigned long )0, (long long )402U);
        __CrestApply2(3005, 12, (long long )((unsigned int )ALGO->btopo == 402U));
# 234 "../HPL_pdtest.c"
        if ((unsigned int )ALGO->btopo == 402U) {
          __CrestBranch(3008, 1467, 1);
          __CrestLoad(3010, (unsigned long )0, (long long )((char )'1'));
          __CrestStore(3011, (unsigned long )(& ctop));
# 234 "../HPL_pdtest.c"
          ctop = (char )'1';
        } else {
          __CrestBranch(3009, 1468, 0);
          {
          __CrestLoad(3014, (unsigned long )(& ALGO->btopo), (long long )ALGO->btopo);
          __CrestLoad(3013, (unsigned long )0, (long long )403U);
          __CrestApply2(3012, 12, (long long )((unsigned int )ALGO->btopo == 403U));
# 235 "../HPL_pdtest.c"
          if ((unsigned int )ALGO->btopo == 403U) {
            __CrestBranch(3015, 1469, 1);
            __CrestLoad(3017, (unsigned long )0, (long long )((char )'2'));
            __CrestStore(3018, (unsigned long )(& ctop));
# 235 "../HPL_pdtest.c"
            ctop = (char )'2';
          } else {
            __CrestBranch(3016, 1470, 0);
            {
            __CrestLoad(3021, (unsigned long )(& ALGO->btopo), (long long )ALGO->btopo);
            __CrestLoad(3020, (unsigned long )0, (long long )404U);
            __CrestApply2(3019, 12, (long long )((unsigned int )ALGO->btopo == 404U));
# 236 "../HPL_pdtest.c"
            if ((unsigned int )ALGO->btopo == 404U) {
              __CrestBranch(3022, 1471, 1);
              __CrestLoad(3024, (unsigned long )0, (long long )((char )'3'));
              __CrestStore(3025, (unsigned long )(& ctop));
# 236 "../HPL_pdtest.c"
              ctop = (char )'3';
            } else {
              __CrestBranch(3023, 1472, 0);
              {
              __CrestLoad(3028, (unsigned long )(& ALGO->btopo), (long long )ALGO->btopo);
              __CrestLoad(3027, (unsigned long )0, (long long )405U);
              __CrestApply2(3026, 12, (long long )((unsigned int )ALGO->btopo == 405U));
# 237 "../HPL_pdtest.c"
              if ((unsigned int )ALGO->btopo == 405U) {
                __CrestBranch(3029, 1473, 1);
                __CrestLoad(3031, (unsigned long )0, (long long )((char )'4'));
                __CrestStore(3032, (unsigned long )(& ctop));
# 237 "../HPL_pdtest.c"
                ctop = (char )'4';
              } else {
                __CrestBranch(3030, 1474, 0);
                __CrestLoad(3033, (unsigned long )0, (long long )((char )'5'));
                __CrestStore(3034, (unsigned long )(& ctop));
# 238 "../HPL_pdtest.c"
                ctop = (char )'5';
              }
              }
            }
            }
          }
          }
        }
        }
      }
      }
      {
      __CrestLoad(3037, (unsigned long )(& wtime[0]), (long long )wtime[0]);
      __CrestLoad(3036, (unsigned long )0, (long long )0.0);
      __CrestApply2(3035, 14, (long long )(wtime[0] > 0.0));
# 240 "../HPL_pdtest.c"
      if (wtime[0] > 0.0) {
        __CrestBranch(3038, 1476, 1);
        {
        __CrestLoad(3042, (unsigned long )(& GRID->order), (long long )GRID->order);
        __CrestLoad(3041, (unsigned long )0, (long long )201U);
        __CrestApply2(3040, 12, (long long )((unsigned int )GRID->order == 201U));
# 241 "../HPL_pdtest.c"
        if ((unsigned int )GRID->order == 201U) {
          __CrestBranch(3043, 1477, 1);
          __CrestLoad(3045, (unsigned long )0, (long long )'R');
          __CrestStore(3046, (unsigned long )(& tmp___3));
# 241 "../HPL_pdtest.c"
          tmp___3 = 'R';
        } else {
          __CrestBranch(3044, 1478, 0);
          __CrestLoad(3047, (unsigned long )0, (long long )'C');
          __CrestStore(3048, (unsigned long )(& tmp___3));
# 241 "../HPL_pdtest.c"
          tmp___3 = 'C';
        }
        }
        __CrestLoad(3049, (unsigned long )(& tmp___3), (long long )tmp___3);
        __CrestLoad(3050, (unsigned long )(& ALGO->depth), (long long )ALGO->depth);
        __CrestLoad(3051, (unsigned long )(& ctop), (long long )ctop);
        __CrestLoad(3052, (unsigned long )(& crfact), (long long )crfact);
        __CrestLoad(3053, (unsigned long )(& ALGO->nbdiv), (long long )ALGO->nbdiv);
        __CrestLoad(3054, (unsigned long )(& cpfact), (long long )cpfact);
        __CrestLoad(3055, (unsigned long )(& ALGO->nbmin), (long long )ALGO->nbmin);
        __CrestLoad(3056, (unsigned long )(& N), (long long )N);
        __CrestLoad(3057, (unsigned long )(& NB), (long long )NB);
        __CrestLoad(3058, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(3059, (unsigned long )(& npcol), (long long )npcol);
# 241 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "W%c%1d%c%c%1d%c%1d%12d %5d %5d %5d %18.2f %18.3e\n",
                    tmp___3, ALGO->depth, (int )ctop, (int )crfact, ALGO->nbdiv, (int )cpfact,
                    ALGO->nbmin, N, NB, nprow, npcol, wtime[0], Gflops);
        __CrestClearStack(3060);
      } else {
        __CrestBranch(3039, 1480, 0);

      }
      }
    } else {
      __CrestBranch(2946, 1481, 0);

    }
    }
  } else {
    __CrestBranch(2941, 1482, 0);

  }
  }
  {
  __CrestLoad(3063, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
  __CrestLoad(3062, (unsigned long )0, (long long )0.0);
  __CrestApply2(3061, 15, (long long )(TEST->thrsh <= 0.0));
# 307 "../HPL_pdtest.c"
  if (TEST->thrsh <= 0.0) {
    __CrestBranch(3064, 1484, 1);
    __CrestLoad(3068, (unsigned long )(& TEST->kpass), (long long )TEST->kpass);
    __CrestLoad(3067, (unsigned long )0, (long long )1);
    __CrestApply2(3066, 0, (long long )(TEST->kpass + 1));
    __CrestStore(3069, (unsigned long )(& TEST->kpass));
# 308 "../HPL_pdtest.c"
    (TEST->kpass) ++;
    {
    __CrestLoad(3072, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
    __CrestLoad(3071, (unsigned long )0, (long long )0);
    __CrestApply2(3070, 13, (long long )(vptr != 0));
# 308 "../HPL_pdtest.c"
    if (vptr != 0) {
      __CrestBranch(3073, 1486, 1);
# 308 "../HPL_pdtest.c"
      free(vptr);
      __CrestClearStack(3075);
    } else {
      __CrestBranch(3074, 1487, 0);

    }
    }
# 308 "../HPL_pdtest.c"
    goto return_label;
  } else {
    __CrestBranch(3065, 1490, 0);

  }
  }
  {
  __CrestLoad(3078, (unsigned long )(& mat.info), (long long )mat.info);
  __CrestLoad(3077, (unsigned long )0, (long long )0);
  __CrestApply2(3076, 13, (long long )(mat.info != 0));
# 312 "../HPL_pdtest.c"
  if (mat.info != 0) {
    __CrestBranch(3079, 1492, 1);
    {
    __CrestLoad(3083, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(3082, (unsigned long )0, (long long )0);
    __CrestApply2(3081, 12, (long long )(myrow == 0));
# 314 "../HPL_pdtest.c"
    if (myrow == 0) {
      __CrestBranch(3084, 1493, 1);
      {
      __CrestLoad(3088, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(3087, (unsigned long )0, (long long )0);
      __CrestApply2(3086, 12, (long long )(mycol == 0));
# 314 "../HPL_pdtest.c"
      if (mycol == 0) {
        __CrestBranch(3089, 1494, 1);
        __CrestLoad(3091, (unsigned long )0, (long long )315);
        __CrestLoad(3092, (unsigned long )(& mat.info), (long long )mat.info);
# 315 "../HPL_pdtest.c"
        HPL_pwarn(TEST->outfp, 315, "HPL_pdtest", "%s %d, %s", "Error code returned by solve is",
                  mat.info, "skip");
        __CrestClearStack(3093);
      } else {
        __CrestBranch(3090, 1495, 0);

      }
      }
    } else {
      __CrestBranch(3085, 1496, 0);

    }
    }
    __CrestLoad(3096, (unsigned long )(& TEST->kskip), (long long )TEST->kskip);
    __CrestLoad(3095, (unsigned long )0, (long long )1);
    __CrestApply2(3094, 0, (long long )(TEST->kskip + 1));
    __CrestStore(3097, (unsigned long )(& TEST->kskip));
# 317 "../HPL_pdtest.c"
    (TEST->kskip) ++;
    {
    __CrestLoad(3100, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
    __CrestLoad(3099, (unsigned long )0, (long long )0);
    __CrestApply2(3098, 13, (long long )(vptr != 0));
# 318 "../HPL_pdtest.c"
    if (vptr != 0) {
      __CrestBranch(3101, 1499, 1);
# 318 "../HPL_pdtest.c"
      free(vptr);
      __CrestClearStack(3103);
    } else {
      __CrestBranch(3102, 1500, 0);

    }
    }
# 318 "../HPL_pdtest.c"
    goto return_label;
  } else {
    __CrestBranch(3080, 1503, 0);

  }
  }
  __CrestLoad(3104, (unsigned long )(& N), (long long )N);
  __CrestLoad(3107, (unsigned long )(& N), (long long )N);
  __CrestLoad(3106, (unsigned long )0, (long long )1);
  __CrestApply2(3105, 0, (long long )(N + 1));
  __CrestLoad(3108, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3109, (unsigned long )(& mat.ld), (long long )mat.ld);
  __CrestLoad(3110, (unsigned long )0, (long long )((int const )100));
# 324 "../HPL_pdtest.c"
  HPL_pdmatgen((HPL_T_grid const *)GRID, N, N + 1, NB, mat.A, (int const )mat.ld,
               (int const )100);
  __CrestClearStack(3111);
  __CrestLoad(3112, (unsigned long )0, (long long )((HPL_T_NORM const )801));
  __CrestLoad(3113, (unsigned long )(& N), (long long )N);
  __CrestLoad(3114, (unsigned long )(& N), (long long )N);
  __CrestLoad(3115, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3116, (unsigned long )(& mat.ld), (long long )mat.ld);
# 325 "../HPL_pdtest.c"
  Anorm1 = HPL_pdlange((HPL_T_grid const *)GRID, (HPL_T_NORM const )801, N, N,
                       NB, (double const *)mat.A, (int const )mat.ld);
  __CrestClearStack(3117);
  __CrestLoad(3118, (unsigned long )0, (long long )((HPL_T_NORM const )802));
  __CrestLoad(3119, (unsigned long )(& N), (long long )N);
  __CrestLoad(3120, (unsigned long )(& N), (long long )N);
  __CrestLoad(3121, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3122, (unsigned long )(& mat.ld), (long long )mat.ld);
# 326 "../HPL_pdtest.c"
  AnormI = HPL_pdlange((HPL_T_grid const *)GRID, (HPL_T_NORM const )802, N, N,
                       NB, (double const *)mat.A, (int const )mat.ld);
  __CrestClearStack(3123);
  __CrestLoad(3124, (unsigned long )0, (long long )((HPL_T_NORM const )801));
  __CrestLoad(3125, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(3126, (unsigned long )(& N), (long long )N);
  __CrestLoad(3127, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3128, (unsigned long )0, (long long )((int const )1));
# 330 "../HPL_pdtest.c"
  XnormI = HPL_pdlange((HPL_T_grid const *)GRID, (HPL_T_NORM const )801, (int const )1,
                       N, NB, (double const *)mat.X, (int const )1);
  __CrestClearStack(3129);
  __CrestLoad(3130, (unsigned long )0, (long long )((HPL_T_NORM const )802));
  __CrestLoad(3131, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(3132, (unsigned long )(& N), (long long )N);
  __CrestLoad(3133, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3134, (unsigned long )0, (long long )((int const )1));
# 331 "../HPL_pdtest.c"
  Xnorm1 = HPL_pdlange((HPL_T_grid const *)GRID, (HPL_T_NORM const )802, (int const )1,
                       N, NB, (double const *)mat.X, (int const )1);
  __CrestClearStack(3135);
# 335 "../HPL_pdtest.c"
  Bptr = mat.A + mat.ld * nq;
  __CrestLoad(3136, (unsigned long )(& N), (long long )N);
  __CrestLoad(3137, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3138, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3139, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(3140, (unsigned long )(& npcol), (long long )npcol);
# 337 "../HPL_pdtest.c"
  tmp___4 = HPL_indxg2p(N, NB, NB, (int const )0, (int const )npcol);
  __CrestHandleReturn(3142, (long long )tmp___4);
  __CrestStore(3141, (unsigned long )(& tmp___4));
  {
  __CrestLoad(3145, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(3144, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestApply2(3143, 12, (long long )(mycol == tmp___4));
# 337 "../HPL_pdtest.c"
  if (mycol == tmp___4) {
    __CrestBranch(3146, 1506, 1);
    __CrestLoad(3148, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(3149, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(3150, (unsigned long )(& mat.mp), (long long )mat.mp);
    __CrestLoad(3151, (unsigned long )(& nq), (long long )nq);
    __CrestLoad(3152, (unsigned long )(& mat.ld), (long long )mat.ld);
    __CrestLoad(3153, (unsigned long )0, (long long )((int const )1));
    __CrestLoad(3154, (unsigned long )0, (long long )((int const )1));
# 339 "../HPL_pdtest.c"
    cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )mat.mp,
                (int const )nq, (double const )(- 1.0), (double const *)mat.A,
                (int const )mat.ld, (double const *)mat.X, (int const )1, (double const )1.0,
                Bptr, (int const )1);
    __CrestClearStack(3155);
  } else {
    __CrestBranch(3147, 1507, 0);
    {
    __CrestLoad(3158, (unsigned long )(& nq), (long long )nq);
    __CrestLoad(3157, (unsigned long )0, (long long )0);
    __CrestApply2(3156, 14, (long long )(nq > 0));
# 342 "../HPL_pdtest.c"
    if (nq > 0) {
      __CrestBranch(3159, 1508, 1);
      __CrestLoad(3161, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(3162, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(3163, (unsigned long )(& mat.mp), (long long )mat.mp);
      __CrestLoad(3164, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(3165, (unsigned long )(& mat.ld), (long long )mat.ld);
      __CrestLoad(3166, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(3167, (unsigned long )0, (long long )((int const )1));
# 344 "../HPL_pdtest.c"
      cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )mat.mp,
                  (int const )nq, (double const )(- 1.0), (double const *)mat.A,
                  (int const )mat.ld, (double const *)mat.X, (int const )1,
                  (double const )0.0, Bptr, (int const )1);
      __CrestClearStack(3168);
    } else {
      __CrestBranch(3160, 1509, 0);
      __CrestLoad(3169, (unsigned long )0, (long long )0);
      __CrestStore(3170, (unsigned long )(& ii));
# 347 "../HPL_pdtest.c"
      ii = 0;
      {
# 347 "../HPL_pdtest.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(3173, (unsigned long )(& ii), (long long )ii);
        __CrestLoad(3172, (unsigned long )(& mat.mp), (long long )mat.mp);
        __CrestApply2(3171, 16, (long long )(ii < mat.mp));
# 347 "../HPL_pdtest.c"
        if (ii < mat.mp) {
          __CrestBranch(3174, 1514, 1);

        } else {
          __CrestBranch(3175, 1515, 0);
# 347 "../HPL_pdtest.c"
          goto while_break___1;
        }
        }
# 347 "../HPL_pdtest.c"
        mem_40 = Bptr + ii;
# 347 "../HPL_pdtest.c"
        *mem_40 = 0.0;
        __CrestLoad(3178, (unsigned long )(& ii), (long long )ii);
        __CrestLoad(3177, (unsigned long )0, (long long )1);
        __CrestApply2(3176, 0, (long long )(ii + 1));
        __CrestStore(3179, (unsigned long )(& ii));
# 347 "../HPL_pdtest.c"
        ii ++;
      }
      while_break___1: ;
      }
    }
    }
  }
  }
  {
  __CrestLoad(3182, (unsigned long )(& mat.mp), (long long )mat.mp);
  __CrestLoad(3181, (unsigned long )0, (long long )0);
  __CrestApply2(3180, 14, (long long )(mat.mp > 0));
# 351 "../HPL_pdtest.c"
  if (mat.mp > 0) {
    __CrestBranch(3183, 1519, 1);
    __CrestLoad(3185, (unsigned long )(& mat.mp), (long long )mat.mp);
    __CrestLoad(3186, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
    __CrestLoad(3187, (unsigned long )0, (long long )((int const )0));
    __CrestLoad(3188, (unsigned long )(& GRID->row_comm), (long long )GRID->row_comm);
# 352 "../HPL_pdtest.c"
    HPL_reduce((void *)Bptr, (int const )mat.mp, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                               void const * ,
                                                                                               void * ,
                                                                                               HPL_T_TYPE const ))(& HPL_sum),
               (int const )0, GRID->row_comm);
    __CrestClearStack(3189);
  } else {
    __CrestBranch(3184, 1520, 0);

  }
  }
  __CrestLoad(3190, (unsigned long )0, (long long )((HPL_T_NORM const )802));
  __CrestLoad(3191, (unsigned long )(& N), (long long )N);
  __CrestLoad(3192, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(3193, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(3194, (unsigned long )(& mat.ld), (long long )mat.ld);
# 357 "../HPL_pdtest.c"
  resid0 = HPL_pdlange((HPL_T_grid const *)GRID, (HPL_T_NORM const )802, N, (int const )1,
                       NB, (double const *)Bptr, (int const )mat.ld);
  __CrestClearStack(3195);
  {
  __CrestLoad(3198, (unsigned long )(& Anorm1), (long long )Anorm1);
  __CrestLoad(3197, (unsigned long )0, (long long )0.0);
  __CrestApply2(3196, 12, (long long )(Anorm1 == 0.0));
# 361 "../HPL_pdtest.c"
  if (Anorm1 == 0.0) {
    __CrestBranch(3199, 1523, 1);
# 364 "../HPL_pdtest.c"
    resid3 = 0.0;
# 364 "../HPL_pdtest.c"
    resid2 = resid3;
# 364 "../HPL_pdtest.c"
    resid1 = resid2;
  } else {
    __CrestBranch(3200, 1524, 0);
    {
    __CrestLoad(3203, (unsigned long )(& AnormI), (long long )AnormI);
    __CrestLoad(3202, (unsigned long )0, (long long )0.0);
    __CrestApply2(3201, 12, (long long )(AnormI == 0.0));
# 361 "../HPL_pdtest.c"
    if (AnormI == 0.0) {
      __CrestBranch(3204, 1525, 1);
# 364 "../HPL_pdtest.c"
      resid3 = 0.0;
# 364 "../HPL_pdtest.c"
      resid2 = resid3;
# 364 "../HPL_pdtest.c"
      resid1 = resid2;
    } else {
      __CrestBranch(3205, 1526, 0);
      {
      __CrestLoad(3208, (unsigned long )(& Xnorm1), (long long )Xnorm1);
      __CrestLoad(3207, (unsigned long )0, (long long )0.0);
      __CrestApply2(3206, 12, (long long )(Xnorm1 == 0.0));
# 361 "../HPL_pdtest.c"
      if (Xnorm1 == 0.0) {
        __CrestBranch(3209, 1527, 1);
# 364 "../HPL_pdtest.c"
        resid3 = 0.0;
# 364 "../HPL_pdtest.c"
        resid2 = resid3;
# 364 "../HPL_pdtest.c"
        resid1 = resid2;
      } else {
        __CrestBranch(3210, 1528, 0);
        {
        __CrestLoad(3213, (unsigned long )(& Xnorm1), (long long )Xnorm1);
        __CrestLoad(3212, (unsigned long )0, (long long )0.0);
        __CrestApply2(3211, 12, (long long )(Xnorm1 == 0.0));
# 361 "../HPL_pdtest.c"
        if (Xnorm1 == 0.0) {
          __CrestBranch(3214, 1529, 1);
# 364 "../HPL_pdtest.c"
          resid3 = 0.0;
# 364 "../HPL_pdtest.c"
          resid2 = resid3;
# 364 "../HPL_pdtest.c"
          resid1 = resid2;
        } else {
          __CrestBranch(3215, 1530, 0);
          {
          __CrestLoad(3218, (unsigned long )(& N), (long long )N);
          __CrestLoad(3217, (unsigned long )0, (long long )0);
          __CrestApply2(3216, 15, (long long )(N <= 0));
# 361 "../HPL_pdtest.c"
          if (N <= 0) {
            __CrestBranch(3219, 1531, 1);
# 364 "../HPL_pdtest.c"
            resid3 = 0.0;
# 364 "../HPL_pdtest.c"
            resid2 = resid3;
# 364 "../HPL_pdtest.c"
            resid1 = resid2;
          } else {
            __CrestBranch(3220, 1532, 0);
# 368 "../HPL_pdtest.c"
            resid1 = resid0 / ((TEST->epsil * Anorm1) * (double )N);
# 369 "../HPL_pdtest.c"
            resid2 = resid0 / ((TEST->epsil * Anorm1) * Xnorm1);
# 370 "../HPL_pdtest.c"
            resid3 = resid0 / (((TEST->epsil * AnormI) * XnormI) * (double )N);
          }
          }
        }
        }
      }
      }
    }
    }
  }
  }
  {
  __CrestLoad(3223, (unsigned long )(& resid1), (long long )resid1);
  __CrestLoad(3222, (unsigned long )(& resid2), (long long )resid2);
  __CrestApply2(3221, 14, (long long )(resid1 > resid2));
# 373 "../HPL_pdtest.c"
  if (resid1 > resid2) {
    __CrestBranch(3224, 1534, 1);
# 373 "../HPL_pdtest.c"
    tmp___5 = resid1;
  } else {
    __CrestBranch(3225, 1535, 0);
# 373 "../HPL_pdtest.c"
    tmp___5 = resid2;
  }
  }
  {
  __CrestLoad(3228, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestLoad(3227, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
  __CrestApply2(3226, 16, (long long )(tmp___5 < TEST->thrsh));
# 373 "../HPL_pdtest.c"
  if (tmp___5 < TEST->thrsh) {
    __CrestBranch(3229, 1537, 1);
    {
    __CrestLoad(3233, (unsigned long )(& resid3), (long long )resid3);
    __CrestLoad(3232, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
    __CrestApply2(3231, 16, (long long )(resid3 < TEST->thrsh));
# 373 "../HPL_pdtest.c"
    if (resid3 < TEST->thrsh) {
      __CrestBranch(3234, 1538, 1);
      __CrestLoad(3238, (unsigned long )(& TEST->kpass), (long long )TEST->kpass);
      __CrestLoad(3237, (unsigned long )0, (long long )1);
      __CrestApply2(3236, 0, (long long )(TEST->kpass + 1));
      __CrestStore(3239, (unsigned long )(& TEST->kpass));
# 374 "../HPL_pdtest.c"
      (TEST->kpass) ++;
    } else {
      __CrestBranch(3235, 1539, 0);
      __CrestLoad(3242, (unsigned long )(& TEST->kfail), (long long )TEST->kfail);
      __CrestLoad(3241, (unsigned long )0, (long long )1);
      __CrestApply2(3240, 0, (long long )(TEST->kfail + 1));
      __CrestStore(3243, (unsigned long )(& TEST->kfail));
# 375 "../HPL_pdtest.c"
      (TEST->kfail) ++;
    }
    }
  } else {
    __CrestBranch(3230, 1540, 0);
    __CrestLoad(3246, (unsigned long )(& TEST->kfail), (long long )TEST->kfail);
    __CrestLoad(3245, (unsigned long )0, (long long )1);
    __CrestApply2(3244, 0, (long long )(TEST->kfail + 1));
    __CrestStore(3247, (unsigned long )(& TEST->kfail));
# 375 "../HPL_pdtest.c"
    (TEST->kfail) ++;
  }
  }
  {
  __CrestLoad(3250, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(3249, (unsigned long )0, (long long )0);
  __CrestApply2(3248, 12, (long long )(myrow == 0));
# 377 "../HPL_pdtest.c"
  if (myrow == 0) {
    __CrestBranch(3251, 1542, 1);
    {
    __CrestLoad(3255, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(3254, (unsigned long )0, (long long )0);
    __CrestApply2(3253, 12, (long long )(mycol == 0));
# 377 "../HPL_pdtest.c"
    if (mycol == 0) {
      __CrestBranch(3256, 1543, 1);
# 379 "../HPL_pdtest.c"
      HPL_fprintf(TEST->outfp, "%s%s\n", "--------------------------------------",
                  "--------------------------------------");
      __CrestClearStack(3258);
      {
      __CrestLoad(3261, (unsigned long )(& resid1), (long long )resid1);
      __CrestLoad(3260, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
      __CrestApply2(3259, 16, (long long )(resid1 < TEST->thrsh));
# 382 "../HPL_pdtest.c"
      if (resid1 < TEST->thrsh) {
        __CrestBranch(3262, 1545, 1);
# 382 "../HPL_pdtest.c"
        tmp___6 = "PASSED";
      } else {
        __CrestBranch(3263, 1546, 0);
# 382 "../HPL_pdtest.c"
        tmp___6 = "FAILED";
      }
      }
# 382 "../HPL_pdtest.c"
      HPL_fprintf(TEST->outfp, "%s%16.7f%s%s\n", "||Ax-b||_oo / ( eps * ||A||_1  * N        ) = ",
                  resid1, " ...... ", tmp___6);
      __CrestClearStack(3264);
      {
      __CrestLoad(3267, (unsigned long )(& resid2), (long long )resid2);
      __CrestLoad(3266, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
      __CrestApply2(3265, 16, (long long )(resid2 < TEST->thrsh));
# 385 "../HPL_pdtest.c"
      if (resid2 < TEST->thrsh) {
        __CrestBranch(3268, 1549, 1);
# 385 "../HPL_pdtest.c"
        tmp___7 = "PASSED";
      } else {
        __CrestBranch(3269, 1550, 0);
# 385 "../HPL_pdtest.c"
        tmp___7 = "FAILED";
      }
      }
# 385 "../HPL_pdtest.c"
      HPL_fprintf(TEST->outfp, "%s%16.7f%s%s\n", "||Ax-b||_oo / ( eps * ||A||_1  * ||x||_1  ) = ",
                  resid2, " ...... ", tmp___7);
      __CrestClearStack(3270);
      {
      __CrestLoad(3273, (unsigned long )(& resid3), (long long )resid3);
      __CrestLoad(3272, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
      __CrestApply2(3271, 16, (long long )(resid3 < TEST->thrsh));
# 388 "../HPL_pdtest.c"
      if (resid3 < TEST->thrsh) {
        __CrestBranch(3274, 1553, 1);
# 388 "../HPL_pdtest.c"
        tmp___8 = "PASSED";
      } else {
        __CrestBranch(3275, 1554, 0);
# 388 "../HPL_pdtest.c"
        tmp___8 = "FAILED";
      }
      }
# 388 "../HPL_pdtest.c"
      HPL_fprintf(TEST->outfp, "%s%16.7f%s%s\n", "||Ax-b||_oo / ( eps * ||A||_oo * ||x||_oo ) = ",
                  resid3, " ...... ", tmp___8);
      __CrestClearStack(3276);
      {
      __CrestLoad(3279, (unsigned long )(& resid1), (long long )resid1);
      __CrestLoad(3278, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
      __CrestApply2(3277, 17, (long long )(resid1 >= TEST->thrsh));
# 392 "../HPL_pdtest.c"
      if (resid1 >= TEST->thrsh) {
        __CrestBranch(3280, 1557, 1);
# 395 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||Ax-b||_oo  . . . . . . . . . . . . . . . . . = ",
                    resid0);
        __CrestClearStack(3282);
# 397 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_oo . . . . . . . . . . . . . . . . . . . = ",
                    AnormI);
        __CrestClearStack(3283);
# 399 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_1  . . . . . . . . . . . . . . . . . . . = ",
                    Anorm1);
        __CrestClearStack(3284);
# 401 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_oo . . . . . . . . . . . . . . . . . . . = ",
                    XnormI);
        __CrestClearStack(3285);
# 403 "../HPL_pdtest.c"
        HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_1  . . . . . . . . . . . . . . . . . . . = ",
                    Xnorm1);
        __CrestClearStack(3286);
      } else {
        __CrestBranch(3281, 1558, 0);
        {
        __CrestLoad(3289, (unsigned long )(& resid2), (long long )resid2);
        __CrestLoad(3288, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
        __CrestApply2(3287, 17, (long long )(resid2 >= TEST->thrsh));
# 392 "../HPL_pdtest.c"
        if (resid2 >= TEST->thrsh) {
          __CrestBranch(3290, 1559, 1);
# 395 "../HPL_pdtest.c"
          HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||Ax-b||_oo  . . . . . . . . . . . . . . . . . = ",
                      resid0);
          __CrestClearStack(3292);
# 397 "../HPL_pdtest.c"
          HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_oo . . . . . . . . . . . . . . . . . . . = ",
                      AnormI);
          __CrestClearStack(3293);
# 399 "../HPL_pdtest.c"
          HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_1  . . . . . . . . . . . . . . . . . . . = ",
                      Anorm1);
          __CrestClearStack(3294);
# 401 "../HPL_pdtest.c"
          HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_oo . . . . . . . . . . . . . . . . . . . = ",
                      XnormI);
          __CrestClearStack(3295);
# 403 "../HPL_pdtest.c"
          HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_1  . . . . . . . . . . . . . . . . . . . = ",
                      Xnorm1);
          __CrestClearStack(3296);
        } else {
          __CrestBranch(3291, 1560, 0);
          {
          __CrestLoad(3299, (unsigned long )(& resid3), (long long )resid3);
          __CrestLoad(3298, (unsigned long )(& TEST->thrsh), (long long )TEST->thrsh);
          __CrestApply2(3297, 17, (long long )(resid3 >= TEST->thrsh));
# 392 "../HPL_pdtest.c"
          if (resid3 >= TEST->thrsh) {
            __CrestBranch(3300, 1561, 1);
# 395 "../HPL_pdtest.c"
            HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||Ax-b||_oo  . . . . . . . . . . . . . . . . . = ",
                        resid0);
            __CrestClearStack(3302);
# 397 "../HPL_pdtest.c"
            HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_oo . . . . . . . . . . . . . . . . . . . = ",
                        AnormI);
            __CrestClearStack(3303);
# 399 "../HPL_pdtest.c"
            HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||A||_1  . . . . . . . . . . . . . . . . . . . = ",
                        Anorm1);
            __CrestClearStack(3304);
# 401 "../HPL_pdtest.c"
            HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_oo . . . . . . . . . . . . . . . . . . . = ",
                        XnormI);
            __CrestClearStack(3305);
# 403 "../HPL_pdtest.c"
            HPL_fprintf(TEST->outfp, "%s%18.6f\n", "||x||_1  . . . . . . . . . . . . . . . . . . . = ",
                        Xnorm1);
            __CrestClearStack(3306);
          } else {
            __CrestBranch(3301, 1562, 0);

          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(3257, 1563, 0);

    }
    }
  } else {
    __CrestBranch(3252, 1564, 0);

  }
  }
  {
  __CrestLoad(3309, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(3308, (unsigned long )0, (long long )0);
  __CrestApply2(3307, 13, (long long )(vptr != 0));
# 407 "../HPL_pdtest.c"
  if (vptr != 0) {
    __CrestBranch(3310, 1566, 1);
# 407 "../HPL_pdtest.c"
    free(vptr);
    __CrestClearStack(3312);
  } else {
    __CrestBranch(3311, 1567, 0);

  }
  }

  return_label:
  {
  __CrestReturn(3313);
# 53 "../HPL_pdtest.c"
  return;
  }
}
}
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 103 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlacpy(int const M , int const N , double const *A , int const LDA ,
                double *B , int const LDB ) ;
# 72 "../HPL_dlacpy.c"
void HPL_dlacpy(int const M , int const N , double const *A , int const LDA ,
                double *B , int const LDB )
{
  double const *A0 ;
  double const *A1 ;
  double *B0 ;
  double *B1 ;
  int incA ;
  int incB ;
  int incA0 ;
  int incB0 ;
  int mu ;
  int nu ;
  int i ;
  int j ;
  double *mem_19 ;
  double const *mem_20 ;
  double *mem_21 ;
  double const *mem_22 ;
  double *mem_23 ;
  double const *mem_24 ;
  double *mem_25 ;
  double const *mem_26 ;
  double *mem_27 ;
  double const *mem_28 ;
  double *mem_29 ;
  double const *mem_30 ;
  double *mem_31 ;
  double const *mem_32 ;
  double *mem_33 ;
  double const *mem_34 ;
  double *mem_35 ;
  double const *mem_36 ;
  double *mem_37 ;
  double const *mem_38 ;
  double *mem_39 ;
  double const *mem_40 ;
  double *mem_41 ;
  double const *mem_42 ;

  {
  __CrestCall(3318, 4);
  __CrestStore(3317, (unsigned long )(& LDB));
  __CrestStore(3316, (unsigned long )(& LDA));
  __CrestStore(3315, (unsigned long )(& N));
  __CrestStore(3314, (unsigned long )(& M));
# 137 "../HPL_dlacpy.c"
  A0 = A;
# 137 "../HPL_dlacpy.c"
  A1 = A + LDA;
# 138 "../HPL_dlacpy.c"
  B0 = B;
# 138 "../HPL_dlacpy.c"
  B1 = B + LDB;
  __CrestLoad(3323, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(3322, (unsigned long )0, (long long )1);
  __CrestApply2(3321, 8, (long long )((unsigned int )LDA << 1));
  __CrestLoad(3320, (unsigned long )(& M), (long long )M);
  __CrestApply2(3319, 1, (long long )(((unsigned int )LDA << 1) - (unsigned int )M));
  __CrestStore(3324, (unsigned long )(& incA));
# 145 "../HPL_dlacpy.c"
  incA = (int )(((unsigned int )LDA << 1) - (unsigned int )M);
  __CrestLoad(3329, (unsigned long )(& LDB), (long long )LDB);
  __CrestLoad(3328, (unsigned long )0, (long long )1);
  __CrestApply2(3327, 8, (long long )((unsigned int )LDB << 1));
  __CrestLoad(3326, (unsigned long )(& M), (long long )M);
  __CrestApply2(3325, 1, (long long )(((unsigned int )LDB << 1) - (unsigned int )M));
  __CrestStore(3330, (unsigned long )(& incB));
# 145 "../HPL_dlacpy.c"
  incB = (int )(((unsigned int )LDB << 1) - (unsigned int )M);
  __CrestLoad(3333, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(3332, (unsigned long )(& M), (long long )M);
  __CrestApply2(3331, 1, (long long )((unsigned int )LDA - (unsigned int )M));
  __CrestStore(3334, (unsigned long )(& incA0));
# 145 "../HPL_dlacpy.c"
  incA0 = (int )((unsigned int )LDA - (unsigned int )M);
  __CrestLoad(3337, (unsigned long )(& LDB), (long long )LDB);
  __CrestLoad(3336, (unsigned long )(& M), (long long )M);
  __CrestApply2(3335, 1, (long long )((unsigned int )LDB - (unsigned int )M));
  __CrestStore(3338, (unsigned long )(& incB0));
# 145 "../HPL_dlacpy.c"
  incB0 = (int )((unsigned int )LDB - (unsigned int )M);
  {
  __CrestLoad(3341, (unsigned long )(& M), (long long )M);
  __CrestLoad(3340, (unsigned long )0, (long long )0);
  __CrestApply2(3339, 15, (long long )(M <= 0));
# 157 "../HPL_dlacpy.c"
  if (M <= 0) {
    __CrestBranch(3342, 1572, 1);
# 157 "../HPL_dlacpy.c"
    goto return_label;
  } else {
    __CrestBranch(3343, 1574, 0);
    {
    __CrestLoad(3346, (unsigned long )(& N), (long long )N);
    __CrestLoad(3345, (unsigned long )0, (long long )0);
    __CrestApply2(3344, 15, (long long )(N <= 0));
# 157 "../HPL_dlacpy.c"
    if (N <= 0) {
      __CrestBranch(3347, 1575, 1);
# 157 "../HPL_dlacpy.c"
      goto return_label;
    } else {
      __CrestBranch(3348, 1577, 0);

    }
    }
  }
  }
  __CrestLoad(3353, (unsigned long )(& M), (long long )M);
  __CrestLoad(3352, (unsigned long )0, (long long )2);
  __CrestApply2(3351, 9, (long long )((unsigned int )M >> 2));
  __CrestLoad(3350, (unsigned long )0, (long long )2);
  __CrestApply2(3349, 8, (long long )(((unsigned int )M >> 2) << 2));
  __CrestStore(3354, (unsigned long )(& mu));
# 162 "../HPL_dlacpy.c"
  mu = (int )(((unsigned int )M >> 2) << 2);
  __CrestLoad(3359, (unsigned long )(& N), (long long )N);
  __CrestLoad(3358, (unsigned long )0, (long long )1);
  __CrestApply2(3357, 9, (long long )((unsigned int )N >> 1));
  __CrestLoad(3356, (unsigned long )0, (long long )1);
  __CrestApply2(3355, 8, (long long )(((unsigned int )N >> 1) << 1));
  __CrestStore(3360, (unsigned long )(& nu));
# 164 "../HPL_dlacpy.c"
  nu = (int )(((unsigned int )N >> 1) << 1);
  __CrestLoad(3361, (unsigned long )0, (long long )0);
  __CrestStore(3362, (unsigned long )(& j));
# 167 "../HPL_dlacpy.c"
  j = 0;
  {
# 167 "../HPL_dlacpy.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(3365, (unsigned long )(& j), (long long )j);
    __CrestLoad(3364, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(3363, 16, (long long )(j < nu));
# 167 "../HPL_dlacpy.c"
    if (j < nu) {
      __CrestBranch(3366, 1583, 1);

    } else {
      __CrestBranch(3367, 1584, 0);
# 167 "../HPL_dlacpy.c"
      goto while_break;
    }
    }
    __CrestLoad(3368, (unsigned long )0, (long long )0);
    __CrestStore(3369, (unsigned long )(& i));
# 169 "../HPL_dlacpy.c"
    i = 0;
    {
# 169 "../HPL_dlacpy.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(3372, (unsigned long )(& i), (long long )i);
      __CrestLoad(3371, (unsigned long )(& mu), (long long )mu);
      __CrestApply2(3370, 16, (long long )(i < mu));
# 169 "../HPL_dlacpy.c"
      if (i < mu) {
        __CrestBranch(3373, 1590, 1);

      } else {
        __CrestBranch(3374, 1591, 0);
# 169 "../HPL_dlacpy.c"
        goto while_break___0;
      }
      }
# 174 "../HPL_dlacpy.c"
      mem_19 = B0 + 0;
# 174 "../HPL_dlacpy.c"
      mem_20 = A0 + 0;
# 174 "../HPL_dlacpy.c"
      *mem_19 = (double )*mem_20;
# 174 "../HPL_dlacpy.c"
      mem_21 = B1 + 0;
# 174 "../HPL_dlacpy.c"
      mem_22 = A1 + 0;
# 174 "../HPL_dlacpy.c"
      *mem_21 = (double )*mem_22;
# 184 "../HPL_dlacpy.c"
      mem_23 = B0 + 1;
# 184 "../HPL_dlacpy.c"
      mem_24 = A0 + 1;
# 184 "../HPL_dlacpy.c"
      *mem_23 = (double )*mem_24;
# 184 "../HPL_dlacpy.c"
      mem_25 = B1 + 1;
# 184 "../HPL_dlacpy.c"
      mem_26 = A1 + 1;
# 184 "../HPL_dlacpy.c"
      *mem_25 = (double )*mem_26;
# 195 "../HPL_dlacpy.c"
      mem_27 = B0 + 2;
# 195 "../HPL_dlacpy.c"
      mem_28 = A0 + 2;
# 195 "../HPL_dlacpy.c"
      *mem_27 = (double )*mem_28;
# 195 "../HPL_dlacpy.c"
      mem_29 = B1 + 2;
# 195 "../HPL_dlacpy.c"
      mem_30 = A1 + 2;
# 195 "../HPL_dlacpy.c"
      *mem_29 = (double )*mem_30;
# 195 "../HPL_dlacpy.c"
      mem_31 = B0 + 3;
# 195 "../HPL_dlacpy.c"
      mem_32 = A0 + 3;
# 195 "../HPL_dlacpy.c"
      *mem_31 = (double )*mem_32;
# 195 "../HPL_dlacpy.c"
      mem_33 = B1 + 3;
# 195 "../HPL_dlacpy.c"
      mem_34 = A1 + 3;
# 195 "../HPL_dlacpy.c"
      *mem_33 = (double )*mem_34;
# 279 "../HPL_dlacpy.c"
      A0 += 4;
# 279 "../HPL_dlacpy.c"
      B0 += 4;
# 280 "../HPL_dlacpy.c"
      A1 += 4;
# 280 "../HPL_dlacpy.c"
      B1 += 4;
      __CrestLoad(3377, (unsigned long )(& i), (long long )i);
      __CrestLoad(3376, (unsigned long )0, (long long )4);
      __CrestApply2(3375, 0, (long long )(i + 4));
      __CrestStore(3378, (unsigned long )(& i));
# 169 "../HPL_dlacpy.c"
      i += 4;
    }
    while_break___0: ;
    }
    __CrestLoad(3379, (unsigned long )(& mu), (long long )mu);
    __CrestStore(3380, (unsigned long )(& i));
# 289 "../HPL_dlacpy.c"
    i = mu;
    {
# 289 "../HPL_dlacpy.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(3383, (unsigned long )(& i), (long long )i);
      __CrestLoad(3382, (unsigned long )(& M), (long long )M);
      __CrestApply2(3381, 16, (long long )(i < (int )M));
# 289 "../HPL_dlacpy.c"
      if (i < (int )M) {
        __CrestBranch(3384, 1599, 1);

      } else {
        __CrestBranch(3385, 1600, 0);
# 289 "../HPL_dlacpy.c"
        goto while_break___1;
      }
      }
# 294 "../HPL_dlacpy.c"
      *B0 = (double )*A0;
# 294 "../HPL_dlacpy.c"
      B0 ++;
# 294 "../HPL_dlacpy.c"
      A0 ++;
# 294 "../HPL_dlacpy.c"
      *B1 = (double )*A1;
# 294 "../HPL_dlacpy.c"
      B1 ++;
# 294 "../HPL_dlacpy.c"
      A1 ++;
      __CrestLoad(3388, (unsigned long )(& i), (long long )i);
      __CrestLoad(3387, (unsigned long )0, (long long )1);
      __CrestApply2(3386, 0, (long long )(i + 1));
      __CrestStore(3389, (unsigned long )(& i));
# 289 "../HPL_dlacpy.c"
      i ++;
    }
    while_break___1: ;
    }
# 304 "../HPL_dlacpy.c"
    A0 += incA;
# 304 "../HPL_dlacpy.c"
    B0 += incB;
# 304 "../HPL_dlacpy.c"
    A1 += incA;
# 304 "../HPL_dlacpy.c"
    B1 += incB;
    __CrestLoad(3392, (unsigned long )(& j), (long long )j);
    __CrestLoad(3391, (unsigned long )0, (long long )2);
    __CrestApply2(3390, 0, (long long )(j + 2));
    __CrestStore(3393, (unsigned long )(& j));
# 167 "../HPL_dlacpy.c"
    j += 2;
  }
  while_break: ;
  }
  __CrestLoad(3394, (unsigned long )(& nu), (long long )nu);
  __CrestStore(3395, (unsigned long )(& j));
# 311 "../HPL_dlacpy.c"
  j = nu;
  {
# 311 "../HPL_dlacpy.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(3398, (unsigned long )(& j), (long long )j);
    __CrestLoad(3397, (unsigned long )(& N), (long long )N);
    __CrestApply2(3396, 16, (long long )(j < (int )N));
# 311 "../HPL_dlacpy.c"
    if (j < (int )N) {
      __CrestBranch(3399, 1610, 1);

    } else {
      __CrestBranch(3400, 1611, 0);
# 311 "../HPL_dlacpy.c"
      goto while_break___2;
    }
    }
    __CrestLoad(3401, (unsigned long )0, (long long )0);
    __CrestStore(3402, (unsigned long )(& i));
# 313 "../HPL_dlacpy.c"
    i = 0;
    {
# 313 "../HPL_dlacpy.c"
    while (1) {
      while_continue___3: ;
      {
      __CrestLoad(3405, (unsigned long )(& i), (long long )i);
      __CrestLoad(3404, (unsigned long )(& mu), (long long )mu);
      __CrestApply2(3403, 16, (long long )(i < mu));
# 313 "../HPL_dlacpy.c"
      if (i < mu) {
        __CrestBranch(3406, 1617, 1);

      } else {
        __CrestBranch(3407, 1618, 0);
# 313 "../HPL_dlacpy.c"
        goto while_break___3;
      }
      }
# 316 "../HPL_dlacpy.c"
      mem_35 = B0 + 0;
# 316 "../HPL_dlacpy.c"
      mem_36 = A0 + 0;
# 316 "../HPL_dlacpy.c"
      *mem_35 = (double )*mem_36;
# 318 "../HPL_dlacpy.c"
      mem_37 = B0 + 1;
# 318 "../HPL_dlacpy.c"
      mem_38 = A0 + 1;
# 318 "../HPL_dlacpy.c"
      *mem_37 = (double )*mem_38;
# 321 "../HPL_dlacpy.c"
      mem_39 = B0 + 2;
# 321 "../HPL_dlacpy.c"
      mem_40 = A0 + 2;
# 321 "../HPL_dlacpy.c"
      *mem_39 = (double )*mem_40;
# 321 "../HPL_dlacpy.c"
      mem_41 = B0 + 3;
# 321 "../HPL_dlacpy.c"
      mem_42 = A0 + 3;
# 321 "../HPL_dlacpy.c"
      *mem_41 = (double )*mem_42;
      __CrestLoad(3410, (unsigned long )(& i), (long long )i);
      __CrestLoad(3409, (unsigned long )0, (long long )4);
      __CrestApply2(3408, 0, (long long )(i + 4));
      __CrestStore(3411, (unsigned long )(& i));
# 313 "../HPL_dlacpy.c"
      i += 4;
# 313 "../HPL_dlacpy.c"
      B0 += 4;
# 313 "../HPL_dlacpy.c"
      A0 += 4;
    }
    while_break___3: ;
    }
    __CrestLoad(3412, (unsigned long )(& mu), (long long )mu);
    __CrestStore(3413, (unsigned long )(& i));
# 337 "../HPL_dlacpy.c"
    i = mu;
    {
# 337 "../HPL_dlacpy.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(3416, (unsigned long )(& i), (long long )i);
      __CrestLoad(3415, (unsigned long )(& M), (long long )M);
      __CrestApply2(3414, 16, (long long )(i < (int )M));
# 337 "../HPL_dlacpy.c"
      if (i < (int )M) {
        __CrestBranch(3417, 1626, 1);

      } else {
        __CrestBranch(3418, 1627, 0);
# 337 "../HPL_dlacpy.c"
        goto while_break___4;
      }
      }
# 337 "../HPL_dlacpy.c"
      *B0 = (double )*A0;
      __CrestLoad(3421, (unsigned long )(& i), (long long )i);
      __CrestLoad(3420, (unsigned long )0, (long long )1);
      __CrestApply2(3419, 0, (long long )(i + 1));
      __CrestStore(3422, (unsigned long )(& i));
# 337 "../HPL_dlacpy.c"
      i ++;
# 337 "../HPL_dlacpy.c"
      B0 ++;
# 337 "../HPL_dlacpy.c"
      A0 ++;
    }
    while_break___4: ;
    }
    __CrestLoad(3425, (unsigned long )(& j), (long long )j);
    __CrestLoad(3424, (unsigned long )0, (long long )1);
    __CrestApply2(3423, 0, (long long )(j + 1));
    __CrestStore(3426, (unsigned long )(& j));
# 311 "../HPL_dlacpy.c"
    j ++;
# 311 "../HPL_dlacpy.c"
    B0 += incB0;
# 311 "../HPL_dlacpy.c"
    A0 += incA0;
  }
  while_break___2: ;
  }

  return_label:
  {
  __CrestReturn(3427);
# 72 "../HPL_dlacpy.c"
  return;
  }
}
}
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 112 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlatcpy(int const M , int const N , double const *A , int const LDA ,
                 double *B , int const LDB ) ;
# 72 "../HPL_dlatcpy.c"
void HPL_dlatcpy(int const M , int const N , double const *A , int const LDA ,
                 double *B , int const LDB )
{
  double const *A0 ;
  double const *A1 ;
  double *B0 ;
  double *B1 ;
  int incA ;
  int incB ;
  int incA0 ;
  int incB0 ;
  int mu ;
  int nu ;
  int i ;
  int j ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double *mem_30 ;

  {
  __CrestCall(3432, 5);
  __CrestStore(3431, (unsigned long )(& LDB));
  __CrestStore(3430, (unsigned long )(& LDA));
  __CrestStore(3429, (unsigned long )(& N));
  __CrestStore(3428, (unsigned long )(& M));
# 137 "../HPL_dlatcpy.c"
  A0 = A;
# 137 "../HPL_dlatcpy.c"
  A1 = A + 1;
# 138 "../HPL_dlatcpy.c"
  B0 = B;
# 138 "../HPL_dlatcpy.c"
  B1 = B + LDB;
  __CrestLoad(3438, (unsigned long )(& M), (long long )M);
  __CrestApply1(3437, 19, (long long )(- M));
  __CrestLoad(3436, (unsigned long )(& LDA), (long long )LDA);
  __CrestApply2(3435, 2, (long long )(- M * LDA));
  __CrestLoad(3434, (unsigned long )0, (long long )((int const )(1 << 1)));
  __CrestApply2(3433, 0, (long long )(- M * LDA + (int const )(1 << 1)));
  __CrestStore(3439, (unsigned long )(& incA));
# 145 "../HPL_dlatcpy.c"
  incA = (int )(- M * LDA + (int const )(1 << 1));
  __CrestLoad(3444, (unsigned long )(& LDB), (long long )LDB);
  __CrestLoad(3443, (unsigned long )0, (long long )1);
  __CrestApply2(3442, 8, (long long )((unsigned int )LDB << 1));
  __CrestLoad(3441, (unsigned long )(& M), (long long )M);
  __CrestApply2(3440, 1, (long long )(((unsigned int )LDB << 1) - (unsigned int )M));
  __CrestStore(3445, (unsigned long )(& incB));
# 145 "../HPL_dlatcpy.c"
  incB = (int )(((unsigned int )LDB << 1) - (unsigned int )M);
  __CrestLoad(3451, (unsigned long )(& M), (long long )M);
  __CrestApply1(3450, 19, (long long )(- M));
  __CrestLoad(3449, (unsigned long )(& LDA), (long long )LDA);
  __CrestApply2(3448, 2, (long long )(- M * LDA));
  __CrestLoad(3447, (unsigned long )0, (long long )1);
  __CrestApply2(3446, 0, (long long )(- M * LDA + 1));
  __CrestStore(3452, (unsigned long )(& incA0));
# 145 "../HPL_dlatcpy.c"
  incA0 = (int )(- M * LDA + 1);
  __CrestLoad(3455, (unsigned long )(& LDB), (long long )LDB);
  __CrestLoad(3454, (unsigned long )(& M), (long long )M);
  __CrestApply2(3453, 1, (long long )(LDB - M));
  __CrestStore(3456, (unsigned long )(& incB0));
# 145 "../HPL_dlatcpy.c"
  incB0 = (int )(LDB - M);
  {
  __CrestLoad(3459, (unsigned long )(& M), (long long )M);
  __CrestLoad(3458, (unsigned long )0, (long long )0);
  __CrestApply2(3457, 15, (long long )(M <= 0));
# 155 "../HPL_dlatcpy.c"
  if (M <= 0) {
    __CrestBranch(3460, 1636, 1);
# 155 "../HPL_dlatcpy.c"
    goto return_label;
  } else {
    __CrestBranch(3461, 1638, 0);
    {
    __CrestLoad(3464, (unsigned long )(& N), (long long )N);
    __CrestLoad(3463, (unsigned long )0, (long long )0);
    __CrestApply2(3462, 15, (long long )(N <= 0));
# 155 "../HPL_dlatcpy.c"
    if (N <= 0) {
      __CrestBranch(3465, 1639, 1);
# 155 "../HPL_dlatcpy.c"
      goto return_label;
    } else {
      __CrestBranch(3466, 1641, 0);

    }
    }
  }
  }
  __CrestLoad(3471, (unsigned long )(& M), (long long )M);
  __CrestLoad(3470, (unsigned long )0, (long long )2);
  __CrestApply2(3469, 9, (long long )((unsigned int )M >> 2));
  __CrestLoad(3468, (unsigned long )0, (long long )2);
  __CrestApply2(3467, 8, (long long )(((unsigned int )M >> 2) << 2));
  __CrestStore(3472, (unsigned long )(& mu));
# 160 "../HPL_dlatcpy.c"
  mu = (int )(((unsigned int )M >> 2) << 2);
  __CrestLoad(3477, (unsigned long )(& N), (long long )N);
  __CrestLoad(3476, (unsigned long )0, (long long )1);
  __CrestApply2(3475, 9, (long long )((unsigned int )N >> 1));
  __CrestLoad(3474, (unsigned long )0, (long long )1);
  __CrestApply2(3473, 8, (long long )(((unsigned int )N >> 1) << 1));
  __CrestStore(3478, (unsigned long )(& nu));
# 162 "../HPL_dlatcpy.c"
  nu = (int )(((unsigned int )N >> 1) << 1);
  __CrestLoad(3479, (unsigned long )0, (long long )0);
  __CrestStore(3480, (unsigned long )(& j));
# 165 "../HPL_dlatcpy.c"
  j = 0;
  {
# 165 "../HPL_dlatcpy.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(3483, (unsigned long )(& j), (long long )j);
    __CrestLoad(3482, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(3481, 16, (long long )(j < nu));
# 165 "../HPL_dlatcpy.c"
    if (j < nu) {
      __CrestBranch(3484, 1647, 1);

    } else {
      __CrestBranch(3485, 1648, 0);
# 165 "../HPL_dlatcpy.c"
      goto while_break;
    }
    }
    __CrestLoad(3486, (unsigned long )0, (long long )0);
    __CrestStore(3487, (unsigned long )(& i));
# 167 "../HPL_dlatcpy.c"
    i = 0;
    {
# 167 "../HPL_dlatcpy.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(3490, (unsigned long )(& i), (long long )i);
      __CrestLoad(3489, (unsigned long )(& mu), (long long )mu);
      __CrestApply2(3488, 16, (long long )(i < mu));
# 167 "../HPL_dlatcpy.c"
      if (i < mu) {
        __CrestBranch(3491, 1654, 1);

      } else {
        __CrestBranch(3492, 1655, 0);
# 167 "../HPL_dlatcpy.c"
        goto while_break___0;
      }
      }
# 172 "../HPL_dlatcpy.c"
      mem_19 = B0 + 0;
# 172 "../HPL_dlatcpy.c"
      *mem_19 = (double )*A0;
# 172 "../HPL_dlatcpy.c"
      A0 += LDA;
# 172 "../HPL_dlatcpy.c"
      mem_20 = B1 + 0;
# 172 "../HPL_dlatcpy.c"
      *mem_20 = (double )*A1;
# 172 "../HPL_dlatcpy.c"
      A1 += LDA;
# 183 "../HPL_dlatcpy.c"
      mem_21 = B0 + 1;
# 183 "../HPL_dlatcpy.c"
      *mem_21 = (double )*A0;
# 183 "../HPL_dlatcpy.c"
      A0 += LDA;
# 183 "../HPL_dlatcpy.c"
      mem_22 = B1 + 1;
# 183 "../HPL_dlatcpy.c"
      *mem_22 = (double )*A1;
# 183 "../HPL_dlatcpy.c"
      A1 += LDA;
# 195 "../HPL_dlatcpy.c"
      mem_23 = B0 + 2;
# 195 "../HPL_dlatcpy.c"
      *mem_23 = (double )*A0;
# 195 "../HPL_dlatcpy.c"
      A0 += LDA;
# 195 "../HPL_dlatcpy.c"
      mem_24 = B1 + 2;
# 195 "../HPL_dlatcpy.c"
      *mem_24 = (double )*A1;
# 195 "../HPL_dlatcpy.c"
      A1 += LDA;
# 196 "../HPL_dlatcpy.c"
      mem_25 = B0 + 3;
# 196 "../HPL_dlatcpy.c"
      *mem_25 = (double )*A0;
# 196 "../HPL_dlatcpy.c"
      A0 += LDA;
# 196 "../HPL_dlatcpy.c"
      mem_26 = B1 + 3;
# 196 "../HPL_dlatcpy.c"
      *mem_26 = (double )*A1;
# 196 "../HPL_dlatcpy.c"
      A1 += LDA;
# 330 "../HPL_dlatcpy.c"
      B0 += 4;
# 330 "../HPL_dlatcpy.c"
      B1 += 4;
      __CrestLoad(3495, (unsigned long )(& i), (long long )i);
      __CrestLoad(3494, (unsigned long )0, (long long )4);
      __CrestApply2(3493, 0, (long long )(i + 4));
      __CrestStore(3496, (unsigned long )(& i));
# 167 "../HPL_dlatcpy.c"
      i += 4;
    }
    while_break___0: ;
    }
    __CrestLoad(3497, (unsigned long )(& mu), (long long )mu);
    __CrestStore(3498, (unsigned long )(& i));
# 337 "../HPL_dlatcpy.c"
    i = mu;
    {
# 337 "../HPL_dlatcpy.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(3501, (unsigned long )(& i), (long long )i);
      __CrestLoad(3500, (unsigned long )(& M), (long long )M);
      __CrestApply2(3499, 16, (long long )(i < (int )M));
# 337 "../HPL_dlatcpy.c"
      if (i < (int )M) {
        __CrestBranch(3502, 1663, 1);

      } else {
        __CrestBranch(3503, 1664, 0);
# 337 "../HPL_dlatcpy.c"
        goto while_break___1;
      }
      }
# 342 "../HPL_dlatcpy.c"
      *B0 = (double )*A0;
# 342 "../HPL_dlatcpy.c"
      B0 ++;
# 342 "../HPL_dlatcpy.c"
      A0 += LDA;
# 342 "../HPL_dlatcpy.c"
      *B1 = (double )*A1;
# 342 "../HPL_dlatcpy.c"
      B1 ++;
# 342 "../HPL_dlatcpy.c"
      A1 += LDA;
      __CrestLoad(3506, (unsigned long )(& i), (long long )i);
      __CrestLoad(3505, (unsigned long )0, (long long )1);
      __CrestApply2(3504, 0, (long long )(i + 1));
      __CrestStore(3507, (unsigned long )(& i));
# 337 "../HPL_dlatcpy.c"
      i ++;
    }
    while_break___1: ;
    }
# 352 "../HPL_dlatcpy.c"
    A0 += incA;
# 352 "../HPL_dlatcpy.c"
    A1 += incA;
# 352 "../HPL_dlatcpy.c"
    B0 += incB;
# 352 "../HPL_dlatcpy.c"
    B1 += incB;
    __CrestLoad(3510, (unsigned long )(& j), (long long )j);
    __CrestLoad(3509, (unsigned long )0, (long long )2);
    __CrestApply2(3508, 0, (long long )(j + 2));
    __CrestStore(3511, (unsigned long )(& j));
# 165 "../HPL_dlatcpy.c"
    j += 2;
  }
  while_break: ;
  }
  __CrestLoad(3512, (unsigned long )(& nu), (long long )nu);
  __CrestStore(3513, (unsigned long )(& j));
# 359 "../HPL_dlatcpy.c"
  j = nu;
  {
# 359 "../HPL_dlatcpy.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(3516, (unsigned long )(& j), (long long )j);
    __CrestLoad(3515, (unsigned long )(& N), (long long )N);
    __CrestApply2(3514, 16, (long long )(j < (int )N));
# 359 "../HPL_dlatcpy.c"
    if (j < (int )N) {
      __CrestBranch(3517, 1674, 1);

    } else {
      __CrestBranch(3518, 1675, 0);
# 359 "../HPL_dlatcpy.c"
      goto while_break___2;
    }
    }
    __CrestLoad(3519, (unsigned long )0, (long long )0);
    __CrestStore(3520, (unsigned long )(& i));
# 361 "../HPL_dlatcpy.c"
    i = 0;
    {
# 361 "../HPL_dlatcpy.c"
    while (1) {
      while_continue___3: ;
      {
      __CrestLoad(3523, (unsigned long )(& i), (long long )i);
      __CrestLoad(3522, (unsigned long )(& mu), (long long )mu);
      __CrestApply2(3521, 16, (long long )(i < mu));
# 361 "../HPL_dlatcpy.c"
      if (i < mu) {
        __CrestBranch(3524, 1681, 1);

      } else {
        __CrestBranch(3525, 1682, 0);
# 361 "../HPL_dlatcpy.c"
        goto while_break___3;
      }
      }
# 363 "../HPL_dlatcpy.c"
      mem_27 = B0 + 0;
# 363 "../HPL_dlatcpy.c"
      *mem_27 = (double )*A0;
# 363 "../HPL_dlatcpy.c"
      A0 += LDA;
# 365 "../HPL_dlatcpy.c"
      mem_28 = B0 + 1;
# 365 "../HPL_dlatcpy.c"
      *mem_28 = (double )*A0;
# 365 "../HPL_dlatcpy.c"
      A0 += LDA;
# 368 "../HPL_dlatcpy.c"
      mem_29 = B0 + 2;
# 368 "../HPL_dlatcpy.c"
      *mem_29 = (double )*A0;
# 368 "../HPL_dlatcpy.c"
      A0 += LDA;
# 368 "../HPL_dlatcpy.c"
      mem_30 = B0 + 3;
# 368 "../HPL_dlatcpy.c"
      *mem_30 = (double )*A0;
# 368 "../HPL_dlatcpy.c"
      A0 += LDA;
      __CrestLoad(3528, (unsigned long )(& i), (long long )i);
      __CrestLoad(3527, (unsigned long )0, (long long )4);
      __CrestApply2(3526, 0, (long long )(i + 4));
      __CrestStore(3529, (unsigned long )(& i));
# 361 "../HPL_dlatcpy.c"
      i += 4;
# 361 "../HPL_dlatcpy.c"
      B0 += 4;
    }
    while_break___3: ;
    }
    __CrestLoad(3530, (unsigned long )(& mu), (long long )mu);
    __CrestStore(3531, (unsigned long )(& i));
# 392 "../HPL_dlatcpy.c"
    i = mu;
    {
# 392 "../HPL_dlatcpy.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(3534, (unsigned long )(& i), (long long )i);
      __CrestLoad(3533, (unsigned long )(& M), (long long )M);
      __CrestApply2(3532, 16, (long long )(i < (int )M));
# 392 "../HPL_dlatcpy.c"
      if (i < (int )M) {
        __CrestBranch(3535, 1690, 1);

      } else {
        __CrestBranch(3536, 1691, 0);
# 392 "../HPL_dlatcpy.c"
        goto while_break___4;
      }
      }
# 392 "../HPL_dlatcpy.c"
      *B0 = (double )*A0;
      __CrestLoad(3539, (unsigned long )(& i), (long long )i);
      __CrestLoad(3538, (unsigned long )0, (long long )1);
      __CrestApply2(3537, 0, (long long )(i + 1));
      __CrestStore(3540, (unsigned long )(& i));
# 392 "../HPL_dlatcpy.c"
      i ++;
# 392 "../HPL_dlatcpy.c"
      B0 ++;
# 392 "../HPL_dlatcpy.c"
      A0 += LDA;
    }
    while_break___4: ;
    }
    __CrestLoad(3543, (unsigned long )(& j), (long long )j);
    __CrestLoad(3542, (unsigned long )0, (long long )1);
    __CrestApply2(3541, 0, (long long )(j + 1));
    __CrestStore(3544, (unsigned long )(& j));
# 359 "../HPL_dlatcpy.c"
    j ++;
# 359 "../HPL_dlatcpy.c"
    B0 += incB0;
# 359 "../HPL_dlatcpy.c"
    A0 += incA0;
  }
  while_break___2: ;
  }

  return_label:
  {
  __CrestReturn(3545);
# 72 "../HPL_dlatcpy.c"
  return;
  }
}
}
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 242 "/usr/include/stdio.h"
extern int fflush(FILE *__stream ) ;
# 356 "/usr/include/stdio.h"
extern int fprintf(FILE * __restrict __stream , char const * __restrict __format
                   , ...) ;
# 379 "/usr/include/stdio.h"
extern __attribute__((__nothrow__)) int vsprintf(char * __restrict __s , char const * __restrict __format ,
                                                  __gnuc_va_list __arg ) ;
# 53 "../HPL_fprintf.c"
void HPL_fprintf(FILE *STREAM , char const *FORM , ...)
{
  va_list argptr ;
  char cline[256] ;

  {
  __CrestCall(3546, 6);
# 100 "../HPL_fprintf.c"
  __builtin_va_start(argptr, FORM);
  __CrestClearStack(3547);
# 106 "../HPL_fprintf.c"
  vsprintf((char * __restrict )(cline), (char const * __restrict )FORM, argptr);
  __CrestClearStack(3548);
# 107 "../HPL_fprintf.c"
  __builtin_va_end(argptr);
  __CrestClearStack(3549);
# 109 "../HPL_fprintf.c"
  fprintf((FILE * __restrict )STREAM, (char const * __restrict )"%s", cline);
  __CrestClearStack(3550);
# 110 "../HPL_fprintf.c"
  fflush(STREAM);
  __CrestClearStack(3551);

  {
  __CrestReturn(3552);
# 53 "../HPL_fprintf.c"
  return;
  }
}
}
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 88 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_warn(FILE *STREAM , int LINE , char const *SRNAME , char const *FORM
              , ...) ;
# 53 "../HPL_warn.c"
void HPL_warn(FILE *STREAM , int LINE , char const *SRNAME , char const *FORM
              , ...)
{
  va_list argptr ;
  char cline[128] ;

  {
  __CrestCall(3553, 7);
# 112 "../HPL_warn.c"
  __builtin_va_start(argptr, FORM);
  __CrestClearStack(3554);
# 120 "../HPL_warn.c"
  vsprintf((char * __restrict )(cline), (char const * __restrict )FORM, argptr);
  __CrestClearStack(3555);
# 121 "../HPL_warn.c"
  __builtin_va_end(argptr);
  __CrestClearStack(3556);
  {
  __CrestLoad(3559, (unsigned long )(& LINE), (long long )LINE);
  __CrestLoad(3558, (unsigned long )0, (long long )0);
  __CrestApply2(3557, 15, (long long )(LINE <= 0));
# 125 "../HPL_warn.c"
  if (LINE <= 0) {
    __CrestBranch(3560, 1703, 1);
# 126 "../HPL_warn.c"
    HPL_fprintf(STREAM, "%s %s:\n>>> %s <<<\n\n", "HPL ERROR in function", SRNAME,
                cline);
    __CrestClearStack(3562);
  } else {
    __CrestBranch(3561, 1704, 0);
    __CrestLoad(3563, (unsigned long )(& LINE), (long long )LINE);
# 129 "../HPL_warn.c"
    HPL_fprintf(STREAM, "%s %d %s %s:\n>>> %s <<<\n\n", "HPL ERROR on line", LINE,
                "of function", SRNAME, cline);
    __CrestClearStack(3564);
  }
  }

  {
  __CrestReturn(3565);
# 53 "../HPL_warn.c"
  return;
  }
}
}
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 96 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_abort(int LINE , char const *SRNAME , char const *FORM , ...) ;
# 53 "../HPL_abort.c"
void HPL_abort(int LINE , char const *SRNAME , char const *FORM , ...)
{
  va_list argptr ;
  char cline[128] ;

  {
  __CrestCall(3566, 8);
# 107 "../HPL_abort.c"
  __builtin_va_start(argptr, FORM);
  __CrestClearStack(3567);
# 114 "../HPL_abort.c"
  vsprintf((char * __restrict )(cline), (char const * __restrict )FORM, argptr);
  __CrestClearStack(3568);
# 115 "../HPL_abort.c"
  __builtin_va_end(argptr);
  __CrestClearStack(3569);
  {
  __CrestLoad(3572, (unsigned long )(& LINE), (long long )LINE);
  __CrestLoad(3571, (unsigned long )0, (long long )0);
  __CrestApply2(3570, 15, (long long )(LINE <= 0));
# 119 "../HPL_abort.c"
  if (LINE <= 0) {
    __CrestBranch(3573, 1709, 1);
# 120 "../HPL_abort.c"
    HPL_fprintf(stderr, "%s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR in function",
                SRNAME, cline);
    __CrestClearStack(3575);
  } else {
    __CrestBranch(3574, 1710, 0);
    __CrestLoad(3576, (unsigned long )(& LINE), (long long )LINE);
# 123 "../HPL_abort.c"
    HPL_fprintf(stderr, "%s %d %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR on line",
                LINE, "of function", SRNAME, cline);
    __CrestClearStack(3577);
  }
  }
  __CrestLoad(3578, (unsigned long )0, (long long )0);
# 125 "../HPL_abort.c"
  exit(0);
  __CrestClearStack(3579);
  {
  __CrestReturn(3580);
# 53 "../HPL_abort.c"
  return;
  }
}
}
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 121 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlaprnt(int const M , int const N , double *A , int const IA , int const JA ,
                 int const LDA , char const *CMATNM ) ;
# 53 "../HPL_dlaprnt.c"
void HPL_dlaprnt(int const M , int const N , double *A , int const IA , int const JA ,
                 int const LDA , char const *CMATNM )
{
  int i ;
  int j ;
  double *mem_10 ;

  {
  __CrestCall(3586, 9);
  __CrestStore(3585, (unsigned long )(& LDA));
  __CrestStore(3584, (unsigned long )(& JA));
  __CrestStore(3583, (unsigned long )(& IA));
  __CrestStore(3582, (unsigned long )(& N));
  __CrestStore(3581, (unsigned long )(& M));
  __CrestLoad(3587, (unsigned long )0, (long long )0);
  __CrestStore(3588, (unsigned long )(& j));
# 119 "../HPL_dlaprnt.c"
  j = 0;
  {
# 119 "../HPL_dlaprnt.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(3591, (unsigned long )(& j), (long long )j);
    __CrestLoad(3590, (unsigned long )(& N), (long long )N);
    __CrestApply2(3589, 16, (long long )(j < (int )N));
# 119 "../HPL_dlaprnt.c"
    if (j < (int )N) {
      __CrestBranch(3592, 1718, 1);

    } else {
      __CrestBranch(3593, 1719, 0);
# 119 "../HPL_dlaprnt.c"
      goto while_break;
    }
    }
    __CrestLoad(3594, (unsigned long )0, (long long )0);
    __CrestStore(3595, (unsigned long )(& i));
# 121 "../HPL_dlaprnt.c"
    i = 0;
    {
# 121 "../HPL_dlaprnt.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(3598, (unsigned long )(& i), (long long )i);
      __CrestLoad(3597, (unsigned long )(& M), (long long )M);
      __CrestApply2(3596, 16, (long long )(i < (int )M));
# 121 "../HPL_dlaprnt.c"
      if (i < (int )M) {
        __CrestBranch(3599, 1725, 1);

      } else {
        __CrestBranch(3600, 1726, 0);
# 121 "../HPL_dlaprnt.c"
        goto while_break___0;
      }
      }
# 123 "../HPL_dlaprnt.c"
      mem_10 = (A + i) + j * (int )LDA;
      __CrestLoad(3603, (unsigned long )(& IA), (long long )IA);
      __CrestLoad(3602, (unsigned long )(& i), (long long )i);
      __CrestApply2(3601, 0, (long long )(IA + (int const )i));
      __CrestLoad(3606, (unsigned long )(& JA), (long long )JA);
      __CrestLoad(3605, (unsigned long )(& j), (long long )j);
      __CrestApply2(3604, 0, (long long )(JA + (int const )j));
# 123 "../HPL_dlaprnt.c"
      HPL_fprintf(stderr, "%s(%6d,%6d)=%30.18f\n", CMATNM, IA + (int const )i, JA + (int const )j,
                  *mem_10);
      __CrestClearStack(3607);
      __CrestLoad(3610, (unsigned long )(& i), (long long )i);
      __CrestLoad(3609, (unsigned long )0, (long long )1);
      __CrestApply2(3608, 0, (long long )(i + 1));
      __CrestStore(3611, (unsigned long )(& i));
# 121 "../HPL_dlaprnt.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(3614, (unsigned long )(& j), (long long )j);
    __CrestLoad(3613, (unsigned long )0, (long long )1);
    __CrestApply2(3612, 0, (long long )(j + 1));
    __CrestStore(3615, (unsigned long )(& j));
# 119 "../HPL_dlaprnt.c"
    j ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(3616);
# 53 "../HPL_dlaprnt.c"
  return;
  }
}
}
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 105 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern int cblas_idamax(int const , double const * , int const ) ;
# 131 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
double HPL_dlange(HPL_T_NORM const NORM , int const M , int const N , double const *A ,
                  int const LDA ) ;
# 53 "../HPL_dlange.c"
double HPL_dlange(HPL_T_NORM const NORM , int const M , int const N , double const *A ,
                  int const LDA )
{
  double s ;
  double v0 ;
  double *work ;
  int i ;
  int j ;
  double tmp___0 ;
  double tmp___1 ;
  void *tmp___2 ;
  double tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  double tmp___6 ;
  int tmp___7 ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double __retres25 ;

  {
  __CrestCall(3621, 10);
  __CrestStore(3620, (unsigned long )(& LDA));
  __CrestStore(3619, (unsigned long )(& N));
  __CrestStore(3618, (unsigned long )(& M));
  __CrestStore(3617, (unsigned long )(& NORM));
# 114 "../HPL_dlange.c"
  v0 = 0.0;
# 114 "../HPL_dlange.c"
  work = (double *)((void *)0);
  {
  __CrestLoad(3624, (unsigned long )(& M), (long long )M);
  __CrestLoad(3623, (unsigned long )0, (long long )0);
  __CrestApply2(3622, 15, (long long )(M <= 0));
# 119 "../HPL_dlange.c"
  if (M <= 0) {
    __CrestBranch(3625, 1735, 1);
# 119 "../HPL_dlange.c"
    __retres25 = 0.0;
# 119 "../HPL_dlange.c"
    goto return_label;
  } else {
    __CrestBranch(3626, 1737, 0);
    {
    __CrestLoad(3629, (unsigned long )(& N), (long long )N);
    __CrestLoad(3628, (unsigned long )0, (long long )0);
    __CrestApply2(3627, 15, (long long )(N <= 0));
# 119 "../HPL_dlange.c"
    if (N <= 0) {
      __CrestBranch(3630, 1738, 1);
# 119 "../HPL_dlange.c"
      __retres25 = 0.0;
# 119 "../HPL_dlange.c"
      goto return_label;
    } else {
      __CrestBranch(3631, 1740, 0);

    }
    }
  }
  }
  {
  __CrestLoad(3634, (unsigned long )(& NORM), (long long )NORM);
  __CrestLoad(3633, (unsigned long )0, (long long )800U);
  __CrestApply2(3632, 12, (long long )((unsigned int const )NORM == 800U));
# 121 "../HPL_dlange.c"
  if ((unsigned int const )NORM == 800U) {
    __CrestBranch(3635, 1742, 1);
    __CrestLoad(3637, (unsigned long )0, (long long )0);
    __CrestStore(3638, (unsigned long )(& j));
# 126 "../HPL_dlange.c"
    j = 0;
    {
# 126 "../HPL_dlange.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(3641, (unsigned long )(& j), (long long )j);
      __CrestLoad(3640, (unsigned long )(& N), (long long )N);
      __CrestApply2(3639, 16, (long long )(j < (int )N));
# 126 "../HPL_dlange.c"
      if (j < (int )N) {
        __CrestBranch(3642, 1747, 1);

      } else {
        __CrestBranch(3643, 1748, 0);
# 126 "../HPL_dlange.c"
        goto while_break;
      }
      }
      __CrestLoad(3644, (unsigned long )0, (long long )0);
      __CrestStore(3645, (unsigned long )(& i));
# 128 "../HPL_dlange.c"
      i = 0;
      {
# 128 "../HPL_dlange.c"
      while (1) {
        while_continue___0: ;
        {
        __CrestLoad(3648, (unsigned long )(& i), (long long )i);
        __CrestLoad(3647, (unsigned long )(& M), (long long )M);
        __CrestApply2(3646, 16, (long long )(i < (int )M));
# 128 "../HPL_dlange.c"
        if (i < (int )M) {
          __CrestBranch(3649, 1754, 1);

        } else {
          __CrestBranch(3650, 1755, 0);
# 128 "../HPL_dlange.c"
          goto while_break___0;
        }
        }
        {
        __CrestLoad(3653, (unsigned long )A, (long long )*A);
        __CrestLoad(3652, (unsigned long )0, (long long )((double const )0));
        __CrestApply2(3651, 16, (long long )(*A < (double const )0));
# 128 "../HPL_dlange.c"
        if (*A < (double const )0) {
          __CrestBranch(3654, 1757, 1);
# 128 "../HPL_dlange.c"
          tmp___1 = (double )(- *A);
        } else {
          __CrestBranch(3655, 1758, 0);
# 128 "../HPL_dlange.c"
          tmp___1 = (double )*A;
        }
        }
        {
        __CrestLoad(3658, (unsigned long )(& v0), (long long )v0);
        __CrestLoad(3657, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestApply2(3656, 14, (long long )(v0 > tmp___1));
# 128 "../HPL_dlange.c"
        if (v0 > tmp___1) {
          __CrestBranch(3659, 1760, 1);
# 128 "../HPL_dlange.c"
          v0 = v0;
        } else {
          __CrestBranch(3660, 1761, 0);
          {
          __CrestLoad(3663, (unsigned long )A, (long long )*A);
          __CrestLoad(3662, (unsigned long )0, (long long )((double const )0));
          __CrestApply2(3661, 16, (long long )(*A < (double const )0));
# 128 "../HPL_dlange.c"
          if (*A < (double const )0) {
            __CrestBranch(3664, 1762, 1);
# 128 "../HPL_dlange.c"
            tmp___0 = (double )(- *A);
          } else {
            __CrestBranch(3665, 1763, 0);
# 128 "../HPL_dlange.c"
            tmp___0 = (double )*A;
          }
          }
# 128 "../HPL_dlange.c"
          v0 = tmp___0;
        }
        }
# 128 "../HPL_dlange.c"
        A ++;
        __CrestLoad(3668, (unsigned long )(& i), (long long )i);
        __CrestLoad(3667, (unsigned long )0, (long long )1);
        __CrestApply2(3666, 0, (long long )(i + 1));
        __CrestStore(3669, (unsigned long )(& i));
# 128 "../HPL_dlange.c"
        i ++;
      }
      while_break___0: ;
      }
# 129 "../HPL_dlange.c"
      A += LDA - M;
      __CrestLoad(3672, (unsigned long )(& j), (long long )j);
      __CrestLoad(3671, (unsigned long )0, (long long )1);
      __CrestApply2(3670, 0, (long long )(j + 1));
      __CrestStore(3673, (unsigned long )(& j));
# 126 "../HPL_dlange.c"
      j ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(3636, 1769, 0);
    {
    __CrestLoad(3676, (unsigned long )(& NORM), (long long )NORM);
    __CrestLoad(3675, (unsigned long )0, (long long )801U);
    __CrestApply2(3674, 12, (long long )((unsigned int const )NORM == 801U));
# 132 "../HPL_dlange.c"
    if ((unsigned int const )NORM == 801U) {
      __CrestBranch(3677, 1770, 1);
      __CrestLoad(3681, (unsigned long )(& N), (long long )N);
      __CrestLoad(3680, (unsigned long )0, (long long )sizeof(double ));
      __CrestApply2(3679, 2, (long long )((unsigned long )N * sizeof(double )));
# 137 "../HPL_dlange.c"
      tmp___2 = malloc((unsigned long )N * sizeof(double ));
      __CrestClearStack(3682);
# 137 "../HPL_dlange.c"
      work = (double *)tmp___2;
      {
      __CrestLoad(3685, (unsigned long )(& work), (long long )((unsigned long )work));
      __CrestLoad(3684, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(3683, 12, (long long )((unsigned long )work == (unsigned long )((void *)0)));
# 138 "../HPL_dlange.c"
      if ((unsigned long )work == (unsigned long )((void *)0)) {
        __CrestBranch(3686, 1772, 1);
        __CrestLoad(3688, (unsigned long )0, (long long )139);
# 139 "../HPL_dlange.c"
        HPL_abort(139, "HPL_dlange", "Memory allocation failed");
        __CrestClearStack(3689);
      } else {
        __CrestBranch(3687, 1773, 0);
        __CrestLoad(3690, (unsigned long )0, (long long )0);
        __CrestStore(3691, (unsigned long )(& j));
# 142 "../HPL_dlange.c"
        j = 0;
        {
# 142 "../HPL_dlange.c"
        while (1) {
          while_continue___1: ;
          {
          __CrestLoad(3694, (unsigned long )(& j), (long long )j);
          __CrestLoad(3693, (unsigned long )(& N), (long long )N);
          __CrestApply2(3692, 16, (long long )(j < (int )N));
# 142 "../HPL_dlange.c"
          if (j < (int )N) {
            __CrestBranch(3695, 1778, 1);

          } else {
            __CrestBranch(3696, 1779, 0);
# 142 "../HPL_dlange.c"
            goto while_break___1;
          }
          }
# 144 "../HPL_dlange.c"
          s = 0.0;
          __CrestLoad(3697, (unsigned long )0, (long long )0);
          __CrestStore(3698, (unsigned long )(& i));
# 145 "../HPL_dlange.c"
          i = 0;
          {
# 145 "../HPL_dlange.c"
          while (1) {
            while_continue___2: ;
            {
            __CrestLoad(3701, (unsigned long )(& i), (long long )i);
            __CrestLoad(3700, (unsigned long )(& M), (long long )M);
            __CrestApply2(3699, 16, (long long )(i < (int )M));
# 145 "../HPL_dlange.c"
            if (i < (int )M) {
              __CrestBranch(3702, 1785, 1);

            } else {
              __CrestBranch(3703, 1786, 0);
# 145 "../HPL_dlange.c"
              goto while_break___2;
            }
            }
            {
            __CrestLoad(3706, (unsigned long )A, (long long )*A);
            __CrestLoad(3705, (unsigned long )0, (long long )((double const )0));
            __CrestApply2(3704, 16, (long long )(*A < (double const )0));
# 145 "../HPL_dlange.c"
            if (*A < (double const )0) {
              __CrestBranch(3707, 1788, 1);
# 145 "../HPL_dlange.c"
              tmp___3 = (double )(- *A);
            } else {
              __CrestBranch(3708, 1789, 0);
# 145 "../HPL_dlange.c"
              tmp___3 = (double )*A;
            }
            }
# 145 "../HPL_dlange.c"
            s += tmp___3;
# 145 "../HPL_dlange.c"
            A ++;
            __CrestLoad(3711, (unsigned long )(& i), (long long )i);
            __CrestLoad(3710, (unsigned long )0, (long long )1);
            __CrestApply2(3709, 0, (long long )(i + 1));
            __CrestStore(3712, (unsigned long )(& i));
# 145 "../HPL_dlange.c"
            i ++;
          }
          while_break___2: ;
          }
# 146 "../HPL_dlange.c"
          mem_19 = work + j;
# 146 "../HPL_dlange.c"
          *mem_19 = s;
# 146 "../HPL_dlange.c"
          A += LDA - M;
          __CrestLoad(3715, (unsigned long )(& j), (long long )j);
          __CrestLoad(3714, (unsigned long )0, (long long )1);
          __CrestApply2(3713, 0, (long long )(j + 1));
          __CrestStore(3716, (unsigned long )(& j));
# 142 "../HPL_dlange.c"
          j ++;
        }
        while_break___1: ;
        }
        __CrestLoad(3717, (unsigned long )(& N), (long long )N);
        __CrestLoad(3718, (unsigned long )0, (long long )((int const )1));
# 151 "../HPL_dlange.c"
        tmp___4 = cblas_idamax(N, (double const *)work, (int const )1);
        __CrestHandleReturn(3720, (long long )tmp___4);
        __CrestStore(3719, (unsigned long )(& tmp___4));
# 151 "../HPL_dlange.c"
        mem_20 = work + tmp___4;
# 151 "../HPL_dlange.c"
        v0 = *mem_20;
        {
        __CrestLoad(3723, (unsigned long )(& v0), (long long )v0);
        __CrestLoad(3722, (unsigned long )0, (long long )((double )0));
        __CrestApply2(3721, 16, (long long )(v0 < (double )0));
# 151 "../HPL_dlange.c"
        if (v0 < (double )0) {
          __CrestBranch(3724, 1796, 1);
# 151 "../HPL_dlange.c"
          v0 = - v0;
        } else {
          __CrestBranch(3725, 1797, 0);
# 151 "../HPL_dlange.c"
          v0 = v0;
        }
        }
        {
        __CrestLoad(3728, (unsigned long )(& work), (long long )((unsigned long )work));
        __CrestLoad(3727, (unsigned long )0, (long long )0);
        __CrestApply2(3726, 13, (long long )(work != 0));
# 152 "../HPL_dlange.c"
        if (work != 0) {
          __CrestBranch(3729, 1799, 1);
# 152 "../HPL_dlange.c"
          free((void *)work);
          __CrestClearStack(3731);
        } else {
          __CrestBranch(3730, 1800, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(3678, 1801, 0);
      {
      __CrestLoad(3734, (unsigned long )(& NORM), (long long )NORM);
      __CrestLoad(3733, (unsigned long )0, (long long )802U);
      __CrestApply2(3732, 12, (long long )((unsigned int const )NORM == 802U));
# 155 "../HPL_dlange.c"
      if ((unsigned int const )NORM == 802U) {
        __CrestBranch(3735, 1802, 1);
        __CrestLoad(3739, (unsigned long )(& M), (long long )M);
        __CrestLoad(3738, (unsigned long )0, (long long )sizeof(double ));
        __CrestApply2(3737, 2, (long long )((unsigned long )M * sizeof(double )));
# 160 "../HPL_dlange.c"
        tmp___5 = malloc((unsigned long )M * sizeof(double ));
        __CrestClearStack(3740);
# 160 "../HPL_dlange.c"
        work = (double *)tmp___5;
        {
        __CrestLoad(3743, (unsigned long )(& work), (long long )((unsigned long )work));
        __CrestLoad(3742, (unsigned long )0, (long long )((unsigned long )((void *)0)));
        __CrestApply2(3741, 12, (long long )((unsigned long )work == (unsigned long )((void *)0)));
# 161 "../HPL_dlange.c"
        if ((unsigned long )work == (unsigned long )((void *)0)) {
          __CrestBranch(3744, 1804, 1);
          __CrestLoad(3746, (unsigned long )0, (long long )162);
# 162 "../HPL_dlange.c"
          HPL_abort(162, "HPL_dlange", "Memory allocation failed");
          __CrestClearStack(3747);
        } else {
          __CrestBranch(3745, 1805, 0);
          __CrestLoad(3748, (unsigned long )0, (long long )0);
          __CrestStore(3749, (unsigned long )(& i));
# 165 "../HPL_dlange.c"
          i = 0;
          {
# 165 "../HPL_dlange.c"
          while (1) {
            while_continue___3: ;
            {
            __CrestLoad(3752, (unsigned long )(& i), (long long )i);
            __CrestLoad(3751, (unsigned long )(& M), (long long )M);
            __CrestApply2(3750, 16, (long long )(i < (int )M));
# 165 "../HPL_dlange.c"
            if (i < (int )M) {
              __CrestBranch(3753, 1810, 1);

            } else {
              __CrestBranch(3754, 1811, 0);
# 165 "../HPL_dlange.c"
              goto while_break___3;
            }
            }
# 165 "../HPL_dlange.c"
            mem_21 = work + i;
# 165 "../HPL_dlange.c"
            *mem_21 = 0.0;
            __CrestLoad(3757, (unsigned long )(& i), (long long )i);
            __CrestLoad(3756, (unsigned long )0, (long long )1);
            __CrestApply2(3755, 0, (long long )(i + 1));
            __CrestStore(3758, (unsigned long )(& i));
# 165 "../HPL_dlange.c"
            i ++;
          }
          while_break___3: ;
          }
          __CrestLoad(3759, (unsigned long )0, (long long )0);
          __CrestStore(3760, (unsigned long )(& j));
# 167 "../HPL_dlange.c"
          j = 0;
          {
# 167 "../HPL_dlange.c"
          while (1) {
            while_continue___4: ;
            {
            __CrestLoad(3763, (unsigned long )(& j), (long long )j);
            __CrestLoad(3762, (unsigned long )(& N), (long long )N);
            __CrestApply2(3761, 16, (long long )(j < (int )N));
# 167 "../HPL_dlange.c"
            if (j < (int )N) {
              __CrestBranch(3764, 1819, 1);

            } else {
              __CrestBranch(3765, 1820, 0);
# 167 "../HPL_dlange.c"
              goto while_break___4;
            }
            }
            __CrestLoad(3766, (unsigned long )0, (long long )0);
            __CrestStore(3767, (unsigned long )(& i));
# 169 "../HPL_dlange.c"
            i = 0;
            {
# 169 "../HPL_dlange.c"
            while (1) {
              while_continue___5: ;
              {
              __CrestLoad(3770, (unsigned long )(& i), (long long )i);
              __CrestLoad(3769, (unsigned long )(& M), (long long )M);
              __CrestApply2(3768, 16, (long long )(i < (int )M));
# 169 "../HPL_dlange.c"
              if (i < (int )M) {
                __CrestBranch(3771, 1826, 1);

              } else {
                __CrestBranch(3772, 1827, 0);
# 169 "../HPL_dlange.c"
                goto while_break___5;
              }
              }
              {
              __CrestLoad(3775, (unsigned long )A, (long long )*A);
              __CrestLoad(3774, (unsigned long )0, (long long )((double const )0));
              __CrestApply2(3773, 16, (long long )(*A < (double const )0));
# 169 "../HPL_dlange.c"
              if (*A < (double const )0) {
                __CrestBranch(3776, 1829, 1);
# 169 "../HPL_dlange.c"
                tmp___6 = (double )(- *A);
              } else {
                __CrestBranch(3777, 1830, 0);
# 169 "../HPL_dlange.c"
                tmp___6 = (double )*A;
              }
              }
# 169 "../HPL_dlange.c"
              mem_22 = work + i;
# 169 "../HPL_dlange.c"
              mem_23 = work + i;
# 169 "../HPL_dlange.c"
              *mem_22 = *mem_23 + tmp___6;
# 169 "../HPL_dlange.c"
              A ++;
              __CrestLoad(3780, (unsigned long )(& i), (long long )i);
              __CrestLoad(3779, (unsigned long )0, (long long )1);
              __CrestApply2(3778, 0, (long long )(i + 1));
              __CrestStore(3781, (unsigned long )(& i));
# 169 "../HPL_dlange.c"
              i ++;
            }
            while_break___5: ;
            }
# 170 "../HPL_dlange.c"
            A += LDA - M;
            __CrestLoad(3784, (unsigned long )(& j), (long long )j);
            __CrestLoad(3783, (unsigned long )0, (long long )1);
            __CrestApply2(3782, 0, (long long )(j + 1));
            __CrestStore(3785, (unsigned long )(& j));
# 167 "../HPL_dlange.c"
            j ++;
          }
          while_break___4: ;
          }
          __CrestLoad(3786, (unsigned long )(& M), (long long )M);
          __CrestLoad(3787, (unsigned long )0, (long long )((int const )1));
# 175 "../HPL_dlange.c"
          tmp___7 = cblas_idamax(M, (double const *)work, (int const )1);
          __CrestHandleReturn(3789, (long long )tmp___7);
          __CrestStore(3788, (unsigned long )(& tmp___7));
# 175 "../HPL_dlange.c"
          mem_24 = work + tmp___7;
# 175 "../HPL_dlange.c"
          v0 = *mem_24;
          {
          __CrestLoad(3792, (unsigned long )(& v0), (long long )v0);
          __CrestLoad(3791, (unsigned long )0, (long long )((double )0));
          __CrestApply2(3790, 16, (long long )(v0 < (double )0));
# 175 "../HPL_dlange.c"
          if (v0 < (double )0) {
            __CrestBranch(3793, 1837, 1);
# 175 "../HPL_dlange.c"
            v0 = - v0;
          } else {
            __CrestBranch(3794, 1838, 0);
# 175 "../HPL_dlange.c"
            v0 = v0;
          }
          }
          {
          __CrestLoad(3797, (unsigned long )(& work), (long long )((unsigned long )work));
          __CrestLoad(3796, (unsigned long )0, (long long )0);
          __CrestApply2(3795, 13, (long long )(work != 0));
# 176 "../HPL_dlange.c"
          if (work != 0) {
            __CrestBranch(3798, 1840, 1);
# 176 "../HPL_dlange.c"
            free((void *)work);
            __CrestClearStack(3800);
          } else {
            __CrestBranch(3799, 1841, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(3736, 1842, 0);

      }
      }
    }
    }
  }
  }
# 180 "../HPL_dlange.c"
  __retres25 = v0;
  return_label:
  {
  __CrestReturn(3801);
# 53 "../HPL_dlange.c"
  return (__retres25);
  }
}
}
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 842 "//usr/include/mpich/mpi.h"
extern int MPI_Send(void const *buf , int count , MPI_Datatype datatype , int dest ,
                    int tag , MPI_Comm comm ) ;
# 844 "//usr/include/mpich/mpi.h"
extern int MPI_Recv(void *buf , int count , MPI_Datatype datatype , int source , int tag ,
                    MPI_Comm comm , MPI_Status *status ) ;
# 878 "//usr/include/mpich/mpi.h"
extern int MPI_Iprobe(int source , int tag , MPI_Comm comm , int *flag , MPI_Status *status ) ;
# 921 "//usr/include/mpich/mpi.h"
extern int MPI_Type_free(MPI_Datatype *datatype ) ;
# 122 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_packL(HPL_T_panel *PANEL , int const INDEX , int const LEN , int const IBUF ) ;
# 134 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_1ring(HPL_T_panel *PANEL ) ;
# 135 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_1ring(HPL_T_panel *PANEL , int *IFLAG ) ;
# 136 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_1ring(HPL_T_panel *PANEL ) ;
# 59 "../HPL_1ring.c"
int HPL_binit_1ring(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(3802, 11);

  {
  __CrestLoad(3805, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(3804, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(3803, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 77 "../HPL_1ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(3806, 1846, 1);
    __CrestLoad(3808, (unsigned long )0, (long long )1);
    __CrestStore(3809, (unsigned long )(& __retres5));
# 77 "../HPL_1ring.c"
    __retres5 = 1;
# 77 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3807, 1848, 0);

  }
  }
  {
# 78 "../HPL_1ring.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(3812, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(3811, (unsigned long )0, (long long )1);
  __CrestApply2(3810, 15, (long long )(mem_4->npcol <= 1));
# 78 "../HPL_1ring.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(3813, 1852, 1);
    __CrestLoad(3815, (unsigned long )0, (long long )1);
    __CrestStore(3816, (unsigned long )(& __retres5));
# 78 "../HPL_1ring.c"
    __retres5 = 1;
# 78 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3814, 1854, 0);

  }
  }
  }
  __CrestLoad(3817, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(3818, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestLoad(3819, (unsigned long )0, (long long )((int const )0));
# 89 "../HPL_1ring.c"
  ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )0);
  __CrestHandleReturn(3821, (long long )ierr);
  __CrestStore(3820, (unsigned long )(& ierr));
  {
  __CrestLoad(3824, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(3823, (unsigned long )0, (long long )0);
  __CrestApply2(3822, 12, (long long )(ierr == 0));
# 91 "../HPL_1ring.c"
  if (ierr == 0) {
    __CrestBranch(3825, 1857, 1);
    __CrestLoad(3827, (unsigned long )0, (long long )1);
    __CrestStore(3828, (unsigned long )(& tmp));
# 91 "../HPL_1ring.c"
    tmp = 1;
  } else {
    __CrestBranch(3826, 1858, 0);
    __CrestLoad(3829, (unsigned long )0, (long long )0);
    __CrestStore(3830, (unsigned long )(& tmp));
# 91 "../HPL_1ring.c"
    tmp = 0;
  }
  }
  __CrestLoad(3831, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(3832, (unsigned long )(& __retres5));
# 91 "../HPL_1ring.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(3833, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(3834);
# 59 "../HPL_1ring.c"
  return (__retres5);
  }
}
}
# 117 "../HPL_1ring.c"
int HPL_bcast_1ring(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  struct HPL_S_grid *mem_13 ;
  struct HPL_S_grid *mem_14 ;
  struct HPL_S_grid *mem_15 ;
  int __retres16 ;

  {
  __CrestCall(3835, 12);

  {
  __CrestLoad(3838, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(3837, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(3836, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 137 "../HPL_1ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(3839, 1862, 1);
    __CrestLoad(3841, (unsigned long )0, (long long )1);
    __CrestStore(3842, (unsigned long )IFLAG);
# 137 "../HPL_1ring.c"
    *IFLAG = 1;
    __CrestLoad(3843, (unsigned long )0, (long long )1);
    __CrestStore(3844, (unsigned long )(& __retres16));
# 137 "../HPL_1ring.c"
    __retres16 = 1;
# 137 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3840, 1865, 0);

  }
  }
# 138 "../HPL_1ring.c"
  mem_13 = PANEL->grid;
  __CrestLoad(3845, (unsigned long )(& mem_13->npcol), (long long )mem_13->npcol);
  __CrestStore(3846, (unsigned long )(& size));
# 138 "../HPL_1ring.c"
  size = mem_13->npcol;
  {
  __CrestLoad(3849, (unsigned long )(& size), (long long )size);
  __CrestLoad(3848, (unsigned long )0, (long long )1);
  __CrestApply2(3847, 15, (long long )(size <= 1));
# 138 "../HPL_1ring.c"
  if (size <= 1) {
    __CrestBranch(3850, 1868, 1);
    __CrestLoad(3852, (unsigned long )0, (long long )1);
    __CrestStore(3853, (unsigned long )IFLAG);
# 139 "../HPL_1ring.c"
    *IFLAG = 1;
    __CrestLoad(3854, (unsigned long )0, (long long )1);
    __CrestStore(3855, (unsigned long )(& __retres16));
# 139 "../HPL_1ring.c"
    __retres16 = 1;
# 139 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3851, 1871, 0);

  }
  }
# 147 "../HPL_1ring.c"
  mem_14 = PANEL->grid;
  __CrestLoad(3856, (unsigned long )(& mem_14->mycol), (long long )mem_14->mycol);
  __CrestStore(3857, (unsigned long )(& rank));
# 147 "../HPL_1ring.c"
  rank = mem_14->mycol;
# 147 "../HPL_1ring.c"
  mem_15 = PANEL->grid;
  __CrestLoad(3858, (unsigned long )(& mem_15->row_comm), (long long )mem_15->row_comm);
  __CrestStore(3859, (unsigned long )(& comm));
# 147 "../HPL_1ring.c"
  comm = mem_15->row_comm;
  __CrestLoad(3860, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(3861, (unsigned long )(& root));
# 148 "../HPL_1ring.c"
  root = PANEL->pcol;
  __CrestLoad(3862, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(3863, (unsigned long )(& msgid));
# 148 "../HPL_1ring.c"
  msgid = PANEL->msgid;
  {
  __CrestLoad(3866, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(3865, (unsigned long )(& root), (long long )root);
  __CrestApply2(3864, 12, (long long )(rank == root));
# 150 "../HPL_1ring.c"
  if (rank == root) {
    __CrestBranch(3867, 1874, 1);
    {
    __CrestLoad(3873, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(3872, (unsigned long )(& size), (long long )size);
    __CrestLoad(3871, (unsigned long )0, (long long )1);
    __CrestApply2(3870, 1, (long long )(size - 1));
    __CrestApply2(3869, 13, (long long )(rank != size - 1));
# 152 "../HPL_1ring.c"
    if (rank != size - 1) {
      __CrestBranch(3874, 1875, 1);
      __CrestLoad(3878, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(3877, (unsigned long )0, (long long )1);
      __CrestApply2(3876, 0, (long long )(rank + 1));
      __CrestStore(3879, (unsigned long )(& tmp));
# 152 "../HPL_1ring.c"
      tmp = rank + 1;
    } else {
      __CrestBranch(3875, 1876, 0);
      __CrestLoad(3880, (unsigned long )0, (long long )0);
      __CrestStore(3881, (unsigned long )(& tmp));
# 152 "../HPL_1ring.c"
      tmp = 0;
    }
    }
    __CrestLoad(3882, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
    __CrestLoad(3883, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
    __CrestLoad(3884, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(3885, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(3886, (unsigned long )(& comm), (long long )comm);
# 152 "../HPL_1ring.c"
    ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    tmp, msgid, comm);
    __CrestHandleReturn(3888, (long long )ierr);
    __CrestStore(3887, (unsigned long )(& ierr));
  } else {
    __CrestBranch(3868, 1878, 0);
    {
    __CrestLoad(3891, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(3890, (unsigned long )0, (long long )0);
    __CrestApply2(3889, 13, (long long )(rank != 0));
# 157 "../HPL_1ring.c"
    if (rank != 0) {
      __CrestBranch(3892, 1879, 1);
      __CrestLoad(3896, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(3895, (unsigned long )0, (long long )1);
      __CrestApply2(3894, 1, (long long )(rank - 1));
      __CrestStore(3897, (unsigned long )(& prev));
# 157 "../HPL_1ring.c"
      prev = rank - 1;
    } else {
      __CrestBranch(3893, 1880, 0);
      __CrestLoad(3900, (unsigned long )(& size), (long long )size);
      __CrestLoad(3899, (unsigned long )0, (long long )1);
      __CrestApply2(3898, 1, (long long )(size - 1));
      __CrestStore(3901, (unsigned long )(& prev));
# 157 "../HPL_1ring.c"
      prev = size - 1;
    }
    }
    __CrestLoad(3902, (unsigned long )(& prev), (long long )prev);
    __CrestLoad(3903, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(3904, (unsigned long )(& comm), (long long )comm);
# 159 "../HPL_1ring.c"
    ierr = MPI_Iprobe(prev, msgid, comm, & go, & PANEL->status[0]);
    __CrestHandleReturn(3906, (long long )ierr);
    __CrestStore(3905, (unsigned long )(& ierr));
    {
    __CrestLoad(3909, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(3908, (unsigned long )0, (long long )0);
    __CrestApply2(3907, 12, (long long )(ierr == 0));
# 161 "../HPL_1ring.c"
    if (ierr == 0) {
      __CrestBranch(3910, 1883, 1);
      {
      __CrestLoad(3914, (unsigned long )(& go), (long long )go);
      __CrestLoad(3913, (unsigned long )0, (long long )0);
      __CrestApply2(3912, 13, (long long )(go != 0));
# 163 "../HPL_1ring.c"
      if (go != 0) {
        __CrestBranch(3915, 1884, 1);
        __CrestLoad(3917, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(3918, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(3919, (unsigned long )(& prev), (long long )prev);
        __CrestLoad(3920, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(3921, (unsigned long )(& comm), (long long )comm);
# 165 "../HPL_1ring.c"
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        prev, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(3923, (long long )ierr);
        __CrestStore(3922, (unsigned long )(& ierr));
        {
        __CrestLoad(3928, (unsigned long )(& rank), (long long )rank);
        __CrestLoad(3927, (unsigned long )(& size), (long long )size);
        __CrestLoad(3926, (unsigned long )0, (long long )1);
        __CrestApply2(3925, 1, (long long )(size - 1));
        __CrestApply2(3924, 13, (long long )(rank != size - 1));
# 167 "../HPL_1ring.c"
        if (rank != size - 1) {
          __CrestBranch(3929, 1886, 1);
          __CrestLoad(3933, (unsigned long )(& rank), (long long )rank);
          __CrestLoad(3932, (unsigned long )0, (long long )1);
          __CrestApply2(3931, 0, (long long )(rank + 1));
          __CrestStore(3934, (unsigned long )(& next));
# 167 "../HPL_1ring.c"
          next = rank + 1;
        } else {
          __CrestBranch(3930, 1887, 0);
          __CrestLoad(3935, (unsigned long )0, (long long )0);
          __CrestStore(3936, (unsigned long )(& next));
# 167 "../HPL_1ring.c"
          next = 0;
        }
        }
        {
        __CrestLoad(3939, (unsigned long )(& ierr), (long long )ierr);
        __CrestLoad(3938, (unsigned long )0, (long long )0);
        __CrestApply2(3937, 12, (long long )(ierr == 0));
# 168 "../HPL_1ring.c"
        if (ierr == 0) {
          __CrestBranch(3940, 1889, 1);
          {
          __CrestLoad(3944, (unsigned long )(& next), (long long )next);
          __CrestLoad(3943, (unsigned long )(& root), (long long )root);
          __CrestApply2(3942, 13, (long long )(next != root));
# 168 "../HPL_1ring.c"
          if (next != root) {
            __CrestBranch(3945, 1890, 1);
            __CrestLoad(3947, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
            __CrestLoad(3948, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
            __CrestLoad(3949, (unsigned long )(& next), (long long )next);
            __CrestLoad(3950, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(3951, (unsigned long )(& comm), (long long )comm);
# 170 "../HPL_1ring.c"
            ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                            next, msgid, comm);
            __CrestHandleReturn(3953, (long long )ierr);
            __CrestStore(3952, (unsigned long )(& ierr));
          } else {
            __CrestBranch(3946, 1891, 0);

          }
          }
        } else {
          __CrestBranch(3941, 1892, 0);

        }
        }
      } else {
        __CrestBranch(3916, 1893, 0);
        __CrestLoad(3954, (unsigned long )0, (long long )2);
        __CrestStore(3955, (unsigned long )IFLAG);
# 174 "../HPL_1ring.c"
        *IFLAG = 2;
        __CrestLoad(3956, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestStore(3957, (unsigned long )(& __retres16));
# 174 "../HPL_1ring.c"
        __retres16 = *IFLAG;
# 174 "../HPL_1ring.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(3911, 1896, 0);

    }
    }
  }
  }
  {
  __CrestLoad(3960, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(3959, (unsigned long )0, (long long )0);
  __CrestApply2(3958, 12, (long long )(ierr == 0));
# 181 "../HPL_1ring.c"
  if (ierr == 0) {
    __CrestBranch(3961, 1898, 1);
    __CrestLoad(3963, (unsigned long )0, (long long )1);
    __CrestStore(3964, (unsigned long )IFLAG);
# 181 "../HPL_1ring.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(3962, 1899, 0);
    __CrestLoad(3965, (unsigned long )0, (long long )0);
    __CrestStore(3966, (unsigned long )IFLAG);
# 181 "../HPL_1ring.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(3967, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(3968, (unsigned long )(& __retres16));
# 183 "../HPL_1ring.c"
  __retres16 = *IFLAG;
  return_label:
  {
  __CrestLoad(3969, (unsigned long )(& __retres16), (long long )__retres16);
  __CrestReturn(3970);
# 117 "../HPL_1ring.c"
  return (__retres16);
  }
}
}
# 187 "../HPL_1ring.c"
int HPL_bwait_1ring(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(3971, 13);

  {
  __CrestLoad(3974, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(3973, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(3972, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 205 "../HPL_1ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(3975, 1903, 1);
    __CrestLoad(3977, (unsigned long )0, (long long )1);
    __CrestStore(3978, (unsigned long )(& __retres5));
# 205 "../HPL_1ring.c"
    __retres5 = 1;
# 205 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3976, 1905, 0);

  }
  }
  {
# 206 "../HPL_1ring.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(3981, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(3980, (unsigned long )0, (long long )1);
  __CrestApply2(3979, 15, (long long )(mem_4->npcol <= 1));
# 206 "../HPL_1ring.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(3982, 1909, 1);
    __CrestLoad(3984, (unsigned long )0, (long long )1);
    __CrestStore(3985, (unsigned long )(& __retres5));
# 206 "../HPL_1ring.c"
    __retres5 = 1;
# 206 "../HPL_1ring.c"
    goto return_label;
  } else {
    __CrestBranch(3983, 1911, 0);

  }
  }
  }
# 211 "../HPL_1ring.c"
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
  __CrestHandleReturn(3987, (long long )ierr);
  __CrestStore(3986, (unsigned long )(& ierr));
  {
  __CrestLoad(3990, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(3989, (unsigned long )0, (long long )0);
  __CrestApply2(3988, 12, (long long )(ierr == 0));
# 212 "../HPL_1ring.c"
  if (ierr == 0) {
    __CrestBranch(3991, 1914, 1);
    __CrestLoad(3993, (unsigned long )0, (long long )1);
    __CrestStore(3994, (unsigned long )(& tmp));
# 212 "../HPL_1ring.c"
    tmp = 1;
  } else {
    __CrestBranch(3992, 1915, 0);
    __CrestLoad(3995, (unsigned long )0, (long long )0);
    __CrestStore(3996, (unsigned long )(& tmp));
# 212 "../HPL_1ring.c"
    tmp = 0;
  }
  }
  __CrestLoad(3997, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(3998, (unsigned long )(& __retres5));
# 212 "../HPL_1ring.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(3999, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4000);
# 187 "../HPL_1ring.c"
  return (__retres5);
  }
}
}
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 138 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_1rinM(HPL_T_panel *PANEL ) ;
# 139 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_1rinM(HPL_T_panel *PANEL , int *IFLAG ) ;
# 140 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_1rinM(HPL_T_panel *PANEL ) ;
# 59 "../HPL_1rinM.c"
int HPL_binit_1rinM(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4001, 14);

  {
  __CrestLoad(4004, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4003, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4002, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 77 "../HPL_1rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4005, 1919, 1);
    __CrestLoad(4007, (unsigned long )0, (long long )1);
    __CrestStore(4008, (unsigned long )(& __retres5));
# 77 "../HPL_1rinM.c"
    __retres5 = 1;
# 77 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4006, 1921, 0);

  }
  }
  {
# 78 "../HPL_1rinM.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4011, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4010, (unsigned long )0, (long long )1);
  __CrestApply2(4009, 15, (long long )(mem_4->npcol <= 1));
# 78 "../HPL_1rinM.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4012, 1925, 1);
    __CrestLoad(4014, (unsigned long )0, (long long )1);
    __CrestStore(4015, (unsigned long )(& __retres5));
# 78 "../HPL_1rinM.c"
    __retres5 = 1;
# 78 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4013, 1927, 0);

  }
  }
  }
  __CrestLoad(4016, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(4017, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestLoad(4018, (unsigned long )0, (long long )((int const )0));
# 89 "../HPL_1rinM.c"
  ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )0);
  __CrestHandleReturn(4020, (long long )ierr);
  __CrestStore(4019, (unsigned long )(& ierr));
  {
  __CrestLoad(4023, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4022, (unsigned long )0, (long long )0);
  __CrestApply2(4021, 12, (long long )(ierr == 0));
# 91 "../HPL_1rinM.c"
  if (ierr == 0) {
    __CrestBranch(4024, 1930, 1);
    __CrestLoad(4026, (unsigned long )0, (long long )1);
    __CrestStore(4027, (unsigned long )(& tmp));
# 91 "../HPL_1rinM.c"
    tmp = 1;
  } else {
    __CrestBranch(4025, 1931, 0);
    __CrestLoad(4028, (unsigned long )0, (long long )0);
    __CrestStore(4029, (unsigned long )(& tmp));
# 91 "../HPL_1rinM.c"
    tmp = 0;
  }
  }
  __CrestLoad(4030, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4031, (unsigned long )(& __retres5));
# 91 "../HPL_1rinM.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4032, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4033);
# 59 "../HPL_1rinM.c"
  return (__retres5);
  }
}
}
# 117 "../HPL_1rinM.c"
int HPL_bcast_1rinM(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  struct HPL_S_grid *mem_15 ;
  struct HPL_S_grid *mem_16 ;
  struct HPL_S_grid *mem_17 ;
  int __retres18 ;

  {
  __CrestCall(4034, 15);

  {
  __CrestLoad(4037, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4036, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4035, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 137 "../HPL_1rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4038, 1935, 1);
    __CrestLoad(4040, (unsigned long )0, (long long )1);
    __CrestStore(4041, (unsigned long )IFLAG);
# 137 "../HPL_1rinM.c"
    *IFLAG = 1;
    __CrestLoad(4042, (unsigned long )0, (long long )1);
    __CrestStore(4043, (unsigned long )(& __retres18));
# 137 "../HPL_1rinM.c"
    __retres18 = 1;
# 137 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4039, 1938, 0);

  }
  }
# 138 "../HPL_1rinM.c"
  mem_15 = PANEL->grid;
  __CrestLoad(4044, (unsigned long )(& mem_15->npcol), (long long )mem_15->npcol);
  __CrestStore(4045, (unsigned long )(& size));
# 138 "../HPL_1rinM.c"
  size = mem_15->npcol;
  {
  __CrestLoad(4048, (unsigned long )(& size), (long long )size);
  __CrestLoad(4047, (unsigned long )0, (long long )1);
  __CrestApply2(4046, 15, (long long )(size <= 1));
# 138 "../HPL_1rinM.c"
  if (size <= 1) {
    __CrestBranch(4049, 1941, 1);
    __CrestLoad(4051, (unsigned long )0, (long long )1);
    __CrestStore(4052, (unsigned long )IFLAG);
# 139 "../HPL_1rinM.c"
    *IFLAG = 1;
    __CrestLoad(4053, (unsigned long )0, (long long )1);
    __CrestStore(4054, (unsigned long )(& __retres18));
# 139 "../HPL_1rinM.c"
    __retres18 = 1;
# 139 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4050, 1944, 0);

  }
  }
# 147 "../HPL_1rinM.c"
  mem_16 = PANEL->grid;
  __CrestLoad(4055, (unsigned long )(& mem_16->mycol), (long long )mem_16->mycol);
  __CrestStore(4056, (unsigned long )(& rank));
# 147 "../HPL_1rinM.c"
  rank = mem_16->mycol;
# 147 "../HPL_1rinM.c"
  mem_17 = PANEL->grid;
  __CrestLoad(4057, (unsigned long )(& mem_17->row_comm), (long long )mem_17->row_comm);
  __CrestStore(4058, (unsigned long )(& comm));
# 147 "../HPL_1rinM.c"
  comm = mem_17->row_comm;
  __CrestLoad(4059, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(4060, (unsigned long )(& root));
# 148 "../HPL_1rinM.c"
  root = PANEL->pcol;
  __CrestLoad(4061, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(4062, (unsigned long )(& msgid));
# 148 "../HPL_1rinM.c"
  msgid = PANEL->msgid;
  {
  __CrestLoad(4067, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4066, (unsigned long )(& size), (long long )size);
  __CrestLoad(4065, (unsigned long )0, (long long )1);
  __CrestApply2(4064, 1, (long long )(size - 1));
  __CrestApply2(4063, 13, (long long )(rank != size - 1));
# 149 "../HPL_1rinM.c"
  if (rank != size - 1) {
    __CrestBranch(4068, 1947, 1);
    __CrestLoad(4072, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4071, (unsigned long )0, (long long )1);
    __CrestApply2(4070, 0, (long long )(rank + 1));
    __CrestStore(4073, (unsigned long )(& next));
# 149 "../HPL_1rinM.c"
    next = rank + 1;
  } else {
    __CrestBranch(4069, 1948, 0);
    __CrestLoad(4074, (unsigned long )0, (long long )0);
    __CrestStore(4075, (unsigned long )(& next));
# 149 "../HPL_1rinM.c"
    next = 0;
  }
  }
  {
  __CrestLoad(4078, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4077, (unsigned long )(& root), (long long )root);
  __CrestApply2(4076, 12, (long long )(rank == root));
# 151 "../HPL_1rinM.c"
  if (rank == root) {
    __CrestBranch(4079, 1950, 1);
    __CrestLoad(4081, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
    __CrestLoad(4082, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
    __CrestLoad(4083, (unsigned long )(& next), (long long )next);
    __CrestLoad(4084, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4085, (unsigned long )(& comm), (long long )comm);
# 153 "../HPL_1rinM.c"
    ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
    __CrestHandleReturn(4087, (long long )ierr);
    __CrestStore(4086, (unsigned long )(& ierr));
    {
    __CrestLoad(4090, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4089, (unsigned long )0, (long long )0);
    __CrestApply2(4088, 12, (long long )(ierr == 0));
# 154 "../HPL_1rinM.c"
    if (ierr == 0) {
      __CrestBranch(4091, 1952, 1);
      {
      __CrestLoad(4095, (unsigned long )(& size), (long long )size);
      __CrestLoad(4094, (unsigned long )0, (long long )2);
      __CrestApply2(4093, 14, (long long )(size > 2));
# 154 "../HPL_1rinM.c"
      if (size > 2) {
        __CrestBranch(4096, 1953, 1);
        {
        __CrestLoad(4102, (unsigned long )(& next), (long long )next);
        __CrestLoad(4101, (unsigned long )(& size), (long long )size);
        __CrestLoad(4100, (unsigned long )0, (long long )1);
        __CrestApply2(4099, 1, (long long )(size - 1));
        __CrestApply2(4098, 13, (long long )(next != size - 1));
# 156 "../HPL_1rinM.c"
        if (next != size - 1) {
          __CrestBranch(4103, 1954, 1);
          __CrestLoad(4107, (unsigned long )(& next), (long long )next);
          __CrestLoad(4106, (unsigned long )0, (long long )1);
          __CrestApply2(4105, 0, (long long )(next + 1));
          __CrestStore(4108, (unsigned long )(& tmp));
# 156 "../HPL_1rinM.c"
          tmp = next + 1;
        } else {
          __CrestBranch(4104, 1955, 0);
          __CrestLoad(4109, (unsigned long )0, (long long )0);
          __CrestStore(4110, (unsigned long )(& tmp));
# 156 "../HPL_1rinM.c"
          tmp = 0;
        }
        }
        __CrestLoad(4111, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(4112, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(4113, (unsigned long )(& tmp), (long long )tmp);
        __CrestLoad(4114, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(4115, (unsigned long )(& comm), (long long )comm);
# 156 "../HPL_1rinM.c"
        ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        tmp, msgid, comm);
        __CrestHandleReturn(4117, (long long )ierr);
        __CrestStore(4116, (unsigned long )(& ierr));
      } else {
        __CrestBranch(4097, 1957, 0);

      }
      }
    } else {
      __CrestBranch(4092, 1958, 0);

    }
    }
  } else {
    __CrestBranch(4080, 1959, 0);
    {
    __CrestLoad(4120, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4119, (unsigned long )0, (long long )0);
    __CrestApply2(4118, 13, (long long )(rank != 0));
# 162 "../HPL_1rinM.c"
    if (rank != 0) {
      __CrestBranch(4121, 1960, 1);
      __CrestLoad(4125, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(4124, (unsigned long )0, (long long )1);
      __CrestApply2(4123, 1, (long long )(rank - 1));
      __CrestStore(4126, (unsigned long )(& prev));
# 162 "../HPL_1rinM.c"
      prev = rank - 1;
    } else {
      __CrestBranch(4122, 1961, 0);
      __CrestLoad(4129, (unsigned long )(& size), (long long )size);
      __CrestLoad(4128, (unsigned long )0, (long long )1);
      __CrestApply2(4127, 1, (long long )(size - 1));
      __CrestStore(4130, (unsigned long )(& prev));
# 162 "../HPL_1rinM.c"
      prev = size - 1;
    }
    }
    {
    __CrestLoad(4133, (unsigned long )(& size), (long long )size);
    __CrestLoad(4132, (unsigned long )0, (long long )2);
    __CrestApply2(4131, 14, (long long )(size > 2));
# 163 "../HPL_1rinM.c"
    if (size > 2) {
      __CrestBranch(4134, 1963, 1);
      {
      __CrestLoad(4138, (unsigned long )(& prev), (long long )prev);
      __CrestLoad(4137, (unsigned long )0, (long long )0);
      __CrestApply2(4136, 13, (long long )(prev != 0));
# 163 "../HPL_1rinM.c"
      if (prev != 0) {
        __CrestBranch(4139, 1964, 1);
        __CrestLoad(4143, (unsigned long )(& prev), (long long )prev);
        __CrestLoad(4142, (unsigned long )0, (long long )1);
        __CrestApply2(4141, 1, (long long )(prev - 1));
        __CrestStore(4144, (unsigned long )(& tmp___0));
# 163 "../HPL_1rinM.c"
        tmp___0 = prev - 1;
      } else {
        __CrestBranch(4140, 1965, 0);
        __CrestLoad(4147, (unsigned long )(& size), (long long )size);
        __CrestLoad(4146, (unsigned long )0, (long long )1);
        __CrestApply2(4145, 1, (long long )(size - 1));
        __CrestStore(4148, (unsigned long )(& tmp___0));
# 163 "../HPL_1rinM.c"
        tmp___0 = size - 1;
      }
      }
      {
      __CrestLoad(4151, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(4150, (unsigned long )(& root), (long long )root);
      __CrestApply2(4149, 12, (long long )(tmp___0 == root));
# 163 "../HPL_1rinM.c"
      if (tmp___0 == root) {
        __CrestBranch(4152, 1967, 1);
        __CrestLoad(4154, (unsigned long )(& root), (long long )root);
        __CrestStore(4155, (unsigned long )(& partner));
# 164 "../HPL_1rinM.c"
        partner = root;
      } else {
        __CrestBranch(4153, 1968, 0);
        __CrestLoad(4156, (unsigned long )(& prev), (long long )prev);
        __CrestStore(4157, (unsigned long )(& partner));
# 165 "../HPL_1rinM.c"
        partner = prev;
      }
      }
    } else {
      __CrestBranch(4135, 1969, 0);
      __CrestLoad(4158, (unsigned long )(& prev), (long long )prev);
      __CrestStore(4159, (unsigned long )(& partner));
# 165 "../HPL_1rinM.c"
      partner = prev;
    }
    }
    __CrestLoad(4160, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(4161, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4162, (unsigned long )(& comm), (long long )comm);
# 167 "../HPL_1rinM.c"
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
    __CrestHandleReturn(4164, (long long )ierr);
    __CrestStore(4163, (unsigned long )(& ierr));
    {
    __CrestLoad(4167, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4166, (unsigned long )0, (long long )0);
    __CrestApply2(4165, 12, (long long )(ierr == 0));
# 169 "../HPL_1rinM.c"
    if (ierr == 0) {
      __CrestBranch(4168, 1972, 1);
      {
      __CrestLoad(4172, (unsigned long )(& go), (long long )go);
      __CrestLoad(4171, (unsigned long )0, (long long )0);
      __CrestApply2(4170, 13, (long long )(go != 0));
# 171 "../HPL_1rinM.c"
      if (go != 0) {
        __CrestBranch(4173, 1973, 1);
        __CrestLoad(4175, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(4176, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(4177, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(4178, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(4179, (unsigned long )(& comm), (long long )comm);
# 173 "../HPL_1rinM.c"
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(4181, (long long )ierr);
        __CrestStore(4180, (unsigned long )(& ierr));
        {
        __CrestLoad(4184, (unsigned long )(& ierr), (long long )ierr);
        __CrestLoad(4183, (unsigned long )0, (long long )0);
        __CrestApply2(4182, 12, (long long )(ierr == 0));
# 175 "../HPL_1rinM.c"
        if (ierr == 0) {
          __CrestBranch(4185, 1975, 1);
          {
          __CrestLoad(4189, (unsigned long )(& prev), (long long )prev);
          __CrestLoad(4188, (unsigned long )(& root), (long long )root);
          __CrestApply2(4187, 13, (long long )(prev != root));
# 175 "../HPL_1rinM.c"
          if (prev != root) {
            __CrestBranch(4190, 1976, 1);
            {
            __CrestLoad(4194, (unsigned long )(& next), (long long )next);
            __CrestLoad(4193, (unsigned long )(& root), (long long )root);
            __CrestApply2(4192, 13, (long long )(next != root));
# 175 "../HPL_1rinM.c"
            if (next != root) {
              __CrestBranch(4195, 1977, 1);
              __CrestLoad(4197, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
              __CrestLoad(4198, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
              __CrestLoad(4199, (unsigned long )(& next), (long long )next);
              __CrestLoad(4200, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(4201, (unsigned long )(& comm), (long long )comm);
# 178 "../HPL_1rinM.c"
              ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0],
                              PANEL->dtypes[0], next, msgid, comm);
              __CrestHandleReturn(4203, (long long )ierr);
              __CrestStore(4202, (unsigned long )(& ierr));
            } else {
              __CrestBranch(4196, 1978, 0);

            }
            }
          } else {
            __CrestBranch(4191, 1979, 0);

          }
          }
        } else {
          __CrestBranch(4186, 1980, 0);

        }
        }
      } else {
        __CrestBranch(4174, 1981, 0);
        __CrestLoad(4204, (unsigned long )0, (long long )2);
        __CrestStore(4205, (unsigned long )IFLAG);
# 182 "../HPL_1rinM.c"
        *IFLAG = 2;
        __CrestLoad(4206, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestStore(4207, (unsigned long )(& __retres18));
# 182 "../HPL_1rinM.c"
        __retres18 = *IFLAG;
# 182 "../HPL_1rinM.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(4169, 1984, 0);

    }
    }
  }
  }
  {
  __CrestLoad(4210, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4209, (unsigned long )0, (long long )0);
  __CrestApply2(4208, 12, (long long )(ierr == 0));
# 189 "../HPL_1rinM.c"
  if (ierr == 0) {
    __CrestBranch(4211, 1986, 1);
    __CrestLoad(4213, (unsigned long )0, (long long )1);
    __CrestStore(4214, (unsigned long )IFLAG);
# 189 "../HPL_1rinM.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(4212, 1987, 0);
    __CrestLoad(4215, (unsigned long )0, (long long )0);
    __CrestStore(4216, (unsigned long )IFLAG);
# 189 "../HPL_1rinM.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(4217, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(4218, (unsigned long )(& __retres18));
# 191 "../HPL_1rinM.c"
  __retres18 = *IFLAG;
  return_label:
  {
  __CrestLoad(4219, (unsigned long )(& __retres18), (long long )__retres18);
  __CrestReturn(4220);
# 117 "../HPL_1rinM.c"
  return (__retres18);
  }
}
}
# 195 "../HPL_1rinM.c"
int HPL_bwait_1rinM(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4221, 16);

  {
  __CrestLoad(4224, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4223, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4222, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 213 "../HPL_1rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4225, 1991, 1);
    __CrestLoad(4227, (unsigned long )0, (long long )1);
    __CrestStore(4228, (unsigned long )(& __retres5));
# 213 "../HPL_1rinM.c"
    __retres5 = 1;
# 213 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4226, 1993, 0);

  }
  }
  {
# 214 "../HPL_1rinM.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4231, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4230, (unsigned long )0, (long long )1);
  __CrestApply2(4229, 15, (long long )(mem_4->npcol <= 1));
# 214 "../HPL_1rinM.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4232, 1997, 1);
    __CrestLoad(4234, (unsigned long )0, (long long )1);
    __CrestStore(4235, (unsigned long )(& __retres5));
# 214 "../HPL_1rinM.c"
    __retres5 = 1;
# 214 "../HPL_1rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4233, 1999, 0);

  }
  }
  }
# 219 "../HPL_1rinM.c"
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
  __CrestHandleReturn(4237, (long long )ierr);
  __CrestStore(4236, (unsigned long )(& ierr));
  {
  __CrestLoad(4240, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4239, (unsigned long )0, (long long )0);
  __CrestApply2(4238, 12, (long long )(ierr == 0));
# 220 "../HPL_1rinM.c"
  if (ierr == 0) {
    __CrestBranch(4241, 2002, 1);
    __CrestLoad(4243, (unsigned long )0, (long long )1);
    __CrestStore(4244, (unsigned long )(& tmp));
# 220 "../HPL_1rinM.c"
    tmp = 1;
  } else {
    __CrestBranch(4242, 2003, 0);
    __CrestLoad(4245, (unsigned long )0, (long long )0);
    __CrestStore(4246, (unsigned long )(& tmp));
# 220 "../HPL_1rinM.c"
    tmp = 0;
  }
  }
  __CrestLoad(4247, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4248, (unsigned long )(& __retres5));
# 220 "../HPL_1rinM.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4249, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4250);
# 195 "../HPL_1rinM.c"
  return (__retres5);
  }
}
}
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_2ring(HPL_T_panel *PANEL ) ;
# 143 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_2ring(HPL_T_panel *PANEL , int *IFLAG ) ;
# 144 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_2ring(HPL_T_panel *PANEL ) ;
# 59 "../HPL_2ring.c"
int HPL_binit_2ring(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4251, 17);

  {
  __CrestLoad(4254, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4253, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4252, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 77 "../HPL_2ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4255, 2007, 1);
    __CrestLoad(4257, (unsigned long )0, (long long )1);
    __CrestStore(4258, (unsigned long )(& __retres5));
# 77 "../HPL_2ring.c"
    __retres5 = 1;
# 77 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4256, 2009, 0);

  }
  }
  {
# 78 "../HPL_2ring.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4261, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4260, (unsigned long )0, (long long )1);
  __CrestApply2(4259, 15, (long long )(mem_4->npcol <= 1));
# 78 "../HPL_2ring.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4262, 2013, 1);
    __CrestLoad(4264, (unsigned long )0, (long long )1);
    __CrestStore(4265, (unsigned long )(& __retres5));
# 78 "../HPL_2ring.c"
    __retres5 = 1;
# 78 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4263, 2015, 0);

  }
  }
  }
  __CrestLoad(4266, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(4267, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestLoad(4268, (unsigned long )0, (long long )((int const )0));
# 89 "../HPL_2ring.c"
  ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )0);
  __CrestHandleReturn(4270, (long long )ierr);
  __CrestStore(4269, (unsigned long )(& ierr));
  {
  __CrestLoad(4273, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4272, (unsigned long )0, (long long )0);
  __CrestApply2(4271, 12, (long long )(ierr == 0));
# 91 "../HPL_2ring.c"
  if (ierr == 0) {
    __CrestBranch(4274, 2018, 1);
    __CrestLoad(4276, (unsigned long )0, (long long )1);
    __CrestStore(4277, (unsigned long )(& tmp));
# 91 "../HPL_2ring.c"
    tmp = 1;
  } else {
    __CrestBranch(4275, 2019, 0);
    __CrestLoad(4278, (unsigned long )0, (long long )0);
    __CrestStore(4279, (unsigned long )(& tmp));
# 91 "../HPL_2ring.c"
    tmp = 0;
  }
  }
  __CrestLoad(4280, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4281, (unsigned long )(& __retres5));
# 91 "../HPL_2ring.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4282, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4283);
# 59 "../HPL_2ring.c"
  return (__retres5);
  }
}
}
# 117 "../HPL_2ring.c"
int HPL_bcast_2ring(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int rank ;
  int roo2 ;
  int root ;
  int size ;
  struct HPL_S_grid *mem_13 ;
  struct HPL_S_grid *mem_14 ;
  struct HPL_S_grid *mem_15 ;
  int __retres16 ;

  {
  __CrestCall(4284, 18);

  {
  __CrestLoad(4287, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4286, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4285, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 137 "../HPL_2ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4288, 2023, 1);
    __CrestLoad(4290, (unsigned long )0, (long long )1);
    __CrestStore(4291, (unsigned long )IFLAG);
# 137 "../HPL_2ring.c"
    *IFLAG = 1;
    __CrestLoad(4292, (unsigned long )0, (long long )1);
    __CrestStore(4293, (unsigned long )(& __retres16));
# 137 "../HPL_2ring.c"
    __retres16 = 1;
# 137 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4289, 2026, 0);

  }
  }
# 138 "../HPL_2ring.c"
  mem_13 = PANEL->grid;
  __CrestLoad(4294, (unsigned long )(& mem_13->npcol), (long long )mem_13->npcol);
  __CrestStore(4295, (unsigned long )(& size));
# 138 "../HPL_2ring.c"
  size = mem_13->npcol;
  {
  __CrestLoad(4298, (unsigned long )(& size), (long long )size);
  __CrestLoad(4297, (unsigned long )0, (long long )1);
  __CrestApply2(4296, 15, (long long )(size <= 1));
# 138 "../HPL_2ring.c"
  if (size <= 1) {
    __CrestBranch(4299, 2029, 1);
    __CrestLoad(4301, (unsigned long )0, (long long )1);
    __CrestStore(4302, (unsigned long )IFLAG);
# 139 "../HPL_2ring.c"
    *IFLAG = 1;
    __CrestLoad(4303, (unsigned long )0, (long long )1);
    __CrestStore(4304, (unsigned long )(& __retres16));
# 139 "../HPL_2ring.c"
    __retres16 = 1;
# 139 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4300, 2032, 0);

  }
  }
# 147 "../HPL_2ring.c"
  mem_14 = PANEL->grid;
  __CrestLoad(4305, (unsigned long )(& mem_14->mycol), (long long )mem_14->mycol);
  __CrestStore(4306, (unsigned long )(& rank));
# 147 "../HPL_2ring.c"
  rank = mem_14->mycol;
# 147 "../HPL_2ring.c"
  mem_15 = PANEL->grid;
  __CrestLoad(4307, (unsigned long )(& mem_15->row_comm), (long long )mem_15->row_comm);
  __CrestStore(4308, (unsigned long )(& comm));
# 147 "../HPL_2ring.c"
  comm = mem_15->row_comm;
  __CrestLoad(4309, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(4310, (unsigned long )(& root));
# 148 "../HPL_2ring.c"
  root = PANEL->pcol;
  __CrestLoad(4311, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(4312, (unsigned long )(& msgid));
# 148 "../HPL_2ring.c"
  msgid = PANEL->msgid;
  {
  __CrestLoad(4317, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4316, (unsigned long )(& size), (long long )size);
  __CrestLoad(4315, (unsigned long )0, (long long )1);
  __CrestApply2(4314, 1, (long long )(size - 1));
  __CrestApply2(4313, 13, (long long )(rank != size - 1));
# 149 "../HPL_2ring.c"
  if (rank != size - 1) {
    __CrestBranch(4318, 2035, 1);
    __CrestLoad(4322, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4321, (unsigned long )0, (long long )1);
    __CrestApply2(4320, 0, (long long )(rank + 1));
    __CrestStore(4323, (unsigned long )(& next));
# 149 "../HPL_2ring.c"
    next = rank + 1;
  } else {
    __CrestBranch(4319, 2036, 0);
    __CrestLoad(4324, (unsigned long )0, (long long )0);
    __CrestStore(4325, (unsigned long )(& next));
# 149 "../HPL_2ring.c"
    next = 0;
  }
  }
  __CrestLoad(4330, (unsigned long )(& size), (long long )size);
  __CrestLoad(4329, (unsigned long )0, (long long )1);
  __CrestApply2(4328, 0, (long long )(size + 1));
  __CrestLoad(4327, (unsigned long )0, (long long )1);
  __CrestApply2(4326, 9, (long long )((size + 1) >> 1));
  __CrestStore(4331, (unsigned long )(& roo2));
# 149 "../HPL_2ring.c"
  roo2 = (size + 1) >> 1;
  {
  __CrestLoad(4336, (unsigned long )(& root), (long long )root);
  __CrestLoad(4335, (unsigned long )(& roo2), (long long )roo2);
  __CrestApply2(4334, 0, (long long )(root + roo2));
  __CrestLoad(4333, (unsigned long )(& size), (long long )size);
  __CrestApply2(4332, 16, (long long )(root + roo2 < size));
# 150 "../HPL_2ring.c"
  if (root + roo2 < size) {
    __CrestBranch(4337, 2039, 1);
    __CrestLoad(4341, (unsigned long )(& root), (long long )root);
    __CrestLoad(4340, (unsigned long )(& roo2), (long long )roo2);
    __CrestApply2(4339, 0, (long long )(root + roo2));
    __CrestStore(4342, (unsigned long )(& roo2));
# 150 "../HPL_2ring.c"
    roo2 = root + roo2;
  } else {
    __CrestBranch(4338, 2040, 0);
    __CrestLoad(4347, (unsigned long )(& root), (long long )root);
    __CrestLoad(4346, (unsigned long )(& roo2), (long long )roo2);
    __CrestApply2(4345, 0, (long long )(root + roo2));
    __CrestLoad(4344, (unsigned long )(& size), (long long )size);
    __CrestApply2(4343, 1, (long long )((root + roo2) - size));
    __CrestStore(4348, (unsigned long )(& roo2));
# 150 "../HPL_2ring.c"
    roo2 = (root + roo2) - size;
  }
  }
  {
  __CrestLoad(4351, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4350, (unsigned long )(& root), (long long )root);
  __CrestApply2(4349, 12, (long long )(rank == root));
# 152 "../HPL_2ring.c"
  if (rank == root) {
    __CrestBranch(4352, 2042, 1);
    __CrestLoad(4354, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
    __CrestLoad(4355, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
    __CrestLoad(4356, (unsigned long )(& next), (long long )next);
    __CrestLoad(4357, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4358, (unsigned long )(& comm), (long long )comm);
# 154 "../HPL_2ring.c"
    ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
    __CrestHandleReturn(4360, (long long )ierr);
    __CrestStore(4359, (unsigned long )(& ierr));
    {
    __CrestLoad(4363, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4362, (unsigned long )0, (long long )0);
    __CrestApply2(4361, 12, (long long )(ierr == 0));
# 155 "../HPL_2ring.c"
    if (ierr == 0) {
      __CrestBranch(4364, 2044, 1);
      {
      __CrestLoad(4368, (unsigned long )(& size), (long long )size);
      __CrestLoad(4367, (unsigned long )0, (long long )2);
      __CrestApply2(4366, 14, (long long )(size > 2));
# 155 "../HPL_2ring.c"
      if (size > 2) {
        __CrestBranch(4369, 2045, 1);
        __CrestLoad(4371, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(4372, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(4373, (unsigned long )(& roo2), (long long )roo2);
        __CrestLoad(4374, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(4375, (unsigned long )(& comm), (long long )comm);
# 157 "../HPL_2ring.c"
        ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        roo2, msgid, comm);
        __CrestHandleReturn(4377, (long long )ierr);
        __CrestStore(4376, (unsigned long )(& ierr));
      } else {
        __CrestBranch(4370, 2046, 0);

      }
      }
    } else {
      __CrestBranch(4365, 2047, 0);

    }
    }
  } else {
    __CrestBranch(4353, 2048, 0);
    {
    __CrestLoad(4380, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4379, (unsigned long )0, (long long )0);
    __CrestApply2(4378, 13, (long long )(rank != 0));
# 163 "../HPL_2ring.c"
    if (rank != 0) {
      __CrestBranch(4381, 2049, 1);
      __CrestLoad(4385, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(4384, (unsigned long )0, (long long )1);
      __CrestApply2(4383, 1, (long long )(rank - 1));
      __CrestStore(4386, (unsigned long )(& partner));
# 163 "../HPL_2ring.c"
      partner = rank - 1;
    } else {
      __CrestBranch(4382, 2050, 0);
      __CrestLoad(4389, (unsigned long )(& size), (long long )size);
      __CrestLoad(4388, (unsigned long )0, (long long )1);
      __CrestApply2(4387, 1, (long long )(size - 1));
      __CrestStore(4390, (unsigned long )(& partner));
# 163 "../HPL_2ring.c"
      partner = size - 1;
    }
    }
    {
    __CrestLoad(4393, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(4392, (unsigned long )(& root), (long long )root);
    __CrestApply2(4391, 12, (long long )(partner == root));
# 164 "../HPL_2ring.c"
    if (partner == root) {
      __CrestBranch(4394, 2052, 1);
      __CrestLoad(4396, (unsigned long )(& root), (long long )root);
      __CrestStore(4397, (unsigned long )(& partner));
# 164 "../HPL_2ring.c"
      partner = root;
    } else {
      __CrestBranch(4395, 2053, 0);
      {
      __CrestLoad(4400, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(4399, (unsigned long )(& roo2), (long long )roo2);
      __CrestApply2(4398, 12, (long long )(rank == roo2));
# 164 "../HPL_2ring.c"
      if (rank == roo2) {
        __CrestBranch(4401, 2054, 1);
        __CrestLoad(4403, (unsigned long )(& root), (long long )root);
        __CrestStore(4404, (unsigned long )(& partner));
# 164 "../HPL_2ring.c"
        partner = root;
      } else {
        __CrestBranch(4402, 2055, 0);

      }
      }
    }
    }
    __CrestLoad(4405, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(4406, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4407, (unsigned long )(& comm), (long long )comm);
# 166 "../HPL_2ring.c"
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
    __CrestHandleReturn(4409, (long long )ierr);
    __CrestStore(4408, (unsigned long )(& ierr));
    {
    __CrestLoad(4412, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4411, (unsigned long )0, (long long )0);
    __CrestApply2(4410, 12, (long long )(ierr == 0));
# 168 "../HPL_2ring.c"
    if (ierr == 0) {
      __CrestBranch(4413, 2058, 1);
      {
      __CrestLoad(4417, (unsigned long )(& go), (long long )go);
      __CrestLoad(4416, (unsigned long )0, (long long )0);
      __CrestApply2(4415, 13, (long long )(go != 0));
# 170 "../HPL_2ring.c"
      if (go != 0) {
        __CrestBranch(4418, 2059, 1);
        __CrestLoad(4420, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(4421, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(4422, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(4423, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(4424, (unsigned long )(& comm), (long long )comm);
# 172 "../HPL_2ring.c"
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(4426, (long long )ierr);
        __CrestStore(4425, (unsigned long )(& ierr));
        {
        __CrestLoad(4429, (unsigned long )(& ierr), (long long )ierr);
        __CrestLoad(4428, (unsigned long )0, (long long )0);
        __CrestApply2(4427, 12, (long long )(ierr == 0));
# 174 "../HPL_2ring.c"
        if (ierr == 0) {
          __CrestBranch(4430, 2061, 1);
          {
          __CrestLoad(4434, (unsigned long )(& next), (long long )next);
          __CrestLoad(4433, (unsigned long )(& roo2), (long long )roo2);
          __CrestApply2(4432, 13, (long long )(next != roo2));
# 174 "../HPL_2ring.c"
          if (next != roo2) {
            __CrestBranch(4435, 2062, 1);
            {
            __CrestLoad(4439, (unsigned long )(& next), (long long )next);
            __CrestLoad(4438, (unsigned long )(& root), (long long )root);
            __CrestApply2(4437, 13, (long long )(next != root));
# 174 "../HPL_2ring.c"
            if (next != root) {
              __CrestBranch(4440, 2063, 1);
              __CrestLoad(4442, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
              __CrestLoad(4443, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
              __CrestLoad(4444, (unsigned long )(& next), (long long )next);
              __CrestLoad(4445, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(4446, (unsigned long )(& comm), (long long )comm);
# 177 "../HPL_2ring.c"
              ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0],
                              PANEL->dtypes[0], next, msgid, comm);
              __CrestHandleReturn(4448, (long long )ierr);
              __CrestStore(4447, (unsigned long )(& ierr));
            } else {
              __CrestBranch(4441, 2064, 0);

            }
            }
          } else {
            __CrestBranch(4436, 2065, 0);

          }
          }
        } else {
          __CrestBranch(4431, 2066, 0);

        }
        }
      } else {
        __CrestBranch(4419, 2067, 0);
        __CrestLoad(4449, (unsigned long )0, (long long )2);
        __CrestStore(4450, (unsigned long )IFLAG);
# 181 "../HPL_2ring.c"
        *IFLAG = 2;
        __CrestLoad(4451, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestStore(4452, (unsigned long )(& __retres16));
# 181 "../HPL_2ring.c"
        __retres16 = *IFLAG;
# 181 "../HPL_2ring.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(4414, 2070, 0);

    }
    }
  }
  }
  {
  __CrestLoad(4455, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4454, (unsigned long )0, (long long )0);
  __CrestApply2(4453, 12, (long long )(ierr == 0));
# 188 "../HPL_2ring.c"
  if (ierr == 0) {
    __CrestBranch(4456, 2072, 1);
    __CrestLoad(4458, (unsigned long )0, (long long )1);
    __CrestStore(4459, (unsigned long )IFLAG);
# 188 "../HPL_2ring.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(4457, 2073, 0);
    __CrestLoad(4460, (unsigned long )0, (long long )0);
    __CrestStore(4461, (unsigned long )IFLAG);
# 188 "../HPL_2ring.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(4462, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(4463, (unsigned long )(& __retres16));
# 190 "../HPL_2ring.c"
  __retres16 = *IFLAG;
  return_label:
  {
  __CrestLoad(4464, (unsigned long )(& __retres16), (long long )__retres16);
  __CrestReturn(4465);
# 117 "../HPL_2ring.c"
  return (__retres16);
  }
}
}
# 194 "../HPL_2ring.c"
int HPL_bwait_2ring(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4466, 19);

  {
  __CrestLoad(4469, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4468, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4467, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 212 "../HPL_2ring.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4470, 2077, 1);
    __CrestLoad(4472, (unsigned long )0, (long long )1);
    __CrestStore(4473, (unsigned long )(& __retres5));
# 212 "../HPL_2ring.c"
    __retres5 = 1;
# 212 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4471, 2079, 0);

  }
  }
  {
# 213 "../HPL_2ring.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4476, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4475, (unsigned long )0, (long long )1);
  __CrestApply2(4474, 15, (long long )(mem_4->npcol <= 1));
# 213 "../HPL_2ring.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4477, 2083, 1);
    __CrestLoad(4479, (unsigned long )0, (long long )1);
    __CrestStore(4480, (unsigned long )(& __retres5));
# 213 "../HPL_2ring.c"
    __retres5 = 1;
# 213 "../HPL_2ring.c"
    goto return_label;
  } else {
    __CrestBranch(4478, 2085, 0);

  }
  }
  }
# 218 "../HPL_2ring.c"
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
  __CrestHandleReturn(4482, (long long )ierr);
  __CrestStore(4481, (unsigned long )(& ierr));
  {
  __CrestLoad(4485, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4484, (unsigned long )0, (long long )0);
  __CrestApply2(4483, 12, (long long )(ierr == 0));
# 220 "../HPL_2ring.c"
  if (ierr == 0) {
    __CrestBranch(4486, 2088, 1);
    __CrestLoad(4488, (unsigned long )0, (long long )1);
    __CrestStore(4489, (unsigned long )(& tmp));
# 220 "../HPL_2ring.c"
    tmp = 1;
  } else {
    __CrestBranch(4487, 2089, 0);
    __CrestLoad(4490, (unsigned long )0, (long long )0);
    __CrestStore(4491, (unsigned long )(& tmp));
# 220 "../HPL_2ring.c"
    tmp = 0;
  }
  }
  __CrestLoad(4492, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4493, (unsigned long )(& __retres5));
# 220 "../HPL_2ring.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4494, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4495);
# 194 "../HPL_2ring.c"
  return (__retres5);
  }
}
}
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 146 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_2rinM(HPL_T_panel *PANEL ) ;
# 147 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_2rinM(HPL_T_panel *PANEL , int *IFLAG ) ;
# 148 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_2rinM(HPL_T_panel *PANEL ) ;
# 59 "../HPL_2rinM.c"
int HPL_binit_2rinM(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4496, 20);

  {
  __CrestLoad(4499, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4498, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4497, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 77 "../HPL_2rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4500, 2093, 1);
    __CrestLoad(4502, (unsigned long )0, (long long )1);
    __CrestStore(4503, (unsigned long )(& __retres5));
# 77 "../HPL_2rinM.c"
    __retres5 = 1;
# 77 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4501, 2095, 0);

  }
  }
  {
# 78 "../HPL_2rinM.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4506, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4505, (unsigned long )0, (long long )1);
  __CrestApply2(4504, 15, (long long )(mem_4->npcol <= 1));
# 78 "../HPL_2rinM.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4507, 2099, 1);
    __CrestLoad(4509, (unsigned long )0, (long long )1);
    __CrestStore(4510, (unsigned long )(& __retres5));
# 78 "../HPL_2rinM.c"
    __retres5 = 1;
# 78 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4508, 2101, 0);

  }
  }
  }
  __CrestLoad(4511, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(4512, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestLoad(4513, (unsigned long )0, (long long )((int const )0));
# 89 "../HPL_2rinM.c"
  ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )0);
  __CrestHandleReturn(4515, (long long )ierr);
  __CrestStore(4514, (unsigned long )(& ierr));
  {
  __CrestLoad(4518, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4517, (unsigned long )0, (long long )0);
  __CrestApply2(4516, 12, (long long )(ierr == 0));
# 91 "../HPL_2rinM.c"
  if (ierr == 0) {
    __CrestBranch(4519, 2104, 1);
    __CrestLoad(4521, (unsigned long )0, (long long )1);
    __CrestStore(4522, (unsigned long )(& tmp));
# 91 "../HPL_2rinM.c"
    tmp = 1;
  } else {
    __CrestBranch(4520, 2105, 0);
    __CrestLoad(4523, (unsigned long )0, (long long )0);
    __CrestStore(4524, (unsigned long )(& tmp));
# 91 "../HPL_2rinM.c"
    tmp = 0;
  }
  }
  __CrestLoad(4525, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4526, (unsigned long )(& __retres5));
# 91 "../HPL_2rinM.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4527, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4528);
# 59 "../HPL_2rinM.c"
  return (__retres5);
  }
}
}
# 117 "../HPL_2rinM.c"
int HPL_bcast_2rinM(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int prev ;
  int rank ;
  int roo2 ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct HPL_S_grid *mem_17 ;
  struct HPL_S_grid *mem_18 ;
  struct HPL_S_grid *mem_19 ;
  int __retres20 ;

  {
  __CrestCall(4529, 21);

  {
  __CrestLoad(4532, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4531, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4530, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 137 "../HPL_2rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4533, 2109, 1);
    __CrestLoad(4535, (unsigned long )0, (long long )1);
    __CrestStore(4536, (unsigned long )IFLAG);
# 137 "../HPL_2rinM.c"
    *IFLAG = 1;
    __CrestLoad(4537, (unsigned long )0, (long long )1);
    __CrestStore(4538, (unsigned long )(& __retres20));
# 137 "../HPL_2rinM.c"
    __retres20 = 1;
# 137 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4534, 2112, 0);

  }
  }
# 138 "../HPL_2rinM.c"
  mem_17 = PANEL->grid;
  __CrestLoad(4539, (unsigned long )(& mem_17->npcol), (long long )mem_17->npcol);
  __CrestStore(4540, (unsigned long )(& size));
# 138 "../HPL_2rinM.c"
  size = mem_17->npcol;
  {
  __CrestLoad(4543, (unsigned long )(& size), (long long )size);
  __CrestLoad(4542, (unsigned long )0, (long long )1);
  __CrestApply2(4541, 15, (long long )(size <= 1));
# 138 "../HPL_2rinM.c"
  if (size <= 1) {
    __CrestBranch(4544, 2115, 1);
    __CrestLoad(4546, (unsigned long )0, (long long )1);
    __CrestStore(4547, (unsigned long )IFLAG);
# 139 "../HPL_2rinM.c"
    *IFLAG = 1;
    __CrestLoad(4548, (unsigned long )0, (long long )1);
    __CrestStore(4549, (unsigned long )(& __retres20));
# 139 "../HPL_2rinM.c"
    __retres20 = 1;
# 139 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4545, 2118, 0);

  }
  }
# 147 "../HPL_2rinM.c"
  mem_18 = PANEL->grid;
  __CrestLoad(4550, (unsigned long )(& mem_18->mycol), (long long )mem_18->mycol);
  __CrestStore(4551, (unsigned long )(& rank));
# 147 "../HPL_2rinM.c"
  rank = mem_18->mycol;
# 147 "../HPL_2rinM.c"
  mem_19 = PANEL->grid;
  __CrestLoad(4552, (unsigned long )(& mem_19->row_comm), (long long )mem_19->row_comm);
  __CrestStore(4553, (unsigned long )(& comm));
# 147 "../HPL_2rinM.c"
  comm = mem_19->row_comm;
  __CrestLoad(4554, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(4555, (unsigned long )(& root));
# 148 "../HPL_2rinM.c"
  root = PANEL->pcol;
  __CrestLoad(4556, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(4557, (unsigned long )(& msgid));
# 148 "../HPL_2rinM.c"
  msgid = PANEL->msgid;
  {
  __CrestLoad(4562, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4561, (unsigned long )(& size), (long long )size);
  __CrestLoad(4560, (unsigned long )0, (long long )1);
  __CrestApply2(4559, 1, (long long )(size - 1));
  __CrestApply2(4558, 13, (long long )(rank != size - 1));
# 149 "../HPL_2rinM.c"
  if (rank != size - 1) {
    __CrestBranch(4563, 2121, 1);
    __CrestLoad(4567, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4566, (unsigned long )0, (long long )1);
    __CrestApply2(4565, 0, (long long )(rank + 1));
    __CrestStore(4568, (unsigned long )(& next));
# 149 "../HPL_2rinM.c"
    next = rank + 1;
  } else {
    __CrestBranch(4564, 2122, 0);
    __CrestLoad(4569, (unsigned long )0, (long long )0);
    __CrestStore(4570, (unsigned long )(& next));
# 149 "../HPL_2rinM.c"
    next = 0;
  }
  }
  __CrestLoad(4575, (unsigned long )(& size), (long long )size);
  __CrestLoad(4574, (unsigned long )0, (long long )1);
  __CrestApply2(4573, 0, (long long )(size + 1));
  __CrestLoad(4572, (unsigned long )0, (long long )1);
  __CrestApply2(4571, 9, (long long )((size + 1) >> 1));
  __CrestStore(4576, (unsigned long )(& roo2));
# 149 "../HPL_2rinM.c"
  roo2 = (size + 1) >> 1;
  {
  __CrestLoad(4581, (unsigned long )(& root), (long long )root);
  __CrestLoad(4580, (unsigned long )(& roo2), (long long )roo2);
  __CrestApply2(4579, 0, (long long )(root + roo2));
  __CrestLoad(4578, (unsigned long )(& size), (long long )size);
  __CrestApply2(4577, 16, (long long )(root + roo2 < size));
# 150 "../HPL_2rinM.c"
  if (root + roo2 < size) {
    __CrestBranch(4582, 2125, 1);
    __CrestLoad(4586, (unsigned long )(& root), (long long )root);
    __CrestLoad(4585, (unsigned long )(& roo2), (long long )roo2);
    __CrestApply2(4584, 0, (long long )(root + roo2));
    __CrestStore(4587, (unsigned long )(& roo2));
# 150 "../HPL_2rinM.c"
    roo2 = root + roo2;
  } else {
    __CrestBranch(4583, 2126, 0);
    __CrestLoad(4592, (unsigned long )(& root), (long long )root);
    __CrestLoad(4591, (unsigned long )(& roo2), (long long )roo2);
    __CrestApply2(4590, 0, (long long )(root + roo2));
    __CrestLoad(4589, (unsigned long )(& size), (long long )size);
    __CrestApply2(4588, 1, (long long )((root + roo2) - size));
    __CrestStore(4593, (unsigned long )(& roo2));
# 150 "../HPL_2rinM.c"
    roo2 = (root + roo2) - size;
  }
  }
  {
  __CrestLoad(4596, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4595, (unsigned long )(& root), (long long )root);
  __CrestApply2(4594, 12, (long long )(rank == root));
# 152 "../HPL_2rinM.c"
  if (rank == root) {
    __CrestBranch(4597, 2128, 1);
    __CrestLoad(4599, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
    __CrestLoad(4600, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
    __CrestLoad(4601, (unsigned long )(& next), (long long )next);
    __CrestLoad(4602, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4603, (unsigned long )(& comm), (long long )comm);
# 154 "../HPL_2rinM.c"
    ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
    __CrestHandleReturn(4605, (long long )ierr);
    __CrestStore(4604, (unsigned long )(& ierr));
    {
    __CrestLoad(4608, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4607, (unsigned long )0, (long long )0);
    __CrestApply2(4606, 12, (long long )(ierr == 0));
# 156 "../HPL_2rinM.c"
    if (ierr == 0) {
      __CrestBranch(4609, 2130, 1);
      {
      __CrestLoad(4613, (unsigned long )(& size), (long long )size);
      __CrestLoad(4612, (unsigned long )0, (long long )2);
      __CrestApply2(4611, 14, (long long )(size > 2));
# 156 "../HPL_2rinM.c"
      if (size > 2) {
        __CrestBranch(4614, 2131, 1);
        {
        __CrestLoad(4620, (unsigned long )(& next), (long long )next);
        __CrestLoad(4619, (unsigned long )(& size), (long long )size);
        __CrestLoad(4618, (unsigned long )0, (long long )1);
        __CrestApply2(4617, 1, (long long )(size - 1));
        __CrestApply2(4616, 13, (long long )(next != size - 1));
# 158 "../HPL_2rinM.c"
        if (next != size - 1) {
          __CrestBranch(4621, 2132, 1);
          __CrestLoad(4625, (unsigned long )(& next), (long long )next);
          __CrestLoad(4624, (unsigned long )0, (long long )1);
          __CrestApply2(4623, 0, (long long )(next + 1));
          __CrestStore(4626, (unsigned long )(& tmp___0));
# 158 "../HPL_2rinM.c"
          tmp___0 = next + 1;
        } else {
          __CrestBranch(4622, 2133, 0);
          __CrestLoad(4627, (unsigned long )0, (long long )0);
          __CrestStore(4628, (unsigned long )(& tmp___0));
# 158 "../HPL_2rinM.c"
          tmp___0 = 0;
        }
        }
        {
        __CrestLoad(4631, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestLoad(4630, (unsigned long )(& roo2), (long long )roo2);
        __CrestApply2(4629, 13, (long long )(tmp___0 != roo2));
# 158 "../HPL_2rinM.c"
        if (tmp___0 != roo2) {
          __CrestBranch(4632, 2135, 1);
          {
          __CrestLoad(4638, (unsigned long )(& next), (long long )next);
          __CrestLoad(4637, (unsigned long )(& size), (long long )size);
          __CrestLoad(4636, (unsigned long )0, (long long )1);
          __CrestApply2(4635, 1, (long long )(size - 1));
          __CrestApply2(4634, 13, (long long )(next != size - 1));
# 160 "../HPL_2rinM.c"
          if (next != size - 1) {
            __CrestBranch(4639, 2136, 1);
            __CrestLoad(4643, (unsigned long )(& next), (long long )next);
            __CrestLoad(4642, (unsigned long )0, (long long )1);
            __CrestApply2(4641, 0, (long long )(next + 1));
            __CrestStore(4644, (unsigned long )(& tmp));
# 160 "../HPL_2rinM.c"
            tmp = next + 1;
          } else {
            __CrestBranch(4640, 2137, 0);
            __CrestLoad(4645, (unsigned long )0, (long long )0);
            __CrestStore(4646, (unsigned long )(& tmp));
# 160 "../HPL_2rinM.c"
            tmp = 0;
          }
          }
          __CrestLoad(4647, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
          __CrestLoad(4648, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
          __CrestLoad(4649, (unsigned long )(& tmp), (long long )tmp);
          __CrestLoad(4650, (unsigned long )(& msgid), (long long )msgid);
          __CrestLoad(4651, (unsigned long )(& comm), (long long )comm);
# 160 "../HPL_2rinM.c"
          ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          tmp, msgid, comm);
          __CrestHandleReturn(4653, (long long )ierr);
          __CrestStore(4652, (unsigned long )(& ierr));
        } else {
          __CrestBranch(4633, 2139, 0);

        }
        }
        {
        __CrestLoad(4656, (unsigned long )(& ierr), (long long )ierr);
        __CrestLoad(4655, (unsigned long )0, (long long )0);
        __CrestApply2(4654, 12, (long long )(ierr == 0));
# 164 "../HPL_2rinM.c"
        if (ierr == 0) {
          __CrestBranch(4657, 2141, 1);
          __CrestLoad(4659, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
          __CrestLoad(4660, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
          __CrestLoad(4661, (unsigned long )(& roo2), (long long )roo2);
          __CrestLoad(4662, (unsigned long )(& msgid), (long long )msgid);
          __CrestLoad(4663, (unsigned long )(& comm), (long long )comm);
# 166 "../HPL_2rinM.c"
          ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          roo2, msgid, comm);
          __CrestHandleReturn(4665, (long long )ierr);
          __CrestStore(4664, (unsigned long )(& ierr));
        } else {
          __CrestBranch(4658, 2142, 0);

        }
        }
      } else {
        __CrestBranch(4615, 2143, 0);

      }
      }
    } else {
      __CrestBranch(4610, 2144, 0);

    }
    }
  } else {
    __CrestBranch(4598, 2145, 0);
    {
    __CrestLoad(4668, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4667, (unsigned long )0, (long long )0);
    __CrestApply2(4666, 13, (long long )(rank != 0));
# 173 "../HPL_2rinM.c"
    if (rank != 0) {
      __CrestBranch(4669, 2146, 1);
      __CrestLoad(4673, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(4672, (unsigned long )0, (long long )1);
      __CrestApply2(4671, 1, (long long )(rank - 1));
      __CrestStore(4674, (unsigned long )(& prev));
# 173 "../HPL_2rinM.c"
      prev = rank - 1;
    } else {
      __CrestBranch(4670, 2147, 0);
      __CrestLoad(4677, (unsigned long )(& size), (long long )size);
      __CrestLoad(4676, (unsigned long )0, (long long )1);
      __CrestApply2(4675, 1, (long long )(size - 1));
      __CrestStore(4678, (unsigned long )(& prev));
# 173 "../HPL_2rinM.c"
      prev = size - 1;
    }
    }
    {
    __CrestLoad(4681, (unsigned long )(& prev), (long long )prev);
    __CrestLoad(4680, (unsigned long )(& root), (long long )root);
    __CrestApply2(4679, 12, (long long )(prev == root));
# 174 "../HPL_2rinM.c"
    if (prev == root) {
      __CrestBranch(4682, 2149, 1);
      __CrestLoad(4684, (unsigned long )(& root), (long long )root);
      __CrestStore(4685, (unsigned long )(& partner));
# 175 "../HPL_2rinM.c"
      partner = root;
    } else {
      __CrestBranch(4683, 2150, 0);
      {
      __CrestLoad(4688, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(4687, (unsigned long )(& roo2), (long long )roo2);
      __CrestApply2(4686, 12, (long long )(rank == roo2));
# 174 "../HPL_2rinM.c"
      if (rank == roo2) {
        __CrestBranch(4689, 2151, 1);
        __CrestLoad(4691, (unsigned long )(& root), (long long )root);
        __CrestStore(4692, (unsigned long )(& partner));
# 175 "../HPL_2rinM.c"
        partner = root;
      } else {
        __CrestBranch(4690, 2152, 0);
        {
        __CrestLoad(4695, (unsigned long )(& prev), (long long )prev);
        __CrestLoad(4694, (unsigned long )0, (long long )0);
        __CrestApply2(4693, 13, (long long )(prev != 0));
# 174 "../HPL_2rinM.c"
        if (prev != 0) {
          __CrestBranch(4696, 2153, 1);
          __CrestLoad(4700, (unsigned long )(& prev), (long long )prev);
          __CrestLoad(4699, (unsigned long )0, (long long )1);
          __CrestApply2(4698, 1, (long long )(prev - 1));
          __CrestStore(4701, (unsigned long )(& tmp___1));
# 174 "../HPL_2rinM.c"
          tmp___1 = prev - 1;
        } else {
          __CrestBranch(4697, 2154, 0);
          __CrestLoad(4704, (unsigned long )(& size), (long long )size);
          __CrestLoad(4703, (unsigned long )0, (long long )1);
          __CrestApply2(4702, 1, (long long )(size - 1));
          __CrestStore(4705, (unsigned long )(& tmp___1));
# 174 "../HPL_2rinM.c"
          tmp___1 = size - 1;
        }
        }
        {
        __CrestLoad(4708, (unsigned long )(& tmp___1), (long long )tmp___1);
        __CrestLoad(4707, (unsigned long )(& root), (long long )root);
        __CrestApply2(4706, 12, (long long )(tmp___1 == root));
# 174 "../HPL_2rinM.c"
        if (tmp___1 == root) {
          __CrestBranch(4709, 2156, 1);
          __CrestLoad(4711, (unsigned long )(& root), (long long )root);
          __CrestStore(4712, (unsigned long )(& partner));
# 175 "../HPL_2rinM.c"
          partner = root;
        } else {
          __CrestBranch(4710, 2157, 0);
          __CrestLoad(4713, (unsigned long )(& prev), (long long )prev);
          __CrestStore(4714, (unsigned long )(& partner));
# 176 "../HPL_2rinM.c"
          partner = prev;
        }
        }
      }
      }
    }
    }
    __CrestLoad(4715, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(4716, (unsigned long )(& msgid), (long long )msgid);
    __CrestLoad(4717, (unsigned long )(& comm), (long long )comm);
# 178 "../HPL_2rinM.c"
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
    __CrestHandleReturn(4719, (long long )ierr);
    __CrestStore(4718, (unsigned long )(& ierr));
    {
    __CrestLoad(4722, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(4721, (unsigned long )0, (long long )0);
    __CrestApply2(4720, 12, (long long )(ierr == 0));
# 180 "../HPL_2rinM.c"
    if (ierr == 0) {
      __CrestBranch(4723, 2160, 1);
      {
      __CrestLoad(4727, (unsigned long )(& go), (long long )go);
      __CrestLoad(4726, (unsigned long )0, (long long )0);
      __CrestApply2(4725, 13, (long long )(go != 0));
# 182 "../HPL_2rinM.c"
      if (go != 0) {
        __CrestBranch(4728, 2161, 1);
        __CrestLoad(4730, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(4731, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(4732, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(4733, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(4734, (unsigned long )(& comm), (long long )comm);
# 184 "../HPL_2rinM.c"
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(4736, (long long )ierr);
        __CrestStore(4735, (unsigned long )(& ierr));
        {
        __CrestLoad(4739, (unsigned long )(& ierr), (long long )ierr);
        __CrestLoad(4738, (unsigned long )0, (long long )0);
        __CrestApply2(4737, 12, (long long )(ierr == 0));
# 186 "../HPL_2rinM.c"
        if (ierr == 0) {
          __CrestBranch(4740, 2163, 1);
          {
          __CrestLoad(4744, (unsigned long )(& prev), (long long )prev);
          __CrestLoad(4743, (unsigned long )(& root), (long long )root);
          __CrestApply2(4742, 13, (long long )(prev != root));
# 186 "../HPL_2rinM.c"
          if (prev != root) {
            __CrestBranch(4745, 2164, 1);
            {
            __CrestLoad(4749, (unsigned long )(& next), (long long )next);
            __CrestLoad(4748, (unsigned long )(& roo2), (long long )roo2);
            __CrestApply2(4747, 13, (long long )(next != roo2));
# 186 "../HPL_2rinM.c"
            if (next != roo2) {
              __CrestBranch(4750, 2165, 1);
              {
              __CrestLoad(4754, (unsigned long )(& next), (long long )next);
              __CrestLoad(4753, (unsigned long )(& root), (long long )root);
              __CrestApply2(4752, 13, (long long )(next != root));
# 186 "../HPL_2rinM.c"
              if (next != root) {
                __CrestBranch(4755, 2166, 1);
                __CrestLoad(4757, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
                __CrestLoad(4758, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
                __CrestLoad(4759, (unsigned long )(& next), (long long )next);
                __CrestLoad(4760, (unsigned long )(& msgid), (long long )msgid);
                __CrestLoad(4761, (unsigned long )(& comm), (long long )comm);
# 189 "../HPL_2rinM.c"
                ierr = MPI_Send((void const *)PANEL->buffers[0], PANEL->counts[0],
                                PANEL->dtypes[0], next, msgid, comm);
                __CrestHandleReturn(4763, (long long )ierr);
                __CrestStore(4762, (unsigned long )(& ierr));
              } else {
                __CrestBranch(4756, 2167, 0);

              }
              }
            } else {
              __CrestBranch(4751, 2168, 0);

            }
            }
          } else {
            __CrestBranch(4746, 2169, 0);

          }
          }
        } else {
          __CrestBranch(4741, 2170, 0);

        }
        }
      } else {
        __CrestBranch(4729, 2171, 0);
        __CrestLoad(4764, (unsigned long )0, (long long )2);
        __CrestStore(4765, (unsigned long )IFLAG);
# 193 "../HPL_2rinM.c"
        *IFLAG = 2;
        __CrestLoad(4766, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestStore(4767, (unsigned long )(& __retres20));
# 193 "../HPL_2rinM.c"
        __retres20 = *IFLAG;
# 193 "../HPL_2rinM.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(4724, 2174, 0);

    }
    }
  }
  }
  {
  __CrestLoad(4770, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4769, (unsigned long )0, (long long )0);
  __CrestApply2(4768, 12, (long long )(ierr == 0));
# 200 "../HPL_2rinM.c"
  if (ierr == 0) {
    __CrestBranch(4771, 2176, 1);
    __CrestLoad(4773, (unsigned long )0, (long long )1);
    __CrestStore(4774, (unsigned long )IFLAG);
# 200 "../HPL_2rinM.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(4772, 2177, 0);
    __CrestLoad(4775, (unsigned long )0, (long long )0);
    __CrestStore(4776, (unsigned long )IFLAG);
# 200 "../HPL_2rinM.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(4777, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(4778, (unsigned long )(& __retres20));
# 202 "../HPL_2rinM.c"
  __retres20 = *IFLAG;
  return_label:
  {
  __CrestLoad(4779, (unsigned long )(& __retres20), (long long )__retres20);
  __CrestReturn(4780);
# 117 "../HPL_2rinM.c"
  return (__retres20);
  }
}
}
# 206 "../HPL_2rinM.c"
int HPL_bwait_2rinM(HPL_T_panel *PANEL )
{
  int ierr ;
  int tmp ;
  struct HPL_S_grid *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(4781, 22);

  {
  __CrestLoad(4784, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4783, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4782, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 224 "../HPL_2rinM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4785, 2181, 1);
    __CrestLoad(4787, (unsigned long )0, (long long )1);
    __CrestStore(4788, (unsigned long )(& __retres5));
# 224 "../HPL_2rinM.c"
    __retres5 = 1;
# 224 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4786, 2183, 0);

  }
  }
  {
# 225 "../HPL_2rinM.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(4791, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(4790, (unsigned long )0, (long long )1);
  __CrestApply2(4789, 15, (long long )(mem_4->npcol <= 1));
# 225 "../HPL_2rinM.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(4792, 2187, 1);
    __CrestLoad(4794, (unsigned long )0, (long long )1);
    __CrestStore(4795, (unsigned long )(& __retres5));
# 225 "../HPL_2rinM.c"
    __retres5 = 1;
# 225 "../HPL_2rinM.c"
    goto return_label;
  } else {
    __CrestBranch(4793, 2189, 0);

  }
  }
  }
# 230 "../HPL_2rinM.c"
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
  __CrestHandleReturn(4797, (long long )ierr);
  __CrestStore(4796, (unsigned long )(& ierr));
  {
  __CrestLoad(4800, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(4799, (unsigned long )0, (long long )0);
  __CrestApply2(4798, 12, (long long )(ierr == 0));
# 232 "../HPL_2rinM.c"
  if (ierr == 0) {
    __CrestBranch(4801, 2192, 1);
    __CrestLoad(4803, (unsigned long )0, (long long )1);
    __CrestStore(4804, (unsigned long )(& tmp));
# 232 "../HPL_2rinM.c"
    tmp = 1;
  } else {
    __CrestBranch(4802, 2193, 0);
    __CrestLoad(4805, (unsigned long )0, (long long )0);
    __CrestStore(4806, (unsigned long )(& tmp));
# 232 "../HPL_2rinM.c"
    tmp = 0;
  }
  }
  __CrestLoad(4807, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(4808, (unsigned long )(& __retres5));
# 232 "../HPL_2rinM.c"
  __retres5 = tmp;
  return_label:
  {
  __CrestLoad(4809, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(4810);
# 206 "../HPL_2rinM.c"
  return (__retres5);
  }
}
}
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 849 "//usr/include/mpich/mpi.h"
extern int MPI_Ssend(void const *buf , int count , MPI_Datatype datatype , int dest ,
                     int tag , MPI_Comm comm ) ;
# 859 "//usr/include/mpich/mpi.h"
extern int MPI_Issend(void const *buf , int count , MPI_Datatype datatype , int dest ,
                      int tag , MPI_Comm comm , MPI_Request *request ) ;
# 865 "//usr/include/mpich/mpi.h"
extern int MPI_Wait(MPI_Request *request , MPI_Status *status ) ;
# 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_blong(HPL_T_panel *PANEL ) ;
# 151 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_blong(HPL_T_panel *PANEL , int *IFLAG ) ;
# 152 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_blong(HPL_T_panel *PANEL ) ;
# 62 "../HPL_blong.c"
int HPL_binit_blong(HPL_T_panel *PANEL )
{
  struct HPL_S_grid *mem_2 ;
  int __retres3 ;

  {
  __CrestCall(4811, 23);

  {
  __CrestLoad(4814, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4813, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4812, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 74 "../HPL_blong.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4815, 2197, 1);
    __CrestLoad(4817, (unsigned long )0, (long long )1);
    __CrestStore(4818, (unsigned long )(& __retres3));
# 74 "../HPL_blong.c"
    __retres3 = 1;
# 74 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(4816, 2199, 0);

  }
  }
  {
# 75 "../HPL_blong.c"
  mem_2 = PANEL->grid;
  {
  __CrestLoad(4821, (unsigned long )(& mem_2->npcol), (long long )mem_2->npcol);
  __CrestLoad(4820, (unsigned long )0, (long long )1);
  __CrestApply2(4819, 15, (long long )(mem_2->npcol <= 1));
# 75 "../HPL_blong.c"
  if (mem_2->npcol <= 1) {
    __CrestBranch(4822, 2203, 1);
    __CrestLoad(4824, (unsigned long )0, (long long )1);
    __CrestStore(4825, (unsigned long )(& __retres3));
# 75 "../HPL_blong.c"
    __retres3 = 1;
# 75 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(4823, 2205, 0);

  }
  }
  }
  __CrestLoad(4826, (unsigned long )0, (long long )1);
  __CrestStore(4827, (unsigned long )(& __retres3));
# 89 "../HPL_blong.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(4828, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(4829);
# 62 "../HPL_blong.c"
  return (__retres3);
  }
}
}
# 131 "../HPL_blong.c"
int HPL_bcast_blong(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int COUNT ;
  int count ;
  int dummy ;
  int ierr ;
  int ibuf ;
  int ibufR ;
  int ibufS ;
  int indx ;
  int ip2 ;
  int k ;
  int l ;
  int lbuf ;
  int lbufR ;
  int lbufS ;
  int mask ;
  int msgid ;
  int mydist ;
  int mydist2 ;
  int next ;
  int npm1 ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct HPL_S_grid *mem_33 ;
  struct HPL_S_grid *mem_34 ;
  struct HPL_S_grid *mem_35 ;
  struct HPL_S_grid *mem_36 ;
  struct HPL_S_grid *mem_37 ;
  int __retres38 ;

  {
  __CrestCall(4830, 24);

  __CrestLoad(4831, (unsigned long )0, (long long )0);
  __CrestStore(4832, (unsigned long )(& dummy));
# 146 "../HPL_blong.c"
  dummy = 0;
  __CrestLoad(4833, (unsigned long )0, (long long )0);
  __CrestStore(4834, (unsigned long )(& ierr));
# 146 "../HPL_blong.c"
  ierr = 0;
  {
  __CrestLoad(4837, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(4836, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(4835, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 153 "../HPL_blong.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(4838, 2210, 1);
    __CrestLoad(4840, (unsigned long )0, (long long )1);
    __CrestStore(4841, (unsigned long )IFLAG);
# 153 "../HPL_blong.c"
    *IFLAG = 1;
    __CrestLoad(4842, (unsigned long )0, (long long )1);
    __CrestStore(4843, (unsigned long )(& __retres38));
# 153 "../HPL_blong.c"
    __retres38 = 1;
# 153 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(4839, 2213, 0);

  }
  }
# 154 "../HPL_blong.c"
  mem_33 = PANEL->grid;
  __CrestLoad(4844, (unsigned long )(& mem_33->npcol), (long long )mem_33->npcol);
  __CrestStore(4845, (unsigned long )(& size));
# 154 "../HPL_blong.c"
  size = mem_33->npcol;
  {
  __CrestLoad(4848, (unsigned long )(& size), (long long )size);
  __CrestLoad(4847, (unsigned long )0, (long long )1);
  __CrestApply2(4846, 15, (long long )(size <= 1));
# 154 "../HPL_blong.c"
  if (size <= 1) {
    __CrestBranch(4849, 2216, 1);
    __CrestLoad(4851, (unsigned long )0, (long long )1);
    __CrestStore(4852, (unsigned long )IFLAG);
# 155 "../HPL_blong.c"
    *IFLAG = 1;
    __CrestLoad(4853, (unsigned long )0, (long long )1);
    __CrestStore(4854, (unsigned long )(& __retres38));
# 155 "../HPL_blong.c"
    __retres38 = 1;
# 155 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(4850, 2219, 0);

  }
  }
# 163 "../HPL_blong.c"
  mem_34 = PANEL->grid;
  __CrestLoad(4855, (unsigned long )(& mem_34->row_comm), (long long )mem_34->row_comm);
  __CrestStore(4856, (unsigned long )(& comm));
# 163 "../HPL_blong.c"
  comm = mem_34->row_comm;
# 163 "../HPL_blong.c"
  mem_35 = PANEL->grid;
  __CrestLoad(4857, (unsigned long )(& mem_35->mycol), (long long )mem_35->mycol);
  __CrestStore(4858, (unsigned long )(& rank));
# 163 "../HPL_blong.c"
  rank = mem_35->mycol;
# 164 "../HPL_blong.c"
  mem_36 = PANEL->grid;
  __CrestLoad(4859, (unsigned long )(& mem_36->col_mask), (long long )mem_36->col_mask);
  __CrestStore(4860, (unsigned long )(& mask));
# 164 "../HPL_blong.c"
  mask = mem_36->col_mask;
# 164 "../HPL_blong.c"
  mem_37 = PANEL->grid;
  __CrestLoad(4861, (unsigned long )(& mem_37->col_ip2m1), (long long )mem_37->col_ip2m1);
  __CrestStore(4862, (unsigned long )(& ip2));
# 164 "../HPL_blong.c"
  ip2 = mem_37->col_ip2m1;
  __CrestLoad(4863, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(4864, (unsigned long )(& root));
# 165 "../HPL_blong.c"
  root = PANEL->pcol;
  __CrestLoad(4865, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(4866, (unsigned long )(& msgid));
# 165 "../HPL_blong.c"
  msgid = PANEL->msgid;
  __CrestLoad(4867, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestStore(4868, (unsigned long )(& COUNT));
# 166 "../HPL_blong.c"
  COUNT = PANEL->len;
  __CrestLoad(4871, (unsigned long )(& size), (long long )size);
  __CrestLoad(4870, (unsigned long )0, (long long )1);
  __CrestApply2(4869, 1, (long long )(size - 1));
  __CrestStore(4872, (unsigned long )(& npm1));
# 166 "../HPL_blong.c"
  npm1 = size - 1;
  {
  __CrestLoad(4875, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(4874, (unsigned long )(& root), (long long )root);
  __CrestApply2(4873, 16, (long long )(rank < root));
# 167 "../HPL_blong.c"
  if (rank < root) {
    __CrestBranch(4876, 2222, 1);
    __CrestLoad(4882, (unsigned long )(& size), (long long )size);
    __CrestLoad(4881, (unsigned long )(& rank), (long long )rank);
    __CrestApply2(4880, 0, (long long )(size + rank));
    __CrestLoad(4879, (unsigned long )(& root), (long long )root);
    __CrestApply2(4878, 1, (long long )((size + rank) - root));
    __CrestStore(4883, (unsigned long )(& mydist));
# 167 "../HPL_blong.c"
    mydist = (size + rank) - root;
  } else {
    __CrestBranch(4877, 2223, 0);
    __CrestLoad(4886, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(4885, (unsigned long )(& root), (long long )root);
    __CrestApply2(4884, 1, (long long )(rank - root));
    __CrestStore(4887, (unsigned long )(& mydist));
# 167 "../HPL_blong.c"
    mydist = rank - root;
  }
  }
  __CrestLoad(4888, (unsigned long )(& mydist), (long long )mydist);
  __CrestStore(4889, (unsigned long )(& mydist2));
# 167 "../HPL_blong.c"
  mydist2 = mydist;
  __CrestLoad(4890, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(4891, (unsigned long )(& indx));
# 167 "../HPL_blong.c"
  indx = ip2;
  __CrestLoad(4894, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(4893, (unsigned long )(& size), (long long )size);
  __CrestApply2(4892, 3, (long long )(COUNT / size));
  __CrestStore(4895, (unsigned long )(& count));
# 168 "../HPL_blong.c"
  count = COUNT / size;
  {
  __CrestLoad(4898, (unsigned long )(& count), (long long )count);
  __CrestLoad(4897, (unsigned long )0, (long long )1);
  __CrestApply2(4896, 14, (long long )(count > 1));
# 168 "../HPL_blong.c"
  if (count > 1) {
    __CrestBranch(4899, 2226, 1);
    __CrestLoad(4901, (unsigned long )(& count), (long long )count);
    __CrestStore(4902, (unsigned long )(& count));
# 168 "../HPL_blong.c"
    count = count;
  } else {
    __CrestBranch(4900, 2227, 0);
    __CrestLoad(4903, (unsigned long )0, (long long )1);
    __CrestStore(4904, (unsigned long )(& count));
# 168 "../HPL_blong.c"
    count = 1;
  }
  }
  {
# 172 "../HPL_blong.c"
  while (1) {
    while_continue: ;
    __CrestLoad(4907, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(4906, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(4905, 7, (long long )(mask ^ ip2));
    __CrestStore(4908, (unsigned long )(& mask));
# 174 "../HPL_blong.c"
    mask ^= ip2;
    {
    __CrestLoad(4913, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(4912, (unsigned long )(& mask), (long long )mask);
    __CrestApply2(4911, 5, (long long )(mydist & mask));
    __CrestLoad(4910, (unsigned long )0, (long long )0);
    __CrestApply2(4909, 12, (long long )((mydist & mask) == 0));
# 176 "../HPL_blong.c"
    if ((mydist & mask) == 0) {
      __CrestBranch(4914, 2233, 1);
      __CrestLoad(4918, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(4917, (unsigned long )(& count), (long long )count);
      __CrestApply2(4916, 2, (long long )(indx * count));
      __CrestStore(4919, (unsigned long )(& ibuf));
# 178 "../HPL_blong.c"
      ibuf = indx * count;
      __CrestLoad(4922, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(4921, (unsigned long )(& ibuf), (long long )ibuf);
      __CrestApply2(4920, 1, (long long )(COUNT - ibuf));
      __CrestStore(4923, (unsigned long )(& lbuf));
# 178 "../HPL_blong.c"
      lbuf = COUNT - ibuf;
      {
      __CrestLoad(4928, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(4927, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(4926, 0, (long long )(indx + ip2));
      __CrestLoad(4925, (unsigned long )(& size), (long long )size);
      __CrestApply2(4924, 16, (long long )(indx + ip2 < size));
# 179 "../HPL_blong.c"
      if (indx + ip2 < size) {
        __CrestBranch(4929, 2235, 1);
        __CrestLoad(4933, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(4932, (unsigned long )(& count), (long long )count);
        __CrestApply2(4931, 2, (long long )(ip2 * count));
        __CrestStore(4934, (unsigned long )(& l));
# 179 "../HPL_blong.c"
        l = ip2 * count;
        {
        __CrestLoad(4937, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(4936, (unsigned long )(& l), (long long )l);
        __CrestApply2(4935, 16, (long long )(lbuf < l));
# 179 "../HPL_blong.c"
        if (lbuf < l) {
          __CrestBranch(4938, 2237, 1);
          __CrestLoad(4940, (unsigned long )(& lbuf), (long long )lbuf);
          __CrestStore(4941, (unsigned long )(& lbuf));
# 179 "../HPL_blong.c"
          lbuf = lbuf;
        } else {
          __CrestBranch(4939, 2238, 0);
          __CrestLoad(4942, (unsigned long )(& l), (long long )l);
          __CrestStore(4943, (unsigned long )(& lbuf));
# 179 "../HPL_blong.c"
          lbuf = l;
        }
        }
      } else {
        __CrestBranch(4930, 2239, 0);

      }
      }
      __CrestLoad(4946, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(4945, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(4944, 7, (long long )(mydist ^ ip2));
      __CrestStore(4947, (unsigned long )(& partner));
# 181 "../HPL_blong.c"
      partner = mydist ^ ip2;
      {
      __CrestLoad(4952, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(4951, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(4950, 5, (long long )(mydist & ip2));
      __CrestLoad(4949, (unsigned long )0, (long long )0);
      __CrestApply2(4948, 13, (long long )((mydist & ip2) != 0));
# 183 "../HPL_blong.c"
      if ((mydist & ip2) != 0) {
        __CrestBranch(4953, 2242, 1);
        {
        __CrestLoad(4959, (unsigned long )(& root), (long long )root);
        __CrestLoad(4958, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(4957, 0, (long long )(root + partner));
        __CrestLoad(4956, (unsigned long )(& size), (long long )size);
        __CrestApply2(4955, 16, (long long )(root + partner < size));
# 185 "../HPL_blong.c"
        if (root + partner < size) {
          __CrestBranch(4960, 2243, 1);
          __CrestLoad(4964, (unsigned long )(& root), (long long )root);
          __CrestLoad(4963, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(4962, 0, (long long )(root + partner));
          __CrestStore(4965, (unsigned long )(& partner));
# 185 "../HPL_blong.c"
          partner = root + partner;
        } else {
          __CrestBranch(4961, 2244, 0);
          __CrestLoad(4970, (unsigned long )(& root), (long long )root);
          __CrestLoad(4969, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(4968, 0, (long long )(root + partner));
          __CrestLoad(4967, (unsigned long )(& size), (long long )size);
          __CrestApply2(4966, 1, (long long )((root + partner) - size));
          __CrestStore(4971, (unsigned long )(& partner));
# 185 "../HPL_blong.c"
          partner = (root + partner) - size;
        }
        }
        {
        __CrestLoad(4974, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(4973, (unsigned long )0, (long long )0);
        __CrestApply2(4972, 14, (long long )(lbuf > 0));
# 200 "../HPL_blong.c"
        if (lbuf > 0) {
          __CrestBranch(4975, 2246, 1);
          {
          __CrestLoad(4979, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(4978, (unsigned long )0, (long long )0);
          __CrestApply2(4977, 12, (long long )(ierr == 0));
# 203 "../HPL_blong.c"
          if (ierr == 0) {
            __CrestBranch(4980, 2247, 1);
            __CrestLoad(4982, (unsigned long )(& ibuf), (long long )ibuf);
            __CrestLoad(4983, (unsigned long )(& lbuf), (long long )lbuf);
            __CrestLoad(4984, (unsigned long )0, (long long )((int const )1));
# 204 "../HPL_blong.c"
            ierr = HPL_packL(PANEL, (int const )ibuf, (int const )lbuf, (int const )1);
            __CrestHandleReturn(4986, (long long )ierr);
            __CrestStore(4985, (unsigned long )(& ierr));
          } else {
            __CrestBranch(4981, 2248, 0);

          }
          }
          {
          __CrestLoad(4989, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(4988, (unsigned long )0, (long long )0);
          __CrestApply2(4987, 12, (long long )(ierr == 0));
# 206 "../HPL_blong.c"
          if (ierr == 0) {
            __CrestBranch(4990, 2250, 1);
            __CrestLoad(4992, (unsigned long )(& PANEL->counts[1]), (long long )PANEL->counts[1]);
            __CrestLoad(4993, (unsigned long )(& PANEL->dtypes[1]), (long long )PANEL->dtypes[1]);
            __CrestLoad(4994, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(4995, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(4996, (unsigned long )(& comm), (long long )comm);
# 207 "../HPL_blong.c"
            ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                            partner, msgid, comm, & PANEL->status[0]);
            __CrestHandleReturn(4998, (long long )ierr);
            __CrestStore(4997, (unsigned long )(& ierr));
          } else {
            __CrestBranch(4991, 2251, 0);

          }
          }
          {
          __CrestLoad(5001, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5000, (unsigned long )0, (long long )0);
          __CrestApply2(4999, 12, (long long )(ierr == 0));
# 210 "../HPL_blong.c"
          if (ierr == 0) {
            __CrestBranch(5002, 2253, 1);
# 211 "../HPL_blong.c"
            ierr = MPI_Type_free(& PANEL->dtypes[1]);
            __CrestHandleReturn(5005, (long long )ierr);
            __CrestStore(5004, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5003, 2254, 0);

          }
          }
        } else {
          __CrestBranch(4976, 2255, 0);
          {
          __CrestLoad(5008, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5007, (unsigned long )0, (long long )0);
          __CrestApply2(5006, 12, (long long )(ierr == 0));
# 216 "../HPL_blong.c"
          if (ierr == 0) {
            __CrestBranch(5009, 2256, 1);
            __CrestLoad(5011, (unsigned long )0, (long long )0);
            __CrestLoad(5012, (unsigned long )0, (long long )1275068685);
            __CrestLoad(5013, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(5014, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(5015, (unsigned long )(& comm), (long long )comm);
# 217 "../HPL_blong.c"
            ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm,
                            & PANEL->status[0]);
            __CrestHandleReturn(5017, (long long )ierr);
            __CrestStore(5016, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5010, 2257, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(4954, 2258, 0);
        {
        __CrestLoad(5020, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5019, (unsigned long )(& size), (long long )size);
        __CrestApply2(5018, 16, (long long )(partner < size));
# 221 "../HPL_blong.c"
        if (partner < size) {
          __CrestBranch(5021, 2259, 1);
          {
          __CrestLoad(5027, (unsigned long )(& root), (long long )root);
          __CrestLoad(5026, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(5025, 0, (long long )(root + partner));
          __CrestLoad(5024, (unsigned long )(& size), (long long )size);
          __CrestApply2(5023, 16, (long long )(root + partner < size));
# 223 "../HPL_blong.c"
          if (root + partner < size) {
            __CrestBranch(5028, 2260, 1);
            __CrestLoad(5032, (unsigned long )(& root), (long long )root);
            __CrestLoad(5031, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(5030, 0, (long long )(root + partner));
            __CrestStore(5033, (unsigned long )(& partner));
# 223 "../HPL_blong.c"
            partner = root + partner;
          } else {
            __CrestBranch(5029, 2261, 0);
            __CrestLoad(5038, (unsigned long )(& root), (long long )root);
            __CrestLoad(5037, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(5036, 0, (long long )(root + partner));
            __CrestLoad(5035, (unsigned long )(& size), (long long )size);
            __CrestApply2(5034, 1, (long long )((root + partner) - size));
            __CrestStore(5039, (unsigned long )(& partner));
# 223 "../HPL_blong.c"
            partner = (root + partner) - size;
          }
          }
          {
          __CrestLoad(5042, (unsigned long )(& lbuf), (long long )lbuf);
          __CrestLoad(5041, (unsigned long )0, (long long )0);
          __CrestApply2(5040, 14, (long long )(lbuf > 0));
# 225 "../HPL_blong.c"
          if (lbuf > 0) {
            __CrestBranch(5043, 2263, 1);
            {
            __CrestLoad(5047, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5046, (unsigned long )0, (long long )0);
            __CrestApply2(5045, 12, (long long )(ierr == 0));
# 228 "../HPL_blong.c"
            if (ierr == 0) {
              __CrestBranch(5048, 2264, 1);
              __CrestLoad(5050, (unsigned long )(& ibuf), (long long )ibuf);
              __CrestLoad(5051, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(5052, (unsigned long )0, (long long )((int const )0));
# 229 "../HPL_blong.c"
              ierr = HPL_packL(PANEL, (int const )ibuf, (int const )lbuf, (int const )0);
              __CrestHandleReturn(5054, (long long )ierr);
              __CrestStore(5053, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5049, 2265, 0);

            }
            }
            {
            __CrestLoad(5057, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5056, (unsigned long )0, (long long )0);
            __CrestApply2(5055, 12, (long long )(ierr == 0));
# 231 "../HPL_blong.c"
            if (ierr == 0) {
              __CrestBranch(5058, 2267, 1);
              __CrestLoad(5060, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
              __CrestLoad(5061, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
              __CrestLoad(5062, (unsigned long )(& partner), (long long )partner);
              __CrestLoad(5063, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(5064, (unsigned long )(& comm), (long long )comm);
# 232 "../HPL_blong.c"
              ierr = MPI_Ssend((void const *)PANEL->buffers[0], PANEL->counts[0],
                               PANEL->dtypes[0], partner, msgid, comm);
              __CrestHandleReturn(5066, (long long )ierr);
              __CrestStore(5065, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5059, 2268, 0);

            }
            }
            {
            __CrestLoad(5069, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5068, (unsigned long )0, (long long )0);
            __CrestApply2(5067, 12, (long long )(ierr == 0));
# 235 "../HPL_blong.c"
            if (ierr == 0) {
              __CrestBranch(5070, 2270, 1);
# 236 "../HPL_blong.c"
              ierr = MPI_Type_free(& PANEL->dtypes[0]);
              __CrestHandleReturn(5073, (long long )ierr);
              __CrestStore(5072, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5071, 2271, 0);

            }
            }
          } else {
            __CrestBranch(5044, 2272, 0);
            {
            __CrestLoad(5076, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5075, (unsigned long )0, (long long )0);
            __CrestApply2(5074, 12, (long long )(ierr == 0));
# 241 "../HPL_blong.c"
            if (ierr == 0) {
              __CrestBranch(5077, 2273, 1);
              __CrestLoad(5079, (unsigned long )0, (long long )0);
              __CrestLoad(5080, (unsigned long )0, (long long )1275068685);
              __CrestLoad(5081, (unsigned long )(& partner), (long long )partner);
              __CrestLoad(5082, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(5083, (unsigned long )(& comm), (long long )comm);
# 242 "../HPL_blong.c"
              ierr = MPI_Ssend((void const *)((void *)(& dummy)), 0, 1275068685,
                               partner, msgid, comm);
              __CrestHandleReturn(5085, (long long )ierr);
              __CrestStore(5084, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5078, 2274, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(5022, 2275, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(4915, 2276, 0);

    }
    }
    {
    __CrestLoad(5088, (unsigned long )(& mydist2), (long long )mydist2);
    __CrestLoad(5087, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(5086, 16, (long long )(mydist2 < ip2));
# 248 "../HPL_blong.c"
    if (mydist2 < ip2) {
      __CrestBranch(5089, 2278, 1);
      __CrestLoad(5093, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(5092, (unsigned long )0, (long long )1);
      __CrestApply2(5091, 9, (long long )(ip2 >> 1));
      __CrestStore(5094, (unsigned long )(& ip2));
# 248 "../HPL_blong.c"
      ip2 >>= 1;
      __CrestLoad(5097, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5096, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5095, 1, (long long )(indx - ip2));
      __CrestStore(5098, (unsigned long )(& indx));
# 248 "../HPL_blong.c"
      indx -= ip2;
    } else {
      __CrestBranch(5090, 2279, 0);
      __CrestLoad(5101, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(5100, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5099, 1, (long long )(mydist2 - ip2));
      __CrestStore(5102, (unsigned long )(& mydist2));
# 249 "../HPL_blong.c"
      mydist2 -= ip2;
      __CrestLoad(5105, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(5104, (unsigned long )0, (long long )1);
      __CrestApply2(5103, 9, (long long )(ip2 >> 1));
      __CrestStore(5106, (unsigned long )(& ip2));
# 249 "../HPL_blong.c"
      ip2 >>= 1;
      __CrestLoad(5109, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5108, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5107, 0, (long long )(indx + ip2));
      __CrestStore(5110, (unsigned long )(& indx));
# 249 "../HPL_blong.c"
      indx += ip2;
    }
    }
    {
    __CrestLoad(5113, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(5112, (unsigned long )0, (long long )0);
    __CrestApply2(5111, 15, (long long )(ip2 <= 0));
# 172 "../HPL_blong.c"
    if (ip2 <= 0) {
      __CrestBranch(5114, 2281, 1);
# 172 "../HPL_blong.c"
      goto while_break;
    } else {
      __CrestBranch(5115, 2282, 0);

    }
    }
  }
  while_break: ;
  }
  {
  __CrestLoad(5118, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(5117, (unsigned long )0, (long long )0);
  __CrestApply2(5116, 13, (long long )(rank != 0));
# 255 "../HPL_blong.c"
  if (rank != 0) {
    __CrestBranch(5119, 2285, 1);
    __CrestLoad(5123, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(5122, (unsigned long )0, (long long )1);
    __CrestApply2(5121, 1, (long long )(rank - 1));
    __CrestStore(5124, (unsigned long )(& prev));
# 255 "../HPL_blong.c"
    prev = rank - 1;
  } else {
    __CrestBranch(5120, 2286, 0);
    __CrestLoad(5127, (unsigned long )(& size), (long long )size);
    __CrestLoad(5126, (unsigned long )0, (long long )1);
    __CrestApply2(5125, 1, (long long )(size - 1));
    __CrestStore(5128, (unsigned long )(& prev));
# 255 "../HPL_blong.c"
    prev = size - 1;
  }
  }
  {
  __CrestLoad(5133, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(5132, (unsigned long )(& size), (long long )size);
  __CrestLoad(5131, (unsigned long )0, (long long )1);
  __CrestApply2(5130, 1, (long long )(size - 1));
  __CrestApply2(5129, 13, (long long )(rank != size - 1));
# 255 "../HPL_blong.c"
  if (rank != size - 1) {
    __CrestBranch(5134, 2288, 1);
    __CrestLoad(5138, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(5137, (unsigned long )0, (long long )1);
    __CrestApply2(5136, 0, (long long )(rank + 1));
    __CrestStore(5139, (unsigned long )(& next));
# 255 "../HPL_blong.c"
    next = rank + 1;
  } else {
    __CrestBranch(5135, 2289, 0);
    __CrestLoad(5140, (unsigned long )0, (long long )0);
    __CrestStore(5141, (unsigned long )(& next));
# 255 "../HPL_blong.c"
    next = 0;
  }
  }
  __CrestLoad(5142, (unsigned long )0, (long long )0);
  __CrestStore(5143, (unsigned long )(& k));
# 257 "../HPL_blong.c"
  k = 0;
  {
# 257 "../HPL_blong.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(5146, (unsigned long )(& k), (long long )k);
    __CrestLoad(5145, (unsigned long )(& npm1), (long long )npm1);
    __CrestApply2(5144, 16, (long long )(k < npm1));
# 257 "../HPL_blong.c"
    if (k < npm1) {
      __CrestBranch(5147, 2295, 1);

    } else {
      __CrestBranch(5148, 2296, 0);
# 257 "../HPL_blong.c"
      goto while_break___0;
    }
    }
    __CrestLoad(5151, (unsigned long )(& k), (long long )k);
    __CrestLoad(5150, (unsigned long )0, (long long )1);
    __CrestApply2(5149, 9, (long long )(k >> 1));
    __CrestStore(5152, (unsigned long )(& l));
# 259 "../HPL_blong.c"
    l = k >> 1;
    {
    __CrestLoad(5159, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(5158, (unsigned long )(& k), (long long )k);
    __CrestApply2(5157, 0, (long long )(mydist + k));
    __CrestLoad(5156, (unsigned long )0, (long long )1);
    __CrestApply2(5155, 5, (long long )((mydist + k) & 1));
    __CrestLoad(5154, (unsigned long )0, (long long )0);
    __CrestApply2(5153, 13, (long long )(((mydist + k) & 1) != 0));
# 263 "../HPL_blong.c"
    if (((mydist + k) & 1) != 0) {
      __CrestBranch(5160, 2299, 1);
      {
      __CrestLoad(5166, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5165, (unsigned long )(& l), (long long )l);
      __CrestApply2(5164, 0, (long long )(mydist + l));
      __CrestLoad(5163, (unsigned long )(& size), (long long )size);
      __CrestApply2(5162, 16, (long long )(mydist + l < size));
# 265 "../HPL_blong.c"
      if (mydist + l < size) {
        __CrestBranch(5167, 2300, 1);
        __CrestLoad(5171, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5170, (unsigned long )(& l), (long long )l);
        __CrestApply2(5169, 0, (long long )(mydist + l));
        __CrestStore(5172, (unsigned long )(& indx));
# 265 "../HPL_blong.c"
        indx = mydist + l;
      } else {
        __CrestBranch(5168, 2301, 0);
        __CrestLoad(5177, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5176, (unsigned long )(& l), (long long )l);
        __CrestApply2(5175, 0, (long long )(mydist + l));
        __CrestLoad(5174, (unsigned long )(& size), (long long )size);
        __CrestApply2(5173, 1, (long long )((mydist + l) - size));
        __CrestStore(5178, (unsigned long )(& indx));
# 265 "../HPL_blong.c"
        indx = (mydist + l) - size;
      }
      }
      __CrestLoad(5181, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5180, (unsigned long )(& count), (long long )count);
      __CrestApply2(5179, 2, (long long )(indx * count));
      __CrestStore(5182, (unsigned long )(& ibufS));
# 265 "../HPL_blong.c"
      ibufS = indx * count;
      {
      __CrestLoad(5185, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5184, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(5183, 12, (long long )(indx == npm1));
# 266 "../HPL_blong.c"
      if (indx == npm1) {
        __CrestBranch(5186, 2304, 1);
        __CrestLoad(5188, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5189, (unsigned long )(& lbufS));
# 266 "../HPL_blong.c"
        lbufS = COUNT;
      } else {
        __CrestBranch(5187, 2305, 0);
        __CrestLoad(5192, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(5191, (unsigned long )(& count), (long long )count);
        __CrestApply2(5190, 0, (long long )(ibufS + count));
        __CrestStore(5193, (unsigned long )(& lbufS));
# 266 "../HPL_blong.c"
        lbufS = ibufS + count;
      }
      }
      {
      __CrestLoad(5196, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(5195, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(5194, 16, (long long )(COUNT < lbufS));
# 267 "../HPL_blong.c"
      if (COUNT < lbufS) {
        __CrestBranch(5197, 2307, 1);
        __CrestLoad(5199, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5200, (unsigned long )(& tmp));
# 267 "../HPL_blong.c"
        tmp = COUNT;
      } else {
        __CrestBranch(5198, 2308, 0);
        __CrestLoad(5201, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(5202, (unsigned long )(& tmp));
# 267 "../HPL_blong.c"
        tmp = lbufS;
      }
      }
      __CrestLoad(5205, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(5204, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(5203, 1, (long long )(tmp - ibufS));
      __CrestStore(5206, (unsigned long )(& lbufS));
# 267 "../HPL_blong.c"
      lbufS = tmp - ibufS;
      {
      __CrestLoad(5209, (unsigned long )0, (long long )0);
      __CrestLoad(5208, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(5207, 14, (long long )(0 > lbufS));
# 267 "../HPL_blong.c"
      if (0 > lbufS) {
        __CrestBranch(5210, 2311, 1);
        __CrestLoad(5212, (unsigned long )0, (long long )0);
        __CrestStore(5213, (unsigned long )(& lbufS));
# 267 "../HPL_blong.c"
        lbufS = 0;
      } else {
        __CrestBranch(5211, 2312, 0);
        __CrestLoad(5214, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(5215, (unsigned long )(& lbufS));
# 267 "../HPL_blong.c"
        lbufS = lbufS;
      }
      }
      {
      __CrestLoad(5220, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5219, (unsigned long )(& l), (long long )l);
      __CrestLoad(5218, (unsigned long )0, (long long )1);
      __CrestApply2(5217, 0, (long long )(l + 1));
      __CrestApply2(5216, 16, (long long )(mydist < l + 1));
# 269 "../HPL_blong.c"
      if (mydist < l + 1) {
        __CrestBranch(5221, 2314, 1);
        __CrestLoad(5229, (unsigned long )(& size), (long long )size);
        __CrestLoad(5228, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(5227, 0, (long long )(size + mydist));
        __CrestLoad(5226, (unsigned long )(& l), (long long )l);
        __CrestLoad(5225, (unsigned long )0, (long long )1);
        __CrestApply2(5224, 0, (long long )(l + 1));
        __CrestApply2(5223, 1, (long long )((size + mydist) - (l + 1)));
        __CrestStore(5230, (unsigned long )(& indx));
# 269 "../HPL_blong.c"
        indx = (size + mydist) - (l + 1);
      } else {
        __CrestBranch(5222, 2315, 0);
        __CrestLoad(5235, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5234, (unsigned long )(& l), (long long )l);
        __CrestLoad(5233, (unsigned long )0, (long long )1);
        __CrestApply2(5232, 0, (long long )(l + 1));
        __CrestApply2(5231, 1, (long long )(mydist - (l + 1)));
        __CrestStore(5236, (unsigned long )(& indx));
# 269 "../HPL_blong.c"
        indx = mydist - (l + 1);
      }
      }
      __CrestLoad(5239, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5238, (unsigned long )(& count), (long long )count);
      __CrestApply2(5237, 2, (long long )(indx * count));
      __CrestStore(5240, (unsigned long )(& ibufR));
# 269 "../HPL_blong.c"
      ibufR = indx * count;
      {
      __CrestLoad(5243, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5242, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(5241, 12, (long long )(indx == npm1));
# 270 "../HPL_blong.c"
      if (indx == npm1) {
        __CrestBranch(5244, 2318, 1);
        __CrestLoad(5246, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5247, (unsigned long )(& lbufR));
# 270 "../HPL_blong.c"
        lbufR = COUNT;
      } else {
        __CrestBranch(5245, 2319, 0);
        __CrestLoad(5250, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(5249, (unsigned long )(& count), (long long )count);
        __CrestApply2(5248, 0, (long long )(ibufR + count));
        __CrestStore(5251, (unsigned long )(& lbufR));
# 270 "../HPL_blong.c"
        lbufR = ibufR + count;
      }
      }
      {
      __CrestLoad(5254, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(5253, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(5252, 16, (long long )(COUNT < lbufR));
# 271 "../HPL_blong.c"
      if (COUNT < lbufR) {
        __CrestBranch(5255, 2321, 1);
        __CrestLoad(5257, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5258, (unsigned long )(& tmp___0));
# 271 "../HPL_blong.c"
        tmp___0 = COUNT;
      } else {
        __CrestBranch(5256, 2322, 0);
        __CrestLoad(5259, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(5260, (unsigned long )(& tmp___0));
# 271 "../HPL_blong.c"
        tmp___0 = lbufR;
      }
      }
      __CrestLoad(5263, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestLoad(5262, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(5261, 1, (long long )(tmp___0 - ibufR));
      __CrestStore(5264, (unsigned long )(& lbufR));
# 271 "../HPL_blong.c"
      lbufR = tmp___0 - ibufR;
      {
      __CrestLoad(5267, (unsigned long )0, (long long )0);
      __CrestLoad(5266, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(5265, 14, (long long )(0 > lbufR));
# 271 "../HPL_blong.c"
      if (0 > lbufR) {
        __CrestBranch(5268, 2325, 1);
        __CrestLoad(5270, (unsigned long )0, (long long )0);
        __CrestStore(5271, (unsigned long )(& lbufR));
# 271 "../HPL_blong.c"
        lbufR = 0;
      } else {
        __CrestBranch(5269, 2326, 0);
        __CrestLoad(5272, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(5273, (unsigned long )(& lbufR));
# 271 "../HPL_blong.c"
        lbufR = lbufR;
      }
      }
      __CrestLoad(5274, (unsigned long )(& prev), (long long )prev);
      __CrestStore(5275, (unsigned long )(& partner));
# 273 "../HPL_blong.c"
      partner = prev;
    } else {
      __CrestBranch(5161, 2328, 0);
      {
      __CrestLoad(5278, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5277, (unsigned long )(& l), (long long )l);
      __CrestApply2(5276, 16, (long long )(mydist < l));
# 277 "../HPL_blong.c"
      if (mydist < l) {
        __CrestBranch(5279, 2329, 1);
        __CrestLoad(5285, (unsigned long )(& size), (long long )size);
        __CrestLoad(5284, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(5283, 0, (long long )(size + mydist));
        __CrestLoad(5282, (unsigned long )(& l), (long long )l);
        __CrestApply2(5281, 1, (long long )((size + mydist) - l));
        __CrestStore(5286, (unsigned long )(& indx));
# 277 "../HPL_blong.c"
        indx = (size + mydist) - l;
      } else {
        __CrestBranch(5280, 2330, 0);
        __CrestLoad(5289, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5288, (unsigned long )(& l), (long long )l);
        __CrestApply2(5287, 1, (long long )(mydist - l));
        __CrestStore(5290, (unsigned long )(& indx));
# 277 "../HPL_blong.c"
        indx = mydist - l;
      }
      }
      __CrestLoad(5293, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5292, (unsigned long )(& count), (long long )count);
      __CrestApply2(5291, 2, (long long )(indx * count));
      __CrestStore(5294, (unsigned long )(& ibufS));
# 277 "../HPL_blong.c"
      ibufS = indx * count;
      {
      __CrestLoad(5297, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5296, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(5295, 12, (long long )(indx == npm1));
# 278 "../HPL_blong.c"
      if (indx == npm1) {
        __CrestBranch(5298, 2333, 1);
        __CrestLoad(5300, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5301, (unsigned long )(& lbufS));
# 278 "../HPL_blong.c"
        lbufS = COUNT;
      } else {
        __CrestBranch(5299, 2334, 0);
        __CrestLoad(5304, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(5303, (unsigned long )(& count), (long long )count);
        __CrestApply2(5302, 0, (long long )(ibufS + count));
        __CrestStore(5305, (unsigned long )(& lbufS));
# 278 "../HPL_blong.c"
        lbufS = ibufS + count;
      }
      }
      {
      __CrestLoad(5308, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(5307, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(5306, 16, (long long )(COUNT < lbufS));
# 279 "../HPL_blong.c"
      if (COUNT < lbufS) {
        __CrestBranch(5309, 2336, 1);
        __CrestLoad(5311, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5312, (unsigned long )(& tmp___1));
# 279 "../HPL_blong.c"
        tmp___1 = COUNT;
      } else {
        __CrestBranch(5310, 2337, 0);
        __CrestLoad(5313, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(5314, (unsigned long )(& tmp___1));
# 279 "../HPL_blong.c"
        tmp___1 = lbufS;
      }
      }
      __CrestLoad(5317, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestLoad(5316, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(5315, 1, (long long )(tmp___1 - ibufS));
      __CrestStore(5318, (unsigned long )(& lbufS));
# 279 "../HPL_blong.c"
      lbufS = tmp___1 - ibufS;
      {
      __CrestLoad(5321, (unsigned long )0, (long long )0);
      __CrestLoad(5320, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(5319, 14, (long long )(0 > lbufS));
# 279 "../HPL_blong.c"
      if (0 > lbufS) {
        __CrestBranch(5322, 2340, 1);
        __CrestLoad(5324, (unsigned long )0, (long long )0);
        __CrestStore(5325, (unsigned long )(& lbufS));
# 279 "../HPL_blong.c"
        lbufS = 0;
      } else {
        __CrestBranch(5323, 2341, 0);
        __CrestLoad(5326, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(5327, (unsigned long )(& lbufS));
# 279 "../HPL_blong.c"
        lbufS = lbufS;
      }
      }
      {
      __CrestLoad(5334, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5333, (unsigned long )(& l), (long long )l);
      __CrestLoad(5332, (unsigned long )0, (long long )1);
      __CrestApply2(5331, 0, (long long )(l + 1));
      __CrestApply2(5330, 0, (long long )(mydist + (l + 1)));
      __CrestLoad(5329, (unsigned long )(& size), (long long )size);
      __CrestApply2(5328, 16, (long long )(mydist + (l + 1) < size));
# 281 "../HPL_blong.c"
      if (mydist + (l + 1) < size) {
        __CrestBranch(5335, 2343, 1);
        __CrestLoad(5341, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5340, (unsigned long )(& l), (long long )l);
        __CrestLoad(5339, (unsigned long )0, (long long )1);
        __CrestApply2(5338, 0, (long long )(l + 1));
        __CrestApply2(5337, 0, (long long )(mydist + (l + 1)));
        __CrestStore(5342, (unsigned long )(& indx));
# 281 "../HPL_blong.c"
        indx = mydist + (l + 1);
      } else {
        __CrestBranch(5336, 2344, 0);
        __CrestLoad(5349, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(5348, (unsigned long )(& l), (long long )l);
        __CrestLoad(5347, (unsigned long )0, (long long )1);
        __CrestApply2(5346, 0, (long long )(l + 1));
        __CrestApply2(5345, 0, (long long )(mydist + (l + 1)));
        __CrestLoad(5344, (unsigned long )(& size), (long long )size);
        __CrestApply2(5343, 1, (long long )((mydist + (l + 1)) - size));
        __CrestStore(5350, (unsigned long )(& indx));
# 281 "../HPL_blong.c"
        indx = (mydist + (l + 1)) - size;
      }
      }
      __CrestLoad(5353, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5352, (unsigned long )(& count), (long long )count);
      __CrestApply2(5351, 2, (long long )(indx * count));
      __CrestStore(5354, (unsigned long )(& ibufR));
# 281 "../HPL_blong.c"
      ibufR = indx * count;
      {
      __CrestLoad(5357, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5356, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(5355, 12, (long long )(indx == npm1));
# 282 "../HPL_blong.c"
      if (indx == npm1) {
        __CrestBranch(5358, 2347, 1);
        __CrestLoad(5360, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5361, (unsigned long )(& lbufR));
# 282 "../HPL_blong.c"
        lbufR = COUNT;
      } else {
        __CrestBranch(5359, 2348, 0);
        __CrestLoad(5364, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(5363, (unsigned long )(& count), (long long )count);
        __CrestApply2(5362, 0, (long long )(ibufR + count));
        __CrestStore(5365, (unsigned long )(& lbufR));
# 282 "../HPL_blong.c"
        lbufR = ibufR + count;
      }
      }
      {
      __CrestLoad(5368, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(5367, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(5366, 16, (long long )(COUNT < lbufR));
# 283 "../HPL_blong.c"
      if (COUNT < lbufR) {
        __CrestBranch(5369, 2350, 1);
        __CrestLoad(5371, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(5372, (unsigned long )(& tmp___2));
# 283 "../HPL_blong.c"
        tmp___2 = COUNT;
      } else {
        __CrestBranch(5370, 2351, 0);
        __CrestLoad(5373, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(5374, (unsigned long )(& tmp___2));
# 283 "../HPL_blong.c"
        tmp___2 = lbufR;
      }
      }
      __CrestLoad(5377, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(5376, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(5375, 1, (long long )(tmp___2 - ibufR));
      __CrestStore(5378, (unsigned long )(& lbufR));
# 283 "../HPL_blong.c"
      lbufR = tmp___2 - ibufR;
      {
      __CrestLoad(5381, (unsigned long )0, (long long )0);
      __CrestLoad(5380, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(5379, 14, (long long )(0 > lbufR));
# 283 "../HPL_blong.c"
      if (0 > lbufR) {
        __CrestBranch(5382, 2354, 1);
        __CrestLoad(5384, (unsigned long )0, (long long )0);
        __CrestStore(5385, (unsigned long )(& lbufR));
# 283 "../HPL_blong.c"
        lbufR = 0;
      } else {
        __CrestBranch(5383, 2355, 0);
        __CrestLoad(5386, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(5387, (unsigned long )(& lbufR));
# 283 "../HPL_blong.c"
        lbufR = lbufR;
      }
      }
      __CrestLoad(5388, (unsigned long )(& next), (long long )next);
      __CrestStore(5389, (unsigned long )(& partner));
# 285 "../HPL_blong.c"
      partner = next;
    }
    }
    {
    __CrestLoad(5392, (unsigned long )(& lbufS), (long long )lbufS);
    __CrestLoad(5391, (unsigned long )0, (long long )0);
    __CrestApply2(5390, 14, (long long )(lbufS > 0));
# 290 "../HPL_blong.c"
    if (lbufS > 0) {
      __CrestBranch(5393, 2358, 1);
      {
      __CrestLoad(5397, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5396, (unsigned long )0, (long long )0);
      __CrestApply2(5395, 12, (long long )(ierr == 0));
# 293 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5398, 2359, 1);
        __CrestLoad(5400, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(5401, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestLoad(5402, (unsigned long )0, (long long )((int const )0));
# 294 "../HPL_blong.c"
        ierr = HPL_packL(PANEL, (int const )ibufS, (int const )lbufS, (int const )0);
        __CrestHandleReturn(5404, (long long )ierr);
        __CrestStore(5403, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5399, 2360, 0);

      }
      }
      {
      __CrestLoad(5407, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5406, (unsigned long )0, (long long )0);
      __CrestApply2(5405, 12, (long long )(ierr == 0));
# 296 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5408, 2362, 1);
        __CrestLoad(5410, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(5411, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(5412, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5413, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(5414, (unsigned long )(& comm), (long long )comm);
# 297 "../HPL_blong.c"
        ierr = MPI_Issend((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          partner, msgid, comm, & PANEL->request[0]);
        __CrestHandleReturn(5416, (long long )ierr);
        __CrestStore(5415, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5409, 2363, 0);

      }
      }
    } else {
      __CrestBranch(5394, 2364, 0);
      {
      __CrestLoad(5419, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5418, (unsigned long )0, (long long )0);
      __CrestApply2(5417, 12, (long long )(ierr == 0));
# 303 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5420, 2365, 1);
        __CrestLoad(5422, (unsigned long )0, (long long )0);
        __CrestLoad(5423, (unsigned long )0, (long long )1275068685);
        __CrestLoad(5424, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5425, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(5426, (unsigned long )(& comm), (long long )comm);
# 304 "../HPL_blong.c"
        ierr = MPI_Issend((void const *)((void *)(& dummy)), 0, 1275068685, partner,
                          msgid, comm, & PANEL->request[0]);
        __CrestHandleReturn(5428, (long long )ierr);
        __CrestStore(5427, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5421, 2366, 0);

      }
      }
    }
    }
    {
    __CrestLoad(5431, (unsigned long )(& lbufR), (long long )lbufR);
    __CrestLoad(5430, (unsigned long )0, (long long )0);
    __CrestApply2(5429, 14, (long long )(lbufR > 0));
# 308 "../HPL_blong.c"
    if (lbufR > 0) {
      __CrestBranch(5432, 2368, 1);
      {
      __CrestLoad(5436, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5435, (unsigned long )0, (long long )0);
      __CrestApply2(5434, 12, (long long )(ierr == 0));
# 311 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5437, 2369, 1);
        __CrestLoad(5439, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(5440, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestLoad(5441, (unsigned long )0, (long long )((int const )1));
# 312 "../HPL_blong.c"
        ierr = HPL_packL(PANEL, (int const )ibufR, (int const )lbufR, (int const )1);
        __CrestHandleReturn(5443, (long long )ierr);
        __CrestStore(5442, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5438, 2370, 0);

      }
      }
      {
      __CrestLoad(5446, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5445, (unsigned long )0, (long long )0);
      __CrestApply2(5444, 12, (long long )(ierr == 0));
# 314 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5447, 2372, 1);
        __CrestLoad(5449, (unsigned long )(& PANEL->counts[1]), (long long )PANEL->counts[1]);
        __CrestLoad(5450, (unsigned long )(& PANEL->dtypes[1]), (long long )PANEL->dtypes[1]);
        __CrestLoad(5451, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5452, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(5453, (unsigned long )(& comm), (long long )comm);
# 315 "../HPL_blong.c"
        ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                        partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(5455, (long long )ierr);
        __CrestStore(5454, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5448, 2373, 0);

      }
      }
      {
      __CrestLoad(5458, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5457, (unsigned long )0, (long long )0);
      __CrestApply2(5456, 12, (long long )(ierr == 0));
# 319 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5459, 2375, 1);
# 320 "../HPL_blong.c"
        ierr = MPI_Type_free(& PANEL->dtypes[1]);
        __CrestHandleReturn(5462, (long long )ierr);
        __CrestStore(5461, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5460, 2376, 0);

      }
      }
    } else {
      __CrestBranch(5433, 2377, 0);
      {
      __CrestLoad(5465, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5464, (unsigned long )0, (long long )0);
      __CrestApply2(5463, 12, (long long )(ierr == 0));
# 325 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5466, 2378, 1);
        __CrestLoad(5468, (unsigned long )0, (long long )0);
        __CrestLoad(5469, (unsigned long )0, (long long )1275068685);
        __CrestLoad(5470, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5471, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(5472, (unsigned long )(& comm), (long long )comm);
# 326 "../HPL_blong.c"
        ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(5474, (long long )ierr);
        __CrestStore(5473, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5467, 2379, 0);

      }
      }
    }
    }
    {
    __CrestLoad(5477, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(5476, (unsigned long )0, (long long )0);
    __CrestApply2(5475, 12, (long long )(ierr == 0));
# 330 "../HPL_blong.c"
    if (ierr == 0) {
      __CrestBranch(5478, 2381, 1);
# 331 "../HPL_blong.c"
      ierr = MPI_Wait(& PANEL->request[0], & PANEL->status[0]);
      __CrestHandleReturn(5481, (long long )ierr);
      __CrestStore(5480, (unsigned long )(& ierr));
    } else {
      __CrestBranch(5479, 2382, 0);

    }
    }
    {
    __CrestLoad(5484, (unsigned long )(& lbufS), (long long )lbufS);
    __CrestLoad(5483, (unsigned long )0, (long long )0);
    __CrestApply2(5482, 14, (long long )(lbufS > 0));
# 333 "../HPL_blong.c"
    if (lbufS > 0) {
      __CrestBranch(5485, 2384, 1);
      {
      __CrestLoad(5489, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5488, (unsigned long )0, (long long )0);
      __CrestApply2(5487, 12, (long long )(ierr == 0));
# 333 "../HPL_blong.c"
      if (ierr == 0) {
        __CrestBranch(5490, 2385, 1);
# 334 "../HPL_blong.c"
        ierr = MPI_Type_free(& PANEL->dtypes[0]);
        __CrestHandleReturn(5493, (long long )ierr);
        __CrestStore(5492, (unsigned long )(& ierr));
      } else {
        __CrestBranch(5491, 2386, 0);

      }
      }
    } else {
      __CrestBranch(5486, 2387, 0);

    }
    }
    __CrestLoad(5496, (unsigned long )(& k), (long long )k);
    __CrestLoad(5495, (unsigned long )0, (long long )1);
    __CrestApply2(5494, 0, (long long )(k + 1));
    __CrestStore(5497, (unsigned long )(& k));
# 257 "../HPL_blong.c"
    k ++;
  }
  while_break___0: ;
  }
  {
  __CrestLoad(5500, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(5499, (unsigned long )0, (long long )0);
  __CrestApply2(5498, 12, (long long )(ierr == 0));
# 341 "../HPL_blong.c"
  if (ierr == 0) {
    __CrestBranch(5501, 2391, 1);
    __CrestLoad(5503, (unsigned long )0, (long long )1);
    __CrestStore(5504, (unsigned long )IFLAG);
# 341 "../HPL_blong.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(5502, 2392, 0);
    __CrestLoad(5505, (unsigned long )0, (long long )0);
    __CrestStore(5506, (unsigned long )IFLAG);
# 341 "../HPL_blong.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(5507, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(5508, (unsigned long )(& __retres38));
# 343 "../HPL_blong.c"
  __retres38 = *IFLAG;
  return_label:
  {
  __CrestLoad(5509, (unsigned long )(& __retres38), (long long )__retres38);
  __CrestReturn(5510);
# 131 "../HPL_blong.c"
  return (__retres38);
  }
}
}
# 347 "../HPL_blong.c"
int HPL_bwait_blong(HPL_T_panel *PANEL )
{
  struct HPL_S_grid *mem_2 ;
  int __retres3 ;

  {
  __CrestCall(5511, 25);

  {
  __CrestLoad(5514, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(5513, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(5512, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 359 "../HPL_blong.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(5515, 2396, 1);
    __CrestLoad(5517, (unsigned long )0, (long long )1);
    __CrestStore(5518, (unsigned long )(& __retres3));
# 359 "../HPL_blong.c"
    __retres3 = 1;
# 359 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(5516, 2398, 0);

  }
  }
  {
# 360 "../HPL_blong.c"
  mem_2 = PANEL->grid;
  {
  __CrestLoad(5521, (unsigned long )(& mem_2->npcol), (long long )mem_2->npcol);
  __CrestLoad(5520, (unsigned long )0, (long long )1);
  __CrestApply2(5519, 15, (long long )(mem_2->npcol <= 1));
# 360 "../HPL_blong.c"
  if (mem_2->npcol <= 1) {
    __CrestBranch(5522, 2402, 1);
    __CrestLoad(5524, (unsigned long )0, (long long )1);
    __CrestStore(5525, (unsigned long )(& __retres3));
# 360 "../HPL_blong.c"
    __retres3 = 1;
# 360 "../HPL_blong.c"
    goto return_label;
  } else {
    __CrestBranch(5523, 2404, 0);

  }
  }
  }
  __CrestLoad(5526, (unsigned long )0, (long long )1);
  __CrestStore(5527, (unsigned long )(& __retres3));
# 362 "../HPL_blong.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(5528, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(5529);
# 347 "../HPL_blong.c"
  return (__retres3);
  }
}
}
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 154 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_blonM(HPL_T_panel *PANEL ) ;
# 155 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast_blonM(HPL_T_panel *PANEL , int *IFLAG ) ;
# 156 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait_blonM(HPL_T_panel *PANEL ) ;
# 62 "../HPL_blonM.c"
int HPL_binit_blonM(HPL_T_panel *PANEL )
{
  struct HPL_S_grid *mem_2 ;
  int __retres3 ;

  {
  __CrestCall(5530, 26);

  {
  __CrestLoad(5533, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(5532, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(5531, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 74 "../HPL_blonM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(5534, 2408, 1);
    __CrestLoad(5536, (unsigned long )0, (long long )1);
    __CrestStore(5537, (unsigned long )(& __retres3));
# 74 "../HPL_blonM.c"
    __retres3 = 1;
# 74 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(5535, 2410, 0);

  }
  }
  {
# 75 "../HPL_blonM.c"
  mem_2 = PANEL->grid;
  {
  __CrestLoad(5540, (unsigned long )(& mem_2->npcol), (long long )mem_2->npcol);
  __CrestLoad(5539, (unsigned long )0, (long long )1);
  __CrestApply2(5538, 15, (long long )(mem_2->npcol <= 1));
# 75 "../HPL_blonM.c"
  if (mem_2->npcol <= 1) {
    __CrestBranch(5541, 2414, 1);
    __CrestLoad(5543, (unsigned long )0, (long long )1);
    __CrestStore(5544, (unsigned long )(& __retres3));
# 75 "../HPL_blonM.c"
    __retres3 = 1;
# 75 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(5542, 2416, 0);

  }
  }
  }
  __CrestLoad(5545, (unsigned long )0, (long long )1);
  __CrestStore(5546, (unsigned long )(& __retres3));
# 89 "../HPL_blonM.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(5547, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(5548);
# 62 "../HPL_blonM.c"
  return (__retres3);
  }
}
}
# 146 "../HPL_blonM.c"
int HPL_bcast_blonM(HPL_T_panel *PANEL , int *IFLAG )
{
  MPI_Comm comm ;
  int COUNT ;
  int count ;
  int go ;
  int ierr ;
  int ibuf ;
  int ibufR ;
  int ibufS ;
  int dummy ;
  int indx ;
  int ip2 ;
  int k ;
  int l ;
  int lbuf ;
  int lbufR ;
  int lbufS ;
  int mask ;
  int msgid ;
  int mydist ;
  int mydist2 ;
  int next ;
  int npm1 ;
  int npm2 ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct HPL_S_grid *mem_38 ;
  struct HPL_S_grid *mem_39 ;
  struct HPL_S_grid *mem_40 ;
  int __retres41 ;

  {
  __CrestCall(5549, 27);

  __CrestLoad(5550, (unsigned long )0, (long long )1);
  __CrestStore(5551, (unsigned long )(& go));
# 161 "../HPL_blonM.c"
  go = 1;
  __CrestLoad(5552, (unsigned long )0, (long long )0);
  __CrestStore(5553, (unsigned long )(& ierr));
# 161 "../HPL_blonM.c"
  ierr = 0;
  __CrestLoad(5554, (unsigned long )0, (long long )0);
  __CrestStore(5555, (unsigned long )(& dummy));
# 161 "../HPL_blonM.c"
  dummy = 0;
  __CrestLoad(5556, (unsigned long )0, (long long )1);
  __CrestStore(5557, (unsigned long )(& ip2));
# 161 "../HPL_blonM.c"
  ip2 = 1;
  __CrestLoad(5558, (unsigned long )0, (long long )1);
  __CrestStore(5559, (unsigned long )(& mask));
# 161 "../HPL_blonM.c"
  mask = 1;
  {
  __CrestLoad(5562, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(5561, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(5560, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 169 "../HPL_blonM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(5563, 2421, 1);
    __CrestLoad(5565, (unsigned long )0, (long long )1);
    __CrestStore(5566, (unsigned long )IFLAG);
# 169 "../HPL_blonM.c"
    *IFLAG = 1;
    __CrestLoad(5567, (unsigned long )0, (long long )1);
    __CrestStore(5568, (unsigned long )(& __retres41));
# 169 "../HPL_blonM.c"
    __retres41 = 1;
# 169 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(5564, 2424, 0);

  }
  }
# 170 "../HPL_blonM.c"
  mem_38 = PANEL->grid;
  __CrestLoad(5569, (unsigned long )(& mem_38->npcol), (long long )mem_38->npcol);
  __CrestStore(5570, (unsigned long )(& size));
# 170 "../HPL_blonM.c"
  size = mem_38->npcol;
  {
  __CrestLoad(5573, (unsigned long )(& size), (long long )size);
  __CrestLoad(5572, (unsigned long )0, (long long )1);
  __CrestApply2(5571, 15, (long long )(size <= 1));
# 170 "../HPL_blonM.c"
  if (size <= 1) {
    __CrestBranch(5574, 2427, 1);
    __CrestLoad(5576, (unsigned long )0, (long long )1);
    __CrestStore(5577, (unsigned long )IFLAG);
# 171 "../HPL_blonM.c"
    *IFLAG = 1;
    __CrestLoad(5578, (unsigned long )0, (long long )1);
    __CrestStore(5579, (unsigned long )(& __retres41));
# 171 "../HPL_blonM.c"
    __retres41 = 1;
# 171 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(5575, 2430, 0);

  }
  }
# 180 "../HPL_blonM.c"
  mem_39 = PANEL->grid;
  __CrestLoad(5580, (unsigned long )(& mem_39->row_comm), (long long )mem_39->row_comm);
  __CrestStore(5581, (unsigned long )(& comm));
# 180 "../HPL_blonM.c"
  comm = mem_39->row_comm;
# 180 "../HPL_blonM.c"
  mem_40 = PANEL->grid;
  __CrestLoad(5582, (unsigned long )(& mem_40->mycol), (long long )mem_40->mycol);
  __CrestStore(5583, (unsigned long )(& rank));
# 180 "../HPL_blonM.c"
  rank = mem_40->mycol;
  __CrestLoad(5584, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestStore(5585, (unsigned long )(& root));
# 181 "../HPL_blonM.c"
  root = PANEL->pcol;
  __CrestLoad(5586, (unsigned long )(& PANEL->msgid), (long long )PANEL->msgid);
  __CrestStore(5587, (unsigned long )(& msgid));
# 181 "../HPL_blonM.c"
  msgid = PANEL->msgid;
  {
  __CrestLoad(5590, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(5589, (unsigned long )0, (long long )0);
  __CrestApply2(5588, 13, (long long )(rank != 0));
# 182 "../HPL_blonM.c"
  if (rank != 0) {
    __CrestBranch(5591, 2433, 1);
    __CrestLoad(5595, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(5594, (unsigned long )0, (long long )1);
    __CrestApply2(5593, 1, (long long )(rank - 1));
    __CrestStore(5596, (unsigned long )(& prev));
# 182 "../HPL_blonM.c"
    prev = rank - 1;
  } else {
    __CrestBranch(5592, 2434, 0);
    __CrestLoad(5599, (unsigned long )(& size), (long long )size);
    __CrestLoad(5598, (unsigned long )0, (long long )1);
    __CrestApply2(5597, 1, (long long )(size - 1));
    __CrestStore(5600, (unsigned long )(& prev));
# 182 "../HPL_blonM.c"
    prev = size - 1;
  }
  }
  {
  __CrestLoad(5603, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(5602, (unsigned long )(& root), (long long )root);
  __CrestApply2(5601, 12, (long long )(rank == root));
# 184 "../HPL_blonM.c"
  if (rank == root) {
    __CrestBranch(5604, 2436, 1);
    {
    __CrestLoad(5608, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(5607, (unsigned long )0, (long long )0);
    __CrestApply2(5606, 12, (long long )(ierr == 0));
# 187 "../HPL_blonM.c"
    if (ierr == 0) {
      __CrestBranch(5609, 2437, 1);
      __CrestLoad(5611, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(5612, (unsigned long )(& PANEL->len), (long long )PANEL->len);
      __CrestLoad(5613, (unsigned long )0, (long long )((int const )0));
# 188 "../HPL_blonM.c"
      ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )0);
      __CrestHandleReturn(5615, (long long )ierr);
      __CrestStore(5614, (unsigned long )(& ierr));
    } else {
      __CrestBranch(5610, 2438, 0);

    }
    }
    {
    __CrestLoad(5618, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(5617, (unsigned long )0, (long long )0);
    __CrestApply2(5616, 12, (long long )(ierr == 0));
# 190 "../HPL_blonM.c"
    if (ierr == 0) {
      __CrestBranch(5619, 2440, 1);
      {
      __CrestLoad(5625, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(5624, (unsigned long )(& size), (long long )size);
      __CrestLoad(5623, (unsigned long )0, (long long )1);
      __CrestApply2(5622, 1, (long long )(size - 1));
      __CrestApply2(5621, 13, (long long )(rank != size - 1));
# 191 "../HPL_blonM.c"
      if (rank != size - 1) {
        __CrestBranch(5626, 2441, 1);
        __CrestLoad(5630, (unsigned long )(& rank), (long long )rank);
        __CrestLoad(5629, (unsigned long )0, (long long )1);
        __CrestApply2(5628, 0, (long long )(rank + 1));
        __CrestStore(5631, (unsigned long )(& tmp));
# 191 "../HPL_blonM.c"
        tmp = rank + 1;
      } else {
        __CrestBranch(5627, 2442, 0);
        __CrestLoad(5632, (unsigned long )0, (long long )0);
        __CrestStore(5633, (unsigned long )(& tmp));
# 191 "../HPL_blonM.c"
        tmp = 0;
      }
      }
      __CrestLoad(5634, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
      __CrestLoad(5635, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
      __CrestLoad(5636, (unsigned long )(& tmp), (long long )tmp);
      __CrestLoad(5637, (unsigned long )(& msgid), (long long )msgid);
      __CrestLoad(5638, (unsigned long )(& comm), (long long )comm);
# 191 "../HPL_blonM.c"
      ierr = MPI_Ssend((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                       tmp, msgid, comm);
      __CrestHandleReturn(5640, (long long )ierr);
      __CrestStore(5639, (unsigned long )(& ierr));
    } else {
      __CrestBranch(5620, 2444, 0);

    }
    }
    {
    __CrestLoad(5643, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(5642, (unsigned long )0, (long long )0);
    __CrestApply2(5641, 12, (long long )(ierr == 0));
# 194 "../HPL_blonM.c"
    if (ierr == 0) {
      __CrestBranch(5644, 2446, 1);
# 195 "../HPL_blonM.c"
      ierr = MPI_Type_free(& PANEL->dtypes[0]);
      __CrestHandleReturn(5647, (long long )ierr);
      __CrestStore(5646, (unsigned long )(& ierr));
    } else {
      __CrestBranch(5645, 2447, 0);

    }
    }
  } else {
    __CrestBranch(5605, 2448, 0);
    {
    __CrestLoad(5650, (unsigned long )(& prev), (long long )prev);
    __CrestLoad(5649, (unsigned long )(& root), (long long )root);
    __CrestApply2(5648, 12, (long long )(prev == root));
# 198 "../HPL_blonM.c"
    if (prev == root) {
      __CrestBranch(5651, 2449, 1);
      {
      __CrestLoad(5655, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5654, (unsigned long )0, (long long )0);
      __CrestApply2(5653, 12, (long long )(ierr == 0));
# 208 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(5656, 2450, 1);
        {
        __CrestLoad(5660, (unsigned long )(& go), (long long )go);
        __CrestLoad(5659, (unsigned long )0, (long long )0);
        __CrestApply2(5658, 13, (long long )(go != 0));
# 210 "../HPL_blonM.c"
        if (go != 0) {
          __CrestBranch(5661, 2451, 1);
          __CrestLoad(5663, (unsigned long )0, (long long )((int const )0));
          __CrestLoad(5664, (unsigned long )(& PANEL->len), (long long )PANEL->len);
          __CrestLoad(5665, (unsigned long )0, (long long )((int const )1));
# 213 "../HPL_blonM.c"
          ierr = HPL_packL(PANEL, (int const )0, (int const )PANEL->len, (int const )1);
          __CrestHandleReturn(5667, (long long )ierr);
          __CrestStore(5666, (unsigned long )(& ierr));
          {
          __CrestLoad(5670, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5669, (unsigned long )0, (long long )0);
          __CrestApply2(5668, 12, (long long )(ierr == 0));
# 215 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5671, 2453, 1);
            __CrestLoad(5673, (unsigned long )(& PANEL->counts[1]), (long long )PANEL->counts[1]);
            __CrestLoad(5674, (unsigned long )(& PANEL->dtypes[1]), (long long )PANEL->dtypes[1]);
            __CrestLoad(5675, (unsigned long )(& root), (long long )root);
            __CrestLoad(5676, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(5677, (unsigned long )(& comm), (long long )comm);
# 216 "../HPL_blonM.c"
            ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                            root, msgid, comm, & PANEL->status[0]);
            __CrestHandleReturn(5679, (long long )ierr);
            __CrestStore(5678, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5672, 2454, 0);

          }
          }
          {
          __CrestLoad(5682, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5681, (unsigned long )0, (long long )0);
          __CrestApply2(5680, 12, (long long )(ierr == 0));
# 219 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5683, 2456, 1);
# 220 "../HPL_blonM.c"
            ierr = MPI_Type_free(& PANEL->dtypes[1]);
            __CrestHandleReturn(5686, (long long )ierr);
            __CrestStore(5685, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5684, 2457, 0);

          }
          }
        } else {
          __CrestBranch(5662, 2458, 0);
          __CrestLoad(5687, (unsigned long )0, (long long )2);
          __CrestStore(5688, (unsigned long )IFLAG);
# 223 "../HPL_blonM.c"
          *IFLAG = 2;
          __CrestLoad(5689, (unsigned long )0, (long long )2);
          __CrestStore(5690, (unsigned long )(& __retres41));
# 223 "../HPL_blonM.c"
          __retres41 = 2;
# 223 "../HPL_blonM.c"
          goto return_label;
        }
        }
      } else {
        __CrestBranch(5657, 2461, 0);

      }
      }
    } else {
      __CrestBranch(5652, 2462, 0);

    }
    }
  }
  }
  {
  __CrestLoad(5693, (unsigned long )(& prev), (long long )prev);
  __CrestLoad(5692, (unsigned long )(& root), (long long )root);
  __CrestApply2(5691, 12, (long long )(prev == root));
# 231 "../HPL_blonM.c"
  if (prev == root) {
    __CrestBranch(5694, 2464, 1);
# 231 "../HPL_blonM.c"
    goto _L;
  } else {
    __CrestBranch(5695, 2465, 0);
    {
    __CrestLoad(5698, (unsigned long )(& size), (long long )size);
    __CrestLoad(5697, (unsigned long )0, (long long )2);
    __CrestApply2(5696, 12, (long long )(size == 2));
# 231 "../HPL_blonM.c"
    if (size == 2) {
      __CrestBranch(5699, 2466, 1);
      _L:
      {
      __CrestLoad(5703, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(5702, (unsigned long )0, (long long )0);
      __CrestApply2(5701, 12, (long long )(ierr == 0));
# 233 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(5704, 2467, 1);
        __CrestLoad(5706, (unsigned long )0, (long long )1);
        __CrestStore(5707, (unsigned long )IFLAG);
# 233 "../HPL_blonM.c"
        *IFLAG = 1;
      } else {
        __CrestBranch(5705, 2468, 0);
        __CrestLoad(5708, (unsigned long )0, (long long )0);
        __CrestStore(5709, (unsigned long )IFLAG);
# 233 "../HPL_blonM.c"
        *IFLAG = 0;
      }
      }
      __CrestLoad(5710, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestStore(5711, (unsigned long )(& __retres41));
# 234 "../HPL_blonM.c"
      __retres41 = *IFLAG;
# 234 "../HPL_blonM.c"
      goto return_label;
    } else {
      __CrestBranch(5700, 2471, 0);

    }
    }
  }
  }
  __CrestLoad(5714, (unsigned long )(& size), (long long )size);
  __CrestLoad(5713, (unsigned long )0, (long long )1);
  __CrestApply2(5712, 1, (long long )(size - 1));
  __CrestStore(5715, (unsigned long )(& npm1));
# 240 "../HPL_blonM.c"
  npm1 = size - 1;
  __CrestLoad(5718, (unsigned long )(& npm1), (long long )npm1);
  __CrestLoad(5717, (unsigned long )0, (long long )1);
  __CrestApply2(5716, 1, (long long )(npm1 - 1));
  __CrestStore(5719, (unsigned long )(& npm2));
# 240 "../HPL_blonM.c"
  npm2 = npm1 - 1;
  __CrestLoad(5720, (unsigned long )(& PANEL->len), (long long )PANEL->len);
  __CrestStore(5721, (unsigned long )(& COUNT));
# 240 "../HPL_blonM.c"
  COUNT = PANEL->len;
  __CrestLoad(5722, (unsigned long )(& npm2), (long long )npm2);
  __CrestStore(5723, (unsigned long )(& k));
# 242 "../HPL_blonM.c"
  k = npm2;
  {
# 242 "../HPL_blonM.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(5726, (unsigned long )(& k), (long long )k);
    __CrestLoad(5725, (unsigned long )0, (long long )1);
    __CrestApply2(5724, 14, (long long )(k > 1));
# 242 "../HPL_blonM.c"
    if (k > 1) {
      __CrestBranch(5727, 2477, 1);

    } else {
      __CrestBranch(5728, 2478, 0);
# 242 "../HPL_blonM.c"
      goto while_break;
    }
    }
    __CrestLoad(5731, (unsigned long )(& k), (long long )k);
    __CrestLoad(5730, (unsigned long )0, (long long )1);
    __CrestApply2(5729, 9, (long long )(k >> 1));
    __CrestStore(5732, (unsigned long )(& k));
# 242 "../HPL_blonM.c"
    k >>= 1;
    __CrestLoad(5735, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(5734, (unsigned long )0, (long long )1);
    __CrestApply2(5733, 8, (long long )(ip2 << 1));
    __CrestStore(5736, (unsigned long )(& ip2));
# 242 "../HPL_blonM.c"
    ip2 <<= 1;
    __CrestLoad(5739, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(5738, (unsigned long )0, (long long )1);
    __CrestApply2(5737, 8, (long long )(mask << 1));
    __CrestStore(5740, (unsigned long )(& mask));
# 242 "../HPL_blonM.c"
    mask <<= 1;
    __CrestLoad(5743, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(5742, (unsigned long )0, (long long )1);
    __CrestApply2(5741, 0, (long long )(mask + 1));
    __CrestStore(5744, (unsigned long )(& mask));
# 242 "../HPL_blonM.c"
    mask ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(5747, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(5746, (unsigned long )(& root), (long long )root);
  __CrestApply2(5745, 12, (long long )(rank == root));
# 243 "../HPL_blonM.c"
  if (rank == root) {
    __CrestBranch(5748, 2482, 1);
    __CrestLoad(5750, (unsigned long )0, (long long )0);
    __CrestStore(5751, (unsigned long )(& mydist));
# 243 "../HPL_blonM.c"
    mydist = 0;
    __CrestLoad(5752, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(5753, (unsigned long )(& mydist2));
# 243 "../HPL_blonM.c"
    mydist2 = mydist;
  } else {
    __CrestBranch(5749, 2483, 0);
    {
    __CrestLoad(5756, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(5755, (unsigned long )(& root), (long long )root);
    __CrestApply2(5754, 16, (long long )(rank < root));
# 244 "../HPL_blonM.c"
    if (rank < root) {
      __CrestBranch(5757, 2484, 1);
      __CrestLoad(5763, (unsigned long )(& size), (long long )size);
      __CrestLoad(5762, (unsigned long )(& rank), (long long )rank);
      __CrestApply2(5761, 0, (long long )(size + rank));
      __CrestLoad(5760, (unsigned long )(& root), (long long )root);
      __CrestApply2(5759, 1, (long long )((size + rank) - root));
      __CrestStore(5764, (unsigned long )(& tmp___0));
# 244 "../HPL_blonM.c"
      tmp___0 = (size + rank) - root;
    } else {
      __CrestBranch(5758, 2485, 0);
      __CrestLoad(5767, (unsigned long )(& rank), (long long )rank);
      __CrestLoad(5766, (unsigned long )(& root), (long long )root);
      __CrestApply2(5765, 1, (long long )(rank - root));
      __CrestStore(5768, (unsigned long )(& tmp___0));
# 244 "../HPL_blonM.c"
      tmp___0 = rank - root;
    }
    }
    __CrestLoad(5771, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(5770, (unsigned long )0, (long long )1);
    __CrestApply2(5769, 1, (long long )(tmp___0 - 1));
    __CrestStore(5772, (unsigned long )(& mydist));
# 244 "../HPL_blonM.c"
    mydist = tmp___0 - 1;
    __CrestLoad(5773, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(5774, (unsigned long )(& mydist2));
# 244 "../HPL_blonM.c"
    mydist2 = mydist;
  }
  }
  __CrestLoad(5775, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(5776, (unsigned long )(& indx));
# 246 "../HPL_blonM.c"
  indx = ip2;
  __CrestLoad(5779, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(5778, (unsigned long )(& npm1), (long long )npm1);
  __CrestApply2(5777, 3, (long long )(COUNT / npm1));
  __CrestStore(5780, (unsigned long )(& count));
# 246 "../HPL_blonM.c"
  count = COUNT / npm1;
  {
  __CrestLoad(5783, (unsigned long )(& count), (long long )count);
  __CrestLoad(5782, (unsigned long )0, (long long )1);
  __CrestApply2(5781, 14, (long long )(count > 1));
# 246 "../HPL_blonM.c"
  if (count > 1) {
    __CrestBranch(5784, 2489, 1);
    __CrestLoad(5786, (unsigned long )(& count), (long long )count);
    __CrestStore(5787, (unsigned long )(& count));
# 246 "../HPL_blonM.c"
    count = count;
  } else {
    __CrestBranch(5785, 2490, 0);
    __CrestLoad(5788, (unsigned long )0, (long long )1);
    __CrestStore(5789, (unsigned long )(& count));
# 246 "../HPL_blonM.c"
    count = 1;
  }
  }
  {
# 248 "../HPL_blonM.c"
  while (1) {
    while_continue___0: ;
    __CrestLoad(5792, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(5791, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(5790, 7, (long long )(mask ^ ip2));
    __CrestStore(5793, (unsigned long )(& mask));
# 250 "../HPL_blonM.c"
    mask ^= ip2;
    {
    __CrestLoad(5798, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(5797, (unsigned long )(& mask), (long long )mask);
    __CrestApply2(5796, 5, (long long )(mydist & mask));
    __CrestLoad(5795, (unsigned long )0, (long long )0);
    __CrestApply2(5794, 12, (long long )((mydist & mask) == 0));
# 252 "../HPL_blonM.c"
    if ((mydist & mask) == 0) {
      __CrestBranch(5799, 2496, 1);
      __CrestLoad(5803, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5802, (unsigned long )(& count), (long long )count);
      __CrestApply2(5801, 2, (long long )(indx * count));
      __CrestStore(5804, (unsigned long )(& ibuf));
# 254 "../HPL_blonM.c"
      ibuf = indx * count;
      __CrestLoad(5807, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(5806, (unsigned long )(& ibuf), (long long )ibuf);
      __CrestApply2(5805, 1, (long long )(COUNT - ibuf));
      __CrestStore(5808, (unsigned long )(& lbuf));
# 254 "../HPL_blonM.c"
      lbuf = COUNT - ibuf;
      {
      __CrestLoad(5813, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(5812, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5811, 0, (long long )(indx + ip2));
      __CrestLoad(5810, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(5809, 16, (long long )(indx + ip2 < npm1));
# 255 "../HPL_blonM.c"
      if (indx + ip2 < npm1) {
        __CrestBranch(5814, 2498, 1);
        __CrestLoad(5818, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(5817, (unsigned long )(& count), (long long )count);
        __CrestApply2(5816, 2, (long long )(ip2 * count));
        __CrestStore(5819, (unsigned long )(& l));
# 255 "../HPL_blonM.c"
        l = ip2 * count;
        {
        __CrestLoad(5822, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(5821, (unsigned long )(& l), (long long )l);
        __CrestApply2(5820, 16, (long long )(lbuf < l));
# 255 "../HPL_blonM.c"
        if (lbuf < l) {
          __CrestBranch(5823, 2500, 1);
          __CrestLoad(5825, (unsigned long )(& lbuf), (long long )lbuf);
          __CrestStore(5826, (unsigned long )(& lbuf));
# 255 "../HPL_blonM.c"
          lbuf = lbuf;
        } else {
          __CrestBranch(5824, 2501, 0);
          __CrestLoad(5827, (unsigned long )(& l), (long long )l);
          __CrestStore(5828, (unsigned long )(& lbuf));
# 255 "../HPL_blonM.c"
          lbuf = l;
        }
        }
      } else {
        __CrestBranch(5815, 2502, 0);

      }
      }
      __CrestLoad(5831, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5830, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5829, 7, (long long )(mydist ^ ip2));
      __CrestStore(5832, (unsigned long )(& partner));
# 257 "../HPL_blonM.c"
      partner = mydist ^ ip2;
      {
      __CrestLoad(5837, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(5836, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(5835, 5, (long long )(mydist & ip2));
      __CrestLoad(5834, (unsigned long )0, (long long )0);
      __CrestApply2(5833, 13, (long long )((mydist & ip2) != 0));
# 259 "../HPL_blonM.c"
      if ((mydist & ip2) != 0) {
        __CrestBranch(5838, 2505, 1);
        {
        __CrestLoad(5844, (unsigned long )(& root), (long long )root);
        __CrestLoad(5843, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(5842, 0, (long long )(root + partner));
        __CrestLoad(5841, (unsigned long )(& size), (long long )size);
        __CrestApply2(5840, 16, (long long )(root + partner < size));
# 261 "../HPL_blonM.c"
        if (root + partner < size) {
          __CrestBranch(5845, 2506, 1);
          __CrestLoad(5849, (unsigned long )(& root), (long long )root);
          __CrestLoad(5848, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(5847, 0, (long long )(root + partner));
          __CrestStore(5850, (unsigned long )(& partner));
# 261 "../HPL_blonM.c"
          partner = root + partner;
        } else {
          __CrestBranch(5846, 2507, 0);
          __CrestLoad(5855, (unsigned long )(& root), (long long )root);
          __CrestLoad(5854, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(5853, 0, (long long )(root + partner));
          __CrestLoad(5852, (unsigned long )(& size), (long long )size);
          __CrestApply2(5851, 1, (long long )((root + partner) - size));
          __CrestStore(5856, (unsigned long )(& partner));
# 261 "../HPL_blonM.c"
          partner = (root + partner) - size;
        }
        }
        {
        __CrestLoad(5859, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5858, (unsigned long )(& root), (long long )root);
        __CrestApply2(5857, 13, (long long )(partner != root));
# 262 "../HPL_blonM.c"
        if (partner != root) {
          __CrestBranch(5860, 2509, 1);
          {
          __CrestLoad(5866, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(5865, (unsigned long )(& size), (long long )size);
          __CrestLoad(5864, (unsigned long )0, (long long )1);
          __CrestApply2(5863, 1, (long long )(size - 1));
          __CrestApply2(5862, 13, (long long )(partner != size - 1));
# 262 "../HPL_blonM.c"
          if (partner != size - 1) {
            __CrestBranch(5867, 2510, 1);
            __CrestLoad(5871, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(5870, (unsigned long )0, (long long )1);
            __CrestApply2(5869, 0, (long long )(partner + 1));
            __CrestStore(5872, (unsigned long )(& partner));
# 262 "../HPL_blonM.c"
            partner ++;
          } else {
            __CrestBranch(5868, 2511, 0);
            __CrestLoad(5873, (unsigned long )0, (long long )0);
            __CrestStore(5874, (unsigned long )(& partner));
# 262 "../HPL_blonM.c"
            partner = 0;
          }
          }
        } else {
          __CrestBranch(5861, 2512, 0);

        }
        }
        {
        __CrestLoad(5877, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(5876, (unsigned long )0, (long long )0);
        __CrestApply2(5875, 14, (long long )(lbuf > 0));
# 278 "../HPL_blonM.c"
        if (lbuf > 0) {
          __CrestBranch(5878, 2514, 1);
          {
          __CrestLoad(5882, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5881, (unsigned long )0, (long long )0);
          __CrestApply2(5880, 12, (long long )(ierr == 0));
# 281 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5883, 2515, 1);
            __CrestLoad(5885, (unsigned long )(& ibuf), (long long )ibuf);
            __CrestLoad(5886, (unsigned long )(& lbuf), (long long )lbuf);
            __CrestLoad(5887, (unsigned long )0, (long long )((int const )1));
# 282 "../HPL_blonM.c"
            ierr = HPL_packL(PANEL, (int const )ibuf, (int const )lbuf, (int const )1);
            __CrestHandleReturn(5889, (long long )ierr);
            __CrestStore(5888, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5884, 2516, 0);

          }
          }
          {
          __CrestLoad(5892, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5891, (unsigned long )0, (long long )0);
          __CrestApply2(5890, 12, (long long )(ierr == 0));
# 284 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5893, 2518, 1);
            __CrestLoad(5895, (unsigned long )(& PANEL->counts[1]), (long long )PANEL->counts[1]);
            __CrestLoad(5896, (unsigned long )(& PANEL->dtypes[1]), (long long )PANEL->dtypes[1]);
            __CrestLoad(5897, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(5898, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(5899, (unsigned long )(& comm), (long long )comm);
# 285 "../HPL_blonM.c"
            ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                            partner, msgid, comm, & PANEL->status[0]);
            __CrestHandleReturn(5901, (long long )ierr);
            __CrestStore(5900, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5894, 2519, 0);

          }
          }
          {
          __CrestLoad(5904, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5903, (unsigned long )0, (long long )0);
          __CrestApply2(5902, 12, (long long )(ierr == 0));
# 288 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5905, 2521, 1);
# 289 "../HPL_blonM.c"
            ierr = MPI_Type_free(& PANEL->dtypes[1]);
            __CrestHandleReturn(5908, (long long )ierr);
            __CrestStore(5907, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5906, 2522, 0);

          }
          }
        } else {
          __CrestBranch(5879, 2523, 0);
          {
          __CrestLoad(5911, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(5910, (unsigned long )0, (long long )0);
          __CrestApply2(5909, 12, (long long )(ierr == 0));
# 294 "../HPL_blonM.c"
          if (ierr == 0) {
            __CrestBranch(5912, 2524, 1);
            __CrestLoad(5914, (unsigned long )0, (long long )0);
            __CrestLoad(5915, (unsigned long )0, (long long )1275068685);
            __CrestLoad(5916, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(5917, (unsigned long )(& msgid), (long long )msgid);
            __CrestLoad(5918, (unsigned long )(& comm), (long long )comm);
# 295 "../HPL_blonM.c"
            ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm,
                            & PANEL->status[0]);
            __CrestHandleReturn(5920, (long long )ierr);
            __CrestStore(5919, (unsigned long )(& ierr));
          } else {
            __CrestBranch(5913, 2525, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(5839, 2526, 0);
        {
        __CrestLoad(5923, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(5922, (unsigned long )(& npm1), (long long )npm1);
        __CrestApply2(5921, 16, (long long )(partner < npm1));
# 299 "../HPL_blonM.c"
        if (partner < npm1) {
          __CrestBranch(5924, 2527, 1);
          {
          __CrestLoad(5930, (unsigned long )(& root), (long long )root);
          __CrestLoad(5929, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(5928, 0, (long long )(root + partner));
          __CrestLoad(5927, (unsigned long )(& size), (long long )size);
          __CrestApply2(5926, 16, (long long )(root + partner < size));
# 301 "../HPL_blonM.c"
          if (root + partner < size) {
            __CrestBranch(5931, 2528, 1);
            __CrestLoad(5935, (unsigned long )(& root), (long long )root);
            __CrestLoad(5934, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(5933, 0, (long long )(root + partner));
            __CrestStore(5936, (unsigned long )(& partner));
# 301 "../HPL_blonM.c"
            partner = root + partner;
          } else {
            __CrestBranch(5932, 2529, 0);
            __CrestLoad(5941, (unsigned long )(& root), (long long )root);
            __CrestLoad(5940, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(5939, 0, (long long )(root + partner));
            __CrestLoad(5938, (unsigned long )(& size), (long long )size);
            __CrestApply2(5937, 1, (long long )((root + partner) - size));
            __CrestStore(5942, (unsigned long )(& partner));
# 301 "../HPL_blonM.c"
            partner = (root + partner) - size;
          }
          }
          {
          __CrestLoad(5945, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(5944, (unsigned long )(& root), (long long )root);
          __CrestApply2(5943, 13, (long long )(partner != root));
# 302 "../HPL_blonM.c"
          if (partner != root) {
            __CrestBranch(5946, 2531, 1);
            {
            __CrestLoad(5952, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(5951, (unsigned long )(& size), (long long )size);
            __CrestLoad(5950, (unsigned long )0, (long long )1);
            __CrestApply2(5949, 1, (long long )(size - 1));
            __CrestApply2(5948, 13, (long long )(partner != size - 1));
# 302 "../HPL_blonM.c"
            if (partner != size - 1) {
              __CrestBranch(5953, 2532, 1);
              __CrestLoad(5957, (unsigned long )(& partner), (long long )partner);
              __CrestLoad(5956, (unsigned long )0, (long long )1);
              __CrestApply2(5955, 0, (long long )(partner + 1));
              __CrestStore(5958, (unsigned long )(& partner));
# 302 "../HPL_blonM.c"
              partner ++;
            } else {
              __CrestBranch(5954, 2533, 0);
              __CrestLoad(5959, (unsigned long )0, (long long )0);
              __CrestStore(5960, (unsigned long )(& partner));
# 302 "../HPL_blonM.c"
              partner = 0;
            }
            }
          } else {
            __CrestBranch(5947, 2534, 0);

          }
          }
          {
          __CrestLoad(5963, (unsigned long )(& lbuf), (long long )lbuf);
          __CrestLoad(5962, (unsigned long )0, (long long )0);
          __CrestApply2(5961, 14, (long long )(lbuf > 0));
# 304 "../HPL_blonM.c"
          if (lbuf > 0) {
            __CrestBranch(5964, 2536, 1);
            {
            __CrestLoad(5968, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5967, (unsigned long )0, (long long )0);
            __CrestApply2(5966, 12, (long long )(ierr == 0));
# 307 "../HPL_blonM.c"
            if (ierr == 0) {
              __CrestBranch(5969, 2537, 1);
              __CrestLoad(5971, (unsigned long )(& ibuf), (long long )ibuf);
              __CrestLoad(5972, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(5973, (unsigned long )0, (long long )((int const )0));
# 308 "../HPL_blonM.c"
              ierr = HPL_packL(PANEL, (int const )ibuf, (int const )lbuf, (int const )0);
              __CrestHandleReturn(5975, (long long )ierr);
              __CrestStore(5974, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5970, 2538, 0);

            }
            }
            {
            __CrestLoad(5978, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5977, (unsigned long )0, (long long )0);
            __CrestApply2(5976, 12, (long long )(ierr == 0));
# 310 "../HPL_blonM.c"
            if (ierr == 0) {
              __CrestBranch(5979, 2540, 1);
              __CrestLoad(5981, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
              __CrestLoad(5982, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
              __CrestLoad(5983, (unsigned long )(& partner), (long long )partner);
              __CrestLoad(5984, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(5985, (unsigned long )(& comm), (long long )comm);
# 311 "../HPL_blonM.c"
              ierr = MPI_Ssend((void const *)PANEL->buffers[0], PANEL->counts[0],
                               PANEL->dtypes[0], partner, msgid, comm);
              __CrestHandleReturn(5987, (long long )ierr);
              __CrestStore(5986, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5980, 2541, 0);

            }
            }
            {
            __CrestLoad(5990, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5989, (unsigned long )0, (long long )0);
            __CrestApply2(5988, 12, (long long )(ierr == 0));
# 314 "../HPL_blonM.c"
            if (ierr == 0) {
              __CrestBranch(5991, 2543, 1);
# 315 "../HPL_blonM.c"
              ierr = MPI_Type_free(& PANEL->dtypes[0]);
              __CrestHandleReturn(5994, (long long )ierr);
              __CrestStore(5993, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5992, 2544, 0);

            }
            }
          } else {
            __CrestBranch(5965, 2545, 0);
            {
            __CrestLoad(5997, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(5996, (unsigned long )0, (long long )0);
            __CrestApply2(5995, 12, (long long )(ierr == 0));
# 320 "../HPL_blonM.c"
            if (ierr == 0) {
              __CrestBranch(5998, 2546, 1);
              __CrestLoad(6000, (unsigned long )0, (long long )0);
              __CrestLoad(6001, (unsigned long )0, (long long )1275068685);
              __CrestLoad(6002, (unsigned long )(& partner), (long long )partner);
              __CrestLoad(6003, (unsigned long )(& msgid), (long long )msgid);
              __CrestLoad(6004, (unsigned long )(& comm), (long long )comm);
# 321 "../HPL_blonM.c"
              ierr = MPI_Ssend((void const *)((void *)(& dummy)), 0, 1275068685,
                               partner, msgid, comm);
              __CrestHandleReturn(6006, (long long )ierr);
              __CrestStore(6005, (unsigned long )(& ierr));
            } else {
              __CrestBranch(5999, 2547, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(5925, 2548, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(5800, 2549, 0);

    }
    }
    {
    __CrestLoad(6009, (unsigned long )(& mydist2), (long long )mydist2);
    __CrestLoad(6008, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(6007, 16, (long long )(mydist2 < ip2));
# 327 "../HPL_blonM.c"
    if (mydist2 < ip2) {
      __CrestBranch(6010, 2551, 1);
      __CrestLoad(6014, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(6013, (unsigned long )0, (long long )1);
      __CrestApply2(6012, 9, (long long )(ip2 >> 1));
      __CrestStore(6015, (unsigned long )(& ip2));
# 327 "../HPL_blonM.c"
      ip2 >>= 1;
      __CrestLoad(6018, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6017, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(6016, 1, (long long )(indx - ip2));
      __CrestStore(6019, (unsigned long )(& indx));
# 327 "../HPL_blonM.c"
      indx -= ip2;
    } else {
      __CrestBranch(6011, 2552, 0);
      __CrestLoad(6022, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(6021, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(6020, 1, (long long )(mydist2 - ip2));
      __CrestStore(6023, (unsigned long )(& mydist2));
# 328 "../HPL_blonM.c"
      mydist2 -= ip2;
      __CrestLoad(6026, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(6025, (unsigned long )0, (long long )1);
      __CrestApply2(6024, 9, (long long )(ip2 >> 1));
      __CrestStore(6027, (unsigned long )(& ip2));
# 328 "../HPL_blonM.c"
      ip2 >>= 1;
      __CrestLoad(6030, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6029, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(6028, 0, (long long )(indx + ip2));
      __CrestStore(6031, (unsigned long )(& indx));
# 328 "../HPL_blonM.c"
      indx += ip2;
    }
    }
    {
    __CrestLoad(6034, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(6033, (unsigned long )0, (long long )0);
    __CrestApply2(6032, 15, (long long )(ip2 <= 0));
# 248 "../HPL_blonM.c"
    if (ip2 <= 0) {
      __CrestBranch(6035, 2554, 1);
# 248 "../HPL_blonM.c"
      goto while_break___0;
    } else {
      __CrestBranch(6036, 2555, 0);

    }
    }
  }
  while_break___0: ;
  }
  {
  __CrestLoad(6039, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(6038, (unsigned long )0, (long long )0);
  __CrestApply2(6037, 13, (long long )(rank != 0));
# 334 "../HPL_blonM.c"
  if (rank != 0) {
    __CrestBranch(6040, 2558, 1);
    __CrestLoad(6044, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(6043, (unsigned long )0, (long long )1);
    __CrestApply2(6042, 1, (long long )(rank - 1));
    __CrestStore(6045, (unsigned long )(& prev));
# 334 "../HPL_blonM.c"
    prev = rank - 1;
  } else {
    __CrestBranch(6041, 2559, 0);
    __CrestLoad(6048, (unsigned long )(& size), (long long )size);
    __CrestLoad(6047, (unsigned long )0, (long long )1);
    __CrestApply2(6046, 1, (long long )(size - 1));
    __CrestStore(6049, (unsigned long )(& prev));
# 334 "../HPL_blonM.c"
    prev = size - 1;
  }
  }
  {
  __CrestLoad(6052, (unsigned long )(& prev), (long long )prev);
  __CrestLoad(6051, (unsigned long )0, (long long )0);
  __CrestApply2(6050, 13, (long long )(prev != 0));
# 335 "../HPL_blonM.c"
  if (prev != 0) {
    __CrestBranch(6053, 2561, 1);
    __CrestLoad(6057, (unsigned long )(& prev), (long long )prev);
    __CrestLoad(6056, (unsigned long )0, (long long )1);
    __CrestApply2(6055, 1, (long long )(prev - 1));
    __CrestStore(6058, (unsigned long )(& tmp___1));
# 335 "../HPL_blonM.c"
    tmp___1 = prev - 1;
  } else {
    __CrestBranch(6054, 2562, 0);
    __CrestLoad(6061, (unsigned long )(& size), (long long )size);
    __CrestLoad(6060, (unsigned long )0, (long long )1);
    __CrestApply2(6059, 1, (long long )(size - 1));
    __CrestStore(6062, (unsigned long )(& tmp___1));
# 335 "../HPL_blonM.c"
    tmp___1 = size - 1;
  }
  }
  {
  __CrestLoad(6065, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestLoad(6064, (unsigned long )(& root), (long long )root);
  __CrestApply2(6063, 12, (long long )(tmp___1 == root));
# 335 "../HPL_blonM.c"
  if (tmp___1 == root) {
    __CrestBranch(6066, 2564, 1);
    __CrestLoad(6068, (unsigned long )(& root), (long long )root);
    __CrestStore(6069, (unsigned long )(& prev));
# 335 "../HPL_blonM.c"
    prev = root;
  } else {
    __CrestBranch(6067, 2565, 0);

  }
  }
  {
  __CrestLoad(6074, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(6073, (unsigned long )(& size), (long long )size);
  __CrestLoad(6072, (unsigned long )0, (long long )1);
  __CrestApply2(6071, 1, (long long )(size - 1));
  __CrestApply2(6070, 13, (long long )(rank != size - 1));
# 336 "../HPL_blonM.c"
  if (rank != size - 1) {
    __CrestBranch(6075, 2567, 1);
    __CrestLoad(6079, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(6078, (unsigned long )0, (long long )1);
    __CrestApply2(6077, 0, (long long )(rank + 1));
    __CrestStore(6080, (unsigned long )(& next));
# 336 "../HPL_blonM.c"
    next = rank + 1;
  } else {
    __CrestBranch(6076, 2568, 0);
    __CrestLoad(6081, (unsigned long )0, (long long )0);
    __CrestStore(6082, (unsigned long )(& next));
# 336 "../HPL_blonM.c"
    next = 0;
  }
  }
  {
  __CrestLoad(6085, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(6084, (unsigned long )(& root), (long long )root);
  __CrestApply2(6083, 12, (long long )(rank == root));
# 337 "../HPL_blonM.c"
  if (rank == root) {
    __CrestBranch(6086, 2570, 1);
    {
    __CrestLoad(6092, (unsigned long )(& next), (long long )next);
    __CrestLoad(6091, (unsigned long )(& size), (long long )size);
    __CrestLoad(6090, (unsigned long )0, (long long )1);
    __CrestApply2(6089, 1, (long long )(size - 1));
    __CrestApply2(6088, 13, (long long )(next != size - 1));
# 337 "../HPL_blonM.c"
    if (next != size - 1) {
      __CrestBranch(6093, 2571, 1);
      __CrestLoad(6097, (unsigned long )(& next), (long long )next);
      __CrestLoad(6096, (unsigned long )0, (long long )1);
      __CrestApply2(6095, 0, (long long )(next + 1));
      __CrestStore(6098, (unsigned long )(& next));
# 337 "../HPL_blonM.c"
      next ++;
    } else {
      __CrestBranch(6094, 2572, 0);
      __CrestLoad(6099, (unsigned long )0, (long long )0);
      __CrestStore(6100, (unsigned long )(& next));
# 337 "../HPL_blonM.c"
      next = 0;
    }
    }
  } else {
    __CrestBranch(6087, 2573, 0);

  }
  }
  __CrestLoad(6101, (unsigned long )0, (long long )0);
  __CrestStore(6102, (unsigned long )(& k));
# 339 "../HPL_blonM.c"
  k = 0;
  {
# 339 "../HPL_blonM.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(6105, (unsigned long )(& k), (long long )k);
    __CrestLoad(6104, (unsigned long )(& npm2), (long long )npm2);
    __CrestApply2(6103, 16, (long long )(k < npm2));
# 339 "../HPL_blonM.c"
    if (k < npm2) {
      __CrestBranch(6106, 2579, 1);

    } else {
      __CrestBranch(6107, 2580, 0);
# 339 "../HPL_blonM.c"
      goto while_break___1;
    }
    }
    __CrestLoad(6110, (unsigned long )(& k), (long long )k);
    __CrestLoad(6109, (unsigned long )0, (long long )1);
    __CrestApply2(6108, 9, (long long )(k >> 1));
    __CrestStore(6111, (unsigned long )(& l));
# 341 "../HPL_blonM.c"
    l = k >> 1;
    {
    __CrestLoad(6118, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(6117, (unsigned long )(& k), (long long )k);
    __CrestApply2(6116, 0, (long long )(mydist + k));
    __CrestLoad(6115, (unsigned long )0, (long long )1);
    __CrestApply2(6114, 5, (long long )((mydist + k) & 1));
    __CrestLoad(6113, (unsigned long )0, (long long )0);
    __CrestApply2(6112, 13, (long long )(((mydist + k) & 1) != 0));
# 345 "../HPL_blonM.c"
    if (((mydist + k) & 1) != 0) {
      __CrestBranch(6119, 2583, 1);
      {
      __CrestLoad(6125, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(6124, (unsigned long )(& l), (long long )l);
      __CrestApply2(6123, 0, (long long )(mydist + l));
      __CrestLoad(6122, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(6121, 16, (long long )(mydist + l < npm1));
# 347 "../HPL_blonM.c"
      if (mydist + l < npm1) {
        __CrestBranch(6126, 2584, 1);
        __CrestLoad(6130, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6129, (unsigned long )(& l), (long long )l);
        __CrestApply2(6128, 0, (long long )(mydist + l));
        __CrestStore(6131, (unsigned long )(& indx));
# 347 "../HPL_blonM.c"
        indx = mydist + l;
      } else {
        __CrestBranch(6127, 2585, 0);
        __CrestLoad(6136, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6135, (unsigned long )(& l), (long long )l);
        __CrestApply2(6134, 0, (long long )(mydist + l));
        __CrestLoad(6133, (unsigned long )(& npm1), (long long )npm1);
        __CrestApply2(6132, 1, (long long )((mydist + l) - npm1));
        __CrestStore(6137, (unsigned long )(& indx));
# 347 "../HPL_blonM.c"
        indx = (mydist + l) - npm1;
      }
      }
      __CrestLoad(6140, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6139, (unsigned long )(& count), (long long )count);
      __CrestApply2(6138, 2, (long long )(indx * count));
      __CrestStore(6141, (unsigned long )(& ibufS));
# 347 "../HPL_blonM.c"
      ibufS = indx * count;
      {
      __CrestLoad(6144, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6143, (unsigned long )(& npm2), (long long )npm2);
      __CrestApply2(6142, 12, (long long )(indx == npm2));
# 348 "../HPL_blonM.c"
      if (indx == npm2) {
        __CrestBranch(6145, 2588, 1);
        __CrestLoad(6147, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6148, (unsigned long )(& lbufS));
# 348 "../HPL_blonM.c"
        lbufS = COUNT;
      } else {
        __CrestBranch(6146, 2589, 0);
        __CrestLoad(6151, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(6150, (unsigned long )(& count), (long long )count);
        __CrestApply2(6149, 0, (long long )(ibufS + count));
        __CrestStore(6152, (unsigned long )(& lbufS));
# 348 "../HPL_blonM.c"
        lbufS = ibufS + count;
      }
      }
      {
      __CrestLoad(6155, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(6154, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(6153, 16, (long long )(COUNT < lbufS));
# 349 "../HPL_blonM.c"
      if (COUNT < lbufS) {
        __CrestBranch(6156, 2591, 1);
        __CrestLoad(6158, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6159, (unsigned long )(& tmp___2));
# 349 "../HPL_blonM.c"
        tmp___2 = COUNT;
      } else {
        __CrestBranch(6157, 2592, 0);
        __CrestLoad(6160, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(6161, (unsigned long )(& tmp___2));
# 349 "../HPL_blonM.c"
        tmp___2 = lbufS;
      }
      }
      __CrestLoad(6164, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(6163, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(6162, 1, (long long )(tmp___2 - ibufS));
      __CrestStore(6165, (unsigned long )(& lbufS));
# 349 "../HPL_blonM.c"
      lbufS = tmp___2 - ibufS;
      {
      __CrestLoad(6168, (unsigned long )0, (long long )0);
      __CrestLoad(6167, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(6166, 14, (long long )(0 > lbufS));
# 349 "../HPL_blonM.c"
      if (0 > lbufS) {
        __CrestBranch(6169, 2595, 1);
        __CrestLoad(6171, (unsigned long )0, (long long )0);
        __CrestStore(6172, (unsigned long )(& lbufS));
# 349 "../HPL_blonM.c"
        lbufS = 0;
      } else {
        __CrestBranch(6170, 2596, 0);
        __CrestLoad(6173, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(6174, (unsigned long )(& lbufS));
# 349 "../HPL_blonM.c"
        lbufS = lbufS;
      }
      }
      {
      __CrestLoad(6179, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(6178, (unsigned long )(& l), (long long )l);
      __CrestLoad(6177, (unsigned long )0, (long long )1);
      __CrestApply2(6176, 0, (long long )(l + 1));
      __CrestApply2(6175, 16, (long long )(mydist < l + 1));
# 351 "../HPL_blonM.c"
      if (mydist < l + 1) {
        __CrestBranch(6180, 2598, 1);
        __CrestLoad(6188, (unsigned long )(& npm1), (long long )npm1);
        __CrestLoad(6187, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(6186, 0, (long long )(npm1 + mydist));
        __CrestLoad(6185, (unsigned long )(& l), (long long )l);
        __CrestLoad(6184, (unsigned long )0, (long long )1);
        __CrestApply2(6183, 0, (long long )(l + 1));
        __CrestApply2(6182, 1, (long long )((npm1 + mydist) - (l + 1)));
        __CrestStore(6189, (unsigned long )(& indx));
# 351 "../HPL_blonM.c"
        indx = (npm1 + mydist) - (l + 1);
      } else {
        __CrestBranch(6181, 2599, 0);
        __CrestLoad(6194, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6193, (unsigned long )(& l), (long long )l);
        __CrestLoad(6192, (unsigned long )0, (long long )1);
        __CrestApply2(6191, 0, (long long )(l + 1));
        __CrestApply2(6190, 1, (long long )(mydist - (l + 1)));
        __CrestStore(6195, (unsigned long )(& indx));
# 351 "../HPL_blonM.c"
        indx = mydist - (l + 1);
      }
      }
      __CrestLoad(6198, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6197, (unsigned long )(& count), (long long )count);
      __CrestApply2(6196, 2, (long long )(indx * count));
      __CrestStore(6199, (unsigned long )(& ibufR));
# 351 "../HPL_blonM.c"
      ibufR = indx * count;
      {
      __CrestLoad(6202, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6201, (unsigned long )(& npm2), (long long )npm2);
      __CrestApply2(6200, 12, (long long )(indx == npm2));
# 352 "../HPL_blonM.c"
      if (indx == npm2) {
        __CrestBranch(6203, 2602, 1);
        __CrestLoad(6205, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6206, (unsigned long )(& lbufR));
# 352 "../HPL_blonM.c"
        lbufR = COUNT;
      } else {
        __CrestBranch(6204, 2603, 0);
        __CrestLoad(6209, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(6208, (unsigned long )(& count), (long long )count);
        __CrestApply2(6207, 0, (long long )(ibufR + count));
        __CrestStore(6210, (unsigned long )(& lbufR));
# 352 "../HPL_blonM.c"
        lbufR = ibufR + count;
      }
      }
      {
      __CrestLoad(6213, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(6212, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(6211, 16, (long long )(COUNT < lbufR));
# 353 "../HPL_blonM.c"
      if (COUNT < lbufR) {
        __CrestBranch(6214, 2605, 1);
        __CrestLoad(6216, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6217, (unsigned long )(& tmp___3));
# 353 "../HPL_blonM.c"
        tmp___3 = COUNT;
      } else {
        __CrestBranch(6215, 2606, 0);
        __CrestLoad(6218, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(6219, (unsigned long )(& tmp___3));
# 353 "../HPL_blonM.c"
        tmp___3 = lbufR;
      }
      }
      __CrestLoad(6222, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(6221, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(6220, 1, (long long )(tmp___3 - ibufR));
      __CrestStore(6223, (unsigned long )(& lbufR));
# 353 "../HPL_blonM.c"
      lbufR = tmp___3 - ibufR;
      {
      __CrestLoad(6226, (unsigned long )0, (long long )0);
      __CrestLoad(6225, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(6224, 14, (long long )(0 > lbufR));
# 353 "../HPL_blonM.c"
      if (0 > lbufR) {
        __CrestBranch(6227, 2609, 1);
        __CrestLoad(6229, (unsigned long )0, (long long )0);
        __CrestStore(6230, (unsigned long )(& lbufR));
# 353 "../HPL_blonM.c"
        lbufR = 0;
      } else {
        __CrestBranch(6228, 2610, 0);
        __CrestLoad(6231, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(6232, (unsigned long )(& lbufR));
# 353 "../HPL_blonM.c"
        lbufR = lbufR;
      }
      }
      __CrestLoad(6233, (unsigned long )(& prev), (long long )prev);
      __CrestStore(6234, (unsigned long )(& partner));
# 355 "../HPL_blonM.c"
      partner = prev;
    } else {
      __CrestBranch(6120, 2612, 0);
      {
      __CrestLoad(6237, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(6236, (unsigned long )(& l), (long long )l);
      __CrestApply2(6235, 16, (long long )(mydist < l));
# 359 "../HPL_blonM.c"
      if (mydist < l) {
        __CrestBranch(6238, 2613, 1);
        __CrestLoad(6244, (unsigned long )(& npm1), (long long )npm1);
        __CrestLoad(6243, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(6242, 0, (long long )(npm1 + mydist));
        __CrestLoad(6241, (unsigned long )(& l), (long long )l);
        __CrestApply2(6240, 1, (long long )((npm1 + mydist) - l));
        __CrestStore(6245, (unsigned long )(& indx));
# 359 "../HPL_blonM.c"
        indx = (npm1 + mydist) - l;
      } else {
        __CrestBranch(6239, 2614, 0);
        __CrestLoad(6248, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6247, (unsigned long )(& l), (long long )l);
        __CrestApply2(6246, 1, (long long )(mydist - l));
        __CrestStore(6249, (unsigned long )(& indx));
# 359 "../HPL_blonM.c"
        indx = mydist - l;
      }
      }
      __CrestLoad(6252, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6251, (unsigned long )(& count), (long long )count);
      __CrestApply2(6250, 2, (long long )(indx * count));
      __CrestStore(6253, (unsigned long )(& ibufS));
# 359 "../HPL_blonM.c"
      ibufS = indx * count;
      {
      __CrestLoad(6256, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6255, (unsigned long )(& npm2), (long long )npm2);
      __CrestApply2(6254, 12, (long long )(indx == npm2));
# 360 "../HPL_blonM.c"
      if (indx == npm2) {
        __CrestBranch(6257, 2617, 1);
        __CrestLoad(6259, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6260, (unsigned long )(& lbufS));
# 360 "../HPL_blonM.c"
        lbufS = COUNT;
      } else {
        __CrestBranch(6258, 2618, 0);
        __CrestLoad(6263, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(6262, (unsigned long )(& count), (long long )count);
        __CrestApply2(6261, 0, (long long )(ibufS + count));
        __CrestStore(6264, (unsigned long )(& lbufS));
# 360 "../HPL_blonM.c"
        lbufS = ibufS + count;
      }
      }
      {
      __CrestLoad(6267, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(6266, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(6265, 16, (long long )(COUNT < lbufS));
# 361 "../HPL_blonM.c"
      if (COUNT < lbufS) {
        __CrestBranch(6268, 2620, 1);
        __CrestLoad(6270, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6271, (unsigned long )(& tmp___4));
# 361 "../HPL_blonM.c"
        tmp___4 = COUNT;
      } else {
        __CrestBranch(6269, 2621, 0);
        __CrestLoad(6272, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(6273, (unsigned long )(& tmp___4));
# 361 "../HPL_blonM.c"
        tmp___4 = lbufS;
      }
      }
      __CrestLoad(6276, (unsigned long )(& tmp___4), (long long )tmp___4);
      __CrestLoad(6275, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(6274, 1, (long long )(tmp___4 - ibufS));
      __CrestStore(6277, (unsigned long )(& lbufS));
# 361 "../HPL_blonM.c"
      lbufS = tmp___4 - ibufS;
      {
      __CrestLoad(6280, (unsigned long )0, (long long )0);
      __CrestLoad(6279, (unsigned long )(& lbufS), (long long )lbufS);
      __CrestApply2(6278, 14, (long long )(0 > lbufS));
# 361 "../HPL_blonM.c"
      if (0 > lbufS) {
        __CrestBranch(6281, 2624, 1);
        __CrestLoad(6283, (unsigned long )0, (long long )0);
        __CrestStore(6284, (unsigned long )(& lbufS));
# 361 "../HPL_blonM.c"
        lbufS = 0;
      } else {
        __CrestBranch(6282, 2625, 0);
        __CrestLoad(6285, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestStore(6286, (unsigned long )(& lbufS));
# 361 "../HPL_blonM.c"
        lbufS = lbufS;
      }
      }
      {
      __CrestLoad(6293, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(6292, (unsigned long )(& l), (long long )l);
      __CrestLoad(6291, (unsigned long )0, (long long )1);
      __CrestApply2(6290, 0, (long long )(l + 1));
      __CrestApply2(6289, 0, (long long )(mydist + (l + 1)));
      __CrestLoad(6288, (unsigned long )(& npm1), (long long )npm1);
      __CrestApply2(6287, 16, (long long )(mydist + (l + 1) < npm1));
# 363 "../HPL_blonM.c"
      if (mydist + (l + 1) < npm1) {
        __CrestBranch(6294, 2627, 1);
        __CrestLoad(6300, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6299, (unsigned long )(& l), (long long )l);
        __CrestLoad(6298, (unsigned long )0, (long long )1);
        __CrestApply2(6297, 0, (long long )(l + 1));
        __CrestApply2(6296, 0, (long long )(mydist + (l + 1)));
        __CrestStore(6301, (unsigned long )(& indx));
# 363 "../HPL_blonM.c"
        indx = mydist + (l + 1);
      } else {
        __CrestBranch(6295, 2628, 0);
        __CrestLoad(6308, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(6307, (unsigned long )(& l), (long long )l);
        __CrestLoad(6306, (unsigned long )0, (long long )1);
        __CrestApply2(6305, 0, (long long )(l + 1));
        __CrestApply2(6304, 0, (long long )(mydist + (l + 1)));
        __CrestLoad(6303, (unsigned long )(& npm1), (long long )npm1);
        __CrestApply2(6302, 1, (long long )((mydist + (l + 1)) - npm1));
        __CrestStore(6309, (unsigned long )(& indx));
# 363 "../HPL_blonM.c"
        indx = (mydist + (l + 1)) - npm1;
      }
      }
      __CrestLoad(6312, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6311, (unsigned long )(& count), (long long )count);
      __CrestApply2(6310, 2, (long long )(indx * count));
      __CrestStore(6313, (unsigned long )(& ibufR));
# 363 "../HPL_blonM.c"
      ibufR = indx * count;
      {
      __CrestLoad(6316, (unsigned long )(& indx), (long long )indx);
      __CrestLoad(6315, (unsigned long )(& npm2), (long long )npm2);
      __CrestApply2(6314, 12, (long long )(indx == npm2));
# 364 "../HPL_blonM.c"
      if (indx == npm2) {
        __CrestBranch(6317, 2631, 1);
        __CrestLoad(6319, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6320, (unsigned long )(& lbufR));
# 364 "../HPL_blonM.c"
        lbufR = COUNT;
      } else {
        __CrestBranch(6318, 2632, 0);
        __CrestLoad(6323, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(6322, (unsigned long )(& count), (long long )count);
        __CrestApply2(6321, 0, (long long )(ibufR + count));
        __CrestStore(6324, (unsigned long )(& lbufR));
# 364 "../HPL_blonM.c"
        lbufR = ibufR + count;
      }
      }
      {
      __CrestLoad(6327, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(6326, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(6325, 16, (long long )(COUNT < lbufR));
# 365 "../HPL_blonM.c"
      if (COUNT < lbufR) {
        __CrestBranch(6328, 2634, 1);
        __CrestLoad(6330, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestStore(6331, (unsigned long )(& tmp___5));
# 365 "../HPL_blonM.c"
        tmp___5 = COUNT;
      } else {
        __CrestBranch(6329, 2635, 0);
        __CrestLoad(6332, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(6333, (unsigned long )(& tmp___5));
# 365 "../HPL_blonM.c"
        tmp___5 = lbufR;
      }
      }
      __CrestLoad(6336, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestLoad(6335, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(6334, 1, (long long )(tmp___5 - ibufR));
      __CrestStore(6337, (unsigned long )(& lbufR));
# 365 "../HPL_blonM.c"
      lbufR = tmp___5 - ibufR;
      {
      __CrestLoad(6340, (unsigned long )0, (long long )0);
      __CrestLoad(6339, (unsigned long )(& lbufR), (long long )lbufR);
      __CrestApply2(6338, 14, (long long )(0 > lbufR));
# 365 "../HPL_blonM.c"
      if (0 > lbufR) {
        __CrestBranch(6341, 2638, 1);
        __CrestLoad(6343, (unsigned long )0, (long long )0);
        __CrestStore(6344, (unsigned long )(& lbufR));
# 365 "../HPL_blonM.c"
        lbufR = 0;
      } else {
        __CrestBranch(6342, 2639, 0);
        __CrestLoad(6345, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestStore(6346, (unsigned long )(& lbufR));
# 365 "../HPL_blonM.c"
        lbufR = lbufR;
      }
      }
      __CrestLoad(6347, (unsigned long )(& next), (long long )next);
      __CrestStore(6348, (unsigned long )(& partner));
# 367 "../HPL_blonM.c"
      partner = next;
    }
    }
    {
    __CrestLoad(6351, (unsigned long )(& lbufS), (long long )lbufS);
    __CrestLoad(6350, (unsigned long )0, (long long )0);
    __CrestApply2(6349, 14, (long long )(lbufS > 0));
# 372 "../HPL_blonM.c"
    if (lbufS > 0) {
      __CrestBranch(6352, 2642, 1);
      {
      __CrestLoad(6356, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6355, (unsigned long )0, (long long )0);
      __CrestApply2(6354, 12, (long long )(ierr == 0));
# 375 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6357, 2643, 1);
        __CrestLoad(6359, (unsigned long )(& ibufS), (long long )ibufS);
        __CrestLoad(6360, (unsigned long )(& lbufS), (long long )lbufS);
        __CrestLoad(6361, (unsigned long )0, (long long )((int const )0));
# 376 "../HPL_blonM.c"
        ierr = HPL_packL(PANEL, (int const )ibufS, (int const )lbufS, (int const )0);
        __CrestHandleReturn(6363, (long long )ierr);
        __CrestStore(6362, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6358, 2644, 0);

      }
      }
      {
      __CrestLoad(6366, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6365, (unsigned long )0, (long long )0);
      __CrestApply2(6364, 12, (long long )(ierr == 0));
# 378 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6367, 2646, 1);
        __CrestLoad(6369, (unsigned long )(& PANEL->counts[0]), (long long )PANEL->counts[0]);
        __CrestLoad(6370, (unsigned long )(& PANEL->dtypes[0]), (long long )PANEL->dtypes[0]);
        __CrestLoad(6371, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(6372, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(6373, (unsigned long )(& comm), (long long )comm);
# 379 "../HPL_blonM.c"
        ierr = MPI_Issend((void const *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          partner, msgid, comm, & PANEL->request[0]);
        __CrestHandleReturn(6375, (long long )ierr);
        __CrestStore(6374, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6368, 2647, 0);

      }
      }
    } else {
      __CrestBranch(6353, 2648, 0);
      {
      __CrestLoad(6378, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6377, (unsigned long )0, (long long )0);
      __CrestApply2(6376, 12, (long long )(ierr == 0));
# 385 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6379, 2649, 1);
        __CrestLoad(6381, (unsigned long )0, (long long )0);
        __CrestLoad(6382, (unsigned long )0, (long long )1275068685);
        __CrestLoad(6383, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(6384, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(6385, (unsigned long )(& comm), (long long )comm);
# 386 "../HPL_blonM.c"
        ierr = MPI_Issend((void const *)((void *)(& dummy)), 0, 1275068685, partner,
                          msgid, comm, & PANEL->request[0]);
        __CrestHandleReturn(6387, (long long )ierr);
        __CrestStore(6386, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6380, 2650, 0);

      }
      }
    }
    }
    {
    __CrestLoad(6390, (unsigned long )(& lbufR), (long long )lbufR);
    __CrestLoad(6389, (unsigned long )0, (long long )0);
    __CrestApply2(6388, 14, (long long )(lbufR > 0));
# 390 "../HPL_blonM.c"
    if (lbufR > 0) {
      __CrestBranch(6391, 2652, 1);
      {
      __CrestLoad(6395, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6394, (unsigned long )0, (long long )0);
      __CrestApply2(6393, 12, (long long )(ierr == 0));
# 393 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6396, 2653, 1);
        __CrestLoad(6398, (unsigned long )(& ibufR), (long long )ibufR);
        __CrestLoad(6399, (unsigned long )(& lbufR), (long long )lbufR);
        __CrestLoad(6400, (unsigned long )0, (long long )((int const )1));
# 394 "../HPL_blonM.c"
        ierr = HPL_packL(PANEL, (int const )ibufR, (int const )lbufR, (int const )1);
        __CrestHandleReturn(6402, (long long )ierr);
        __CrestStore(6401, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6397, 2654, 0);

      }
      }
      {
      __CrestLoad(6405, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6404, (unsigned long )0, (long long )0);
      __CrestApply2(6403, 12, (long long )(ierr == 0));
# 396 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6406, 2656, 1);
        __CrestLoad(6408, (unsigned long )(& PANEL->counts[1]), (long long )PANEL->counts[1]);
        __CrestLoad(6409, (unsigned long )(& PANEL->dtypes[1]), (long long )PANEL->dtypes[1]);
        __CrestLoad(6410, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(6411, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(6412, (unsigned long )(& comm), (long long )comm);
# 397 "../HPL_blonM.c"
        ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                        partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(6414, (long long )ierr);
        __CrestStore(6413, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6407, 2657, 0);

      }
      }
      {
      __CrestLoad(6417, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6416, (unsigned long )0, (long long )0);
      __CrestApply2(6415, 12, (long long )(ierr == 0));
# 401 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6418, 2659, 1);
# 402 "../HPL_blonM.c"
        ierr = MPI_Type_free(& PANEL->dtypes[1]);
        __CrestHandleReturn(6421, (long long )ierr);
        __CrestStore(6420, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6419, 2660, 0);

      }
      }
    } else {
      __CrestBranch(6392, 2661, 0);
      {
      __CrestLoad(6424, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6423, (unsigned long )0, (long long )0);
      __CrestApply2(6422, 12, (long long )(ierr == 0));
# 407 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6425, 2662, 1);
        __CrestLoad(6427, (unsigned long )0, (long long )0);
        __CrestLoad(6428, (unsigned long )0, (long long )1275068685);
        __CrestLoad(6429, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(6430, (unsigned long )(& msgid), (long long )msgid);
        __CrestLoad(6431, (unsigned long )(& comm), (long long )comm);
# 408 "../HPL_blonM.c"
        ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm, & PANEL->status[0]);
        __CrestHandleReturn(6433, (long long )ierr);
        __CrestStore(6432, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6426, 2663, 0);

      }
      }
    }
    }
    {
    __CrestLoad(6436, (unsigned long )(& ierr), (long long )ierr);
    __CrestLoad(6435, (unsigned long )0, (long long )0);
    __CrestApply2(6434, 12, (long long )(ierr == 0));
# 412 "../HPL_blonM.c"
    if (ierr == 0) {
      __CrestBranch(6437, 2665, 1);
# 413 "../HPL_blonM.c"
      ierr = MPI_Wait(& PANEL->request[0], & PANEL->status[0]);
      __CrestHandleReturn(6440, (long long )ierr);
      __CrestStore(6439, (unsigned long )(& ierr));
    } else {
      __CrestBranch(6438, 2666, 0);

    }
    }
    {
    __CrestLoad(6443, (unsigned long )(& lbufS), (long long )lbufS);
    __CrestLoad(6442, (unsigned long )0, (long long )0);
    __CrestApply2(6441, 14, (long long )(lbufS > 0));
# 415 "../HPL_blonM.c"
    if (lbufS > 0) {
      __CrestBranch(6444, 2668, 1);
      {
      __CrestLoad(6448, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(6447, (unsigned long )0, (long long )0);
      __CrestApply2(6446, 12, (long long )(ierr == 0));
# 415 "../HPL_blonM.c"
      if (ierr == 0) {
        __CrestBranch(6449, 2669, 1);
# 416 "../HPL_blonM.c"
        ierr = MPI_Type_free(& PANEL->dtypes[0]);
        __CrestHandleReturn(6452, (long long )ierr);
        __CrestStore(6451, (unsigned long )(& ierr));
      } else {
        __CrestBranch(6450, 2670, 0);

      }
      }
    } else {
      __CrestBranch(6445, 2671, 0);

    }
    }
    __CrestLoad(6455, (unsigned long )(& k), (long long )k);
    __CrestLoad(6454, (unsigned long )0, (long long )1);
    __CrestApply2(6453, 0, (long long )(k + 1));
    __CrestStore(6456, (unsigned long )(& k));
# 339 "../HPL_blonM.c"
    k ++;
  }
  while_break___1: ;
  }
  {
  __CrestLoad(6459, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(6458, (unsigned long )0, (long long )0);
  __CrestApply2(6457, 12, (long long )(ierr == 0));
# 423 "../HPL_blonM.c"
  if (ierr == 0) {
    __CrestBranch(6460, 2675, 1);
    __CrestLoad(6462, (unsigned long )0, (long long )1);
    __CrestStore(6463, (unsigned long )IFLAG);
# 423 "../HPL_blonM.c"
    *IFLAG = 1;
  } else {
    __CrestBranch(6461, 2676, 0);
    __CrestLoad(6464, (unsigned long )0, (long long )0);
    __CrestStore(6465, (unsigned long )IFLAG);
# 423 "../HPL_blonM.c"
    *IFLAG = 0;
  }
  }
  __CrestLoad(6466, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestStore(6467, (unsigned long )(& __retres41));
# 425 "../HPL_blonM.c"
  __retres41 = *IFLAG;
  return_label:
  {
  __CrestLoad(6468, (unsigned long )(& __retres41), (long long )__retres41);
  __CrestReturn(6469);
# 146 "../HPL_blonM.c"
  return (__retres41);
  }
}
}
# 429 "../HPL_blonM.c"
int HPL_bwait_blonM(HPL_T_panel *PANEL )
{
  struct HPL_S_grid *mem_2 ;
  int __retres3 ;

  {
  __CrestCall(6470, 28);

  {
  __CrestLoad(6473, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(6472, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(6471, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 441 "../HPL_blonM.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(6474, 2680, 1);
    __CrestLoad(6476, (unsigned long )0, (long long )1);
    __CrestStore(6477, (unsigned long )(& __retres3));
# 441 "../HPL_blonM.c"
    __retres3 = 1;
# 441 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(6475, 2682, 0);

  }
  }
  {
# 442 "../HPL_blonM.c"
  mem_2 = PANEL->grid;
  {
  __CrestLoad(6480, (unsigned long )(& mem_2->npcol), (long long )mem_2->npcol);
  __CrestLoad(6479, (unsigned long )0, (long long )1);
  __CrestApply2(6478, 15, (long long )(mem_2->npcol <= 1));
# 442 "../HPL_blonM.c"
  if (mem_2->npcol <= 1) {
    __CrestBranch(6481, 2686, 1);
    __CrestLoad(6483, (unsigned long )0, (long long )1);
    __CrestStore(6484, (unsigned long )(& __retres3));
# 442 "../HPL_blonM.c"
    __retres3 = 1;
# 442 "../HPL_blonM.c"
    goto return_label;
  } else {
    __CrestBranch(6482, 2688, 0);

  }
  }
  }
  __CrestLoad(6485, (unsigned long )0, (long long )1);
  __CrestStore(6486, (unsigned long )(& __retres3));
# 444 "../HPL_blonM.c"
  __retres3 = 1;
  return_label:
  {
  __CrestLoad(6487, (unsigned long )(& __retres3), (long long )__retres3);
  __CrestReturn(6488);
# 429 "../HPL_blonM.c"
  return (__retres3);
  }
}
}
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 912 "//usr/include/mpich/mpi.h"
extern int MPI_Type_struct(int count , int const *array_of_blocklengths , MPI_Aint const *array_of_displacements ,
                           MPI_Datatype const *array_of_types , MPI_Datatype *newtype ) ;
# 915 "//usr/include/mpich/mpi.h"
extern int MPI_Address(void const *location , MPI_Aint *address ) ;
# 920 "//usr/include/mpich/mpi.h"
extern int MPI_Type_commit(MPI_Datatype *datatype ) ;
# 459 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pabort(int LINE , char const *SRNAME , char const *FORM , ...) ;
# 53 "../HPL_packL.c"
int HPL_packL(HPL_T_panel *PANEL , int const INDEX , int const LEN , int const IBUF )
{
  MPI_Datatype *type ;
  void ***bufs ;
  double *A ;
  int *blen ;
  MPI_Aint *disp ;
  int curr ;
  int i ;
  int i1 ;
  int ibuf ;
  int ierr ;
  int j1 ;
  int jb ;
  int jbm ;
  int jbp1 ;
  int lda ;
  int len ;
  int m ;
  int m1 ;
  int nbufs ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  struct HPL_S_grid *mem_28 ;
  struct HPL_S_grid *mem_29 ;
  void ***mem_30 ;
  MPI_Datatype *mem_31 ;
  int *mem_32 ;
  void ***mem_33 ;
  void ***mem_34 ;
  MPI_Datatype *mem_35 ;
  int *mem_36 ;
  void ***mem_37 ;
  void ***mem_38 ;
  MPI_Datatype *mem_39 ;
  int *mem_40 ;
  void ***mem_41 ;
  MPI_Aint *mem_42 ;
  MPI_Aint *mem_43 ;
  MPI_Aint *mem_44 ;
  MPI_Aint *mem_45 ;
  void ***mem_46 ;
  int __retres47 ;

  {
  __CrestCall(6492, 29);
  __CrestStore(6491, (unsigned long )(& IBUF));
  __CrestStore(6490, (unsigned long )(& LEN));
  __CrestStore(6489, (unsigned long )(& INDEX));
# 102 "../HPL_packL.c"
  type = (MPI_Datatype *)((void *)0);
# 103 "../HPL_packL.c"
  bufs = (void ***)((void *)0);
# 105 "../HPL_packL.c"
  blen = (int *)((void *)0);
# 106 "../HPL_packL.c"
  disp = (MPI_Aint *)((void *)0);
  __CrestLoad(6493, (unsigned long )0, (long long )0);
  __CrestStore(6494, (unsigned long )(& ierr));
# 107 "../HPL_packL.c"
  ierr = 0;
  __CrestLoad(6495, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(6496, (unsigned long )(& jb));
# 133 "../HPL_packL.c"
  jb = PANEL->jb;
  __CrestLoad(6499, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(6498, (unsigned long )0, (long long )1);
  __CrestApply2(6497, 0, (long long )(jb + 1));
  __CrestStore(6500, (unsigned long )(& jbp1));
# 133 "../HPL_packL.c"
  jbp1 = jb + 1;
  __CrestLoad(6503, (unsigned long )(& jbp1), (long long )jbp1);
  __CrestLoad(6502, (unsigned long )0, (long long )sizeof(void **));
  __CrestApply2(6501, 2, (long long )((unsigned long )jbp1 * sizeof(void **)));
# 137 "../HPL_packL.c"
  tmp = malloc((unsigned long )jbp1 * sizeof(void **));
  __CrestClearStack(6504);
# 137 "../HPL_packL.c"
  bufs = (void ***)tmp;
  __CrestLoad(6507, (unsigned long )(& jbp1), (long long )jbp1);
  __CrestLoad(6506, (unsigned long )0, (long long )sizeof(int ));
  __CrestApply2(6505, 2, (long long )((unsigned long )jbp1 * sizeof(int )));
# 138 "../HPL_packL.c"
  tmp___0 = malloc((unsigned long )jbp1 * sizeof(int ));
  __CrestClearStack(6508);
# 138 "../HPL_packL.c"
  blen = (int *)tmp___0;
  __CrestLoad(6511, (unsigned long )(& jbp1), (long long )jbp1);
  __CrestLoad(6510, (unsigned long )0, (long long )sizeof(MPI_Aint ));
  __CrestApply2(6509, 2, (long long )((unsigned long )jbp1 * sizeof(MPI_Aint )));
# 139 "../HPL_packL.c"
  tmp___1 = malloc((unsigned long )jbp1 * sizeof(MPI_Aint ));
  __CrestClearStack(6512);
# 139 "../HPL_packL.c"
  disp = (MPI_Aint *)tmp___1;
  __CrestLoad(6515, (unsigned long )(& jbp1), (long long )jbp1);
  __CrestLoad(6514, (unsigned long )0, (long long )sizeof(MPI_Datatype ));
  __CrestApply2(6513, 2, (long long )((unsigned long )jbp1 * sizeof(MPI_Datatype )));
# 140 "../HPL_packL.c"
  tmp___2 = malloc((unsigned long )jbp1 * sizeof(MPI_Datatype ));
  __CrestClearStack(6516);
# 140 "../HPL_packL.c"
  type = (MPI_Datatype *)tmp___2;
  {
  __CrestLoad(6519, (unsigned long )(& bufs), (long long )((unsigned long )bufs));
  __CrestLoad(6518, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(6517, 13, (long long )((unsigned long )bufs != (unsigned long )((void *)0)));
# 142 "../HPL_packL.c"
  if ((unsigned long )bufs != (unsigned long )((void *)0)) {
    __CrestBranch(6520, 2693, 1);
    {
    __CrestLoad(6524, (unsigned long )(& blen), (long long )((unsigned long )blen));
    __CrestLoad(6523, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(6522, 13, (long long )((unsigned long )blen != (unsigned long )((void *)0)));
# 142 "../HPL_packL.c"
    if ((unsigned long )blen != (unsigned long )((void *)0)) {
      __CrestBranch(6525, 2694, 1);
      {
      __CrestLoad(6529, (unsigned long )(& disp), (long long )((unsigned long )disp));
      __CrestLoad(6528, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(6527, 13, (long long )((unsigned long )disp != (unsigned long )((void *)0)));
# 142 "../HPL_packL.c"
      if ((unsigned long )disp != (unsigned long )((void *)0)) {
        __CrestBranch(6530, 2695, 1);
        {
        __CrestLoad(6534, (unsigned long )(& type), (long long )((unsigned long )type));
        __CrestLoad(6533, (unsigned long )0, (long long )((unsigned long )((void *)0)));
        __CrestApply2(6532, 13, (long long )((unsigned long )type != (unsigned long )((void *)0)));
# 142 "../HPL_packL.c"
        if ((unsigned long )type != (unsigned long )((void *)0)) {
          __CrestBranch(6535, 2696, 1);
          __CrestLoad(6537, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
          __CrestStore(6538, (unsigned long )(& m));
# 145 "../HPL_packL.c"
          m = PANEL->mp;
# 145 "../HPL_packL.c"
          mem_28 = PANEL->grid;
          __CrestLoad(6541, (unsigned long )(& mem_28->myrow), (long long )mem_28->myrow);
          __CrestLoad(6540, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
          __CrestApply2(6539, 12, (long long )(mem_28->myrow == PANEL->prow));
          __CrestStore(6542, (unsigned long )(& curr));
# 145 "../HPL_packL.c"
          curr = mem_28->myrow == PANEL->prow;
          {
          __CrestLoad(6545, (unsigned long )(& curr), (long long )curr);
          __CrestLoad(6544, (unsigned long )0, (long long )0);
          __CrestApply2(6543, 13, (long long )(curr != 0));
# 146 "../HPL_packL.c"
          if (curr != 0) {
            __CrestBranch(6546, 2698, 1);
            __CrestLoad(6550, (unsigned long )(& m), (long long )m);
            __CrestLoad(6549, (unsigned long )(& jb), (long long )jb);
            __CrestApply2(6548, 1, (long long )(m - jb));
            __CrestStore(6551, (unsigned long )(& m));
# 146 "../HPL_packL.c"
            m -= jb;
          } else {
            __CrestBranch(6547, 2699, 0);

          }
          }
          __CrestLoad(6552, (unsigned long )(& LEN), (long long )LEN);
          __CrestStore(6553, (unsigned long )(& len));
# 148 "../HPL_packL.c"
          len = (int )LEN;
          __CrestLoad(6554, (unsigned long )(& INDEX), (long long )INDEX);
          __CrestStore(6555, (unsigned long )(& ibuf));
# 148 "../HPL_packL.c"
          ibuf = (int )INDEX;
          __CrestLoad(6556, (unsigned long )0, (long long )0);
          __CrestStore(6557, (unsigned long )(& nbufs));
# 148 "../HPL_packL.c"
          nbufs = 0;
          __CrestLoad(6560, (unsigned long )(& jb), (long long )jb);
          __CrestLoad(6559, (unsigned long )(& m), (long long )m);
          __CrestApply2(6558, 2, (long long )(jb * m));
          __CrestStore(6561, (unsigned long )(& jbm));
# 148 "../HPL_packL.c"
          jbm = jb * m;
          {
          __CrestLoad(6564, (unsigned long )(& m), (long long )m);
          __CrestLoad(6563, (unsigned long )0, (long long )0);
          __CrestApply2(6562, 14, (long long )(m > 0));
# 150 "../HPL_packL.c"
          if (m > 0) {
            __CrestBranch(6565, 2702, 1);
            {
            __CrestLoad(6569, (unsigned long )(& ibuf), (long long )ibuf);
            __CrestLoad(6568, (unsigned long )(& jbm), (long long )jbm);
            __CrestApply2(6567, 16, (long long )(ibuf < jbm));
# 150 "../HPL_packL.c"
            if (ibuf < jbm) {
              __CrestBranch(6570, 2703, 1);
              {
# 155 "../HPL_packL.c"
              mem_29 = PANEL->grid;
              {
              __CrestLoad(6574, (unsigned long )(& mem_29->mycol), (long long )mem_29->mycol);
              __CrestLoad(6573, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
              __CrestApply2(6572, 12, (long long )(mem_29->mycol == PANEL->pcol));
# 155 "../HPL_packL.c"
              if (mem_29->mycol == PANEL->pcol) {
                __CrestBranch(6575, 2706, 1);
                __CrestLoad(6577, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
                __CrestStore(6578, (unsigned long )(& lda));
# 157 "../HPL_packL.c"
                lda = PANEL->lda;
                {
                __CrestLoad(6581, (unsigned long )(& curr), (long long )curr);
                __CrestLoad(6580, (unsigned long )0, (long long )0);
                __CrestApply2(6579, 13, (long long )(curr != 0));
# 158 "../HPL_packL.c"
                if (curr != 0) {
                  __CrestBranch(6582, 2708, 1);
# 158 "../HPL_packL.c"
                  A = (PANEL->A + jb) + - jb * lda;
                } else {
                  __CrestBranch(6583, 2709, 0);
# 159 "../HPL_packL.c"
                  A = (PANEL->A + 0) + - jb * lda;
                }
                }
              } else {
                __CrestBranch(6576, 2710, 0);
                __CrestLoad(6584, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
                __CrestStore(6585, (unsigned long )(& lda));
# 161 "../HPL_packL.c"
                lda = PANEL->ldl2;
# 161 "../HPL_packL.c"
                A = PANEL->L2;
              }
              }
              }
              __CrestLoad(6588, (unsigned long )(& ibuf), (long long )ibuf);
              __CrestLoad(6587, (unsigned long )(& m), (long long )m);
              __CrestApply2(6586, 3, (long long )(ibuf / m));
              __CrestStore(6589, (unsigned long )(& j1));
# 165 "../HPL_packL.c"
              j1 = ibuf / m;
              __CrestLoad(6594, (unsigned long )(& ibuf), (long long )ibuf);
              __CrestLoad(6593, (unsigned long )(& j1), (long long )j1);
              __CrestLoad(6592, (unsigned long )(& m), (long long )m);
              __CrestApply2(6591, 2, (long long )(j1 * m));
              __CrestApply2(6590, 1, (long long )(ibuf - j1 * m));
              __CrestStore(6595, (unsigned long )(& i1));
# 165 "../HPL_packL.c"
              i1 = ibuf - j1 * m;
              __CrestLoad(6598, (unsigned long )(& m), (long long )m);
              __CrestLoad(6597, (unsigned long )(& i1), (long long )i1);
              __CrestApply2(6596, 1, (long long )(m - i1));
              __CrestStore(6599, (unsigned long )(& m1));
# 165 "../HPL_packL.c"
              m1 = m - i1;
              {
              __CrestLoad(6602, (unsigned long )(& len), (long long )len);
              __CrestLoad(6601, (unsigned long )(& m1), (long long )m1);
              __CrestApply2(6600, 16, (long long )(len < m1));
# 166 "../HPL_packL.c"
              if (len < m1) {
                __CrestBranch(6603, 2713, 1);
                __CrestLoad(6605, (unsigned long )(& len), (long long )len);
                __CrestStore(6606, (unsigned long )(& m1));
# 166 "../HPL_packL.c"
                m1 = len;
              } else {
                __CrestBranch(6604, 2714, 0);
                __CrestLoad(6607, (unsigned long )(& m1), (long long )m1);
                __CrestStore(6608, (unsigned long )(& m1));
# 166 "../HPL_packL.c"
                m1 = m1;
              }
              }
# 168 "../HPL_packL.c"
              mem_30 = bufs + nbufs;
# 168 "../HPL_packL.c"
              *mem_30 = (void **)((void *)((A + i1) + j1 * lda));
# 169 "../HPL_packL.c"
              mem_31 = type + nbufs;
              __CrestLoad(6609, (unsigned long )0, (long long )1275070475);
              __CrestStore(6610, (unsigned long )mem_31);
# 169 "../HPL_packL.c"
              *mem_31 = 1275070475;
# 170 "../HPL_packL.c"
              mem_32 = blen + nbufs;
              __CrestLoad(6611, (unsigned long )(& m1), (long long )m1);
              __CrestStore(6612, (unsigned long )mem_32);
# 170 "../HPL_packL.c"
              *mem_32 = m1;
              {
              __CrestLoad(6615, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(6614, (unsigned long )0, (long long )0);
              __CrestApply2(6613, 12, (long long )(ierr == 0));
# 171 "../HPL_packL.c"
              if (ierr == 0) {
                __CrestBranch(6616, 2717, 1);
# 172 "../HPL_packL.c"
                mem_33 = bufs + nbufs;
# 172 "../HPL_packL.c"
                ierr = MPI_Address((void const *)*mem_33, disp + nbufs);
                __CrestHandleReturn(6619, (long long )ierr);
                __CrestStore(6618, (unsigned long )(& ierr));
              } else {
                __CrestBranch(6617, 2718, 0);

              }
              }
              __CrestLoad(6622, (unsigned long )(& nbufs), (long long )nbufs);
              __CrestLoad(6621, (unsigned long )0, (long long )1);
              __CrestApply2(6620, 0, (long long )(nbufs + 1));
              __CrestStore(6623, (unsigned long )(& nbufs));
# 174 "../HPL_packL.c"
              nbufs ++;
              __CrestLoad(6626, (unsigned long )(& len), (long long )len);
              __CrestLoad(6625, (unsigned long )(& m1), (long long )m1);
              __CrestApply2(6624, 1, (long long )(len - m1));
              __CrestStore(6627, (unsigned long )(& len));
# 174 "../HPL_packL.c"
              len -= m1;
              __CrestLoad(6630, (unsigned long )(& j1), (long long )j1);
              __CrestLoad(6629, (unsigned long )0, (long long )1);
              __CrestApply2(6628, 0, (long long )(j1 + 1));
              __CrestStore(6631, (unsigned long )(& j1));
# 174 "../HPL_packL.c"
              j1 ++;
              __CrestLoad(6634, (unsigned long )(& ibuf), (long long )ibuf);
              __CrestLoad(6633, (unsigned long )(& m1), (long long )m1);
              __CrestApply2(6632, 0, (long long )(ibuf + m1));
              __CrestStore(6635, (unsigned long )(& ibuf));
# 174 "../HPL_packL.c"
              ibuf += m1;
              {
# 178 "../HPL_packL.c"
              while (1) {
                while_continue: ;
                {
                __CrestLoad(6638, (unsigned long )(& len), (long long )len);
                __CrestLoad(6637, (unsigned long )0, (long long )0);
                __CrestApply2(6636, 14, (long long )(len > 0));
# 178 "../HPL_packL.c"
                if (len > 0) {
                  __CrestBranch(6639, 2724, 1);
                  {
                  __CrestLoad(6643, (unsigned long )(& j1), (long long )j1);
                  __CrestLoad(6642, (unsigned long )(& jb), (long long )jb);
                  __CrestApply2(6641, 17, (long long )(j1 >= jb));
# 178 "../HPL_packL.c"
                  if (j1 >= jb) {
                    __CrestBranch(6644, 2725, 1);
# 178 "../HPL_packL.c"
                    goto while_break;
                  } else {
                    __CrestBranch(6645, 2726, 0);

                  }
                  }
                } else {
                  __CrestBranch(6640, 2727, 0);
# 178 "../HPL_packL.c"
                  goto while_break;
                }
                }
                {
                __CrestLoad(6648, (unsigned long )(& len), (long long )len);
                __CrestLoad(6647, (unsigned long )(& m), (long long )m);
                __CrestApply2(6646, 16, (long long )(len < m));
# 180 "../HPL_packL.c"
                if (len < m) {
                  __CrestBranch(6649, 2729, 1);
                  __CrestLoad(6651, (unsigned long )(& len), (long long )len);
                  __CrestStore(6652, (unsigned long )(& m1));
# 180 "../HPL_packL.c"
                  m1 = len;
                } else {
                  __CrestBranch(6650, 2730, 0);
                  __CrestLoad(6653, (unsigned long )(& m), (long long )m);
                  __CrestStore(6654, (unsigned long )(& m1));
# 180 "../HPL_packL.c"
                  m1 = m;
                }
                }
# 182 "../HPL_packL.c"
                mem_34 = bufs + nbufs;
# 182 "../HPL_packL.c"
                *mem_34 = (void **)((void *)((A + 0) + j1 * lda));
# 183 "../HPL_packL.c"
                mem_35 = type + nbufs;
                __CrestLoad(6655, (unsigned long )0, (long long )1275070475);
                __CrestStore(6656, (unsigned long )mem_35);
# 183 "../HPL_packL.c"
                *mem_35 = 1275070475;
# 184 "../HPL_packL.c"
                mem_36 = blen + nbufs;
                __CrestLoad(6657, (unsigned long )(& m1), (long long )m1);
                __CrestStore(6658, (unsigned long )mem_36);
# 184 "../HPL_packL.c"
                *mem_36 = m1;
                {
                __CrestLoad(6661, (unsigned long )(& ierr), (long long )ierr);
                __CrestLoad(6660, (unsigned long )0, (long long )0);
                __CrestApply2(6659, 12, (long long )(ierr == 0));
# 185 "../HPL_packL.c"
                if (ierr == 0) {
                  __CrestBranch(6662, 2733, 1);
# 186 "../HPL_packL.c"
                  mem_37 = bufs + nbufs;
# 186 "../HPL_packL.c"
                  ierr = MPI_Address((void const *)*mem_37, disp + nbufs);
                  __CrestHandleReturn(6665, (long long )ierr);
                  __CrestStore(6664, (unsigned long )(& ierr));
                } else {
                  __CrestBranch(6663, 2734, 0);

                }
                }
                __CrestLoad(6668, (unsigned long )(& nbufs), (long long )nbufs);
                __CrestLoad(6667, (unsigned long )0, (long long )1);
                __CrestApply2(6666, 0, (long long )(nbufs + 1));
                __CrestStore(6669, (unsigned long )(& nbufs));
# 188 "../HPL_packL.c"
                nbufs ++;
                __CrestLoad(6672, (unsigned long )(& len), (long long )len);
                __CrestLoad(6671, (unsigned long )(& m1), (long long )m1);
                __CrestApply2(6670, 1, (long long )(len - m1));
                __CrestStore(6673, (unsigned long )(& len));
# 188 "../HPL_packL.c"
                len -= m1;
                __CrestLoad(6676, (unsigned long )(& j1), (long long )j1);
                __CrestLoad(6675, (unsigned long )0, (long long )1);
                __CrestApply2(6674, 0, (long long )(j1 + 1));
                __CrestStore(6677, (unsigned long )(& j1));
# 188 "../HPL_packL.c"
                j1 ++;
                __CrestLoad(6680, (unsigned long )(& ibuf), (long long )ibuf);
                __CrestLoad(6679, (unsigned long )(& m1), (long long )m1);
                __CrestApply2(6678, 0, (long long )(ibuf + m1));
                __CrestStore(6681, (unsigned long )(& ibuf));
# 188 "../HPL_packL.c"
                ibuf += m1;
              }
              while_break: ;
              }
            } else {
              __CrestBranch(6571, 2737, 0);

            }
            }
          } else {
            __CrestBranch(6566, 2738, 0);

          }
          }
          {
          __CrestLoad(6684, (unsigned long )(& len), (long long )len);
          __CrestLoad(6683, (unsigned long )0, (long long )0);
          __CrestApply2(6682, 14, (long long )(len > 0));
# 194 "../HPL_packL.c"
          if (len > 0) {
            __CrestBranch(6685, 2740, 1);
# 196 "../HPL_packL.c"
            mem_38 = bufs + nbufs;
# 196 "../HPL_packL.c"
            *mem_38 = (void **)((void *)((PANEL->L1 + ibuf) - jbm));
# 197 "../HPL_packL.c"
            mem_39 = type + nbufs;
            __CrestLoad(6687, (unsigned long )0, (long long )1275070475);
            __CrestStore(6688, (unsigned long )mem_39);
# 197 "../HPL_packL.c"
            *mem_39 = 1275070475;
# 198 "../HPL_packL.c"
            mem_40 = blen + nbufs;
            __CrestLoad(6689, (unsigned long )(& len), (long long )len);
            __CrestStore(6690, (unsigned long )mem_40);
# 198 "../HPL_packL.c"
            *mem_40 = len;
            {
            __CrestLoad(6693, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(6692, (unsigned long )0, (long long )0);
            __CrestApply2(6691, 12, (long long )(ierr == 0));
# 199 "../HPL_packL.c"
            if (ierr == 0) {
              __CrestBranch(6694, 2742, 1);
# 200 "../HPL_packL.c"
              mem_41 = bufs + nbufs;
# 200 "../HPL_packL.c"
              ierr = MPI_Address((void const *)*mem_41, disp + nbufs);
              __CrestHandleReturn(6697, (long long )ierr);
              __CrestStore(6696, (unsigned long )(& ierr));
            } else {
              __CrestBranch(6695, 2743, 0);

            }
            }
            __CrestLoad(6700, (unsigned long )(& nbufs), (long long )nbufs);
            __CrestLoad(6699, (unsigned long )0, (long long )1);
            __CrestApply2(6698, 0, (long long )(nbufs + 1));
            __CrestStore(6701, (unsigned long )(& nbufs));
# 201 "../HPL_packL.c"
            nbufs ++;
          } else {
            __CrestBranch(6686, 2745, 0);

          }
          }
          __CrestLoad(6702, (unsigned long )0, (long long )1);
          __CrestStore(6703, (unsigned long )(& i));
# 204 "../HPL_packL.c"
          i = 1;
          {
# 204 "../HPL_packL.c"
          while (1) {
            while_continue___0: ;
            {
            __CrestLoad(6706, (unsigned long )(& i), (long long )i);
            __CrestLoad(6705, (unsigned long )(& nbufs), (long long )nbufs);
            __CrestApply2(6704, 16, (long long )(i < nbufs));
# 204 "../HPL_packL.c"
            if (i < nbufs) {
              __CrestBranch(6707, 2751, 1);

            } else {
              __CrestBranch(6708, 2752, 0);
# 204 "../HPL_packL.c"
              goto while_break___0;
            }
            }
# 204 "../HPL_packL.c"
            mem_42 = disp + i;
# 204 "../HPL_packL.c"
            mem_43 = disp + i;
# 204 "../HPL_packL.c"
            mem_44 = disp + 0;
            __CrestLoad(6711, (unsigned long )mem_43, (long long )*mem_43);
            __CrestLoad(6710, (unsigned long )mem_44, (long long )*mem_44);
            __CrestApply2(6709, 1, (long long )(*mem_43 - *mem_44));
            __CrestStore(6712, (unsigned long )mem_42);
# 204 "../HPL_packL.c"
            *mem_42 = *mem_43 - *mem_44;
            __CrestLoad(6715, (unsigned long )(& i), (long long )i);
            __CrestLoad(6714, (unsigned long )0, (long long )1);
            __CrestApply2(6713, 0, (long long )(i + 1));
            __CrestStore(6716, (unsigned long )(& i));
# 204 "../HPL_packL.c"
            i ++;
          }
          while_break___0: ;
          }
# 204 "../HPL_packL.c"
          mem_45 = disp + 0;
          __CrestLoad(6717, (unsigned long )0, (long long )((MPI_Aint )0));
          __CrestStore(6718, (unsigned long )mem_45);
# 204 "../HPL_packL.c"
          *mem_45 = (MPI_Aint )0;
# 206 "../HPL_packL.c"
          mem_46 = bufs + 0;
# 206 "../HPL_packL.c"
          PANEL->buffers[IBUF] = (void ***)((void *)*mem_46);
          __CrestLoad(6719, (unsigned long )0, (long long )1);
          __CrestStore(6720, (unsigned long )(& PANEL->counts[IBUF]));
# 206 "../HPL_packL.c"
          PANEL->counts[IBUF] = 1;
          {
          __CrestLoad(6723, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(6722, (unsigned long )0, (long long )0);
          __CrestApply2(6721, 12, (long long )(ierr == 0));
# 210 "../HPL_packL.c"
          if (ierr == 0) {
            __CrestBranch(6724, 2757, 1);
            __CrestLoad(6726, (unsigned long )(& nbufs), (long long )nbufs);
# 211 "../HPL_packL.c"
            ierr = MPI_Type_struct(nbufs, (int const *)blen, (MPI_Aint const *)disp,
                                   (MPI_Datatype const *)type, & PANEL->dtypes[IBUF]);
            __CrestHandleReturn(6728, (long long )ierr);
            __CrestStore(6727, (unsigned long )(& ierr));
          } else {
            __CrestBranch(6725, 2758, 0);

          }
          }
          {
          __CrestLoad(6731, (unsigned long )(& bufs), (long long )((unsigned long )bufs));
          __CrestLoad(6730, (unsigned long )0, (long long )0);
          __CrestApply2(6729, 13, (long long )(bufs != 0));
# 216 "../HPL_packL.c"
          if (bufs != 0) {
            __CrestBranch(6732, 2760, 1);
# 216 "../HPL_packL.c"
            free((void *)bufs);
            __CrestClearStack(6734);
          } else {
            __CrestBranch(6733, 2761, 0);

          }
          }
          {
          __CrestLoad(6737, (unsigned long )(& blen), (long long )((unsigned long )blen));
          __CrestLoad(6736, (unsigned long )0, (long long )0);
          __CrestApply2(6735, 13, (long long )(blen != 0));
# 217 "../HPL_packL.c"
          if (blen != 0) {
            __CrestBranch(6738, 2763, 1);
# 217 "../HPL_packL.c"
            free((void *)blen);
            __CrestClearStack(6740);
          } else {
            __CrestBranch(6739, 2764, 0);

          }
          }
          {
          __CrestLoad(6743, (unsigned long )(& disp), (long long )((unsigned long )disp));
          __CrestLoad(6742, (unsigned long )0, (long long )0);
          __CrestApply2(6741, 13, (long long )(disp != 0));
# 218 "../HPL_packL.c"
          if (disp != 0) {
            __CrestBranch(6744, 2766, 1);
# 218 "../HPL_packL.c"
            free((void *)disp);
            __CrestClearStack(6746);
          } else {
            __CrestBranch(6745, 2767, 0);

          }
          }
          {
          __CrestLoad(6749, (unsigned long )(& type), (long long )((unsigned long )type));
          __CrestLoad(6748, (unsigned long )0, (long long )0);
          __CrestApply2(6747, 13, (long long )(type != 0));
# 219 "../HPL_packL.c"
          if (type != 0) {
            __CrestBranch(6750, 2769, 1);
# 219 "../HPL_packL.c"
            free((void *)type);
            __CrestClearStack(6752);
          } else {
            __CrestBranch(6751, 2770, 0);

          }
          }
          {
          __CrestLoad(6755, (unsigned long )(& ierr), (long long )ierr);
          __CrestLoad(6754, (unsigned long )0, (long long )0);
          __CrestApply2(6753, 12, (long long )(ierr == 0));
# 223 "../HPL_packL.c"
          if (ierr == 0) {
            __CrestBranch(6756, 2772, 1);
# 224 "../HPL_packL.c"
            ierr = MPI_Type_commit(& PANEL->dtypes[IBUF]);
            __CrestHandleReturn(6759, (long long )ierr);
            __CrestStore(6758, (unsigned long )(& ierr));
          } else {
            __CrestBranch(6757, 2773, 0);

          }
          }
          __CrestLoad(6760, (unsigned long )(& ierr), (long long )ierr);
          __CrestStore(6761, (unsigned long )(& __retres47));
# 226 "../HPL_packL.c"
          __retres47 = ierr;
# 226 "../HPL_packL.c"
          goto return_label;
        } else {
          __CrestBranch(6536, 2776, 0);
          __CrestLoad(6762, (unsigned long )0, (long long )233);
# 233 "../HPL_packL.c"
          HPL_pabort(233, "HPL_packL", "Memory allocation failed");
          __CrestClearStack(6763);
          __CrestLoad(6764, (unsigned long )0, (long long )0);
          __CrestStore(6765, (unsigned long )(& __retres47));
# 234 "../HPL_packL.c"
          __retres47 = 0;
# 234 "../HPL_packL.c"
          goto return_label;
        }
        }
      } else {
        __CrestBranch(6531, 2779, 0);
        __CrestLoad(6766, (unsigned long )0, (long long )233);
# 233 "../HPL_packL.c"
        HPL_pabort(233, "HPL_packL", "Memory allocation failed");
        __CrestClearStack(6767);
        __CrestLoad(6768, (unsigned long )0, (long long )0);
        __CrestStore(6769, (unsigned long )(& __retres47));
# 234 "../HPL_packL.c"
        __retres47 = 0;
# 234 "../HPL_packL.c"
        goto return_label;
      }
      }
    } else {
      __CrestBranch(6526, 2782, 0);
      __CrestLoad(6770, (unsigned long )0, (long long )233);
# 233 "../HPL_packL.c"
      HPL_pabort(233, "HPL_packL", "Memory allocation failed");
      __CrestClearStack(6771);
      __CrestLoad(6772, (unsigned long )0, (long long )0);
      __CrestStore(6773, (unsigned long )(& __retres47));
# 234 "../HPL_packL.c"
      __retres47 = 0;
# 234 "../HPL_packL.c"
      goto return_label;
    }
    }
  } else {
    __CrestBranch(6521, 2785, 0);
    __CrestLoad(6774, (unsigned long )0, (long long )233);
# 233 "../HPL_packL.c"
    HPL_pabort(233, "HPL_packL", "Memory allocation failed");
    __CrestClearStack(6775);
    __CrestLoad(6776, (unsigned long )0, (long long )0);
    __CrestStore(6777, (unsigned long )(& __retres47));
# 234 "../HPL_packL.c"
    __retres47 = 0;
# 234 "../HPL_packL.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(6778, (unsigned long )(& __retres47), (long long )__retres47);
  __CrestReturn(6779);
# 53 "../HPL_packL.c"
  return (__retres47);
  }
}
}
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 129 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
void HPL_copyL(HPL_T_panel *PANEL ) ;
# 53 "../HPL_copyL.c"
void HPL_copyL(HPL_T_panel *PANEL )
{
  int jb ;
  int lda ;
  struct HPL_S_grid *mem_4 ;
  struct HPL_S_grid *mem_5 ;

  {
  __CrestCall(6780, 30);

  {
# 90 "../HPL_copyL.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(6783, (unsigned long )(& mem_4->mycol), (long long )mem_4->mycol);
  __CrestLoad(6782, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestApply2(6781, 12, (long long )(mem_4->mycol == PANEL->pcol));
# 90 "../HPL_copyL.c"
  if (mem_4->mycol == PANEL->pcol) {
    __CrestBranch(6784, 2792, 1);
    __CrestLoad(6786, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
    __CrestStore(6787, (unsigned long )(& jb));
# 92 "../HPL_copyL.c"
    jb = PANEL->jb;
    __CrestLoad(6788, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
    __CrestStore(6789, (unsigned long )(& lda));
# 92 "../HPL_copyL.c"
    lda = PANEL->lda;
    {
# 94 "../HPL_copyL.c"
    mem_5 = PANEL->grid;
    {
    __CrestLoad(6792, (unsigned long )(& mem_5->myrow), (long long )mem_5->myrow);
    __CrestLoad(6791, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(6790, 12, (long long )(mem_5->myrow == PANEL->prow));
# 94 "../HPL_copyL.c"
    if (mem_5->myrow == PANEL->prow) {
      __CrestBranch(6793, 2796, 1);
      __CrestLoad(6797, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
      __CrestLoad(6796, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(6795, 1, (long long )(PANEL->mp - jb));
      __CrestLoad(6798, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(6799, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(6800, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
# 96 "../HPL_copyL.c"
      HPL_dlacpy((int const )(PANEL->mp - jb), (int const )jb, (double const *)((PANEL->A + jb) + - jb * lda),
                 (int const )lda, PANEL->L2, (int const )PANEL->ldl2);
      __CrestClearStack(6801);
    } else {
      __CrestBranch(6794, 2797, 0);
      __CrestLoad(6802, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
      __CrestLoad(6803, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(6804, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(6805, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
# 101 "../HPL_copyL.c"
      HPL_dlacpy((int const )PANEL->mp, (int const )jb, (double const *)((PANEL->A + 0) + - jb * lda),
                 (int const )lda, PANEL->L2, (int const )PANEL->ldl2);
      __CrestClearStack(6806);
    }
    }
    }
  } else {
    __CrestBranch(6785, 2798, 0);

  }
  }
  }

  {
  __CrestReturn(6807);
# 53 "../HPL_copyL.c"
  return;
  }
}
}
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 109 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit(HPL_T_panel *PANEL ) ;
# 53 "../HPL_binit.c"
int HPL_binit(HPL_T_panel *PANEL )
{
  int ierr ;
  HPL_T_TOP top ;
  struct HPL_S_grid *mem_4 ;
  struct HPL_S_palg *mem_5 ;
  int __retres6 ;

  {
  __CrestCall(6808, 31);

  {
# 87 "../HPL_binit.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(6811, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(6810, (unsigned long )0, (long long )1);
  __CrestApply2(6809, 15, (long long )(mem_4->npcol <= 1));
# 87 "../HPL_binit.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(6812, 2804, 1);
    __CrestLoad(6814, (unsigned long )0, (long long )1);
    __CrestStore(6815, (unsigned long )(& __retres6));
# 87 "../HPL_binit.c"
    __retres6 = 1;
# 87 "../HPL_binit.c"
    goto return_label;
  } else {
    __CrestBranch(6813, 2806, 0);

  }
  }
  }
# 91 "../HPL_binit.c"
  mem_5 = PANEL->algo;
  __CrestLoad(6816, (unsigned long )(& mem_5->btopo), (long long )mem_5->btopo);
  __CrestStore(6817, (unsigned long )(& top));
# 91 "../HPL_binit.c"
  top = mem_5->btopo;
  {
  {
  __CrestLoad(6820, (unsigned long )(& top), (long long )top);
  __CrestLoad(6819, (unsigned long )0, (long long )402U);
  __CrestApply2(6818, 12, (long long )((unsigned int )top == 402U));
# 94 "../HPL_binit.c"
  if ((unsigned int )top == 402U) {
    __CrestBranch(6821, 2810, 1);
# 94 "../HPL_binit.c"
    goto case_402;
  } else {
    __CrestBranch(6822, 2811, 0);

  }
  }
  {
  __CrestLoad(6825, (unsigned long )(& top), (long long )top);
  __CrestLoad(6824, (unsigned long )0, (long long )401U);
  __CrestApply2(6823, 12, (long long )((unsigned int )top == 401U));
# 96 "../HPL_binit.c"
  if ((unsigned int )top == 401U) {
    __CrestBranch(6826, 2813, 1);
# 96 "../HPL_binit.c"
    goto case_401;
  } else {
    __CrestBranch(6827, 2814, 0);

  }
  }
  {
  __CrestLoad(6830, (unsigned long )(& top), (long long )top);
  __CrestLoad(6829, (unsigned long )0, (long long )404U);
  __CrestApply2(6828, 12, (long long )((unsigned int )top == 404U));
# 97 "../HPL_binit.c"
  if ((unsigned int )top == 404U) {
    __CrestBranch(6831, 2816, 1);
# 97 "../HPL_binit.c"
    goto case_404;
  } else {
    __CrestBranch(6832, 2817, 0);

  }
  }
  {
  __CrestLoad(6835, (unsigned long )(& top), (long long )top);
  __CrestLoad(6834, (unsigned long )0, (long long )403U);
  __CrestApply2(6833, 12, (long long )((unsigned int )top == 403U));
# 98 "../HPL_binit.c"
  if ((unsigned int )top == 403U) {
    __CrestBranch(6836, 2819, 1);
# 98 "../HPL_binit.c"
    goto case_403;
  } else {
    __CrestBranch(6837, 2820, 0);

  }
  }
  {
  __CrestLoad(6840, (unsigned long )(& top), (long long )top);
  __CrestLoad(6839, (unsigned long )0, (long long )406U);
  __CrestApply2(6838, 12, (long long )((unsigned int )top == 406U));
# 99 "../HPL_binit.c"
  if ((unsigned int )top == 406U) {
    __CrestBranch(6841, 2822, 1);
# 99 "../HPL_binit.c"
    goto case_406;
  } else {
    __CrestBranch(6842, 2823, 0);

  }
  }
  {
  __CrestLoad(6845, (unsigned long )(& top), (long long )top);
  __CrestLoad(6844, (unsigned long )0, (long long )405U);
  __CrestApply2(6843, 12, (long long )((unsigned int )top == 405U));
# 100 "../HPL_binit.c"
  if ((unsigned int )top == 405U) {
    __CrestBranch(6846, 2825, 1);
# 100 "../HPL_binit.c"
    goto case_405;
  } else {
    __CrestBranch(6847, 2826, 0);

  }
  }
# 101 "../HPL_binit.c"
  goto switch_default;
  case_402:
# 95 "../HPL_binit.c"
  ierr = HPL_binit_1rinM(PANEL);
  __CrestHandleReturn(6849, (long long )ierr);
  __CrestStore(6848, (unsigned long )(& ierr));
# 95 "../HPL_binit.c"
  goto switch_break;
  case_401:
# 96 "../HPL_binit.c"
  ierr = HPL_binit_1ring(PANEL);
  __CrestHandleReturn(6851, (long long )ierr);
  __CrestStore(6850, (unsigned long )(& ierr));
# 96 "../HPL_binit.c"
  goto switch_break;
  case_404:
# 97 "../HPL_binit.c"
  ierr = HPL_binit_2rinM(PANEL);
  __CrestHandleReturn(6853, (long long )ierr);
  __CrestStore(6852, (unsigned long )(& ierr));
# 97 "../HPL_binit.c"
  goto switch_break;
  case_403:
# 98 "../HPL_binit.c"
  ierr = HPL_binit_2ring(PANEL);
  __CrestHandleReturn(6855, (long long )ierr);
  __CrestStore(6854, (unsigned long )(& ierr));
# 98 "../HPL_binit.c"
  goto switch_break;
  case_406:
# 99 "../HPL_binit.c"
  ierr = HPL_binit_blonM(PANEL);
  __CrestHandleReturn(6857, (long long )ierr);
  __CrestStore(6856, (unsigned long )(& ierr));
# 99 "../HPL_binit.c"
  goto switch_break;
  case_405:
# 100 "../HPL_binit.c"
  ierr = HPL_binit_blong(PANEL);
  __CrestHandleReturn(6859, (long long )ierr);
  __CrestStore(6858, (unsigned long )(& ierr));
# 100 "../HPL_binit.c"
  goto switch_break;
  switch_default:
  __CrestLoad(6860, (unsigned long )0, (long long )1);
  __CrestStore(6861, (unsigned long )(& ierr));
# 101 "../HPL_binit.c"
  ierr = 1;
  switch_break: ;
  }
  __CrestLoad(6862, (unsigned long )(& ierr), (long long )ierr);
  __CrestStore(6863, (unsigned long )(& __retres6));
# 104 "../HPL_binit.c"
  __retres6 = ierr;
  return_label:
  {
  __CrestLoad(6864, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(6865);
# 53 "../HPL_binit.c"
  return (__retres6);
  }
}
}
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 113 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast(HPL_T_panel *PANEL , int *IFLAG ) ;
# 53 "../HPL_bcast.c"
int HPL_bcast(HPL_T_panel *PANEL , int *IFLAG )
{
  int ierr ;
  HPL_T_TOP top ;
  struct HPL_S_grid *mem_5 ;
  struct HPL_S_palg *mem_6 ;
  int __retres7 ;

  {
  __CrestCall(6866, 32);

  {
  __CrestLoad(6869, (unsigned long )(& PANEL), (long long )((unsigned long )PANEL));
  __CrestLoad(6868, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(6867, 12, (long long )((unsigned long )PANEL == (unsigned long )((void *)0)));
# 95 "../HPL_bcast.c"
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
    __CrestBranch(6870, 2845, 1);
    __CrestLoad(6872, (unsigned long )0, (long long )1);
    __CrestStore(6873, (unsigned long )IFLAG);
# 95 "../HPL_bcast.c"
    *IFLAG = 1;
    __CrestLoad(6874, (unsigned long )0, (long long )1);
    __CrestStore(6875, (unsigned long )(& __retres7));
# 95 "../HPL_bcast.c"
    __retres7 = 1;
# 95 "../HPL_bcast.c"
    goto return_label;
  } else {
    __CrestBranch(6871, 2848, 0);

  }
  }
  {
# 96 "../HPL_bcast.c"
  mem_5 = PANEL->grid;
  {
  __CrestLoad(6878, (unsigned long )(& mem_5->npcol), (long long )mem_5->npcol);
  __CrestLoad(6877, (unsigned long )0, (long long )1);
  __CrestApply2(6876, 15, (long long )(mem_5->npcol <= 1));
# 96 "../HPL_bcast.c"
  if (mem_5->npcol <= 1) {
    __CrestBranch(6879, 2852, 1);
    __CrestLoad(6881, (unsigned long )0, (long long )1);
    __CrestStore(6882, (unsigned long )IFLAG);
# 97 "../HPL_bcast.c"
    *IFLAG = 1;
    __CrestLoad(6883, (unsigned long )0, (long long )1);
    __CrestStore(6884, (unsigned long )(& __retres7));
# 97 "../HPL_bcast.c"
    __retres7 = 1;
# 97 "../HPL_bcast.c"
    goto return_label;
  } else {
    __CrestBranch(6880, 2855, 0);

  }
  }
  }
# 101 "../HPL_bcast.c"
  mem_6 = PANEL->algo;
  __CrestLoad(6885, (unsigned long )(& mem_6->btopo), (long long )mem_6->btopo);
  __CrestStore(6886, (unsigned long )(& top));
# 101 "../HPL_bcast.c"
  top = mem_6->btopo;
  {
  {
  __CrestLoad(6889, (unsigned long )(& top), (long long )top);
  __CrestLoad(6888, (unsigned long )0, (long long )402U);
  __CrestApply2(6887, 12, (long long )((unsigned int )top == 402U));
# 104 "../HPL_bcast.c"
  if ((unsigned int )top == 402U) {
    __CrestBranch(6890, 2859, 1);
# 104 "../HPL_bcast.c"
    goto case_402;
  } else {
    __CrestBranch(6891, 2860, 0);

  }
  }
  {
  __CrestLoad(6894, (unsigned long )(& top), (long long )top);
  __CrestLoad(6893, (unsigned long )0, (long long )401U);
  __CrestApply2(6892, 12, (long long )((unsigned int )top == 401U));
# 106 "../HPL_bcast.c"
  if ((unsigned int )top == 401U) {
    __CrestBranch(6895, 2862, 1);
# 106 "../HPL_bcast.c"
    goto case_401;
  } else {
    __CrestBranch(6896, 2863, 0);

  }
  }
  {
  __CrestLoad(6899, (unsigned long )(& top), (long long )top);
  __CrestLoad(6898, (unsigned long )0, (long long )404U);
  __CrestApply2(6897, 12, (long long )((unsigned int )top == 404U));
# 107 "../HPL_bcast.c"
  if ((unsigned int )top == 404U) {
    __CrestBranch(6900, 2865, 1);
# 107 "../HPL_bcast.c"
    goto case_404;
  } else {
    __CrestBranch(6901, 2866, 0);

  }
  }
  {
  __CrestLoad(6904, (unsigned long )(& top), (long long )top);
  __CrestLoad(6903, (unsigned long )0, (long long )403U);
  __CrestApply2(6902, 12, (long long )((unsigned int )top == 403U));
# 108 "../HPL_bcast.c"
  if ((unsigned int )top == 403U) {
    __CrestBranch(6905, 2868, 1);
# 108 "../HPL_bcast.c"
    goto case_403;
  } else {
    __CrestBranch(6906, 2869, 0);

  }
  }
  {
  __CrestLoad(6909, (unsigned long )(& top), (long long )top);
  __CrestLoad(6908, (unsigned long )0, (long long )406U);
  __CrestApply2(6907, 12, (long long )((unsigned int )top == 406U));
# 109 "../HPL_bcast.c"
  if ((unsigned int )top == 406U) {
    __CrestBranch(6910, 2871, 1);
# 109 "../HPL_bcast.c"
    goto case_406;
  } else {
    __CrestBranch(6911, 2872, 0);

  }
  }
  {
  __CrestLoad(6914, (unsigned long )(& top), (long long )top);
  __CrestLoad(6913, (unsigned long )0, (long long )405U);
  __CrestApply2(6912, 12, (long long )((unsigned int )top == 405U));
# 110 "../HPL_bcast.c"
  if ((unsigned int )top == 405U) {
    __CrestBranch(6915, 2874, 1);
# 110 "../HPL_bcast.c"
    goto case_405;
  } else {
    __CrestBranch(6916, 2875, 0);

  }
  }
# 111 "../HPL_bcast.c"
  goto switch_default;
  case_402:
# 105 "../HPL_bcast.c"
  ierr = HPL_bcast_1rinM(PANEL, IFLAG);
  __CrestHandleReturn(6918, (long long )ierr);
  __CrestStore(6917, (unsigned long )(& ierr));
# 105 "../HPL_bcast.c"
  goto switch_break;
  case_401:
# 106 "../HPL_bcast.c"
  ierr = HPL_bcast_1ring(PANEL, IFLAG);
  __CrestHandleReturn(6920, (long long )ierr);
  __CrestStore(6919, (unsigned long )(& ierr));
# 106 "../HPL_bcast.c"
  goto switch_break;
  case_404:
# 107 "../HPL_bcast.c"
  ierr = HPL_bcast_2rinM(PANEL, IFLAG);
  __CrestHandleReturn(6922, (long long )ierr);
  __CrestStore(6921, (unsigned long )(& ierr));
# 107 "../HPL_bcast.c"
  goto switch_break;
  case_403:
# 108 "../HPL_bcast.c"
  ierr = HPL_bcast_2ring(PANEL, IFLAG);
  __CrestHandleReturn(6924, (long long )ierr);
  __CrestStore(6923, (unsigned long )(& ierr));
# 108 "../HPL_bcast.c"
  goto switch_break;
  case_406:
# 109 "../HPL_bcast.c"
  ierr = HPL_bcast_blonM(PANEL, IFLAG);
  __CrestHandleReturn(6926, (long long )ierr);
  __CrestStore(6925, (unsigned long )(& ierr));
# 109 "../HPL_bcast.c"
  goto switch_break;
  case_405:
# 110 "../HPL_bcast.c"
  ierr = HPL_bcast_blong(PANEL, IFLAG);
  __CrestHandleReturn(6928, (long long )ierr);
  __CrestStore(6927, (unsigned long )(& ierr));
# 110 "../HPL_bcast.c"
  goto switch_break;
  switch_default:
  __CrestLoad(6929, (unsigned long )0, (long long )1);
  __CrestStore(6930, (unsigned long )(& ierr));
# 111 "../HPL_bcast.c"
  ierr = 1;
  switch_break: ;
  }
  __CrestLoad(6931, (unsigned long )(& ierr), (long long )ierr);
  __CrestStore(6932, (unsigned long )(& __retres7));
# 114 "../HPL_bcast.c"
  __retres7 = ierr;
  return_label:
  {
  __CrestLoad(6933, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(6934);
# 53 "../HPL_bcast.c"
  return (__retres7);
  }
}
}
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 118 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait(HPL_T_panel *PANEL ) ;
# 53 "../HPL_bwait.c"
int HPL_bwait(HPL_T_panel *PANEL )
{
  int ierr ;
  HPL_T_TOP top ;
  struct HPL_S_grid *mem_4 ;
  struct HPL_S_palg *mem_5 ;
  int __retres6 ;

  {
  __CrestCall(6935, 33);

  {
# 88 "../HPL_bwait.c"
  mem_4 = PANEL->grid;
  {
  __CrestLoad(6938, (unsigned long )(& mem_4->npcol), (long long )mem_4->npcol);
  __CrestLoad(6937, (unsigned long )0, (long long )1);
  __CrestApply2(6936, 15, (long long )(mem_4->npcol <= 1));
# 88 "../HPL_bwait.c"
  if (mem_4->npcol <= 1) {
    __CrestBranch(6939, 2896, 1);
    __CrestLoad(6941, (unsigned long )0, (long long )1);
    __CrestStore(6942, (unsigned long )(& __retres6));
# 88 "../HPL_bwait.c"
    __retres6 = 1;
# 88 "../HPL_bwait.c"
    goto return_label;
  } else {
    __CrestBranch(6940, 2898, 0);

  }
  }
  }
# 92 "../HPL_bwait.c"
  mem_5 = PANEL->algo;
  __CrestLoad(6943, (unsigned long )(& mem_5->btopo), (long long )mem_5->btopo);
  __CrestStore(6944, (unsigned long )(& top));
# 92 "../HPL_bwait.c"
  top = mem_5->btopo;
  {
  {
  __CrestLoad(6947, (unsigned long )(& top), (long long )top);
  __CrestLoad(6946, (unsigned long )0, (long long )402U);
  __CrestApply2(6945, 12, (long long )((unsigned int )top == 402U));
# 95 "../HPL_bwait.c"
  if ((unsigned int )top == 402U) {
    __CrestBranch(6948, 2902, 1);
# 95 "../HPL_bwait.c"
    goto case_402;
  } else {
    __CrestBranch(6949, 2903, 0);

  }
  }
  {
  __CrestLoad(6952, (unsigned long )(& top), (long long )top);
  __CrestLoad(6951, (unsigned long )0, (long long )401U);
  __CrestApply2(6950, 12, (long long )((unsigned int )top == 401U));
# 97 "../HPL_bwait.c"
  if ((unsigned int )top == 401U) {
    __CrestBranch(6953, 2905, 1);
# 97 "../HPL_bwait.c"
    goto case_401;
  } else {
    __CrestBranch(6954, 2906, 0);

  }
  }
  {
  __CrestLoad(6957, (unsigned long )(& top), (long long )top);
  __CrestLoad(6956, (unsigned long )0, (long long )404U);
  __CrestApply2(6955, 12, (long long )((unsigned int )top == 404U));
# 98 "../HPL_bwait.c"
  if ((unsigned int )top == 404U) {
    __CrestBranch(6958, 2908, 1);
# 98 "../HPL_bwait.c"
    goto case_404;
  } else {
    __CrestBranch(6959, 2909, 0);

  }
  }
  {
  __CrestLoad(6962, (unsigned long )(& top), (long long )top);
  __CrestLoad(6961, (unsigned long )0, (long long )403U);
  __CrestApply2(6960, 12, (long long )((unsigned int )top == 403U));
# 99 "../HPL_bwait.c"
  if ((unsigned int )top == 403U) {
    __CrestBranch(6963, 2911, 1);
# 99 "../HPL_bwait.c"
    goto case_403;
  } else {
    __CrestBranch(6964, 2912, 0);

  }
  }
  {
  __CrestLoad(6967, (unsigned long )(& top), (long long )top);
  __CrestLoad(6966, (unsigned long )0, (long long )406U);
  __CrestApply2(6965, 12, (long long )((unsigned int )top == 406U));
# 100 "../HPL_bwait.c"
  if ((unsigned int )top == 406U) {
    __CrestBranch(6968, 2914, 1);
# 100 "../HPL_bwait.c"
    goto case_406;
  } else {
    __CrestBranch(6969, 2915, 0);

  }
  }
  {
  __CrestLoad(6972, (unsigned long )(& top), (long long )top);
  __CrestLoad(6971, (unsigned long )0, (long long )405U);
  __CrestApply2(6970, 12, (long long )((unsigned int )top == 405U));
# 101 "../HPL_bwait.c"
  if ((unsigned int )top == 405U) {
    __CrestBranch(6973, 2917, 1);
# 101 "../HPL_bwait.c"
    goto case_405;
  } else {
    __CrestBranch(6974, 2918, 0);

  }
  }
# 102 "../HPL_bwait.c"
  goto switch_default;
  case_402:
# 96 "../HPL_bwait.c"
  ierr = HPL_bwait_1rinM(PANEL);
  __CrestHandleReturn(6976, (long long )ierr);
  __CrestStore(6975, (unsigned long )(& ierr));
# 96 "../HPL_bwait.c"
  goto switch_break;
  case_401:
# 97 "../HPL_bwait.c"
  ierr = HPL_bwait_1ring(PANEL);
  __CrestHandleReturn(6978, (long long )ierr);
  __CrestStore(6977, (unsigned long )(& ierr));
# 97 "../HPL_bwait.c"
  goto switch_break;
  case_404:
# 98 "../HPL_bwait.c"
  ierr = HPL_bwait_2rinM(PANEL);
  __CrestHandleReturn(6980, (long long )ierr);
  __CrestStore(6979, (unsigned long )(& ierr));
# 98 "../HPL_bwait.c"
  goto switch_break;
  case_403:
# 99 "../HPL_bwait.c"
  ierr = HPL_bwait_2ring(PANEL);
  __CrestHandleReturn(6982, (long long )ierr);
  __CrestStore(6981, (unsigned long )(& ierr));
# 99 "../HPL_bwait.c"
  goto switch_break;
  case_406:
# 100 "../HPL_bwait.c"
  ierr = HPL_bwait_blonM(PANEL);
  __CrestHandleReturn(6984, (long long )ierr);
  __CrestStore(6983, (unsigned long )(& ierr));
# 100 "../HPL_bwait.c"
  goto switch_break;
  case_405:
# 101 "../HPL_bwait.c"
  ierr = HPL_bwait_blong(PANEL);
  __CrestHandleReturn(6986, (long long )ierr);
  __CrestStore(6985, (unsigned long )(& ierr));
# 101 "../HPL_bwait.c"
  goto switch_break;
  switch_default:
  __CrestLoad(6987, (unsigned long )0, (long long )1);
  __CrestStore(6988, (unsigned long )(& ierr));
# 102 "../HPL_bwait.c"
  ierr = 1;
  switch_break: ;
  }
  __CrestLoad(6989, (unsigned long )(& ierr), (long long )ierr);
  __CrestStore(6990, (unsigned long )(& __retres6));
# 105 "../HPL_bwait.c"
  __retres6 = ierr;
  return_label:
  {
  __CrestLoad(6991, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(6992);
# 53 "../HPL_bwait.c"
  return (__retres6);
  }
}
}
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 82 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_send(double *SBUF , int SCOUNT , int DEST , int STAG , MPI_Comm COMM ) ;
# 60 "../HPL_send.c"
int HPL_send(double *SBUF , int SCOUNT , int DEST , int STAG , MPI_Comm COMM )
{
  int ierr ;
  int tmp ;
  int __retres8 ;

  {
  __CrestCall(6997, 34);
  __CrestStore(6996, (unsigned long )(& COMM));
  __CrestStore(6995, (unsigned long )(& STAG));
  __CrestStore(6994, (unsigned long )(& DEST));
  __CrestStore(6993, (unsigned long )(& SCOUNT));
  {
  __CrestLoad(7000, (unsigned long )(& SCOUNT), (long long )SCOUNT);
  __CrestLoad(6999, (unsigned long )0, (long long )0);
  __CrestApply2(6998, 15, (long long )(SCOUNT <= 0));
# 122 "../HPL_send.c"
  if (SCOUNT <= 0) {
    __CrestBranch(7001, 2937, 1);
    __CrestLoad(7003, (unsigned long )0, (long long )1);
    __CrestStore(7004, (unsigned long )(& __retres8));
# 122 "../HPL_send.c"
    __retres8 = 1;
# 122 "../HPL_send.c"
    goto return_label;
  } else {
    __CrestBranch(7002, 2939, 0);

  }
  }
  __CrestLoad(7005, (unsigned long )(& SCOUNT), (long long )SCOUNT);
  __CrestLoad(7006, (unsigned long )0, (long long )1275070475);
  __CrestLoad(7007, (unsigned long )(& DEST), (long long )DEST);
  __CrestLoad(7008, (unsigned long )(& STAG), (long long )STAG);
  __CrestLoad(7009, (unsigned long )(& COMM), (long long )COMM);
# 133 "../HPL_send.c"
  ierr = MPI_Send((void const *)((void *)SBUF), SCOUNT, 1275070475, DEST, STAG,
                  COMM);
  __CrestHandleReturn(7011, (long long )ierr);
  __CrestStore(7010, (unsigned long )(& ierr));
  {
  __CrestLoad(7014, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(7013, (unsigned long )0, (long long )0);
  __CrestApply2(7012, 12, (long long )(ierr == 0));
# 135 "../HPL_send.c"
  if (ierr == 0) {
    __CrestBranch(7015, 2942, 1);
    __CrestLoad(7017, (unsigned long )0, (long long )1);
    __CrestStore(7018, (unsigned long )(& tmp));
# 135 "../HPL_send.c"
    tmp = 1;
  } else {
    __CrestBranch(7016, 2943, 0);
    __CrestLoad(7019, (unsigned long )0, (long long )0);
    __CrestStore(7020, (unsigned long )(& tmp));
# 135 "../HPL_send.c"
    tmp = 0;
  }
  }
  __CrestLoad(7021, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(7022, (unsigned long )(& __retres8));
# 135 "../HPL_send.c"
  __retres8 = tmp;
  return_label:
  {
  __CrestLoad(7023, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(7024);
# 60 "../HPL_send.c"
  return (__retres8);
  }
}
}
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 90 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_recv(double *RBUF , int RCOUNT , int SRC , int RTAG , MPI_Comm COMM ) ;
# 60 "../HPL_recv.c"
int HPL_recv(double *RBUF , int RCOUNT , int SRC , int RTAG , MPI_Comm COMM )
{
  MPI_Status status ;
  int ierr ;
  int tmp ;
  int __retres9 ;

  {
  __CrestCall(7029, 35);
  __CrestStore(7028, (unsigned long )(& COMM));
  __CrestStore(7027, (unsigned long )(& RTAG));
  __CrestStore(7026, (unsigned long )(& SRC));
  __CrestStore(7025, (unsigned long )(& RCOUNT));
  {
  __CrestLoad(7032, (unsigned long )(& RCOUNT), (long long )RCOUNT);
  __CrestLoad(7031, (unsigned long )0, (long long )0);
  __CrestApply2(7030, 15, (long long )(RCOUNT <= 0));
# 123 "../HPL_recv.c"
  if (RCOUNT <= 0) {
    __CrestBranch(7033, 2947, 1);
    __CrestLoad(7035, (unsigned long )0, (long long )1);
    __CrestStore(7036, (unsigned long )(& __retres9));
# 123 "../HPL_recv.c"
    __retres9 = 1;
# 123 "../HPL_recv.c"
    goto return_label;
  } else {
    __CrestBranch(7034, 2949, 0);

  }
  }
  __CrestLoad(7037, (unsigned long )(& RCOUNT), (long long )RCOUNT);
  __CrestLoad(7038, (unsigned long )0, (long long )1275070475);
  __CrestLoad(7039, (unsigned long )(& SRC), (long long )SRC);
  __CrestLoad(7040, (unsigned long )(& RTAG), (long long )RTAG);
  __CrestLoad(7041, (unsigned long )(& COMM), (long long )COMM);
# 135 "../HPL_recv.c"
  ierr = MPI_Recv((void *)RBUF, RCOUNT, 1275070475, SRC, RTAG, COMM, & status);
  __CrestHandleReturn(7043, (long long )ierr);
  __CrestStore(7042, (unsigned long )(& ierr));
  {
  __CrestLoad(7046, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(7045, (unsigned long )0, (long long )0);
  __CrestApply2(7044, 12, (long long )(ierr == 0));
# 138 "../HPL_recv.c"
  if (ierr == 0) {
    __CrestBranch(7047, 2952, 1);
    __CrestLoad(7049, (unsigned long )0, (long long )1);
    __CrestStore(7050, (unsigned long )(& tmp));
# 138 "../HPL_recv.c"
    tmp = 1;
  } else {
    __CrestBranch(7048, 2953, 0);
    __CrestLoad(7051, (unsigned long )0, (long long )0);
    __CrestStore(7052, (unsigned long )(& tmp));
# 138 "../HPL_recv.c"
    tmp = 0;
  }
  }
  __CrestLoad(7053, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(7054, (unsigned long )(& __retres9));
# 138 "../HPL_recv.c"
  __retres9 = tmp;
  return_label:
  {
  __CrestLoad(7055, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(7056);
# 60 "../HPL_recv.c"
  return (__retres9);
  }
}
}
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 863 "//usr/include/mpich/mpi.h"
extern int MPI_Irecv(void *buf , int count , MPI_Datatype datatype , int source ,
                     int tag , MPI_Comm comm , MPI_Request *request ) ;
# 98 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_sdrv(double *SBUF , int SCOUNT , int STAG , double *RBUF , int RCOUNT , int RTAG ,
             int PARTNER , MPI_Comm COMM ) ;
# 60 "../HPL_sdrv.c"
int HPL_sdrv(double *SBUF , int SCOUNT , int STAG , double *RBUF , int RCOUNT , int RTAG ,
             int PARTNER , MPI_Comm COMM )
{
  MPI_Request request ;
  MPI_Status status ;
  int ierr ;
  int tmp ;

  {
  __CrestCall(7063, 36);
  __CrestStore(7062, (unsigned long )(& COMM));
  __CrestStore(7061, (unsigned long )(& PARTNER));
  __CrestStore(7060, (unsigned long )(& RTAG));
  __CrestStore(7059, (unsigned long )(& RCOUNT));
  __CrestStore(7058, (unsigned long )(& STAG));
  __CrestStore(7057, (unsigned long )(& SCOUNT));
  {
  __CrestLoad(7066, (unsigned long )(& RCOUNT), (long long )RCOUNT);
  __CrestLoad(7065, (unsigned long )0, (long long )0);
  __CrestApply2(7064, 14, (long long )(RCOUNT > 0));
# 142 "../HPL_sdrv.c"
  if (RCOUNT > 0) {
    __CrestBranch(7067, 2957, 1);
    {
    __CrestLoad(7071, (unsigned long )(& SCOUNT), (long long )SCOUNT);
    __CrestLoad(7070, (unsigned long )0, (long long )0);
    __CrestApply2(7069, 14, (long long )(SCOUNT > 0));
# 144 "../HPL_sdrv.c"
    if (SCOUNT > 0) {
      __CrestBranch(7072, 2958, 1);
      __CrestLoad(7074, (unsigned long )(& RCOUNT), (long long )RCOUNT);
      __CrestLoad(7075, (unsigned long )0, (long long )1275070475);
      __CrestLoad(7076, (unsigned long )(& PARTNER), (long long )PARTNER);
      __CrestLoad(7077, (unsigned long )(& RTAG), (long long )RTAG);
      __CrestLoad(7078, (unsigned long )(& COMM), (long long )COMM);
# 179 "../HPL_sdrv.c"
      ierr = MPI_Irecv((void *)RBUF, RCOUNT, 1275070475, PARTNER, RTAG, COMM, & request);
      __CrestHandleReturn(7080, (long long )ierr);
      __CrestStore(7079, (unsigned long )(& ierr));
      {
      __CrestLoad(7083, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(7082, (unsigned long )0, (long long )0);
      __CrestApply2(7081, 12, (long long )(ierr == 0));
# 184 "../HPL_sdrv.c"
      if (ierr == 0) {
        __CrestBranch(7084, 2960, 1);
        __CrestLoad(7086, (unsigned long )(& SCOUNT), (long long )SCOUNT);
        __CrestLoad(7087, (unsigned long )0, (long long )1275070475);
        __CrestLoad(7088, (unsigned long )(& PARTNER), (long long )PARTNER);
        __CrestLoad(7089, (unsigned long )(& STAG), (long long )STAG);
        __CrestLoad(7090, (unsigned long )(& COMM), (long long )COMM);
# 185 "../HPL_sdrv.c"
        ierr = MPI_Send((void const *)((void *)SBUF), SCOUNT, 1275070475, PARTNER,
                        STAG, COMM);
        __CrestHandleReturn(7092, (long long )ierr);
        __CrestStore(7091, (unsigned long )(& ierr));
      } else {
        __CrestBranch(7085, 2961, 0);

      }
      }
      {
      __CrestLoad(7095, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(7094, (unsigned long )0, (long long )0);
      __CrestApply2(7093, 12, (long long )(ierr == 0));
# 190 "../HPL_sdrv.c"
      if (ierr == 0) {
        __CrestBranch(7096, 2963, 1);
# 191 "../HPL_sdrv.c"
        ierr = MPI_Wait(& request, & status);
        __CrestHandleReturn(7099, (long long )ierr);
        __CrestStore(7098, (unsigned long )(& ierr));
      } else {
        __CrestBranch(7097, 2964, 0);

      }
      }
    } else {
      __CrestBranch(7073, 2965, 0);
      __CrestLoad(7100, (unsigned long )(& RCOUNT), (long long )RCOUNT);
      __CrestLoad(7101, (unsigned long )0, (long long )1275070475);
      __CrestLoad(7102, (unsigned long )(& PARTNER), (long long )PARTNER);
      __CrestLoad(7103, (unsigned long )(& RTAG), (long long )RTAG);
      __CrestLoad(7104, (unsigned long )(& COMM), (long long )COMM);
# 209 "../HPL_sdrv.c"
      ierr = MPI_Recv((void *)RBUF, RCOUNT, 1275070475, PARTNER, RTAG, COMM, & status);
      __CrestHandleReturn(7106, (long long )ierr);
      __CrestStore(7105, (unsigned long )(& ierr));
    }
    }
  } else {
    __CrestBranch(7068, 2966, 0);
    {
    __CrestLoad(7109, (unsigned long )(& SCOUNT), (long long )SCOUNT);
    __CrestLoad(7108, (unsigned long )0, (long long )0);
    __CrestApply2(7107, 14, (long long )(SCOUNT > 0));
# 214 "../HPL_sdrv.c"
    if (SCOUNT > 0) {
      __CrestBranch(7110, 2967, 1);
      __CrestLoad(7112, (unsigned long )(& SCOUNT), (long long )SCOUNT);
      __CrestLoad(7113, (unsigned long )0, (long long )1275070475);
      __CrestLoad(7114, (unsigned long )(& PARTNER), (long long )PARTNER);
      __CrestLoad(7115, (unsigned long )(& STAG), (long long )STAG);
      __CrestLoad(7116, (unsigned long )(& COMM), (long long )COMM);
# 229 "../HPL_sdrv.c"
      ierr = MPI_Send((void const *)((void *)SBUF), SCOUNT, 1275070475, PARTNER,
                      STAG, COMM);
      __CrestHandleReturn(7118, (long long )ierr);
      __CrestStore(7117, (unsigned long )(& ierr));
    } else {
      __CrestBranch(7111, 2968, 0);
      __CrestLoad(7119, (unsigned long )0, (long long )0);
      __CrestStore(7120, (unsigned long )(& ierr));
# 233 "../HPL_sdrv.c"
      ierr = 0;
    }
    }
  }
  }
  {
  __CrestLoad(7123, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(7122, (unsigned long )0, (long long )0);
  __CrestApply2(7121, 12, (long long )(ierr == 0));
# 235 "../HPL_sdrv.c"
  if (ierr == 0) {
    __CrestBranch(7124, 2970, 1);
    __CrestLoad(7126, (unsigned long )0, (long long )1);
    __CrestStore(7127, (unsigned long )(& tmp));
# 235 "../HPL_sdrv.c"
    tmp = 1;
  } else {
    __CrestBranch(7125, 2971, 0);
    __CrestLoad(7128, (unsigned long )0, (long long )0);
    __CrestStore(7129, (unsigned long )(& tmp));
# 235 "../HPL_sdrv.c"
    tmp = 0;
  }
  }
  {
  __CrestLoad(7130, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(7131);
# 235 "../HPL_sdrv.c"
  return (tmp);
  }
}
}
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 998 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_split(MPI_Comm comm , int color , int key , MPI_Comm *newcomm ) ;
# 53 "../HPL_grid_init.c"
int HPL_grid_init(MPI_Comm COMM , HPL_T_ORDER const ORDER , int const NPROW ,
                  int const NPCOL , HPL_T_grid *GRID )
{
  int hdim ;
  int hplerr ;
  int ierr ;
  int ip2 ;
  int k ;
  int mask ;
  int mycol ;
  int myrow ;
  int nprocs ;
  int rank ;
  int size ;
  int tmp ;
  int __retres18 ;

  {
  __CrestCall(7136, 37);
  __CrestStore(7135, (unsigned long )(& NPCOL));
  __CrestStore(7134, (unsigned long )(& NPROW));
  __CrestStore(7133, (unsigned long )(& ORDER));
  __CrestStore(7132, (unsigned long )(& COMM));
  __CrestLoad(7137, (unsigned long )0, (long long )0);
  __CrestStore(7138, (unsigned long )(& hplerr));
# 113 "../HPL_grid_init.c"
  hplerr = 0;
  __CrestLoad(7139, (unsigned long )(& COMM), (long long )COMM);
  __CrestRankNonDefaultComm1((unsigned long )(& rank));
# 118 "../HPL_grid_init.c"
  MPI_Comm_rank(COMM, & rank);
  __CrestRankNonDefaultComm2((long long )COMM, (unsigned long )(& rank));
  __CrestClearStack(7140);
  __CrestLoad(7141, (unsigned long )(& COMM), (long long )COMM);
# 118 "../HPL_grid_init.c"
  MPI_Comm_size(COMM, & size);
  __CrestClearStack(7142);
  __CrestLoad(7145, (unsigned long )(& NPROW), (long long )NPROW);
  __CrestLoad(7144, (unsigned long )(& NPCOL), (long long )NPCOL);
  __CrestApply2(7143, 2, (long long )(NPROW * NPCOL));
  __CrestStore(7146, (unsigned long )(& nprocs));
# 122 "../HPL_grid_init.c"
  nprocs = (int )(NPROW * NPCOL);
  {
  __CrestLoad(7149, (unsigned long )(& nprocs), (long long )nprocs);
  __CrestLoad(7148, (unsigned long )(& size), (long long )size);
  __CrestApply2(7147, 14, (long long )(nprocs > size));
# 123 "../HPL_grid_init.c"
  if (nprocs > size) {
    __CrestBranch(7150, 2975, 1);
    __CrestLoad(7152, (unsigned long )0, (long long )124);
# 124 "../HPL_grid_init.c"
    HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
    __CrestClearStack(7153);
  } else {
    __CrestBranch(7151, 2976, 0);
    {
    __CrestLoad(7156, (unsigned long )(& NPROW), (long long )NPROW);
    __CrestLoad(7155, (unsigned long )0, (long long )1);
    __CrestApply2(7154, 16, (long long )(NPROW < 1));
# 123 "../HPL_grid_init.c"
    if (NPROW < 1) {
      __CrestBranch(7157, 2977, 1);
      __CrestLoad(7159, (unsigned long )0, (long long )124);
# 124 "../HPL_grid_init.c"
      HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
      __CrestClearStack(7160);
    } else {
      __CrestBranch(7158, 2978, 0);
      {
      __CrestLoad(7163, (unsigned long )(& NPCOL), (long long )NPCOL);
      __CrestLoad(7162, (unsigned long )0, (long long )1);
      __CrestApply2(7161, 16, (long long )(NPCOL < 1));
# 123 "../HPL_grid_init.c"
      if (NPCOL < 1) {
        __CrestBranch(7164, 2979, 1);
        __CrestLoad(7166, (unsigned long )0, (long long )124);
# 124 "../HPL_grid_init.c"
        HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
        __CrestClearStack(7167);
      } else {
        __CrestBranch(7165, 2980, 0);

      }
      }
    }
    }
  }
  }
  {
  __CrestLoad(7170, (unsigned long )(& ORDER), (long long )ORDER);
  __CrestLoad(7169, (unsigned long )0, (long long )201U);
  __CrestApply2(7168, 12, (long long )((unsigned int const )ORDER == 201U));
# 128 "../HPL_grid_init.c"
  if ((unsigned int const )ORDER == 201U) {
    __CrestBranch(7171, 2982, 1);
    __CrestLoad(7173, (unsigned long )0, (long long )((HPL_T_ORDER )201));
    __CrestStore(7174, (unsigned long )(& GRID->order));
# 130 "../HPL_grid_init.c"
    GRID->order = (HPL_T_ORDER )201;
    __CrestLoad(7177, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7176, (unsigned long )(& NPCOL), (long long )NPCOL);
    __CrestApply2(7175, 3, (long long )(rank / (int )NPCOL));
    __CrestStore(7178, (unsigned long )(& myrow));
# 131 "../HPL_grid_init.c"
    myrow = rank / (int )NPCOL;
    __CrestLoad(7183, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7182, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(7181, (unsigned long )(& NPCOL), (long long )NPCOL);
    __CrestApply2(7180, 2, (long long )(myrow * (int )NPCOL));
    __CrestApply2(7179, 1, (long long )(rank - myrow * (int )NPCOL));
    __CrestStore(7184, (unsigned long )(& mycol));
# 131 "../HPL_grid_init.c"
    mycol = rank - myrow * (int )NPCOL;
  } else {
    __CrestBranch(7172, 2983, 0);
    __CrestLoad(7185, (unsigned long )0, (long long )((HPL_T_ORDER )202));
    __CrestStore(7186, (unsigned long )(& GRID->order));
# 135 "../HPL_grid_init.c"
    GRID->order = (HPL_T_ORDER )202;
    __CrestLoad(7189, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7188, (unsigned long )(& NPROW), (long long )NPROW);
    __CrestApply2(7187, 3, (long long )(rank / (int )NPROW));
    __CrestStore(7190, (unsigned long )(& mycol));
# 136 "../HPL_grid_init.c"
    mycol = rank / (int )NPROW;
    __CrestLoad(7195, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7194, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(7193, (unsigned long )(& NPROW), (long long )NPROW);
    __CrestApply2(7192, 2, (long long )(mycol * (int )NPROW));
    __CrestApply2(7191, 1, (long long )(rank - mycol * (int )NPROW));
    __CrestStore(7196, (unsigned long )(& myrow));
# 136 "../HPL_grid_init.c"
    myrow = rank - mycol * (int )NPROW;
  }
  }
  __CrestLoad(7197, (unsigned long )(& rank), (long long )rank);
  __CrestStore(7198, (unsigned long )(& GRID->iam));
# 138 "../HPL_grid_init.c"
  GRID->iam = rank;
  __CrestLoad(7199, (unsigned long )(& myrow), (long long )myrow);
  __CrestStore(7200, (unsigned long )(& GRID->myrow));
# 138 "../HPL_grid_init.c"
  GRID->myrow = myrow;
  __CrestLoad(7201, (unsigned long )(& mycol), (long long )mycol);
  __CrestStore(7202, (unsigned long )(& GRID->mycol));
# 138 "../HPL_grid_init.c"
  GRID->mycol = mycol;
  __CrestLoad(7203, (unsigned long )(& NPROW), (long long )NPROW);
  __CrestStore(7204, (unsigned long )(& GRID->nprow));
# 139 "../HPL_grid_init.c"
  GRID->nprow = (int )NPROW;
  __CrestLoad(7205, (unsigned long )(& NPCOL), (long long )NPCOL);
  __CrestStore(7206, (unsigned long )(& GRID->npcol));
# 139 "../HPL_grid_init.c"
  GRID->npcol = (int )NPCOL;
  __CrestLoad(7207, (unsigned long )(& nprocs), (long long )nprocs);
  __CrestStore(7208, (unsigned long )(& GRID->nprocs));
# 139 "../HPL_grid_init.c"
  GRID->nprocs = nprocs;
  __CrestLoad(7209, (unsigned long )0, (long long )0);
  __CrestStore(7210, (unsigned long )(& hdim));
# 146 "../HPL_grid_init.c"
  hdim = 0;
  __CrestLoad(7211, (unsigned long )0, (long long )1);
  __CrestStore(7212, (unsigned long )(& ip2));
# 146 "../HPL_grid_init.c"
  ip2 = 1;
  __CrestLoad(7213, (unsigned long )(& NPROW), (long long )NPROW);
  __CrestStore(7214, (unsigned long )(& k));
# 146 "../HPL_grid_init.c"
  k = (int )NPROW;
  {
# 147 "../HPL_grid_init.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(7217, (unsigned long )(& k), (long long )k);
    __CrestLoad(7216, (unsigned long )0, (long long )1);
    __CrestApply2(7215, 14, (long long )(k > 1));
# 147 "../HPL_grid_init.c"
    if (k > 1) {
      __CrestBranch(7218, 2989, 1);

    } else {
      __CrestBranch(7219, 2990, 0);
# 147 "../HPL_grid_init.c"
      goto while_break;
    }
    }
    __CrestLoad(7222, (unsigned long )(& k), (long long )k);
    __CrestLoad(7221, (unsigned long )0, (long long )1);
    __CrestApply2(7220, 9, (long long )(k >> 1));
    __CrestStore(7223, (unsigned long )(& k));
# 147 "../HPL_grid_init.c"
    k >>= 1;
    __CrestLoad(7226, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7225, (unsigned long )0, (long long )1);
    __CrestApply2(7224, 8, (long long )(ip2 << 1));
    __CrestStore(7227, (unsigned long )(& ip2));
# 147 "../HPL_grid_init.c"
    ip2 <<= 1;
    __CrestLoad(7230, (unsigned long )(& hdim), (long long )hdim);
    __CrestLoad(7229, (unsigned long )0, (long long )1);
    __CrestApply2(7228, 0, (long long )(hdim + 1));
    __CrestStore(7231, (unsigned long )(& hdim));
# 147 "../HPL_grid_init.c"
    hdim ++;
  }
  while_break: ;
  }
  __CrestLoad(7232, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7233, (unsigned long )(& GRID->row_ip2));
# 148 "../HPL_grid_init.c"
  GRID->row_ip2 = ip2;
  __CrestLoad(7234, (unsigned long )(& hdim), (long long )hdim);
  __CrestStore(7235, (unsigned long )(& GRID->row_hdim));
# 148 "../HPL_grid_init.c"
  GRID->row_hdim = hdim;
  __CrestLoad(7236, (unsigned long )0, (long long )1);
  __CrestStore(7237, (unsigned long )(& ip2));
# 150 "../HPL_grid_init.c"
  ip2 = 1;
  __CrestLoad(7238, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7239, (unsigned long )(& mask));
# 150 "../HPL_grid_init.c"
  mask = ip2;
  __CrestLoad(7242, (unsigned long )(& NPROW), (long long )NPROW);
  __CrestLoad(7241, (unsigned long )0, (long long )1);
  __CrestApply2(7240, 1, (long long )(NPROW - 1));
  __CrestStore(7243, (unsigned long )(& k));
# 150 "../HPL_grid_init.c"
  k = (int )(NPROW - 1);
  {
# 151 "../HPL_grid_init.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(7246, (unsigned long )(& k), (long long )k);
    __CrestLoad(7245, (unsigned long )0, (long long )1);
    __CrestApply2(7244, 14, (long long )(k > 1));
# 151 "../HPL_grid_init.c"
    if (k > 1) {
      __CrestBranch(7247, 2998, 1);

    } else {
      __CrestBranch(7248, 2999, 0);
# 151 "../HPL_grid_init.c"
      goto while_break___0;
    }
    }
    __CrestLoad(7251, (unsigned long )(& k), (long long )k);
    __CrestLoad(7250, (unsigned long )0, (long long )1);
    __CrestApply2(7249, 9, (long long )(k >> 1));
    __CrestStore(7252, (unsigned long )(& k));
# 151 "../HPL_grid_init.c"
    k >>= 1;
    __CrestLoad(7255, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7254, (unsigned long )0, (long long )1);
    __CrestApply2(7253, 8, (long long )(ip2 << 1));
    __CrestStore(7256, (unsigned long )(& ip2));
# 151 "../HPL_grid_init.c"
    ip2 <<= 1;
    __CrestLoad(7259, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7258, (unsigned long )0, (long long )1);
    __CrestApply2(7257, 8, (long long )(mask << 1));
    __CrestStore(7260, (unsigned long )(& mask));
# 151 "../HPL_grid_init.c"
    mask <<= 1;
    __CrestLoad(7263, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7262, (unsigned long )0, (long long )1);
    __CrestApply2(7261, 0, (long long )(mask + 1));
    __CrestStore(7264, (unsigned long )(& mask));
# 151 "../HPL_grid_init.c"
    mask ++;
  }
  while_break___0: ;
  }
  __CrestLoad(7265, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7266, (unsigned long )(& GRID->row_ip2m1));
# 152 "../HPL_grid_init.c"
  GRID->row_ip2m1 = ip2;
  __CrestLoad(7267, (unsigned long )(& mask), (long long )mask);
  __CrestStore(7268, (unsigned long )(& GRID->row_mask));
# 152 "../HPL_grid_init.c"
  GRID->row_mask = mask;
  __CrestLoad(7269, (unsigned long )0, (long long )0);
  __CrestStore(7270, (unsigned long )(& hdim));
# 159 "../HPL_grid_init.c"
  hdim = 0;
  __CrestLoad(7271, (unsigned long )0, (long long )1);
  __CrestStore(7272, (unsigned long )(& ip2));
# 159 "../HPL_grid_init.c"
  ip2 = 1;
  __CrestLoad(7273, (unsigned long )(& NPCOL), (long long )NPCOL);
  __CrestStore(7274, (unsigned long )(& k));
# 159 "../HPL_grid_init.c"
  k = (int )NPCOL;
  {
# 160 "../HPL_grid_init.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(7277, (unsigned long )(& k), (long long )k);
    __CrestLoad(7276, (unsigned long )0, (long long )1);
    __CrestApply2(7275, 14, (long long )(k > 1));
# 160 "../HPL_grid_init.c"
    if (k > 1) {
      __CrestBranch(7278, 3007, 1);

    } else {
      __CrestBranch(7279, 3008, 0);
# 160 "../HPL_grid_init.c"
      goto while_break___1;
    }
    }
    __CrestLoad(7282, (unsigned long )(& k), (long long )k);
    __CrestLoad(7281, (unsigned long )0, (long long )1);
    __CrestApply2(7280, 9, (long long )(k >> 1));
    __CrestStore(7283, (unsigned long )(& k));
# 160 "../HPL_grid_init.c"
    k >>= 1;
    __CrestLoad(7286, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7285, (unsigned long )0, (long long )1);
    __CrestApply2(7284, 8, (long long )(ip2 << 1));
    __CrestStore(7287, (unsigned long )(& ip2));
# 160 "../HPL_grid_init.c"
    ip2 <<= 1;
    __CrestLoad(7290, (unsigned long )(& hdim), (long long )hdim);
    __CrestLoad(7289, (unsigned long )0, (long long )1);
    __CrestApply2(7288, 0, (long long )(hdim + 1));
    __CrestStore(7291, (unsigned long )(& hdim));
# 160 "../HPL_grid_init.c"
    hdim ++;
  }
  while_break___1: ;
  }
  __CrestLoad(7292, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7293, (unsigned long )(& GRID->col_ip2));
# 161 "../HPL_grid_init.c"
  GRID->col_ip2 = ip2;
  __CrestLoad(7294, (unsigned long )(& hdim), (long long )hdim);
  __CrestStore(7295, (unsigned long )(& GRID->col_hdim));
# 161 "../HPL_grid_init.c"
  GRID->col_hdim = hdim;
  __CrestLoad(7296, (unsigned long )0, (long long )1);
  __CrestStore(7297, (unsigned long )(& ip2));
# 163 "../HPL_grid_init.c"
  ip2 = 1;
  __CrestLoad(7298, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7299, (unsigned long )(& mask));
# 163 "../HPL_grid_init.c"
  mask = ip2;
  __CrestLoad(7302, (unsigned long )(& NPCOL), (long long )NPCOL);
  __CrestLoad(7301, (unsigned long )0, (long long )1);
  __CrestApply2(7300, 1, (long long )(NPCOL - 1));
  __CrestStore(7303, (unsigned long )(& k));
# 163 "../HPL_grid_init.c"
  k = (int )(NPCOL - 1);
  {
# 164 "../HPL_grid_init.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(7306, (unsigned long )(& k), (long long )k);
    __CrestLoad(7305, (unsigned long )0, (long long )1);
    __CrestApply2(7304, 14, (long long )(k > 1));
# 164 "../HPL_grid_init.c"
    if (k > 1) {
      __CrestBranch(7307, 3016, 1);

    } else {
      __CrestBranch(7308, 3017, 0);
# 164 "../HPL_grid_init.c"
      goto while_break___2;
    }
    }
    __CrestLoad(7311, (unsigned long )(& k), (long long )k);
    __CrestLoad(7310, (unsigned long )0, (long long )1);
    __CrestApply2(7309, 9, (long long )(k >> 1));
    __CrestStore(7312, (unsigned long )(& k));
# 164 "../HPL_grid_init.c"
    k >>= 1;
    __CrestLoad(7315, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7314, (unsigned long )0, (long long )1);
    __CrestApply2(7313, 8, (long long )(ip2 << 1));
    __CrestStore(7316, (unsigned long )(& ip2));
# 164 "../HPL_grid_init.c"
    ip2 <<= 1;
    __CrestLoad(7319, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7318, (unsigned long )0, (long long )1);
    __CrestApply2(7317, 8, (long long )(mask << 1));
    __CrestStore(7320, (unsigned long )(& mask));
# 164 "../HPL_grid_init.c"
    mask <<= 1;
    __CrestLoad(7323, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7322, (unsigned long )0, (long long )1);
    __CrestApply2(7321, 0, (long long )(mask + 1));
    __CrestStore(7324, (unsigned long )(& mask));
# 164 "../HPL_grid_init.c"
    mask ++;
  }
  while_break___2: ;
  }
  __CrestLoad(7325, (unsigned long )(& ip2), (long long )ip2);
  __CrestStore(7326, (unsigned long )(& GRID->col_ip2m1));
# 165 "../HPL_grid_init.c"
  GRID->col_ip2m1 = ip2;
  __CrestLoad(7327, (unsigned long )(& mask), (long long )mask);
  __CrestStore(7328, (unsigned long )(& GRID->col_mask));
# 165 "../HPL_grid_init.c"
  GRID->col_mask = mask;
  {
  __CrestLoad(7331, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(7330, (unsigned long )(& nprocs), (long long )nprocs);
  __CrestApply2(7329, 16, (long long )(rank < nprocs));
# 170 "../HPL_grid_init.c"
  if (rank < nprocs) {
    __CrestBranch(7332, 3022, 1);
    __CrestLoad(7334, (unsigned long )0, (long long )0);
    __CrestStore(7335, (unsigned long )(& tmp));
# 170 "../HPL_grid_init.c"
    tmp = 0;
  } else {
    __CrestBranch(7333, 3023, 0);
    __CrestLoad(7336, (unsigned long )0, (long long )-32766);
    __CrestStore(7337, (unsigned long )(& tmp));
# 170 "../HPL_grid_init.c"
    tmp = -32766;
  }
  }
  __CrestLoad(7338, (unsigned long )(& COMM), (long long )COMM);
  __CrestLoad(7339, (unsigned long )(& tmp), (long long )tmp);
  __CrestLoad(7340, (unsigned long )(& rank), (long long )rank);
# 170 "../HPL_grid_init.c"
  ierr = MPI_Comm_split(COMM, tmp, rank, & GRID->all_comm);
  __CrestHandleReturn(7342, (long long )ierr);
  __CrestStore(7341, (unsigned long )(& ierr));
  {
  __CrestLoad(7345, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestLoad(7344, (unsigned long )0, (long long )67108864);
  __CrestApply2(7343, 12, (long long )(GRID->all_comm == 67108864));
# 172 "../HPL_grid_init.c"
  if (GRID->all_comm == 67108864) {
    __CrestBranch(7346, 3026, 1);
    __CrestLoad(7348, (unsigned long )(& ierr), (long long )ierr);
    __CrestStore(7349, (unsigned long )(& __retres18));
# 172 "../HPL_grid_init.c"
    __retres18 = ierr;
# 172 "../HPL_grid_init.c"
    goto return_label;
  } else {
    __CrestBranch(7347, 3028, 0);

  }
  }
  __CrestLoad(7350, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestLoad(7351, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(7352, (unsigned long )(& mycol), (long long )mycol);
# 174 "../HPL_grid_init.c"
  ierr = MPI_Comm_split(GRID->all_comm, myrow, mycol, & GRID->row_comm);
  __CrestHandleReturn(7354, (long long )ierr);
  __CrestStore(7353, (unsigned long )(& ierr));
  {
  __CrestLoad(7357, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(7356, (unsigned long )0, (long long )0);
  __CrestApply2(7355, 13, (long long )(ierr != 0));
# 175 "../HPL_grid_init.c"
  if (ierr != 0) {
    __CrestBranch(7358, 3031, 1);
    __CrestLoad(7360, (unsigned long )(& ierr), (long long )ierr);
    __CrestStore(7361, (unsigned long )(& hplerr));
# 175 "../HPL_grid_init.c"
    hplerr = ierr;
  } else {
    __CrestBranch(7359, 3032, 0);

  }
  }
  __CrestLoad(7362, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestLoad(7363, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(7364, (unsigned long )(& myrow), (long long )myrow);
# 177 "../HPL_grid_init.c"
  ierr = MPI_Comm_split(GRID->all_comm, mycol, myrow, & GRID->col_comm);
  __CrestHandleReturn(7366, (long long )ierr);
  __CrestStore(7365, (unsigned long )(& ierr));
  {
  __CrestLoad(7369, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(7368, (unsigned long )0, (long long )0);
  __CrestApply2(7367, 13, (long long )(ierr != 0));
# 178 "../HPL_grid_init.c"
  if (ierr != 0) {
    __CrestBranch(7370, 3035, 1);
    __CrestLoad(7372, (unsigned long )(& ierr), (long long )ierr);
    __CrestStore(7373, (unsigned long )(& hplerr));
# 178 "../HPL_grid_init.c"
    hplerr = ierr;
  } else {
    __CrestBranch(7371, 3036, 0);

  }
  }
  __CrestLoad(7374, (unsigned long )(& hplerr), (long long )hplerr);
  __CrestStore(7375, (unsigned long )(& __retres18));
# 180 "../HPL_grid_init.c"
  __retres18 = hplerr;
  return_label:
  {
  __CrestLoad(7376, (unsigned long )(& __retres18), (long long )__retres18);
  __CrestReturn(7377);
# 53 "../HPL_grid_init.c"
  return (__retres18);
  }
}
}
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_pnum(HPL_T_grid const *GRID , int const MYROW , int const MYCOL ) ;
# 53 "../HPL_pnum.c"
int HPL_pnum(HPL_T_grid const *GRID , int const MYROW , int const MYCOL )
{
  int __retres4 ;

  {
  __CrestCall(7380, 38);
  __CrestStore(7379, (unsigned long )(& MYCOL));
  __CrestStore(7378, (unsigned long )(& MYROW));
  {
  __CrestLoad(7383, (unsigned long )(& GRID->order), (long long )GRID->order);
  __CrestLoad(7382, (unsigned long )0, (long long )201U);
  __CrestApply2(7381, 12, (long long )((unsigned int const )GRID->order == 201U));
# 96 "../HPL_pnum.c"
  if ((unsigned int const )GRID->order == 201U) {
    __CrestBranch(7384, 3040, 1);
    __CrestLoad(7390, (unsigned long )(& MYROW), (long long )MYROW);
    __CrestLoad(7389, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
    __CrestApply2(7388, 2, (long long )(MYROW * GRID->npcol));
    __CrestLoad(7387, (unsigned long )(& MYCOL), (long long )MYCOL);
    __CrestApply2(7386, 0, (long long )(MYROW * GRID->npcol + MYCOL));
    __CrestStore(7391, (unsigned long )(& __retres4));
# 97 "../HPL_pnum.c"
    __retres4 = (int )(MYROW * GRID->npcol + MYCOL);
# 97 "../HPL_pnum.c"
    goto return_label;
  } else {
    __CrestBranch(7385, 3042, 0);
    __CrestLoad(7396, (unsigned long )(& MYCOL), (long long )MYCOL);
    __CrestLoad(7395, (unsigned long )(& GRID->nprow), (long long )GRID->nprow);
    __CrestApply2(7394, 2, (long long )(MYCOL * GRID->nprow));
    __CrestLoad(7393, (unsigned long )(& MYROW), (long long )MYROW);
    __CrestApply2(7392, 0, (long long )(MYCOL * GRID->nprow + MYROW));
    __CrestStore(7397, (unsigned long )(& __retres4));
# 99 "../HPL_pnum.c"
    __retres4 = (int )(MYCOL * GRID->nprow + MYROW);
# 99 "../HPL_pnum.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(7398, (unsigned long )(& __retres4), (long long )__retres4);
  __CrestReturn(7399);
# 53 "../HPL_pnum.c"
  return (__retres4);
  }
}
}
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_grid_info.c"
int HPL_grid_info(HPL_T_grid const *GRID , int *NPROW , int *NPCOL , int *MYROW ,
                  int *MYCOL )
{
  int __retres6 ;

  {
  __CrestCall(7400, 39);

  __CrestLoad(7401, (unsigned long )(& GRID->nprow), (long long )GRID->nprow);
  __CrestStore(7402, (unsigned long )NPROW);
# 110 "../HPL_grid_info.c"
  *NPROW = (int )GRID->nprow;
  __CrestLoad(7403, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
  __CrestStore(7404, (unsigned long )NPCOL);
# 110 "../HPL_grid_info.c"
  *NPCOL = (int )GRID->npcol;
  __CrestLoad(7405, (unsigned long )(& GRID->myrow), (long long )GRID->myrow);
  __CrestStore(7406, (unsigned long )MYROW);
# 111 "../HPL_grid_info.c"
  *MYROW = (int )GRID->myrow;
  __CrestLoad(7407, (unsigned long )(& GRID->mycol), (long long )GRID->mycol);
  __CrestStore(7408, (unsigned long )MYCOL);
# 111 "../HPL_grid_info.c"
  *MYCOL = (int )GRID->mycol;
  __CrestLoad(7409, (unsigned long )0, (long long )0);
  __CrestStore(7410, (unsigned long )(& __retres6));
# 112 "../HPL_grid_info.c"
  __retres6 = 0;
  {
  __CrestLoad(7411, (unsigned long )(& __retres6), (long long )__retres6);
  __CrestReturn(7412);
# 53 "../HPL_grid_info.c"
  return (__retres6);
  }
}
}
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 999 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_free(MPI_Comm *comm ) ;
# 53 "../HPL_grid_exit.c"
int HPL_grid_exit(HPL_T_grid *GRID )
{
  int hplerr ;
  int mpierr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
  __CrestCall(7413, 40);

  __CrestLoad(7414, (unsigned long )0, (long long )0);
  __CrestStore(7415, (unsigned long )(& hplerr));
# 83 "../HPL_grid_exit.c"
  hplerr = 0;
  {
  __CrestLoad(7418, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestLoad(7417, (unsigned long )0, (long long )67108864);
  __CrestApply2(7416, 13, (long long )(GRID->all_comm != 67108864));
# 87 "../HPL_grid_exit.c"
  if (GRID->all_comm != 67108864) {
    __CrestBranch(7419, 3050, 1);
# 89 "../HPL_grid_exit.c"
    mpierr = MPI_Comm_free(& GRID->row_comm);
    __CrestHandleReturn(7422, (long long )mpierr);
    __CrestStore(7421, (unsigned long )(& mpierr));
    {
    __CrestLoad(7425, (unsigned long )(& mpierr), (long long )mpierr);
    __CrestLoad(7424, (unsigned long )0, (long long )0);
    __CrestApply2(7423, 13, (long long )(mpierr != 0));
# 90 "../HPL_grid_exit.c"
    if (mpierr != 0) {
      __CrestBranch(7426, 3052, 1);
      __CrestLoad(7428, (unsigned long )(& mpierr), (long long )mpierr);
      __CrestStore(7429, (unsigned long )(& hplerr));
# 90 "../HPL_grid_exit.c"
      hplerr = mpierr;
    } else {
      __CrestBranch(7427, 3053, 0);

    }
    }
# 91 "../HPL_grid_exit.c"
    mpierr = MPI_Comm_free(& GRID->col_comm);
    __CrestHandleReturn(7431, (long long )mpierr);
    __CrestStore(7430, (unsigned long )(& mpierr));
    {
    __CrestLoad(7434, (unsigned long )(& mpierr), (long long )mpierr);
    __CrestLoad(7433, (unsigned long )0, (long long )0);
    __CrestApply2(7432, 13, (long long )(mpierr != 0));
# 92 "../HPL_grid_exit.c"
    if (mpierr != 0) {
      __CrestBranch(7435, 3056, 1);
      __CrestLoad(7437, (unsigned long )(& mpierr), (long long )mpierr);
      __CrestStore(7438, (unsigned long )(& hplerr));
# 92 "../HPL_grid_exit.c"
      hplerr = mpierr;
    } else {
      __CrestBranch(7436, 3057, 0);

    }
    }
# 93 "../HPL_grid_exit.c"
    mpierr = MPI_Comm_free(& GRID->all_comm);
    __CrestHandleReturn(7440, (long long )mpierr);
    __CrestStore(7439, (unsigned long )(& mpierr));
    {
    __CrestLoad(7443, (unsigned long )(& mpierr), (long long )mpierr);
    __CrestLoad(7442, (unsigned long )0, (long long )0);
    __CrestApply2(7441, 13, (long long )(mpierr != 0));
# 94 "../HPL_grid_exit.c"
    if (mpierr != 0) {
      __CrestBranch(7444, 3060, 1);
      __CrestLoad(7446, (unsigned long )(& mpierr), (long long )mpierr);
      __CrestStore(7447, (unsigned long )(& hplerr));
# 94 "../HPL_grid_exit.c"
      hplerr = mpierr;
    } else {
      __CrestBranch(7445, 3061, 0);

    }
    }
  } else {
    __CrestBranch(7420, 3062, 0);

  }
  }
  __CrestLoad(7448, (unsigned long )0, (long long )((HPL_T_ORDER )202));
  __CrestStore(7449, (unsigned long )(& GRID->order));
# 97 "../HPL_grid_exit.c"
  GRID->order = (HPL_T_ORDER )202;
  __CrestLoad(7450, (unsigned long )0, (long long )-1);
  __CrestStore(7451, (unsigned long )(& tmp___0));
# 99 "../HPL_grid_exit.c"
  tmp___0 = -1;
  __CrestLoad(7452, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(7453, (unsigned long )(& GRID->mycol));
# 99 "../HPL_grid_exit.c"
  GRID->mycol = tmp___0;
  __CrestLoad(7454, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(7455, (unsigned long )(& tmp));
# 99 "../HPL_grid_exit.c"
  tmp = tmp___0;
  __CrestLoad(7456, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(7457, (unsigned long )(& GRID->myrow));
# 99 "../HPL_grid_exit.c"
  GRID->myrow = tmp;
  __CrestLoad(7458, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(7459, (unsigned long )(& GRID->iam));
# 99 "../HPL_grid_exit.c"
  GRID->iam = tmp;
  __CrestLoad(7460, (unsigned long )0, (long long )-1);
  __CrestStore(7461, (unsigned long )(& tmp___2));
# 100 "../HPL_grid_exit.c"
  tmp___2 = -1;
  __CrestLoad(7462, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(7463, (unsigned long )(& GRID->nprocs));
# 100 "../HPL_grid_exit.c"
  GRID->nprocs = tmp___2;
  __CrestLoad(7464, (unsigned long )(& tmp___2), (long long )tmp___2);
  __CrestStore(7465, (unsigned long )(& tmp___1));
# 100 "../HPL_grid_exit.c"
  tmp___1 = tmp___2;
  __CrestLoad(7466, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(7467, (unsigned long )(& GRID->npcol));
# 100 "../HPL_grid_exit.c"
  GRID->npcol = tmp___1;
  __CrestLoad(7468, (unsigned long )(& tmp___1), (long long )tmp___1);
  __CrestStore(7469, (unsigned long )(& GRID->nprow));
# 100 "../HPL_grid_exit.c"
  GRID->nprow = tmp___1;
  __CrestLoad(7470, (unsigned long )0, (long long )-1);
  __CrestStore(7471, (unsigned long )(& tmp___5));
# 102 "../HPL_grid_exit.c"
  tmp___5 = -1;
  __CrestLoad(7472, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(7473, (unsigned long )(& GRID->row_mask));
# 102 "../HPL_grid_exit.c"
  GRID->row_mask = tmp___5;
  __CrestLoad(7474, (unsigned long )(& tmp___5), (long long )tmp___5);
  __CrestStore(7475, (unsigned long )(& tmp___4));
# 102 "../HPL_grid_exit.c"
  tmp___4 = tmp___5;
  __CrestLoad(7476, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(7477, (unsigned long )(& GRID->row_ip2m1));
# 102 "../HPL_grid_exit.c"
  GRID->row_ip2m1 = tmp___4;
  __CrestLoad(7478, (unsigned long )(& tmp___4), (long long )tmp___4);
  __CrestStore(7479, (unsigned long )(& tmp___3));
# 102 "../HPL_grid_exit.c"
  tmp___3 = tmp___4;
  __CrestLoad(7480, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(7481, (unsigned long )(& GRID->row_hdim));
# 102 "../HPL_grid_exit.c"
  GRID->row_hdim = tmp___3;
  __CrestLoad(7482, (unsigned long )(& tmp___3), (long long )tmp___3);
  __CrestStore(7483, (unsigned long )(& GRID->row_ip2));
# 102 "../HPL_grid_exit.c"
  GRID->row_ip2 = tmp___3;
  __CrestLoad(7484, (unsigned long )0, (long long )-1);
  __CrestStore(7485, (unsigned long )(& tmp___8));
# 103 "../HPL_grid_exit.c"
  tmp___8 = -1;
  __CrestLoad(7486, (unsigned long )(& tmp___8), (long long )tmp___8);
  __CrestStore(7487, (unsigned long )(& GRID->col_mask));
# 103 "../HPL_grid_exit.c"
  GRID->col_mask = tmp___8;
  __CrestLoad(7488, (unsigned long )(& tmp___8), (long long )tmp___8);
  __CrestStore(7489, (unsigned long )(& tmp___7));
# 103 "../HPL_grid_exit.c"
  tmp___7 = tmp___8;
  __CrestLoad(7490, (unsigned long )(& tmp___7), (long long )tmp___7);
  __CrestStore(7491, (unsigned long )(& GRID->col_ip2m1));
# 103 "../HPL_grid_exit.c"
  GRID->col_ip2m1 = tmp___7;
  __CrestLoad(7492, (unsigned long )(& tmp___7), (long long )tmp___7);
  __CrestStore(7493, (unsigned long )(& tmp___6));
# 103 "../HPL_grid_exit.c"
  tmp___6 = tmp___7;
  __CrestLoad(7494, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(7495, (unsigned long )(& GRID->col_hdim));
# 103 "../HPL_grid_exit.c"
  GRID->col_hdim = tmp___6;
  __CrestLoad(7496, (unsigned long )(& tmp___6), (long long )tmp___6);
  __CrestStore(7497, (unsigned long )(& GRID->col_ip2));
# 103 "../HPL_grid_exit.c"
  GRID->col_ip2 = tmp___6;
  {
  __CrestLoad(7498, (unsigned long )(& hplerr), (long long )hplerr);
  __CrestReturn(7499);
# 105 "../HPL_grid_exit.c"
  return (hplerr);
  }
}
}
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_broadcast.c"
int HPL_broadcast(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , int const ROOT ,
                  MPI_Comm COMM )
{
  int hplerr ;
  int ip2 ;
  int kk ;
  int mask ;
  int mpierr ;
  int mydist ;
  int partner ;
  int rank ;
  int size ;
  int tag ;
  MPI_Status status ;
  MPI_Datatype tmp ;
  MPI_Datatype tmp___0 ;
  int __retres19 ;

  {
  __CrestCall(7504, 41);
  __CrestStore(7503, (unsigned long )(& COMM));
  __CrestStore(7502, (unsigned long )(& ROOT));
  __CrestStore(7501, (unsigned long )(& DTYPE));
  __CrestStore(7500, (unsigned long )(& COUNT));
  __CrestLoad(7505, (unsigned long )0, (long long )0);
  __CrestStore(7506, (unsigned long )(& hplerr));
# 104 "../HPL_broadcast.c"
  hplerr = 0;
  __CrestLoad(7507, (unsigned long )0, (long long )1);
  __CrestStore(7508, (unsigned long )(& ip2));
# 104 "../HPL_broadcast.c"
  ip2 = 1;
  __CrestLoad(7509, (unsigned long )0, (long long )1);
  __CrestStore(7510, (unsigned long )(& mask));
# 104 "../HPL_broadcast.c"
  mask = 1;
  __CrestLoad(7511, (unsigned long )0, (long long )9001);
  __CrestStore(7512, (unsigned long )(& tag));
# 104 "../HPL_broadcast.c"
  tag = 9001;
  {
  __CrestLoad(7515, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(7514, (unsigned long )0, (long long )0);
  __CrestApply2(7513, 15, (long long )(COUNT <= 0));
# 111 "../HPL_broadcast.c"
  if (COUNT <= 0) {
    __CrestBranch(7516, 3067, 1);
    __CrestLoad(7518, (unsigned long )0, (long long )0);
    __CrestStore(7519, (unsigned long )(& __retres19));
# 111 "../HPL_broadcast.c"
    __retres19 = 0;
# 111 "../HPL_broadcast.c"
    goto return_label;
  } else {
    __CrestBranch(7517, 3069, 0);

  }
  }
  __CrestLoad(7520, (unsigned long )(& COMM), (long long )COMM);
# 112 "../HPL_broadcast.c"
  mpierr = MPI_Comm_size(COMM, & size);
  __CrestClearStack(7521);
  {
  __CrestLoad(7524, (unsigned long )(& size), (long long )size);
  __CrestLoad(7523, (unsigned long )0, (long long )1);
  __CrestApply2(7522, 15, (long long )(size <= 1));
# 112 "../HPL_broadcast.c"
  if (size <= 1) {
    __CrestBranch(7525, 3072, 1);
    __CrestLoad(7527, (unsigned long )(& mpierr), (long long )mpierr);
    __CrestStore(7528, (unsigned long )(& __retres19));
# 112 "../HPL_broadcast.c"
    __retres19 = mpierr;
# 112 "../HPL_broadcast.c"
    goto return_label;
  } else {
    __CrestBranch(7526, 3074, 0);

  }
  }
  __CrestLoad(7529, (unsigned long )(& COMM), (long long )COMM);
  __CrestRankNonDefaultComm1((unsigned long )(& rank));
# 113 "../HPL_broadcast.c"
  mpierr = MPI_Comm_rank(COMM, & rank);
  __CrestRankNonDefaultComm2((long long )COMM, (unsigned long )(& rank));
  __CrestClearStack(7530);
  __CrestLoad(7533, (unsigned long )(& size), (long long )size);
  __CrestLoad(7532, (unsigned long )0, (long long )1);
  __CrestApply2(7531, 1, (long long )(size - 1));
  __CrestStore(7534, (unsigned long )(& kk));
# 115 "../HPL_broadcast.c"
  kk = size - 1;
  {
# 116 "../HPL_broadcast.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(7537, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(7536, (unsigned long )0, (long long )1);
    __CrestApply2(7535, 14, (long long )(kk > 1));
# 116 "../HPL_broadcast.c"
    if (kk > 1) {
      __CrestBranch(7538, 3080, 1);

    } else {
      __CrestBranch(7539, 3081, 0);
# 116 "../HPL_broadcast.c"
      goto while_break;
    }
    }
    __CrestLoad(7542, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(7541, (unsigned long )0, (long long )1);
    __CrestApply2(7540, 9, (long long )(kk >> 1));
    __CrestStore(7543, (unsigned long )(& kk));
# 116 "../HPL_broadcast.c"
    kk >>= 1;
    __CrestLoad(7546, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7545, (unsigned long )0, (long long )1);
    __CrestApply2(7544, 8, (long long )(ip2 << 1));
    __CrestStore(7547, (unsigned long )(& ip2));
# 116 "../HPL_broadcast.c"
    ip2 <<= 1;
    __CrestLoad(7550, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7549, (unsigned long )0, (long long )1);
    __CrestApply2(7548, 8, (long long )(mask << 1));
    __CrestStore(7551, (unsigned long )(& mask));
# 116 "../HPL_broadcast.c"
    mask <<= 1;
    __CrestLoad(7554, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7553, (unsigned long )0, (long long )1);
    __CrestApply2(7552, 0, (long long )(mask + 1));
    __CrestStore(7555, (unsigned long )(& mask));
# 116 "../HPL_broadcast.c"
    mask ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(7558, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(7557, (unsigned long )(& ROOT), (long long )ROOT);
  __CrestApply2(7556, 16, (long long )(rank < (int )ROOT));
# 117 "../HPL_broadcast.c"
  if (rank < (int )ROOT) {
    __CrestBranch(7559, 3085, 1);
    __CrestLoad(7565, (unsigned long )(& size), (long long )size);
    __CrestLoad(7564, (unsigned long )(& rank), (long long )rank);
    __CrestApply2(7563, 0, (long long )(size + rank));
    __CrestLoad(7562, (unsigned long )(& ROOT), (long long )ROOT);
    __CrestApply2(7561, 1, (long long )((size + rank) - (int )ROOT));
    __CrestStore(7566, (unsigned long )(& mydist));
# 117 "../HPL_broadcast.c"
    mydist = (size + rank) - (int )ROOT;
  } else {
    __CrestBranch(7560, 3086, 0);
    __CrestLoad(7569, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7568, (unsigned long )(& ROOT), (long long )ROOT);
    __CrestApply2(7567, 1, (long long )(rank - (int )ROOT));
    __CrestStore(7570, (unsigned long )(& mydist));
# 117 "../HPL_broadcast.c"
    mydist = rank - (int )ROOT;
  }
  }
  {
# 119 "../HPL_broadcast.c"
  while (1) {
    while_continue___0: ;
    __CrestLoad(7573, (unsigned long )(& mask), (long long )mask);
    __CrestLoad(7572, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(7571, 7, (long long )(mask ^ ip2));
    __CrestStore(7574, (unsigned long )(& mask));
# 121 "../HPL_broadcast.c"
    mask ^= ip2;
    {
    __CrestLoad(7579, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(7578, (unsigned long )(& mask), (long long )mask);
    __CrestApply2(7577, 5, (long long )(mydist & mask));
    __CrestLoad(7576, (unsigned long )0, (long long )0);
    __CrestApply2(7575, 12, (long long )((mydist & mask) == 0));
# 122 "../HPL_broadcast.c"
    if ((mydist & mask) == 0) {
      __CrestBranch(7580, 3092, 1);
      __CrestLoad(7584, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(7583, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(7582, 7, (long long )(mydist ^ ip2));
      __CrestStore(7585, (unsigned long )(& partner));
# 124 "../HPL_broadcast.c"
      partner = mydist ^ ip2;
      {
      __CrestLoad(7590, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(7589, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(7588, 5, (long long )(mydist & ip2));
      __CrestLoad(7587, (unsigned long )0, (long long )0);
      __CrestApply2(7586, 13, (long long )((mydist & ip2) != 0));
# 126 "../HPL_broadcast.c"
      if ((mydist & ip2) != 0) {
        __CrestBranch(7591, 3094, 1);
        {
        __CrestLoad(7597, (unsigned long )(& ROOT), (long long )ROOT);
        __CrestLoad(7596, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(7595, 0, (long long )(ROOT + (int const )partner));
        __CrestLoad(7594, (unsigned long )(& size), (long long )size);
        __CrestApply2(7593, 16, (long long )(ROOT + (int const )partner < (int const )size));
# 128 "../HPL_broadcast.c"
        if (ROOT + (int const )partner < (int const )size) {
          __CrestBranch(7598, 3095, 1);
          __CrestLoad(7602, (unsigned long )(& ROOT), (long long )ROOT);
          __CrestLoad(7601, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(7600, 0, (long long )(ROOT + (int const )partner));
          __CrestStore(7603, (unsigned long )(& partner));
# 128 "../HPL_broadcast.c"
          partner = (int )(ROOT + (int const )partner);
        } else {
          __CrestBranch(7599, 3096, 0);
          __CrestLoad(7608, (unsigned long )(& ROOT), (long long )ROOT);
          __CrestLoad(7607, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(7606, 0, (long long )(ROOT + (int const )partner));
          __CrestLoad(7605, (unsigned long )(& size), (long long )size);
          __CrestApply2(7604, 1, (long long )((ROOT + (int const )partner) - (int const )size));
          __CrestStore(7609, (unsigned long )(& partner));
# 128 "../HPL_broadcast.c"
          partner = (int )((ROOT + (int const )partner) - (int const )size);
        }
        }
        {
        __CrestLoad(7612, (unsigned long )(& DTYPE), (long long )DTYPE);
        __CrestLoad(7611, (unsigned long )0, (long long )100U);
        __CrestApply2(7610, 12, (long long )((unsigned int const )DTYPE == 100U));
# 129 "../HPL_broadcast.c"
        if ((unsigned int const )DTYPE == 100U) {
          __CrestBranch(7613, 3098, 1);
          __CrestLoad(7615, (unsigned long )0, (long long )1275069445);
          __CrestStore(7616, (unsigned long )(& tmp));
# 129 "../HPL_broadcast.c"
          tmp = 1275069445;
        } else {
          __CrestBranch(7614, 3099, 0);
          __CrestLoad(7617, (unsigned long )0, (long long )1275070475);
          __CrestStore(7618, (unsigned long )(& tmp));
# 129 "../HPL_broadcast.c"
          tmp = 1275070475;
        }
        }
        __CrestLoad(7619, (unsigned long )(& COUNT), (long long )COUNT);
        __CrestLoad(7620, (unsigned long )(& tmp), (long long )tmp);
        __CrestLoad(7621, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(7622, (unsigned long )(& tag), (long long )tag);
        __CrestLoad(7623, (unsigned long )(& COMM), (long long )COMM);
# 129 "../HPL_broadcast.c"
        mpierr = MPI_Recv(BUFFER, (int )COUNT, tmp, partner, tag, COMM, & status);
        __CrestHandleReturn(7625, (long long )mpierr);
        __CrestStore(7624, (unsigned long )(& mpierr));
      } else {
        __CrestBranch(7592, 3101, 0);
        {
        __CrestLoad(7628, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(7627, (unsigned long )(& size), (long long )size);
        __CrestApply2(7626, 16, (long long )(partner < size));
# 132 "../HPL_broadcast.c"
        if (partner < size) {
          __CrestBranch(7629, 3102, 1);
          {
          __CrestLoad(7635, (unsigned long )(& ROOT), (long long )ROOT);
          __CrestLoad(7634, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(7633, 0, (long long )(ROOT + (int const )partner));
          __CrestLoad(7632, (unsigned long )(& size), (long long )size);
          __CrestApply2(7631, 16, (long long )(ROOT + (int const )partner < (int const )size));
# 134 "../HPL_broadcast.c"
          if (ROOT + (int const )partner < (int const )size) {
            __CrestBranch(7636, 3103, 1);
            __CrestLoad(7640, (unsigned long )(& ROOT), (long long )ROOT);
            __CrestLoad(7639, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(7638, 0, (long long )(ROOT + (int const )partner));
            __CrestStore(7641, (unsigned long )(& partner));
# 134 "../HPL_broadcast.c"
            partner = (int )(ROOT + (int const )partner);
          } else {
            __CrestBranch(7637, 3104, 0);
            __CrestLoad(7646, (unsigned long )(& ROOT), (long long )ROOT);
            __CrestLoad(7645, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(7644, 0, (long long )(ROOT + (int const )partner));
            __CrestLoad(7643, (unsigned long )(& size), (long long )size);
            __CrestApply2(7642, 1, (long long )((ROOT + (int const )partner) - (int const )size));
            __CrestStore(7647, (unsigned long )(& partner));
# 134 "../HPL_broadcast.c"
            partner = (int )((ROOT + (int const )partner) - (int const )size);
          }
          }
          {
          __CrestLoad(7650, (unsigned long )(& DTYPE), (long long )DTYPE);
          __CrestLoad(7649, (unsigned long )0, (long long )100U);
          __CrestApply2(7648, 12, (long long )((unsigned int const )DTYPE == 100U));
# 135 "../HPL_broadcast.c"
          if ((unsigned int const )DTYPE == 100U) {
            __CrestBranch(7651, 3106, 1);
            __CrestLoad(7653, (unsigned long )0, (long long )1275069445);
            __CrestStore(7654, (unsigned long )(& tmp___0));
# 135 "../HPL_broadcast.c"
            tmp___0 = 1275069445;
          } else {
            __CrestBranch(7652, 3107, 0);
            __CrestLoad(7655, (unsigned long )0, (long long )1275070475);
            __CrestStore(7656, (unsigned long )(& tmp___0));
# 135 "../HPL_broadcast.c"
            tmp___0 = 1275070475;
          }
          }
          __CrestLoad(7657, (unsigned long )(& COUNT), (long long )COUNT);
          __CrestLoad(7658, (unsigned long )(& tmp___0), (long long )tmp___0);
          __CrestLoad(7659, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(7660, (unsigned long )(& tag), (long long )tag);
          __CrestLoad(7661, (unsigned long )(& COMM), (long long )COMM);
# 135 "../HPL_broadcast.c"
          mpierr = MPI_Send((void const *)BUFFER, (int )COUNT, tmp___0, partner,
                            tag, COMM);
          __CrestHandleReturn(7663, (long long )mpierr);
          __CrestStore(7662, (unsigned long )(& mpierr));
        } else {
          __CrestBranch(7630, 3109, 0);

        }
        }
      }
      }
      {
      __CrestLoad(7666, (unsigned long )(& mpierr), (long long )mpierr);
      __CrestLoad(7665, (unsigned long )0, (long long )0);
      __CrestApply2(7664, 13, (long long )(mpierr != 0));
# 138 "../HPL_broadcast.c"
      if (mpierr != 0) {
        __CrestBranch(7667, 3111, 1);
        __CrestLoad(7669, (unsigned long )(& mpierr), (long long )mpierr);
        __CrestStore(7670, (unsigned long )(& hplerr));
# 138 "../HPL_broadcast.c"
        hplerr = mpierr;
      } else {
        __CrestBranch(7668, 3112, 0);

      }
      }
    } else {
      __CrestBranch(7581, 3113, 0);

    }
    }
    __CrestLoad(7673, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7672, (unsigned long )0, (long long )1);
    __CrestApply2(7671, 9, (long long )(ip2 >> 1));
    __CrestStore(7674, (unsigned long )(& ip2));
# 140 "../HPL_broadcast.c"
    ip2 >>= 1;
    {
    __CrestLoad(7677, (unsigned long )(& ip2), (long long )ip2);
    __CrestLoad(7676, (unsigned long )0, (long long )0);
    __CrestApply2(7675, 12, (long long )(ip2 == 0));
# 119 "../HPL_broadcast.c"
    if (ip2 == 0) {
      __CrestBranch(7678, 3116, 1);
# 119 "../HPL_broadcast.c"
      goto while_break___0;
    } else {
      __CrestBranch(7679, 3117, 0);

    }
    }
  }
  while_break___0: ;
  }
  __CrestLoad(7680, (unsigned long )(& hplerr), (long long )hplerr);
  __CrestStore(7681, (unsigned long )(& __retres19));
# 143 "../HPL_broadcast.c"
  __retres19 = hplerr;
  return_label:
  {
  __CrestLoad(7682, (unsigned long )(& __retres19), (long long )__retres19);
  __CrestReturn(7683);
# 53 "../HPL_broadcast.c"
  return (__retres19);
  }
}
}
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_reduce.c"
int HPL_reduce(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , void (* const OP)(int const ,
                                                                                                void const * ,
                                                                                                void * ,
                                                                                                HPL_T_TYPE const ) ,
               int const ROOT , MPI_Comm COMM )
{
  MPI_Status status ;
  void *buffer ;
  int hplerr ;
  int d ;
  int i ;
  int ip2 ;
  int mask ;
  int mpierr ;
  int mydist ;
  int partner ;
  int rank ;
  int size ;
  int tag ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  MPI_Datatype tmp___2 ;
  MPI_Datatype tmp___3 ;
  MPI_Datatype tmp___4 ;
  int __retres26 ;

  {
  __CrestCall(7688, 42);
  __CrestStore(7687, (unsigned long )(& COMM));
  __CrestStore(7686, (unsigned long )(& ROOT));
  __CrestStore(7685, (unsigned long )(& DTYPE));
  __CrestStore(7684, (unsigned long )(& COUNT));
# 112 "../HPL_reduce.c"
  buffer = (void *)0;
  __CrestLoad(7689, (unsigned long )0, (long long )0);
  __CrestStore(7690, (unsigned long )(& hplerr));
# 113 "../HPL_reduce.c"
  hplerr = 0;
  __CrestLoad(7691, (unsigned long )0, (long long )1);
  __CrestStore(7692, (unsigned long )(& d));
# 113 "../HPL_reduce.c"
  d = 1;
  __CrestLoad(7693, (unsigned long )0, (long long )1);
  __CrestStore(7694, (unsigned long )(& ip2));
# 113 "../HPL_reduce.c"
  ip2 = 1;
  __CrestLoad(7695, (unsigned long )0, (long long )0);
  __CrestStore(7696, (unsigned long )(& mask));
# 113 "../HPL_reduce.c"
  mask = 0;
  __CrestLoad(7697, (unsigned long )0, (long long )9001);
  __CrestStore(7698, (unsigned long )(& tag));
# 113 "../HPL_reduce.c"
  tag = 9001;
  {
  __CrestLoad(7701, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(7700, (unsigned long )0, (long long )0);
  __CrestApply2(7699, 15, (long long )(COUNT <= 0));
# 119 "../HPL_reduce.c"
  if (COUNT <= 0) {
    __CrestBranch(7702, 3123, 1);
    __CrestLoad(7704, (unsigned long )0, (long long )0);
    __CrestStore(7705, (unsigned long )(& __retres26));
# 119 "../HPL_reduce.c"
    __retres26 = 0;
# 119 "../HPL_reduce.c"
    goto return_label;
  } else {
    __CrestBranch(7703, 3125, 0);

  }
  }
  __CrestLoad(7706, (unsigned long )(& COMM), (long long )COMM);
# 120 "../HPL_reduce.c"
  mpierr = MPI_Comm_size(COMM, & size);
  __CrestClearStack(7707);
  {
  __CrestLoad(7710, (unsigned long )(& size), (long long )size);
  __CrestLoad(7709, (unsigned long )0, (long long )1);
  __CrestApply2(7708, 12, (long long )(size == 1));
# 121 "../HPL_reduce.c"
  if (size == 1) {
    __CrestBranch(7711, 3128, 1);
    __CrestLoad(7713, (unsigned long )0, (long long )0);
    __CrestStore(7714, (unsigned long )(& __retres26));
# 121 "../HPL_reduce.c"
    __retres26 = 0;
# 121 "../HPL_reduce.c"
    goto return_label;
  } else {
    __CrestBranch(7712, 3130, 0);

  }
  }
  __CrestLoad(7715, (unsigned long )(& COMM), (long long )COMM);
  __CrestRankNonDefaultComm1((unsigned long )(& rank));
# 122 "../HPL_reduce.c"
  mpierr = MPI_Comm_rank(COMM, & rank);
  __CrestRankNonDefaultComm2((long long )COMM, (unsigned long )(& rank));
  __CrestClearStack(7716);
  __CrestLoad(7719, (unsigned long )(& size), (long long )size);
  __CrestLoad(7718, (unsigned long )0, (long long )1);
  __CrestApply2(7717, 1, (long long )(size - 1));
  __CrestStore(7720, (unsigned long )(& i));
# 123 "../HPL_reduce.c"
  i = size - 1;
  {
# 123 "../HPL_reduce.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(7723, (unsigned long )(& i), (long long )i);
    __CrestLoad(7722, (unsigned long )0, (long long )1);
    __CrestApply2(7721, 14, (long long )(i > 1));
# 123 "../HPL_reduce.c"
    if (i > 1) {
      __CrestBranch(7724, 3136, 1);

    } else {
      __CrestBranch(7725, 3137, 0);
# 123 "../HPL_reduce.c"
      goto while_break;
    }
    }
    __CrestLoad(7728, (unsigned long )(& i), (long long )i);
    __CrestLoad(7727, (unsigned long )0, (long long )1);
    __CrestApply2(7726, 9, (long long )(i >> 1));
    __CrestStore(7729, (unsigned long )(& i));
# 123 "../HPL_reduce.c"
    i >>= 1;
    __CrestLoad(7732, (unsigned long )(& d), (long long )d);
    __CrestLoad(7731, (unsigned long )0, (long long )1);
    __CrestApply2(7730, 0, (long long )(d + 1));
    __CrestStore(7733, (unsigned long )(& d));
# 123 "../HPL_reduce.c"
    d ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(7736, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(7735, (unsigned long )0, (long long )100U);
  __CrestApply2(7734, 12, (long long )((unsigned int const )DTYPE == 100U));
# 125 "../HPL_reduce.c"
  if ((unsigned int const )DTYPE == 100U) {
    __CrestBranch(7737, 3141, 1);
    __CrestLoad(7741, (unsigned long )(& COUNT), (long long )COUNT);
    __CrestLoad(7740, (unsigned long )0, (long long )sizeof(int ));
    __CrestApply2(7739, 2, (long long )((unsigned long )COUNT * sizeof(int )));
# 126 "../HPL_reduce.c"
    tmp = malloc((unsigned long )COUNT * sizeof(int ));
    __CrestClearStack(7742);
# 126 "../HPL_reduce.c"
    buffer = (void *)((int *)tmp);
  } else {
    __CrestBranch(7738, 3142, 0);
    __CrestLoad(7745, (unsigned long )(& COUNT), (long long )COUNT);
    __CrestLoad(7744, (unsigned long )0, (long long )sizeof(double ));
    __CrestApply2(7743, 2, (long long )((unsigned long )COUNT * sizeof(double )));
# 128 "../HPL_reduce.c"
    tmp___0 = malloc((unsigned long )COUNT * sizeof(double ));
    __CrestClearStack(7746);
# 128 "../HPL_reduce.c"
    buffer = (void *)((double *)tmp___0);
  }
  }
  {
  __CrestLoad(7749, (unsigned long )(& buffer), (long long )((unsigned long )buffer));
  __CrestLoad(7748, (unsigned long )0, (long long )0);
  __CrestApply2(7747, 12, (long long )(buffer == 0));
# 130 "../HPL_reduce.c"
  if (buffer == 0) {
    __CrestBranch(7750, 3144, 1);
    __CrestLoad(7752, (unsigned long )0, (long long )131);
# 131 "../HPL_reduce.c"
    HPL_pabort(131, "HPL_reduce", "Memory allocation failed");
    __CrestClearStack(7753);
  } else {
    __CrestBranch(7751, 3145, 0);

  }
  }
  {
  __CrestLoad(7756, (unsigned long )(& rank), (long long )rank);
  __CrestLoad(7755, (unsigned long )(& ROOT), (long long )ROOT);
  __CrestApply2(7754, 16, (long long )(rank < (int )ROOT));
# 133 "../HPL_reduce.c"
  if (rank < (int )ROOT) {
    __CrestBranch(7757, 3147, 1);
    __CrestLoad(7763, (unsigned long )(& size), (long long )size);
    __CrestLoad(7762, (unsigned long )(& rank), (long long )rank);
    __CrestApply2(7761, 0, (long long )(size + rank));
    __CrestLoad(7760, (unsigned long )(& ROOT), (long long )ROOT);
    __CrestApply2(7759, 1, (long long )((size + rank) - (int )ROOT));
    __CrestStore(7764, (unsigned long )(& mydist));
# 133 "../HPL_reduce.c"
    mydist = (size + rank) - (int )ROOT;
  } else {
    __CrestBranch(7758, 3148, 0);
    __CrestLoad(7767, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(7766, (unsigned long )(& ROOT), (long long )ROOT);
    __CrestApply2(7765, 1, (long long )(rank - (int )ROOT));
    __CrestStore(7768, (unsigned long )(& mydist));
# 133 "../HPL_reduce.c"
    mydist = rank - (int )ROOT;
  }
  }
  {
  __CrestLoad(7771, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(7770, (unsigned long )0, (long long )0);
  __CrestApply2(7769, 12, (long long )(mydist == 0));
# 133 "../HPL_reduce.c"
  if (mydist == 0) {
    __CrestBranch(7772, 3150, 1);
    {
# 135 "../HPL_reduce.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(7778, (unsigned long )(& ROOT), (long long )ROOT);
      __CrestLoad(7777, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(7776, 0, (long long )(ROOT + (int const )ip2));
      __CrestLoad(7775, (unsigned long )(& size), (long long )size);
      __CrestApply2(7774, 16, (long long )(ROOT + (int const )ip2 < (int const )size));
# 137 "../HPL_reduce.c"
      if (ROOT + (int const )ip2 < (int const )size) {
        __CrestBranch(7779, 3154, 1);
        __CrestLoad(7783, (unsigned long )(& ROOT), (long long )ROOT);
        __CrestLoad(7782, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(7781, 0, (long long )(ROOT + (int const )ip2));
        __CrestStore(7784, (unsigned long )(& tmp___1));
# 137 "../HPL_reduce.c"
        tmp___1 = (int )(ROOT + (int const )ip2);
      } else {
        __CrestBranch(7780, 3155, 0);
        __CrestLoad(7789, (unsigned long )(& ROOT), (long long )ROOT);
        __CrestLoad(7788, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(7787, 0, (long long )(ROOT + (int const )ip2));
        __CrestLoad(7786, (unsigned long )(& size), (long long )size);
        __CrestApply2(7785, 1, (long long )((ROOT + (int const )ip2) - (int const )size));
        __CrestStore(7790, (unsigned long )(& tmp___1));
# 137 "../HPL_reduce.c"
        tmp___1 = (int )((ROOT + (int const )ip2) - (int const )size);
      }
      }
      {
      __CrestLoad(7793, (unsigned long )(& DTYPE), (long long )DTYPE);
      __CrestLoad(7792, (unsigned long )0, (long long )100U);
      __CrestApply2(7791, 12, (long long )((unsigned int const )DTYPE == 100U));
# 137 "../HPL_reduce.c"
      if ((unsigned int const )DTYPE == 100U) {
        __CrestBranch(7794, 3157, 1);
        __CrestLoad(7796, (unsigned long )0, (long long )1275069445);
        __CrestStore(7797, (unsigned long )(& tmp___2));
# 137 "../HPL_reduce.c"
        tmp___2 = 1275069445;
      } else {
        __CrestBranch(7795, 3158, 0);
        __CrestLoad(7798, (unsigned long )0, (long long )1275070475);
        __CrestStore(7799, (unsigned long )(& tmp___2));
# 137 "../HPL_reduce.c"
        tmp___2 = 1275070475;
      }
      }
      __CrestLoad(7800, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(7801, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestLoad(7802, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestLoad(7803, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(7804, (unsigned long )(& COMM), (long long )COMM);
# 137 "../HPL_reduce.c"
      mpierr = MPI_Recv(buffer, (int )COUNT, tmp___2, tmp___1, tag, COMM, & status);
      __CrestHandleReturn(7806, (long long )mpierr);
      __CrestStore(7805, (unsigned long )(& mpierr));
      {
      __CrestLoad(7809, (unsigned long )(& mpierr), (long long )mpierr);
      __CrestLoad(7808, (unsigned long )0, (long long )0);
      __CrestApply2(7807, 13, (long long )(mpierr != 0));
# 140 "../HPL_reduce.c"
      if (mpierr != 0) {
        __CrestBranch(7810, 3161, 1);
        __CrestLoad(7812, (unsigned long )(& mpierr), (long long )mpierr);
        __CrestStore(7813, (unsigned long )(& hplerr));
# 140 "../HPL_reduce.c"
        hplerr = mpierr;
      } else {
        __CrestBranch(7811, 3162, 0);

      }
      }
      __CrestLoad(7814, (unsigned long )(& COUNT), (long long )COUNT);
      __CrestLoad(7815, (unsigned long )(& DTYPE), (long long )DTYPE);
# 141 "../HPL_reduce.c"
      (*OP)(COUNT, (void const *)buffer, BUFFER, DTYPE);
      __CrestClearStack(7816);
      __CrestLoad(7819, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(7818, (unsigned long )0, (long long )1);
      __CrestApply2(7817, 8, (long long )(ip2 << 1));
      __CrestStore(7820, (unsigned long )(& ip2));
# 142 "../HPL_reduce.c"
      ip2 <<= 1;
      __CrestLoad(7823, (unsigned long )(& d), (long long )d);
      __CrestLoad(7822, (unsigned long )0, (long long )1);
      __CrestApply2(7821, 1, (long long )(d - 1));
      __CrestStore(7824, (unsigned long )(& d));
# 142 "../HPL_reduce.c"
      d --;
      {
      __CrestLoad(7827, (unsigned long )(& d), (long long )d);
      __CrestLoad(7826, (unsigned long )0, (long long )0);
      __CrestApply2(7825, 12, (long long )(d == 0));
# 135 "../HPL_reduce.c"
      if (d == 0) {
        __CrestBranch(7828, 3165, 1);
# 135 "../HPL_reduce.c"
        goto while_break___0;
      } else {
        __CrestBranch(7829, 3166, 0);

      }
      }
    }
    while_break___0: ;
    }
  } else {
    __CrestBranch(7773, 3168, 0);
    {
# 147 "../HPL_reduce.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(7834, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(7833, (unsigned long )(& mask), (long long )mask);
      __CrestApply2(7832, 5, (long long )(mydist & mask));
      __CrestLoad(7831, (unsigned long )0, (long long )0);
      __CrestApply2(7830, 12, (long long )((mydist & mask) == 0));
# 149 "../HPL_reduce.c"
      if ((mydist & mask) == 0) {
        __CrestBranch(7835, 3172, 1);
        __CrestLoad(7839, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(7838, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(7837, 7, (long long )(mydist ^ ip2));
        __CrestStore(7840, (unsigned long )(& partner));
# 151 "../HPL_reduce.c"
        partner = mydist ^ ip2;
        {
        __CrestLoad(7845, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(7844, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(7843, 5, (long long )(mydist & ip2));
        __CrestLoad(7842, (unsigned long )0, (long long )0);
        __CrestApply2(7841, 13, (long long )((mydist & ip2) != 0));
# 153 "../HPL_reduce.c"
        if ((mydist & ip2) != 0) {
          __CrestBranch(7846, 3174, 1);
          {
          __CrestLoad(7852, (unsigned long )(& ROOT), (long long )ROOT);
          __CrestLoad(7851, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(7850, 0, (long long )(ROOT + (int const )partner));
          __CrestLoad(7849, (unsigned long )(& size), (long long )size);
          __CrestApply2(7848, 16, (long long )(ROOT + (int const )partner < (int const )size));
# 155 "../HPL_reduce.c"
          if (ROOT + (int const )partner < (int const )size) {
            __CrestBranch(7853, 3175, 1);
            __CrestLoad(7857, (unsigned long )(& ROOT), (long long )ROOT);
            __CrestLoad(7856, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(7855, 0, (long long )(ROOT + (int const )partner));
            __CrestStore(7858, (unsigned long )(& partner));
# 155 "../HPL_reduce.c"
            partner = (int )(ROOT + (int const )partner);
          } else {
            __CrestBranch(7854, 3176, 0);
            __CrestLoad(7863, (unsigned long )(& ROOT), (long long )ROOT);
            __CrestLoad(7862, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(7861, 0, (long long )(ROOT + (int const )partner));
            __CrestLoad(7860, (unsigned long )(& size), (long long )size);
            __CrestApply2(7859, 1, (long long )((ROOT + (int const )partner) - (int const )size));
            __CrestStore(7864, (unsigned long )(& partner));
# 155 "../HPL_reduce.c"
            partner = (int )((ROOT + (int const )partner) - (int const )size);
          }
          }
          {
          __CrestLoad(7867, (unsigned long )(& DTYPE), (long long )DTYPE);
          __CrestLoad(7866, (unsigned long )0, (long long )100U);
          __CrestApply2(7865, 12, (long long )((unsigned int const )DTYPE == 100U));
# 156 "../HPL_reduce.c"
          if ((unsigned int const )DTYPE == 100U) {
            __CrestBranch(7868, 3178, 1);
            __CrestLoad(7870, (unsigned long )0, (long long )1275069445);
            __CrestStore(7871, (unsigned long )(& tmp___3));
# 156 "../HPL_reduce.c"
            tmp___3 = 1275069445;
          } else {
            __CrestBranch(7869, 3179, 0);
            __CrestLoad(7872, (unsigned long )0, (long long )1275070475);
            __CrestStore(7873, (unsigned long )(& tmp___3));
# 156 "../HPL_reduce.c"
            tmp___3 = 1275070475;
          }
          }
          __CrestLoad(7874, (unsigned long )(& COUNT), (long long )COUNT);
          __CrestLoad(7875, (unsigned long )(& tmp___3), (long long )tmp___3);
          __CrestLoad(7876, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(7877, (unsigned long )(& tag), (long long )tag);
          __CrestLoad(7878, (unsigned long )(& COMM), (long long )COMM);
# 156 "../HPL_reduce.c"
          mpierr = MPI_Send((void const *)BUFFER, (int )COUNT, tmp___3, partner,
                            tag, COMM);
          __CrestHandleReturn(7880, (long long )mpierr);
          __CrestStore(7879, (unsigned long )(& mpierr));
        } else {
          __CrestBranch(7847, 3181, 0);
          {
          __CrestLoad(7883, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(7882, (unsigned long )(& size), (long long )size);
          __CrestApply2(7881, 16, (long long )(partner < size));
# 159 "../HPL_reduce.c"
          if (partner < size) {
            __CrestBranch(7884, 3182, 1);
            {
            __CrestLoad(7890, (unsigned long )(& ROOT), (long long )ROOT);
            __CrestLoad(7889, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(7888, 0, (long long )(ROOT + (int const )partner));
            __CrestLoad(7887, (unsigned long )(& size), (long long )size);
            __CrestApply2(7886, 16, (long long )(ROOT + (int const )partner < (int const )size));
# 161 "../HPL_reduce.c"
            if (ROOT + (int const )partner < (int const )size) {
              __CrestBranch(7891, 3183, 1);
              __CrestLoad(7895, (unsigned long )(& ROOT), (long long )ROOT);
              __CrestLoad(7894, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(7893, 0, (long long )(ROOT + (int const )partner));
              __CrestStore(7896, (unsigned long )(& partner));
# 161 "../HPL_reduce.c"
              partner = (int )(ROOT + (int const )partner);
            } else {
              __CrestBranch(7892, 3184, 0);
              __CrestLoad(7901, (unsigned long )(& ROOT), (long long )ROOT);
              __CrestLoad(7900, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(7899, 0, (long long )(ROOT + (int const )partner));
              __CrestLoad(7898, (unsigned long )(& size), (long long )size);
              __CrestApply2(7897, 1, (long long )((ROOT + (int const )partner) - (int const )size));
              __CrestStore(7902, (unsigned long )(& partner));
# 161 "../HPL_reduce.c"
              partner = (int )((ROOT + (int const )partner) - (int const )size);
            }
            }
            {
            __CrestLoad(7905, (unsigned long )(& DTYPE), (long long )DTYPE);
            __CrestLoad(7904, (unsigned long )0, (long long )100U);
            __CrestApply2(7903, 12, (long long )((unsigned int const )DTYPE == 100U));
# 162 "../HPL_reduce.c"
            if ((unsigned int const )DTYPE == 100U) {
              __CrestBranch(7906, 3186, 1);
              __CrestLoad(7908, (unsigned long )0, (long long )1275069445);
              __CrestStore(7909, (unsigned long )(& tmp___4));
# 162 "../HPL_reduce.c"
              tmp___4 = 1275069445;
            } else {
              __CrestBranch(7907, 3187, 0);
              __CrestLoad(7910, (unsigned long )0, (long long )1275070475);
              __CrestStore(7911, (unsigned long )(& tmp___4));
# 162 "../HPL_reduce.c"
              tmp___4 = 1275070475;
            }
            }
            __CrestLoad(7912, (unsigned long )(& COUNT), (long long )COUNT);
            __CrestLoad(7913, (unsigned long )(& tmp___4), (long long )tmp___4);
            __CrestLoad(7914, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(7915, (unsigned long )(& tag), (long long )tag);
            __CrestLoad(7916, (unsigned long )(& COMM), (long long )COMM);
# 162 "../HPL_reduce.c"
            mpierr = MPI_Recv(buffer, (int )COUNT, tmp___4, partner, tag, COMM, & status);
            __CrestHandleReturn(7918, (long long )mpierr);
            __CrestStore(7917, (unsigned long )(& mpierr));
            __CrestLoad(7919, (unsigned long )(& COUNT), (long long )COUNT);
            __CrestLoad(7920, (unsigned long )(& DTYPE), (long long )DTYPE);
# 164 "../HPL_reduce.c"
            (*OP)(COUNT, (void const *)buffer, BUFFER, DTYPE);
            __CrestClearStack(7921);
          } else {
            __CrestBranch(7885, 3189, 0);

          }
          }
        }
        }
        {
        __CrestLoad(7924, (unsigned long )(& mpierr), (long long )mpierr);
        __CrestLoad(7923, (unsigned long )0, (long long )0);
        __CrestApply2(7922, 13, (long long )(mpierr != 0));
# 166 "../HPL_reduce.c"
        if (mpierr != 0) {
          __CrestBranch(7925, 3191, 1);
          __CrestLoad(7927, (unsigned long )(& mpierr), (long long )mpierr);
          __CrestStore(7928, (unsigned long )(& hplerr));
# 166 "../HPL_reduce.c"
          hplerr = mpierr;
        } else {
          __CrestBranch(7926, 3192, 0);

        }
        }
      } else {
        __CrestBranch(7836, 3193, 0);

      }
      }
      __CrestLoad(7931, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(7930, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(7929, 7, (long long )(mask ^ ip2));
      __CrestStore(7932, (unsigned long )(& mask));
# 168 "../HPL_reduce.c"
      mask ^= ip2;
      __CrestLoad(7935, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(7934, (unsigned long )0, (long long )1);
      __CrestApply2(7933, 8, (long long )(ip2 << 1));
      __CrestStore(7936, (unsigned long )(& ip2));
# 168 "../HPL_reduce.c"
      ip2 <<= 1;
      __CrestLoad(7939, (unsigned long )(& d), (long long )d);
      __CrestLoad(7938, (unsigned long )0, (long long )1);
      __CrestApply2(7937, 1, (long long )(d - 1));
      __CrestStore(7940, (unsigned long )(& d));
# 168 "../HPL_reduce.c"
      d --;
      {
      __CrestLoad(7943, (unsigned long )(& d), (long long )d);
      __CrestLoad(7942, (unsigned long )0, (long long )0);
      __CrestApply2(7941, 12, (long long )(d == 0));
# 147 "../HPL_reduce.c"
      if (d == 0) {
        __CrestBranch(7944, 3196, 1);
# 147 "../HPL_reduce.c"
        goto while_break___1;
      } else {
        __CrestBranch(7945, 3197, 0);

      }
      }
    }
    while_break___1: ;
    }
  }
  }
  {
  __CrestLoad(7948, (unsigned long )(& buffer), (long long )((unsigned long )buffer));
  __CrestLoad(7947, (unsigned long )0, (long long )0);
  __CrestApply2(7946, 13, (long long )(buffer != 0));
# 171 "../HPL_reduce.c"
  if (buffer != 0) {
    __CrestBranch(7949, 3200, 1);
# 171 "../HPL_reduce.c"
    free(buffer);
    __CrestClearStack(7951);
  } else {
    __CrestBranch(7950, 3201, 0);

  }
  }
  __CrestLoad(7952, (unsigned long )(& hplerr), (long long )hplerr);
  __CrestStore(7953, (unsigned long )(& __retres26));
# 173 "../HPL_reduce.c"
  __retres26 = hplerr;
  return_label:
  {
  __CrestLoad(7954, (unsigned long )(& __retres26), (long long )__retres26);
  __CrestReturn(7955);
# 53 "../HPL_reduce.c"
  return (__retres26);
  }
}
}
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_all_reduce.c"
int HPL_all_reduce(void *BUFFER , int const COUNT , HPL_T_TYPE const DTYPE , void (* const OP)(int const ,
                                                                                                    void const * ,
                                                                                                    void * ,
                                                                                                    HPL_T_TYPE const ) ,
                   MPI_Comm COMM )
{
  int hplerr ;
  int tmp ;
  int __retres8 ;

  {
  __CrestCall(7959, 43);
  __CrestStore(7958, (unsigned long )(& COMM));
  __CrestStore(7957, (unsigned long )(& DTYPE));
  __CrestStore(7956, (unsigned long )(& COUNT));
  __CrestLoad(7960, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(7961, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(7962, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(7963, (unsigned long )(& COMM), (long long )COMM);
# 108 "../HPL_all_reduce.c"
  hplerr = HPL_reduce(BUFFER, COUNT, DTYPE, OP, (int const )0, COMM);
  __CrestHandleReturn(7965, (long long )hplerr);
  __CrestStore(7964, (unsigned long )(& hplerr));
  {
  __CrestLoad(7968, (unsigned long )(& hplerr), (long long )hplerr);
  __CrestLoad(7967, (unsigned long )0, (long long )0);
  __CrestApply2(7966, 13, (long long )(hplerr != 0));
# 109 "../HPL_all_reduce.c"
  if (hplerr != 0) {
    __CrestBranch(7969, 3206, 1);
    __CrestLoad(7971, (unsigned long )(& hplerr), (long long )hplerr);
    __CrestStore(7972, (unsigned long )(& __retres8));
# 109 "../HPL_all_reduce.c"
    __retres8 = hplerr;
# 109 "../HPL_all_reduce.c"
    goto return_label;
  } else {
    __CrestBranch(7970, 3208, 0);

  }
  }
  __CrestLoad(7973, (unsigned long )(& COUNT), (long long )COUNT);
  __CrestLoad(7974, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(7975, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(7976, (unsigned long )(& COMM), (long long )COMM);
# 110 "../HPL_all_reduce.c"
  tmp = HPL_broadcast(BUFFER, COUNT, DTYPE, (int const )0, COMM);
  __CrestHandleReturn(7978, (long long )tmp);
  __CrestStore(7977, (unsigned long )(& tmp));
  __CrestLoad(7979, (unsigned long )(& tmp), (long long )tmp);
  __CrestStore(7980, (unsigned long )(& __retres8));
# 110 "../HPL_all_reduce.c"
  __retres8 = tmp;
  return_label:
  {
  __CrestLoad(7981, (unsigned long )(& __retres8), (long long )__retres8);
  __CrestReturn(7982);
# 53 "../HPL_all_reduce.c"
  return (__retres8);
  }
}
}
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_barrier.c"
int HPL_barrier(MPI_Comm COMM )
{
  int i ;
  int tmp ;

  {
  __CrestCall(7984, 44);
  __CrestStore(7983, (unsigned long )(& COMM));
  __CrestLoad(7985, (unsigned long )0, (long long )0);
  __CrestStore(7986, (unsigned long )(& i));
# 82 "../HPL_barrier.c"
  i = 0;
  __CrestLoad(7987, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(7988, (unsigned long )0, (long long )((HPL_T_TYPE const )100));
  __CrestLoad(7989, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(7990, (unsigned long )(& COMM), (long long )COMM);
# 86 "../HPL_barrier.c"
  tmp = HPL_broadcast((void *)(& i), (int const )1, (HPL_T_TYPE const )100, (int const )0,
                      COMM);
  __CrestHandleReturn(7992, (long long )tmp);
  __CrestStore(7991, (unsigned long )(& tmp));
  {
  __CrestLoad(7993, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(7994);
# 86 "../HPL_barrier.c"
  return (tmp);
  }
}
}
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 194 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_min(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE ) ;
# 53 "../HPL_min.c"
void HPL_min(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE )
{
  int i ;
  int const *a ;
  int *b ;
  double const *a___0 ;
  double *b___0 ;
  int const *mem_10 ;
  int *mem_11 ;
  int *mem_12 ;
  int const *mem_13 ;
  int *mem_14 ;
  int *mem_15 ;
  double const *mem_16 ;
  double *mem_17 ;
  double *mem_18 ;
  double const *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;

  {
  __CrestCall(7997, 45);
  __CrestStore(7996, (unsigned long )(& DTYPE));
  __CrestStore(7995, (unsigned long )(& N));
  {
  __CrestLoad(8000, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(7999, (unsigned long )0, (long long )100U);
  __CrestApply2(7998, 12, (long long )((unsigned int const )DTYPE == 100U));
# 103 "../HPL_min.c"
  if ((unsigned int const )DTYPE == 100U) {
    __CrestBranch(8001, 3215, 1);
# 105 "../HPL_min.c"
    a = (int const *)IN;
# 106 "../HPL_min.c"
    b = (int *)INOUT;
    __CrestLoad(8003, (unsigned long )0, (long long )0);
    __CrestStore(8004, (unsigned long )(& i));
# 107 "../HPL_min.c"
    i = 0;
    {
# 107 "../HPL_min.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(8007, (unsigned long )(& i), (long long )i);
      __CrestLoad(8006, (unsigned long )(& N), (long long )N);
      __CrestApply2(8005, 16, (long long )(i < (int )N));
# 107 "../HPL_min.c"
      if (i < (int )N) {
        __CrestBranch(8008, 3220, 1);

      } else {
        __CrestBranch(8009, 3221, 0);
# 107 "../HPL_min.c"
        goto while_break;
      }
      }
      {
# 107 "../HPL_min.c"
      mem_10 = a + i;
# 107 "../HPL_min.c"
      mem_11 = b + i;
      {
      __CrestLoad(8012, (unsigned long )mem_10, (long long )*mem_10);
      __CrestLoad(8011, (unsigned long )mem_11, (long long )*mem_11);
      __CrestApply2(8010, 16, (long long )(*mem_10 < (int const )*mem_11));
# 107 "../HPL_min.c"
      if (*mem_10 < (int const )*mem_11) {
        __CrestBranch(8013, 3225, 1);
# 107 "../HPL_min.c"
        mem_12 = b + i;
# 107 "../HPL_min.c"
        mem_13 = a + i;
        __CrestLoad(8015, (unsigned long )mem_13, (long long )*mem_13);
        __CrestStore(8016, (unsigned long )mem_12);
# 107 "../HPL_min.c"
        *mem_12 = (int )*mem_13;
      } else {
        __CrestBranch(8014, 3226, 0);
# 107 "../HPL_min.c"
        mem_14 = b + i;
# 107 "../HPL_min.c"
        mem_15 = b + i;
        __CrestLoad(8017, (unsigned long )mem_15, (long long )*mem_15);
        __CrestStore(8018, (unsigned long )mem_14);
# 107 "../HPL_min.c"
        *mem_14 = *mem_15;
      }
      }
      }
      __CrestLoad(8021, (unsigned long )(& i), (long long )i);
      __CrestLoad(8020, (unsigned long )0, (long long )1);
      __CrestApply2(8019, 0, (long long )(i + 1));
      __CrestStore(8022, (unsigned long )(& i));
# 107 "../HPL_min.c"
      i ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(8002, 3229, 0);
# 111 "../HPL_min.c"
    a___0 = (double const *)IN;
# 112 "../HPL_min.c"
    b___0 = (double *)INOUT;
    __CrestLoad(8023, (unsigned long )0, (long long )0);
    __CrestStore(8024, (unsigned long )(& i));
# 113 "../HPL_min.c"
    i = 0;
    {
# 113 "../HPL_min.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(8027, (unsigned long )(& i), (long long )i);
      __CrestLoad(8026, (unsigned long )(& N), (long long )N);
      __CrestApply2(8025, 16, (long long )(i < (int )N));
# 113 "../HPL_min.c"
      if (i < (int )N) {
        __CrestBranch(8028, 3234, 1);

      } else {
        __CrestBranch(8029, 3235, 0);
# 113 "../HPL_min.c"
        goto while_break___0;
      }
      }
      {
# 113 "../HPL_min.c"
      mem_16 = a___0 + i;
# 113 "../HPL_min.c"
      mem_17 = b___0 + i;
      {
      __CrestLoad(8032, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(8031, (unsigned long )mem_17, (long long )*mem_17);
      __CrestApply2(8030, 16, (long long )(*mem_16 < (double const )*mem_17));
# 113 "../HPL_min.c"
      if (*mem_16 < (double const )*mem_17) {
        __CrestBranch(8033, 3239, 1);
# 113 "../HPL_min.c"
        mem_18 = b___0 + i;
# 113 "../HPL_min.c"
        mem_19 = a___0 + i;
# 113 "../HPL_min.c"
        *mem_18 = (double )*mem_19;
      } else {
        __CrestBranch(8034, 3240, 0);
# 113 "../HPL_min.c"
        mem_20 = b___0 + i;
# 113 "../HPL_min.c"
        mem_21 = b___0 + i;
# 113 "../HPL_min.c"
        *mem_20 = *mem_21;
      }
      }
      }
      __CrestLoad(8037, (unsigned long )(& i), (long long )i);
      __CrestLoad(8036, (unsigned long )0, (long long )1);
      __CrestApply2(8035, 0, (long long )(i + 1));
      __CrestStore(8038, (unsigned long )(& i));
# 113 "../HPL_min.c"
      i ++;
    }
    while_break___0: ;
    }
  }
  }

  {
  __CrestReturn(8039);
# 53 "../HPL_min.c"
  return;
  }
}
}
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_max.c"
void HPL_max(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE )
{
  int i ;
  int const *a ;
  int *b ;
  double const *a___0 ;
  double *b___0 ;
  int const *mem_10 ;
  int *mem_11 ;
  int *mem_12 ;
  int const *mem_13 ;
  int *mem_14 ;
  int *mem_15 ;
  double const *mem_16 ;
  double *mem_17 ;
  double *mem_18 ;
  double const *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;

  {
  __CrestCall(8042, 46);
  __CrestStore(8041, (unsigned long )(& DTYPE));
  __CrestStore(8040, (unsigned long )(& N));
  {
  __CrestLoad(8045, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(8044, (unsigned long )0, (long long )100U);
  __CrestApply2(8043, 12, (long long )((unsigned int const )DTYPE == 100U));
# 103 "../HPL_max.c"
  if ((unsigned int const )DTYPE == 100U) {
    __CrestBranch(8046, 3246, 1);
# 105 "../HPL_max.c"
    a = (int const *)IN;
# 106 "../HPL_max.c"
    b = (int *)INOUT;
    __CrestLoad(8048, (unsigned long )0, (long long )0);
    __CrestStore(8049, (unsigned long )(& i));
# 107 "../HPL_max.c"
    i = 0;
    {
# 107 "../HPL_max.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(8052, (unsigned long )(& i), (long long )i);
      __CrestLoad(8051, (unsigned long )(& N), (long long )N);
      __CrestApply2(8050, 16, (long long )(i < (int )N));
# 107 "../HPL_max.c"
      if (i < (int )N) {
        __CrestBranch(8053, 3251, 1);

      } else {
        __CrestBranch(8054, 3252, 0);
# 107 "../HPL_max.c"
        goto while_break;
      }
      }
      {
# 107 "../HPL_max.c"
      mem_10 = a + i;
# 107 "../HPL_max.c"
      mem_11 = b + i;
      {
      __CrestLoad(8057, (unsigned long )mem_10, (long long )*mem_10);
      __CrestLoad(8056, (unsigned long )mem_11, (long long )*mem_11);
      __CrestApply2(8055, 14, (long long )(*mem_10 > (int const )*mem_11));
# 107 "../HPL_max.c"
      if (*mem_10 > (int const )*mem_11) {
        __CrestBranch(8058, 3256, 1);
# 107 "../HPL_max.c"
        mem_12 = b + i;
# 107 "../HPL_max.c"
        mem_13 = a + i;
        __CrestLoad(8060, (unsigned long )mem_13, (long long )*mem_13);
        __CrestStore(8061, (unsigned long )mem_12);
# 107 "../HPL_max.c"
        *mem_12 = (int )*mem_13;
      } else {
        __CrestBranch(8059, 3257, 0);
# 107 "../HPL_max.c"
        mem_14 = b + i;
# 107 "../HPL_max.c"
        mem_15 = b + i;
        __CrestLoad(8062, (unsigned long )mem_15, (long long )*mem_15);
        __CrestStore(8063, (unsigned long )mem_14);
# 107 "../HPL_max.c"
        *mem_14 = *mem_15;
      }
      }
      }
      __CrestLoad(8066, (unsigned long )(& i), (long long )i);
      __CrestLoad(8065, (unsigned long )0, (long long )1);
      __CrestApply2(8064, 0, (long long )(i + 1));
      __CrestStore(8067, (unsigned long )(& i));
# 107 "../HPL_max.c"
      i ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(8047, 3260, 0);
# 111 "../HPL_max.c"
    a___0 = (double const *)IN;
# 112 "../HPL_max.c"
    b___0 = (double *)INOUT;
    __CrestLoad(8068, (unsigned long )0, (long long )0);
    __CrestStore(8069, (unsigned long )(& i));
# 113 "../HPL_max.c"
    i = 0;
    {
# 113 "../HPL_max.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(8072, (unsigned long )(& i), (long long )i);
      __CrestLoad(8071, (unsigned long )(& N), (long long )N);
      __CrestApply2(8070, 16, (long long )(i < (int )N));
# 113 "../HPL_max.c"
      if (i < (int )N) {
        __CrestBranch(8073, 3265, 1);

      } else {
        __CrestBranch(8074, 3266, 0);
# 113 "../HPL_max.c"
        goto while_break___0;
      }
      }
      {
# 113 "../HPL_max.c"
      mem_16 = a___0 + i;
# 113 "../HPL_max.c"
      mem_17 = b___0 + i;
      {
      __CrestLoad(8077, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(8076, (unsigned long )mem_17, (long long )*mem_17);
      __CrestApply2(8075, 14, (long long )(*mem_16 > (double const )*mem_17));
# 113 "../HPL_max.c"
      if (*mem_16 > (double const )*mem_17) {
        __CrestBranch(8078, 3270, 1);
# 113 "../HPL_max.c"
        mem_18 = b___0 + i;
# 113 "../HPL_max.c"
        mem_19 = a___0 + i;
# 113 "../HPL_max.c"
        *mem_18 = (double )*mem_19;
      } else {
        __CrestBranch(8079, 3271, 0);
# 113 "../HPL_max.c"
        mem_20 = b___0 + i;
# 113 "../HPL_max.c"
        mem_21 = b___0 + i;
# 113 "../HPL_max.c"
        *mem_20 = *mem_21;
      }
      }
      }
      __CrestLoad(8082, (unsigned long )(& i), (long long )i);
      __CrestLoad(8081, (unsigned long )0, (long long )1);
      __CrestApply2(8080, 0, (long long )(i + 1));
      __CrestStore(8083, (unsigned long )(& i));
# 113 "../HPL_max.c"
      i ++;
    }
    while_break___0: ;
    }
  }
  }

  {
  __CrestReturn(8084);
# 53 "../HPL_max.c"
  return;
  }
}
}
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_sum.c"
void HPL_sum(int const N , void const *IN , void *INOUT , HPL_T_TYPE const DTYPE )
{
  int i ;
  int const *a ;
  int *b ;
  double const *a___0 ;
  double *b___0 ;
  int *mem_10 ;
  int *mem_11 ;
  int const *mem_12 ;
  double *mem_13 ;
  double *mem_14 ;
  double const *mem_15 ;

  {
  __CrestCall(8087, 47);
  __CrestStore(8086, (unsigned long )(& DTYPE));
  __CrestStore(8085, (unsigned long )(& N));
  {
  __CrestLoad(8090, (unsigned long )(& DTYPE), (long long )DTYPE);
  __CrestLoad(8089, (unsigned long )0, (long long )100U);
  __CrestApply2(8088, 12, (long long )((unsigned int const )DTYPE == 100U));
# 103 "../HPL_sum.c"
  if ((unsigned int const )DTYPE == 100U) {
    __CrestBranch(8091, 3277, 1);
# 105 "../HPL_sum.c"
    a = (int const *)IN;
# 106 "../HPL_sum.c"
    b = (int *)INOUT;
    __CrestLoad(8093, (unsigned long )0, (long long )0);
    __CrestStore(8094, (unsigned long )(& i));
# 107 "../HPL_sum.c"
    i = 0;
    {
# 107 "../HPL_sum.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(8097, (unsigned long )(& i), (long long )i);
      __CrestLoad(8096, (unsigned long )(& N), (long long )N);
      __CrestApply2(8095, 16, (long long )(i < (int )N));
# 107 "../HPL_sum.c"
      if (i < (int )N) {
        __CrestBranch(8098, 3282, 1);

      } else {
        __CrestBranch(8099, 3283, 0);
# 107 "../HPL_sum.c"
        goto while_break;
      }
      }
# 107 "../HPL_sum.c"
      mem_10 = b + i;
# 107 "../HPL_sum.c"
      mem_11 = b + i;
# 107 "../HPL_sum.c"
      mem_12 = a + i;
      __CrestLoad(8102, (unsigned long )mem_11, (long long )*mem_11);
      __CrestLoad(8101, (unsigned long )mem_12, (long long )*mem_12);
      __CrestApply2(8100, 0, (long long )(*mem_11 + (int )*mem_12));
      __CrestStore(8103, (unsigned long )mem_10);
# 107 "../HPL_sum.c"
      *mem_10 = *mem_11 + (int )*mem_12;
      __CrestLoad(8106, (unsigned long )(& i), (long long )i);
      __CrestLoad(8105, (unsigned long )0, (long long )1);
      __CrestApply2(8104, 0, (long long )(i + 1));
      __CrestStore(8107, (unsigned long )(& i));
# 107 "../HPL_sum.c"
      i ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(8092, 3286, 0);
# 111 "../HPL_sum.c"
    a___0 = (double const *)IN;
# 112 "../HPL_sum.c"
    b___0 = (double *)INOUT;
    __CrestLoad(8108, (unsigned long )0, (long long )0);
    __CrestStore(8109, (unsigned long )(& i));
# 113 "../HPL_sum.c"
    i = 0;
    {
# 113 "../HPL_sum.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(8112, (unsigned long )(& i), (long long )i);
      __CrestLoad(8111, (unsigned long )(& N), (long long )N);
      __CrestApply2(8110, 16, (long long )(i < (int )N));
# 113 "../HPL_sum.c"
      if (i < (int )N) {
        __CrestBranch(8113, 3291, 1);

      } else {
        __CrestBranch(8114, 3292, 0);
# 113 "../HPL_sum.c"
        goto while_break___0;
      }
      }
# 113 "../HPL_sum.c"
      mem_13 = b___0 + i;
# 113 "../HPL_sum.c"
      mem_14 = b___0 + i;
# 113 "../HPL_sum.c"
      mem_15 = a___0 + i;
# 113 "../HPL_sum.c"
      *mem_13 = *mem_14 + (double )*mem_15;
      __CrestLoad(8117, (unsigned long )(& i), (long long )i);
      __CrestLoad(8116, (unsigned long )0, (long long )1);
      __CrestApply2(8115, 0, (long long )(i + 1));
      __CrestStore(8118, (unsigned long )(& i));
# 113 "../HPL_sum.c"
      i ++;
    }
    while_break___0: ;
    }
  }
  }

  {
  __CrestReturn(8119);
# 53 "../HPL_sum.c"
  return;
  }
}
}
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 109 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
void HPL_pdpanel_new(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const M , int const N ,
                     int const JB , HPL_T_pmat *A , int const IA , int const JA ,
                     int const TAG , HPL_T_panel **PANEL ) ;
# 122 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
void HPL_pdpanel_init(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const M , int const N ,
                      int const JB , HPL_T_pmat *A , int const IA , int const JA ,
                      int const TAG , HPL_T_panel *PANEL ) ;
# 53 "../HPL_pdpanel_new.c"
void HPL_pdpanel_new(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const M , int const N ,
                     int const JB , HPL_T_pmat *A , int const IA , int const JA ,
                     int const TAG , HPL_T_panel **PANEL )
{
  HPL_T_panel *p ;
  void *tmp ;

  {
  __CrestCall(8126, 48);
  __CrestStore(8125, (unsigned long )(& TAG));
  __CrestStore(8124, (unsigned long )(& JA));
  __CrestStore(8123, (unsigned long )(& IA));
  __CrestStore(8122, (unsigned long )(& JB));
  __CrestStore(8121, (unsigned long )(& N));
  __CrestStore(8120, (unsigned long )(& M));
# 135 "../HPL_pdpanel_new.c"
  p = (HPL_T_panel *)((void *)0);
  __CrestLoad(8127, (unsigned long )0, (long long )sizeof(HPL_T_panel ));
# 142 "../HPL_pdpanel_new.c"
  tmp = malloc(sizeof(HPL_T_panel ));
  __CrestClearStack(8128);
# 142 "../HPL_pdpanel_new.c"
  p = (HPL_T_panel *)tmp;
  {
  __CrestLoad(8131, (unsigned long )(& p), (long long )((unsigned long )p));
  __CrestLoad(8130, (unsigned long )0, (long long )0);
  __CrestApply2(8129, 12, (long long )(p == 0));
# 142 "../HPL_pdpanel_new.c"
  if (p == 0) {
    __CrestBranch(8132, 3299, 1);
    __CrestLoad(8134, (unsigned long )0, (long long )144);
# 144 "../HPL_pdpanel_new.c"
    HPL_pabort(144, "HPL_pdpanel_new", "Memory allocation failed");
    __CrestClearStack(8135);
  } else {
    __CrestBranch(8133, 3300, 0);

  }
  }
  __CrestLoad(8136, (unsigned long )(& M), (long long )M);
  __CrestLoad(8137, (unsigned long )(& N), (long long )N);
  __CrestLoad(8138, (unsigned long )(& JB), (long long )JB);
  __CrestLoad(8139, (unsigned long )(& IA), (long long )IA);
  __CrestLoad(8140, (unsigned long )(& JA), (long long )JA);
  __CrestLoad(8141, (unsigned long )(& TAG), (long long )TAG);
# 147 "../HPL_pdpanel_new.c"
  HPL_pdpanel_init(GRID, ALGO, M, N, JB, A, IA, JA, TAG, p);
  __CrestClearStack(8142);
# 148 "../HPL_pdpanel_new.c"
  *PANEL = p;

  {
  __CrestReturn(8143);
# 53 "../HPL_pdpanel_new.c"
  return;
  }
}
}
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 277 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_infog2l(int I , int J , int const IMB , int const MB , int const INB ,
                 int const NB , int const RSRC , int const CSRC , int const MYROW ,
                 int const MYCOL , int const NPROW , int const NPCOL , int *II ,
                 int *JJ , int *PROW , int *PCOL ) ;
# 305 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_numrocI(int const N , int const I , int const INB , int const NB ,
                int const PROC , int const SRCPROC , int const NPROCS ) ;
# 59 "../HPL_pdpanel_init.c"
void HPL_pdpanel_init(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const M , int const N ,
                      int const JB , HPL_T_pmat *A , int const IA , int const JA ,
                      int const TAG , HPL_T_panel *PANEL )
{
  size_t dalign ;
  int icurcol ;
  int icurrow ;
  int ii ;
  int itmp1 ;
  int jj ;
  int lwork ;
  int ml2 ;
  int mp ;
  int mycol ;
  int myrow ;
  int nb ;
  int npcol ;
  int nprow ;
  int nq ;
  int nu ;
  int tmp ;
  int tmp___0 ;
  double *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  double *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;
  double *mem_38 ;
  double *mem_39 ;
  int *mem_40 ;

  {
  __CrestCall(8150, 49);
  __CrestStore(8149, (unsigned long )(& TAG));
  __CrestStore(8148, (unsigned long )(& JA));
  __CrestStore(8147, (unsigned long )(& IA));
  __CrestStore(8146, (unsigned long )(& JB));
  __CrestStore(8145, (unsigned long )(& N));
  __CrestStore(8144, (unsigned long )(& M));
# 148 "../HPL_pdpanel_init.c"
  PANEL->grid = GRID;
# 149 "../HPL_pdpanel_init.c"
  PANEL->algo = ALGO;
# 150 "../HPL_pdpanel_init.c"
  PANEL->pmat = A;
  __CrestLoad(8151, (unsigned long )(& GRID->myrow), (long long )GRID->myrow);
  __CrestStore(8152, (unsigned long )(& myrow));
# 152 "../HPL_pdpanel_init.c"
  myrow = GRID->myrow;
  __CrestLoad(8153, (unsigned long )(& GRID->mycol), (long long )GRID->mycol);
  __CrestStore(8154, (unsigned long )(& mycol));
# 152 "../HPL_pdpanel_init.c"
  mycol = GRID->mycol;
  __CrestLoad(8155, (unsigned long )(& GRID->nprow), (long long )GRID->nprow);
  __CrestStore(8156, (unsigned long )(& nprow));
# 153 "../HPL_pdpanel_init.c"
  nprow = GRID->nprow;
  __CrestLoad(8157, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
  __CrestStore(8158, (unsigned long )(& npcol));
# 153 "../HPL_pdpanel_init.c"
  npcol = GRID->npcol;
  __CrestLoad(8159, (unsigned long )(& A->nb), (long long )A->nb);
  __CrestStore(8160, (unsigned long )(& nb));
# 153 "../HPL_pdpanel_init.c"
  nb = A->nb;
  __CrestLoad(8161, (unsigned long )(& IA), (long long )IA);
  __CrestLoad(8162, (unsigned long )(& JA), (long long )JA);
  __CrestLoad(8163, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8164, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8165, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8166, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8167, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(8168, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(8169, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(8170, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(8171, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(8172, (unsigned long )(& npcol), (long long )npcol);
# 155 "../HPL_pdpanel_init.c"
  HPL_infog2l((int )IA, (int )JA, (int const )nb, (int const )nb, (int const )nb,
              (int const )nb, (int const )0, (int const )0, (int const )myrow,
              (int const )mycol, (int const )nprow, (int const )npcol, & ii,
              & jj, & icurrow, & icurcol);
  __CrestClearStack(8173);
  __CrestLoad(8174, (unsigned long )(& M), (long long )M);
  __CrestLoad(8175, (unsigned long )(& IA), (long long )IA);
  __CrestLoad(8176, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8177, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8178, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(8179, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(8180, (unsigned long )(& nprow), (long long )nprow);
# 157 "../HPL_pdpanel_init.c"
  mp = HPL_numrocI(M, IA, (int const )nb, (int const )nb, (int const )myrow,
                   (int const )0, (int const )nprow);
  __CrestHandleReturn(8182, (long long )mp);
  __CrestStore(8181, (unsigned long )(& mp));
  __CrestLoad(8183, (unsigned long )(& N), (long long )N);
  __CrestLoad(8184, (unsigned long )(& JA), (long long )JA);
  __CrestLoad(8185, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8186, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(8187, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(8188, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(8189, (unsigned long )(& npcol), (long long )npcol);
# 158 "../HPL_pdpanel_init.c"
  nq = HPL_numrocI(N, JA, (int const )nb, (int const )nb, (int const )mycol,
                   (int const )0, (int const )npcol);
  __CrestHandleReturn(8191, (long long )nq);
  __CrestStore(8190, (unsigned long )(& nq));
# 160 "../HPL_pdpanel_init.c"
  PANEL->A = (A->A + ii) + jj * A->ld;
# 164 "../HPL_pdpanel_init.c"
  PANEL->WORK = (double *)((void *)0);
# 164 "../HPL_pdpanel_init.c"
  PANEL->L2 = (double *)((void *)0);
# 164 "../HPL_pdpanel_init.c"
  PANEL->L1 = (double *)((void *)0);
# 165 "../HPL_pdpanel_init.c"
  PANEL->DPIV = (double *)((void *)0);
# 165 "../HPL_pdpanel_init.c"
  PANEL->DINFO = (double *)((void *)0);
# 165 "../HPL_pdpanel_init.c"
  PANEL->U = (double *)((void *)0);
# 166 "../HPL_pdpanel_init.c"
  PANEL->IWORK = (int *)((void *)0);
  __CrestLoad(8192, (unsigned long )(& nb), (long long )nb);
  __CrestStore(8193, (unsigned long )(& PANEL->nb));
# 170 "../HPL_pdpanel_init.c"
  PANEL->nb = nb;
  __CrestLoad(8194, (unsigned long )(& JB), (long long )JB);
  __CrestStore(8195, (unsigned long )(& PANEL->jb));
# 171 "../HPL_pdpanel_init.c"
  PANEL->jb = (int )JB;
  __CrestLoad(8196, (unsigned long )(& M), (long long )M);
  __CrestStore(8197, (unsigned long )(& PANEL->m));
# 172 "../HPL_pdpanel_init.c"
  PANEL->m = (int )M;
  __CrestLoad(8198, (unsigned long )(& N), (long long )N);
  __CrestStore(8199, (unsigned long )(& PANEL->n));
# 173 "../HPL_pdpanel_init.c"
  PANEL->n = (int )N;
  __CrestLoad(8200, (unsigned long )(& IA), (long long )IA);
  __CrestStore(8201, (unsigned long )(& PANEL->ia));
# 174 "../HPL_pdpanel_init.c"
  PANEL->ia = (int )IA;
  __CrestLoad(8202, (unsigned long )(& JA), (long long )JA);
  __CrestStore(8203, (unsigned long )(& PANEL->ja));
# 175 "../HPL_pdpanel_init.c"
  PANEL->ja = (int )JA;
  __CrestLoad(8204, (unsigned long )(& mp), (long long )mp);
  __CrestStore(8205, (unsigned long )(& PANEL->mp));
# 176 "../HPL_pdpanel_init.c"
  PANEL->mp = mp;
  __CrestLoad(8206, (unsigned long )(& nq), (long long )nq);
  __CrestStore(8207, (unsigned long )(& PANEL->nq));
# 177 "../HPL_pdpanel_init.c"
  PANEL->nq = nq;
  __CrestLoad(8208, (unsigned long )(& ii), (long long )ii);
  __CrestStore(8209, (unsigned long )(& PANEL->ii));
# 178 "../HPL_pdpanel_init.c"
  PANEL->ii = ii;
  __CrestLoad(8210, (unsigned long )(& jj), (long long )jj);
  __CrestStore(8211, (unsigned long )(& PANEL->jj));
# 179 "../HPL_pdpanel_init.c"
  PANEL->jj = jj;
  __CrestLoad(8212, (unsigned long )(& A->ld), (long long )A->ld);
  __CrestStore(8213, (unsigned long )(& PANEL->lda));
# 180 "../HPL_pdpanel_init.c"
  PANEL->lda = A->ld;
  __CrestLoad(8214, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestStore(8215, (unsigned long )(& PANEL->prow));
# 181 "../HPL_pdpanel_init.c"
  PANEL->prow = icurrow;
  __CrestLoad(8216, (unsigned long )(& icurcol), (long long )icurcol);
  __CrestStore(8217, (unsigned long )(& PANEL->pcol));
# 182 "../HPL_pdpanel_init.c"
  PANEL->pcol = icurcol;
  __CrestLoad(8218, (unsigned long )(& TAG), (long long )TAG);
  __CrestStore(8219, (unsigned long )(& PANEL->msgid));
# 183 "../HPL_pdpanel_init.c"
  PANEL->msgid = (int )TAG;
  __CrestLoad(8220, (unsigned long )0, (long long )0);
  __CrestStore(8221, (unsigned long )(& PANEL->ldl2));
# 188 "../HPL_pdpanel_init.c"
  PANEL->ldl2 = 0;
  __CrestLoad(8222, (unsigned long )0, (long long )0);
  __CrestStore(8223, (unsigned long )(& PANEL->len));
# 189 "../HPL_pdpanel_init.c"
  PANEL->len = 0;
  __CrestLoad(8226, (unsigned long )(& ALGO->align), (long long )ALGO->align);
  __CrestLoad(8225, (unsigned long )0, (long long )sizeof(double ));
  __CrestApply2(8224, 2, (long long )((unsigned long )ALGO->align * sizeof(double )));
  __CrestStore(8227, (unsigned long )(& dalign));
# 204 "../HPL_pdpanel_init.c"
  dalign = (unsigned long )ALGO->align * sizeof(double );
  {
  __CrestLoad(8230, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(8229, (unsigned long )0, (long long )1);
  __CrestApply2(8228, 12, (long long )(npcol == 1));
# 206 "../HPL_pdpanel_init.c"
  if (npcol == 1) {
    __CrestBranch(8231, 3306, 1);
    __CrestLoad(8239, (unsigned long )(& JB), (long long )JB);
    __CrestLoad(8238, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8237, 2, (long long )(JB * JB));
    __CrestLoad(8236, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8235, 0, (long long )(JB * JB + JB));
    __CrestLoad(8234, (unsigned long )0, (long long )1);
    __CrestApply2(8233, 0, (long long )((JB * JB + JB) + 1));
    __CrestStore(8240, (unsigned long )(& tmp));
# 208 "../HPL_pdpanel_init.c"
    tmp = (int )((JB * JB + JB) + 1);
    __CrestLoad(8241, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(8242, (unsigned long )(& PANEL->len));
# 208 "../HPL_pdpanel_init.c"
    PANEL->len = tmp;
    __CrestLoad(8245, (unsigned long )(& ALGO->align), (long long )ALGO->align);
    __CrestLoad(8244, (unsigned long )(& tmp), (long long )tmp);
    __CrestApply2(8243, 0, (long long )(ALGO->align + tmp));
    __CrestStore(8246, (unsigned long )(& lwork));
# 208 "../HPL_pdpanel_init.c"
    lwork = ALGO->align + tmp;
    {
    __CrestLoad(8249, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(8248, (unsigned long )0, (long long )1);
    __CrestApply2(8247, 14, (long long )(nprow > 1));
# 209 "../HPL_pdpanel_init.c"
    if (nprow > 1) {
      __CrestBranch(8250, 3308, 1);
      __CrestLoad(8254, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(8253, (unsigned long )(& JB), (long long )JB);
      __CrestApply2(8252, 1, (long long )(nq - (int )JB));
      __CrestStore(8255, (unsigned long )(& nu));
# 210 "../HPL_pdpanel_init.c"
      nu = nq - (int )JB;
      {
      __CrestLoad(8258, (unsigned long )0, (long long )0);
      __CrestLoad(8257, (unsigned long )(& nu), (long long )nu);
      __CrestApply2(8256, 14, (long long )(0 > nu));
# 210 "../HPL_pdpanel_init.c"
      if (0 > nu) {
        __CrestBranch(8259, 3310, 1);
        __CrestLoad(8261, (unsigned long )0, (long long )0);
        __CrestStore(8262, (unsigned long )(& tmp___0));
# 210 "../HPL_pdpanel_init.c"
        tmp___0 = 0;
      } else {
        __CrestBranch(8260, 3311, 0);
        __CrestLoad(8263, (unsigned long )(& nu), (long long )nu);
        __CrestStore(8264, (unsigned long )(& tmp___0));
# 210 "../HPL_pdpanel_init.c"
        tmp___0 = nu;
      }
      }
      __CrestLoad(8269, (unsigned long )(& lwork), (long long )lwork);
      __CrestLoad(8268, (unsigned long )(& JB), (long long )JB);
      __CrestLoad(8267, (unsigned long )(& tmp___0), (long long )tmp___0);
      __CrestApply2(8266, 2, (long long )(JB * (int const )tmp___0));
      __CrestApply2(8265, 0, (long long )(lwork + (int )(JB * (int const )tmp___0)));
      __CrestStore(8270, (unsigned long )(& lwork));
# 210 "../HPL_pdpanel_init.c"
      lwork += (int )(JB * (int const )tmp___0);
    } else {
      __CrestBranch(8251, 3313, 0);

    }
    }
    __CrestLoad(8273, (unsigned long )(& lwork), (long long )lwork);
    __CrestLoad(8272, (unsigned long )0, (long long )sizeof(double ));
    __CrestApply2(8271, 2, (long long )((unsigned long )lwork * sizeof(double )));
# 212 "../HPL_pdpanel_init.c"
    tmp___2 = malloc((unsigned long )lwork * sizeof(double ));
    __CrestClearStack(8274);
# 212 "../HPL_pdpanel_init.c"
    tmp___1 = (double *)tmp___2;
# 212 "../HPL_pdpanel_init.c"
    PANEL->WORK = tmp___1;
    {
    __CrestLoad(8277, (unsigned long )(& tmp___1), (long long )((unsigned long )tmp___1));
    __CrestLoad(8276, (unsigned long )0, (long long )0);
    __CrestApply2(8275, 12, (long long )(tmp___1 == 0));
# 212 "../HPL_pdpanel_init.c"
    if (tmp___1 == 0) {
      __CrestBranch(8278, 3316, 1);
      __CrestLoad(8280, (unsigned long )0, (long long )214);
# 214 "../HPL_pdpanel_init.c"
      HPL_pabort(214, "HPL_pdpanel_init", "Memory allocation failed");
      __CrestClearStack(8281);
    } else {
      __CrestBranch(8279, 3317, 0);

    }
    }
    {
    __CrestLoad(8284, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(8283, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(8282, 12, (long long )(myrow == icurrow));
# 221 "../HPL_pdpanel_init.c"
    if (myrow == icurrow) {
      __CrestBranch(8285, 3319, 1);
      __CrestLoad(8287, (unsigned long )(& JB), (long long )JB);
      __CrestStore(8288, (unsigned long )(& tmp___3));
# 221 "../HPL_pdpanel_init.c"
      tmp___3 = (int )JB;
    } else {
      __CrestBranch(8286, 3320, 0);
      __CrestLoad(8289, (unsigned long )0, (long long )((int )((int const )0)));
      __CrestStore(8290, (unsigned long )(& tmp___3));
# 221 "../HPL_pdpanel_init.c"
      tmp___3 = (int )((int const )0);
    }
    }
# 221 "../HPL_pdpanel_init.c"
    PANEL->L2 = PANEL->A + tmp___3;
    __CrestLoad(8291, (unsigned long )(& A->ld), (long long )A->ld);
    __CrestStore(8292, (unsigned long )(& PANEL->ldl2));
# 222 "../HPL_pdpanel_init.c"
    PANEL->ldl2 = A->ld;
# 223 "../HPL_pdpanel_init.c"
    PANEL->L1 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
# 224 "../HPL_pdpanel_init.c"
    PANEL->DPIV = PANEL->L1 + JB * JB;
# 225 "../HPL_pdpanel_init.c"
    PANEL->DINFO = PANEL->DPIV + JB;
# 225 "../HPL_pdpanel_init.c"
    mem_38 = PANEL->DINFO;
# 225 "../HPL_pdpanel_init.c"
    *mem_38 = 0.0;
    {
    __CrestLoad(8295, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(8294, (unsigned long )0, (long long )1);
    __CrestApply2(8293, 14, (long long )(nprow > 1));
# 226 "../HPL_pdpanel_init.c"
    if (nprow > 1) {
      __CrestBranch(8296, 3323, 1);
# 226 "../HPL_pdpanel_init.c"
      PANEL->U = PANEL->DINFO + 1;
    } else {
      __CrestBranch(8297, 3324, 0);
# 226 "../HPL_pdpanel_init.c"
      PANEL->U = (double *)((void *)0);
    }
    }
  } else {
    __CrestBranch(8232, 3325, 0);
    {
    __CrestLoad(8300, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(8299, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(8298, 12, (long long )(myrow == icurrow));
# 230 "../HPL_pdpanel_init.c"
    if (myrow == icurrow) {
      __CrestBranch(8301, 3326, 1);
      __CrestLoad(8305, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(8304, (unsigned long )(& JB), (long long )JB);
      __CrestApply2(8303, 1, (long long )(mp - (int )JB));
      __CrestStore(8306, (unsigned long )(& ml2));
# 230 "../HPL_pdpanel_init.c"
      ml2 = mp - (int )JB;
    } else {
      __CrestBranch(8302, 3327, 0);
      __CrestLoad(8307, (unsigned long )(& mp), (long long )mp);
      __CrestStore(8308, (unsigned long )(& ml2));
# 230 "../HPL_pdpanel_init.c"
      ml2 = mp;
    }
    }
    {
    __CrestLoad(8311, (unsigned long )0, (long long )0);
    __CrestLoad(8310, (unsigned long )(& ml2), (long long )ml2);
    __CrestApply2(8309, 14, (long long )(0 > ml2));
# 230 "../HPL_pdpanel_init.c"
    if (0 > ml2) {
      __CrestBranch(8312, 3329, 1);
      __CrestLoad(8314, (unsigned long )0, (long long )0);
      __CrestStore(8315, (unsigned long )(& ml2));
# 230 "../HPL_pdpanel_init.c"
      ml2 = 0;
    } else {
      __CrestBranch(8313, 3330, 0);
      __CrestLoad(8316, (unsigned long )(& ml2), (long long )ml2);
      __CrestStore(8317, (unsigned long )(& ml2));
# 230 "../HPL_pdpanel_init.c"
      ml2 = ml2;
    }
    }
    __CrestLoad(8324, (unsigned long )(& JB), (long long )JB);
    __CrestLoad(8323, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8322, 2, (long long )(JB * JB));
    __CrestLoad(8321, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8320, 0, (long long )(JB * JB + JB));
    __CrestLoad(8319, (unsigned long )0, (long long )1);
    __CrestApply2(8318, 0, (long long )((JB * JB + JB) + 1));
    __CrestStore(8325, (unsigned long )(& itmp1));
# 231 "../HPL_pdpanel_init.c"
    itmp1 = (int )((JB * JB + JB) + 1);
    __CrestLoad(8330, (unsigned long )(& ml2), (long long )ml2);
    __CrestLoad(8329, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8328, 2, (long long )(ml2 * (int )JB));
    __CrestLoad(8327, (unsigned long )(& itmp1), (long long )itmp1);
    __CrestApply2(8326, 0, (long long )(ml2 * (int )JB + itmp1));
    __CrestStore(8331, (unsigned long )(& PANEL->len));
# 231 "../HPL_pdpanel_init.c"
    PANEL->len = ml2 * (int )JB + itmp1;
    {
    __CrestLoad(8334, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(8333, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(8332, 12, (long long )(mycol == icurcol));
# 235 "../HPL_pdpanel_init.c"
    if (mycol == icurcol) {
      __CrestBranch(8335, 3333, 1);
      __CrestLoad(8337, (unsigned long )(& itmp1), (long long )itmp1);
      __CrestStore(8338, (unsigned long )(& tmp___4));
# 235 "../HPL_pdpanel_init.c"
      tmp___4 = itmp1;
    } else {
      __CrestBranch(8336, 3334, 0);
      __CrestLoad(8339, (unsigned long )(& PANEL->len), (long long )PANEL->len);
      __CrestStore(8340, (unsigned long )(& tmp___4));
# 235 "../HPL_pdpanel_init.c"
      tmp___4 = PANEL->len;
    }
    }
    __CrestLoad(8343, (unsigned long )(& ALGO->align), (long long )ALGO->align);
    __CrestLoad(8342, (unsigned long )(& tmp___4), (long long )tmp___4);
    __CrestApply2(8341, 0, (long long )(ALGO->align + tmp___4));
    __CrestStore(8344, (unsigned long )(& lwork));
# 235 "../HPL_pdpanel_init.c"
    lwork = ALGO->align + tmp___4;
    {
    __CrestLoad(8347, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(8346, (unsigned long )0, (long long )1);
    __CrestApply2(8345, 14, (long long )(nprow > 1));
# 237 "../HPL_pdpanel_init.c"
    if (nprow > 1) {
      __CrestBranch(8348, 3337, 1);
      {
      __CrestLoad(8352, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(8351, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestApply2(8350, 12, (long long )(mycol == icurcol));
# 239 "../HPL_pdpanel_init.c"
      if (mycol == icurcol) {
        __CrestBranch(8353, 3338, 1);
        __CrestLoad(8357, (unsigned long )(& nq), (long long )nq);
        __CrestLoad(8356, (unsigned long )(& JB), (long long )JB);
        __CrestApply2(8355, 1, (long long )(nq - (int )JB));
        __CrestStore(8358, (unsigned long )(& nu));
# 239 "../HPL_pdpanel_init.c"
        nu = nq - (int )JB;
      } else {
        __CrestBranch(8354, 3339, 0);
        __CrestLoad(8359, (unsigned long )(& nq), (long long )nq);
        __CrestStore(8360, (unsigned long )(& nu));
# 239 "../HPL_pdpanel_init.c"
        nu = nq;
      }
      }
      {
      __CrestLoad(8363, (unsigned long )0, (long long )0);
      __CrestLoad(8362, (unsigned long )(& nu), (long long )nu);
      __CrestApply2(8361, 14, (long long )(0 > nu));
# 240 "../HPL_pdpanel_init.c"
      if (0 > nu) {
        __CrestBranch(8364, 3341, 1);
        __CrestLoad(8366, (unsigned long )0, (long long )0);
        __CrestStore(8367, (unsigned long )(& tmp___5));
# 240 "../HPL_pdpanel_init.c"
        tmp___5 = 0;
      } else {
        __CrestBranch(8365, 3342, 0);
        __CrestLoad(8368, (unsigned long )(& nu), (long long )nu);
        __CrestStore(8369, (unsigned long )(& tmp___5));
# 240 "../HPL_pdpanel_init.c"
        tmp___5 = nu;
      }
      }
      __CrestLoad(8374, (unsigned long )(& lwork), (long long )lwork);
      __CrestLoad(8373, (unsigned long )(& JB), (long long )JB);
      __CrestLoad(8372, (unsigned long )(& tmp___5), (long long )tmp___5);
      __CrestApply2(8371, 2, (long long )(JB * (int const )tmp___5));
      __CrestApply2(8370, 0, (long long )(lwork + (int )(JB * (int const )tmp___5)));
      __CrestStore(8375, (unsigned long )(& lwork));
# 240 "../HPL_pdpanel_init.c"
      lwork += (int )(JB * (int const )tmp___5);
    } else {
      __CrestBranch(8349, 3344, 0);

    }
    }
    __CrestLoad(8378, (unsigned long )(& lwork), (long long )lwork);
    __CrestLoad(8377, (unsigned long )0, (long long )sizeof(double ));
    __CrestApply2(8376, 2, (long long )((unsigned long )lwork * sizeof(double )));
# 243 "../HPL_pdpanel_init.c"
    tmp___7 = malloc((unsigned long )lwork * sizeof(double ));
    __CrestClearStack(8379);
# 243 "../HPL_pdpanel_init.c"
    tmp___6 = (double *)tmp___7;
# 243 "../HPL_pdpanel_init.c"
    PANEL->WORK = tmp___6;
    {
    __CrestLoad(8382, (unsigned long )(& tmp___6), (long long )((unsigned long )tmp___6));
    __CrestLoad(8381, (unsigned long )0, (long long )0);
    __CrestApply2(8380, 12, (long long )(tmp___6 == 0));
# 243 "../HPL_pdpanel_init.c"
    if (tmp___6 == 0) {
      __CrestBranch(8383, 3347, 1);
      __CrestLoad(8385, (unsigned long )0, (long long )245);
# 245 "../HPL_pdpanel_init.c"
      HPL_pabort(245, "HPL_pdpanel_init", "Memory allocation failed");
      __CrestClearStack(8386);
    } else {
      __CrestBranch(8384, 3348, 0);

    }
    }
    {
    __CrestLoad(8389, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(8388, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(8387, 12, (long long )(mycol == icurcol));
# 257 "../HPL_pdpanel_init.c"
    if (mycol == icurcol) {
      __CrestBranch(8390, 3350, 1);
      {
      __CrestLoad(8394, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(8393, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestApply2(8392, 12, (long long )(myrow == icurrow));
# 259 "../HPL_pdpanel_init.c"
      if (myrow == icurrow) {
        __CrestBranch(8395, 3351, 1);
        __CrestLoad(8397, (unsigned long )(& JB), (long long )JB);
        __CrestStore(8398, (unsigned long )(& tmp___8));
# 259 "../HPL_pdpanel_init.c"
        tmp___8 = (int )JB;
      } else {
        __CrestBranch(8396, 3352, 0);
        __CrestLoad(8399, (unsigned long )0, (long long )((int )((int const )0)));
        __CrestStore(8400, (unsigned long )(& tmp___8));
# 259 "../HPL_pdpanel_init.c"
        tmp___8 = (int )((int const )0);
      }
      }
# 259 "../HPL_pdpanel_init.c"
      PANEL->L2 = PANEL->A + tmp___8;
      __CrestLoad(8401, (unsigned long )(& A->ld), (long long )A->ld);
      __CrestStore(8402, (unsigned long )(& PANEL->ldl2));
# 260 "../HPL_pdpanel_init.c"
      PANEL->ldl2 = A->ld;
# 261 "../HPL_pdpanel_init.c"
      PANEL->L1 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
    } else {
      __CrestBranch(8391, 3354, 0);
# 265 "../HPL_pdpanel_init.c"
      PANEL->L2 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
      {
      __CrestLoad(8405, (unsigned long )0, (long long )1);
      __CrestLoad(8404, (unsigned long )(& ml2), (long long )ml2);
      __CrestApply2(8403, 14, (long long )(1 > ml2));
# 266 "../HPL_pdpanel_init.c"
      if (1 > ml2) {
        __CrestBranch(8406, 3356, 1);
        __CrestLoad(8408, (unsigned long )0, (long long )1);
        __CrestStore(8409, (unsigned long )(& PANEL->ldl2));
# 266 "../HPL_pdpanel_init.c"
        PANEL->ldl2 = 1;
      } else {
        __CrestBranch(8407, 3357, 0);
        __CrestLoad(8410, (unsigned long )(& ml2), (long long )ml2);
        __CrestStore(8411, (unsigned long )(& PANEL->ldl2));
# 266 "../HPL_pdpanel_init.c"
        PANEL->ldl2 = ml2;
      }
      }
# 267 "../HPL_pdpanel_init.c"
      PANEL->L1 = PANEL->L2 + ml2 * (int )JB;
    }
    }
# 270 "../HPL_pdpanel_init.c"
    PANEL->DPIV = PANEL->L1 + JB * JB;
# 271 "../HPL_pdpanel_init.c"
    PANEL->DINFO = PANEL->DPIV + JB;
# 271 "../HPL_pdpanel_init.c"
    mem_39 = PANEL->DINFO;
# 271 "../HPL_pdpanel_init.c"
    *mem_39 = 0.0;
    {
    __CrestLoad(8414, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(8413, (unsigned long )0, (long long )1);
    __CrestApply2(8412, 14, (long long )(nprow > 1));
# 272 "../HPL_pdpanel_init.c"
    if (nprow > 1) {
      __CrestBranch(8415, 3361, 1);
# 272 "../HPL_pdpanel_init.c"
      PANEL->U = PANEL->DINFO + 1;
    } else {
      __CrestBranch(8416, 3362, 0);
# 272 "../HPL_pdpanel_init.c"
      PANEL->U = (double *)((void *)0);
    }
    }
  }
  }
  {
  __CrestLoad(8419, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(8418, (unsigned long )0, (long long )1);
  __CrestApply2(8417, 12, (long long )(nprow == 1));
# 330 "../HPL_pdpanel_init.c"
  if (nprow == 1) {
    __CrestBranch(8420, 3364, 1);
    __CrestLoad(8422, (unsigned long )(& JB), (long long )JB);
    __CrestStore(8423, (unsigned long )(& lwork));
# 330 "../HPL_pdpanel_init.c"
    lwork = (int )JB;
  } else {
    __CrestBranch(8421, 3365, 0);
    __CrestLoad(8426, (unsigned long )(& JB), (long long )JB);
    __CrestLoad(8425, (unsigned long )0, (long long )1);
    __CrestApply2(8424, 8, (long long )(JB << 1));
    __CrestStore(8427, (unsigned long )(& itmp1));
# 333 "../HPL_pdpanel_init.c"
    itmp1 = (int )(JB << 1);
    __CrestLoad(8430, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(8429, (unsigned long )0, (long long )1);
    __CrestApply2(8428, 0, (long long )(nprow + 1));
    __CrestStore(8431, (unsigned long )(& lwork));
# 333 "../HPL_pdpanel_init.c"
    lwork = nprow + 1;
    {
    __CrestLoad(8434, (unsigned long )(& itmp1), (long long )itmp1);
    __CrestLoad(8433, (unsigned long )(& lwork), (long long )lwork);
    __CrestApply2(8432, 14, (long long )(itmp1 > lwork));
# 333 "../HPL_pdpanel_init.c"
    if (itmp1 > lwork) {
      __CrestBranch(8435, 3367, 1);
      __CrestLoad(8437, (unsigned long )(& itmp1), (long long )itmp1);
      __CrestStore(8438, (unsigned long )(& itmp1));
# 333 "../HPL_pdpanel_init.c"
      itmp1 = itmp1;
    } else {
      __CrestBranch(8436, 3368, 0);
      __CrestLoad(8439, (unsigned long )(& lwork), (long long )lwork);
      __CrestStore(8440, (unsigned long )(& itmp1));
# 333 "../HPL_pdpanel_init.c"
      itmp1 = lwork;
    }
    }
    __CrestLoad(8451, (unsigned long )0, (long long )4);
    __CrestLoad(8450, (unsigned long )0, (long long )9);
    __CrestLoad(8449, (unsigned long )(& JB), (long long )JB);
    __CrestApply2(8448, 2, (long long )(9 * (int )JB));
    __CrestApply2(8447, 0, (long long )(4 + 9 * (int )JB));
    __CrestLoad(8446, (unsigned long )0, (long long )3);
    __CrestLoad(8445, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(8444, 2, (long long )(3 * nprow));
    __CrestApply2(8443, 0, (long long )((4 + 9 * (int )JB) + 3 * nprow));
    __CrestLoad(8442, (unsigned long )(& itmp1), (long long )itmp1);
    __CrestApply2(8441, 0, (long long )(((4 + 9 * (int )JB) + 3 * nprow) + itmp1));
    __CrestStore(8452, (unsigned long )(& lwork));
# 334 "../HPL_pdpanel_init.c"
    lwork = ((4 + 9 * (int )JB) + 3 * nprow) + itmp1;
  }
  }
  __CrestLoad(8455, (unsigned long )(& lwork), (long long )lwork);
  __CrestLoad(8454, (unsigned long )0, (long long )sizeof(int ));
  __CrestApply2(8453, 2, (long long )((unsigned long )lwork * sizeof(int )));
# 337 "../HPL_pdpanel_init.c"
  tmp___9 = malloc((unsigned long )lwork * sizeof(int ));
  __CrestClearStack(8456);
# 337 "../HPL_pdpanel_init.c"
  PANEL->IWORK = (int *)tmp___9;
  {
  __CrestLoad(8459, (unsigned long )(& PANEL->IWORK), (long long )((unsigned long )PANEL->IWORK));
  __CrestLoad(8458, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(8457, 12, (long long )((unsigned long )PANEL->IWORK == (unsigned long )((void *)0)));
# 339 "../HPL_pdpanel_init.c"
  if ((unsigned long )PANEL->IWORK == (unsigned long )((void *)0)) {
    __CrestBranch(8460, 3372, 1);
    __CrestLoad(8462, (unsigned long )0, (long long )340);
# 340 "../HPL_pdpanel_init.c"
    HPL_pabort(340, "HPL_pdpanel_init", "Memory allocation failed");
    __CrestClearStack(8463);
  } else {
    __CrestBranch(8461, 3373, 0);

  }
  }
# 342 "../HPL_pdpanel_init.c"
  mem_40 = PANEL->IWORK;
  __CrestLoad(8464, (unsigned long )0, (long long )-1);
  __CrestStore(8465, (unsigned long )mem_40);
# 342 "../HPL_pdpanel_init.c"
  *mem_40 = -1;

  {
  __CrestReturn(8466);
# 59 "../HPL_pdpanel_init.c"
  return;
  }
}
}
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 135 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
int HPL_pdpanel_disp(HPL_T_panel **PANEL ) ;
# 139 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
int HPL_pdpanel_free(HPL_T_panel *PANEL ) ;
# 53 "../HPL_pdpanel_disp.c"
int HPL_pdpanel_disp(HPL_T_panel **PANEL )
{
  int mpierr ;

  {
  __CrestCall(8467, 50);
# 89 "../HPL_pdpanel_disp.c"
  mpierr = HPL_pdpanel_free(*PANEL);
  __CrestHandleReturn(8469, (long long )mpierr);
  __CrestStore(8468, (unsigned long )(& mpierr));
  {
  __CrestLoad(8472, (unsigned long )PANEL, (long long )((unsigned long )*PANEL));
  __CrestLoad(8471, (unsigned long )0, (long long )0);
  __CrestApply2(8470, 13, (long long )(*PANEL != 0));
# 90 "../HPL_pdpanel_disp.c"
  if (*PANEL != 0) {
    __CrestBranch(8473, 3379, 1);
# 90 "../HPL_pdpanel_disp.c"
    free((void *)*PANEL);
    __CrestClearStack(8475);
  } else {
    __CrestBranch(8474, 3380, 0);

  }
  }
# 91 "../HPL_pdpanel_disp.c"
  *PANEL = (HPL_T_panel *)((void *)0);
  {
  __CrestLoad(8476, (unsigned long )(& mpierr), (long long )mpierr);
  __CrestReturn(8477);
# 93 "../HPL_pdpanel_disp.c"
  return (mpierr);
  }
}
}
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 50 "../HPL_pdpanel_free.c"
int HPL_pdpanel_free(HPL_T_panel *PANEL )
{
  struct HPL_S_pmat *mem_2 ;
  struct HPL_S_pmat *mem_3 ;
  double *mem_4 ;
  int __retres5 ;

  {
  __CrestCall(8478, 51);

  {
# 79 "../HPL_pdpanel_free.c"
  mem_2 = PANEL->pmat;
  {
  __CrestLoad(8481, (unsigned long )(& mem_2->info), (long long )mem_2->info);
  __CrestLoad(8480, (unsigned long )0, (long long )0);
  __CrestApply2(8479, 12, (long long )(mem_2->info == 0));
# 79 "../HPL_pdpanel_free.c"
  if (mem_2->info == 0) {
    __CrestBranch(8482, 3386, 1);
# 79 "../HPL_pdpanel_free.c"
    mem_3 = PANEL->pmat;
# 79 "../HPL_pdpanel_free.c"
    mem_4 = PANEL->DINFO;
    __CrestLoad(8484, (unsigned long )mem_4, (long long )*mem_4);
    __CrestStore(8485, (unsigned long )(& mem_3->info));
# 79 "../HPL_pdpanel_free.c"
    mem_3->info = (int )*mem_4;
  } else {
    __CrestBranch(8483, 3387, 0);

  }
  }
  }
  {
  __CrestLoad(8488, (unsigned long )(& PANEL->WORK), (long long )((unsigned long )PANEL->WORK));
  __CrestLoad(8487, (unsigned long )0, (long long )0);
  __CrestApply2(8486, 13, (long long )(PANEL->WORK != 0));
# 97 "../HPL_pdpanel_free.c"
  if (PANEL->WORK != 0) {
    __CrestBranch(8489, 3389, 1);
# 97 "../HPL_pdpanel_free.c"
    free((void *)PANEL->WORK);
    __CrestClearStack(8491);
  } else {
    __CrestBranch(8490, 3390, 0);

  }
  }
  {
  __CrestLoad(8494, (unsigned long )(& PANEL->IWORK), (long long )((unsigned long )PANEL->IWORK));
  __CrestLoad(8493, (unsigned long )0, (long long )0);
  __CrestApply2(8492, 13, (long long )(PANEL->IWORK != 0));
# 98 "../HPL_pdpanel_free.c"
  if (PANEL->IWORK != 0) {
    __CrestBranch(8495, 3392, 1);
# 98 "../HPL_pdpanel_free.c"
    free((void *)PANEL->IWORK);
    __CrestClearStack(8497);
  } else {
    __CrestBranch(8496, 3393, 0);

  }
  }
  __CrestLoad(8498, (unsigned long )0, (long long )0);
  __CrestStore(8499, (unsigned long )(& __retres5));
# 100 "../HPL_pdpanel_free.c"
  __retres5 = 0;
  {
  __CrestLoad(8500, (unsigned long )(& __retres5), (long long )__retres5);
  __CrestReturn(8501);
# 50 "../HPL_pdpanel_free.c"
  return (__retres5);
  }
}
}
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 252 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxg2l(int const IG , int const INB , int const NB , int const SRCPROC ,
                int const NPROCS ) ;
# 53 "../HPL_indxg2l.c"
int HPL_indxg2l(int const IG , int const INB , int const NB , int const SRCPROC ,
                int const NPROCS )
{
  int i ;
  int j ;
  int tmp ;
  int __retres9 ;

  {
  __CrestCall(8507, 52);
  __CrestStore(8506, (unsigned long )(& NPROCS));
  __CrestStore(8505, (unsigned long )(& SRCPROC));
  __CrestStore(8504, (unsigned long )(& NB));
  __CrestStore(8503, (unsigned long )(& INB));
  __CrestStore(8502, (unsigned long )(& IG));
  {
  __CrestLoad(8510, (unsigned long )(& IG), (long long )IG);
  __CrestLoad(8509, (unsigned long )(& INB), (long long )INB);
  __CrestApply2(8508, 16, (long long )(IG < INB));
# 113 "../HPL_indxg2l.c"
  if (IG < INB) {
    __CrestBranch(8511, 3397, 1);
    __CrestLoad(8513, (unsigned long )(& IG), (long long )IG);
    __CrestStore(8514, (unsigned long )(& __retres9));
# 118 "../HPL_indxg2l.c"
    __retres9 = (int )IG;
# 118 "../HPL_indxg2l.c"
    goto return_label;
  } else {
    __CrestBranch(8512, 3399, 0);
    {
    __CrestLoad(8517, (unsigned long )(& SRCPROC), (long long )SRCPROC);
    __CrestLoad(8516, (unsigned long )0, (long long )-1);
    __CrestApply2(8515, 12, (long long )(SRCPROC == -1));
# 113 "../HPL_indxg2l.c"
    if (SRCPROC == -1) {
      __CrestBranch(8518, 3400, 1);
      __CrestLoad(8520, (unsigned long )(& IG), (long long )IG);
      __CrestStore(8521, (unsigned long )(& __retres9));
# 118 "../HPL_indxg2l.c"
      __retres9 = (int )IG;
# 118 "../HPL_indxg2l.c"
      goto return_label;
    } else {
      __CrestBranch(8519, 3402, 0);
      {
      __CrestLoad(8524, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestLoad(8523, (unsigned long )0, (long long )1);
      __CrestApply2(8522, 12, (long long )(NPROCS == 1));
# 113 "../HPL_indxg2l.c"
      if (NPROCS == 1) {
        __CrestBranch(8525, 3403, 1);
        __CrestLoad(8527, (unsigned long )(& IG), (long long )IG);
        __CrestStore(8528, (unsigned long )(& __retres9));
# 118 "../HPL_indxg2l.c"
        __retres9 = (int )IG;
# 118 "../HPL_indxg2l.c"
        goto return_label;
      } else {
        __CrestBranch(8526, 3405, 0);

      }
      }
    }
    }
  }
  }
  __CrestLoad(8533, (unsigned long )(& IG), (long long )IG);
  __CrestLoad(8532, (unsigned long )(& INB), (long long )INB);
  __CrestApply2(8531, 1, (long long )(IG - INB));
  __CrestLoad(8530, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(8529, 3, (long long )((IG - INB) / NB));
  __CrestStore(8534, (unsigned long )(& i));
# 131 "../HPL_indxg2l.c"
  i = (int )((IG - INB) / NB);
  __CrestLoad(8537, (unsigned long )(& i), (long long )i);
  __CrestLoad(8536, (unsigned long )(& NPROCS), (long long )NPROCS);
  __CrestApply2(8535, 3, (long long )(i / (int )NPROCS));
  __CrestStore(8538, (unsigned long )(& j));
# 131 "../HPL_indxg2l.c"
  j = i / (int )NPROCS;
  {
  __CrestLoad(8549, (unsigned long )(& i), (long long )i);
  __CrestLoad(8548, (unsigned long )0, (long long )1);
  __CrestApply2(8547, 0, (long long )(i + 1));
  __CrestLoad(8546, (unsigned long )(& j), (long long )j);
  __CrestLoad(8545, (unsigned long )0, (long long )1);
  __CrestApply2(8544, 0, (long long )(j + 1));
  __CrestLoad(8543, (unsigned long )(& NPROCS), (long long )NPROCS);
  __CrestApply2(8542, 2, (long long )((j + 1) * (int )NPROCS));
  __CrestApply2(8541, 1, (long long )((i + 1) - (j + 1) * (int )NPROCS));
  __CrestLoad(8540, (unsigned long )0, (long long )0);
  __CrestApply2(8539, 13, (long long )((i + 1) - (j + 1) * (int )NPROCS != 0));
# 146 "../HPL_indxg2l.c"
  if ((i + 1) - (j + 1) * (int )NPROCS != 0) {
    __CrestBranch(8550, 3408, 1);
    __CrestLoad(8554, (unsigned long )(& IG), (long long )IG);
    __CrestLoad(8553, (unsigned long )(& INB), (long long )INB);
    __CrestApply2(8552, 1, (long long )(IG - INB));
    __CrestStore(8555, (unsigned long )(& tmp));
# 146 "../HPL_indxg2l.c"
    tmp = (int )(IG - INB);
  } else {
    __CrestBranch(8551, 3409, 0);
    __CrestLoad(8556, (unsigned long )(& IG), (long long )IG);
    __CrestStore(8557, (unsigned long )(& tmp));
# 146 "../HPL_indxg2l.c"
    tmp = (int )IG;
  }
  }
  __CrestLoad(8564, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(8563, (unsigned long )(& j), (long long )j);
  __CrestLoad(8562, (unsigned long )(& i), (long long )i);
  __CrestApply2(8561, 1, (long long )(j - i));
  __CrestApply2(8560, 2, (long long )(NB * (int const )(j - i)));
  __CrestLoad(8559, (unsigned long )(& tmp), (long long )tmp);
  __CrestApply2(8558, 0, (long long )(NB * (int const )(j - i) + (int const )tmp));
  __CrestStore(8565, (unsigned long )(& __retres9));
# 146 "../HPL_indxg2l.c"
  __retres9 = (int )(NB * (int const )(j - i) + (int const )tmp);
  return_label:
  {
  __CrestLoad(8566, (unsigned long )(& __retres9), (long long )__retres9);
  __CrestReturn(8567);
# 53 "../HPL_indxg2l.c"
  return (__retres9);
  }
}
}
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 242 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_indxg2lp(int *IL , int *PROC , int const IG , int const INB , int const NB ,
                  int const SRCPROC , int const NPROCS ) ;
# 53 "../HPL_indxg2lp.c"
void HPL_indxg2lp(int *IL , int *PROC , int const IG , int const INB , int const NB ,
                  int const SRCPROC , int const NPROCS )
{
  int i ;
  int j ;
  int tmp ;

  {
  __CrestCall(8573, 53);
  __CrestStore(8572, (unsigned long )(& NPROCS));
  __CrestStore(8571, (unsigned long )(& SRCPROC));
  __CrestStore(8570, (unsigned long )(& NB));
  __CrestStore(8569, (unsigned long )(& INB));
  __CrestStore(8568, (unsigned long )(& IG));
  {
  __CrestLoad(8576, (unsigned long )(& IG), (long long )IG);
  __CrestLoad(8575, (unsigned long )(& INB), (long long )INB);
  __CrestApply2(8574, 16, (long long )(IG < INB));
# 126 "../HPL_indxg2lp.c"
  if (IG < INB) {
    __CrestBranch(8577, 3413, 1);
    __CrestLoad(8579, (unsigned long )(& IG), (long long )IG);
    __CrestStore(8580, (unsigned long )IL);
# 132 "../HPL_indxg2lp.c"
    *IL = (int )IG;
    __CrestLoad(8581, (unsigned long )(& SRCPROC), (long long )SRCPROC);
    __CrestStore(8582, (unsigned long )PROC);
# 133 "../HPL_indxg2lp.c"
    *PROC = (int )SRCPROC;
  } else {
    __CrestBranch(8578, 3414, 0);
    {
    __CrestLoad(8585, (unsigned long )(& SRCPROC), (long long )SRCPROC);
    __CrestLoad(8584, (unsigned long )0, (long long )-1);
    __CrestApply2(8583, 12, (long long )(SRCPROC == -1));
# 126 "../HPL_indxg2lp.c"
    if (SRCPROC == -1) {
      __CrestBranch(8586, 3415, 1);
      __CrestLoad(8588, (unsigned long )(& IG), (long long )IG);
      __CrestStore(8589, (unsigned long )IL);
# 132 "../HPL_indxg2lp.c"
      *IL = (int )IG;
      __CrestLoad(8590, (unsigned long )(& SRCPROC), (long long )SRCPROC);
      __CrestStore(8591, (unsigned long )PROC);
# 133 "../HPL_indxg2lp.c"
      *PROC = (int )SRCPROC;
    } else {
      __CrestBranch(8587, 3416, 0);
      {
      __CrestLoad(8594, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestLoad(8593, (unsigned long )0, (long long )1);
      __CrestApply2(8592, 12, (long long )(NPROCS == 1));
# 126 "../HPL_indxg2lp.c"
      if (NPROCS == 1) {
        __CrestBranch(8595, 3417, 1);
        __CrestLoad(8597, (unsigned long )(& IG), (long long )IG);
        __CrestStore(8598, (unsigned long )IL);
# 132 "../HPL_indxg2lp.c"
        *IL = (int )IG;
        __CrestLoad(8599, (unsigned long )(& SRCPROC), (long long )SRCPROC);
        __CrestStore(8600, (unsigned long )PROC);
# 133 "../HPL_indxg2lp.c"
        *PROC = (int )SRCPROC;
      } else {
        __CrestBranch(8596, 3418, 0);
        __CrestLoad(8605, (unsigned long )(& IG), (long long )IG);
        __CrestLoad(8604, (unsigned long )(& INB), (long long )INB);
        __CrestApply2(8603, 1, (long long )(IG - INB));
        __CrestLoad(8602, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(8601, 3, (long long )((IG - INB) / NB));
        __CrestStore(8606, (unsigned long )(& i));
# 149 "../HPL_indxg2lp.c"
        i = (int )((IG - INB) / NB);
        __CrestLoad(8609, (unsigned long )(& i), (long long )i);
        __CrestLoad(8608, (unsigned long )(& NPROCS), (long long )NPROCS);
        __CrestApply2(8607, 3, (long long )(i / (int )NPROCS));
        __CrestStore(8610, (unsigned long )(& j));
# 149 "../HPL_indxg2lp.c"
        j = i / (int )NPROCS;
        __CrestLoad(8615, (unsigned long )(& SRCPROC), (long long )SRCPROC);
        __CrestLoad(8614, (unsigned long )0, (long long )1);
        __CrestApply2(8613, 0, (long long )(SRCPROC + 1));
        __CrestLoad(8612, (unsigned long )(& i), (long long )i);
        __CrestApply2(8611, 0, (long long )((SRCPROC + 1) + (int const )i));
        __CrestStore(8616, (unsigned long )PROC);
# 154 "../HPL_indxg2lp.c"
        *PROC = (int )((SRCPROC + 1) + (int const )i);
        __CrestLoad(8623, (unsigned long )PROC, (long long )*PROC);
        __CrestLoad(8622, (unsigned long )PROC, (long long )*PROC);
        __CrestLoad(8621, (unsigned long )(& NPROCS), (long long )NPROCS);
        __CrestApply2(8620, 3, (long long )(*PROC / (int )NPROCS));
        __CrestLoad(8619, (unsigned long )(& NPROCS), (long long )NPROCS);
        __CrestApply2(8618, 2, (long long )((*PROC / (int )NPROCS) * (int )NPROCS));
        __CrestApply2(8617, 1, (long long )(*PROC - (*PROC / (int )NPROCS) * (int )NPROCS));
        __CrestStore(8624, (unsigned long )PROC);
# 155 "../HPL_indxg2lp.c"
        *PROC -= (*PROC / (int )NPROCS) * (int )NPROCS;
        {
        __CrestLoad(8635, (unsigned long )(& i), (long long )i);
        __CrestLoad(8634, (unsigned long )0, (long long )1);
        __CrestApply2(8633, 0, (long long )(i + 1));
        __CrestLoad(8632, (unsigned long )(& j), (long long )j);
        __CrestLoad(8631, (unsigned long )0, (long long )1);
        __CrestApply2(8630, 0, (long long )(j + 1));
        __CrestLoad(8629, (unsigned long )(& NPROCS), (long long )NPROCS);
        __CrestApply2(8628, 2, (long long )((j + 1) * (int )NPROCS));
        __CrestApply2(8627, 1, (long long )((i + 1) - (j + 1) * (int )NPROCS));
        __CrestLoad(8626, (unsigned long )0, (long long )0);
        __CrestApply2(8625, 13, (long long )((i + 1) - (j + 1) * (int )NPROCS != 0));
# 170 "../HPL_indxg2lp.c"
        if ((i + 1) - (j + 1) * (int )NPROCS != 0) {
          __CrestBranch(8636, 3420, 1);
          __CrestLoad(8640, (unsigned long )(& IG), (long long )IG);
          __CrestLoad(8639, (unsigned long )(& INB), (long long )INB);
          __CrestApply2(8638, 1, (long long )(IG - INB));
          __CrestStore(8641, (unsigned long )(& tmp));
# 170 "../HPL_indxg2lp.c"
          tmp = (int )(IG - INB);
        } else {
          __CrestBranch(8637, 3421, 0);
          __CrestLoad(8642, (unsigned long )(& IG), (long long )IG);
          __CrestStore(8643, (unsigned long )(& tmp));
# 170 "../HPL_indxg2lp.c"
          tmp = (int )IG;
        }
        }
        __CrestLoad(8650, (unsigned long )(& NB), (long long )NB);
        __CrestLoad(8649, (unsigned long )(& j), (long long )j);
        __CrestLoad(8648, (unsigned long )(& i), (long long )i);
        __CrestApply2(8647, 1, (long long )(j - i));
        __CrestApply2(8646, 2, (long long )(NB * (int const )(j - i)));
        __CrestLoad(8645, (unsigned long )(& tmp), (long long )tmp);
        __CrestApply2(8644, 0, (long long )(NB * (int const )(j - i) + (int const )tmp));
        __CrestStore(8651, (unsigned long )IL);
# 170 "../HPL_indxg2lp.c"
        *IL = (int )(NB * (int const )(j - i) + (int const )tmp);
      }
      }
    }
    }
  }
  }

  {
  __CrestReturn(8652);
# 53 "../HPL_indxg2lp.c"
  return;
  }
}
}
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_indxg2p.c"
int HPL_indxg2p(int const IG , int const INB , int const NB , int const SRCPROC ,
                int const NPROCS )
{
  int proc ;
  int __retres7 ;

  {
  __CrestCall(8658, 54);
  __CrestStore(8657, (unsigned long )(& NPROCS));
  __CrestStore(8656, (unsigned long )(& SRCPROC));
  __CrestStore(8655, (unsigned long )(& NB));
  __CrestStore(8654, (unsigned long )(& INB));
  __CrestStore(8653, (unsigned long )(& IG));
  {
  __CrestLoad(8661, (unsigned long )(& IG), (long long )IG);
  __CrestLoad(8660, (unsigned long )(& INB), (long long )INB);
  __CrestApply2(8659, 16, (long long )(IG < INB));
# 112 "../HPL_indxg2p.c"
  if (IG < INB) {
    __CrestBranch(8662, 3426, 1);
    __CrestLoad(8664, (unsigned long )(& SRCPROC), (long long )SRCPROC);
    __CrestStore(8665, (unsigned long )(& __retres7));
# 117 "../HPL_indxg2p.c"
    __retres7 = (int )SRCPROC;
# 117 "../HPL_indxg2p.c"
    goto return_label;
  } else {
    __CrestBranch(8663, 3428, 0);
    {
    __CrestLoad(8668, (unsigned long )(& SRCPROC), (long long )SRCPROC);
    __CrestLoad(8667, (unsigned long )0, (long long )-1);
    __CrestApply2(8666, 12, (long long )(SRCPROC == -1));
# 112 "../HPL_indxg2p.c"
    if (SRCPROC == -1) {
      __CrestBranch(8669, 3429, 1);
      __CrestLoad(8671, (unsigned long )(& SRCPROC), (long long )SRCPROC);
      __CrestStore(8672, (unsigned long )(& __retres7));
# 117 "../HPL_indxg2p.c"
      __retres7 = (int )SRCPROC;
# 117 "../HPL_indxg2p.c"
      goto return_label;
    } else {
      __CrestBranch(8670, 3431, 0);
      {
      __CrestLoad(8675, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestLoad(8674, (unsigned long )0, (long long )1);
      __CrestApply2(8673, 12, (long long )(NPROCS == 1));
# 112 "../HPL_indxg2p.c"
      if (NPROCS == 1) {
        __CrestBranch(8676, 3432, 1);
        __CrestLoad(8678, (unsigned long )(& SRCPROC), (long long )SRCPROC);
        __CrestStore(8679, (unsigned long )(& __retres7));
# 117 "../HPL_indxg2p.c"
        __retres7 = (int )SRCPROC;
# 117 "../HPL_indxg2p.c"
        goto return_label;
      } else {
        __CrestBranch(8677, 3434, 0);

      }
      }
    }
    }
  }
  }
  __CrestLoad(8688, (unsigned long )(& SRCPROC), (long long )SRCPROC);
  __CrestLoad(8687, (unsigned long )0, (long long )1);
  __CrestApply2(8686, 0, (long long )(SRCPROC + 1));
  __CrestLoad(8685, (unsigned long )(& IG), (long long )IG);
  __CrestLoad(8684, (unsigned long )(& INB), (long long )INB);
  __CrestApply2(8683, 1, (long long )(IG - INB));
  __CrestLoad(8682, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(8681, 3, (long long )((IG - INB) / NB));
  __CrestApply2(8680, 0, (long long )((SRCPROC + 1) + (IG - INB) / NB));
  __CrestStore(8689, (unsigned long )(& proc));
# 123 "../HPL_indxg2p.c"
  proc = (int )((SRCPROC + 1) + (IG - INB) / NB);
  __CrestLoad(8696, (unsigned long )(& proc), (long long )proc);
  __CrestLoad(8695, (unsigned long )(& proc), (long long )proc);
  __CrestLoad(8694, (unsigned long )(& NPROCS), (long long )NPROCS);
  __CrestApply2(8693, 3, (long long )(proc / (int )NPROCS));
  __CrestLoad(8692, (unsigned long )(& NPROCS), (long long )NPROCS);
  __CrestApply2(8691, 2, (long long )((proc / (int )NPROCS) * (int )NPROCS));
  __CrestApply2(8690, 1, (long long )(proc - (proc / (int )NPROCS) * (int )NPROCS));
  __CrestStore(8697, (unsigned long )(& __retres7));
# 124 "../HPL_indxg2p.c"
  __retres7 = proc - (proc / (int )NPROCS) * (int )NPROCS;
  return_label:
  {
  __CrestLoad(8698, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(8699);
# 53 "../HPL_indxg2p.c"
  return (__retres7);
  }
}
}
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 268 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxl2g(int const IL , int const INB , int const NB , int const PROC ,
                int const SRCPROC , int const NPROCS ) ;
# 53 "../HPL_indxl2g.c"
int HPL_indxl2g(int const IL , int const INB , int const NB , int const PROC ,
                int const SRCPROC , int const NPROCS )
{
  int __retres7 ;

  {
  __CrestCall(8706, 55);
  __CrestStore(8705, (unsigned long )(& NPROCS));
  __CrestStore(8704, (unsigned long )(& SRCPROC));
  __CrestStore(8703, (unsigned long )(& PROC));
  __CrestStore(8702, (unsigned long )(& NB));
  __CrestStore(8701, (unsigned long )(& INB));
  __CrestStore(8700, (unsigned long )(& IL));
  {
  __CrestLoad(8709, (unsigned long )(& SRCPROC), (long long )SRCPROC);
  __CrestLoad(8708, (unsigned long )0, (long long )-1);
  __CrestApply2(8707, 12, (long long )(SRCPROC == -1));
# 115 "../HPL_indxl2g.c"
  if (SRCPROC == -1) {
    __CrestBranch(8710, 3439, 1);
    __CrestLoad(8712, (unsigned long )(& IL), (long long )IL);
    __CrestStore(8713, (unsigned long )(& __retres7));
# 121 "../HPL_indxl2g.c"
    __retres7 = (int )IL;
# 121 "../HPL_indxl2g.c"
    goto return_label;
  } else {
    __CrestBranch(8711, 3441, 0);
    {
    __CrestLoad(8716, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestLoad(8715, (unsigned long )0, (long long )1);
    __CrestApply2(8714, 12, (long long )(NPROCS == 1));
# 115 "../HPL_indxl2g.c"
    if (NPROCS == 1) {
      __CrestBranch(8717, 3442, 1);
      __CrestLoad(8719, (unsigned long )(& IL), (long long )IL);
      __CrestStore(8720, (unsigned long )(& __retres7));
# 121 "../HPL_indxl2g.c"
      __retres7 = (int )IL;
# 121 "../HPL_indxl2g.c"
      goto return_label;
    } else {
      __CrestBranch(8718, 3444, 0);
      {
      __CrestLoad(8723, (unsigned long )(& PROC), (long long )PROC);
      __CrestLoad(8722, (unsigned long )(& SRCPROC), (long long )SRCPROC);
      __CrestApply2(8721, 12, (long long )(PROC == SRCPROC));
# 123 "../HPL_indxl2g.c"
      if (PROC == SRCPROC) {
        __CrestBranch(8724, 3445, 1);
        {
        __CrestLoad(8728, (unsigned long )(& IL), (long long )IL);
        __CrestLoad(8727, (unsigned long )(& INB), (long long )INB);
        __CrestApply2(8726, 16, (long long )(IL < INB));
# 128 "../HPL_indxl2g.c"
        if (IL < INB) {
          __CrestBranch(8729, 3446, 1);
          __CrestLoad(8731, (unsigned long )(& IL), (long long )IL);
          __CrestStore(8732, (unsigned long )(& __retres7));
# 133 "../HPL_indxl2g.c"
          __retres7 = (int )IL;
# 133 "../HPL_indxl2g.c"
          goto return_label;
        } else {
          __CrestBranch(8730, 3448, 0);

        }
        }
        __CrestLoad(8747, (unsigned long )(& NPROCS), (long long )NPROCS);
        __CrestLoad(8746, (unsigned long )0, (long long )1);
        __CrestApply2(8745, 1, (long long )(NPROCS - 1));
        __CrestLoad(8744, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(8743, 2, (long long )((NPROCS - 1) * NB));
        __CrestLoad(8742, (unsigned long )(& IL), (long long )IL);
        __CrestLoad(8741, (unsigned long )(& INB), (long long )INB);
        __CrestApply2(8740, 1, (long long )(IL - INB));
        __CrestLoad(8739, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(8738, 3, (long long )((IL - INB) / NB));
        __CrestLoad(8737, (unsigned long )0, (long long )1);
        __CrestApply2(8736, 0, (long long )((IL - INB) / NB + 1));
        __CrestApply2(8735, 2, (long long )(((NPROCS - 1) * NB) * ((IL - INB) / NB + 1)));
        __CrestLoad(8734, (unsigned long )(& IL), (long long )IL);
        __CrestApply2(8733, 0, (long long )(((NPROCS - 1) * NB) * ((IL - INB) / NB + 1) + IL));
        __CrestStore(8748, (unsigned long )(& __retres7));
# 140 "../HPL_indxl2g.c"
        __retres7 = (int )(((NPROCS - 1) * NB) * ((IL - INB) / NB + 1) + IL);
# 140 "../HPL_indxl2g.c"
        goto return_label;
      } else {
        __CrestBranch(8725, 3451, 0);
        {
        __CrestLoad(8751, (unsigned long )(& PROC), (long long )PROC);
        __CrestLoad(8750, (unsigned long )(& SRCPROC), (long long )SRCPROC);
        __CrestApply2(8749, 16, (long long )(PROC < SRCPROC));
# 142 "../HPL_indxl2g.c"
        if (PROC < SRCPROC) {
          __CrestBranch(8752, 3452, 1);
          __CrestLoad(8774, (unsigned long )(& NB), (long long )NB);
          __CrestLoad(8773, (unsigned long )(& NPROCS), (long long )NPROCS);
          __CrestLoad(8772, (unsigned long )0, (long long )1);
          __CrestApply2(8771, 1, (long long )(NPROCS - 1));
          __CrestLoad(8770, (unsigned long )(& IL), (long long )IL);
          __CrestLoad(8769, (unsigned long )(& NB), (long long )NB);
          __CrestApply2(8768, 3, (long long )(IL / NB));
          __CrestApply2(8767, 2, (long long )((NPROCS - 1) * (IL / NB)));
          __CrestLoad(8766, (unsigned long )(& PROC), (long long )PROC);
          __CrestApply2(8765, 0, (long long )((NPROCS - 1) * (IL / NB) + PROC));
          __CrestLoad(8764, (unsigned long )(& SRCPROC), (long long )SRCPROC);
          __CrestApply2(8763, 1, (long long )(((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC));
          __CrestLoad(8762, (unsigned long )0, (long long )1);
          __CrestApply2(8761, 1, (long long )((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1));
          __CrestLoad(8760, (unsigned long )(& NPROCS), (long long )NPROCS);
          __CrestApply2(8759, 0, (long long )(((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS));
          __CrestApply2(8758, 2, (long long )(NB * (((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS)));
          __CrestLoad(8757, (unsigned long )(& IL), (long long )IL);
          __CrestApply2(8756, 0, (long long )(NB * (((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS) + IL));
          __CrestLoad(8755, (unsigned long )(& INB), (long long )INB);
          __CrestApply2(8754, 0, (long long )((NB * (((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS) + IL) + INB));
          __CrestStore(8775, (unsigned long )(& __retres7));
# 152 "../HPL_indxl2g.c"
          __retres7 = (int )((NB * (((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS) + IL) + INB);
# 152 "../HPL_indxl2g.c"
          goto return_label;
        } else {
          __CrestBranch(8753, 3454, 0);
          __CrestLoad(8794, (unsigned long )(& NB), (long long )NB);
          __CrestLoad(8793, (unsigned long )(& NPROCS), (long long )NPROCS);
          __CrestLoad(8792, (unsigned long )0, (long long )1);
          __CrestApply2(8791, 1, (long long )(NPROCS - 1));
          __CrestLoad(8790, (unsigned long )(& IL), (long long )IL);
          __CrestLoad(8789, (unsigned long )(& NB), (long long )NB);
          __CrestApply2(8788, 3, (long long )(IL / NB));
          __CrestApply2(8787, 2, (long long )((NPROCS - 1) * (IL / NB)));
          __CrestLoad(8786, (unsigned long )(& PROC), (long long )PROC);
          __CrestApply2(8785, 0, (long long )((NPROCS - 1) * (IL / NB) + PROC));
          __CrestLoad(8784, (unsigned long )(& SRCPROC), (long long )SRCPROC);
          __CrestApply2(8783, 1, (long long )(((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC));
          __CrestLoad(8782, (unsigned long )0, (long long )1);
          __CrestApply2(8781, 1, (long long )((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1));
          __CrestApply2(8780, 2, (long long )(NB * ((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1)));
          __CrestLoad(8779, (unsigned long )(& IL), (long long )IL);
          __CrestApply2(8778, 0, (long long )(NB * ((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + IL));
          __CrestLoad(8777, (unsigned long )(& INB), (long long )INB);
          __CrestApply2(8776, 0, (long long )((NB * ((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + IL) + INB));
          __CrestStore(8795, (unsigned long )(& __retres7));
# 159 "../HPL_indxl2g.c"
          __retres7 = (int )((NB * ((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + IL) + INB);
# 159 "../HPL_indxl2g.c"
          goto return_label;
        }
        }
      }
      }
    }
    }
  }
  }
  return_label:
  {
  __CrestLoad(8796, (unsigned long )(& __retres7), (long long )__retres7);
  __CrestReturn(8797);
# 53 "../HPL_indxl2g.c"
  return (__retres7);
  }
}
}
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_infog2l.c"
void HPL_infog2l(int I , int J , int const IMB , int const MB , int const INB ,
                 int const NB , int const RSRC , int const CSRC , int const MYROW ,
                 int const MYCOL , int const NPROW , int const NPCOL , int *II ,
                 int *JJ , int *PROW , int *PCOL )
{
  int ilocblk ;
  int imb ;
  int inb ;
  int mb ;
  int mydist ;
  int nb ;
  int nblocks ;
  int csrc ;
  int rsrc ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  __CrestCall(8810, 56);
  __CrestStore(8809, (unsigned long )(& NPCOL));
  __CrestStore(8808, (unsigned long )(& NPROW));
  __CrestStore(8807, (unsigned long )(& MYCOL));
  __CrestStore(8806, (unsigned long )(& MYROW));
  __CrestStore(8805, (unsigned long )(& CSRC));
  __CrestStore(8804, (unsigned long )(& RSRC));
  __CrestStore(8803, (unsigned long )(& NB));
  __CrestStore(8802, (unsigned long )(& INB));
  __CrestStore(8801, (unsigned long )(& MB));
  __CrestStore(8800, (unsigned long )(& IMB));
  __CrestStore(8799, (unsigned long )(& J));
  __CrestStore(8798, (unsigned long )(& I));
  __CrestLoad(8811, (unsigned long )(& IMB), (long long )IMB);
  __CrestStore(8812, (unsigned long )(& imb));
# 186 "../HPL_infog2l.c"
  imb = (int )IMB;
  __CrestLoad(8813, (unsigned long )(& RSRC), (long long )RSRC);
  __CrestStore(8814, (unsigned long )PROW);
# 187 "../HPL_infog2l.c"
  *PROW = (int )RSRC;
  {
  __CrestLoad(8817, (unsigned long )PROW, (long long )*PROW);
  __CrestLoad(8816, (unsigned long )0, (long long )-1);
  __CrestApply2(8815, 12, (long long )(*PROW == -1));
# 189 "../HPL_infog2l.c"
  if (*PROW == -1) {
    __CrestBranch(8818, 3459, 1);
    __CrestLoad(8820, (unsigned long )(& I), (long long )I);
    __CrestStore(8821, (unsigned long )II);
# 195 "../HPL_infog2l.c"
    *II = I;
  } else {
    __CrestBranch(8819, 3460, 0);
    {
    __CrestLoad(8824, (unsigned long )(& NPROW), (long long )NPROW);
    __CrestLoad(8823, (unsigned long )0, (long long )1);
    __CrestApply2(8822, 12, (long long )(NPROW == 1));
# 189 "../HPL_infog2l.c"
    if (NPROW == 1) {
      __CrestBranch(8825, 3461, 1);
      __CrestLoad(8827, (unsigned long )(& I), (long long )I);
      __CrestStore(8828, (unsigned long )II);
# 195 "../HPL_infog2l.c"
      *II = I;
    } else {
      __CrestBranch(8826, 3462, 0);
      {
      __CrestLoad(8831, (unsigned long )(& I), (long long )I);
      __CrestLoad(8830, (unsigned long )(& imb), (long long )imb);
      __CrestApply2(8829, 16, (long long )(I < imb));
# 197 "../HPL_infog2l.c"
      if (I < imb) {
        __CrestBranch(8832, 3463, 1);
        {
        __CrestLoad(8836, (unsigned long )(& MYROW), (long long )MYROW);
        __CrestLoad(8835, (unsigned long )PROW, (long long )*PROW);
        __CrestApply2(8834, 12, (long long )(MYROW == (int const )*PROW));
# 202 "../HPL_infog2l.c"
        if (MYROW == (int const )*PROW) {
          __CrestBranch(8837, 3464, 1);
          __CrestLoad(8839, (unsigned long )(& I), (long long )I);
          __CrestStore(8840, (unsigned long )II);
# 202 "../HPL_infog2l.c"
          *II = I;
        } else {
          __CrestBranch(8838, 3465, 0);
          __CrestLoad(8841, (unsigned long )0, (long long )0);
          __CrestStore(8842, (unsigned long )II);
# 202 "../HPL_infog2l.c"
          *II = 0;
        }
        }
      } else {
        __CrestBranch(8833, 3466, 0);
        __CrestLoad(8843, (unsigned long )(& MB), (long long )MB);
        __CrestStore(8844, (unsigned long )(& mb));
# 206 "../HPL_infog2l.c"
        mb = (int )MB;
        __CrestLoad(8845, (unsigned long )PROW, (long long )*PROW);
        __CrestStore(8846, (unsigned long )(& rsrc));
# 207 "../HPL_infog2l.c"
        rsrc = *PROW;
        {
        __CrestLoad(8849, (unsigned long )(& MYROW), (long long )MYROW);
        __CrestLoad(8848, (unsigned long )(& rsrc), (long long )rsrc);
        __CrestApply2(8847, 12, (long long )(MYROW == (int const )rsrc));
# 222 "../HPL_infog2l.c"
        if (MYROW == (int const )rsrc) {
          __CrestBranch(8850, 3468, 1);
          __CrestLoad(8858, (unsigned long )(& I), (long long )I);
          __CrestLoad(8857, (unsigned long )(& imb), (long long )imb);
          __CrestApply2(8856, 1, (long long )(I - imb));
          __CrestLoad(8855, (unsigned long )(& mb), (long long )mb);
          __CrestApply2(8854, 3, (long long )((I - imb) / mb));
          __CrestLoad(8853, (unsigned long )0, (long long )1);
          __CrestApply2(8852, 0, (long long )((I - imb) / mb + 1));
          __CrestStore(8859, (unsigned long )(& nblocks));
# 228 "../HPL_infog2l.c"
          nblocks = (I - imb) / mb + 1;
          __CrestLoad(8862, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8861, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestApply2(8860, 0, (long long )(*PROW + nblocks));
          __CrestStore(8863, (unsigned long )PROW);
# 229 "../HPL_infog2l.c"
          *PROW += nblocks;
          __CrestLoad(8870, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8869, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8868, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8867, 3, (long long )(*PROW / (int )NPROW));
          __CrestLoad(8866, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8865, 2, (long long )((*PROW / (int )NPROW) * (int )NPROW));
          __CrestApply2(8864, 1, (long long )(*PROW - (*PROW / (int )NPROW) * (int )NPROW));
          __CrestStore(8871, (unsigned long )PROW);
# 230 "../HPL_infog2l.c"
          *PROW -= (*PROW / (int )NPROW) * (int )NPROW;
          {
          __CrestLoad(8874, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestLoad(8873, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8872, 16, (long long )(nblocks < (int )NPROW));
# 250 "../HPL_infog2l.c"
          if (nblocks < (int )NPROW) {
            __CrestBranch(8875, 3470, 1);
            __CrestLoad(8877, (unsigned long )(& imb), (long long )imb);
            __CrestStore(8878, (unsigned long )II);
# 252 "../HPL_infog2l.c"
            *II = imb;
          } else {
            __CrestBranch(8876, 3471, 0);
            __CrestLoad(8881, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(8880, (unsigned long )(& NPROW), (long long )NPROW);
            __CrestApply2(8879, 3, (long long )(nblocks / (int )NPROW));
            __CrestStore(8882, (unsigned long )(& ilocblk));
# 256 "../HPL_infog2l.c"
            ilocblk = nblocks / (int )NPROW;
            {
            __CrestLoad(8887, (unsigned long )(& ilocblk), (long long )ilocblk);
            __CrestLoad(8886, (unsigned long )(& NPROW), (long long )NPROW);
            __CrestApply2(8885, 2, (long long )(ilocblk * (int )NPROW));
            __CrestLoad(8884, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestApply2(8883, 17, (long long )(ilocblk * (int )NPROW >= nblocks));
# 257 "../HPL_infog2l.c"
            if (ilocblk * (int )NPROW >= nblocks) {
              __CrestBranch(8888, 3473, 1);
              {
              __CrestLoad(8892, (unsigned long )(& MYROW), (long long )MYROW);
              __CrestLoad(8891, (unsigned long )PROW, (long long )*PROW);
              __CrestApply2(8890, 12, (long long )(MYROW == (int const )*PROW));
# 259 "../HPL_infog2l.c"
              if (MYROW == (int const )*PROW) {
                __CrestBranch(8893, 3474, 1);
                __CrestLoad(8901, (unsigned long )(& I), (long long )I);
                __CrestLoad(8900, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(8899, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(8898, 1, (long long )(ilocblk - nblocks));
                __CrestLoad(8897, (unsigned long )(& mb), (long long )mb);
                __CrestApply2(8896, 2, (long long )((ilocblk - nblocks) * mb));
                __CrestApply2(8895, 0, (long long )(I + (ilocblk - nblocks) * mb));
                __CrestStore(8902, (unsigned long )II);
# 259 "../HPL_infog2l.c"
                *II = I + (ilocblk - nblocks) * mb;
              } else {
                __CrestBranch(8894, 3475, 0);
                __CrestLoad(8909, (unsigned long )(& imb), (long long )imb);
                __CrestLoad(8908, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(8907, (unsigned long )0, (long long )1);
                __CrestApply2(8906, 1, (long long )(ilocblk - 1));
                __CrestLoad(8905, (unsigned long )(& mb), (long long )mb);
                __CrestApply2(8904, 2, (long long )((ilocblk - 1) * mb));
                __CrestApply2(8903, 0, (long long )(imb + (ilocblk - 1) * mb));
                __CrestStore(8910, (unsigned long )II);
# 259 "../HPL_infog2l.c"
                *II = imb + (ilocblk - 1) * mb;
              }
              }
            } else {
              __CrestBranch(8889, 3476, 0);
              __CrestLoad(8915, (unsigned long )(& imb), (long long )imb);
              __CrestLoad(8914, (unsigned long )(& ilocblk), (long long )ilocblk);
              __CrestLoad(8913, (unsigned long )(& mb), (long long )mb);
              __CrestApply2(8912, 2, (long long )(ilocblk * mb));
              __CrestApply2(8911, 0, (long long )(imb + ilocblk * mb));
              __CrestStore(8916, (unsigned long )II);
# 265 "../HPL_infog2l.c"
              *II = imb + ilocblk * mb;
            }
            }
          }
          }
        } else {
          __CrestBranch(8851, 3477, 0);
          __CrestLoad(8919, (unsigned long )(& I), (long long )I);
          __CrestLoad(8918, (unsigned long )(& imb), (long long )imb);
          __CrestApply2(8917, 1, (long long )(I - imb));
          __CrestStore(8920, (unsigned long )(& I));
# 275 "../HPL_infog2l.c"
          I -= imb;
          __CrestLoad(8925, (unsigned long )(& I), (long long )I);
          __CrestLoad(8924, (unsigned long )(& mb), (long long )mb);
          __CrestApply2(8923, 3, (long long )(I / mb));
          __CrestLoad(8922, (unsigned long )0, (long long )1);
          __CrestApply2(8921, 0, (long long )(I / mb + 1));
          __CrestStore(8926, (unsigned long )(& nblocks));
# 275 "../HPL_infog2l.c"
          nblocks = I / mb + 1;
          __CrestLoad(8929, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8928, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestApply2(8927, 0, (long long )(*PROW + nblocks));
          __CrestStore(8930, (unsigned long )PROW);
# 276 "../HPL_infog2l.c"
          *PROW += nblocks;
          __CrestLoad(8937, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8936, (unsigned long )PROW, (long long )*PROW);
          __CrestLoad(8935, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8934, 3, (long long )(*PROW / (int )NPROW));
          __CrestLoad(8933, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8932, 2, (long long )((*PROW / (int )NPROW) * (int )NPROW));
          __CrestApply2(8931, 1, (long long )(*PROW - (*PROW / (int )NPROW) * (int )NPROW));
          __CrestStore(8938, (unsigned long )PROW);
# 277 "../HPL_infog2l.c"
          *PROW -= (*PROW / (int )NPROW) * (int )NPROW;
          __CrestLoad(8941, (unsigned long )(& MYROW), (long long )MYROW);
          __CrestLoad(8940, (unsigned long )(& rsrc), (long long )rsrc);
          __CrestApply2(8939, 1, (long long )(MYROW - (int const )rsrc));
          __CrestStore(8942, (unsigned long )(& mydist));
# 283 "../HPL_infog2l.c"
          mydist = (int )(MYROW - (int const )rsrc);
          {
          __CrestLoad(8945, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(8944, (unsigned long )0, (long long )0);
          __CrestApply2(8943, 16, (long long )(mydist < 0));
# 283 "../HPL_infog2l.c"
          if (mydist < 0) {
            __CrestBranch(8946, 3479, 1);
            __CrestLoad(8950, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(8949, (unsigned long )(& NPROW), (long long )NPROW);
            __CrestApply2(8948, 0, (long long )(mydist + (int )NPROW));
            __CrestStore(8951, (unsigned long )(& mydist));
# 283 "../HPL_infog2l.c"
            mydist += (int )NPROW;
          } else {
            __CrestBranch(8947, 3480, 0);

          }
          }
          {
          __CrestLoad(8954, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestLoad(8953, (unsigned long )(& NPROW), (long long )NPROW);
          __CrestApply2(8952, 16, (long long )(nblocks < (int )NPROW));
# 292 "../HPL_infog2l.c"
          if (nblocks < (int )NPROW) {
            __CrestBranch(8955, 3482, 1);
            __CrestLoad(8959, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(8958, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestApply2(8957, 1, (long long )(mydist - nblocks));
            __CrestStore(8960, (unsigned long )(& mydist));
# 294 "../HPL_infog2l.c"
            mydist -= nblocks;
            {
            __CrestLoad(8963, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(8962, (unsigned long )0, (long long )0);
            __CrestApply2(8961, 16, (long long )(mydist < 0));
# 295 "../HPL_infog2l.c"
            if (mydist < 0) {
              __CrestBranch(8964, 3484, 1);
              __CrestLoad(8966, (unsigned long )(& mb), (long long )mb);
              __CrestStore(8967, (unsigned long )II);
# 295 "../HPL_infog2l.c"
              *II = mb;
            } else {
              __CrestBranch(8965, 3485, 0);
              {
              __CrestLoad(8970, (unsigned long )(& MYROW), (long long )MYROW);
              __CrestLoad(8969, (unsigned long )PROW, (long long )*PROW);
              __CrestApply2(8968, 12, (long long )(MYROW == (int const )*PROW));
# 295 "../HPL_infog2l.c"
              if (MYROW == (int const )*PROW) {
                __CrestBranch(8971, 3486, 1);
                __CrestLoad(8979, (unsigned long )(& I), (long long )I);
                __CrestLoad(8978, (unsigned long )0, (long long )1);
                __CrestLoad(8977, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(8976, 1, (long long )(1 - nblocks));
                __CrestLoad(8975, (unsigned long )(& mb), (long long )mb);
                __CrestApply2(8974, 2, (long long )((1 - nblocks) * mb));
                __CrestApply2(8973, 0, (long long )(I + (1 - nblocks) * mb));
                __CrestStore(8980, (unsigned long )(& tmp));
# 295 "../HPL_infog2l.c"
                tmp = I + (1 - nblocks) * mb;
              } else {
                __CrestBranch(8972, 3487, 0);
                __CrestLoad(8981, (unsigned long )0, (long long )0);
                __CrestStore(8982, (unsigned long )(& tmp));
# 295 "../HPL_infog2l.c"
                tmp = 0;
              }
              }
              __CrestLoad(8983, (unsigned long )(& tmp), (long long )tmp);
              __CrestStore(8984, (unsigned long )II);
# 295 "../HPL_infog2l.c"
              *II = tmp;
            }
            }
          } else {
            __CrestBranch(8956, 3489, 0);
            __CrestLoad(8987, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(8986, (unsigned long )(& NPROW), (long long )NPROW);
            __CrestApply2(8985, 3, (long long )(nblocks / (int )NPROW));
            __CrestStore(8988, (unsigned long )(& ilocblk));
# 301 "../HPL_infog2l.c"
            ilocblk = nblocks / (int )NPROW;
            __CrestLoad(8995, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(8994, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(8993, (unsigned long )(& ilocblk), (long long )ilocblk);
            __CrestLoad(8992, (unsigned long )(& NPROW), (long long )NPROW);
            __CrestApply2(8991, 2, (long long )(ilocblk * (int )NPROW));
            __CrestApply2(8990, 1, (long long )(nblocks - ilocblk * (int )NPROW));
            __CrestApply2(8989, 1, (long long )(mydist - (nblocks - ilocblk * (int )NPROW)));
            __CrestStore(8996, (unsigned long )(& mydist));
# 302 "../HPL_infog2l.c"
            mydist -= nblocks - ilocblk * (int )NPROW;
            {
            __CrestLoad(8999, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(8998, (unsigned long )0, (long long )0);
            __CrestApply2(8997, 16, (long long )(mydist < 0));
# 303 "../HPL_infog2l.c"
            if (mydist < 0) {
              __CrestBranch(9000, 3491, 1);
              __CrestLoad(9006, (unsigned long )(& ilocblk), (long long )ilocblk);
              __CrestLoad(9005, (unsigned long )0, (long long )1);
              __CrestApply2(9004, 0, (long long )(ilocblk + 1));
              __CrestLoad(9003, (unsigned long )(& mb), (long long )mb);
              __CrestApply2(9002, 2, (long long )((ilocblk + 1) * mb));
              __CrestStore(9007, (unsigned long )II);
# 303 "../HPL_infog2l.c"
              *II = (ilocblk + 1) * mb;
            } else {
              __CrestBranch(9001, 3492, 0);
              {
              __CrestLoad(9010, (unsigned long )(& MYROW), (long long )MYROW);
              __CrestLoad(9009, (unsigned long )PROW, (long long )*PROW);
              __CrestApply2(9008, 12, (long long )(MYROW == (int const )*PROW));
# 303 "../HPL_infog2l.c"
              if (MYROW == (int const )*PROW) {
                __CrestBranch(9011, 3493, 1);
                __CrestLoad(9021, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9020, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(9019, 1, (long long )(ilocblk - nblocks));
                __CrestLoad(9018, (unsigned long )0, (long long )1);
                __CrestApply2(9017, 0, (long long )((ilocblk - nblocks) + 1));
                __CrestLoad(9016, (unsigned long )(& mb), (long long )mb);
                __CrestApply2(9015, 2, (long long )(((ilocblk - nblocks) + 1) * mb));
                __CrestLoad(9014, (unsigned long )(& I), (long long )I);
                __CrestApply2(9013, 0, (long long )(((ilocblk - nblocks) + 1) * mb + I));
                __CrestStore(9022, (unsigned long )(& tmp___0));
# 303 "../HPL_infog2l.c"
                tmp___0 = ((ilocblk - nblocks) + 1) * mb + I;
              } else {
                __CrestBranch(9012, 3494, 0);
                __CrestLoad(9025, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9024, (unsigned long )(& mb), (long long )mb);
                __CrestApply2(9023, 2, (long long )(ilocblk * mb));
                __CrestStore(9026, (unsigned long )(& tmp___0));
# 303 "../HPL_infog2l.c"
                tmp___0 = ilocblk * mb;
              }
              }
              __CrestLoad(9027, (unsigned long )(& tmp___0), (long long )tmp___0);
              __CrestStore(9028, (unsigned long )II);
# 303 "../HPL_infog2l.c"
              *II = tmp___0;
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  }
  }
  __CrestLoad(9029, (unsigned long )(& INB), (long long )INB);
  __CrestStore(9030, (unsigned long )(& inb));
# 313 "../HPL_infog2l.c"
  inb = (int )INB;
  __CrestLoad(9031, (unsigned long )(& CSRC), (long long )CSRC);
  __CrestStore(9032, (unsigned long )PCOL);
# 314 "../HPL_infog2l.c"
  *PCOL = (int )CSRC;
  {
  __CrestLoad(9035, (unsigned long )PCOL, (long long )*PCOL);
  __CrestLoad(9034, (unsigned long )0, (long long )-1);
  __CrestApply2(9033, 12, (long long )(*PCOL == -1));
# 316 "../HPL_infog2l.c"
  if (*PCOL == -1) {
    __CrestBranch(9036, 3498, 1);
    __CrestLoad(9038, (unsigned long )(& J), (long long )J);
    __CrestStore(9039, (unsigned long )JJ);
# 318 "../HPL_infog2l.c"
    *JJ = J;
  } else {
    __CrestBranch(9037, 3499, 0);
    {
    __CrestLoad(9042, (unsigned long )(& NPCOL), (long long )NPCOL);
    __CrestLoad(9041, (unsigned long )0, (long long )1);
    __CrestApply2(9040, 12, (long long )(NPCOL == 1));
# 316 "../HPL_infog2l.c"
    if (NPCOL == 1) {
      __CrestBranch(9043, 3500, 1);
      __CrestLoad(9045, (unsigned long )(& J), (long long )J);
      __CrestStore(9046, (unsigned long )JJ);
# 318 "../HPL_infog2l.c"
      *JJ = J;
    } else {
      __CrestBranch(9044, 3501, 0);
      {
      __CrestLoad(9049, (unsigned long )(& J), (long long )J);
      __CrestLoad(9048, (unsigned long )(& inb), (long long )inb);
      __CrestApply2(9047, 16, (long long )(J < inb));
# 320 "../HPL_infog2l.c"
      if (J < inb) {
        __CrestBranch(9050, 3502, 1);
        {
        __CrestLoad(9054, (unsigned long )(& MYCOL), (long long )MYCOL);
        __CrestLoad(9053, (unsigned long )PCOL, (long long )*PCOL);
        __CrestApply2(9052, 12, (long long )(MYCOL == (int const )*PCOL));
# 322 "../HPL_infog2l.c"
        if (MYCOL == (int const )*PCOL) {
          __CrestBranch(9055, 3503, 1);
          __CrestLoad(9057, (unsigned long )(& J), (long long )J);
          __CrestStore(9058, (unsigned long )JJ);
# 322 "../HPL_infog2l.c"
          *JJ = J;
        } else {
          __CrestBranch(9056, 3504, 0);
          __CrestLoad(9059, (unsigned long )0, (long long )0);
          __CrestStore(9060, (unsigned long )JJ);
# 322 "../HPL_infog2l.c"
          *JJ = 0;
        }
        }
      } else {
        __CrestBranch(9051, 3505, 0);
        __CrestLoad(9061, (unsigned long )(& NB), (long long )NB);
        __CrestStore(9062, (unsigned long )(& nb));
# 326 "../HPL_infog2l.c"
        nb = (int )NB;
        __CrestLoad(9063, (unsigned long )PCOL, (long long )*PCOL);
        __CrestStore(9064, (unsigned long )(& csrc));
# 327 "../HPL_infog2l.c"
        csrc = *PCOL;
        {
        __CrestLoad(9067, (unsigned long )(& MYCOL), (long long )MYCOL);
        __CrestLoad(9066, (unsigned long )(& csrc), (long long )csrc);
        __CrestApply2(9065, 12, (long long )(MYCOL == (int const )csrc));
# 329 "../HPL_infog2l.c"
        if (MYCOL == (int const )csrc) {
          __CrestBranch(9068, 3507, 1);
          __CrestLoad(9076, (unsigned long )(& J), (long long )J);
          __CrestLoad(9075, (unsigned long )(& inb), (long long )inb);
          __CrestApply2(9074, 1, (long long )(J - inb));
          __CrestLoad(9073, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(9072, 3, (long long )((J - inb) / nb));
          __CrestLoad(9071, (unsigned long )0, (long long )1);
          __CrestApply2(9070, 0, (long long )((J - inb) / nb + 1));
          __CrestStore(9077, (unsigned long )(& nblocks));
# 331 "../HPL_infog2l.c"
          nblocks = (J - inb) / nb + 1;
          __CrestLoad(9080, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9079, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestApply2(9078, 0, (long long )(*PCOL + nblocks));
          __CrestStore(9081, (unsigned long )PCOL);
# 332 "../HPL_infog2l.c"
          *PCOL += nblocks;
          __CrestLoad(9088, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9087, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9086, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9085, 3, (long long )(*PCOL / (int )NPCOL));
          __CrestLoad(9084, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9083, 2, (long long )((*PCOL / (int )NPCOL) * (int )NPCOL));
          __CrestApply2(9082, 1, (long long )(*PCOL - (*PCOL / (int )NPCOL) * (int )NPCOL));
          __CrestStore(9089, (unsigned long )PCOL);
# 333 "../HPL_infog2l.c"
          *PCOL -= (*PCOL / (int )NPCOL) * (int )NPCOL;
          {
          __CrestLoad(9092, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestLoad(9091, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9090, 16, (long long )(nblocks < (int )NPCOL));
# 335 "../HPL_infog2l.c"
          if (nblocks < (int )NPCOL) {
            __CrestBranch(9093, 3509, 1);
            __CrestLoad(9095, (unsigned long )(& inb), (long long )inb);
            __CrestStore(9096, (unsigned long )JJ);
# 337 "../HPL_infog2l.c"
            *JJ = inb;
          } else {
            __CrestBranch(9094, 3510, 0);
            __CrestLoad(9099, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(9098, (unsigned long )(& NPCOL), (long long )NPCOL);
            __CrestApply2(9097, 3, (long long )(nblocks / (int )NPCOL));
            __CrestStore(9100, (unsigned long )(& ilocblk));
# 341 "../HPL_infog2l.c"
            ilocblk = nblocks / (int )NPCOL;
            {
            __CrestLoad(9105, (unsigned long )(& ilocblk), (long long )ilocblk);
            __CrestLoad(9104, (unsigned long )(& NPCOL), (long long )NPCOL);
            __CrestApply2(9103, 2, (long long )(ilocblk * (int )NPCOL));
            __CrestLoad(9102, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestApply2(9101, 17, (long long )(ilocblk * (int )NPCOL >= nblocks));
# 342 "../HPL_infog2l.c"
            if (ilocblk * (int )NPCOL >= nblocks) {
              __CrestBranch(9106, 3512, 1);
              {
              __CrestLoad(9110, (unsigned long )(& MYCOL), (long long )MYCOL);
              __CrestLoad(9109, (unsigned long )PCOL, (long long )*PCOL);
              __CrestApply2(9108, 12, (long long )(MYCOL == (int const )*PCOL));
# 344 "../HPL_infog2l.c"
              if (MYCOL == (int const )*PCOL) {
                __CrestBranch(9111, 3513, 1);
                __CrestLoad(9119, (unsigned long )(& J), (long long )J);
                __CrestLoad(9118, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9117, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(9116, 1, (long long )(ilocblk - nblocks));
                __CrestLoad(9115, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(9114, 2, (long long )((ilocblk - nblocks) * nb));
                __CrestApply2(9113, 0, (long long )(J + (ilocblk - nblocks) * nb));
                __CrestStore(9120, (unsigned long )JJ);
# 344 "../HPL_infog2l.c"
                *JJ = J + (ilocblk - nblocks) * nb;
              } else {
                __CrestBranch(9112, 3514, 0);
                __CrestLoad(9127, (unsigned long )(& inb), (long long )inb);
                __CrestLoad(9126, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9125, (unsigned long )0, (long long )1);
                __CrestApply2(9124, 1, (long long )(ilocblk - 1));
                __CrestLoad(9123, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(9122, 2, (long long )((ilocblk - 1) * nb));
                __CrestApply2(9121, 0, (long long )(inb + (ilocblk - 1) * nb));
                __CrestStore(9128, (unsigned long )JJ);
# 344 "../HPL_infog2l.c"
                *JJ = inb + (ilocblk - 1) * nb;
              }
              }
            } else {
              __CrestBranch(9107, 3515, 0);
              __CrestLoad(9133, (unsigned long )(& inb), (long long )inb);
              __CrestLoad(9132, (unsigned long )(& ilocblk), (long long )ilocblk);
              __CrestLoad(9131, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(9130, 2, (long long )(ilocblk * nb));
              __CrestApply2(9129, 0, (long long )(inb + ilocblk * nb));
              __CrestStore(9134, (unsigned long )JJ);
# 350 "../HPL_infog2l.c"
              *JJ = inb + ilocblk * nb;
            }
            }
          }
          }
        } else {
          __CrestBranch(9069, 3516, 0);
          __CrestLoad(9137, (unsigned long )(& J), (long long )J);
          __CrestLoad(9136, (unsigned long )(& inb), (long long )inb);
          __CrestApply2(9135, 1, (long long )(J - inb));
          __CrestStore(9138, (unsigned long )(& J));
# 356 "../HPL_infog2l.c"
          J -= inb;
          __CrestLoad(9143, (unsigned long )(& J), (long long )J);
          __CrestLoad(9142, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(9141, 3, (long long )(J / nb));
          __CrestLoad(9140, (unsigned long )0, (long long )1);
          __CrestApply2(9139, 0, (long long )(J / nb + 1));
          __CrestStore(9144, (unsigned long )(& nblocks));
# 356 "../HPL_infog2l.c"
          nblocks = J / nb + 1;
          __CrestLoad(9147, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9146, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestApply2(9145, 0, (long long )(*PCOL + nblocks));
          __CrestStore(9148, (unsigned long )PCOL);
# 357 "../HPL_infog2l.c"
          *PCOL += nblocks;
          __CrestLoad(9155, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9154, (unsigned long )PCOL, (long long )*PCOL);
          __CrestLoad(9153, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9152, 3, (long long )(*PCOL / (int )NPCOL));
          __CrestLoad(9151, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9150, 2, (long long )((*PCOL / (int )NPCOL) * (int )NPCOL));
          __CrestApply2(9149, 1, (long long )(*PCOL - (*PCOL / (int )NPCOL) * (int )NPCOL));
          __CrestStore(9156, (unsigned long )PCOL);
# 358 "../HPL_infog2l.c"
          *PCOL -= (*PCOL / (int )NPCOL) * (int )NPCOL;
          __CrestLoad(9159, (unsigned long )(& MYCOL), (long long )MYCOL);
          __CrestLoad(9158, (unsigned long )(& csrc), (long long )csrc);
          __CrestApply2(9157, 1, (long long )(MYCOL - (int const )csrc));
          __CrestStore(9160, (unsigned long )(& mydist));
# 360 "../HPL_infog2l.c"
          mydist = (int )(MYCOL - (int const )csrc);
          {
          __CrestLoad(9163, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(9162, (unsigned long )0, (long long )0);
          __CrestApply2(9161, 16, (long long )(mydist < 0));
# 360 "../HPL_infog2l.c"
          if (mydist < 0) {
            __CrestBranch(9164, 3518, 1);
            __CrestLoad(9168, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(9167, (unsigned long )(& NPCOL), (long long )NPCOL);
            __CrestApply2(9166, 0, (long long )(mydist + (int )NPCOL));
            __CrestStore(9169, (unsigned long )(& mydist));
# 360 "../HPL_infog2l.c"
            mydist += (int )NPCOL;
          } else {
            __CrestBranch(9165, 3519, 0);

          }
          }
          {
          __CrestLoad(9172, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestLoad(9171, (unsigned long )(& NPCOL), (long long )NPCOL);
          __CrestApply2(9170, 16, (long long )(nblocks < (int )NPCOL));
# 362 "../HPL_infog2l.c"
          if (nblocks < (int )NPCOL) {
            __CrestBranch(9173, 3521, 1);
            __CrestLoad(9177, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(9176, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestApply2(9175, 1, (long long )(mydist - nblocks));
            __CrestStore(9178, (unsigned long )(& mydist));
# 364 "../HPL_infog2l.c"
            mydist -= nblocks;
            {
            __CrestLoad(9181, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(9180, (unsigned long )0, (long long )0);
            __CrestApply2(9179, 16, (long long )(mydist < 0));
# 365 "../HPL_infog2l.c"
            if (mydist < 0) {
              __CrestBranch(9182, 3523, 1);
              __CrestLoad(9184, (unsigned long )(& nb), (long long )nb);
              __CrestStore(9185, (unsigned long )JJ);
# 365 "../HPL_infog2l.c"
              *JJ = nb;
            } else {
              __CrestBranch(9183, 3524, 0);
              {
              __CrestLoad(9188, (unsigned long )(& MYCOL), (long long )MYCOL);
              __CrestLoad(9187, (unsigned long )PCOL, (long long )*PCOL);
              __CrestApply2(9186, 12, (long long )(MYCOL == (int const )*PCOL));
# 365 "../HPL_infog2l.c"
              if (MYCOL == (int const )*PCOL) {
                __CrestBranch(9189, 3525, 1);
                __CrestLoad(9197, (unsigned long )(& J), (long long )J);
                __CrestLoad(9196, (unsigned long )0, (long long )1);
                __CrestLoad(9195, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(9194, 1, (long long )(1 - nblocks));
                __CrestLoad(9193, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(9192, 2, (long long )((1 - nblocks) * nb));
                __CrestApply2(9191, 0, (long long )(J + (1 - nblocks) * nb));
                __CrestStore(9198, (unsigned long )(& tmp___1));
# 365 "../HPL_infog2l.c"
                tmp___1 = J + (1 - nblocks) * nb;
              } else {
                __CrestBranch(9190, 3526, 0);
                __CrestLoad(9199, (unsigned long )0, (long long )0);
                __CrestStore(9200, (unsigned long )(& tmp___1));
# 365 "../HPL_infog2l.c"
                tmp___1 = 0;
              }
              }
              __CrestLoad(9201, (unsigned long )(& tmp___1), (long long )tmp___1);
              __CrestStore(9202, (unsigned long )JJ);
# 365 "../HPL_infog2l.c"
              *JJ = tmp___1;
            }
            }
          } else {
            __CrestBranch(9174, 3528, 0);
            __CrestLoad(9205, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(9204, (unsigned long )(& NPCOL), (long long )NPCOL);
            __CrestApply2(9203, 3, (long long )(nblocks / (int )NPCOL));
            __CrestStore(9206, (unsigned long )(& ilocblk));
# 370 "../HPL_infog2l.c"
            ilocblk = nblocks / (int )NPCOL;
            __CrestLoad(9213, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(9212, (unsigned long )(& nblocks), (long long )nblocks);
            __CrestLoad(9211, (unsigned long )(& ilocblk), (long long )ilocblk);
            __CrestLoad(9210, (unsigned long )(& NPCOL), (long long )NPCOL);
            __CrestApply2(9209, 2, (long long )(ilocblk * (int )NPCOL));
            __CrestApply2(9208, 1, (long long )(nblocks - ilocblk * (int )NPCOL));
            __CrestApply2(9207, 1, (long long )(mydist - (nblocks - ilocblk * (int )NPCOL)));
            __CrestStore(9214, (unsigned long )(& mydist));
# 371 "../HPL_infog2l.c"
            mydist -= nblocks - ilocblk * (int )NPCOL;
            {
            __CrestLoad(9217, (unsigned long )(& mydist), (long long )mydist);
            __CrestLoad(9216, (unsigned long )0, (long long )0);
            __CrestApply2(9215, 16, (long long )(mydist < 0));
# 372 "../HPL_infog2l.c"
            if (mydist < 0) {
              __CrestBranch(9218, 3530, 1);
              __CrestLoad(9224, (unsigned long )(& ilocblk), (long long )ilocblk);
              __CrestLoad(9223, (unsigned long )0, (long long )1);
              __CrestApply2(9222, 0, (long long )(ilocblk + 1));
              __CrestLoad(9221, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(9220, 2, (long long )((ilocblk + 1) * nb));
              __CrestStore(9225, (unsigned long )JJ);
# 372 "../HPL_infog2l.c"
              *JJ = (ilocblk + 1) * nb;
            } else {
              __CrestBranch(9219, 3531, 0);
              {
              __CrestLoad(9228, (unsigned long )(& MYCOL), (long long )MYCOL);
              __CrestLoad(9227, (unsigned long )PCOL, (long long )*PCOL);
              __CrestApply2(9226, 12, (long long )(MYCOL == (int const )*PCOL));
# 372 "../HPL_infog2l.c"
              if (MYCOL == (int const )*PCOL) {
                __CrestBranch(9229, 3532, 1);
                __CrestLoad(9239, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9238, (unsigned long )(& nblocks), (long long )nblocks);
                __CrestApply2(9237, 1, (long long )(ilocblk - nblocks));
                __CrestLoad(9236, (unsigned long )0, (long long )1);
                __CrestApply2(9235, 0, (long long )((ilocblk - nblocks) + 1));
                __CrestLoad(9234, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(9233, 2, (long long )(((ilocblk - nblocks) + 1) * nb));
                __CrestLoad(9232, (unsigned long )(& J), (long long )J);
                __CrestApply2(9231, 0, (long long )(((ilocblk - nblocks) + 1) * nb + J));
                __CrestStore(9240, (unsigned long )(& tmp___2));
# 372 "../HPL_infog2l.c"
                tmp___2 = ((ilocblk - nblocks) + 1) * nb + J;
              } else {
                __CrestBranch(9230, 3533, 0);
                __CrestLoad(9243, (unsigned long )(& ilocblk), (long long )ilocblk);
                __CrestLoad(9242, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(9241, 2, (long long )(ilocblk * nb));
                __CrestStore(9244, (unsigned long )(& tmp___2));
# 372 "../HPL_infog2l.c"
                tmp___2 = ilocblk * nb;
              }
              }
              __CrestLoad(9245, (unsigned long )(& tmp___2), (long long )tmp___2);
              __CrestStore(9246, (unsigned long )JJ);
# 372 "../HPL_infog2l.c"
              *JJ = tmp___2;
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  }
  }

  {
  __CrestReturn(9247);
# 53 "../HPL_infog2l.c"
  return;
  }
}
}
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_numroc.c"
int HPL_numroc(int const N , int const INB , int const NB , int const PROC ,
               int const SRCPROC , int const NPROCS )
{
  int tmp ;

  {
  __CrestCall(9254, 57);
  __CrestStore(9253, (unsigned long )(& NPROCS));
  __CrestStore(9252, (unsigned long )(& SRCPROC));
  __CrestStore(9251, (unsigned long )(& PROC));
  __CrestStore(9250, (unsigned long )(& NB));
  __CrestStore(9249, (unsigned long )(& INB));
  __CrestStore(9248, (unsigned long )(& N));
  __CrestLoad(9255, (unsigned long )(& N), (long long )N);
  __CrestLoad(9256, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(9257, (unsigned long )(& INB), (long long )INB);
  __CrestLoad(9258, (unsigned long )(& NB), (long long )NB);
  __CrestLoad(9259, (unsigned long )(& PROC), (long long )PROC);
  __CrestLoad(9260, (unsigned long )(& SRCPROC), (long long )SRCPROC);
  __CrestLoad(9261, (unsigned long )(& NPROCS), (long long )NPROCS);
# 116 "../HPL_numroc.c"
  tmp = HPL_numrocI(N, (int const )0, INB, NB, PROC, SRCPROC, NPROCS);
  __CrestHandleReturn(9263, (long long )tmp);
  __CrestStore(9262, (unsigned long )(& tmp));
  {
  __CrestLoad(9264, (unsigned long )(& tmp), (long long )tmp);
  __CrestReturn(9265);
# 116 "../HPL_numroc.c"
  return (tmp);
  }
}
}
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_numrocI.c"
int HPL_numrocI(int const N , int const I , int const INB , int const NB ,
                int const PROC , int const SRCPROC , int const NPROCS )
{
  int ilocblk ;
  int inb ;
  int mydist ;
  int nblocks ;
  int srcproc ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int __retres18 ;

  {
  __CrestCall(9273, 58);
  __CrestStore(9272, (unsigned long )(& NPROCS));
  __CrestStore(9271, (unsigned long )(& SRCPROC));
  __CrestStore(9270, (unsigned long )(& PROC));
  __CrestStore(9269, (unsigned long )(& NB));
  __CrestStore(9268, (unsigned long )(& INB));
  __CrestStore(9267, (unsigned long )(& I));
  __CrestStore(9266, (unsigned long )(& N));
  {
  __CrestLoad(9276, (unsigned long )(& SRCPROC), (long long )SRCPROC);
  __CrestLoad(9275, (unsigned long )0, (long long )-1);
  __CrestApply2(9274, 12, (long long )(SRCPROC == -1));
# 126 "../HPL_numrocI.c"
  if (SRCPROC == -1) {
    __CrestBranch(9277, 3540, 1);
    __CrestLoad(9279, (unsigned long )(& N), (long long )N);
    __CrestStore(9280, (unsigned long )(& __retres18));
# 131 "../HPL_numrocI.c"
    __retres18 = (int )N;
# 131 "../HPL_numrocI.c"
    goto return_label;
  } else {
    __CrestBranch(9278, 3542, 0);
    {
    __CrestLoad(9283, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestLoad(9282, (unsigned long )0, (long long )1);
    __CrestApply2(9281, 12, (long long )(NPROCS == 1));
# 126 "../HPL_numrocI.c"
    if (NPROCS == 1) {
      __CrestBranch(9284, 3543, 1);
      __CrestLoad(9286, (unsigned long )(& N), (long long )N);
      __CrestStore(9287, (unsigned long )(& __retres18));
# 131 "../HPL_numrocI.c"
      __retres18 = (int )N;
# 131 "../HPL_numrocI.c"
      goto return_label;
    } else {
      __CrestBranch(9285, 3545, 0);

    }
    }
  }
  }
  __CrestLoad(9288, (unsigned long )(& SRCPROC), (long long )SRCPROC);
  __CrestStore(9289, (unsigned long )(& srcproc));
# 135 "../HPL_numrocI.c"
  srcproc = (int )SRCPROC;
  __CrestLoad(9292, (unsigned long )(& INB), (long long )INB);
  __CrestLoad(9291, (unsigned long )(& I), (long long )I);
  __CrestApply2(9290, 1, (long long )(INB - I));
  __CrestStore(9293, (unsigned long )(& inb));
# 137 "../HPL_numrocI.c"
  inb = (int )(INB - I);
  {
  __CrestLoad(9296, (unsigned long )(& inb), (long long )inb);
  __CrestLoad(9295, (unsigned long )0, (long long )0);
  __CrestApply2(9294, 15, (long long )(inb <= 0));
# 137 "../HPL_numrocI.c"
  if (inb <= 0) {
    __CrestBranch(9297, 3548, 1);
    __CrestLoad(9304, (unsigned long )(& inb), (long long )inb);
    __CrestApply1(9303, 19, (long long )(- inb));
    __CrestLoad(9302, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(9301, 3, (long long )(- inb / (int )NB));
    __CrestLoad(9300, (unsigned long )0, (long long )1);
    __CrestApply2(9299, 0, (long long )(- inb / (int )NB + 1));
    __CrestStore(9305, (unsigned long )(& nblocks));
# 143 "../HPL_numrocI.c"
    nblocks = - inb / (int )NB + 1;
    __CrestLoad(9308, (unsigned long )(& srcproc), (long long )srcproc);
    __CrestLoad(9307, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestApply2(9306, 0, (long long )(srcproc + nblocks));
    __CrestStore(9309, (unsigned long )(& srcproc));
# 143 "../HPL_numrocI.c"
    srcproc += nblocks;
    __CrestLoad(9316, (unsigned long )(& srcproc), (long long )srcproc);
    __CrestLoad(9315, (unsigned long )(& srcproc), (long long )srcproc);
    __CrestLoad(9314, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9313, 3, (long long )(srcproc / (int )NPROCS));
    __CrestLoad(9312, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9311, 2, (long long )((srcproc / (int )NPROCS) * (int )NPROCS));
    __CrestApply2(9310, 1, (long long )(srcproc - (srcproc / (int )NPROCS) * (int )NPROCS));
    __CrestStore(9317, (unsigned long )(& srcproc));
# 144 "../HPL_numrocI.c"
    srcproc -= (srcproc / (int )NPROCS) * (int )NPROCS;
    __CrestLoad(9322, (unsigned long )(& inb), (long long )inb);
    __CrestLoad(9321, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9320, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(9319, 2, (long long )(nblocks * (int )NB));
    __CrestApply2(9318, 0, (long long )(inb + nblocks * (int )NB));
    __CrestStore(9323, (unsigned long )(& inb));
# 145 "../HPL_numrocI.c"
    inb += nblocks * (int )NB;
  } else {
    __CrestBranch(9298, 3549, 0);

  }
  }
  {
  __CrestLoad(9326, (unsigned long )(& PROC), (long long )PROC);
  __CrestLoad(9325, (unsigned long )(& srcproc), (long long )srcproc);
  __CrestApply2(9324, 12, (long long )(PROC == (int const )srcproc));
# 162 "../HPL_numrocI.c"
  if (PROC == (int const )srcproc) {
    __CrestBranch(9327, 3551, 1);
    {
    __CrestLoad(9331, (unsigned long )(& N), (long long )N);
    __CrestLoad(9330, (unsigned long )(& inb), (long long )inb);
    __CrestApply2(9329, 15, (long long )(N <= (int const )inb));
# 168 "../HPL_numrocI.c"
    if (N <= (int const )inb) {
      __CrestBranch(9332, 3552, 1);
      __CrestLoad(9334, (unsigned long )(& N), (long long )N);
      __CrestStore(9335, (unsigned long )(& __retres18));
# 168 "../HPL_numrocI.c"
      __retres18 = (int )N;
# 168 "../HPL_numrocI.c"
      goto return_label;
    } else {
      __CrestBranch(9333, 3554, 0);

    }
    }
    __CrestLoad(9342, (unsigned long )(& N), (long long )N);
    __CrestLoad(9341, (unsigned long )(& inb), (long long )inb);
    __CrestApply2(9340, 1, (long long )(N - (int const )inb));
    __CrestLoad(9339, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(9338, 3, (long long )((N - (int const )inb) / NB));
    __CrestLoad(9337, (unsigned long )0, (long long )1);
    __CrestApply2(9336, 0, (long long )((N - (int const )inb) / NB + 1));
    __CrestStore(9343, (unsigned long )(& nblocks));
# 173 "../HPL_numrocI.c"
    nblocks = (int )((N - (int const )inb) / NB + 1);
    {
    __CrestLoad(9346, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9345, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9344, 16, (long long )(nblocks < (int )NPROCS));
# 191 "../HPL_numrocI.c"
    if (nblocks < (int )NPROCS) {
      __CrestBranch(9347, 3557, 1);
      __CrestLoad(9349, (unsigned long )(& inb), (long long )inb);
      __CrestStore(9350, (unsigned long )(& __retres18));
# 191 "../HPL_numrocI.c"
      __retres18 = inb;
# 191 "../HPL_numrocI.c"
      goto return_label;
    } else {
      __CrestBranch(9348, 3559, 0);

    }
    }
    __CrestLoad(9353, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9352, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9351, 3, (long long )(nblocks / (int )NPROCS));
    __CrestStore(9354, (unsigned long )(& ilocblk));
# 193 "../HPL_numrocI.c"
    ilocblk = nblocks / (int )NPROCS;
    {
    __CrestLoad(9361, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9360, (unsigned long )(& ilocblk), (long long )ilocblk);
    __CrestLoad(9359, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9358, 2, (long long )(ilocblk * (int )NPROCS));
    __CrestApply2(9357, 1, (long long )(nblocks - ilocblk * (int )NPROCS));
    __CrestLoad(9356, (unsigned long )0, (long long )0);
    __CrestApply2(9355, 13, (long long )(nblocks - ilocblk * (int )NPROCS != 0));
# 194 "../HPL_numrocI.c"
    if (nblocks - ilocblk * (int )NPROCS != 0) {
      __CrestBranch(9362, 3562, 1);
      __CrestLoad(9368, (unsigned long )(& inb), (long long )inb);
      __CrestLoad(9367, (unsigned long )(& ilocblk), (long long )ilocblk);
      __CrestLoad(9366, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(9365, 2, (long long )(ilocblk * (int )NB));
      __CrestApply2(9364, 0, (long long )(inb + ilocblk * (int )NB));
      __CrestStore(9369, (unsigned long )(& tmp));
# 194 "../HPL_numrocI.c"
      tmp = inb + ilocblk * (int )NB;
    } else {
      __CrestBranch(9363, 3563, 0);
      __CrestLoad(9376, (unsigned long )(& N), (long long )N);
      __CrestLoad(9375, (unsigned long )(& ilocblk), (long long )ilocblk);
      __CrestLoad(9374, (unsigned long )(& nblocks), (long long )nblocks);
      __CrestApply2(9373, 1, (long long )(ilocblk - nblocks));
      __CrestLoad(9372, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(9371, 2, (long long )((ilocblk - nblocks) * (int )NB));
      __CrestApply2(9370, 0, (long long )(N + (int const )((ilocblk - nblocks) * (int )NB)));
      __CrestStore(9377, (unsigned long )(& tmp));
# 194 "../HPL_numrocI.c"
      tmp = (int )(N + (int const )((ilocblk - nblocks) * (int )NB));
    }
    }
    __CrestLoad(9378, (unsigned long )(& tmp), (long long )tmp);
    __CrestStore(9379, (unsigned long )(& __retres18));
# 194 "../HPL_numrocI.c"
    __retres18 = tmp;
# 194 "../HPL_numrocI.c"
    goto return_label;
  } else {
    __CrestBranch(9328, 3566, 0);
    {
    __CrestLoad(9382, (unsigned long )(& N), (long long )N);
    __CrestLoad(9381, (unsigned long )(& inb), (long long )inb);
    __CrestApply2(9380, 15, (long long )(N <= (int const )inb));
# 202 "../HPL_numrocI.c"
    if (N <= (int const )inb) {
      __CrestBranch(9383, 3567, 1);
      __CrestLoad(9385, (unsigned long )0, (long long )0);
      __CrestStore(9386, (unsigned long )(& __retres18));
# 202 "../HPL_numrocI.c"
      __retres18 = 0;
# 202 "../HPL_numrocI.c"
      goto return_label;
    } else {
      __CrestBranch(9384, 3569, 0);

    }
    }
    __CrestLoad(9393, (unsigned long )(& N), (long long )N);
    __CrestLoad(9392, (unsigned long )(& inb), (long long )inb);
    __CrestApply2(9391, 1, (long long )(N - (int const )inb));
    __CrestLoad(9390, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(9389, 3, (long long )((N - (int const )inb) / NB));
    __CrestLoad(9388, (unsigned long )0, (long long )1);
    __CrestApply2(9387, 0, (long long )((N - (int const )inb) / NB + 1));
    __CrestStore(9394, (unsigned long )(& nblocks));
# 207 "../HPL_numrocI.c"
    nblocks = (int )((N - (int const )inb) / NB + 1);
    __CrestLoad(9397, (unsigned long )(& PROC), (long long )PROC);
    __CrestLoad(9396, (unsigned long )(& srcproc), (long long )srcproc);
    __CrestApply2(9395, 1, (long long )(PROC - (int const )srcproc));
    __CrestStore(9398, (unsigned long )(& mydist));
# 213 "../HPL_numrocI.c"
    mydist = (int )(PROC - (int const )srcproc);
    {
    __CrestLoad(9401, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(9400, (unsigned long )0, (long long )0);
    __CrestApply2(9399, 16, (long long )(mydist < 0));
# 213 "../HPL_numrocI.c"
    if (mydist < 0) {
      __CrestBranch(9402, 3572, 1);
      __CrestLoad(9406, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(9405, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestApply2(9404, 0, (long long )(mydist + (int )NPROCS));
      __CrestStore(9407, (unsigned long )(& mydist));
# 213 "../HPL_numrocI.c"
      mydist += (int )NPROCS;
    } else {
      __CrestBranch(9403, 3573, 0);

    }
    }
    {
    __CrestLoad(9410, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9409, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9408, 16, (long long )(nblocks < (int )NPROCS));
# 230 "../HPL_numrocI.c"
    if (nblocks < (int )NPROCS) {
      __CrestBranch(9411, 3575, 1);
      {
      __CrestLoad(9415, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(9414, (unsigned long )(& nblocks), (long long )nblocks);
      __CrestApply2(9413, 16, (long long )(mydist < nblocks));
# 231 "../HPL_numrocI.c"
      if (mydist < nblocks) {
        __CrestBranch(9416, 3576, 1);
        __CrestLoad(9418, (unsigned long )(& NB), (long long )NB);
        __CrestStore(9419, (unsigned long )(& tmp___1));
# 231 "../HPL_numrocI.c"
        tmp___1 = (int )NB;
      } else {
        __CrestBranch(9417, 3577, 0);
        {
        __CrestLoad(9422, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(9421, (unsigned long )(& nblocks), (long long )nblocks);
        __CrestApply2(9420, 14, (long long )(mydist > nblocks));
# 231 "../HPL_numrocI.c"
        if (mydist > nblocks) {
          __CrestBranch(9423, 3578, 1);
          __CrestLoad(9425, (unsigned long )0, (long long )0);
          __CrestStore(9426, (unsigned long )(& tmp___0));
# 231 "../HPL_numrocI.c"
          tmp___0 = 0;
        } else {
          __CrestBranch(9424, 3579, 0);
          __CrestLoad(9435, (unsigned long )(& N), (long long )N);
          __CrestLoad(9434, (unsigned long )(& inb), (long long )inb);
          __CrestApply2(9433, 1, (long long )(N - (int const )inb));
          __CrestLoad(9432, (unsigned long )(& NB), (long long )NB);
          __CrestLoad(9431, (unsigned long )0, (long long )1);
          __CrestLoad(9430, (unsigned long )(& nblocks), (long long )nblocks);
          __CrestApply2(9429, 1, (long long )(1 - nblocks));
          __CrestApply2(9428, 2, (long long )(NB * (int const )(1 - nblocks)));
          __CrestApply2(9427, 0, (long long )((N - (int const )inb) + NB * (int const )(1 - nblocks)));
          __CrestStore(9436, (unsigned long )(& tmp___0));
# 231 "../HPL_numrocI.c"
          tmp___0 = (int )((N - (int const )inb) + NB * (int const )(1 - nblocks));
        }
        }
        __CrestLoad(9437, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestStore(9438, (unsigned long )(& tmp___1));
# 231 "../HPL_numrocI.c"
        tmp___1 = (int )((int const )tmp___0);
      }
      }
      __CrestLoad(9439, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(9440, (unsigned long )(& __retres18));
# 231 "../HPL_numrocI.c"
      __retres18 = tmp___1;
# 231 "../HPL_numrocI.c"
      goto return_label;
    } else {
      __CrestBranch(9412, 3583, 0);

    }
    }
    __CrestLoad(9443, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9442, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9441, 3, (long long )(nblocks / (int )NPROCS));
    __CrestStore(9444, (unsigned long )(& ilocblk));
# 234 "../HPL_numrocI.c"
    ilocblk = nblocks / (int )NPROCS;
    __CrestLoad(9451, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(9450, (unsigned long )(& nblocks), (long long )nblocks);
    __CrestLoad(9449, (unsigned long )(& ilocblk), (long long )ilocblk);
    __CrestLoad(9448, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(9447, 2, (long long )(ilocblk * (int )NPROCS));
    __CrestApply2(9446, 1, (long long )(nblocks - ilocblk * (int )NPROCS));
    __CrestApply2(9445, 1, (long long )(mydist - (nblocks - ilocblk * (int )NPROCS)));
    __CrestStore(9452, (unsigned long )(& mydist));
# 235 "../HPL_numrocI.c"
    mydist -= nblocks - ilocblk * (int )NPROCS;
    {
    __CrestLoad(9455, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(9454, (unsigned long )0, (long long )0);
    __CrestApply2(9453, 16, (long long )(mydist < 0));
# 236 "../HPL_numrocI.c"
    if (mydist < 0) {
      __CrestBranch(9456, 3586, 1);
      __CrestLoad(9462, (unsigned long )(& ilocblk), (long long )ilocblk);
      __CrestLoad(9461, (unsigned long )0, (long long )1);
      __CrestApply2(9460, 0, (long long )(ilocblk + 1));
      __CrestLoad(9459, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(9458, 2, (long long )((ilocblk + 1) * (int )NB));
      __CrestStore(9463, (unsigned long )(& tmp___3));
# 236 "../HPL_numrocI.c"
      tmp___3 = (ilocblk + 1) * (int )NB;
    } else {
      __CrestBranch(9457, 3587, 0);
      {
      __CrestLoad(9466, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(9465, (unsigned long )0, (long long )0);
      __CrestApply2(9464, 14, (long long )(mydist > 0));
# 236 "../HPL_numrocI.c"
      if (mydist > 0) {
        __CrestBranch(9467, 3588, 1);
        __CrestLoad(9471, (unsigned long )(& ilocblk), (long long )ilocblk);
        __CrestLoad(9470, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(9469, 2, (long long )(ilocblk * (int )NB));
        __CrestStore(9472, (unsigned long )(& tmp___2));
# 236 "../HPL_numrocI.c"
        tmp___2 = ilocblk * (int )NB;
      } else {
        __CrestBranch(9468, 3589, 0);
        __CrestLoad(9483, (unsigned long )(& N), (long long )N);
        __CrestLoad(9482, (unsigned long )(& inb), (long long )inb);
        __CrestApply2(9481, 1, (long long )(N - (int const )inb));
        __CrestLoad(9480, (unsigned long )(& NB), (long long )NB);
        __CrestLoad(9479, (unsigned long )(& ilocblk), (long long )ilocblk);
        __CrestLoad(9478, (unsigned long )(& nblocks), (long long )nblocks);
        __CrestApply2(9477, 1, (long long )(ilocblk - nblocks));
        __CrestLoad(9476, (unsigned long )0, (long long )1);
        __CrestApply2(9475, 0, (long long )((ilocblk - nblocks) + 1));
        __CrestApply2(9474, 2, (long long )(NB * (int const )((ilocblk - nblocks) + 1)));
        __CrestApply2(9473, 0, (long long )((N - (int const )inb) + NB * (int const )((ilocblk - nblocks) + 1)));
        __CrestStore(9484, (unsigned long )(& tmp___2));
# 236 "../HPL_numrocI.c"
        tmp___2 = (int )((N - (int const )inb) + NB * (int const )((ilocblk - nblocks) + 1));
      }
      }
      __CrestLoad(9485, (unsigned long )(& tmp___2), (long long )tmp___2);
      __CrestStore(9486, (unsigned long )(& tmp___3));
# 236 "../HPL_numrocI.c"
      tmp___3 = tmp___2;
    }
    }
    __CrestLoad(9487, (unsigned long )(& tmp___3), (long long )tmp___3);
    __CrestStore(9488, (unsigned long )(& __retres18));
# 236 "../HPL_numrocI.c"
    __retres18 = tmp___3;
# 236 "../HPL_numrocI.c"
    goto return_label;
  }
  }
  return_label:
  {
  __CrestLoad(9489, (unsigned long )(& __retres18), (long long )__retres18);
  __CrestReturn(9490);
# 53 "../HPL_numrocI.c"
  return (__retres18);
  }
}
}
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 316 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp00N(int const M , int const N , double *A , int const LDA , int const *IPIV ) ;
# 60 "../HPL_dlaswp00N.c"
void HPL_dlaswp00N(int const M , int const N , double *A , int const LDA , int const *IPIV )
{
  register double r ;
  double *a0 ;
  double *a1 ;
  int incA ;
  int ip ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_15 ;
  int const *mem_16 ;

  {
  __CrestCall(9494, 59);
  __CrestStore(9493, (unsigned long )(& LDA));
  __CrestStore(9492, (unsigned long )(& N));
  __CrestStore(9491, (unsigned long )(& M));
  __CrestLoad(9497, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(9496, (unsigned long )0, (long long )5);
  __CrestApply2(9495, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(9498, (unsigned long )(& incA));
# 117 "../HPL_dlaswp00N.c"
  incA = (int )((unsigned int )LDA << 5);
  {
  __CrestLoad(9501, (unsigned long )(& M), (long long )M);
  __CrestLoad(9500, (unsigned long )0, (long long )0);
  __CrestApply2(9499, 15, (long long )(M <= 0));
# 124 "../HPL_dlaswp00N.c"
  if (M <= 0) {
    __CrestBranch(9502, 3596, 1);
# 124 "../HPL_dlaswp00N.c"
    goto return_label;
  } else {
    __CrestBranch(9503, 3598, 0);
    {
    __CrestLoad(9506, (unsigned long )(& N), (long long )N);
    __CrestLoad(9505, (unsigned long )0, (long long )0);
    __CrestApply2(9504, 15, (long long )(N <= 0));
# 124 "../HPL_dlaswp00N.c"
    if (N <= 0) {
      __CrestBranch(9507, 3599, 1);
# 124 "../HPL_dlaswp00N.c"
      goto return_label;
    } else {
      __CrestBranch(9508, 3601, 0);

    }
    }
  }
  }
  __CrestLoad(9513, (unsigned long )(& N), (long long )N);
  __CrestLoad(9512, (unsigned long )0, (long long )5);
  __CrestApply2(9511, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(9510, (unsigned long )0, (long long )5);
  __CrestApply2(9509, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(9514, (unsigned long )(& nu));
# 126 "../HPL_dlaswp00N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(9517, (unsigned long )(& N), (long long )N);
  __CrestLoad(9516, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(9515, 1, (long long )(N - (int const )nu));
  __CrestStore(9518, (unsigned long )(& nr));
# 126 "../HPL_dlaswp00N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(9519, (unsigned long )0, (long long )0);
  __CrestStore(9520, (unsigned long )(& j));
# 129 "../HPL_dlaswp00N.c"
  j = 0;
  {
# 129 "../HPL_dlaswp00N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9523, (unsigned long )(& j), (long long )j);
    __CrestLoad(9522, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(9521, 16, (long long )(j < nu));
# 129 "../HPL_dlaswp00N.c"
    if (j < nu) {
      __CrestBranch(9524, 3607, 1);

    } else {
      __CrestBranch(9525, 3608, 0);
# 129 "../HPL_dlaswp00N.c"
      goto while_break;
    }
    }
    __CrestLoad(9526, (unsigned long )0, (long long )0);
    __CrestStore(9527, (unsigned long )(& i));
# 131 "../HPL_dlaswp00N.c"
    i = 0;
    {
# 131 "../HPL_dlaswp00N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(9530, (unsigned long )(& i), (long long )i);
      __CrestLoad(9529, (unsigned long )(& M), (long long )M);
      __CrestApply2(9528, 16, (long long )(i < (int )M));
# 131 "../HPL_dlaswp00N.c"
      if (i < (int )M) {
        __CrestBranch(9531, 3614, 1);

      } else {
        __CrestBranch(9532, 3615, 0);
# 131 "../HPL_dlaswp00N.c"
        goto while_break___0;
      }
      }
# 133 "../HPL_dlaswp00N.c"
      mem_15 = IPIV + i;
      __CrestLoad(9533, (unsigned long )mem_15, (long long )*mem_15);
      __CrestStore(9534, (unsigned long )(& ip));
# 133 "../HPL_dlaswp00N.c"
      ip = (int )*mem_15;
      {
      __CrestLoad(9537, (unsigned long )(& i), (long long )i);
      __CrestLoad(9536, (unsigned long )(& ip), (long long )ip);
      __CrestApply2(9535, 13, (long long )(i != ip));
# 133 "../HPL_dlaswp00N.c"
      if (i != ip) {
        __CrestBranch(9538, 3618, 1);
# 135 "../HPL_dlaswp00N.c"
        a0 = A + i;
# 135 "../HPL_dlaswp00N.c"
        a1 = A + ip;
# 137 "../HPL_dlaswp00N.c"
        r = *a0;
# 137 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 137 "../HPL_dlaswp00N.c"
        *a1 = r;
# 137 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 137 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 139 "../HPL_dlaswp00N.c"
        r = *a0;
# 139 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 139 "../HPL_dlaswp00N.c"
        *a1 = r;
# 139 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 139 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 142 "../HPL_dlaswp00N.c"
        r = *a0;
# 142 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 142 "../HPL_dlaswp00N.c"
        *a1 = r;
# 142 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 142 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 143 "../HPL_dlaswp00N.c"
        r = *a0;
# 143 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 143 "../HPL_dlaswp00N.c"
        *a1 = r;
# 143 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 143 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 146 "../HPL_dlaswp00N.c"
        r = *a0;
# 146 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 146 "../HPL_dlaswp00N.c"
        *a1 = r;
# 146 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 146 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 147 "../HPL_dlaswp00N.c"
        r = *a0;
# 147 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 147 "../HPL_dlaswp00N.c"
        *a1 = r;
# 147 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 147 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 148 "../HPL_dlaswp00N.c"
        r = *a0;
# 148 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 148 "../HPL_dlaswp00N.c"
        *a1 = r;
# 148 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 148 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 149 "../HPL_dlaswp00N.c"
        r = *a0;
# 149 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 149 "../HPL_dlaswp00N.c"
        *a1 = r;
# 149 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 149 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 152 "../HPL_dlaswp00N.c"
        r = *a0;
# 152 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 152 "../HPL_dlaswp00N.c"
        *a1 = r;
# 152 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 152 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 153 "../HPL_dlaswp00N.c"
        r = *a0;
# 153 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 153 "../HPL_dlaswp00N.c"
        *a1 = r;
# 153 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 153 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 154 "../HPL_dlaswp00N.c"
        r = *a0;
# 154 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 154 "../HPL_dlaswp00N.c"
        *a1 = r;
# 154 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 154 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 155 "../HPL_dlaswp00N.c"
        r = *a0;
# 155 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 155 "../HPL_dlaswp00N.c"
        *a1 = r;
# 155 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 155 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 156 "../HPL_dlaswp00N.c"
        r = *a0;
# 156 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 156 "../HPL_dlaswp00N.c"
        *a1 = r;
# 156 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 156 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 157 "../HPL_dlaswp00N.c"
        r = *a0;
# 157 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 157 "../HPL_dlaswp00N.c"
        *a1 = r;
# 157 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 157 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 158 "../HPL_dlaswp00N.c"
        r = *a0;
# 158 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 158 "../HPL_dlaswp00N.c"
        *a1 = r;
# 158 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 158 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 159 "../HPL_dlaswp00N.c"
        r = *a0;
# 159 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 159 "../HPL_dlaswp00N.c"
        *a1 = r;
# 159 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 159 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 162 "../HPL_dlaswp00N.c"
        r = *a0;
# 162 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 162 "../HPL_dlaswp00N.c"
        *a1 = r;
# 162 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 162 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 163 "../HPL_dlaswp00N.c"
        r = *a0;
# 163 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 163 "../HPL_dlaswp00N.c"
        *a1 = r;
# 163 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 163 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 164 "../HPL_dlaswp00N.c"
        r = *a0;
# 164 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 164 "../HPL_dlaswp00N.c"
        *a1 = r;
# 164 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 164 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 165 "../HPL_dlaswp00N.c"
        r = *a0;
# 165 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 165 "../HPL_dlaswp00N.c"
        *a1 = r;
# 165 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 165 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 166 "../HPL_dlaswp00N.c"
        r = *a0;
# 166 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 166 "../HPL_dlaswp00N.c"
        *a1 = r;
# 166 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 166 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 167 "../HPL_dlaswp00N.c"
        r = *a0;
# 167 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 167 "../HPL_dlaswp00N.c"
        *a1 = r;
# 167 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 167 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 168 "../HPL_dlaswp00N.c"
        r = *a0;
# 168 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 168 "../HPL_dlaswp00N.c"
        *a1 = r;
# 168 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 168 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 169 "../HPL_dlaswp00N.c"
        r = *a0;
# 169 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 169 "../HPL_dlaswp00N.c"
        *a1 = r;
# 169 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 169 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 170 "../HPL_dlaswp00N.c"
        r = *a0;
# 170 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 170 "../HPL_dlaswp00N.c"
        *a1 = r;
# 170 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 170 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 171 "../HPL_dlaswp00N.c"
        r = *a0;
# 171 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 171 "../HPL_dlaswp00N.c"
        *a1 = r;
# 171 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 171 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 172 "../HPL_dlaswp00N.c"
        r = *a0;
# 172 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 172 "../HPL_dlaswp00N.c"
        *a1 = r;
# 172 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 172 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 173 "../HPL_dlaswp00N.c"
        r = *a0;
# 173 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 173 "../HPL_dlaswp00N.c"
        *a1 = r;
# 173 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 173 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 174 "../HPL_dlaswp00N.c"
        r = *a0;
# 174 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 174 "../HPL_dlaswp00N.c"
        *a1 = r;
# 174 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 174 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 175 "../HPL_dlaswp00N.c"
        r = *a0;
# 175 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 175 "../HPL_dlaswp00N.c"
        *a1 = r;
# 175 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 175 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 176 "../HPL_dlaswp00N.c"
        r = *a0;
# 176 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 176 "../HPL_dlaswp00N.c"
        *a1 = r;
# 176 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 176 "../HPL_dlaswp00N.c"
        a1 += LDA;
# 177 "../HPL_dlaswp00N.c"
        r = *a0;
# 177 "../HPL_dlaswp00N.c"
        *a0 = *a1;
# 177 "../HPL_dlaswp00N.c"
        *a1 = r;
# 177 "../HPL_dlaswp00N.c"
        a0 += LDA;
# 177 "../HPL_dlaswp00N.c"
        a1 += LDA;
      } else {
        __CrestBranch(9539, 3619, 0);

      }
      }
      __CrestLoad(9542, (unsigned long )(& i), (long long )i);
      __CrestLoad(9541, (unsigned long )0, (long long )1);
      __CrestApply2(9540, 0, (long long )(i + 1));
      __CrestStore(9543, (unsigned long )(& i));
# 131 "../HPL_dlaswp00N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(9546, (unsigned long )(& j), (long long )j);
    __CrestLoad(9545, (unsigned long )0, (long long )32);
    __CrestApply2(9544, 0, (long long )(j + 32));
    __CrestStore(9547, (unsigned long )(& j));
# 129 "../HPL_dlaswp00N.c"
    j += 32;
# 129 "../HPL_dlaswp00N.c"
    A += incA;
  }
  while_break: ;
  }
  {
  __CrestLoad(9550, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(9549, (unsigned long )0, (long long )0);
  __CrestApply2(9548, 14, (long long )(nr > 0));
# 183 "../HPL_dlaswp00N.c"
  if (nr > 0) {
    __CrestBranch(9551, 3625, 1);
    __CrestLoad(9553, (unsigned long )0, (long long )0);
    __CrestStore(9554, (unsigned long )(& i));
# 185 "../HPL_dlaswp00N.c"
    i = 0;
    {
# 185 "../HPL_dlaswp00N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(9557, (unsigned long )(& i), (long long )i);
      __CrestLoad(9556, (unsigned long )(& M), (long long )M);
      __CrestApply2(9555, 16, (long long )(i < (int )M));
# 185 "../HPL_dlaswp00N.c"
      if (i < (int )M) {
        __CrestBranch(9558, 3630, 1);

      } else {
        __CrestBranch(9559, 3631, 0);
# 185 "../HPL_dlaswp00N.c"
        goto while_break___1;
      }
      }
# 187 "../HPL_dlaswp00N.c"
      mem_16 = IPIV + i;
      __CrestLoad(9560, (unsigned long )mem_16, (long long )*mem_16);
      __CrestStore(9561, (unsigned long )(& ip));
# 187 "../HPL_dlaswp00N.c"
      ip = (int )*mem_16;
      {
      __CrestLoad(9564, (unsigned long )(& i), (long long )i);
      __CrestLoad(9563, (unsigned long )(& ip), (long long )ip);
      __CrestApply2(9562, 13, (long long )(i != ip));
# 187 "../HPL_dlaswp00N.c"
      if (i != ip) {
        __CrestBranch(9565, 3634, 1);
# 189 "../HPL_dlaswp00N.c"
        a0 = A + i;
# 189 "../HPL_dlaswp00N.c"
        a1 = A + ip;
        __CrestLoad(9567, (unsigned long )0, (long long )0);
        __CrestStore(9568, (unsigned long )(& j));
# 190 "../HPL_dlaswp00N.c"
        j = 0;
        {
# 190 "../HPL_dlaswp00N.c"
        while (1) {
          while_continue___2: ;
          {
          __CrestLoad(9571, (unsigned long )(& j), (long long )j);
          __CrestLoad(9570, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(9569, 16, (long long )(j < nr));
# 190 "../HPL_dlaswp00N.c"
          if (j < nr) {
            __CrestBranch(9572, 3639, 1);

          } else {
            __CrestBranch(9573, 3640, 0);
# 190 "../HPL_dlaswp00N.c"
            goto while_break___2;
          }
          }
# 191 "../HPL_dlaswp00N.c"
          r = *a0;
# 191 "../HPL_dlaswp00N.c"
          *a0 = *a1;
# 191 "../HPL_dlaswp00N.c"
          *a1 = r;
          __CrestLoad(9576, (unsigned long )(& j), (long long )j);
          __CrestLoad(9575, (unsigned long )0, (long long )1);
          __CrestApply2(9574, 0, (long long )(j + 1));
          __CrestStore(9577, (unsigned long )(& j));
# 190 "../HPL_dlaswp00N.c"
          j ++;
# 190 "../HPL_dlaswp00N.c"
          a0 += LDA;
# 190 "../HPL_dlaswp00N.c"
          a1 += LDA;
        }
        while_break___2: ;
        }
      } else {
        __CrestBranch(9566, 3643, 0);

      }
      }
      __CrestLoad(9580, (unsigned long )(& i), (long long )i);
      __CrestLoad(9579, (unsigned long )0, (long long )1);
      __CrestApply2(9578, 0, (long long )(i + 1));
      __CrestStore(9581, (unsigned long )(& i));
# 185 "../HPL_dlaswp00N.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(9552, 3646, 0);

  }
  }

  return_label:
  {
  __CrestReturn(9582);
# 60 "../HPL_dlaswp00N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 324 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp10N(int const M , int const N , double *A , int const LDA , int const *IPIV ) ;
# 60 "../HPL_dlaswp10N.c"
void HPL_dlaswp10N(int const M , int const N , double *A , int const LDA , int const *IPIV )
{
  double r ;
  double *a0 ;
  double *a1 ;
  int incA ;
  int jp ;
  int mr ;
  int mu ;
  int i ;
  int j ;
  int const *mem_15 ;
  double *mem_16 ;
  double *mem_17 ;
  double *mem_18 ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double *mem_30 ;
  double *mem_31 ;
  double *mem_32 ;
  double *mem_33 ;
  double *mem_34 ;
  double *mem_35 ;
  double *mem_36 ;
  double *mem_37 ;
  double *mem_38 ;
  double *mem_39 ;
  double *mem_40 ;
  double *mem_41 ;
  double *mem_42 ;
  double *mem_43 ;
  double *mem_44 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double *mem_51 ;
  double *mem_52 ;
  double *mem_53 ;
  double *mem_54 ;
  double *mem_55 ;
  double *mem_56 ;
  double *mem_57 ;
  double *mem_58 ;
  double *mem_59 ;
  double *mem_60 ;
  double *mem_61 ;
  double *mem_62 ;
  double *mem_63 ;
  double *mem_64 ;
  double *mem_65 ;
  double *mem_66 ;
  double *mem_67 ;
  double *mem_68 ;
  double *mem_69 ;
  double *mem_70 ;
  double *mem_71 ;
  double *mem_72 ;
  double *mem_73 ;
  double *mem_74 ;
  double *mem_75 ;
  double *mem_76 ;
  double *mem_77 ;
  double *mem_78 ;
  double *mem_79 ;
  double *mem_80 ;
  double *mem_81 ;
  double *mem_82 ;
  double *mem_83 ;
  double *mem_84 ;
  double *mem_85 ;
  double *mem_86 ;
  double *mem_87 ;
  double *mem_88 ;
  double *mem_89 ;
  double *mem_90 ;
  double *mem_91 ;
  double *mem_92 ;
  double *mem_93 ;
  double *mem_94 ;
  double *mem_95 ;
  double *mem_96 ;
  double *mem_97 ;
  double *mem_98 ;
  double *mem_99 ;
  double *mem_100 ;
  double *mem_101 ;
  double *mem_102 ;
  double *mem_103 ;
  double *mem_104 ;
  double *mem_105 ;
  double *mem_106 ;
  double *mem_107 ;
  double *mem_108 ;
  double *mem_109 ;
  double *mem_110 ;
  double *mem_111 ;
  double *mem_112 ;
  double *mem_113 ;
  double *mem_114 ;
  double *mem_115 ;
  double *mem_116 ;
  double *mem_117 ;
  double *mem_118 ;
  double *mem_119 ;
  double *mem_120 ;
  double *mem_121 ;
  double *mem_122 ;
  double *mem_123 ;
  double *mem_124 ;
  double *mem_125 ;
  double *mem_126 ;
  double *mem_127 ;
  double *mem_128 ;
  double *mem_129 ;
  double *mem_130 ;
  double *mem_131 ;
  double *mem_132 ;
  double *mem_133 ;
  double *mem_134 ;
  double *mem_135 ;
  double *mem_136 ;
  double *mem_137 ;
  double *mem_138 ;
  double *mem_139 ;
  double *mem_140 ;
  double *mem_141 ;
  double *mem_142 ;
  double *mem_143 ;

  {
  __CrestCall(9586, 60);
  __CrestStore(9585, (unsigned long )(& LDA));
  __CrestStore(9584, (unsigned long )(& N));
  __CrestStore(9583, (unsigned long )(& M));
  __CrestLoad(9587, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(9588, (unsigned long )(& incA));
# 116 "../HPL_dlaswp10N.c"
  incA = 1 << 5;
  {
  __CrestLoad(9591, (unsigned long )(& M), (long long )M);
  __CrestLoad(9590, (unsigned long )0, (long long )0);
  __CrestApply2(9589, 15, (long long )(M <= 0));
# 122 "../HPL_dlaswp10N.c"
  if (M <= 0) {
    __CrestBranch(9592, 3651, 1);
# 122 "../HPL_dlaswp10N.c"
    goto return_label;
  } else {
    __CrestBranch(9593, 3653, 0);
    {
    __CrestLoad(9596, (unsigned long )(& N), (long long )N);
    __CrestLoad(9595, (unsigned long )0, (long long )0);
    __CrestApply2(9594, 15, (long long )(N <= 0));
# 122 "../HPL_dlaswp10N.c"
    if (N <= 0) {
      __CrestBranch(9597, 3654, 1);
# 122 "../HPL_dlaswp10N.c"
      goto return_label;
    } else {
      __CrestBranch(9598, 3656, 0);

    }
    }
  }
  }
  __CrestLoad(9603, (unsigned long )(& M), (long long )M);
  __CrestLoad(9602, (unsigned long )0, (long long )5);
  __CrestApply2(9601, 9, (long long )((unsigned int )M >> 5));
  __CrestLoad(9600, (unsigned long )0, (long long )5);
  __CrestApply2(9599, 8, (long long )(((unsigned int )M >> 5) << 5));
  __CrestStore(9604, (unsigned long )(& mu));
# 124 "../HPL_dlaswp10N.c"
  mu = (int )(((unsigned int )M >> 5) << 5);
  __CrestLoad(9607, (unsigned long )(& M), (long long )M);
  __CrestLoad(9606, (unsigned long )(& mu), (long long )mu);
  __CrestApply2(9605, 1, (long long )(M - (int const )mu));
  __CrestStore(9608, (unsigned long )(& mr));
# 124 "../HPL_dlaswp10N.c"
  mr = (int )(M - (int const )mu);
  __CrestLoad(9609, (unsigned long )0, (long long )0);
  __CrestStore(9610, (unsigned long )(& j));
# 127 "../HPL_dlaswp10N.c"
  j = 0;
  {
# 127 "../HPL_dlaswp10N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9613, (unsigned long )(& j), (long long )j);
    __CrestLoad(9612, (unsigned long )(& N), (long long )N);
    __CrestApply2(9611, 16, (long long )(j < (int )N));
# 127 "../HPL_dlaswp10N.c"
    if (j < (int )N) {
      __CrestBranch(9614, 3662, 1);

    } else {
      __CrestBranch(9615, 3663, 0);
# 127 "../HPL_dlaswp10N.c"
      goto while_break;
    }
    }
# 129 "../HPL_dlaswp10N.c"
    mem_15 = IPIV + j;
    __CrestLoad(9616, (unsigned long )mem_15, (long long )*mem_15);
    __CrestStore(9617, (unsigned long )(& jp));
# 129 "../HPL_dlaswp10N.c"
    jp = (int )*mem_15;
    {
    __CrestLoad(9620, (unsigned long )(& j), (long long )j);
    __CrestLoad(9619, (unsigned long )(& jp), (long long )jp);
    __CrestApply2(9618, 13, (long long )(j != jp));
# 129 "../HPL_dlaswp10N.c"
    if (j != jp) {
      __CrestBranch(9621, 3666, 1);
# 131 "../HPL_dlaswp10N.c"
      a0 = A + j * (int )LDA;
# 131 "../HPL_dlaswp10N.c"
      a1 = A + jp * (int )LDA;
      __CrestLoad(9623, (unsigned long )0, (long long )0);
      __CrestStore(9624, (unsigned long )(& i));
# 133 "../HPL_dlaswp10N.c"
      i = 0;
      {
# 133 "../HPL_dlaswp10N.c"
      while (1) {
        while_continue___0: ;
        {
        __CrestLoad(9627, (unsigned long )(& i), (long long )i);
        __CrestLoad(9626, (unsigned long )(& mu), (long long )mu);
        __CrestApply2(9625, 16, (long long )(i < mu));
# 133 "../HPL_dlaswp10N.c"
        if (i < mu) {
          __CrestBranch(9628, 3671, 1);

        } else {
          __CrestBranch(9629, 3672, 0);
# 133 "../HPL_dlaswp10N.c"
          goto while_break___0;
        }
        }
# 135 "../HPL_dlaswp10N.c"
        r = *a0;
# 135 "../HPL_dlaswp10N.c"
        *a0 = *a1;
# 135 "../HPL_dlaswp10N.c"
        *a1 = r;
# 137 "../HPL_dlaswp10N.c"
        mem_16 = a0 + 1;
# 137 "../HPL_dlaswp10N.c"
        r = *mem_16;
# 137 "../HPL_dlaswp10N.c"
        mem_17 = a0 + 1;
# 137 "../HPL_dlaswp10N.c"
        mem_18 = a1 + 1;
# 137 "../HPL_dlaswp10N.c"
        *mem_17 = *mem_18;
# 137 "../HPL_dlaswp10N.c"
        mem_19 = a1 + 1;
# 137 "../HPL_dlaswp10N.c"
        *mem_19 = r;
# 140 "../HPL_dlaswp10N.c"
        mem_20 = a0 + 2;
# 140 "../HPL_dlaswp10N.c"
        r = *mem_20;
# 140 "../HPL_dlaswp10N.c"
        mem_21 = a0 + 2;
# 140 "../HPL_dlaswp10N.c"
        mem_22 = a1 + 2;
# 140 "../HPL_dlaswp10N.c"
        *mem_21 = *mem_22;
# 140 "../HPL_dlaswp10N.c"
        mem_23 = a1 + 2;
# 140 "../HPL_dlaswp10N.c"
        *mem_23 = r;
# 141 "../HPL_dlaswp10N.c"
        mem_24 = a0 + 3;
# 141 "../HPL_dlaswp10N.c"
        r = *mem_24;
# 141 "../HPL_dlaswp10N.c"
        mem_25 = a0 + 3;
# 141 "../HPL_dlaswp10N.c"
        mem_26 = a1 + 3;
# 141 "../HPL_dlaswp10N.c"
        *mem_25 = *mem_26;
# 141 "../HPL_dlaswp10N.c"
        mem_27 = a1 + 3;
# 141 "../HPL_dlaswp10N.c"
        *mem_27 = r;
# 144 "../HPL_dlaswp10N.c"
        mem_28 = a0 + 4;
# 144 "../HPL_dlaswp10N.c"
        r = *mem_28;
# 144 "../HPL_dlaswp10N.c"
        mem_29 = a0 + 4;
# 144 "../HPL_dlaswp10N.c"
        mem_30 = a1 + 4;
# 144 "../HPL_dlaswp10N.c"
        *mem_29 = *mem_30;
# 144 "../HPL_dlaswp10N.c"
        mem_31 = a1 + 4;
# 144 "../HPL_dlaswp10N.c"
        *mem_31 = r;
# 145 "../HPL_dlaswp10N.c"
        mem_32 = a0 + 5;
# 145 "../HPL_dlaswp10N.c"
        r = *mem_32;
# 145 "../HPL_dlaswp10N.c"
        mem_33 = a0 + 5;
# 145 "../HPL_dlaswp10N.c"
        mem_34 = a1 + 5;
# 145 "../HPL_dlaswp10N.c"
        *mem_33 = *mem_34;
# 145 "../HPL_dlaswp10N.c"
        mem_35 = a1 + 5;
# 145 "../HPL_dlaswp10N.c"
        *mem_35 = r;
# 146 "../HPL_dlaswp10N.c"
        mem_36 = a0 + 6;
# 146 "../HPL_dlaswp10N.c"
        r = *mem_36;
# 146 "../HPL_dlaswp10N.c"
        mem_37 = a0 + 6;
# 146 "../HPL_dlaswp10N.c"
        mem_38 = a1 + 6;
# 146 "../HPL_dlaswp10N.c"
        *mem_37 = *mem_38;
# 146 "../HPL_dlaswp10N.c"
        mem_39 = a1 + 6;
# 146 "../HPL_dlaswp10N.c"
        *mem_39 = r;
# 147 "../HPL_dlaswp10N.c"
        mem_40 = a0 + 7;
# 147 "../HPL_dlaswp10N.c"
        r = *mem_40;
# 147 "../HPL_dlaswp10N.c"
        mem_41 = a0 + 7;
# 147 "../HPL_dlaswp10N.c"
        mem_42 = a1 + 7;
# 147 "../HPL_dlaswp10N.c"
        *mem_41 = *mem_42;
# 147 "../HPL_dlaswp10N.c"
        mem_43 = a1 + 7;
# 147 "../HPL_dlaswp10N.c"
        *mem_43 = r;
# 150 "../HPL_dlaswp10N.c"
        mem_44 = a0 + 8;
# 150 "../HPL_dlaswp10N.c"
        r = *mem_44;
# 150 "../HPL_dlaswp10N.c"
        mem_45 = a0 + 8;
# 150 "../HPL_dlaswp10N.c"
        mem_46 = a1 + 8;
# 150 "../HPL_dlaswp10N.c"
        *mem_45 = *mem_46;
# 150 "../HPL_dlaswp10N.c"
        mem_47 = a1 + 8;
# 150 "../HPL_dlaswp10N.c"
        *mem_47 = r;
# 151 "../HPL_dlaswp10N.c"
        mem_48 = a0 + 9;
# 151 "../HPL_dlaswp10N.c"
        r = *mem_48;
# 151 "../HPL_dlaswp10N.c"
        mem_49 = a0 + 9;
# 151 "../HPL_dlaswp10N.c"
        mem_50 = a1 + 9;
# 151 "../HPL_dlaswp10N.c"
        *mem_49 = *mem_50;
# 151 "../HPL_dlaswp10N.c"
        mem_51 = a1 + 9;
# 151 "../HPL_dlaswp10N.c"
        *mem_51 = r;
# 152 "../HPL_dlaswp10N.c"
        mem_52 = a0 + 10;
# 152 "../HPL_dlaswp10N.c"
        r = *mem_52;
# 152 "../HPL_dlaswp10N.c"
        mem_53 = a0 + 10;
# 152 "../HPL_dlaswp10N.c"
        mem_54 = a1 + 10;
# 152 "../HPL_dlaswp10N.c"
        *mem_53 = *mem_54;
# 152 "../HPL_dlaswp10N.c"
        mem_55 = a1 + 10;
# 152 "../HPL_dlaswp10N.c"
        *mem_55 = r;
# 153 "../HPL_dlaswp10N.c"
        mem_56 = a0 + 11;
# 153 "../HPL_dlaswp10N.c"
        r = *mem_56;
# 153 "../HPL_dlaswp10N.c"
        mem_57 = a0 + 11;
# 153 "../HPL_dlaswp10N.c"
        mem_58 = a1 + 11;
# 153 "../HPL_dlaswp10N.c"
        *mem_57 = *mem_58;
# 153 "../HPL_dlaswp10N.c"
        mem_59 = a1 + 11;
# 153 "../HPL_dlaswp10N.c"
        *mem_59 = r;
# 154 "../HPL_dlaswp10N.c"
        mem_60 = a0 + 12;
# 154 "../HPL_dlaswp10N.c"
        r = *mem_60;
# 154 "../HPL_dlaswp10N.c"
        mem_61 = a0 + 12;
# 154 "../HPL_dlaswp10N.c"
        mem_62 = a1 + 12;
# 154 "../HPL_dlaswp10N.c"
        *mem_61 = *mem_62;
# 154 "../HPL_dlaswp10N.c"
        mem_63 = a1 + 12;
# 154 "../HPL_dlaswp10N.c"
        *mem_63 = r;
# 155 "../HPL_dlaswp10N.c"
        mem_64 = a0 + 13;
# 155 "../HPL_dlaswp10N.c"
        r = *mem_64;
# 155 "../HPL_dlaswp10N.c"
        mem_65 = a0 + 13;
# 155 "../HPL_dlaswp10N.c"
        mem_66 = a1 + 13;
# 155 "../HPL_dlaswp10N.c"
        *mem_65 = *mem_66;
# 155 "../HPL_dlaswp10N.c"
        mem_67 = a1 + 13;
# 155 "../HPL_dlaswp10N.c"
        *mem_67 = r;
# 156 "../HPL_dlaswp10N.c"
        mem_68 = a0 + 14;
# 156 "../HPL_dlaswp10N.c"
        r = *mem_68;
# 156 "../HPL_dlaswp10N.c"
        mem_69 = a0 + 14;
# 156 "../HPL_dlaswp10N.c"
        mem_70 = a1 + 14;
# 156 "../HPL_dlaswp10N.c"
        *mem_69 = *mem_70;
# 156 "../HPL_dlaswp10N.c"
        mem_71 = a1 + 14;
# 156 "../HPL_dlaswp10N.c"
        *mem_71 = r;
# 157 "../HPL_dlaswp10N.c"
        mem_72 = a0 + 15;
# 157 "../HPL_dlaswp10N.c"
        r = *mem_72;
# 157 "../HPL_dlaswp10N.c"
        mem_73 = a0 + 15;
# 157 "../HPL_dlaswp10N.c"
        mem_74 = a1 + 15;
# 157 "../HPL_dlaswp10N.c"
        *mem_73 = *mem_74;
# 157 "../HPL_dlaswp10N.c"
        mem_75 = a1 + 15;
# 157 "../HPL_dlaswp10N.c"
        *mem_75 = r;
# 160 "../HPL_dlaswp10N.c"
        mem_76 = a0 + 16;
# 160 "../HPL_dlaswp10N.c"
        r = *mem_76;
# 160 "../HPL_dlaswp10N.c"
        mem_77 = a0 + 16;
# 160 "../HPL_dlaswp10N.c"
        mem_78 = a1 + 16;
# 160 "../HPL_dlaswp10N.c"
        *mem_77 = *mem_78;
# 160 "../HPL_dlaswp10N.c"
        mem_79 = a1 + 16;
# 160 "../HPL_dlaswp10N.c"
        *mem_79 = r;
# 161 "../HPL_dlaswp10N.c"
        mem_80 = a0 + 17;
# 161 "../HPL_dlaswp10N.c"
        r = *mem_80;
# 161 "../HPL_dlaswp10N.c"
        mem_81 = a0 + 17;
# 161 "../HPL_dlaswp10N.c"
        mem_82 = a1 + 17;
# 161 "../HPL_dlaswp10N.c"
        *mem_81 = *mem_82;
# 161 "../HPL_dlaswp10N.c"
        mem_83 = a1 + 17;
# 161 "../HPL_dlaswp10N.c"
        *mem_83 = r;
# 162 "../HPL_dlaswp10N.c"
        mem_84 = a0 + 18;
# 162 "../HPL_dlaswp10N.c"
        r = *mem_84;
# 162 "../HPL_dlaswp10N.c"
        mem_85 = a0 + 18;
# 162 "../HPL_dlaswp10N.c"
        mem_86 = a1 + 18;
# 162 "../HPL_dlaswp10N.c"
        *mem_85 = *mem_86;
# 162 "../HPL_dlaswp10N.c"
        mem_87 = a1 + 18;
# 162 "../HPL_dlaswp10N.c"
        *mem_87 = r;
# 163 "../HPL_dlaswp10N.c"
        mem_88 = a0 + 19;
# 163 "../HPL_dlaswp10N.c"
        r = *mem_88;
# 163 "../HPL_dlaswp10N.c"
        mem_89 = a0 + 19;
# 163 "../HPL_dlaswp10N.c"
        mem_90 = a1 + 19;
# 163 "../HPL_dlaswp10N.c"
        *mem_89 = *mem_90;
# 163 "../HPL_dlaswp10N.c"
        mem_91 = a1 + 19;
# 163 "../HPL_dlaswp10N.c"
        *mem_91 = r;
# 164 "../HPL_dlaswp10N.c"
        mem_92 = a0 + 20;
# 164 "../HPL_dlaswp10N.c"
        r = *mem_92;
# 164 "../HPL_dlaswp10N.c"
        mem_93 = a0 + 20;
# 164 "../HPL_dlaswp10N.c"
        mem_94 = a1 + 20;
# 164 "../HPL_dlaswp10N.c"
        *mem_93 = *mem_94;
# 164 "../HPL_dlaswp10N.c"
        mem_95 = a1 + 20;
# 164 "../HPL_dlaswp10N.c"
        *mem_95 = r;
# 165 "../HPL_dlaswp10N.c"
        mem_96 = a0 + 21;
# 165 "../HPL_dlaswp10N.c"
        r = *mem_96;
# 165 "../HPL_dlaswp10N.c"
        mem_97 = a0 + 21;
# 165 "../HPL_dlaswp10N.c"
        mem_98 = a1 + 21;
# 165 "../HPL_dlaswp10N.c"
        *mem_97 = *mem_98;
# 165 "../HPL_dlaswp10N.c"
        mem_99 = a1 + 21;
# 165 "../HPL_dlaswp10N.c"
        *mem_99 = r;
# 166 "../HPL_dlaswp10N.c"
        mem_100 = a0 + 22;
# 166 "../HPL_dlaswp10N.c"
        r = *mem_100;
# 166 "../HPL_dlaswp10N.c"
        mem_101 = a0 + 22;
# 166 "../HPL_dlaswp10N.c"
        mem_102 = a1 + 22;
# 166 "../HPL_dlaswp10N.c"
        *mem_101 = *mem_102;
# 166 "../HPL_dlaswp10N.c"
        mem_103 = a1 + 22;
# 166 "../HPL_dlaswp10N.c"
        *mem_103 = r;
# 167 "../HPL_dlaswp10N.c"
        mem_104 = a0 + 23;
# 167 "../HPL_dlaswp10N.c"
        r = *mem_104;
# 167 "../HPL_dlaswp10N.c"
        mem_105 = a0 + 23;
# 167 "../HPL_dlaswp10N.c"
        mem_106 = a1 + 23;
# 167 "../HPL_dlaswp10N.c"
        *mem_105 = *mem_106;
# 167 "../HPL_dlaswp10N.c"
        mem_107 = a1 + 23;
# 167 "../HPL_dlaswp10N.c"
        *mem_107 = r;
# 168 "../HPL_dlaswp10N.c"
        mem_108 = a0 + 24;
# 168 "../HPL_dlaswp10N.c"
        r = *mem_108;
# 168 "../HPL_dlaswp10N.c"
        mem_109 = a0 + 24;
# 168 "../HPL_dlaswp10N.c"
        mem_110 = a1 + 24;
# 168 "../HPL_dlaswp10N.c"
        *mem_109 = *mem_110;
# 168 "../HPL_dlaswp10N.c"
        mem_111 = a1 + 24;
# 168 "../HPL_dlaswp10N.c"
        *mem_111 = r;
# 169 "../HPL_dlaswp10N.c"
        mem_112 = a0 + 25;
# 169 "../HPL_dlaswp10N.c"
        r = *mem_112;
# 169 "../HPL_dlaswp10N.c"
        mem_113 = a0 + 25;
# 169 "../HPL_dlaswp10N.c"
        mem_114 = a1 + 25;
# 169 "../HPL_dlaswp10N.c"
        *mem_113 = *mem_114;
# 169 "../HPL_dlaswp10N.c"
        mem_115 = a1 + 25;
# 169 "../HPL_dlaswp10N.c"
        *mem_115 = r;
# 170 "../HPL_dlaswp10N.c"
        mem_116 = a0 + 26;
# 170 "../HPL_dlaswp10N.c"
        r = *mem_116;
# 170 "../HPL_dlaswp10N.c"
        mem_117 = a0 + 26;
# 170 "../HPL_dlaswp10N.c"
        mem_118 = a1 + 26;
# 170 "../HPL_dlaswp10N.c"
        *mem_117 = *mem_118;
# 170 "../HPL_dlaswp10N.c"
        mem_119 = a1 + 26;
# 170 "../HPL_dlaswp10N.c"
        *mem_119 = r;
# 171 "../HPL_dlaswp10N.c"
        mem_120 = a0 + 27;
# 171 "../HPL_dlaswp10N.c"
        r = *mem_120;
# 171 "../HPL_dlaswp10N.c"
        mem_121 = a0 + 27;
# 171 "../HPL_dlaswp10N.c"
        mem_122 = a1 + 27;
# 171 "../HPL_dlaswp10N.c"
        *mem_121 = *mem_122;
# 171 "../HPL_dlaswp10N.c"
        mem_123 = a1 + 27;
# 171 "../HPL_dlaswp10N.c"
        *mem_123 = r;
# 172 "../HPL_dlaswp10N.c"
        mem_124 = a0 + 28;
# 172 "../HPL_dlaswp10N.c"
        r = *mem_124;
# 172 "../HPL_dlaswp10N.c"
        mem_125 = a0 + 28;
# 172 "../HPL_dlaswp10N.c"
        mem_126 = a1 + 28;
# 172 "../HPL_dlaswp10N.c"
        *mem_125 = *mem_126;
# 172 "../HPL_dlaswp10N.c"
        mem_127 = a1 + 28;
# 172 "../HPL_dlaswp10N.c"
        *mem_127 = r;
# 173 "../HPL_dlaswp10N.c"
        mem_128 = a0 + 29;
# 173 "../HPL_dlaswp10N.c"
        r = *mem_128;
# 173 "../HPL_dlaswp10N.c"
        mem_129 = a0 + 29;
# 173 "../HPL_dlaswp10N.c"
        mem_130 = a1 + 29;
# 173 "../HPL_dlaswp10N.c"
        *mem_129 = *mem_130;
# 173 "../HPL_dlaswp10N.c"
        mem_131 = a1 + 29;
# 173 "../HPL_dlaswp10N.c"
        *mem_131 = r;
# 174 "../HPL_dlaswp10N.c"
        mem_132 = a0 + 30;
# 174 "../HPL_dlaswp10N.c"
        r = *mem_132;
# 174 "../HPL_dlaswp10N.c"
        mem_133 = a0 + 30;
# 174 "../HPL_dlaswp10N.c"
        mem_134 = a1 + 30;
# 174 "../HPL_dlaswp10N.c"
        *mem_133 = *mem_134;
# 174 "../HPL_dlaswp10N.c"
        mem_135 = a1 + 30;
# 174 "../HPL_dlaswp10N.c"
        *mem_135 = r;
# 175 "../HPL_dlaswp10N.c"
        mem_136 = a0 + 31;
# 175 "../HPL_dlaswp10N.c"
        r = *mem_136;
# 175 "../HPL_dlaswp10N.c"
        mem_137 = a0 + 31;
# 175 "../HPL_dlaswp10N.c"
        mem_138 = a1 + 31;
# 175 "../HPL_dlaswp10N.c"
        *mem_137 = *mem_138;
# 175 "../HPL_dlaswp10N.c"
        mem_139 = a1 + 31;
# 175 "../HPL_dlaswp10N.c"
        *mem_139 = r;
        __CrestLoad(9632, (unsigned long )(& i), (long long )i);
        __CrestLoad(9631, (unsigned long )(& incA), (long long )incA);
        __CrestApply2(9630, 0, (long long )(i + incA));
        __CrestStore(9633, (unsigned long )(& i));
# 133 "../HPL_dlaswp10N.c"
        i += incA;
# 133 "../HPL_dlaswp10N.c"
        a0 += incA;
# 133 "../HPL_dlaswp10N.c"
        a1 += incA;
      }
      while_break___0: ;
      }
      __CrestLoad(9634, (unsigned long )0, (long long )0);
      __CrestStore(9635, (unsigned long )(& i));
# 179 "../HPL_dlaswp10N.c"
      i = 0;
      {
# 179 "../HPL_dlaswp10N.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(9638, (unsigned long )(& i), (long long )i);
        __CrestLoad(9637, (unsigned long )(& mr), (long long )mr);
        __CrestApply2(9636, 16, (long long )(i < mr));
# 179 "../HPL_dlaswp10N.c"
        if (i < mr) {
          __CrestBranch(9639, 3680, 1);

        } else {
          __CrestBranch(9640, 3681, 0);
# 179 "../HPL_dlaswp10N.c"
          goto while_break___1;
        }
        }
# 180 "../HPL_dlaswp10N.c"
        mem_140 = a0 + i;
# 180 "../HPL_dlaswp10N.c"
        r = *mem_140;
# 180 "../HPL_dlaswp10N.c"
        mem_141 = a0 + i;
# 180 "../HPL_dlaswp10N.c"
        mem_142 = a1 + i;
# 180 "../HPL_dlaswp10N.c"
        *mem_141 = *mem_142;
# 180 "../HPL_dlaswp10N.c"
        mem_143 = a1 + i;
# 180 "../HPL_dlaswp10N.c"
        *mem_143 = r;
        __CrestLoad(9643, (unsigned long )(& i), (long long )i);
        __CrestLoad(9642, (unsigned long )0, (long long )1);
        __CrestApply2(9641, 0, (long long )(i + 1));
        __CrestStore(9644, (unsigned long )(& i));
# 179 "../HPL_dlaswp10N.c"
        i ++;
      }
      while_break___1: ;
      }
    } else {
      __CrestBranch(9622, 3684, 0);

    }
    }
    __CrestLoad(9647, (unsigned long )(& j), (long long )j);
    __CrestLoad(9646, (unsigned long )0, (long long )1);
    __CrestApply2(9645, 0, (long long )(j + 1));
    __CrestStore(9648, (unsigned long )(& j));
# 127 "../HPL_dlaswp10N.c"
    j ++;
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(9649);
# 60 "../HPL_dlaswp10N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 332 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp01N(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp01N.c"
void HPL_dlaswp01N(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU )
{
  double *a0 ;
  double *a1 ;
  int incA ;
  int incU ;
  int lda1 ;
  int nu ;
  int nr ;
  int i ;
  int j ;
  int const *mem_18 ;
  int const *mem_19 ;
  int const *mem_20 ;
  int const *mem_21 ;
  int const *mem_22 ;
  int const *mem_23 ;
  int const *mem_24 ;
  int const *mem_25 ;

  {
  __CrestCall(9654, 61);
  __CrestStore(9653, (unsigned long )(& LDU));
  __CrestStore(9652, (unsigned long )(& LDA));
  __CrestStore(9651, (unsigned long )(& N));
  __CrestStore(9650, (unsigned long )(& M));
  __CrestLoad(9657, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(9656, (unsigned long )0, (long long )5);
  __CrestApply2(9655, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(9658, (unsigned long )(& incA));
# 144 "../HPL_dlaswp01N.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(9661, (unsigned long )(& LDU), (long long )LDU);
  __CrestLoad(9660, (unsigned long )0, (long long )5);
  __CrestApply2(9659, 8, (long long )((unsigned int )LDU << 5));
  __CrestStore(9662, (unsigned long )(& incU));
# 144 "../HPL_dlaswp01N.c"
  incU = (int )((unsigned int )LDU << 5);
  {
  __CrestLoad(9665, (unsigned long )(& M), (long long )M);
  __CrestLoad(9664, (unsigned long )0, (long long )0);
  __CrestApply2(9663, 15, (long long )(M <= 0));
# 153 "../HPL_dlaswp01N.c"
  if (M <= 0) {
    __CrestBranch(9666, 3691, 1);
# 153 "../HPL_dlaswp01N.c"
    goto return_label;
  } else {
    __CrestBranch(9667, 3693, 0);
    {
    __CrestLoad(9670, (unsigned long )(& N), (long long )N);
    __CrestLoad(9669, (unsigned long )0, (long long )0);
    __CrestApply2(9668, 15, (long long )(N <= 0));
# 153 "../HPL_dlaswp01N.c"
    if (N <= 0) {
      __CrestBranch(9671, 3694, 1);
# 153 "../HPL_dlaswp01N.c"
      goto return_label;
    } else {
      __CrestBranch(9672, 3696, 0);

    }
    }
  }
  }
  __CrestLoad(9677, (unsigned long )(& N), (long long )N);
  __CrestLoad(9676, (unsigned long )0, (long long )5);
  __CrestApply2(9675, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(9674, (unsigned long )0, (long long )5);
  __CrestApply2(9673, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(9678, (unsigned long )(& nu));
# 155 "../HPL_dlaswp01N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(9681, (unsigned long )(& N), (long long )N);
  __CrestLoad(9680, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(9679, 1, (long long )(N - (int const )nu));
  __CrestStore(9682, (unsigned long )(& nr));
# 155 "../HPL_dlaswp01N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(9683, (unsigned long )0, (long long )0);
  __CrestStore(9684, (unsigned long )(& j));
# 158 "../HPL_dlaswp01N.c"
  j = 0;
  {
# 158 "../HPL_dlaswp01N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9687, (unsigned long )(& j), (long long )j);
    __CrestLoad(9686, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(9685, 16, (long long )(j < nu));
# 158 "../HPL_dlaswp01N.c"
    if (j < nu) {
      __CrestBranch(9688, 3702, 1);

    } else {
      __CrestBranch(9689, 3703, 0);
# 158 "../HPL_dlaswp01N.c"
      goto while_break;
    }
    }
    __CrestLoad(9690, (unsigned long )0, (long long )0);
    __CrestStore(9691, (unsigned long )(& i));
# 160 "../HPL_dlaswp01N.c"
    i = 0;
    {
# 160 "../HPL_dlaswp01N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(9694, (unsigned long )(& i), (long long )i);
      __CrestLoad(9693, (unsigned long )(& M), (long long )M);
      __CrestApply2(9692, 16, (long long )(i < (int )M));
# 160 "../HPL_dlaswp01N.c"
      if (i < (int )M) {
        __CrestBranch(9695, 3709, 1);

      } else {
        __CrestBranch(9696, 3710, 0);
# 160 "../HPL_dlaswp01N.c"
        goto while_break___0;
      }
      }
# 162 "../HPL_dlaswp01N.c"
      mem_18 = LINDXA + i;
# 162 "../HPL_dlaswp01N.c"
      a0 = A + *mem_18;
      {
# 163 "../HPL_dlaswp01N.c"
      mem_19 = LINDXAU + i;
      {
      __CrestLoad(9699, (unsigned long )mem_19, (long long )*mem_19);
      __CrestLoad(9698, (unsigned long )0, (long long )0);
      __CrestApply2(9697, 17, (long long )(*mem_19 >= 0));
# 163 "../HPL_dlaswp01N.c"
      if (*mem_19 >= 0) {
        __CrestBranch(9700, 3715, 1);
# 163 "../HPL_dlaswp01N.c"
        mem_20 = LINDXAU + i;
# 163 "../HPL_dlaswp01N.c"
        a1 = U + *mem_20;
        __CrestLoad(9702, (unsigned long )(& LDU), (long long )LDU);
        __CrestStore(9703, (unsigned long )(& lda1));
# 163 "../HPL_dlaswp01N.c"
        lda1 = (int )LDU;
      } else {
        __CrestBranch(9701, 3716, 0);
# 164 "../HPL_dlaswp01N.c"
        mem_21 = LINDXAU + i;
# 164 "../HPL_dlaswp01N.c"
        a1 = A - *mem_21;
        __CrestLoad(9704, (unsigned long )(& LDA), (long long )LDA);
        __CrestStore(9705, (unsigned long )(& lda1));
# 164 "../HPL_dlaswp01N.c"
        lda1 = (int )LDA;
      }
      }
      }
# 166 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 166 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 166 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 168 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 168 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 171 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 171 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 171 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 171 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 171 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 171 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 174 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 174 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 174 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 174 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 174 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 174 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 175 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 175 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 175 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 175 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 178 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 178 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 178 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 178 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 179 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 179 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 179 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 179 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 179 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 179 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 180 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 180 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 180 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 180 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 180 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 180 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 181 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 181 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 181 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 181 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 181 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 181 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 184 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 184 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 184 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 184 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 185 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 185 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 185 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 185 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 185 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 185 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 186 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 186 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 186 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 186 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 187 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 187 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 187 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 187 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 187 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 187 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 188 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 188 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 188 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 188 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 188 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 188 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 189 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 189 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 189 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 189 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 189 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 189 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 190 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 190 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 190 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 190 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 190 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 190 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 191 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 191 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 191 "../HPL_dlaswp01N.c"
      a0 += LDA;
# 191 "../HPL_dlaswp01N.c"
      *a1 = *a0;
# 191 "../HPL_dlaswp01N.c"
      a1 += lda1;
# 191 "../HPL_dlaswp01N.c"
      a0 += LDA;
      __CrestLoad(9708, (unsigned long )(& i), (long long )i);
      __CrestLoad(9707, (unsigned long )0, (long long )1);
      __CrestApply2(9706, 0, (long long )(i + 1));
      __CrestStore(9709, (unsigned long )(& i));
# 160 "../HPL_dlaswp01N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(9712, (unsigned long )(& j), (long long )j);
    __CrestLoad(9711, (unsigned long )0, (long long )32);
    __CrestApply2(9710, 0, (long long )(j + 32));
    __CrestStore(9713, (unsigned long )(& j));
# 158 "../HPL_dlaswp01N.c"
    j += 32;
# 158 "../HPL_dlaswp01N.c"
    A += incA;
# 158 "../HPL_dlaswp01N.c"
    U += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(9716, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(9715, (unsigned long )0, (long long )0);
  __CrestApply2(9714, 13, (long long )(nr != 0));
# 196 "../HPL_dlaswp01N.c"
  if (nr != 0) {
    __CrestBranch(9717, 3722, 1);
    __CrestLoad(9719, (unsigned long )0, (long long )0);
    __CrestStore(9720, (unsigned long )(& i));
# 198 "../HPL_dlaswp01N.c"
    i = 0;
    {
# 198 "../HPL_dlaswp01N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(9723, (unsigned long )(& i), (long long )i);
      __CrestLoad(9722, (unsigned long )(& M), (long long )M);
      __CrestApply2(9721, 16, (long long )(i < (int )M));
# 198 "../HPL_dlaswp01N.c"
      if (i < (int )M) {
        __CrestBranch(9724, 3727, 1);

      } else {
        __CrestBranch(9725, 3728, 0);
# 198 "../HPL_dlaswp01N.c"
        goto while_break___1;
      }
      }
# 200 "../HPL_dlaswp01N.c"
      mem_22 = LINDXA + i;
# 200 "../HPL_dlaswp01N.c"
      a0 = A + *mem_22;
      {
# 201 "../HPL_dlaswp01N.c"
      mem_23 = LINDXAU + i;
      {
      __CrestLoad(9728, (unsigned long )mem_23, (long long )*mem_23);
      __CrestLoad(9727, (unsigned long )0, (long long )0);
      __CrestApply2(9726, 17, (long long )(*mem_23 >= 0));
# 201 "../HPL_dlaswp01N.c"
      if (*mem_23 >= 0) {
        __CrestBranch(9729, 3733, 1);
# 201 "../HPL_dlaswp01N.c"
        mem_24 = LINDXAU + i;
# 201 "../HPL_dlaswp01N.c"
        a1 = U + *mem_24;
        __CrestLoad(9731, (unsigned long )(& LDU), (long long )LDU);
        __CrestStore(9732, (unsigned long )(& lda1));
# 201 "../HPL_dlaswp01N.c"
        lda1 = (int )LDU;
      } else {
        __CrestBranch(9730, 3734, 0);
# 202 "../HPL_dlaswp01N.c"
        mem_25 = LINDXAU + i;
# 202 "../HPL_dlaswp01N.c"
        a1 = A - *mem_25;
        __CrestLoad(9733, (unsigned long )(& LDA), (long long )LDA);
        __CrestStore(9734, (unsigned long )(& lda1));
# 202 "../HPL_dlaswp01N.c"
        lda1 = (int )LDA;
      }
      }
      }
      __CrestLoad(9735, (unsigned long )0, (long long )0);
      __CrestStore(9736, (unsigned long )(& j));
# 204 "../HPL_dlaswp01N.c"
      j = 0;
      {
# 204 "../HPL_dlaswp01N.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(9739, (unsigned long )(& j), (long long )j);
        __CrestLoad(9738, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(9737, 16, (long long )(j < nr));
# 204 "../HPL_dlaswp01N.c"
        if (j < nr) {
          __CrestBranch(9740, 3740, 1);

        } else {
          __CrestBranch(9741, 3741, 0);
# 204 "../HPL_dlaswp01N.c"
          goto while_break___2;
        }
        }
# 204 "../HPL_dlaswp01N.c"
        *a1 = *a0;
        __CrestLoad(9744, (unsigned long )(& j), (long long )j);
        __CrestLoad(9743, (unsigned long )0, (long long )1);
        __CrestApply2(9742, 0, (long long )(j + 1));
        __CrestStore(9745, (unsigned long )(& j));
# 204 "../HPL_dlaswp01N.c"
        j ++;
# 204 "../HPL_dlaswp01N.c"
        a1 += lda1;
# 204 "../HPL_dlaswp01N.c"
        a0 += LDA;
      }
      while_break___2: ;
      }
      __CrestLoad(9748, (unsigned long )(& i), (long long )i);
      __CrestLoad(9747, (unsigned long )0, (long long )1);
      __CrestApply2(9746, 0, (long long )(i + 1));
      __CrestStore(9749, (unsigned long )(& i));
# 198 "../HPL_dlaswp01N.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(9718, 3746, 0);

  }
  }

  return_label:
  {
  __CrestReturn(9750);
# 60 "../HPL_dlaswp01N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 343 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp01T(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp01T.c"
void HPL_dlaswp01T(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU )
{
  double *a0 ;
  double *a1 ;
  int incA ;
  int incU ;
  int nu ;
  int nr ;
  int i ;
  int j ;
  int const *mem_17 ;
  int const *mem_18 ;
  int const *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double *mem_30 ;
  double *mem_31 ;
  double *mem_32 ;
  double *mem_33 ;
  double *mem_34 ;
  double *mem_35 ;
  double *mem_36 ;
  double *mem_37 ;
  double *mem_38 ;
  double *mem_39 ;
  double *mem_40 ;
  double *mem_41 ;
  double *mem_42 ;
  double *mem_43 ;
  double *mem_44 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double *mem_51 ;
  int const *mem_52 ;
  int const *mem_53 ;
  int const *mem_54 ;
  int const *mem_55 ;
  double *mem_56 ;
  int const *mem_57 ;

  {
  __CrestCall(9755, 62);
  __CrestStore(9754, (unsigned long )(& LDU));
  __CrestStore(9753, (unsigned long )(& LDA));
  __CrestStore(9752, (unsigned long )(& N));
  __CrestStore(9751, (unsigned long )(& M));
  __CrestLoad(9758, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(9757, (unsigned long )0, (long long )5);
  __CrestApply2(9756, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(9759, (unsigned long )(& incA));
# 145 "../HPL_dlaswp01T.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(9760, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(9761, (unsigned long )(& incU));
# 145 "../HPL_dlaswp01T.c"
  incU = 1 << 5;
  {
  __CrestLoad(9764, (unsigned long )(& M), (long long )M);
  __CrestLoad(9763, (unsigned long )0, (long long )0);
  __CrestApply2(9762, 15, (long long )(M <= 0));
# 153 "../HPL_dlaswp01T.c"
  if (M <= 0) {
    __CrestBranch(9765, 3751, 1);
# 153 "../HPL_dlaswp01T.c"
    goto return_label;
  } else {
    __CrestBranch(9766, 3753, 0);
    {
    __CrestLoad(9769, (unsigned long )(& N), (long long )N);
    __CrestLoad(9768, (unsigned long )0, (long long )0);
    __CrestApply2(9767, 15, (long long )(N <= 0));
# 153 "../HPL_dlaswp01T.c"
    if (N <= 0) {
      __CrestBranch(9770, 3754, 1);
# 153 "../HPL_dlaswp01T.c"
      goto return_label;
    } else {
      __CrestBranch(9771, 3756, 0);

    }
    }
  }
  }
  __CrestLoad(9776, (unsigned long )(& N), (long long )N);
  __CrestLoad(9775, (unsigned long )0, (long long )5);
  __CrestApply2(9774, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(9773, (unsigned long )0, (long long )5);
  __CrestApply2(9772, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(9777, (unsigned long )(& nu));
# 155 "../HPL_dlaswp01T.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(9780, (unsigned long )(& N), (long long )N);
  __CrestLoad(9779, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(9778, 1, (long long )(N - (int const )nu));
  __CrestStore(9781, (unsigned long )(& nr));
# 155 "../HPL_dlaswp01T.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(9782, (unsigned long )0, (long long )0);
  __CrestStore(9783, (unsigned long )(& j));
# 158 "../HPL_dlaswp01T.c"
  j = 0;
  {
# 158 "../HPL_dlaswp01T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9786, (unsigned long )(& j), (long long )j);
    __CrestLoad(9785, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(9784, 16, (long long )(j < nu));
# 158 "../HPL_dlaswp01T.c"
    if (j < nu) {
      __CrestBranch(9787, 3762, 1);

    } else {
      __CrestBranch(9788, 3763, 0);
# 158 "../HPL_dlaswp01T.c"
      goto while_break;
    }
    }
    __CrestLoad(9789, (unsigned long )0, (long long )0);
    __CrestStore(9790, (unsigned long )(& i));
# 160 "../HPL_dlaswp01T.c"
    i = 0;
    {
# 160 "../HPL_dlaswp01T.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(9793, (unsigned long )(& i), (long long )i);
      __CrestLoad(9792, (unsigned long )(& M), (long long )M);
      __CrestApply2(9791, 16, (long long )(i < (int )M));
# 160 "../HPL_dlaswp01T.c"
      if (i < (int )M) {
        __CrestBranch(9794, 3769, 1);

      } else {
        __CrestBranch(9795, 3770, 0);
# 160 "../HPL_dlaswp01T.c"
        goto while_break___0;
      }
      }
# 162 "../HPL_dlaswp01T.c"
      mem_17 = LINDXA + i;
# 162 "../HPL_dlaswp01T.c"
      a0 = A + *mem_17;
      {
# 164 "../HPL_dlaswp01T.c"
      mem_18 = LINDXAU + i;
      {
      __CrestLoad(9798, (unsigned long )mem_18, (long long )*mem_18);
      __CrestLoad(9797, (unsigned long )0, (long long )0);
      __CrestApply2(9796, 17, (long long )(*mem_18 >= 0));
# 164 "../HPL_dlaswp01T.c"
      if (*mem_18 >= 0) {
        __CrestBranch(9799, 3775, 1);
# 166 "../HPL_dlaswp01T.c"
        mem_19 = LINDXAU + i;
# 166 "../HPL_dlaswp01T.c"
        a1 = U + *mem_19 * LDU;
# 168 "../HPL_dlaswp01T.c"
        mem_20 = a1 + 0;
# 168 "../HPL_dlaswp01T.c"
        *mem_20 = *a0;
# 168 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 170 "../HPL_dlaswp01T.c"
        mem_21 = a1 + 1;
# 170 "../HPL_dlaswp01T.c"
        *mem_21 = *a0;
# 170 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 173 "../HPL_dlaswp01T.c"
        mem_22 = a1 + 2;
# 173 "../HPL_dlaswp01T.c"
        *mem_22 = *a0;
# 173 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 173 "../HPL_dlaswp01T.c"
        mem_23 = a1 + 3;
# 173 "../HPL_dlaswp01T.c"
        *mem_23 = *a0;
# 173 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 176 "../HPL_dlaswp01T.c"
        mem_24 = a1 + 4;
# 176 "../HPL_dlaswp01T.c"
        *mem_24 = *a0;
# 176 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 176 "../HPL_dlaswp01T.c"
        mem_25 = a1 + 5;
# 176 "../HPL_dlaswp01T.c"
        *mem_25 = *a0;
# 176 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 177 "../HPL_dlaswp01T.c"
        mem_26 = a1 + 6;
# 177 "../HPL_dlaswp01T.c"
        *mem_26 = *a0;
# 177 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 177 "../HPL_dlaswp01T.c"
        mem_27 = a1 + 7;
# 177 "../HPL_dlaswp01T.c"
        *mem_27 = *a0;
# 177 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 180 "../HPL_dlaswp01T.c"
        mem_28 = a1 + 8;
# 180 "../HPL_dlaswp01T.c"
        *mem_28 = *a0;
# 180 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 180 "../HPL_dlaswp01T.c"
        mem_29 = a1 + 9;
# 180 "../HPL_dlaswp01T.c"
        *mem_29 = *a0;
# 180 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 181 "../HPL_dlaswp01T.c"
        mem_30 = a1 + 10;
# 181 "../HPL_dlaswp01T.c"
        *mem_30 = *a0;
# 181 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 181 "../HPL_dlaswp01T.c"
        mem_31 = a1 + 11;
# 181 "../HPL_dlaswp01T.c"
        *mem_31 = *a0;
# 181 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 182 "../HPL_dlaswp01T.c"
        mem_32 = a1 + 12;
# 182 "../HPL_dlaswp01T.c"
        *mem_32 = *a0;
# 182 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 182 "../HPL_dlaswp01T.c"
        mem_33 = a1 + 13;
# 182 "../HPL_dlaswp01T.c"
        *mem_33 = *a0;
# 182 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 183 "../HPL_dlaswp01T.c"
        mem_34 = a1 + 14;
# 183 "../HPL_dlaswp01T.c"
        *mem_34 = *a0;
# 183 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 183 "../HPL_dlaswp01T.c"
        mem_35 = a1 + 15;
# 183 "../HPL_dlaswp01T.c"
        *mem_35 = *a0;
# 183 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 186 "../HPL_dlaswp01T.c"
        mem_36 = a1 + 16;
# 186 "../HPL_dlaswp01T.c"
        *mem_36 = *a0;
# 186 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 186 "../HPL_dlaswp01T.c"
        mem_37 = a1 + 17;
# 186 "../HPL_dlaswp01T.c"
        *mem_37 = *a0;
# 186 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 187 "../HPL_dlaswp01T.c"
        mem_38 = a1 + 18;
# 187 "../HPL_dlaswp01T.c"
        *mem_38 = *a0;
# 187 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 187 "../HPL_dlaswp01T.c"
        mem_39 = a1 + 19;
# 187 "../HPL_dlaswp01T.c"
        *mem_39 = *a0;
# 187 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 188 "../HPL_dlaswp01T.c"
        mem_40 = a1 + 20;
# 188 "../HPL_dlaswp01T.c"
        *mem_40 = *a0;
# 188 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 188 "../HPL_dlaswp01T.c"
        mem_41 = a1 + 21;
# 188 "../HPL_dlaswp01T.c"
        *mem_41 = *a0;
# 188 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 189 "../HPL_dlaswp01T.c"
        mem_42 = a1 + 22;
# 189 "../HPL_dlaswp01T.c"
        *mem_42 = *a0;
# 189 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 189 "../HPL_dlaswp01T.c"
        mem_43 = a1 + 23;
# 189 "../HPL_dlaswp01T.c"
        *mem_43 = *a0;
# 189 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 190 "../HPL_dlaswp01T.c"
        mem_44 = a1 + 24;
# 190 "../HPL_dlaswp01T.c"
        *mem_44 = *a0;
# 190 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 190 "../HPL_dlaswp01T.c"
        mem_45 = a1 + 25;
# 190 "../HPL_dlaswp01T.c"
        *mem_45 = *a0;
# 190 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 191 "../HPL_dlaswp01T.c"
        mem_46 = a1 + 26;
# 191 "../HPL_dlaswp01T.c"
        *mem_46 = *a0;
# 191 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 191 "../HPL_dlaswp01T.c"
        mem_47 = a1 + 27;
# 191 "../HPL_dlaswp01T.c"
        *mem_47 = *a0;
# 191 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 192 "../HPL_dlaswp01T.c"
        mem_48 = a1 + 28;
# 192 "../HPL_dlaswp01T.c"
        *mem_48 = *a0;
# 192 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 192 "../HPL_dlaswp01T.c"
        mem_49 = a1 + 29;
# 192 "../HPL_dlaswp01T.c"
        *mem_49 = *a0;
# 192 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 193 "../HPL_dlaswp01T.c"
        mem_50 = a1 + 30;
# 193 "../HPL_dlaswp01T.c"
        *mem_50 = *a0;
# 193 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 193 "../HPL_dlaswp01T.c"
        mem_51 = a1 + 31;
# 193 "../HPL_dlaswp01T.c"
        *mem_51 = *a0;
# 193 "../HPL_dlaswp01T.c"
        a0 += LDA;
      } else {
        __CrestBranch(9800, 3776, 0);
# 198 "../HPL_dlaswp01T.c"
        mem_52 = LINDXAU + i;
# 198 "../HPL_dlaswp01T.c"
        a1 = A - *mem_52;
# 200 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 200 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 200 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 202 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 202 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 202 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 205 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 205 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 205 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 205 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 205 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 205 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 208 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 208 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 208 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 208 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 208 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 208 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 209 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 209 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 209 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 209 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 209 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 209 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 212 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 212 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 212 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 212 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 212 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 212 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 213 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 213 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 213 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 213 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 213 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 213 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 214 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 214 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 214 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 214 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 214 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 214 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 215 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 215 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 215 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 215 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 215 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 215 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 218 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 218 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 218 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 218 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 218 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 218 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 219 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 219 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 219 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 219 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 219 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 219 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 220 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 220 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 220 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 220 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 220 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 220 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 221 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 221 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 221 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 221 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 221 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 221 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 222 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 222 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 222 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 222 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 222 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 222 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 223 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 223 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 223 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 223 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 223 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 223 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 224 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 224 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 224 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 224 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 224 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 224 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 225 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 225 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 225 "../HPL_dlaswp01T.c"
        a0 += LDA;
# 225 "../HPL_dlaswp01T.c"
        *a1 = *a0;
# 225 "../HPL_dlaswp01T.c"
        a1 += LDA;
# 225 "../HPL_dlaswp01T.c"
        a0 += LDA;
      }
      }
      }
      __CrestLoad(9803, (unsigned long )(& i), (long long )i);
      __CrestLoad(9802, (unsigned long )0, (long long )1);
      __CrestApply2(9801, 0, (long long )(i + 1));
      __CrestStore(9804, (unsigned long )(& i));
# 160 "../HPL_dlaswp01T.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(9807, (unsigned long )(& j), (long long )j);
    __CrestLoad(9806, (unsigned long )0, (long long )32);
    __CrestApply2(9805, 0, (long long )(j + 32));
    __CrestStore(9808, (unsigned long )(& j));
# 158 "../HPL_dlaswp01T.c"
    j += 32;
# 158 "../HPL_dlaswp01T.c"
    A += incA;
# 158 "../HPL_dlaswp01T.c"
    U += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(9811, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(9810, (unsigned long )0, (long long )0);
  __CrestApply2(9809, 14, (long long )(nr > 0));
# 231 "../HPL_dlaswp01T.c"
  if (nr > 0) {
    __CrestBranch(9812, 3782, 1);
    __CrestLoad(9814, (unsigned long )0, (long long )0);
    __CrestStore(9815, (unsigned long )(& i));
# 233 "../HPL_dlaswp01T.c"
    i = 0;
    {
# 233 "../HPL_dlaswp01T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(9818, (unsigned long )(& i), (long long )i);
      __CrestLoad(9817, (unsigned long )(& M), (long long )M);
      __CrestApply2(9816, 16, (long long )(i < (int )M));
# 233 "../HPL_dlaswp01T.c"
      if (i < (int )M) {
        __CrestBranch(9819, 3787, 1);

      } else {
        __CrestBranch(9820, 3788, 0);
# 233 "../HPL_dlaswp01T.c"
        goto while_break___1;
      }
      }
# 235 "../HPL_dlaswp01T.c"
      mem_53 = LINDXA + i;
# 235 "../HPL_dlaswp01T.c"
      a0 = A + *mem_53;
      {
# 237 "../HPL_dlaswp01T.c"
      mem_54 = LINDXAU + i;
      {
      __CrestLoad(9823, (unsigned long )mem_54, (long long )*mem_54);
      __CrestLoad(9822, (unsigned long )0, (long long )0);
      __CrestApply2(9821, 17, (long long )(*mem_54 >= 0));
# 237 "../HPL_dlaswp01T.c"
      if (*mem_54 >= 0) {
        __CrestBranch(9824, 3793, 1);
# 239 "../HPL_dlaswp01T.c"
        mem_55 = LINDXAU + i;
# 239 "../HPL_dlaswp01T.c"
        a1 = U + *mem_55 * LDU;
        __CrestLoad(9826, (unsigned long )0, (long long )0);
        __CrestStore(9827, (unsigned long )(& j));
# 240 "../HPL_dlaswp01T.c"
        j = 0;
        {
# 240 "../HPL_dlaswp01T.c"
        while (1) {
          while_continue___2: ;
          {
          __CrestLoad(9830, (unsigned long )(& j), (long long )j);
          __CrestLoad(9829, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(9828, 16, (long long )(j < nr));
# 240 "../HPL_dlaswp01T.c"
          if (j < nr) {
            __CrestBranch(9831, 3798, 1);

          } else {
            __CrestBranch(9832, 3799, 0);
# 240 "../HPL_dlaswp01T.c"
            goto while_break___2;
          }
          }
# 240 "../HPL_dlaswp01T.c"
          mem_56 = a1 + j;
# 240 "../HPL_dlaswp01T.c"
          *mem_56 = *a0;
          __CrestLoad(9835, (unsigned long )(& j), (long long )j);
          __CrestLoad(9834, (unsigned long )0, (long long )1);
          __CrestApply2(9833, 0, (long long )(j + 1));
          __CrestStore(9836, (unsigned long )(& j));
# 240 "../HPL_dlaswp01T.c"
          j ++;
# 240 "../HPL_dlaswp01T.c"
          a0 += LDA;
        }
        while_break___2: ;
        }
      } else {
        __CrestBranch(9825, 3802, 0);
# 244 "../HPL_dlaswp01T.c"
        mem_57 = LINDXAU + i;
# 244 "../HPL_dlaswp01T.c"
        a1 = A - *mem_57;
        __CrestLoad(9837, (unsigned long )0, (long long )0);
        __CrestStore(9838, (unsigned long )(& j));
# 245 "../HPL_dlaswp01T.c"
        j = 0;
        {
# 245 "../HPL_dlaswp01T.c"
        while (1) {
          while_continue___3: ;
          {
          __CrestLoad(9841, (unsigned long )(& j), (long long )j);
          __CrestLoad(9840, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(9839, 16, (long long )(j < nr));
# 245 "../HPL_dlaswp01T.c"
          if (j < nr) {
            __CrestBranch(9842, 3807, 1);

          } else {
            __CrestBranch(9843, 3808, 0);
# 245 "../HPL_dlaswp01T.c"
            goto while_break___3;
          }
          }
# 245 "../HPL_dlaswp01T.c"
          *a1 = *a0;
          __CrestLoad(9846, (unsigned long )(& j), (long long )j);
          __CrestLoad(9845, (unsigned long )0, (long long )1);
          __CrestApply2(9844, 0, (long long )(j + 1));
          __CrestStore(9847, (unsigned long )(& j));
# 245 "../HPL_dlaswp01T.c"
          j ++;
# 245 "../HPL_dlaswp01T.c"
          a1 += LDA;
# 245 "../HPL_dlaswp01T.c"
          a0 += LDA;
        }
        while_break___3: ;
        }
      }
      }
      }
      __CrestLoad(9850, (unsigned long )(& i), (long long )i);
      __CrestLoad(9849, (unsigned long )0, (long long )1);
      __CrestApply2(9848, 0, (long long )(i + 1));
      __CrestStore(9851, (unsigned long )(& i));
# 233 "../HPL_dlaswp01T.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(9813, 3813, 0);

  }
  }

  return_label:
  {
  __CrestReturn(9852);
# 60 "../HPL_dlaswp01T.c"
  return;
  }
}
}
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 354 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp02N(int const M , int const N , double const *A , int const LDA ,
                   double *W0 , double *W , int const LDW , int const *LINDXA ,
                   int const *LINDXAU ) ;
# 60 "../HPL_dlaswp02N.c"
void HPL_dlaswp02N(int const M , int const N , double const *A , int const LDA ,
                   double *W0 , double *W , int const LDW , int const *LINDXA ,
                   int const *LINDXAU )
{
  double const *A0 ;
  double const *a0 ;
  double *w0 ;
  int incA ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  double *mem_18 ;
  int const *mem_19 ;
  int const *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double *mem_30 ;
  double *mem_31 ;
  double *mem_32 ;
  double *mem_33 ;
  double *mem_34 ;
  double *mem_35 ;
  double *mem_36 ;
  double *mem_37 ;
  double *mem_38 ;
  double *mem_39 ;
  double *mem_40 ;
  double *mem_41 ;
  double *mem_42 ;
  double *mem_43 ;
  double *mem_44 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double *mem_51 ;
  double *mem_52 ;
  int const *mem_53 ;
  double *mem_54 ;

  {
  __CrestCall(9857, 63);
  __CrestStore(9856, (unsigned long )(& LDW));
  __CrestStore(9855, (unsigned long )(& LDA));
  __CrestStore(9854, (unsigned long )(& N));
  __CrestStore(9853, (unsigned long )(& M));
# 140 "../HPL_dlaswp02N.c"
  A0 = A;
  __CrestLoad(9860, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(9859, (unsigned long )0, (long long )5);
  __CrestApply2(9858, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(9861, (unsigned long )(& incA));
# 142 "../HPL_dlaswp02N.c"
  incA = (int )((unsigned int )LDA << 5);
  {
  __CrestLoad(9864, (unsigned long )(& M), (long long )M);
  __CrestLoad(9863, (unsigned long )0, (long long )0);
  __CrestApply2(9862, 15, (long long )(M <= 0));
# 149 "../HPL_dlaswp02N.c"
  if (M <= 0) {
    __CrestBranch(9865, 3818, 1);
# 149 "../HPL_dlaswp02N.c"
    goto return_label;
  } else {
    __CrestBranch(9866, 3820, 0);
    {
    __CrestLoad(9869, (unsigned long )(& N), (long long )N);
    __CrestLoad(9868, (unsigned long )0, (long long )0);
    __CrestApply2(9867, 15, (long long )(N <= 0));
# 149 "../HPL_dlaswp02N.c"
    if (N <= 0) {
      __CrestBranch(9870, 3821, 1);
# 149 "../HPL_dlaswp02N.c"
      goto return_label;
    } else {
      __CrestBranch(9871, 3823, 0);

    }
    }
  }
  }
  __CrestLoad(9872, (unsigned long )0, (long long )0);
  __CrestStore(9873, (unsigned long )(& i));
# 151 "../HPL_dlaswp02N.c"
  i = 0;
  {
# 151 "../HPL_dlaswp02N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9876, (unsigned long )(& i), (long long )i);
    __CrestLoad(9875, (unsigned long )(& M), (long long )M);
    __CrestApply2(9874, 16, (long long )(i < (int )M));
# 151 "../HPL_dlaswp02N.c"
    if (i < (int )M) {
      __CrestBranch(9877, 3829, 1);

    } else {
      __CrestBranch(9878, 3830, 0);
# 151 "../HPL_dlaswp02N.c"
      goto while_break;
    }
    }
# 151 "../HPL_dlaswp02N.c"
    mem_18 = W0 + i * (int )LDW;
# 151 "../HPL_dlaswp02N.c"
    mem_19 = LINDXAU + i;
# 151 "../HPL_dlaswp02N.c"
    *mem_18 = (double )*mem_19;
    __CrestLoad(9881, (unsigned long )(& i), (long long )i);
    __CrestLoad(9880, (unsigned long )0, (long long )1);
    __CrestApply2(9879, 0, (long long )(i + 1));
    __CrestStore(9882, (unsigned long )(& i));
# 151 "../HPL_dlaswp02N.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(9887, (unsigned long )(& N), (long long )N);
  __CrestLoad(9886, (unsigned long )0, (long long )5);
  __CrestApply2(9885, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(9884, (unsigned long )0, (long long )5);
  __CrestApply2(9883, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(9888, (unsigned long )(& nu));
# 153 "../HPL_dlaswp02N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(9891, (unsigned long )(& N), (long long )N);
  __CrestLoad(9890, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(9889, 1, (long long )(N - (int const )nu));
  __CrestStore(9892, (unsigned long )(& nr));
# 153 "../HPL_dlaswp02N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(9893, (unsigned long )0, (long long )0);
  __CrestStore(9894, (unsigned long )(& j));
# 156 "../HPL_dlaswp02N.c"
  j = 0;
  {
# 156 "../HPL_dlaswp02N.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(9897, (unsigned long )(& j), (long long )j);
    __CrestLoad(9896, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(9895, 16, (long long )(j < nu));
# 156 "../HPL_dlaswp02N.c"
    if (j < nu) {
      __CrestBranch(9898, 3838, 1);

    } else {
      __CrestBranch(9899, 3839, 0);
# 156 "../HPL_dlaswp02N.c"
      goto while_break___0;
    }
    }
    __CrestLoad(9900, (unsigned long )0, (long long )0);
    __CrestStore(9901, (unsigned long )(& i));
# 159 "../HPL_dlaswp02N.c"
    i = 0;
    {
# 159 "../HPL_dlaswp02N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(9904, (unsigned long )(& i), (long long )i);
      __CrestLoad(9903, (unsigned long )(& M), (long long )M);
      __CrestApply2(9902, 16, (long long )(i < (int )M));
# 159 "../HPL_dlaswp02N.c"
      if (i < (int )M) {
        __CrestBranch(9905, 3845, 1);

      } else {
        __CrestBranch(9906, 3846, 0);
# 159 "../HPL_dlaswp02N.c"
        goto while_break___1;
      }
      }
# 161 "../HPL_dlaswp02N.c"
      mem_20 = LINDXA + i;
# 161 "../HPL_dlaswp02N.c"
      a0 = A0 + *mem_20;
# 161 "../HPL_dlaswp02N.c"
      w0 = W + i * (int )LDW;
# 163 "../HPL_dlaswp02N.c"
      mem_21 = w0 + 0;
# 163 "../HPL_dlaswp02N.c"
      *mem_21 = (double )*a0;
# 163 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 165 "../HPL_dlaswp02N.c"
      mem_22 = w0 + 1;
# 165 "../HPL_dlaswp02N.c"
      *mem_22 = (double )*a0;
# 165 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp02N.c"
      mem_23 = w0 + 2;
# 168 "../HPL_dlaswp02N.c"
      *mem_23 = (double )*a0;
# 168 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp02N.c"
      mem_24 = w0 + 3;
# 168 "../HPL_dlaswp02N.c"
      *mem_24 = (double )*a0;
# 168 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 171 "../HPL_dlaswp02N.c"
      mem_25 = w0 + 4;
# 171 "../HPL_dlaswp02N.c"
      *mem_25 = (double )*a0;
# 171 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 171 "../HPL_dlaswp02N.c"
      mem_26 = w0 + 5;
# 171 "../HPL_dlaswp02N.c"
      *mem_26 = (double )*a0;
# 171 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 172 "../HPL_dlaswp02N.c"
      mem_27 = w0 + 6;
# 172 "../HPL_dlaswp02N.c"
      *mem_27 = (double )*a0;
# 172 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 172 "../HPL_dlaswp02N.c"
      mem_28 = w0 + 7;
# 172 "../HPL_dlaswp02N.c"
      *mem_28 = (double )*a0;
# 172 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp02N.c"
      mem_29 = w0 + 8;
# 175 "../HPL_dlaswp02N.c"
      *mem_29 = (double )*a0;
# 175 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp02N.c"
      mem_30 = w0 + 9;
# 175 "../HPL_dlaswp02N.c"
      *mem_30 = (double )*a0;
# 175 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 176 "../HPL_dlaswp02N.c"
      mem_31 = w0 + 10;
# 176 "../HPL_dlaswp02N.c"
      *mem_31 = (double )*a0;
# 176 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 176 "../HPL_dlaswp02N.c"
      mem_32 = w0 + 11;
# 176 "../HPL_dlaswp02N.c"
      *mem_32 = (double )*a0;
# 176 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 177 "../HPL_dlaswp02N.c"
      mem_33 = w0 + 12;
# 177 "../HPL_dlaswp02N.c"
      *mem_33 = (double )*a0;
# 177 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 177 "../HPL_dlaswp02N.c"
      mem_34 = w0 + 13;
# 177 "../HPL_dlaswp02N.c"
      *mem_34 = (double )*a0;
# 177 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp02N.c"
      mem_35 = w0 + 14;
# 178 "../HPL_dlaswp02N.c"
      *mem_35 = (double )*a0;
# 178 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp02N.c"
      mem_36 = w0 + 15;
# 178 "../HPL_dlaswp02N.c"
      *mem_36 = (double )*a0;
# 178 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 181 "../HPL_dlaswp02N.c"
      mem_37 = w0 + 16;
# 181 "../HPL_dlaswp02N.c"
      *mem_37 = (double )*a0;
# 181 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 181 "../HPL_dlaswp02N.c"
      mem_38 = w0 + 17;
# 181 "../HPL_dlaswp02N.c"
      *mem_38 = (double )*a0;
# 181 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 182 "../HPL_dlaswp02N.c"
      mem_39 = w0 + 18;
# 182 "../HPL_dlaswp02N.c"
      *mem_39 = (double )*a0;
# 182 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 182 "../HPL_dlaswp02N.c"
      mem_40 = w0 + 19;
# 182 "../HPL_dlaswp02N.c"
      *mem_40 = (double )*a0;
# 182 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 183 "../HPL_dlaswp02N.c"
      mem_41 = w0 + 20;
# 183 "../HPL_dlaswp02N.c"
      *mem_41 = (double )*a0;
# 183 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 183 "../HPL_dlaswp02N.c"
      mem_42 = w0 + 21;
# 183 "../HPL_dlaswp02N.c"
      *mem_42 = (double )*a0;
# 183 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp02N.c"
      mem_43 = w0 + 22;
# 184 "../HPL_dlaswp02N.c"
      *mem_43 = (double )*a0;
# 184 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp02N.c"
      mem_44 = w0 + 23;
# 184 "../HPL_dlaswp02N.c"
      *mem_44 = (double )*a0;
# 184 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 185 "../HPL_dlaswp02N.c"
      mem_45 = w0 + 24;
# 185 "../HPL_dlaswp02N.c"
      *mem_45 = (double )*a0;
# 185 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 185 "../HPL_dlaswp02N.c"
      mem_46 = w0 + 25;
# 185 "../HPL_dlaswp02N.c"
      *mem_46 = (double )*a0;
# 185 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp02N.c"
      mem_47 = w0 + 26;
# 186 "../HPL_dlaswp02N.c"
      *mem_47 = (double )*a0;
# 186 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp02N.c"
      mem_48 = w0 + 27;
# 186 "../HPL_dlaswp02N.c"
      *mem_48 = (double )*a0;
# 186 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 187 "../HPL_dlaswp02N.c"
      mem_49 = w0 + 28;
# 187 "../HPL_dlaswp02N.c"
      *mem_49 = (double )*a0;
# 187 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 187 "../HPL_dlaswp02N.c"
      mem_50 = w0 + 29;
# 187 "../HPL_dlaswp02N.c"
      *mem_50 = (double )*a0;
# 187 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 188 "../HPL_dlaswp02N.c"
      mem_51 = w0 + 30;
# 188 "../HPL_dlaswp02N.c"
      *mem_51 = (double )*a0;
# 188 "../HPL_dlaswp02N.c"
      a0 += LDA;
# 188 "../HPL_dlaswp02N.c"
      mem_52 = w0 + 31;
# 188 "../HPL_dlaswp02N.c"
      *mem_52 = (double )*a0;
# 188 "../HPL_dlaswp02N.c"
      a0 += LDA;
      __CrestLoad(9909, (unsigned long )(& i), (long long )i);
      __CrestLoad(9908, (unsigned long )0, (long long )1);
      __CrestApply2(9907, 0, (long long )(i + 1));
      __CrestStore(9910, (unsigned long )(& i));
# 159 "../HPL_dlaswp02N.c"
      i ++;
    }
    while_break___1: ;
    }
    __CrestLoad(9913, (unsigned long )(& j), (long long )j);
    __CrestLoad(9912, (unsigned long )0, (long long )32);
    __CrestApply2(9911, 0, (long long )(j + 32));
    __CrestStore(9914, (unsigned long )(& j));
# 156 "../HPL_dlaswp02N.c"
    j += 32;
# 156 "../HPL_dlaswp02N.c"
    A0 += incA;
# 156 "../HPL_dlaswp02N.c"
    W += 32;
  }
  while_break___0: ;
  }
  {
  __CrestLoad(9917, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(9916, (unsigned long )0, (long long )0);
  __CrestApply2(9915, 14, (long long )(nr > 0));
# 193 "../HPL_dlaswp02N.c"
  if (nr > 0) {
    __CrestBranch(9918, 3852, 1);
    __CrestLoad(9920, (unsigned long )0, (long long )0);
    __CrestStore(9921, (unsigned long )(& i));
# 195 "../HPL_dlaswp02N.c"
    i = 0;
    {
# 195 "../HPL_dlaswp02N.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(9924, (unsigned long )(& i), (long long )i);
      __CrestLoad(9923, (unsigned long )(& M), (long long )M);
      __CrestApply2(9922, 16, (long long )(i < (int )M));
# 195 "../HPL_dlaswp02N.c"
      if (i < (int )M) {
        __CrestBranch(9925, 3857, 1);

      } else {
        __CrestBranch(9926, 3858, 0);
# 195 "../HPL_dlaswp02N.c"
        goto while_break___2;
      }
      }
# 197 "../HPL_dlaswp02N.c"
      mem_53 = LINDXA + i;
# 197 "../HPL_dlaswp02N.c"
      a0 = A0 + *mem_53;
# 197 "../HPL_dlaswp02N.c"
      w0 = W + i * (int )LDW;
      __CrestLoad(9927, (unsigned long )0, (long long )0);
      __CrestStore(9928, (unsigned long )(& j));
# 198 "../HPL_dlaswp02N.c"
      j = 0;
      {
# 198 "../HPL_dlaswp02N.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(9931, (unsigned long )(& j), (long long )j);
        __CrestLoad(9930, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(9929, 16, (long long )(j < nr));
# 198 "../HPL_dlaswp02N.c"
        if (j < nr) {
          __CrestBranch(9932, 3864, 1);

        } else {
          __CrestBranch(9933, 3865, 0);
# 198 "../HPL_dlaswp02N.c"
          goto while_break___3;
        }
        }
# 198 "../HPL_dlaswp02N.c"
        mem_54 = w0 + j;
# 198 "../HPL_dlaswp02N.c"
        *mem_54 = (double )*a0;
        __CrestLoad(9936, (unsigned long )(& j), (long long )j);
        __CrestLoad(9935, (unsigned long )0, (long long )1);
        __CrestApply2(9934, 0, (long long )(j + 1));
        __CrestStore(9937, (unsigned long )(& j));
# 198 "../HPL_dlaswp02N.c"
        j ++;
# 198 "../HPL_dlaswp02N.c"
        a0 += LDA;
      }
      while_break___3: ;
      }
      __CrestLoad(9940, (unsigned long )(& i), (long long )i);
      __CrestLoad(9939, (unsigned long )0, (long long )1);
      __CrestApply2(9938, 0, (long long )(i + 1));
      __CrestStore(9941, (unsigned long )(& i));
# 195 "../HPL_dlaswp02N.c"
      i ++;
    }
    while_break___2: ;
    }
  } else {
    __CrestBranch(9919, 3870, 0);

  }
  }

  return_label:
  {
  __CrestReturn(9942);
# 60 "../HPL_dlaswp02N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 366 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp03N(int const M , int const N , double *U , int const LDU , double const *W0 ,
                   double const *W , int const LDW ) ;
# 60 "../HPL_dlaswp03N.c"
void HPL_dlaswp03N(int const M , int const N , double *U , int const LDU , double const *W0 ,
                   double const *W , int const LDW )
{
  double const *w ;
  double const *w0 ;
  double *u0 ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  double const *mem_16 ;
  double const *mem_17 ;
  double const *mem_18 ;
  double const *mem_19 ;
  double const *mem_20 ;
  double const *mem_21 ;
  double const *mem_22 ;
  double const *mem_23 ;
  double const *mem_24 ;
  double const *mem_25 ;
  double const *mem_26 ;
  double const *mem_27 ;
  double const *mem_28 ;
  double const *mem_29 ;
  double const *mem_30 ;
  double const *mem_31 ;
  double const *mem_32 ;
  double const *mem_33 ;
  double const *mem_34 ;
  double const *mem_35 ;
  double const *mem_36 ;
  double const *mem_37 ;
  double const *mem_38 ;
  double const *mem_39 ;
  double const *mem_40 ;
  double const *mem_41 ;
  double const *mem_42 ;
  double const *mem_43 ;
  double const *mem_44 ;
  double const *mem_45 ;
  double const *mem_46 ;
  double const *mem_47 ;
  double const *mem_48 ;
  double const *mem_49 ;
  double const *mem_50 ;

  {
  __CrestCall(9947, 64);
  __CrestStore(9946, (unsigned long )(& LDW));
  __CrestStore(9945, (unsigned long )(& LDU));
  __CrestStore(9944, (unsigned long )(& N));
  __CrestStore(9943, (unsigned long )(& M));
# 130 "../HPL_dlaswp03N.c"
  w = W;
  __CrestLoad(9950, (unsigned long )(& LDU), (long long )LDU);
  __CrestLoad(9949, (unsigned long )0, (long long )5);
  __CrestApply2(9948, 8, (long long )((unsigned int )LDU << 5));
  __CrestStore(9951, (unsigned long )(& incU));
# 132 "../HPL_dlaswp03N.c"
  incU = (int )((unsigned int )LDU << 5);
  {
  __CrestLoad(9954, (unsigned long )(& M), (long long )M);
  __CrestLoad(9953, (unsigned long )0, (long long )0);
  __CrestApply2(9952, 15, (long long )(M <= 0));
# 139 "../HPL_dlaswp03N.c"
  if (M <= 0) {
    __CrestBranch(9955, 3875, 1);
# 139 "../HPL_dlaswp03N.c"
    goto return_label;
  } else {
    __CrestBranch(9956, 3877, 0);
    {
    __CrestLoad(9959, (unsigned long )(& N), (long long )N);
    __CrestLoad(9958, (unsigned long )0, (long long )0);
    __CrestApply2(9957, 15, (long long )(N <= 0));
# 139 "../HPL_dlaswp03N.c"
    if (N <= 0) {
      __CrestBranch(9960, 3878, 1);
# 139 "../HPL_dlaswp03N.c"
      goto return_label;
    } else {
      __CrestBranch(9961, 3880, 0);

    }
    }
  }
  }
  __CrestLoad(9966, (unsigned long )(& N), (long long )N);
  __CrestLoad(9965, (unsigned long )0, (long long )5);
  __CrestApply2(9964, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(9963, (unsigned long )0, (long long )5);
  __CrestApply2(9962, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(9967, (unsigned long )(& nu));
# 141 "../HPL_dlaswp03N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(9970, (unsigned long )(& N), (long long )N);
  __CrestLoad(9969, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(9968, 1, (long long )(N - (int const )nu));
  __CrestStore(9971, (unsigned long )(& nr));
# 141 "../HPL_dlaswp03N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(9972, (unsigned long )0, (long long )0);
  __CrestStore(9973, (unsigned long )(& j));
# 144 "../HPL_dlaswp03N.c"
  j = 0;
  {
# 144 "../HPL_dlaswp03N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(9976, (unsigned long )(& j), (long long )j);
    __CrestLoad(9975, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(9974, 16, (long long )(j < nu));
# 144 "../HPL_dlaswp03N.c"
    if (j < nu) {
      __CrestBranch(9977, 3886, 1);

    } else {
      __CrestBranch(9978, 3887, 0);
# 144 "../HPL_dlaswp03N.c"
      goto while_break;
    }
    }
    __CrestLoad(9979, (unsigned long )0, (long long )0);
    __CrestStore(9980, (unsigned long )(& i));
# 147 "../HPL_dlaswp03N.c"
    i = 0;
    {
# 147 "../HPL_dlaswp03N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(9983, (unsigned long )(& i), (long long )i);
      __CrestLoad(9982, (unsigned long )(& M), (long long )M);
      __CrestApply2(9981, 16, (long long )(i < (int )M));
# 147 "../HPL_dlaswp03N.c"
      if (i < (int )M) {
        __CrestBranch(9984, 3893, 1);

      } else {
        __CrestBranch(9985, 3894, 0);
# 147 "../HPL_dlaswp03N.c"
        goto while_break___0;
      }
      }
# 149 "../HPL_dlaswp03N.c"
      mem_16 = W0 + i * (int )LDW;
# 149 "../HPL_dlaswp03N.c"
      u0 = U + (int )*mem_16;
# 149 "../HPL_dlaswp03N.c"
      w0 = w + i * (int )LDW;
# 151 "../HPL_dlaswp03N.c"
      mem_17 = w0 + 0;
# 151 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_17;
# 151 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 153 "../HPL_dlaswp03N.c"
      mem_18 = w0 + 1;
# 153 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_18;
# 153 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 156 "../HPL_dlaswp03N.c"
      mem_19 = w0 + 2;
# 156 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_19;
# 156 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 156 "../HPL_dlaswp03N.c"
      mem_20 = w0 + 3;
# 156 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_20;
# 156 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 159 "../HPL_dlaswp03N.c"
      mem_21 = w0 + 4;
# 159 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_21;
# 159 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 159 "../HPL_dlaswp03N.c"
      mem_22 = w0 + 5;
# 159 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_22;
# 159 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 160 "../HPL_dlaswp03N.c"
      mem_23 = w0 + 6;
# 160 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_23;
# 160 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 160 "../HPL_dlaswp03N.c"
      mem_24 = w0 + 7;
# 160 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_24;
# 160 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 163 "../HPL_dlaswp03N.c"
      mem_25 = w0 + 8;
# 163 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_25;
# 163 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 163 "../HPL_dlaswp03N.c"
      mem_26 = w0 + 9;
# 163 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_26;
# 163 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 164 "../HPL_dlaswp03N.c"
      mem_27 = w0 + 10;
# 164 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_27;
# 164 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 164 "../HPL_dlaswp03N.c"
      mem_28 = w0 + 11;
# 164 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_28;
# 164 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 165 "../HPL_dlaswp03N.c"
      mem_29 = w0 + 12;
# 165 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_29;
# 165 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 165 "../HPL_dlaswp03N.c"
      mem_30 = w0 + 13;
# 165 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_30;
# 165 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 166 "../HPL_dlaswp03N.c"
      mem_31 = w0 + 14;
# 166 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_31;
# 166 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 166 "../HPL_dlaswp03N.c"
      mem_32 = w0 + 15;
# 166 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_32;
# 166 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 169 "../HPL_dlaswp03N.c"
      mem_33 = w0 + 16;
# 169 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_33;
# 169 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 169 "../HPL_dlaswp03N.c"
      mem_34 = w0 + 17;
# 169 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_34;
# 169 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 170 "../HPL_dlaswp03N.c"
      mem_35 = w0 + 18;
# 170 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_35;
# 170 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 170 "../HPL_dlaswp03N.c"
      mem_36 = w0 + 19;
# 170 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_36;
# 170 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 171 "../HPL_dlaswp03N.c"
      mem_37 = w0 + 20;
# 171 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_37;
# 171 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 171 "../HPL_dlaswp03N.c"
      mem_38 = w0 + 21;
# 171 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_38;
# 171 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 172 "../HPL_dlaswp03N.c"
      mem_39 = w0 + 22;
# 172 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_39;
# 172 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 172 "../HPL_dlaswp03N.c"
      mem_40 = w0 + 23;
# 172 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_40;
# 172 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 173 "../HPL_dlaswp03N.c"
      mem_41 = w0 + 24;
# 173 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_41;
# 173 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 173 "../HPL_dlaswp03N.c"
      mem_42 = w0 + 25;
# 173 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_42;
# 173 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 174 "../HPL_dlaswp03N.c"
      mem_43 = w0 + 26;
# 174 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_43;
# 174 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 174 "../HPL_dlaswp03N.c"
      mem_44 = w0 + 27;
# 174 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_44;
# 174 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 175 "../HPL_dlaswp03N.c"
      mem_45 = w0 + 28;
# 175 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_45;
# 175 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 175 "../HPL_dlaswp03N.c"
      mem_46 = w0 + 29;
# 175 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_46;
# 175 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 176 "../HPL_dlaswp03N.c"
      mem_47 = w0 + 30;
# 176 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_47;
# 176 "../HPL_dlaswp03N.c"
      u0 += LDU;
# 176 "../HPL_dlaswp03N.c"
      mem_48 = w0 + 31;
# 176 "../HPL_dlaswp03N.c"
      *u0 = (double )*mem_48;
# 176 "../HPL_dlaswp03N.c"
      u0 += LDU;
      __CrestLoad(9988, (unsigned long )(& i), (long long )i);
      __CrestLoad(9987, (unsigned long )0, (long long )1);
      __CrestApply2(9986, 0, (long long )(i + 1));
      __CrestStore(9989, (unsigned long )(& i));
# 147 "../HPL_dlaswp03N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(9992, (unsigned long )(& j), (long long )j);
    __CrestLoad(9991, (unsigned long )0, (long long )32);
    __CrestApply2(9990, 0, (long long )(j + 32));
    __CrestStore(9993, (unsigned long )(& j));
# 144 "../HPL_dlaswp03N.c"
    j += 32;
# 144 "../HPL_dlaswp03N.c"
    U += incU;
# 144 "../HPL_dlaswp03N.c"
    w += 32;
  }
  while_break: ;
  }
  {
  __CrestLoad(9996, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(9995, (unsigned long )0, (long long )0);
  __CrestApply2(9994, 13, (long long )(nr != 0));
# 181 "../HPL_dlaswp03N.c"
  if (nr != 0) {
    __CrestBranch(9997, 3900, 1);
    __CrestLoad(9999, (unsigned long )0, (long long )0);
    __CrestStore(10000, (unsigned long )(& i));
# 183 "../HPL_dlaswp03N.c"
    i = 0;
    {
# 183 "../HPL_dlaswp03N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10003, (unsigned long )(& i), (long long )i);
      __CrestLoad(10002, (unsigned long )(& M), (long long )M);
      __CrestApply2(10001, 16, (long long )(i < (int )M));
# 183 "../HPL_dlaswp03N.c"
      if (i < (int )M) {
        __CrestBranch(10004, 3905, 1);

      } else {
        __CrestBranch(10005, 3906, 0);
# 183 "../HPL_dlaswp03N.c"
        goto while_break___1;
      }
      }
# 185 "../HPL_dlaswp03N.c"
      mem_49 = W0 + i * (int )LDW;
# 185 "../HPL_dlaswp03N.c"
      u0 = U + (int )*mem_49;
# 185 "../HPL_dlaswp03N.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10006, (unsigned long )0, (long long )0);
      __CrestStore(10007, (unsigned long )(& j));
# 186 "../HPL_dlaswp03N.c"
      j = 0;
      {
# 186 "../HPL_dlaswp03N.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10010, (unsigned long )(& j), (long long )j);
        __CrestLoad(10009, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10008, 16, (long long )(j < nr));
# 186 "../HPL_dlaswp03N.c"
        if (j < nr) {
          __CrestBranch(10011, 3912, 1);

        } else {
          __CrestBranch(10012, 3913, 0);
# 186 "../HPL_dlaswp03N.c"
          goto while_break___2;
        }
        }
# 186 "../HPL_dlaswp03N.c"
        mem_50 = w0 + j;
# 186 "../HPL_dlaswp03N.c"
        *u0 = (double )*mem_50;
        __CrestLoad(10015, (unsigned long )(& j), (long long )j);
        __CrestLoad(10014, (unsigned long )0, (long long )1);
        __CrestApply2(10013, 0, (long long )(j + 1));
        __CrestStore(10016, (unsigned long )(& j));
# 186 "../HPL_dlaswp03N.c"
        j ++;
# 186 "../HPL_dlaswp03N.c"
        u0 += LDU;
      }
      while_break___2: ;
      }
      __CrestLoad(10019, (unsigned long )(& i), (long long )i);
      __CrestLoad(10018, (unsigned long )0, (long long )1);
      __CrestApply2(10017, 0, (long long )(i + 1));
      __CrestStore(10020, (unsigned long )(& i));
# 183 "../HPL_dlaswp03N.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(9998, 3918, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10021);
# 60 "../HPL_dlaswp03N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 376 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp03T(int const M , int const N , double *U , int const LDU , double const *W0 ,
                   double const *W , int const LDW ) ;
# 60 "../HPL_dlaswp03T.c"
void HPL_dlaswp03T(int const M , int const N , double *U , int const LDU , double const *W0 ,
                   double const *W , int const LDW )
{
  double const *w ;
  double const *w0 ;
  double *u0 ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  double const *mem_16 ;
  double *mem_17 ;
  double const *mem_18 ;
  double *mem_19 ;
  double const *mem_20 ;
  double *mem_21 ;
  double const *mem_22 ;
  double *mem_23 ;
  double const *mem_24 ;
  double *mem_25 ;
  double const *mem_26 ;
  double *mem_27 ;
  double const *mem_28 ;
  double *mem_29 ;
  double const *mem_30 ;
  double *mem_31 ;
  double const *mem_32 ;
  double *mem_33 ;
  double const *mem_34 ;
  double *mem_35 ;
  double const *mem_36 ;
  double *mem_37 ;
  double const *mem_38 ;
  double *mem_39 ;
  double const *mem_40 ;
  double *mem_41 ;
  double const *mem_42 ;
  double *mem_43 ;
  double const *mem_44 ;
  double *mem_45 ;
  double const *mem_46 ;
  double *mem_47 ;
  double const *mem_48 ;
  double *mem_49 ;
  double const *mem_50 ;
  double *mem_51 ;
  double const *mem_52 ;
  double *mem_53 ;
  double const *mem_54 ;
  double *mem_55 ;
  double const *mem_56 ;
  double *mem_57 ;
  double const *mem_58 ;
  double *mem_59 ;
  double const *mem_60 ;
  double *mem_61 ;
  double const *mem_62 ;
  double *mem_63 ;
  double const *mem_64 ;
  double *mem_65 ;
  double const *mem_66 ;
  double *mem_67 ;
  double const *mem_68 ;
  double *mem_69 ;
  double const *mem_70 ;
  double *mem_71 ;
  double const *mem_72 ;
  double *mem_73 ;
  double const *mem_74 ;
  double *mem_75 ;
  double const *mem_76 ;
  double *mem_77 ;
  double const *mem_78 ;
  double *mem_79 ;
  double const *mem_80 ;
  double const *mem_81 ;
  double *mem_82 ;
  double const *mem_83 ;

  {
  __CrestCall(10026, 65);
  __CrestStore(10025, (unsigned long )(& LDW));
  __CrestStore(10024, (unsigned long )(& LDU));
  __CrestStore(10023, (unsigned long )(& N));
  __CrestStore(10022, (unsigned long )(& M));
# 130 "../HPL_dlaswp03T.c"
  w = W;
  __CrestLoad(10027, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(10028, (unsigned long )(& incU));
# 132 "../HPL_dlaswp03T.c"
  incU = 1 << 5;
  {
  __CrestLoad(10031, (unsigned long )(& M), (long long )M);
  __CrestLoad(10030, (unsigned long )0, (long long )0);
  __CrestApply2(10029, 15, (long long )(M <= 0));
# 138 "../HPL_dlaswp03T.c"
  if (M <= 0) {
    __CrestBranch(10032, 3923, 1);
# 138 "../HPL_dlaswp03T.c"
    goto return_label;
  } else {
    __CrestBranch(10033, 3925, 0);
    {
    __CrestLoad(10036, (unsigned long )(& N), (long long )N);
    __CrestLoad(10035, (unsigned long )0, (long long )0);
    __CrestApply2(10034, 15, (long long )(N <= 0));
# 138 "../HPL_dlaswp03T.c"
    if (N <= 0) {
      __CrestBranch(10037, 3926, 1);
# 138 "../HPL_dlaswp03T.c"
      goto return_label;
    } else {
      __CrestBranch(10038, 3928, 0);

    }
    }
  }
  }
  __CrestLoad(10043, (unsigned long )(& N), (long long )N);
  __CrestLoad(10042, (unsigned long )0, (long long )5);
  __CrestApply2(10041, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10040, (unsigned long )0, (long long )5);
  __CrestApply2(10039, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10044, (unsigned long )(& nu));
# 140 "../HPL_dlaswp03T.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10047, (unsigned long )(& N), (long long )N);
  __CrestLoad(10046, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10045, 1, (long long )(N - (int const )nu));
  __CrestStore(10048, (unsigned long )(& nr));
# 140 "../HPL_dlaswp03T.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10049, (unsigned long )0, (long long )0);
  __CrestStore(10050, (unsigned long )(& j));
# 143 "../HPL_dlaswp03T.c"
  j = 0;
  {
# 143 "../HPL_dlaswp03T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10053, (unsigned long )(& j), (long long )j);
    __CrestLoad(10052, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10051, 16, (long long )(j < nu));
# 143 "../HPL_dlaswp03T.c"
    if (j < nu) {
      __CrestBranch(10054, 3934, 1);

    } else {
      __CrestBranch(10055, 3935, 0);
# 143 "../HPL_dlaswp03T.c"
      goto while_break;
    }
    }
    __CrestLoad(10056, (unsigned long )0, (long long )0);
    __CrestStore(10057, (unsigned long )(& i));
# 146 "../HPL_dlaswp03T.c"
    i = 0;
    {
# 146 "../HPL_dlaswp03T.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10060, (unsigned long )(& i), (long long )i);
      __CrestLoad(10059, (unsigned long )(& M), (long long )M);
      __CrestApply2(10058, 16, (long long )(i < (int )M));
# 146 "../HPL_dlaswp03T.c"
      if (i < (int )M) {
        __CrestBranch(10061, 3941, 1);

      } else {
        __CrestBranch(10062, 3942, 0);
# 146 "../HPL_dlaswp03T.c"
        goto while_break___0;
      }
      }
# 148 "../HPL_dlaswp03T.c"
      mem_16 = W0 + i * (int )LDW;
# 148 "../HPL_dlaswp03T.c"
      u0 = U + (int )*mem_16 * (int )LDU;
# 148 "../HPL_dlaswp03T.c"
      w0 = w + i * (int )LDW;
# 150 "../HPL_dlaswp03T.c"
      mem_17 = u0 + 0;
# 150 "../HPL_dlaswp03T.c"
      mem_18 = w0 + 0;
# 150 "../HPL_dlaswp03T.c"
      *mem_17 = (double )*mem_18;
# 152 "../HPL_dlaswp03T.c"
      mem_19 = u0 + 1;
# 152 "../HPL_dlaswp03T.c"
      mem_20 = w0 + 1;
# 152 "../HPL_dlaswp03T.c"
      *mem_19 = (double )*mem_20;
# 155 "../HPL_dlaswp03T.c"
      mem_21 = u0 + 2;
# 155 "../HPL_dlaswp03T.c"
      mem_22 = w0 + 2;
# 155 "../HPL_dlaswp03T.c"
      *mem_21 = (double )*mem_22;
# 155 "../HPL_dlaswp03T.c"
      mem_23 = u0 + 3;
# 155 "../HPL_dlaswp03T.c"
      mem_24 = w0 + 3;
# 155 "../HPL_dlaswp03T.c"
      *mem_23 = (double )*mem_24;
# 158 "../HPL_dlaswp03T.c"
      mem_25 = u0 + 4;
# 158 "../HPL_dlaswp03T.c"
      mem_26 = w0 + 4;
# 158 "../HPL_dlaswp03T.c"
      *mem_25 = (double )*mem_26;
# 158 "../HPL_dlaswp03T.c"
      mem_27 = u0 + 5;
# 158 "../HPL_dlaswp03T.c"
      mem_28 = w0 + 5;
# 158 "../HPL_dlaswp03T.c"
      *mem_27 = (double )*mem_28;
# 158 "../HPL_dlaswp03T.c"
      mem_29 = u0 + 6;
# 158 "../HPL_dlaswp03T.c"
      mem_30 = w0 + 6;
# 158 "../HPL_dlaswp03T.c"
      *mem_29 = (double )*mem_30;
# 158 "../HPL_dlaswp03T.c"
      mem_31 = u0 + 7;
# 158 "../HPL_dlaswp03T.c"
      mem_32 = w0 + 7;
# 158 "../HPL_dlaswp03T.c"
      *mem_31 = (double )*mem_32;
# 161 "../HPL_dlaswp03T.c"
      mem_33 = u0 + 8;
# 161 "../HPL_dlaswp03T.c"
      mem_34 = w0 + 8;
# 161 "../HPL_dlaswp03T.c"
      *mem_33 = (double )*mem_34;
# 161 "../HPL_dlaswp03T.c"
      mem_35 = u0 + 9;
# 161 "../HPL_dlaswp03T.c"
      mem_36 = w0 + 9;
# 161 "../HPL_dlaswp03T.c"
      *mem_35 = (double )*mem_36;
# 161 "../HPL_dlaswp03T.c"
      mem_37 = u0 + 10;
# 161 "../HPL_dlaswp03T.c"
      mem_38 = w0 + 10;
# 161 "../HPL_dlaswp03T.c"
      *mem_37 = (double )*mem_38;
# 161 "../HPL_dlaswp03T.c"
      mem_39 = u0 + 11;
# 161 "../HPL_dlaswp03T.c"
      mem_40 = w0 + 11;
# 161 "../HPL_dlaswp03T.c"
      *mem_39 = (double )*mem_40;
# 162 "../HPL_dlaswp03T.c"
      mem_41 = u0 + 12;
# 162 "../HPL_dlaswp03T.c"
      mem_42 = w0 + 12;
# 162 "../HPL_dlaswp03T.c"
      *mem_41 = (double )*mem_42;
# 162 "../HPL_dlaswp03T.c"
      mem_43 = u0 + 13;
# 162 "../HPL_dlaswp03T.c"
      mem_44 = w0 + 13;
# 162 "../HPL_dlaswp03T.c"
      *mem_43 = (double )*mem_44;
# 162 "../HPL_dlaswp03T.c"
      mem_45 = u0 + 14;
# 162 "../HPL_dlaswp03T.c"
      mem_46 = w0 + 14;
# 162 "../HPL_dlaswp03T.c"
      *mem_45 = (double )*mem_46;
# 162 "../HPL_dlaswp03T.c"
      mem_47 = u0 + 15;
# 162 "../HPL_dlaswp03T.c"
      mem_48 = w0 + 15;
# 162 "../HPL_dlaswp03T.c"
      *mem_47 = (double )*mem_48;
# 165 "../HPL_dlaswp03T.c"
      mem_49 = u0 + 16;
# 165 "../HPL_dlaswp03T.c"
      mem_50 = w0 + 16;
# 165 "../HPL_dlaswp03T.c"
      *mem_49 = (double )*mem_50;
# 165 "../HPL_dlaswp03T.c"
      mem_51 = u0 + 17;
# 165 "../HPL_dlaswp03T.c"
      mem_52 = w0 + 17;
# 165 "../HPL_dlaswp03T.c"
      *mem_51 = (double )*mem_52;
# 165 "../HPL_dlaswp03T.c"
      mem_53 = u0 + 18;
# 165 "../HPL_dlaswp03T.c"
      mem_54 = w0 + 18;
# 165 "../HPL_dlaswp03T.c"
      *mem_53 = (double )*mem_54;
# 165 "../HPL_dlaswp03T.c"
      mem_55 = u0 + 19;
# 165 "../HPL_dlaswp03T.c"
      mem_56 = w0 + 19;
# 165 "../HPL_dlaswp03T.c"
      *mem_55 = (double )*mem_56;
# 166 "../HPL_dlaswp03T.c"
      mem_57 = u0 + 20;
# 166 "../HPL_dlaswp03T.c"
      mem_58 = w0 + 20;
# 166 "../HPL_dlaswp03T.c"
      *mem_57 = (double )*mem_58;
# 166 "../HPL_dlaswp03T.c"
      mem_59 = u0 + 21;
# 166 "../HPL_dlaswp03T.c"
      mem_60 = w0 + 21;
# 166 "../HPL_dlaswp03T.c"
      *mem_59 = (double )*mem_60;
# 166 "../HPL_dlaswp03T.c"
      mem_61 = u0 + 22;
# 166 "../HPL_dlaswp03T.c"
      mem_62 = w0 + 22;
# 166 "../HPL_dlaswp03T.c"
      *mem_61 = (double )*mem_62;
# 166 "../HPL_dlaswp03T.c"
      mem_63 = u0 + 23;
# 166 "../HPL_dlaswp03T.c"
      mem_64 = w0 + 23;
# 166 "../HPL_dlaswp03T.c"
      *mem_63 = (double )*mem_64;
# 167 "../HPL_dlaswp03T.c"
      mem_65 = u0 + 24;
# 167 "../HPL_dlaswp03T.c"
      mem_66 = w0 + 24;
# 167 "../HPL_dlaswp03T.c"
      *mem_65 = (double )*mem_66;
# 167 "../HPL_dlaswp03T.c"
      mem_67 = u0 + 25;
# 167 "../HPL_dlaswp03T.c"
      mem_68 = w0 + 25;
# 167 "../HPL_dlaswp03T.c"
      *mem_67 = (double )*mem_68;
# 167 "../HPL_dlaswp03T.c"
      mem_69 = u0 + 26;
# 167 "../HPL_dlaswp03T.c"
      mem_70 = w0 + 26;
# 167 "../HPL_dlaswp03T.c"
      *mem_69 = (double )*mem_70;
# 167 "../HPL_dlaswp03T.c"
      mem_71 = u0 + 27;
# 167 "../HPL_dlaswp03T.c"
      mem_72 = w0 + 27;
# 167 "../HPL_dlaswp03T.c"
      *mem_71 = (double )*mem_72;
# 168 "../HPL_dlaswp03T.c"
      mem_73 = u0 + 28;
# 168 "../HPL_dlaswp03T.c"
      mem_74 = w0 + 28;
# 168 "../HPL_dlaswp03T.c"
      *mem_73 = (double )*mem_74;
# 168 "../HPL_dlaswp03T.c"
      mem_75 = u0 + 29;
# 168 "../HPL_dlaswp03T.c"
      mem_76 = w0 + 29;
# 168 "../HPL_dlaswp03T.c"
      *mem_75 = (double )*mem_76;
# 168 "../HPL_dlaswp03T.c"
      mem_77 = u0 + 30;
# 168 "../HPL_dlaswp03T.c"
      mem_78 = w0 + 30;
# 168 "../HPL_dlaswp03T.c"
      *mem_77 = (double )*mem_78;
# 168 "../HPL_dlaswp03T.c"
      mem_79 = u0 + 31;
# 168 "../HPL_dlaswp03T.c"
      mem_80 = w0 + 31;
# 168 "../HPL_dlaswp03T.c"
      *mem_79 = (double )*mem_80;
      __CrestLoad(10065, (unsigned long )(& i), (long long )i);
      __CrestLoad(10064, (unsigned long )0, (long long )1);
      __CrestApply2(10063, 0, (long long )(i + 1));
      __CrestStore(10066, (unsigned long )(& i));
# 146 "../HPL_dlaswp03T.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10069, (unsigned long )(& j), (long long )j);
    __CrestLoad(10068, (unsigned long )0, (long long )32);
    __CrestApply2(10067, 0, (long long )(j + 32));
    __CrestStore(10070, (unsigned long )(& j));
# 143 "../HPL_dlaswp03T.c"
    j += 32;
# 143 "../HPL_dlaswp03T.c"
    U += incU;
# 143 "../HPL_dlaswp03T.c"
    w += 32;
  }
  while_break: ;
  }
  {
  __CrestLoad(10073, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10072, (unsigned long )0, (long long )0);
  __CrestApply2(10071, 14, (long long )(nr > 0));
# 173 "../HPL_dlaswp03T.c"
  if (nr > 0) {
    __CrestBranch(10074, 3948, 1);
    __CrestLoad(10076, (unsigned long )0, (long long )0);
    __CrestStore(10077, (unsigned long )(& i));
# 175 "../HPL_dlaswp03T.c"
    i = 0;
    {
# 175 "../HPL_dlaswp03T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10080, (unsigned long )(& i), (long long )i);
      __CrestLoad(10079, (unsigned long )(& M), (long long )M);
      __CrestApply2(10078, 16, (long long )(i < (int )M));
# 175 "../HPL_dlaswp03T.c"
      if (i < (int )M) {
        __CrestBranch(10081, 3953, 1);

      } else {
        __CrestBranch(10082, 3954, 0);
# 175 "../HPL_dlaswp03T.c"
        goto while_break___1;
      }
      }
# 177 "../HPL_dlaswp03T.c"
      mem_81 = W0 + i * (int )LDW;
# 177 "../HPL_dlaswp03T.c"
      u0 = U + (int )*mem_81 * (int )LDU;
# 177 "../HPL_dlaswp03T.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10083, (unsigned long )0, (long long )0);
      __CrestStore(10084, (unsigned long )(& j));
# 178 "../HPL_dlaswp03T.c"
      j = 0;
      {
# 178 "../HPL_dlaswp03T.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10087, (unsigned long )(& j), (long long )j);
        __CrestLoad(10086, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10085, 16, (long long )(j < nr));
# 178 "../HPL_dlaswp03T.c"
        if (j < nr) {
          __CrestBranch(10088, 3960, 1);

        } else {
          __CrestBranch(10089, 3961, 0);
# 178 "../HPL_dlaswp03T.c"
          goto while_break___2;
        }
        }
# 178 "../HPL_dlaswp03T.c"
        mem_82 = u0 + j;
# 178 "../HPL_dlaswp03T.c"
        mem_83 = w0 + j;
# 178 "../HPL_dlaswp03T.c"
        *mem_82 = (double )*mem_83;
        __CrestLoad(10092, (unsigned long )(& j), (long long )j);
        __CrestLoad(10091, (unsigned long )0, (long long )1);
        __CrestApply2(10090, 0, (long long )(j + 1));
        __CrestStore(10093, (unsigned long )(& j));
# 178 "../HPL_dlaswp03T.c"
        j ++;
      }
      while_break___2: ;
      }
      __CrestLoad(10096, (unsigned long )(& i), (long long )i);
      __CrestLoad(10095, (unsigned long )0, (long long )1);
      __CrestApply2(10094, 0, (long long )(i + 1));
      __CrestStore(10097, (unsigned long )(& i));
# 175 "../HPL_dlaswp03T.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(10075, 3966, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10098);
# 60 "../HPL_dlaswp03T.c"
  return;
  }
}
}
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 386 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp04N(int const M0 , int const M1 , int const N , double *U , int const LDU ,
                   double *A , int const LDA , double const *W0 , double const *W ,
                   int const LDW , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp04N.c"
void HPL_dlaswp04N(int const M0 , int const M1 , int const N , double *U , int const LDU ,
                   double *A , int const LDA , double const *W0 , double const *W ,
                   int const LDW , int const *LINDXA , int const *LINDXAU )
{
  double const *w ;
  double const *w0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_23 ;
  int const *mem_24 ;
  double const *mem_25 ;
  double const *mem_26 ;
  double const *mem_27 ;
  double const *mem_28 ;
  double const *mem_29 ;
  double const *mem_30 ;
  double const *mem_31 ;
  double const *mem_32 ;
  double const *mem_33 ;
  double const *mem_34 ;
  double const *mem_35 ;
  double const *mem_36 ;
  double const *mem_37 ;
  double const *mem_38 ;
  double const *mem_39 ;
  double const *mem_40 ;
  double const *mem_41 ;
  double const *mem_42 ;
  double const *mem_43 ;
  double const *mem_44 ;
  double const *mem_45 ;
  double const *mem_46 ;
  double const *mem_47 ;
  double const *mem_48 ;
  double const *mem_49 ;
  double const *mem_50 ;
  double const *mem_51 ;
  double const *mem_52 ;
  double const *mem_53 ;
  double const *mem_54 ;
  double const *mem_55 ;
  double const *mem_56 ;
  double const *mem_57 ;
  double const *mem_58 ;
  double const *mem_59 ;
  double const *mem_60 ;
  double const *mem_61 ;
  double const *mem_62 ;
  double const *mem_63 ;
  double const *mem_64 ;
  double const *mem_65 ;
  double const *mem_66 ;
  double const *mem_67 ;
  double const *mem_68 ;
  double const *mem_69 ;
  double const *mem_70 ;
  double const *mem_71 ;
  double const *mem_72 ;
  double const *mem_73 ;
  double const *mem_74 ;
  double const *mem_75 ;
  double const *mem_76 ;
  double const *mem_77 ;
  double const *mem_78 ;
  double const *mem_79 ;
  double const *mem_80 ;
  double const *mem_81 ;
  double const *mem_82 ;
  double const *mem_83 ;
  double const *mem_84 ;
  double const *mem_85 ;
  double const *mem_86 ;
  double const *mem_87 ;
  double const *mem_88 ;
  double const *mem_89 ;
  int const *mem_90 ;
  int const *mem_91 ;
  double const *mem_92 ;
  double const *mem_93 ;
  double const *mem_94 ;

  {
  __CrestCall(10105, 66);
  __CrestStore(10104, (unsigned long )(& LDW));
  __CrestStore(10103, (unsigned long )(& LDA));
  __CrestStore(10102, (unsigned long )(& LDU));
  __CrestStore(10101, (unsigned long )(& N));
  __CrestStore(10100, (unsigned long )(& M1));
  __CrestStore(10099, (unsigned long )(& M0));
# 161 "../HPL_dlaswp04N.c"
  w = W;
  __CrestLoad(10108, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10107, (unsigned long )0, (long long )5);
  __CrestApply2(10106, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10109, (unsigned long )(& incA));
# 163 "../HPL_dlaswp04N.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10112, (unsigned long )(& LDU), (long long )LDU);
  __CrestLoad(10111, (unsigned long )0, (long long )5);
  __CrestApply2(10110, 8, (long long )((unsigned int )LDU << 5));
  __CrestStore(10113, (unsigned long )(& incU));
# 163 "../HPL_dlaswp04N.c"
  incU = (int )((unsigned int )LDU << 5);
  {
  __CrestLoad(10116, (unsigned long )(& M0), (long long )M0);
  __CrestLoad(10115, (unsigned long )0, (long long )0);
  __CrestApply2(10114, 15, (long long )(M0 <= 0));
# 172 "../HPL_dlaswp04N.c"
  if (M0 <= 0) {
    __CrestBranch(10117, 3971, 1);
    {
    __CrestLoad(10121, (unsigned long )(& M1), (long long )M1);
    __CrestLoad(10120, (unsigned long )0, (long long )0);
    __CrestApply2(10119, 15, (long long )(M1 <= 0));
# 172 "../HPL_dlaswp04N.c"
    if (M1 <= 0) {
      __CrestBranch(10122, 3972, 1);
# 172 "../HPL_dlaswp04N.c"
      goto return_label;
    } else {
      __CrestBranch(10123, 3974, 0);
# 172 "../HPL_dlaswp04N.c"
      goto _L;
    }
    }
  } else {
    __CrestBranch(10118, 3975, 0);
    _L:
    {
    __CrestLoad(10126, (unsigned long )(& N), (long long )N);
    __CrestLoad(10125, (unsigned long )0, (long long )0);
    __CrestApply2(10124, 15, (long long )(N <= 0));
# 172 "../HPL_dlaswp04N.c"
    if (N <= 0) {
      __CrestBranch(10127, 3976, 1);
# 172 "../HPL_dlaswp04N.c"
      goto return_label;
    } else {
      __CrestBranch(10128, 3978, 0);

    }
    }
  }
  }
  __CrestLoad(10133, (unsigned long )(& N), (long long )N);
  __CrestLoad(10132, (unsigned long )0, (long long )5);
  __CrestApply2(10131, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10130, (unsigned long )0, (long long )5);
  __CrestApply2(10129, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10134, (unsigned long )(& nu));
# 174 "../HPL_dlaswp04N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10137, (unsigned long )(& N), (long long )N);
  __CrestLoad(10136, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10135, 1, (long long )(N - (int const )nu));
  __CrestStore(10138, (unsigned long )(& nr));
# 174 "../HPL_dlaswp04N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10139, (unsigned long )0, (long long )0);
  __CrestStore(10140, (unsigned long )(& j));
# 177 "../HPL_dlaswp04N.c"
  j = 0;
  {
# 177 "../HPL_dlaswp04N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10143, (unsigned long )(& j), (long long )j);
    __CrestLoad(10142, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10141, 16, (long long )(j < nu));
# 177 "../HPL_dlaswp04N.c"
    if (j < nu) {
      __CrestBranch(10144, 3984, 1);

    } else {
      __CrestBranch(10145, 3985, 0);
# 177 "../HPL_dlaswp04N.c"
      goto while_break;
    }
    }
    __CrestLoad(10146, (unsigned long )0, (long long )0);
    __CrestStore(10147, (unsigned long )(& i));
# 180 "../HPL_dlaswp04N.c"
    i = 0;
    {
# 180 "../HPL_dlaswp04N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10150, (unsigned long )(& i), (long long )i);
      __CrestLoad(10149, (unsigned long )(& M0), (long long )M0);
      __CrestApply2(10148, 16, (long long )(i < (int )M0));
# 180 "../HPL_dlaswp04N.c"
      if (i < (int )M0) {
        __CrestBranch(10151, 3991, 1);

      } else {
        __CrestBranch(10152, 3992, 0);
# 180 "../HPL_dlaswp04N.c"
        goto while_break___0;
      }
      }
# 182 "../HPL_dlaswp04N.c"
      mem_23 = LINDXA + i;
# 182 "../HPL_dlaswp04N.c"
      a0 = A + *mem_23;
# 182 "../HPL_dlaswp04N.c"
      mem_24 = LINDXAU + i;
# 182 "../HPL_dlaswp04N.c"
      u0 = U + *mem_24;
# 182 "../HPL_dlaswp04N.c"
      w0 = w + i * (int )LDW;
# 184 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 184 "../HPL_dlaswp04N.c"
      mem_25 = w0 + 0;
# 184 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_25;
# 184 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 186 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 186 "../HPL_dlaswp04N.c"
      mem_26 = w0 + 1;
# 186 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_26;
# 186 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 189 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 189 "../HPL_dlaswp04N.c"
      mem_27 = w0 + 2;
# 189 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_27;
# 189 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 189 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 190 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 190 "../HPL_dlaswp04N.c"
      mem_28 = w0 + 3;
# 190 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_28;
# 190 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 190 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 193 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 193 "../HPL_dlaswp04N.c"
      mem_29 = w0 + 4;
# 193 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_29;
# 193 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 193 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 194 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 194 "../HPL_dlaswp04N.c"
      mem_30 = w0 + 5;
# 194 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_30;
# 194 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 194 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 195 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 195 "../HPL_dlaswp04N.c"
      mem_31 = w0 + 6;
# 195 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_31;
# 195 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 195 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 196 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 196 "../HPL_dlaswp04N.c"
      mem_32 = w0 + 7;
# 196 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_32;
# 196 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 196 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 199 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 199 "../HPL_dlaswp04N.c"
      mem_33 = w0 + 8;
# 199 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_33;
# 199 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 199 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 200 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 200 "../HPL_dlaswp04N.c"
      mem_34 = w0 + 9;
# 200 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_34;
# 200 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 200 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 201 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 201 "../HPL_dlaswp04N.c"
      mem_35 = w0 + 10;
# 201 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_35;
# 201 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 201 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 202 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 202 "../HPL_dlaswp04N.c"
      mem_36 = w0 + 11;
# 202 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_36;
# 202 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 202 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 203 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 203 "../HPL_dlaswp04N.c"
      mem_37 = w0 + 12;
# 203 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_37;
# 203 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 203 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 204 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 204 "../HPL_dlaswp04N.c"
      mem_38 = w0 + 13;
# 204 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_38;
# 204 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 204 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 205 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 205 "../HPL_dlaswp04N.c"
      mem_39 = w0 + 14;
# 205 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_39;
# 205 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 205 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 206 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 206 "../HPL_dlaswp04N.c"
      mem_40 = w0 + 15;
# 206 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_40;
# 206 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 206 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 209 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 209 "../HPL_dlaswp04N.c"
      mem_41 = w0 + 16;
# 209 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_41;
# 209 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 209 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 210 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 210 "../HPL_dlaswp04N.c"
      mem_42 = w0 + 17;
# 210 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_42;
# 210 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 210 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 211 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 211 "../HPL_dlaswp04N.c"
      mem_43 = w0 + 18;
# 211 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_43;
# 211 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 211 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 212 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 212 "../HPL_dlaswp04N.c"
      mem_44 = w0 + 19;
# 212 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_44;
# 212 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 212 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 213 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 213 "../HPL_dlaswp04N.c"
      mem_45 = w0 + 20;
# 213 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_45;
# 213 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 213 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 214 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 214 "../HPL_dlaswp04N.c"
      mem_46 = w0 + 21;
# 214 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_46;
# 214 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 214 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 215 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 215 "../HPL_dlaswp04N.c"
      mem_47 = w0 + 22;
# 215 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_47;
# 215 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 215 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 216 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 216 "../HPL_dlaswp04N.c"
      mem_48 = w0 + 23;
# 216 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_48;
# 216 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 216 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 217 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 217 "../HPL_dlaswp04N.c"
      mem_49 = w0 + 24;
# 217 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_49;
# 217 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 217 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 218 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 218 "../HPL_dlaswp04N.c"
      mem_50 = w0 + 25;
# 218 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_50;
# 218 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 218 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 219 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 219 "../HPL_dlaswp04N.c"
      mem_51 = w0 + 26;
# 219 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_51;
# 219 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 219 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 220 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 220 "../HPL_dlaswp04N.c"
      mem_52 = w0 + 27;
# 220 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_52;
# 220 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 220 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 221 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 221 "../HPL_dlaswp04N.c"
      mem_53 = w0 + 28;
# 221 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_53;
# 221 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 221 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 222 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 222 "../HPL_dlaswp04N.c"
      mem_54 = w0 + 29;
# 222 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_54;
# 222 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 222 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 223 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 223 "../HPL_dlaswp04N.c"
      mem_55 = w0 + 30;
# 223 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_55;
# 223 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 223 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 224 "../HPL_dlaswp04N.c"
      *a0 = *u0;
# 224 "../HPL_dlaswp04N.c"
      mem_56 = w0 + 31;
# 224 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_56;
# 224 "../HPL_dlaswp04N.c"
      a0 += LDA;
# 224 "../HPL_dlaswp04N.c"
      u0 += LDU;
      __CrestLoad(10155, (unsigned long )(& i), (long long )i);
      __CrestLoad(10154, (unsigned long )0, (long long )1);
      __CrestApply2(10153, 0, (long long )(i + 1));
      __CrestStore(10156, (unsigned long )(& i));
# 180 "../HPL_dlaswp04N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10157, (unsigned long )(& M0), (long long )M0);
    __CrestStore(10158, (unsigned long )(& i));
# 228 "../HPL_dlaswp04N.c"
    i = (int )M0;
    {
# 228 "../HPL_dlaswp04N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10161, (unsigned long )(& i), (long long )i);
      __CrestLoad(10160, (unsigned long )(& M1), (long long )M1);
      __CrestApply2(10159, 16, (long long )(i < (int )M1));
# 228 "../HPL_dlaswp04N.c"
      if (i < (int )M1) {
        __CrestBranch(10162, 4000, 1);

      } else {
        __CrestBranch(10163, 4001, 0);
# 228 "../HPL_dlaswp04N.c"
        goto while_break___1;
      }
      }
# 230 "../HPL_dlaswp04N.c"
      mem_57 = W0 + i * (int )LDW;
# 230 "../HPL_dlaswp04N.c"
      u0 = U + (int )*mem_57;
# 230 "../HPL_dlaswp04N.c"
      w0 = w + i * (int )LDW;
# 232 "../HPL_dlaswp04N.c"
      mem_58 = w0 + 0;
# 232 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_58;
# 232 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 234 "../HPL_dlaswp04N.c"
      mem_59 = w0 + 1;
# 234 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_59;
# 234 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 237 "../HPL_dlaswp04N.c"
      mem_60 = w0 + 2;
# 237 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_60;
# 237 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 237 "../HPL_dlaswp04N.c"
      mem_61 = w0 + 3;
# 237 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_61;
# 237 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 240 "../HPL_dlaswp04N.c"
      mem_62 = w0 + 4;
# 240 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_62;
# 240 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 240 "../HPL_dlaswp04N.c"
      mem_63 = w0 + 5;
# 240 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_63;
# 240 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 241 "../HPL_dlaswp04N.c"
      mem_64 = w0 + 6;
# 241 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_64;
# 241 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 241 "../HPL_dlaswp04N.c"
      mem_65 = w0 + 7;
# 241 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_65;
# 241 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 244 "../HPL_dlaswp04N.c"
      mem_66 = w0 + 8;
# 244 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_66;
# 244 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 244 "../HPL_dlaswp04N.c"
      mem_67 = w0 + 9;
# 244 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_67;
# 244 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 245 "../HPL_dlaswp04N.c"
      mem_68 = w0 + 10;
# 245 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_68;
# 245 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 245 "../HPL_dlaswp04N.c"
      mem_69 = w0 + 11;
# 245 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_69;
# 245 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 246 "../HPL_dlaswp04N.c"
      mem_70 = w0 + 12;
# 246 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_70;
# 246 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 246 "../HPL_dlaswp04N.c"
      mem_71 = w0 + 13;
# 246 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_71;
# 246 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 247 "../HPL_dlaswp04N.c"
      mem_72 = w0 + 14;
# 247 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_72;
# 247 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 247 "../HPL_dlaswp04N.c"
      mem_73 = w0 + 15;
# 247 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_73;
# 247 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 250 "../HPL_dlaswp04N.c"
      mem_74 = w0 + 16;
# 250 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_74;
# 250 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 250 "../HPL_dlaswp04N.c"
      mem_75 = w0 + 17;
# 250 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_75;
# 250 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 251 "../HPL_dlaswp04N.c"
      mem_76 = w0 + 18;
# 251 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_76;
# 251 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 251 "../HPL_dlaswp04N.c"
      mem_77 = w0 + 19;
# 251 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_77;
# 251 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 252 "../HPL_dlaswp04N.c"
      mem_78 = w0 + 20;
# 252 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_78;
# 252 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 252 "../HPL_dlaswp04N.c"
      mem_79 = w0 + 21;
# 252 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_79;
# 252 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 253 "../HPL_dlaswp04N.c"
      mem_80 = w0 + 22;
# 253 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_80;
# 253 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 253 "../HPL_dlaswp04N.c"
      mem_81 = w0 + 23;
# 253 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_81;
# 253 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 254 "../HPL_dlaswp04N.c"
      mem_82 = w0 + 24;
# 254 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_82;
# 254 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 254 "../HPL_dlaswp04N.c"
      mem_83 = w0 + 25;
# 254 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_83;
# 254 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 255 "../HPL_dlaswp04N.c"
      mem_84 = w0 + 26;
# 255 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_84;
# 255 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 255 "../HPL_dlaswp04N.c"
      mem_85 = w0 + 27;
# 255 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_85;
# 255 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 256 "../HPL_dlaswp04N.c"
      mem_86 = w0 + 28;
# 256 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_86;
# 256 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 256 "../HPL_dlaswp04N.c"
      mem_87 = w0 + 29;
# 256 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_87;
# 256 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 257 "../HPL_dlaswp04N.c"
      mem_88 = w0 + 30;
# 257 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_88;
# 257 "../HPL_dlaswp04N.c"
      u0 += LDU;
# 257 "../HPL_dlaswp04N.c"
      mem_89 = w0 + 31;
# 257 "../HPL_dlaswp04N.c"
      *u0 = (double )*mem_89;
# 257 "../HPL_dlaswp04N.c"
      u0 += LDU;
      __CrestLoad(10166, (unsigned long )(& i), (long long )i);
      __CrestLoad(10165, (unsigned long )0, (long long )1);
      __CrestApply2(10164, 0, (long long )(i + 1));
      __CrestStore(10167, (unsigned long )(& i));
# 228 "../HPL_dlaswp04N.c"
      i ++;
    }
    while_break___1: ;
    }
    __CrestLoad(10170, (unsigned long )(& j), (long long )j);
    __CrestLoad(10169, (unsigned long )0, (long long )32);
    __CrestApply2(10168, 0, (long long )(j + 32));
    __CrestStore(10171, (unsigned long )(& j));
# 177 "../HPL_dlaswp04N.c"
    j += 32;
# 177 "../HPL_dlaswp04N.c"
    A += incA;
# 177 "../HPL_dlaswp04N.c"
    U += incU;
# 177 "../HPL_dlaswp04N.c"
    w += 32;
  }
  while_break: ;
  }
  {
  __CrestLoad(10174, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10173, (unsigned long )0, (long long )0);
  __CrestApply2(10172, 13, (long long )(nr != 0));
# 262 "../HPL_dlaswp04N.c"
  if (nr != 0) {
    __CrestBranch(10175, 4007, 1);
    __CrestLoad(10177, (unsigned long )0, (long long )0);
    __CrestStore(10178, (unsigned long )(& i));
# 264 "../HPL_dlaswp04N.c"
    i = 0;
    {
# 264 "../HPL_dlaswp04N.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(10181, (unsigned long )(& i), (long long )i);
      __CrestLoad(10180, (unsigned long )(& M0), (long long )M0);
      __CrestApply2(10179, 16, (long long )(i < (int )M0));
# 264 "../HPL_dlaswp04N.c"
      if (i < (int )M0) {
        __CrestBranch(10182, 4012, 1);

      } else {
        __CrestBranch(10183, 4013, 0);
# 264 "../HPL_dlaswp04N.c"
        goto while_break___2;
      }
      }
# 266 "../HPL_dlaswp04N.c"
      mem_90 = LINDXA + i;
# 266 "../HPL_dlaswp04N.c"
      a0 = A + *mem_90;
# 266 "../HPL_dlaswp04N.c"
      mem_91 = LINDXAU + i;
# 266 "../HPL_dlaswp04N.c"
      u0 = U + *mem_91;
# 266 "../HPL_dlaswp04N.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10184, (unsigned long )0, (long long )0);
      __CrestStore(10185, (unsigned long )(& j));
# 267 "../HPL_dlaswp04N.c"
      j = 0;
      {
# 267 "../HPL_dlaswp04N.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(10188, (unsigned long )(& j), (long long )j);
        __CrestLoad(10187, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10186, 16, (long long )(j < nr));
# 267 "../HPL_dlaswp04N.c"
        if (j < nr) {
          __CrestBranch(10189, 4019, 1);

        } else {
          __CrestBranch(10190, 4020, 0);
# 267 "../HPL_dlaswp04N.c"
          goto while_break___3;
        }
        }
# 268 "../HPL_dlaswp04N.c"
        *a0 = *u0;
# 268 "../HPL_dlaswp04N.c"
        mem_92 = w0 + j;
# 268 "../HPL_dlaswp04N.c"
        *u0 = (double )*mem_92;
        __CrestLoad(10193, (unsigned long )(& j), (long long )j);
        __CrestLoad(10192, (unsigned long )0, (long long )1);
        __CrestApply2(10191, 0, (long long )(j + 1));
        __CrestStore(10194, (unsigned long )(& j));
# 267 "../HPL_dlaswp04N.c"
        j ++;
# 267 "../HPL_dlaswp04N.c"
        a0 += LDA;
# 267 "../HPL_dlaswp04N.c"
        u0 += LDU;
      }
      while_break___3: ;
      }
      __CrestLoad(10197, (unsigned long )(& i), (long long )i);
      __CrestLoad(10196, (unsigned long )0, (long long )1);
      __CrestApply2(10195, 0, (long long )(i + 1));
      __CrestStore(10198, (unsigned long )(& i));
# 264 "../HPL_dlaswp04N.c"
      i ++;
    }
    while_break___2: ;
    }
    __CrestLoad(10199, (unsigned long )(& M0), (long long )M0);
    __CrestStore(10200, (unsigned long )(& i));
# 270 "../HPL_dlaswp04N.c"
    i = (int )M0;
    {
# 270 "../HPL_dlaswp04N.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(10203, (unsigned long )(& i), (long long )i);
      __CrestLoad(10202, (unsigned long )(& M1), (long long )M1);
      __CrestApply2(10201, 16, (long long )(i < (int )M1));
# 270 "../HPL_dlaswp04N.c"
      if (i < (int )M1) {
        __CrestBranch(10204, 4030, 1);

      } else {
        __CrestBranch(10205, 4031, 0);
# 270 "../HPL_dlaswp04N.c"
        goto while_break___4;
      }
      }
# 272 "../HPL_dlaswp04N.c"
      mem_93 = W0 + i * (int )LDW;
# 272 "../HPL_dlaswp04N.c"
      u0 = U + (int )*mem_93;
# 272 "../HPL_dlaswp04N.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10206, (unsigned long )0, (long long )0);
      __CrestStore(10207, (unsigned long )(& j));
# 273 "../HPL_dlaswp04N.c"
      j = 0;
      {
# 273 "../HPL_dlaswp04N.c"
      while (1) {
        while_continue___5: ;
        {
        __CrestLoad(10210, (unsigned long )(& j), (long long )j);
        __CrestLoad(10209, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10208, 16, (long long )(j < nr));
# 273 "../HPL_dlaswp04N.c"
        if (j < nr) {
          __CrestBranch(10211, 4037, 1);

        } else {
          __CrestBranch(10212, 4038, 0);
# 273 "../HPL_dlaswp04N.c"
          goto while_break___5;
        }
        }
# 273 "../HPL_dlaswp04N.c"
        mem_94 = w0 + j;
# 273 "../HPL_dlaswp04N.c"
        *u0 = (double )*mem_94;
        __CrestLoad(10215, (unsigned long )(& j), (long long )j);
        __CrestLoad(10214, (unsigned long )0, (long long )1);
        __CrestApply2(10213, 0, (long long )(j + 1));
        __CrestStore(10216, (unsigned long )(& j));
# 273 "../HPL_dlaswp04N.c"
        j ++;
# 273 "../HPL_dlaswp04N.c"
        u0 += LDU;
      }
      while_break___5: ;
      }
      __CrestLoad(10219, (unsigned long )(& i), (long long )i);
      __CrestLoad(10218, (unsigned long )0, (long long )1);
      __CrestApply2(10217, 0, (long long )(i + 1));
      __CrestStore(10220, (unsigned long )(& i));
# 270 "../HPL_dlaswp04N.c"
      i ++;
    }
    while_break___4: ;
    }
  } else {
    __CrestBranch(10176, 4043, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10221);
# 60 "../HPL_dlaswp04N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 401 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp04T(int const M0 , int const M1 , int const N , double *U , int const LDU ,
                   double *A , int const LDA , double const *W0 , double const *W ,
                   int const LDW , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp04T.c"
void HPL_dlaswp04T(int const M0 , int const M1 , int const N , double *U , int const LDU ,
                   double *A , int const LDA , double const *W0 , double const *W ,
                   int const LDW , int const *LINDXA , int const *LINDXAU )
{
  double const *w ;
  double const *w0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_23 ;
  int const *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double const *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double const *mem_30 ;
  double *mem_31 ;
  double *mem_32 ;
  double const *mem_33 ;
  double *mem_34 ;
  double *mem_35 ;
  double const *mem_36 ;
  double *mem_37 ;
  double *mem_38 ;
  double const *mem_39 ;
  double *mem_40 ;
  double *mem_41 ;
  double const *mem_42 ;
  double *mem_43 ;
  double *mem_44 ;
  double const *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double const *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double const *mem_51 ;
  double *mem_52 ;
  double *mem_53 ;
  double const *mem_54 ;
  double *mem_55 ;
  double *mem_56 ;
  double const *mem_57 ;
  double *mem_58 ;
  double *mem_59 ;
  double const *mem_60 ;
  double *mem_61 ;
  double *mem_62 ;
  double const *mem_63 ;
  double *mem_64 ;
  double *mem_65 ;
  double const *mem_66 ;
  double *mem_67 ;
  double *mem_68 ;
  double const *mem_69 ;
  double *mem_70 ;
  double *mem_71 ;
  double const *mem_72 ;
  double *mem_73 ;
  double *mem_74 ;
  double const *mem_75 ;
  double *mem_76 ;
  double *mem_77 ;
  double const *mem_78 ;
  double *mem_79 ;
  double *mem_80 ;
  double const *mem_81 ;
  double *mem_82 ;
  double *mem_83 ;
  double const *mem_84 ;
  double *mem_85 ;
  double *mem_86 ;
  double const *mem_87 ;
  double *mem_88 ;
  double *mem_89 ;
  double const *mem_90 ;
  double *mem_91 ;
  double *mem_92 ;
  double const *mem_93 ;
  double *mem_94 ;
  double *mem_95 ;
  double const *mem_96 ;
  double *mem_97 ;
  double *mem_98 ;
  double const *mem_99 ;
  double *mem_100 ;
  double *mem_101 ;
  double const *mem_102 ;
  double *mem_103 ;
  double *mem_104 ;
  double const *mem_105 ;
  double *mem_106 ;
  double *mem_107 ;
  double const *mem_108 ;
  double *mem_109 ;
  double *mem_110 ;
  double const *mem_111 ;
  double *mem_112 ;
  double *mem_113 ;
  double const *mem_114 ;
  double *mem_115 ;
  double *mem_116 ;
  double const *mem_117 ;
  double *mem_118 ;
  double *mem_119 ;
  double const *mem_120 ;
  double const *mem_121 ;
  double *mem_122 ;
  double const *mem_123 ;
  double *mem_124 ;
  double const *mem_125 ;
  double *mem_126 ;
  double const *mem_127 ;
  double *mem_128 ;
  double const *mem_129 ;
  double *mem_130 ;
  double const *mem_131 ;
  double *mem_132 ;
  double const *mem_133 ;
  double *mem_134 ;
  double const *mem_135 ;
  double *mem_136 ;
  double const *mem_137 ;
  double *mem_138 ;
  double const *mem_139 ;
  double *mem_140 ;
  double const *mem_141 ;
  double *mem_142 ;
  double const *mem_143 ;
  double *mem_144 ;
  double const *mem_145 ;
  double *mem_146 ;
  double const *mem_147 ;
  double *mem_148 ;
  double const *mem_149 ;
  double *mem_150 ;
  double const *mem_151 ;
  double *mem_152 ;
  double const *mem_153 ;
  double *mem_154 ;
  double const *mem_155 ;
  double *mem_156 ;
  double const *mem_157 ;
  double *mem_158 ;
  double const *mem_159 ;
  double *mem_160 ;
  double const *mem_161 ;
  double *mem_162 ;
  double const *mem_163 ;
  double *mem_164 ;
  double const *mem_165 ;
  double *mem_166 ;
  double const *mem_167 ;
  double *mem_168 ;
  double const *mem_169 ;
  double *mem_170 ;
  double const *mem_171 ;
  double *mem_172 ;
  double const *mem_173 ;
  double *mem_174 ;
  double const *mem_175 ;
  double *mem_176 ;
  double const *mem_177 ;
  double *mem_178 ;
  double const *mem_179 ;
  double *mem_180 ;
  double const *mem_181 ;
  double *mem_182 ;
  double const *mem_183 ;
  double *mem_184 ;
  double const *mem_185 ;
  int const *mem_186 ;
  int const *mem_187 ;
  double *mem_188 ;
  double *mem_189 ;
  double const *mem_190 ;
  double const *mem_191 ;
  double *mem_192 ;
  double const *mem_193 ;

  {
  __CrestCall(10228, 67);
  __CrestStore(10227, (unsigned long )(& LDW));
  __CrestStore(10226, (unsigned long )(& LDA));
  __CrestStore(10225, (unsigned long )(& LDU));
  __CrestStore(10224, (unsigned long )(& N));
  __CrestStore(10223, (unsigned long )(& M1));
  __CrestStore(10222, (unsigned long )(& M0));
# 162 "../HPL_dlaswp04T.c"
  w = W;
  __CrestLoad(10231, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10230, (unsigned long )0, (long long )5);
  __CrestApply2(10229, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10232, (unsigned long )(& incA));
# 164 "../HPL_dlaswp04T.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10233, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(10234, (unsigned long )(& incU));
# 164 "../HPL_dlaswp04T.c"
  incU = 1 << 5;
  {
  __CrestLoad(10237, (unsigned long )(& M0), (long long )M0);
  __CrestLoad(10236, (unsigned long )0, (long long )0);
  __CrestApply2(10235, 15, (long long )(M0 <= 0));
# 172 "../HPL_dlaswp04T.c"
  if (M0 <= 0) {
    __CrestBranch(10238, 4048, 1);
    {
    __CrestLoad(10242, (unsigned long )(& M1), (long long )M1);
    __CrestLoad(10241, (unsigned long )0, (long long )0);
    __CrestApply2(10240, 15, (long long )(M1 <= 0));
# 172 "../HPL_dlaswp04T.c"
    if (M1 <= 0) {
      __CrestBranch(10243, 4049, 1);
# 172 "../HPL_dlaswp04T.c"
      goto return_label;
    } else {
      __CrestBranch(10244, 4051, 0);
# 172 "../HPL_dlaswp04T.c"
      goto _L;
    }
    }
  } else {
    __CrestBranch(10239, 4052, 0);
    _L:
    {
    __CrestLoad(10247, (unsigned long )(& N), (long long )N);
    __CrestLoad(10246, (unsigned long )0, (long long )0);
    __CrestApply2(10245, 15, (long long )(N <= 0));
# 172 "../HPL_dlaswp04T.c"
    if (N <= 0) {
      __CrestBranch(10248, 4053, 1);
# 172 "../HPL_dlaswp04T.c"
      goto return_label;
    } else {
      __CrestBranch(10249, 4055, 0);

    }
    }
  }
  }
  __CrestLoad(10254, (unsigned long )(& N), (long long )N);
  __CrestLoad(10253, (unsigned long )0, (long long )5);
  __CrestApply2(10252, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10251, (unsigned long )0, (long long )5);
  __CrestApply2(10250, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10255, (unsigned long )(& nu));
# 174 "../HPL_dlaswp04T.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10258, (unsigned long )(& N), (long long )N);
  __CrestLoad(10257, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10256, 1, (long long )(N - (int const )nu));
  __CrestStore(10259, (unsigned long )(& nr));
# 174 "../HPL_dlaswp04T.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10260, (unsigned long )0, (long long )0);
  __CrestStore(10261, (unsigned long )(& j));
# 177 "../HPL_dlaswp04T.c"
  j = 0;
  {
# 177 "../HPL_dlaswp04T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10264, (unsigned long )(& j), (long long )j);
    __CrestLoad(10263, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10262, 16, (long long )(j < nu));
# 177 "../HPL_dlaswp04T.c"
    if (j < nu) {
      __CrestBranch(10265, 4061, 1);

    } else {
      __CrestBranch(10266, 4062, 0);
# 177 "../HPL_dlaswp04T.c"
      goto while_break;
    }
    }
    __CrestLoad(10267, (unsigned long )0, (long long )0);
    __CrestStore(10268, (unsigned long )(& i));
# 180 "../HPL_dlaswp04T.c"
    i = 0;
    {
# 180 "../HPL_dlaswp04T.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10271, (unsigned long )(& i), (long long )i);
      __CrestLoad(10270, (unsigned long )(& M0), (long long )M0);
      __CrestApply2(10269, 16, (long long )(i < (int )M0));
# 180 "../HPL_dlaswp04T.c"
      if (i < (int )M0) {
        __CrestBranch(10272, 4068, 1);

      } else {
        __CrestBranch(10273, 4069, 0);
# 180 "../HPL_dlaswp04T.c"
        goto while_break___0;
      }
      }
# 182 "../HPL_dlaswp04T.c"
      mem_23 = LINDXA + i;
# 182 "../HPL_dlaswp04T.c"
      a0 = A + *mem_23;
# 182 "../HPL_dlaswp04T.c"
      mem_24 = LINDXAU + i;
# 182 "../HPL_dlaswp04T.c"
      u0 = U + *mem_24 * LDU;
# 182 "../HPL_dlaswp04T.c"
      w0 = w + i * (int )LDW;
# 184 "../HPL_dlaswp04T.c"
      mem_25 = u0 + 0;
# 184 "../HPL_dlaswp04T.c"
      *a0 = *mem_25;
# 184 "../HPL_dlaswp04T.c"
      mem_26 = u0 + 0;
# 184 "../HPL_dlaswp04T.c"
      mem_27 = w0 + 0;
# 184 "../HPL_dlaswp04T.c"
      *mem_26 = (double )*mem_27;
# 184 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 186 "../HPL_dlaswp04T.c"
      mem_28 = u0 + 1;
# 186 "../HPL_dlaswp04T.c"
      *a0 = *mem_28;
# 186 "../HPL_dlaswp04T.c"
      mem_29 = u0 + 1;
# 186 "../HPL_dlaswp04T.c"
      mem_30 = w0 + 1;
# 186 "../HPL_dlaswp04T.c"
      *mem_29 = (double )*mem_30;
# 186 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 189 "../HPL_dlaswp04T.c"
      mem_31 = u0 + 2;
# 189 "../HPL_dlaswp04T.c"
      *a0 = *mem_31;
# 189 "../HPL_dlaswp04T.c"
      mem_32 = u0 + 2;
# 189 "../HPL_dlaswp04T.c"
      mem_33 = w0 + 2;
# 189 "../HPL_dlaswp04T.c"
      *mem_32 = (double )*mem_33;
# 189 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 190 "../HPL_dlaswp04T.c"
      mem_34 = u0 + 3;
# 190 "../HPL_dlaswp04T.c"
      *a0 = *mem_34;
# 190 "../HPL_dlaswp04T.c"
      mem_35 = u0 + 3;
# 190 "../HPL_dlaswp04T.c"
      mem_36 = w0 + 3;
# 190 "../HPL_dlaswp04T.c"
      *mem_35 = (double )*mem_36;
# 190 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 193 "../HPL_dlaswp04T.c"
      mem_37 = u0 + 4;
# 193 "../HPL_dlaswp04T.c"
      *a0 = *mem_37;
# 193 "../HPL_dlaswp04T.c"
      mem_38 = u0 + 4;
# 193 "../HPL_dlaswp04T.c"
      mem_39 = w0 + 4;
# 193 "../HPL_dlaswp04T.c"
      *mem_38 = (double )*mem_39;
# 193 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 194 "../HPL_dlaswp04T.c"
      mem_40 = u0 + 5;
# 194 "../HPL_dlaswp04T.c"
      *a0 = *mem_40;
# 194 "../HPL_dlaswp04T.c"
      mem_41 = u0 + 5;
# 194 "../HPL_dlaswp04T.c"
      mem_42 = w0 + 5;
# 194 "../HPL_dlaswp04T.c"
      *mem_41 = (double )*mem_42;
# 194 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 195 "../HPL_dlaswp04T.c"
      mem_43 = u0 + 6;
# 195 "../HPL_dlaswp04T.c"
      *a0 = *mem_43;
# 195 "../HPL_dlaswp04T.c"
      mem_44 = u0 + 6;
# 195 "../HPL_dlaswp04T.c"
      mem_45 = w0 + 6;
# 195 "../HPL_dlaswp04T.c"
      *mem_44 = (double )*mem_45;
# 195 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 196 "../HPL_dlaswp04T.c"
      mem_46 = u0 + 7;
# 196 "../HPL_dlaswp04T.c"
      *a0 = *mem_46;
# 196 "../HPL_dlaswp04T.c"
      mem_47 = u0 + 7;
# 196 "../HPL_dlaswp04T.c"
      mem_48 = w0 + 7;
# 196 "../HPL_dlaswp04T.c"
      *mem_47 = (double )*mem_48;
# 196 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 199 "../HPL_dlaswp04T.c"
      mem_49 = u0 + 8;
# 199 "../HPL_dlaswp04T.c"
      *a0 = *mem_49;
# 199 "../HPL_dlaswp04T.c"
      mem_50 = u0 + 8;
# 199 "../HPL_dlaswp04T.c"
      mem_51 = w0 + 8;
# 199 "../HPL_dlaswp04T.c"
      *mem_50 = (double )*mem_51;
# 199 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 200 "../HPL_dlaswp04T.c"
      mem_52 = u0 + 9;
# 200 "../HPL_dlaswp04T.c"
      *a0 = *mem_52;
# 200 "../HPL_dlaswp04T.c"
      mem_53 = u0 + 9;
# 200 "../HPL_dlaswp04T.c"
      mem_54 = w0 + 9;
# 200 "../HPL_dlaswp04T.c"
      *mem_53 = (double )*mem_54;
# 200 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 201 "../HPL_dlaswp04T.c"
      mem_55 = u0 + 10;
# 201 "../HPL_dlaswp04T.c"
      *a0 = *mem_55;
# 201 "../HPL_dlaswp04T.c"
      mem_56 = u0 + 10;
# 201 "../HPL_dlaswp04T.c"
      mem_57 = w0 + 10;
# 201 "../HPL_dlaswp04T.c"
      *mem_56 = (double )*mem_57;
# 201 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 202 "../HPL_dlaswp04T.c"
      mem_58 = u0 + 11;
# 202 "../HPL_dlaswp04T.c"
      *a0 = *mem_58;
# 202 "../HPL_dlaswp04T.c"
      mem_59 = u0 + 11;
# 202 "../HPL_dlaswp04T.c"
      mem_60 = w0 + 11;
# 202 "../HPL_dlaswp04T.c"
      *mem_59 = (double )*mem_60;
# 202 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 203 "../HPL_dlaswp04T.c"
      mem_61 = u0 + 12;
# 203 "../HPL_dlaswp04T.c"
      *a0 = *mem_61;
# 203 "../HPL_dlaswp04T.c"
      mem_62 = u0 + 12;
# 203 "../HPL_dlaswp04T.c"
      mem_63 = w0 + 12;
# 203 "../HPL_dlaswp04T.c"
      *mem_62 = (double )*mem_63;
# 203 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 204 "../HPL_dlaswp04T.c"
      mem_64 = u0 + 13;
# 204 "../HPL_dlaswp04T.c"
      *a0 = *mem_64;
# 204 "../HPL_dlaswp04T.c"
      mem_65 = u0 + 13;
# 204 "../HPL_dlaswp04T.c"
      mem_66 = w0 + 13;
# 204 "../HPL_dlaswp04T.c"
      *mem_65 = (double )*mem_66;
# 204 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 205 "../HPL_dlaswp04T.c"
      mem_67 = u0 + 14;
# 205 "../HPL_dlaswp04T.c"
      *a0 = *mem_67;
# 205 "../HPL_dlaswp04T.c"
      mem_68 = u0 + 14;
# 205 "../HPL_dlaswp04T.c"
      mem_69 = w0 + 14;
# 205 "../HPL_dlaswp04T.c"
      *mem_68 = (double )*mem_69;
# 205 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 206 "../HPL_dlaswp04T.c"
      mem_70 = u0 + 15;
# 206 "../HPL_dlaswp04T.c"
      *a0 = *mem_70;
# 206 "../HPL_dlaswp04T.c"
      mem_71 = u0 + 15;
# 206 "../HPL_dlaswp04T.c"
      mem_72 = w0 + 15;
# 206 "../HPL_dlaswp04T.c"
      *mem_71 = (double )*mem_72;
# 206 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 209 "../HPL_dlaswp04T.c"
      mem_73 = u0 + 16;
# 209 "../HPL_dlaswp04T.c"
      *a0 = *mem_73;
# 209 "../HPL_dlaswp04T.c"
      mem_74 = u0 + 16;
# 209 "../HPL_dlaswp04T.c"
      mem_75 = w0 + 16;
# 209 "../HPL_dlaswp04T.c"
      *mem_74 = (double )*mem_75;
# 209 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 210 "../HPL_dlaswp04T.c"
      mem_76 = u0 + 17;
# 210 "../HPL_dlaswp04T.c"
      *a0 = *mem_76;
# 210 "../HPL_dlaswp04T.c"
      mem_77 = u0 + 17;
# 210 "../HPL_dlaswp04T.c"
      mem_78 = w0 + 17;
# 210 "../HPL_dlaswp04T.c"
      *mem_77 = (double )*mem_78;
# 210 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 211 "../HPL_dlaswp04T.c"
      mem_79 = u0 + 18;
# 211 "../HPL_dlaswp04T.c"
      *a0 = *mem_79;
# 211 "../HPL_dlaswp04T.c"
      mem_80 = u0 + 18;
# 211 "../HPL_dlaswp04T.c"
      mem_81 = w0 + 18;
# 211 "../HPL_dlaswp04T.c"
      *mem_80 = (double )*mem_81;
# 211 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 212 "../HPL_dlaswp04T.c"
      mem_82 = u0 + 19;
# 212 "../HPL_dlaswp04T.c"
      *a0 = *mem_82;
# 212 "../HPL_dlaswp04T.c"
      mem_83 = u0 + 19;
# 212 "../HPL_dlaswp04T.c"
      mem_84 = w0 + 19;
# 212 "../HPL_dlaswp04T.c"
      *mem_83 = (double )*mem_84;
# 212 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 213 "../HPL_dlaswp04T.c"
      mem_85 = u0 + 20;
# 213 "../HPL_dlaswp04T.c"
      *a0 = *mem_85;
# 213 "../HPL_dlaswp04T.c"
      mem_86 = u0 + 20;
# 213 "../HPL_dlaswp04T.c"
      mem_87 = w0 + 20;
# 213 "../HPL_dlaswp04T.c"
      *mem_86 = (double )*mem_87;
# 213 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 214 "../HPL_dlaswp04T.c"
      mem_88 = u0 + 21;
# 214 "../HPL_dlaswp04T.c"
      *a0 = *mem_88;
# 214 "../HPL_dlaswp04T.c"
      mem_89 = u0 + 21;
# 214 "../HPL_dlaswp04T.c"
      mem_90 = w0 + 21;
# 214 "../HPL_dlaswp04T.c"
      *mem_89 = (double )*mem_90;
# 214 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 215 "../HPL_dlaswp04T.c"
      mem_91 = u0 + 22;
# 215 "../HPL_dlaswp04T.c"
      *a0 = *mem_91;
# 215 "../HPL_dlaswp04T.c"
      mem_92 = u0 + 22;
# 215 "../HPL_dlaswp04T.c"
      mem_93 = w0 + 22;
# 215 "../HPL_dlaswp04T.c"
      *mem_92 = (double )*mem_93;
# 215 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 216 "../HPL_dlaswp04T.c"
      mem_94 = u0 + 23;
# 216 "../HPL_dlaswp04T.c"
      *a0 = *mem_94;
# 216 "../HPL_dlaswp04T.c"
      mem_95 = u0 + 23;
# 216 "../HPL_dlaswp04T.c"
      mem_96 = w0 + 23;
# 216 "../HPL_dlaswp04T.c"
      *mem_95 = (double )*mem_96;
# 216 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 217 "../HPL_dlaswp04T.c"
      mem_97 = u0 + 24;
# 217 "../HPL_dlaswp04T.c"
      *a0 = *mem_97;
# 217 "../HPL_dlaswp04T.c"
      mem_98 = u0 + 24;
# 217 "../HPL_dlaswp04T.c"
      mem_99 = w0 + 24;
# 217 "../HPL_dlaswp04T.c"
      *mem_98 = (double )*mem_99;
# 217 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 218 "../HPL_dlaswp04T.c"
      mem_100 = u0 + 25;
# 218 "../HPL_dlaswp04T.c"
      *a0 = *mem_100;
# 218 "../HPL_dlaswp04T.c"
      mem_101 = u0 + 25;
# 218 "../HPL_dlaswp04T.c"
      mem_102 = w0 + 25;
# 218 "../HPL_dlaswp04T.c"
      *mem_101 = (double )*mem_102;
# 218 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 219 "../HPL_dlaswp04T.c"
      mem_103 = u0 + 26;
# 219 "../HPL_dlaswp04T.c"
      *a0 = *mem_103;
# 219 "../HPL_dlaswp04T.c"
      mem_104 = u0 + 26;
# 219 "../HPL_dlaswp04T.c"
      mem_105 = w0 + 26;
# 219 "../HPL_dlaswp04T.c"
      *mem_104 = (double )*mem_105;
# 219 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 220 "../HPL_dlaswp04T.c"
      mem_106 = u0 + 27;
# 220 "../HPL_dlaswp04T.c"
      *a0 = *mem_106;
# 220 "../HPL_dlaswp04T.c"
      mem_107 = u0 + 27;
# 220 "../HPL_dlaswp04T.c"
      mem_108 = w0 + 27;
# 220 "../HPL_dlaswp04T.c"
      *mem_107 = (double )*mem_108;
# 220 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 221 "../HPL_dlaswp04T.c"
      mem_109 = u0 + 28;
# 221 "../HPL_dlaswp04T.c"
      *a0 = *mem_109;
# 221 "../HPL_dlaswp04T.c"
      mem_110 = u0 + 28;
# 221 "../HPL_dlaswp04T.c"
      mem_111 = w0 + 28;
# 221 "../HPL_dlaswp04T.c"
      *mem_110 = (double )*mem_111;
# 221 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 222 "../HPL_dlaswp04T.c"
      mem_112 = u0 + 29;
# 222 "../HPL_dlaswp04T.c"
      *a0 = *mem_112;
# 222 "../HPL_dlaswp04T.c"
      mem_113 = u0 + 29;
# 222 "../HPL_dlaswp04T.c"
      mem_114 = w0 + 29;
# 222 "../HPL_dlaswp04T.c"
      *mem_113 = (double )*mem_114;
# 222 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 223 "../HPL_dlaswp04T.c"
      mem_115 = u0 + 30;
# 223 "../HPL_dlaswp04T.c"
      *a0 = *mem_115;
# 223 "../HPL_dlaswp04T.c"
      mem_116 = u0 + 30;
# 223 "../HPL_dlaswp04T.c"
      mem_117 = w0 + 30;
# 223 "../HPL_dlaswp04T.c"
      *mem_116 = (double )*mem_117;
# 223 "../HPL_dlaswp04T.c"
      a0 += LDA;
# 224 "../HPL_dlaswp04T.c"
      mem_118 = u0 + 31;
# 224 "../HPL_dlaswp04T.c"
      *a0 = *mem_118;
# 224 "../HPL_dlaswp04T.c"
      mem_119 = u0 + 31;
# 224 "../HPL_dlaswp04T.c"
      mem_120 = w0 + 31;
# 224 "../HPL_dlaswp04T.c"
      *mem_119 = (double )*mem_120;
# 224 "../HPL_dlaswp04T.c"
      a0 += LDA;
      __CrestLoad(10276, (unsigned long )(& i), (long long )i);
      __CrestLoad(10275, (unsigned long )0, (long long )1);
      __CrestApply2(10274, 0, (long long )(i + 1));
      __CrestStore(10277, (unsigned long )(& i));
# 180 "../HPL_dlaswp04T.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10278, (unsigned long )(& M0), (long long )M0);
    __CrestStore(10279, (unsigned long )(& i));
# 227 "../HPL_dlaswp04T.c"
    i = (int )M0;
    {
# 227 "../HPL_dlaswp04T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10282, (unsigned long )(& i), (long long )i);
      __CrestLoad(10281, (unsigned long )(& M1), (long long )M1);
      __CrestApply2(10280, 16, (long long )(i < (int )M1));
# 227 "../HPL_dlaswp04T.c"
      if (i < (int )M1) {
        __CrestBranch(10283, 4077, 1);

      } else {
        __CrestBranch(10284, 4078, 0);
# 227 "../HPL_dlaswp04T.c"
        goto while_break___1;
      }
      }
# 229 "../HPL_dlaswp04T.c"
      mem_121 = W0 + i * (int )LDW;
# 229 "../HPL_dlaswp04T.c"
      u0 = U + (int )*mem_121 * (int )LDU;
# 229 "../HPL_dlaswp04T.c"
      w0 = w + i * (int )LDW;
# 231 "../HPL_dlaswp04T.c"
      mem_122 = u0 + 0;
# 231 "../HPL_dlaswp04T.c"
      mem_123 = w0 + 0;
# 231 "../HPL_dlaswp04T.c"
      *mem_122 = (double )*mem_123;
# 233 "../HPL_dlaswp04T.c"
      mem_124 = u0 + 1;
# 233 "../HPL_dlaswp04T.c"
      mem_125 = w0 + 1;
# 233 "../HPL_dlaswp04T.c"
      *mem_124 = (double )*mem_125;
# 236 "../HPL_dlaswp04T.c"
      mem_126 = u0 + 2;
# 236 "../HPL_dlaswp04T.c"
      mem_127 = w0 + 2;
# 236 "../HPL_dlaswp04T.c"
      *mem_126 = (double )*mem_127;
# 236 "../HPL_dlaswp04T.c"
      mem_128 = u0 + 3;
# 236 "../HPL_dlaswp04T.c"
      mem_129 = w0 + 3;
# 236 "../HPL_dlaswp04T.c"
      *mem_128 = (double )*mem_129;
# 239 "../HPL_dlaswp04T.c"
      mem_130 = u0 + 4;
# 239 "../HPL_dlaswp04T.c"
      mem_131 = w0 + 4;
# 239 "../HPL_dlaswp04T.c"
      *mem_130 = (double )*mem_131;
# 239 "../HPL_dlaswp04T.c"
      mem_132 = u0 + 5;
# 239 "../HPL_dlaswp04T.c"
      mem_133 = w0 + 5;
# 239 "../HPL_dlaswp04T.c"
      *mem_132 = (double )*mem_133;
# 239 "../HPL_dlaswp04T.c"
      mem_134 = u0 + 6;
# 239 "../HPL_dlaswp04T.c"
      mem_135 = w0 + 6;
# 239 "../HPL_dlaswp04T.c"
      *mem_134 = (double )*mem_135;
# 239 "../HPL_dlaswp04T.c"
      mem_136 = u0 + 7;
# 239 "../HPL_dlaswp04T.c"
      mem_137 = w0 + 7;
# 239 "../HPL_dlaswp04T.c"
      *mem_136 = (double )*mem_137;
# 242 "../HPL_dlaswp04T.c"
      mem_138 = u0 + 8;
# 242 "../HPL_dlaswp04T.c"
      mem_139 = w0 + 8;
# 242 "../HPL_dlaswp04T.c"
      *mem_138 = (double )*mem_139;
# 242 "../HPL_dlaswp04T.c"
      mem_140 = u0 + 9;
# 242 "../HPL_dlaswp04T.c"
      mem_141 = w0 + 9;
# 242 "../HPL_dlaswp04T.c"
      *mem_140 = (double )*mem_141;
# 242 "../HPL_dlaswp04T.c"
      mem_142 = u0 + 10;
# 242 "../HPL_dlaswp04T.c"
      mem_143 = w0 + 10;
# 242 "../HPL_dlaswp04T.c"
      *mem_142 = (double )*mem_143;
# 242 "../HPL_dlaswp04T.c"
      mem_144 = u0 + 11;
# 242 "../HPL_dlaswp04T.c"
      mem_145 = w0 + 11;
# 242 "../HPL_dlaswp04T.c"
      *mem_144 = (double )*mem_145;
# 243 "../HPL_dlaswp04T.c"
      mem_146 = u0 + 12;
# 243 "../HPL_dlaswp04T.c"
      mem_147 = w0 + 12;
# 243 "../HPL_dlaswp04T.c"
      *mem_146 = (double )*mem_147;
# 243 "../HPL_dlaswp04T.c"
      mem_148 = u0 + 13;
# 243 "../HPL_dlaswp04T.c"
      mem_149 = w0 + 13;
# 243 "../HPL_dlaswp04T.c"
      *mem_148 = (double )*mem_149;
# 243 "../HPL_dlaswp04T.c"
      mem_150 = u0 + 14;
# 243 "../HPL_dlaswp04T.c"
      mem_151 = w0 + 14;
# 243 "../HPL_dlaswp04T.c"
      *mem_150 = (double )*mem_151;
# 243 "../HPL_dlaswp04T.c"
      mem_152 = u0 + 15;
# 243 "../HPL_dlaswp04T.c"
      mem_153 = w0 + 15;
# 243 "../HPL_dlaswp04T.c"
      *mem_152 = (double )*mem_153;
# 246 "../HPL_dlaswp04T.c"
      mem_154 = u0 + 16;
# 246 "../HPL_dlaswp04T.c"
      mem_155 = w0 + 16;
# 246 "../HPL_dlaswp04T.c"
      *mem_154 = (double )*mem_155;
# 246 "../HPL_dlaswp04T.c"
      mem_156 = u0 + 17;
# 246 "../HPL_dlaswp04T.c"
      mem_157 = w0 + 17;
# 246 "../HPL_dlaswp04T.c"
      *mem_156 = (double )*mem_157;
# 246 "../HPL_dlaswp04T.c"
      mem_158 = u0 + 18;
# 246 "../HPL_dlaswp04T.c"
      mem_159 = w0 + 18;
# 246 "../HPL_dlaswp04T.c"
      *mem_158 = (double )*mem_159;
# 246 "../HPL_dlaswp04T.c"
      mem_160 = u0 + 19;
# 246 "../HPL_dlaswp04T.c"
      mem_161 = w0 + 19;
# 246 "../HPL_dlaswp04T.c"
      *mem_160 = (double )*mem_161;
# 247 "../HPL_dlaswp04T.c"
      mem_162 = u0 + 20;
# 247 "../HPL_dlaswp04T.c"
      mem_163 = w0 + 20;
# 247 "../HPL_dlaswp04T.c"
      *mem_162 = (double )*mem_163;
# 247 "../HPL_dlaswp04T.c"
      mem_164 = u0 + 21;
# 247 "../HPL_dlaswp04T.c"
      mem_165 = w0 + 21;
# 247 "../HPL_dlaswp04T.c"
      *mem_164 = (double )*mem_165;
# 247 "../HPL_dlaswp04T.c"
      mem_166 = u0 + 22;
# 247 "../HPL_dlaswp04T.c"
      mem_167 = w0 + 22;
# 247 "../HPL_dlaswp04T.c"
      *mem_166 = (double )*mem_167;
# 247 "../HPL_dlaswp04T.c"
      mem_168 = u0 + 23;
# 247 "../HPL_dlaswp04T.c"
      mem_169 = w0 + 23;
# 247 "../HPL_dlaswp04T.c"
      *mem_168 = (double )*mem_169;
# 248 "../HPL_dlaswp04T.c"
      mem_170 = u0 + 24;
# 248 "../HPL_dlaswp04T.c"
      mem_171 = w0 + 24;
# 248 "../HPL_dlaswp04T.c"
      *mem_170 = (double )*mem_171;
# 248 "../HPL_dlaswp04T.c"
      mem_172 = u0 + 25;
# 248 "../HPL_dlaswp04T.c"
      mem_173 = w0 + 25;
# 248 "../HPL_dlaswp04T.c"
      *mem_172 = (double )*mem_173;
# 248 "../HPL_dlaswp04T.c"
      mem_174 = u0 + 26;
# 248 "../HPL_dlaswp04T.c"
      mem_175 = w0 + 26;
# 248 "../HPL_dlaswp04T.c"
      *mem_174 = (double )*mem_175;
# 248 "../HPL_dlaswp04T.c"
      mem_176 = u0 + 27;
# 248 "../HPL_dlaswp04T.c"
      mem_177 = w0 + 27;
# 248 "../HPL_dlaswp04T.c"
      *mem_176 = (double )*mem_177;
# 249 "../HPL_dlaswp04T.c"
      mem_178 = u0 + 28;
# 249 "../HPL_dlaswp04T.c"
      mem_179 = w0 + 28;
# 249 "../HPL_dlaswp04T.c"
      *mem_178 = (double )*mem_179;
# 249 "../HPL_dlaswp04T.c"
      mem_180 = u0 + 29;
# 249 "../HPL_dlaswp04T.c"
      mem_181 = w0 + 29;
# 249 "../HPL_dlaswp04T.c"
      *mem_180 = (double )*mem_181;
# 249 "../HPL_dlaswp04T.c"
      mem_182 = u0 + 30;
# 249 "../HPL_dlaswp04T.c"
      mem_183 = w0 + 30;
# 249 "../HPL_dlaswp04T.c"
      *mem_182 = (double )*mem_183;
# 249 "../HPL_dlaswp04T.c"
      mem_184 = u0 + 31;
# 249 "../HPL_dlaswp04T.c"
      mem_185 = w0 + 31;
# 249 "../HPL_dlaswp04T.c"
      *mem_184 = (double )*mem_185;
      __CrestLoad(10287, (unsigned long )(& i), (long long )i);
      __CrestLoad(10286, (unsigned long )0, (long long )1);
      __CrestApply2(10285, 0, (long long )(i + 1));
      __CrestStore(10288, (unsigned long )(& i));
# 227 "../HPL_dlaswp04T.c"
      i ++;
    }
    while_break___1: ;
    }
    __CrestLoad(10291, (unsigned long )(& j), (long long )j);
    __CrestLoad(10290, (unsigned long )0, (long long )32);
    __CrestApply2(10289, 0, (long long )(j + 32));
    __CrestStore(10292, (unsigned long )(& j));
# 177 "../HPL_dlaswp04T.c"
    j += 32;
# 177 "../HPL_dlaswp04T.c"
    A += incA;
# 177 "../HPL_dlaswp04T.c"
    U += incU;
# 177 "../HPL_dlaswp04T.c"
    w += 32;
  }
  while_break: ;
  }
  {
  __CrestLoad(10295, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10294, (unsigned long )0, (long long )0);
  __CrestApply2(10293, 14, (long long )(nr > 0));
# 254 "../HPL_dlaswp04T.c"
  if (nr > 0) {
    __CrestBranch(10296, 4084, 1);
    __CrestLoad(10298, (unsigned long )0, (long long )0);
    __CrestStore(10299, (unsigned long )(& i));
# 256 "../HPL_dlaswp04T.c"
    i = 0;
    {
# 256 "../HPL_dlaswp04T.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(10302, (unsigned long )(& i), (long long )i);
      __CrestLoad(10301, (unsigned long )(& M0), (long long )M0);
      __CrestApply2(10300, 16, (long long )(i < (int )M0));
# 256 "../HPL_dlaswp04T.c"
      if (i < (int )M0) {
        __CrestBranch(10303, 4089, 1);

      } else {
        __CrestBranch(10304, 4090, 0);
# 256 "../HPL_dlaswp04T.c"
        goto while_break___2;
      }
      }
# 258 "../HPL_dlaswp04T.c"
      mem_186 = LINDXA + i;
# 258 "../HPL_dlaswp04T.c"
      a0 = A + *mem_186;
# 258 "../HPL_dlaswp04T.c"
      mem_187 = LINDXAU + i;
# 258 "../HPL_dlaswp04T.c"
      u0 = U + *mem_187 * LDU;
# 258 "../HPL_dlaswp04T.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10305, (unsigned long )0, (long long )0);
      __CrestStore(10306, (unsigned long )(& j));
# 259 "../HPL_dlaswp04T.c"
      j = 0;
      {
# 259 "../HPL_dlaswp04T.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(10309, (unsigned long )(& j), (long long )j);
        __CrestLoad(10308, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10307, 16, (long long )(j < nr));
# 259 "../HPL_dlaswp04T.c"
        if (j < nr) {
          __CrestBranch(10310, 4096, 1);

        } else {
          __CrestBranch(10311, 4097, 0);
# 259 "../HPL_dlaswp04T.c"
          goto while_break___3;
        }
        }
# 259 "../HPL_dlaswp04T.c"
        mem_188 = u0 + j;
# 259 "../HPL_dlaswp04T.c"
        *a0 = *mem_188;
# 259 "../HPL_dlaswp04T.c"
        mem_189 = u0 + j;
# 259 "../HPL_dlaswp04T.c"
        mem_190 = w0 + j;
# 259 "../HPL_dlaswp04T.c"
        *mem_189 = (double )*mem_190;
        __CrestLoad(10314, (unsigned long )(& j), (long long )j);
        __CrestLoad(10313, (unsigned long )0, (long long )1);
        __CrestApply2(10312, 0, (long long )(j + 1));
        __CrestStore(10315, (unsigned long )(& j));
# 259 "../HPL_dlaswp04T.c"
        j ++;
# 259 "../HPL_dlaswp04T.c"
        a0 += LDA;
      }
      while_break___3: ;
      }
      __CrestLoad(10318, (unsigned long )(& i), (long long )i);
      __CrestLoad(10317, (unsigned long )0, (long long )1);
      __CrestApply2(10316, 0, (long long )(i + 1));
      __CrestStore(10319, (unsigned long )(& i));
# 256 "../HPL_dlaswp04T.c"
      i ++;
    }
    while_break___2: ;
    }
    __CrestLoad(10320, (unsigned long )(& M0), (long long )M0);
    __CrestStore(10321, (unsigned long )(& i));
# 261 "../HPL_dlaswp04T.c"
    i = (int )M0;
    {
# 261 "../HPL_dlaswp04T.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(10324, (unsigned long )(& i), (long long )i);
      __CrestLoad(10323, (unsigned long )(& M1), (long long )M1);
      __CrestApply2(10322, 16, (long long )(i < (int )M1));
# 261 "../HPL_dlaswp04T.c"
      if (i < (int )M1) {
        __CrestBranch(10325, 4107, 1);

      } else {
        __CrestBranch(10326, 4108, 0);
# 261 "../HPL_dlaswp04T.c"
        goto while_break___4;
      }
      }
# 263 "../HPL_dlaswp04T.c"
      mem_191 = W0 + i * (int )LDW;
# 263 "../HPL_dlaswp04T.c"
      u0 = U + (int )*mem_191 * (int )LDU;
# 263 "../HPL_dlaswp04T.c"
      w0 = w + i * (int )LDW;
      __CrestLoad(10327, (unsigned long )0, (long long )0);
      __CrestStore(10328, (unsigned long )(& j));
# 264 "../HPL_dlaswp04T.c"
      j = 0;
      {
# 264 "../HPL_dlaswp04T.c"
      while (1) {
        while_continue___5: ;
        {
        __CrestLoad(10331, (unsigned long )(& j), (long long )j);
        __CrestLoad(10330, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10329, 16, (long long )(j < nr));
# 264 "../HPL_dlaswp04T.c"
        if (j < nr) {
          __CrestBranch(10332, 4114, 1);

        } else {
          __CrestBranch(10333, 4115, 0);
# 264 "../HPL_dlaswp04T.c"
          goto while_break___5;
        }
        }
# 264 "../HPL_dlaswp04T.c"
        mem_192 = u0 + j;
# 264 "../HPL_dlaswp04T.c"
        mem_193 = w0 + j;
# 264 "../HPL_dlaswp04T.c"
        *mem_192 = (double )*mem_193;
        __CrestLoad(10336, (unsigned long )(& j), (long long )j);
        __CrestLoad(10335, (unsigned long )0, (long long )1);
        __CrestApply2(10334, 0, (long long )(j + 1));
        __CrestStore(10337, (unsigned long )(& j));
# 264 "../HPL_dlaswp04T.c"
        j ++;
      }
      while_break___5: ;
      }
      __CrestLoad(10340, (unsigned long )(& i), (long long )i);
      __CrestLoad(10339, (unsigned long )0, (long long )1);
      __CrestApply2(10338, 0, (long long )(i + 1));
      __CrestStore(10341, (unsigned long )(& i));
# 261 "../HPL_dlaswp04T.c"
      i ++;
    }
    while_break___4: ;
    }
  } else {
    __CrestBranch(10297, 4120, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10342);
# 60 "../HPL_dlaswp04T.c"
  return;
  }
}
}
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 416 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp05N(int const M , int const N , double *A , int const LDA , double const *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp05N.c"
void HPL_dlaswp05N(int const M , int const N , double *A , int const LDA , double const *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU )
{
  double const *U0 ;
  double const *u0 ;
  double *a0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_18 ;
  int const *mem_19 ;
  int const *mem_20 ;
  int const *mem_21 ;

  {
  __CrestCall(10347, 68);
  __CrestStore(10346, (unsigned long )(& LDU));
  __CrestStore(10345, (unsigned long )(& LDA));
  __CrestStore(10344, (unsigned long )(& N));
  __CrestStore(10343, (unsigned long )(& M));
# 132 "../HPL_dlaswp05N.c"
  U0 = U;
  __CrestLoad(10350, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10349, (unsigned long )0, (long long )5);
  __CrestApply2(10348, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10351, (unsigned long )(& incA));
# 134 "../HPL_dlaswp05N.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10354, (unsigned long )(& LDU), (long long )LDU);
  __CrestLoad(10353, (unsigned long )0, (long long )5);
  __CrestApply2(10352, 8, (long long )((unsigned int )LDU << 5));
  __CrestStore(10355, (unsigned long )(& incU));
# 134 "../HPL_dlaswp05N.c"
  incU = (int )((unsigned int )LDU << 5);
  {
  __CrestLoad(10358, (unsigned long )(& M), (long long )M);
  __CrestLoad(10357, (unsigned long )0, (long long )0);
  __CrestApply2(10356, 15, (long long )(M <= 0));
# 143 "../HPL_dlaswp05N.c"
  if (M <= 0) {
    __CrestBranch(10359, 4125, 1);
# 143 "../HPL_dlaswp05N.c"
    goto return_label;
  } else {
    __CrestBranch(10360, 4127, 0);
    {
    __CrestLoad(10363, (unsigned long )(& N), (long long )N);
    __CrestLoad(10362, (unsigned long )0, (long long )0);
    __CrestApply2(10361, 15, (long long )(N <= 0));
# 143 "../HPL_dlaswp05N.c"
    if (N <= 0) {
      __CrestBranch(10364, 4128, 1);
# 143 "../HPL_dlaswp05N.c"
      goto return_label;
    } else {
      __CrestBranch(10365, 4130, 0);

    }
    }
  }
  }
  __CrestLoad(10370, (unsigned long )(& N), (long long )N);
  __CrestLoad(10369, (unsigned long )0, (long long )5);
  __CrestApply2(10368, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10367, (unsigned long )0, (long long )5);
  __CrestApply2(10366, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10371, (unsigned long )(& nu));
# 145 "../HPL_dlaswp05N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10374, (unsigned long )(& N), (long long )N);
  __CrestLoad(10373, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10372, 1, (long long )(N - (int const )nu));
  __CrestStore(10375, (unsigned long )(& nr));
# 145 "../HPL_dlaswp05N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10376, (unsigned long )0, (long long )0);
  __CrestStore(10377, (unsigned long )(& j));
# 148 "../HPL_dlaswp05N.c"
  j = 0;
  {
# 148 "../HPL_dlaswp05N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10380, (unsigned long )(& j), (long long )j);
    __CrestLoad(10379, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10378, 16, (long long )(j < nu));
# 148 "../HPL_dlaswp05N.c"
    if (j < nu) {
      __CrestBranch(10381, 4136, 1);

    } else {
      __CrestBranch(10382, 4137, 0);
# 148 "../HPL_dlaswp05N.c"
      goto while_break;
    }
    }
    __CrestLoad(10383, (unsigned long )0, (long long )0);
    __CrestStore(10384, (unsigned long )(& i));
# 150 "../HPL_dlaswp05N.c"
    i = 0;
    {
# 150 "../HPL_dlaswp05N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10387, (unsigned long )(& i), (long long )i);
      __CrestLoad(10386, (unsigned long )(& M), (long long )M);
      __CrestApply2(10385, 16, (long long )(i < (int )M));
# 150 "../HPL_dlaswp05N.c"
      if (i < (int )M) {
        __CrestBranch(10388, 4143, 1);

      } else {
        __CrestBranch(10389, 4144, 0);
# 150 "../HPL_dlaswp05N.c"
        goto while_break___0;
      }
      }
# 152 "../HPL_dlaswp05N.c"
      mem_18 = LINDXA + i;
# 152 "../HPL_dlaswp05N.c"
      a0 = A + *mem_18;
# 152 "../HPL_dlaswp05N.c"
      mem_19 = LINDXAU + i;
# 152 "../HPL_dlaswp05N.c"
      u0 = U0 + *mem_19;
# 154 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 154 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 154 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 156 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 156 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 156 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 159 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 159 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 159 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 159 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 159 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 159 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 162 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 162 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 162 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 162 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 162 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 162 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 163 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 163 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 163 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 163 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 163 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 163 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 166 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 166 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 166 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 166 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 166 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 166 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 167 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 167 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 167 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 167 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 167 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 167 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 168 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 168 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 168 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 168 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 169 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 169 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 169 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 169 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 169 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 169 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 172 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 172 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 172 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 172 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 172 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 172 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 173 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 173 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 173 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 173 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 173 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 173 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 174 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 174 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 174 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 174 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 174 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 174 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 175 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 175 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 175 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 175 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 176 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 176 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 176 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 176 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 176 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 176 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 177 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 177 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 177 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 177 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 177 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 177 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 178 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 178 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 178 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 178 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 179 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 179 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 179 "../HPL_dlaswp05N.c"
      u0 += LDU;
# 179 "../HPL_dlaswp05N.c"
      *a0 = (double )*u0;
# 179 "../HPL_dlaswp05N.c"
      a0 += LDA;
# 179 "../HPL_dlaswp05N.c"
      u0 += LDU;
      __CrestLoad(10392, (unsigned long )(& i), (long long )i);
      __CrestLoad(10391, (unsigned long )0, (long long )1);
      __CrestApply2(10390, 0, (long long )(i + 1));
      __CrestStore(10393, (unsigned long )(& i));
# 150 "../HPL_dlaswp05N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10396, (unsigned long )(& j), (long long )j);
    __CrestLoad(10395, (unsigned long )0, (long long )32);
    __CrestApply2(10394, 0, (long long )(j + 32));
    __CrestStore(10397, (unsigned long )(& j));
# 148 "../HPL_dlaswp05N.c"
    j += 32;
# 148 "../HPL_dlaswp05N.c"
    A += incA;
# 148 "../HPL_dlaswp05N.c"
    U0 += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(10400, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10399, (unsigned long )0, (long long )0);
  __CrestApply2(10398, 13, (long long )(nr != 0));
# 184 "../HPL_dlaswp05N.c"
  if (nr != 0) {
    __CrestBranch(10401, 4150, 1);
    __CrestLoad(10403, (unsigned long )0, (long long )0);
    __CrestStore(10404, (unsigned long )(& i));
# 186 "../HPL_dlaswp05N.c"
    i = 0;
    {
# 186 "../HPL_dlaswp05N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10407, (unsigned long )(& i), (long long )i);
      __CrestLoad(10406, (unsigned long )(& M), (long long )M);
      __CrestApply2(10405, 16, (long long )(i < (int )M));
# 186 "../HPL_dlaswp05N.c"
      if (i < (int )M) {
        __CrestBranch(10408, 4155, 1);

      } else {
        __CrestBranch(10409, 4156, 0);
# 186 "../HPL_dlaswp05N.c"
        goto while_break___1;
      }
      }
# 188 "../HPL_dlaswp05N.c"
      mem_20 = LINDXA + i;
# 188 "../HPL_dlaswp05N.c"
      a0 = A + *mem_20;
# 188 "../HPL_dlaswp05N.c"
      mem_21 = LINDXAU + i;
# 188 "../HPL_dlaswp05N.c"
      u0 = U0 + *mem_21;
      __CrestLoad(10410, (unsigned long )0, (long long )0);
      __CrestStore(10411, (unsigned long )(& j));
# 189 "../HPL_dlaswp05N.c"
      j = 0;
      {
# 189 "../HPL_dlaswp05N.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10414, (unsigned long )(& j), (long long )j);
        __CrestLoad(10413, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10412, 16, (long long )(j < nr));
# 189 "../HPL_dlaswp05N.c"
        if (j < nr) {
          __CrestBranch(10415, 4162, 1);

        } else {
          __CrestBranch(10416, 4163, 0);
# 189 "../HPL_dlaswp05N.c"
          goto while_break___2;
        }
        }
# 189 "../HPL_dlaswp05N.c"
        *a0 = (double )*u0;
        __CrestLoad(10419, (unsigned long )(& j), (long long )j);
        __CrestLoad(10418, (unsigned long )0, (long long )1);
        __CrestApply2(10417, 0, (long long )(j + 1));
        __CrestStore(10420, (unsigned long )(& j));
# 189 "../HPL_dlaswp05N.c"
        j ++;
# 189 "../HPL_dlaswp05N.c"
        a0 += LDA;
# 189 "../HPL_dlaswp05N.c"
        u0 += LDU;
      }
      while_break___2: ;
      }
      __CrestLoad(10423, (unsigned long )(& i), (long long )i);
      __CrestLoad(10422, (unsigned long )0, (long long )1);
      __CrestApply2(10421, 0, (long long )(i + 1));
      __CrestStore(10424, (unsigned long )(& i));
# 186 "../HPL_dlaswp05N.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(10402, 4168, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10425);
# 60 "../HPL_dlaswp05N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 427 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp05T(int const M , int const N , double *A , int const LDA , double const *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU ) ;
# 60 "../HPL_dlaswp05T.c"
void HPL_dlaswp05T(int const M , int const N , double *A , int const LDA , double const *U ,
                   int const LDU , int const *LINDXA , int const *LINDXAU )
{
  double const *U0 ;
  double const *u0 ;
  double *a0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_18 ;
  int const *mem_19 ;
  double const *mem_20 ;
  double const *mem_21 ;
  double const *mem_22 ;
  double const *mem_23 ;
  double const *mem_24 ;
  double const *mem_25 ;
  double const *mem_26 ;
  double const *mem_27 ;
  double const *mem_28 ;
  double const *mem_29 ;
  double const *mem_30 ;
  double const *mem_31 ;
  double const *mem_32 ;
  double const *mem_33 ;
  double const *mem_34 ;
  double const *mem_35 ;
  double const *mem_36 ;
  double const *mem_37 ;
  double const *mem_38 ;
  double const *mem_39 ;
  double const *mem_40 ;
  double const *mem_41 ;
  double const *mem_42 ;
  double const *mem_43 ;
  double const *mem_44 ;
  double const *mem_45 ;
  double const *mem_46 ;
  double const *mem_47 ;
  double const *mem_48 ;
  double const *mem_49 ;
  double const *mem_50 ;
  double const *mem_51 ;
  int const *mem_52 ;
  int const *mem_53 ;
  double const *mem_54 ;

  {
  __CrestCall(10430, 69);
  __CrestStore(10429, (unsigned long )(& LDU));
  __CrestStore(10428, (unsigned long )(& LDA));
  __CrestStore(10427, (unsigned long )(& N));
  __CrestStore(10426, (unsigned long )(& M));
# 132 "../HPL_dlaswp05T.c"
  U0 = U;
  __CrestLoad(10433, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10432, (unsigned long )0, (long long )5);
  __CrestApply2(10431, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10434, (unsigned long )(& incA));
# 134 "../HPL_dlaswp05T.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10435, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(10436, (unsigned long )(& incU));
# 134 "../HPL_dlaswp05T.c"
  incU = 1 << 5;
  {
  __CrestLoad(10439, (unsigned long )(& M), (long long )M);
  __CrestLoad(10438, (unsigned long )0, (long long )0);
  __CrestApply2(10437, 15, (long long )(M <= 0));
# 142 "../HPL_dlaswp05T.c"
  if (M <= 0) {
    __CrestBranch(10440, 4173, 1);
# 142 "../HPL_dlaswp05T.c"
    goto return_label;
  } else {
    __CrestBranch(10441, 4175, 0);
    {
    __CrestLoad(10444, (unsigned long )(& N), (long long )N);
    __CrestLoad(10443, (unsigned long )0, (long long )0);
    __CrestApply2(10442, 15, (long long )(N <= 0));
# 142 "../HPL_dlaswp05T.c"
    if (N <= 0) {
      __CrestBranch(10445, 4176, 1);
# 142 "../HPL_dlaswp05T.c"
      goto return_label;
    } else {
      __CrestBranch(10446, 4178, 0);

    }
    }
  }
  }
  __CrestLoad(10451, (unsigned long )(& N), (long long )N);
  __CrestLoad(10450, (unsigned long )0, (long long )5);
  __CrestApply2(10449, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10448, (unsigned long )0, (long long )5);
  __CrestApply2(10447, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10452, (unsigned long )(& nu));
# 144 "../HPL_dlaswp05T.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10455, (unsigned long )(& N), (long long )N);
  __CrestLoad(10454, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10453, 1, (long long )(N - (int const )nu));
  __CrestStore(10456, (unsigned long )(& nr));
# 144 "../HPL_dlaswp05T.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10457, (unsigned long )0, (long long )0);
  __CrestStore(10458, (unsigned long )(& j));
# 147 "../HPL_dlaswp05T.c"
  j = 0;
  {
# 147 "../HPL_dlaswp05T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10461, (unsigned long )(& j), (long long )j);
    __CrestLoad(10460, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10459, 16, (long long )(j < nu));
# 147 "../HPL_dlaswp05T.c"
    if (j < nu) {
      __CrestBranch(10462, 4184, 1);

    } else {
      __CrestBranch(10463, 4185, 0);
# 147 "../HPL_dlaswp05T.c"
      goto while_break;
    }
    }
    __CrestLoad(10464, (unsigned long )0, (long long )0);
    __CrestStore(10465, (unsigned long )(& i));
# 149 "../HPL_dlaswp05T.c"
    i = 0;
    {
# 149 "../HPL_dlaswp05T.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10468, (unsigned long )(& i), (long long )i);
      __CrestLoad(10467, (unsigned long )(& M), (long long )M);
      __CrestApply2(10466, 16, (long long )(i < (int )M));
# 149 "../HPL_dlaswp05T.c"
      if (i < (int )M) {
        __CrestBranch(10469, 4191, 1);

      } else {
        __CrestBranch(10470, 4192, 0);
# 149 "../HPL_dlaswp05T.c"
        goto while_break___0;
      }
      }
# 151 "../HPL_dlaswp05T.c"
      mem_18 = LINDXA + i;
# 151 "../HPL_dlaswp05T.c"
      a0 = A + *mem_18;
# 151 "../HPL_dlaswp05T.c"
      mem_19 = LINDXAU + i;
# 151 "../HPL_dlaswp05T.c"
      u0 = U0 + *mem_19 * LDU;
# 153 "../HPL_dlaswp05T.c"
      mem_20 = u0 + 0;
# 153 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_20;
# 153 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 155 "../HPL_dlaswp05T.c"
      mem_21 = u0 + 1;
# 155 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_21;
# 155 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 158 "../HPL_dlaswp05T.c"
      mem_22 = u0 + 2;
# 158 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_22;
# 158 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 158 "../HPL_dlaswp05T.c"
      mem_23 = u0 + 3;
# 158 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_23;
# 158 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 161 "../HPL_dlaswp05T.c"
      mem_24 = u0 + 4;
# 161 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_24;
# 161 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 161 "../HPL_dlaswp05T.c"
      mem_25 = u0 + 5;
# 161 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_25;
# 161 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 162 "../HPL_dlaswp05T.c"
      mem_26 = u0 + 6;
# 162 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_26;
# 162 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 162 "../HPL_dlaswp05T.c"
      mem_27 = u0 + 7;
# 162 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_27;
# 162 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 165 "../HPL_dlaswp05T.c"
      mem_28 = u0 + 8;
# 165 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_28;
# 165 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 165 "../HPL_dlaswp05T.c"
      mem_29 = u0 + 9;
# 165 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_29;
# 165 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 166 "../HPL_dlaswp05T.c"
      mem_30 = u0 + 10;
# 166 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_30;
# 166 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 166 "../HPL_dlaswp05T.c"
      mem_31 = u0 + 11;
# 166 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_31;
# 166 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 167 "../HPL_dlaswp05T.c"
      mem_32 = u0 + 12;
# 167 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_32;
# 167 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 167 "../HPL_dlaswp05T.c"
      mem_33 = u0 + 13;
# 167 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_33;
# 167 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 168 "../HPL_dlaswp05T.c"
      mem_34 = u0 + 14;
# 168 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_34;
# 168 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 168 "../HPL_dlaswp05T.c"
      mem_35 = u0 + 15;
# 168 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_35;
# 168 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 171 "../HPL_dlaswp05T.c"
      mem_36 = u0 + 16;
# 171 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_36;
# 171 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 171 "../HPL_dlaswp05T.c"
      mem_37 = u0 + 17;
# 171 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_37;
# 171 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 172 "../HPL_dlaswp05T.c"
      mem_38 = u0 + 18;
# 172 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_38;
# 172 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 172 "../HPL_dlaswp05T.c"
      mem_39 = u0 + 19;
# 172 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_39;
# 172 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 173 "../HPL_dlaswp05T.c"
      mem_40 = u0 + 20;
# 173 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_40;
# 173 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 173 "../HPL_dlaswp05T.c"
      mem_41 = u0 + 21;
# 173 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_41;
# 173 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 174 "../HPL_dlaswp05T.c"
      mem_42 = u0 + 22;
# 174 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_42;
# 174 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 174 "../HPL_dlaswp05T.c"
      mem_43 = u0 + 23;
# 174 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_43;
# 174 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 175 "../HPL_dlaswp05T.c"
      mem_44 = u0 + 24;
# 175 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_44;
# 175 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 175 "../HPL_dlaswp05T.c"
      mem_45 = u0 + 25;
# 175 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_45;
# 175 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 176 "../HPL_dlaswp05T.c"
      mem_46 = u0 + 26;
# 176 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_46;
# 176 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 176 "../HPL_dlaswp05T.c"
      mem_47 = u0 + 27;
# 176 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_47;
# 176 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 177 "../HPL_dlaswp05T.c"
      mem_48 = u0 + 28;
# 177 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_48;
# 177 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 177 "../HPL_dlaswp05T.c"
      mem_49 = u0 + 29;
# 177 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_49;
# 177 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 178 "../HPL_dlaswp05T.c"
      mem_50 = u0 + 30;
# 178 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_50;
# 178 "../HPL_dlaswp05T.c"
      a0 += LDA;
# 178 "../HPL_dlaswp05T.c"
      mem_51 = u0 + 31;
# 178 "../HPL_dlaswp05T.c"
      *a0 = (double )*mem_51;
# 178 "../HPL_dlaswp05T.c"
      a0 += LDA;
      __CrestLoad(10473, (unsigned long )(& i), (long long )i);
      __CrestLoad(10472, (unsigned long )0, (long long )1);
      __CrestApply2(10471, 0, (long long )(i + 1));
      __CrestStore(10474, (unsigned long )(& i));
# 149 "../HPL_dlaswp05T.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10477, (unsigned long )(& j), (long long )j);
    __CrestLoad(10476, (unsigned long )0, (long long )32);
    __CrestApply2(10475, 0, (long long )(j + 32));
    __CrestStore(10478, (unsigned long )(& j));
# 147 "../HPL_dlaswp05T.c"
    j += 32;
# 147 "../HPL_dlaswp05T.c"
    A += incA;
# 147 "../HPL_dlaswp05T.c"
    U0 += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(10481, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10480, (unsigned long )0, (long long )0);
  __CrestApply2(10479, 14, (long long )(nr > 0));
# 183 "../HPL_dlaswp05T.c"
  if (nr > 0) {
    __CrestBranch(10482, 4198, 1);
    __CrestLoad(10484, (unsigned long )0, (long long )0);
    __CrestStore(10485, (unsigned long )(& i));
# 185 "../HPL_dlaswp05T.c"
    i = 0;
    {
# 185 "../HPL_dlaswp05T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10488, (unsigned long )(& i), (long long )i);
      __CrestLoad(10487, (unsigned long )(& M), (long long )M);
      __CrestApply2(10486, 16, (long long )(i < (int )M));
# 185 "../HPL_dlaswp05T.c"
      if (i < (int )M) {
        __CrestBranch(10489, 4203, 1);

      } else {
        __CrestBranch(10490, 4204, 0);
# 185 "../HPL_dlaswp05T.c"
        goto while_break___1;
      }
      }
# 187 "../HPL_dlaswp05T.c"
      mem_52 = LINDXA + i;
# 187 "../HPL_dlaswp05T.c"
      a0 = A + *mem_52;
# 187 "../HPL_dlaswp05T.c"
      mem_53 = LINDXAU + i;
# 187 "../HPL_dlaswp05T.c"
      u0 = U0 + *mem_53 * LDU;
      __CrestLoad(10491, (unsigned long )0, (long long )0);
      __CrestStore(10492, (unsigned long )(& j));
# 188 "../HPL_dlaswp05T.c"
      j = 0;
      {
# 188 "../HPL_dlaswp05T.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10495, (unsigned long )(& j), (long long )j);
        __CrestLoad(10494, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10493, 16, (long long )(j < nr));
# 188 "../HPL_dlaswp05T.c"
        if (j < nr) {
          __CrestBranch(10496, 4210, 1);

        } else {
          __CrestBranch(10497, 4211, 0);
# 188 "../HPL_dlaswp05T.c"
          goto while_break___2;
        }
        }
# 188 "../HPL_dlaswp05T.c"
        mem_54 = u0 + j;
# 188 "../HPL_dlaswp05T.c"
        *a0 = (double )*mem_54;
        __CrestLoad(10500, (unsigned long )(& j), (long long )j);
        __CrestLoad(10499, (unsigned long )0, (long long )1);
        __CrestApply2(10498, 0, (long long )(j + 1));
        __CrestStore(10501, (unsigned long )(& j));
# 188 "../HPL_dlaswp05T.c"
        j ++;
# 188 "../HPL_dlaswp05T.c"
        a0 += LDA;
      }
      while_break___2: ;
      }
      __CrestLoad(10504, (unsigned long )(& i), (long long )i);
      __CrestLoad(10503, (unsigned long )0, (long long )1);
      __CrestApply2(10502, 0, (long long )(i + 1));
      __CrestStore(10505, (unsigned long )(& i));
# 185 "../HPL_dlaswp05T.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(10483, 4216, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10506);
# 60 "../HPL_dlaswp05T.c"
  return;
  }
}
}
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 438 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp06N(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA ) ;
# 60 "../HPL_dlaswp06N.c"
void HPL_dlaswp06N(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA )
{
  double r ;
  double *U0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_18 ;
  int const *mem_19 ;

  {
  __CrestCall(10511, 70);
  __CrestStore(10510, (unsigned long )(& LDU));
  __CrestStore(10509, (unsigned long )(& LDA));
  __CrestStore(10508, (unsigned long )(& N));
  __CrestStore(10507, (unsigned long )(& M));
# 128 "../HPL_dlaswp06N.c"
  U0 = U;
  __CrestLoad(10514, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10513, (unsigned long )0, (long long )5);
  __CrestApply2(10512, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10515, (unsigned long )(& incA));
# 129 "../HPL_dlaswp06N.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10518, (unsigned long )(& LDU), (long long )LDU);
  __CrestLoad(10517, (unsigned long )0, (long long )5);
  __CrestApply2(10516, 8, (long long )((unsigned int )LDU << 5));
  __CrestStore(10519, (unsigned long )(& incU));
# 129 "../HPL_dlaswp06N.c"
  incU = (int )((unsigned int )LDU << 5);
  {
  __CrestLoad(10522, (unsigned long )(& M), (long long )M);
  __CrestLoad(10521, (unsigned long )0, (long long )0);
  __CrestApply2(10520, 15, (long long )(M <= 0));
# 138 "../HPL_dlaswp06N.c"
  if (M <= 0) {
    __CrestBranch(10523, 4221, 1);
# 138 "../HPL_dlaswp06N.c"
    goto return_label;
  } else {
    __CrestBranch(10524, 4223, 0);
    {
    __CrestLoad(10527, (unsigned long )(& N), (long long )N);
    __CrestLoad(10526, (unsigned long )0, (long long )0);
    __CrestApply2(10525, 15, (long long )(N <= 0));
# 138 "../HPL_dlaswp06N.c"
    if (N <= 0) {
      __CrestBranch(10528, 4224, 1);
# 138 "../HPL_dlaswp06N.c"
      goto return_label;
    } else {
      __CrestBranch(10529, 4226, 0);

    }
    }
  }
  }
  __CrestLoad(10534, (unsigned long )(& N), (long long )N);
  __CrestLoad(10533, (unsigned long )0, (long long )5);
  __CrestApply2(10532, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10531, (unsigned long )0, (long long )5);
  __CrestApply2(10530, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10535, (unsigned long )(& nu));
# 140 "../HPL_dlaswp06N.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10538, (unsigned long )(& N), (long long )N);
  __CrestLoad(10537, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10536, 1, (long long )(N - (int const )nu));
  __CrestStore(10539, (unsigned long )(& nr));
# 140 "../HPL_dlaswp06N.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10540, (unsigned long )0, (long long )0);
  __CrestStore(10541, (unsigned long )(& j));
# 143 "../HPL_dlaswp06N.c"
  j = 0;
  {
# 143 "../HPL_dlaswp06N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10544, (unsigned long )(& j), (long long )j);
    __CrestLoad(10543, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10542, 16, (long long )(j < nu));
# 143 "../HPL_dlaswp06N.c"
    if (j < nu) {
      __CrestBranch(10545, 4232, 1);

    } else {
      __CrestBranch(10546, 4233, 0);
# 143 "../HPL_dlaswp06N.c"
      goto while_break;
    }
    }
    __CrestLoad(10547, (unsigned long )0, (long long )0);
    __CrestStore(10548, (unsigned long )(& i));
# 145 "../HPL_dlaswp06N.c"
    i = 0;
    {
# 145 "../HPL_dlaswp06N.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10551, (unsigned long )(& i), (long long )i);
      __CrestLoad(10550, (unsigned long )(& M), (long long )M);
      __CrestApply2(10549, 16, (long long )(i < (int )M));
# 145 "../HPL_dlaswp06N.c"
      if (i < (int )M) {
        __CrestBranch(10552, 4239, 1);

      } else {
        __CrestBranch(10553, 4240, 0);
# 145 "../HPL_dlaswp06N.c"
        goto while_break___0;
      }
      }
# 147 "../HPL_dlaswp06N.c"
      mem_18 = LINDXA + i;
# 147 "../HPL_dlaswp06N.c"
      a0 = A + *mem_18;
# 147 "../HPL_dlaswp06N.c"
      u0 = U0 + i;
# 149 "../HPL_dlaswp06N.c"
      r = *a0;
# 149 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 149 "../HPL_dlaswp06N.c"
      *u0 = r;
# 149 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 149 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 151 "../HPL_dlaswp06N.c"
      r = *a0;
# 151 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 151 "../HPL_dlaswp06N.c"
      *u0 = r;
# 151 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 151 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 154 "../HPL_dlaswp06N.c"
      r = *a0;
# 154 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 154 "../HPL_dlaswp06N.c"
      *u0 = r;
# 154 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 154 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 155 "../HPL_dlaswp06N.c"
      r = *a0;
# 155 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 155 "../HPL_dlaswp06N.c"
      *u0 = r;
# 155 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 155 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 158 "../HPL_dlaswp06N.c"
      r = *a0;
# 158 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 158 "../HPL_dlaswp06N.c"
      *u0 = r;
# 158 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 158 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 159 "../HPL_dlaswp06N.c"
      r = *a0;
# 159 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 159 "../HPL_dlaswp06N.c"
      *u0 = r;
# 159 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 159 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 160 "../HPL_dlaswp06N.c"
      r = *a0;
# 160 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 160 "../HPL_dlaswp06N.c"
      *u0 = r;
# 160 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 160 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 161 "../HPL_dlaswp06N.c"
      r = *a0;
# 161 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 161 "../HPL_dlaswp06N.c"
      *u0 = r;
# 161 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 161 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 164 "../HPL_dlaswp06N.c"
      r = *a0;
# 164 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 164 "../HPL_dlaswp06N.c"
      *u0 = r;
# 164 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 164 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 165 "../HPL_dlaswp06N.c"
      r = *a0;
# 165 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 165 "../HPL_dlaswp06N.c"
      *u0 = r;
# 165 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 165 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 166 "../HPL_dlaswp06N.c"
      r = *a0;
# 166 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 166 "../HPL_dlaswp06N.c"
      *u0 = r;
# 166 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 166 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 167 "../HPL_dlaswp06N.c"
      r = *a0;
# 167 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 167 "../HPL_dlaswp06N.c"
      *u0 = r;
# 167 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 167 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 168 "../HPL_dlaswp06N.c"
      r = *a0;
# 168 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 168 "../HPL_dlaswp06N.c"
      *u0 = r;
# 168 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 168 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 169 "../HPL_dlaswp06N.c"
      r = *a0;
# 169 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 169 "../HPL_dlaswp06N.c"
      *u0 = r;
# 169 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 169 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 170 "../HPL_dlaswp06N.c"
      r = *a0;
# 170 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 170 "../HPL_dlaswp06N.c"
      *u0 = r;
# 170 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 170 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 171 "../HPL_dlaswp06N.c"
      r = *a0;
# 171 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 171 "../HPL_dlaswp06N.c"
      *u0 = r;
# 171 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 171 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 174 "../HPL_dlaswp06N.c"
      r = *a0;
# 174 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 174 "../HPL_dlaswp06N.c"
      *u0 = r;
# 174 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 174 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 175 "../HPL_dlaswp06N.c"
      r = *a0;
# 175 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 175 "../HPL_dlaswp06N.c"
      *u0 = r;
# 175 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 175 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 176 "../HPL_dlaswp06N.c"
      r = *a0;
# 176 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 176 "../HPL_dlaswp06N.c"
      *u0 = r;
# 176 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 176 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 177 "../HPL_dlaswp06N.c"
      r = *a0;
# 177 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 177 "../HPL_dlaswp06N.c"
      *u0 = r;
# 177 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 177 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 178 "../HPL_dlaswp06N.c"
      r = *a0;
# 178 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 178 "../HPL_dlaswp06N.c"
      *u0 = r;
# 178 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 178 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 179 "../HPL_dlaswp06N.c"
      r = *a0;
# 179 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 179 "../HPL_dlaswp06N.c"
      *u0 = r;
# 179 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 179 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 180 "../HPL_dlaswp06N.c"
      r = *a0;
# 180 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 180 "../HPL_dlaswp06N.c"
      *u0 = r;
# 180 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 180 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 181 "../HPL_dlaswp06N.c"
      r = *a0;
# 181 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 181 "../HPL_dlaswp06N.c"
      *u0 = r;
# 181 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 181 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 182 "../HPL_dlaswp06N.c"
      r = *a0;
# 182 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 182 "../HPL_dlaswp06N.c"
      *u0 = r;
# 182 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 182 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 183 "../HPL_dlaswp06N.c"
      r = *a0;
# 183 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 183 "../HPL_dlaswp06N.c"
      *u0 = r;
# 183 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 183 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 184 "../HPL_dlaswp06N.c"
      r = *a0;
# 184 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 184 "../HPL_dlaswp06N.c"
      *u0 = r;
# 184 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 184 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 185 "../HPL_dlaswp06N.c"
      r = *a0;
# 185 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 185 "../HPL_dlaswp06N.c"
      *u0 = r;
# 185 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 185 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 186 "../HPL_dlaswp06N.c"
      r = *a0;
# 186 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 186 "../HPL_dlaswp06N.c"
      *u0 = r;
# 186 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 186 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 187 "../HPL_dlaswp06N.c"
      r = *a0;
# 187 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 187 "../HPL_dlaswp06N.c"
      *u0 = r;
# 187 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 187 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 188 "../HPL_dlaswp06N.c"
      r = *a0;
# 188 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 188 "../HPL_dlaswp06N.c"
      *u0 = r;
# 188 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 188 "../HPL_dlaswp06N.c"
      u0 += LDU;
# 189 "../HPL_dlaswp06N.c"
      r = *a0;
# 189 "../HPL_dlaswp06N.c"
      *a0 = *u0;
# 189 "../HPL_dlaswp06N.c"
      *u0 = r;
# 189 "../HPL_dlaswp06N.c"
      a0 += LDA;
# 189 "../HPL_dlaswp06N.c"
      u0 += LDU;
      __CrestLoad(10556, (unsigned long )(& i), (long long )i);
      __CrestLoad(10555, (unsigned long )0, (long long )1);
      __CrestApply2(10554, 0, (long long )(i + 1));
      __CrestStore(10557, (unsigned long )(& i));
# 145 "../HPL_dlaswp06N.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10560, (unsigned long )(& j), (long long )j);
    __CrestLoad(10559, (unsigned long )0, (long long )32);
    __CrestApply2(10558, 0, (long long )(j + 32));
    __CrestStore(10561, (unsigned long )(& j));
# 143 "../HPL_dlaswp06N.c"
    j += 32;
# 143 "../HPL_dlaswp06N.c"
    A += incA;
# 143 "../HPL_dlaswp06N.c"
    U0 += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(10564, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10563, (unsigned long )0, (long long )0);
  __CrestApply2(10562, 13, (long long )(nr != 0));
# 194 "../HPL_dlaswp06N.c"
  if (nr != 0) {
    __CrestBranch(10565, 4246, 1);
    __CrestLoad(10567, (unsigned long )0, (long long )0);
    __CrestStore(10568, (unsigned long )(& i));
# 196 "../HPL_dlaswp06N.c"
    i = 0;
    {
# 196 "../HPL_dlaswp06N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10571, (unsigned long )(& i), (long long )i);
      __CrestLoad(10570, (unsigned long )(& M), (long long )M);
      __CrestApply2(10569, 16, (long long )(i < (int )M));
# 196 "../HPL_dlaswp06N.c"
      if (i < (int )M) {
        __CrestBranch(10572, 4251, 1);

      } else {
        __CrestBranch(10573, 4252, 0);
# 196 "../HPL_dlaswp06N.c"
        goto while_break___1;
      }
      }
# 198 "../HPL_dlaswp06N.c"
      mem_19 = LINDXA + i;
# 198 "../HPL_dlaswp06N.c"
      a0 = A + *mem_19;
# 198 "../HPL_dlaswp06N.c"
      u0 = U0 + i;
      __CrestLoad(10574, (unsigned long )0, (long long )0);
      __CrestStore(10575, (unsigned long )(& j));
# 199 "../HPL_dlaswp06N.c"
      j = 0;
      {
# 199 "../HPL_dlaswp06N.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10578, (unsigned long )(& j), (long long )j);
        __CrestLoad(10577, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10576, 16, (long long )(j < nr));
# 199 "../HPL_dlaswp06N.c"
        if (j < nr) {
          __CrestBranch(10579, 4258, 1);

        } else {
          __CrestBranch(10580, 4259, 0);
# 199 "../HPL_dlaswp06N.c"
          goto while_break___2;
        }
        }
# 200 "../HPL_dlaswp06N.c"
        r = *a0;
# 200 "../HPL_dlaswp06N.c"
        *a0 = *u0;
# 200 "../HPL_dlaswp06N.c"
        *u0 = r;
        __CrestLoad(10583, (unsigned long )(& j), (long long )j);
        __CrestLoad(10582, (unsigned long )0, (long long )1);
        __CrestApply2(10581, 0, (long long )(j + 1));
        __CrestStore(10584, (unsigned long )(& j));
# 199 "../HPL_dlaswp06N.c"
        j ++;
# 199 "../HPL_dlaswp06N.c"
        a0 += LDA;
# 199 "../HPL_dlaswp06N.c"
        u0 += LDU;
      }
      while_break___2: ;
      }
      __CrestLoad(10587, (unsigned long )(& i), (long long )i);
      __CrestLoad(10586, (unsigned long )0, (long long )1);
      __CrestApply2(10585, 0, (long long )(i + 1));
      __CrestStore(10588, (unsigned long )(& i));
# 196 "../HPL_dlaswp06N.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(10566, 4264, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10589);
# 60 "../HPL_dlaswp06N.c"
  return;
  }
}
}
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 448 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp06T(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA ) ;
# 60 "../HPL_dlaswp06T.c"
void HPL_dlaswp06T(int const M , int const N , double *A , int const LDA , double *U ,
                   int const LDU , int const *LINDXA )
{
  double r ;
  double *U0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  int i ;
  int j ;
  int const *mem_18 ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  double *mem_26 ;
  double *mem_27 ;
  double *mem_28 ;
  double *mem_29 ;
  double *mem_30 ;
  double *mem_31 ;
  double *mem_32 ;
  double *mem_33 ;
  double *mem_34 ;
  double *mem_35 ;
  double *mem_36 ;
  double *mem_37 ;
  double *mem_38 ;
  double *mem_39 ;
  double *mem_40 ;
  double *mem_41 ;
  double *mem_42 ;
  double *mem_43 ;
  double *mem_44 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double *mem_51 ;
  double *mem_52 ;
  double *mem_53 ;
  double *mem_54 ;
  double *mem_55 ;
  double *mem_56 ;
  double *mem_57 ;
  double *mem_58 ;
  double *mem_59 ;
  double *mem_60 ;
  double *mem_61 ;
  double *mem_62 ;
  double *mem_63 ;
  double *mem_64 ;
  double *mem_65 ;
  double *mem_66 ;
  double *mem_67 ;
  double *mem_68 ;
  double *mem_69 ;
  double *mem_70 ;
  double *mem_71 ;
  double *mem_72 ;
  double *mem_73 ;
  double *mem_74 ;
  double *mem_75 ;
  double *mem_76 ;
  double *mem_77 ;
  double *mem_78 ;
  double *mem_79 ;
  double *mem_80 ;
  double *mem_81 ;
  double *mem_82 ;
  int const *mem_83 ;
  double *mem_84 ;
  double *mem_85 ;

  {
  __CrestCall(10594, 71);
  __CrestStore(10593, (unsigned long )(& LDU));
  __CrestStore(10592, (unsigned long )(& LDA));
  __CrestStore(10591, (unsigned long )(& N));
  __CrestStore(10590, (unsigned long )(& M));
# 128 "../HPL_dlaswp06T.c"
  U0 = U;
  __CrestLoad(10597, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(10596, (unsigned long )0, (long long )5);
  __CrestApply2(10595, 8, (long long )((unsigned int )LDA << 5));
  __CrestStore(10598, (unsigned long )(& incA));
# 129 "../HPL_dlaswp06T.c"
  incA = (int )((unsigned int )LDA << 5);
  __CrestLoad(10599, (unsigned long )0, (long long )(1 << 5));
  __CrestStore(10600, (unsigned long )(& incU));
# 129 "../HPL_dlaswp06T.c"
  incU = 1 << 5;
  {
  __CrestLoad(10603, (unsigned long )(& M), (long long )M);
  __CrestLoad(10602, (unsigned long )0, (long long )0);
  __CrestApply2(10601, 15, (long long )(M <= 0));
# 137 "../HPL_dlaswp06T.c"
  if (M <= 0) {
    __CrestBranch(10604, 4269, 1);
# 137 "../HPL_dlaswp06T.c"
    goto return_label;
  } else {
    __CrestBranch(10605, 4271, 0);
    {
    __CrestLoad(10608, (unsigned long )(& N), (long long )N);
    __CrestLoad(10607, (unsigned long )0, (long long )0);
    __CrestApply2(10606, 15, (long long )(N <= 0));
# 137 "../HPL_dlaswp06T.c"
    if (N <= 0) {
      __CrestBranch(10609, 4272, 1);
# 137 "../HPL_dlaswp06T.c"
      goto return_label;
    } else {
      __CrestBranch(10610, 4274, 0);

    }
    }
  }
  }
  __CrestLoad(10615, (unsigned long )(& N), (long long )N);
  __CrestLoad(10614, (unsigned long )0, (long long )5);
  __CrestApply2(10613, 9, (long long )((unsigned int )N >> 5));
  __CrestLoad(10612, (unsigned long )0, (long long )5);
  __CrestApply2(10611, 8, (long long )(((unsigned int )N >> 5) << 5));
  __CrestStore(10616, (unsigned long )(& nu));
# 139 "../HPL_dlaswp06T.c"
  nu = (int )(((unsigned int )N >> 5) << 5);
  __CrestLoad(10619, (unsigned long )(& N), (long long )N);
  __CrestLoad(10618, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(10617, 1, (long long )(N - (int const )nu));
  __CrestStore(10620, (unsigned long )(& nr));
# 139 "../HPL_dlaswp06T.c"
  nr = (int )(N - (int const )nu);
  __CrestLoad(10621, (unsigned long )0, (long long )0);
  __CrestStore(10622, (unsigned long )(& j));
# 142 "../HPL_dlaswp06T.c"
  j = 0;
  {
# 142 "../HPL_dlaswp06T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10625, (unsigned long )(& j), (long long )j);
    __CrestLoad(10624, (unsigned long )(& nu), (long long )nu);
    __CrestApply2(10623, 16, (long long )(j < nu));
# 142 "../HPL_dlaswp06T.c"
    if (j < nu) {
      __CrestBranch(10626, 4280, 1);

    } else {
      __CrestBranch(10627, 4281, 0);
# 142 "../HPL_dlaswp06T.c"
      goto while_break;
    }
    }
    __CrestLoad(10628, (unsigned long )0, (long long )0);
    __CrestStore(10629, (unsigned long )(& i));
# 144 "../HPL_dlaswp06T.c"
    i = 0;
    {
# 144 "../HPL_dlaswp06T.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10632, (unsigned long )(& i), (long long )i);
      __CrestLoad(10631, (unsigned long )(& M), (long long )M);
      __CrestApply2(10630, 16, (long long )(i < (int )M));
# 144 "../HPL_dlaswp06T.c"
      if (i < (int )M) {
        __CrestBranch(10633, 4287, 1);

      } else {
        __CrestBranch(10634, 4288, 0);
# 144 "../HPL_dlaswp06T.c"
        goto while_break___0;
      }
      }
# 146 "../HPL_dlaswp06T.c"
      mem_18 = LINDXA + i;
# 146 "../HPL_dlaswp06T.c"
      a0 = A + *mem_18;
# 146 "../HPL_dlaswp06T.c"
      u0 = U0 + i * (int )LDU;
# 148 "../HPL_dlaswp06T.c"
      r = *a0;
# 148 "../HPL_dlaswp06T.c"
      mem_19 = u0 + 0;
# 148 "../HPL_dlaswp06T.c"
      *a0 = *mem_19;
# 148 "../HPL_dlaswp06T.c"
      mem_20 = u0 + 0;
# 148 "../HPL_dlaswp06T.c"
      *mem_20 = r;
# 148 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 150 "../HPL_dlaswp06T.c"
      r = *a0;
# 150 "../HPL_dlaswp06T.c"
      mem_21 = u0 + 1;
# 150 "../HPL_dlaswp06T.c"
      *a0 = *mem_21;
# 150 "../HPL_dlaswp06T.c"
      mem_22 = u0 + 1;
# 150 "../HPL_dlaswp06T.c"
      *mem_22 = r;
# 150 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 153 "../HPL_dlaswp06T.c"
      r = *a0;
# 153 "../HPL_dlaswp06T.c"
      mem_23 = u0 + 2;
# 153 "../HPL_dlaswp06T.c"
      *a0 = *mem_23;
# 153 "../HPL_dlaswp06T.c"
      mem_24 = u0 + 2;
# 153 "../HPL_dlaswp06T.c"
      *mem_24 = r;
# 153 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 154 "../HPL_dlaswp06T.c"
      r = *a0;
# 154 "../HPL_dlaswp06T.c"
      mem_25 = u0 + 3;
# 154 "../HPL_dlaswp06T.c"
      *a0 = *mem_25;
# 154 "../HPL_dlaswp06T.c"
      mem_26 = u0 + 3;
# 154 "../HPL_dlaswp06T.c"
      *mem_26 = r;
# 154 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 157 "../HPL_dlaswp06T.c"
      r = *a0;
# 157 "../HPL_dlaswp06T.c"
      mem_27 = u0 + 4;
# 157 "../HPL_dlaswp06T.c"
      *a0 = *mem_27;
# 157 "../HPL_dlaswp06T.c"
      mem_28 = u0 + 4;
# 157 "../HPL_dlaswp06T.c"
      *mem_28 = r;
# 157 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 158 "../HPL_dlaswp06T.c"
      r = *a0;
# 158 "../HPL_dlaswp06T.c"
      mem_29 = u0 + 5;
# 158 "../HPL_dlaswp06T.c"
      *a0 = *mem_29;
# 158 "../HPL_dlaswp06T.c"
      mem_30 = u0 + 5;
# 158 "../HPL_dlaswp06T.c"
      *mem_30 = r;
# 158 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 159 "../HPL_dlaswp06T.c"
      r = *a0;
# 159 "../HPL_dlaswp06T.c"
      mem_31 = u0 + 6;
# 159 "../HPL_dlaswp06T.c"
      *a0 = *mem_31;
# 159 "../HPL_dlaswp06T.c"
      mem_32 = u0 + 6;
# 159 "../HPL_dlaswp06T.c"
      *mem_32 = r;
# 159 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 160 "../HPL_dlaswp06T.c"
      r = *a0;
# 160 "../HPL_dlaswp06T.c"
      mem_33 = u0 + 7;
# 160 "../HPL_dlaswp06T.c"
      *a0 = *mem_33;
# 160 "../HPL_dlaswp06T.c"
      mem_34 = u0 + 7;
# 160 "../HPL_dlaswp06T.c"
      *mem_34 = r;
# 160 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 163 "../HPL_dlaswp06T.c"
      r = *a0;
# 163 "../HPL_dlaswp06T.c"
      mem_35 = u0 + 8;
# 163 "../HPL_dlaswp06T.c"
      *a0 = *mem_35;
# 163 "../HPL_dlaswp06T.c"
      mem_36 = u0 + 8;
# 163 "../HPL_dlaswp06T.c"
      *mem_36 = r;
# 163 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 164 "../HPL_dlaswp06T.c"
      r = *a0;
# 164 "../HPL_dlaswp06T.c"
      mem_37 = u0 + 9;
# 164 "../HPL_dlaswp06T.c"
      *a0 = *mem_37;
# 164 "../HPL_dlaswp06T.c"
      mem_38 = u0 + 9;
# 164 "../HPL_dlaswp06T.c"
      *mem_38 = r;
# 164 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 165 "../HPL_dlaswp06T.c"
      r = *a0;
# 165 "../HPL_dlaswp06T.c"
      mem_39 = u0 + 10;
# 165 "../HPL_dlaswp06T.c"
      *a0 = *mem_39;
# 165 "../HPL_dlaswp06T.c"
      mem_40 = u0 + 10;
# 165 "../HPL_dlaswp06T.c"
      *mem_40 = r;
# 165 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 166 "../HPL_dlaswp06T.c"
      r = *a0;
# 166 "../HPL_dlaswp06T.c"
      mem_41 = u0 + 11;
# 166 "../HPL_dlaswp06T.c"
      *a0 = *mem_41;
# 166 "../HPL_dlaswp06T.c"
      mem_42 = u0 + 11;
# 166 "../HPL_dlaswp06T.c"
      *mem_42 = r;
# 166 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 167 "../HPL_dlaswp06T.c"
      r = *a0;
# 167 "../HPL_dlaswp06T.c"
      mem_43 = u0 + 12;
# 167 "../HPL_dlaswp06T.c"
      *a0 = *mem_43;
# 167 "../HPL_dlaswp06T.c"
      mem_44 = u0 + 12;
# 167 "../HPL_dlaswp06T.c"
      *mem_44 = r;
# 167 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 168 "../HPL_dlaswp06T.c"
      r = *a0;
# 168 "../HPL_dlaswp06T.c"
      mem_45 = u0 + 13;
# 168 "../HPL_dlaswp06T.c"
      *a0 = *mem_45;
# 168 "../HPL_dlaswp06T.c"
      mem_46 = u0 + 13;
# 168 "../HPL_dlaswp06T.c"
      *mem_46 = r;
# 168 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 169 "../HPL_dlaswp06T.c"
      r = *a0;
# 169 "../HPL_dlaswp06T.c"
      mem_47 = u0 + 14;
# 169 "../HPL_dlaswp06T.c"
      *a0 = *mem_47;
# 169 "../HPL_dlaswp06T.c"
      mem_48 = u0 + 14;
# 169 "../HPL_dlaswp06T.c"
      *mem_48 = r;
# 169 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 170 "../HPL_dlaswp06T.c"
      r = *a0;
# 170 "../HPL_dlaswp06T.c"
      mem_49 = u0 + 15;
# 170 "../HPL_dlaswp06T.c"
      *a0 = *mem_49;
# 170 "../HPL_dlaswp06T.c"
      mem_50 = u0 + 15;
# 170 "../HPL_dlaswp06T.c"
      *mem_50 = r;
# 170 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 173 "../HPL_dlaswp06T.c"
      r = *a0;
# 173 "../HPL_dlaswp06T.c"
      mem_51 = u0 + 16;
# 173 "../HPL_dlaswp06T.c"
      *a0 = *mem_51;
# 173 "../HPL_dlaswp06T.c"
      mem_52 = u0 + 16;
# 173 "../HPL_dlaswp06T.c"
      *mem_52 = r;
# 173 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 174 "../HPL_dlaswp06T.c"
      r = *a0;
# 174 "../HPL_dlaswp06T.c"
      mem_53 = u0 + 17;
# 174 "../HPL_dlaswp06T.c"
      *a0 = *mem_53;
# 174 "../HPL_dlaswp06T.c"
      mem_54 = u0 + 17;
# 174 "../HPL_dlaswp06T.c"
      *mem_54 = r;
# 174 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 175 "../HPL_dlaswp06T.c"
      r = *a0;
# 175 "../HPL_dlaswp06T.c"
      mem_55 = u0 + 18;
# 175 "../HPL_dlaswp06T.c"
      *a0 = *mem_55;
# 175 "../HPL_dlaswp06T.c"
      mem_56 = u0 + 18;
# 175 "../HPL_dlaswp06T.c"
      *mem_56 = r;
# 175 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 176 "../HPL_dlaswp06T.c"
      r = *a0;
# 176 "../HPL_dlaswp06T.c"
      mem_57 = u0 + 19;
# 176 "../HPL_dlaswp06T.c"
      *a0 = *mem_57;
# 176 "../HPL_dlaswp06T.c"
      mem_58 = u0 + 19;
# 176 "../HPL_dlaswp06T.c"
      *mem_58 = r;
# 176 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 177 "../HPL_dlaswp06T.c"
      r = *a0;
# 177 "../HPL_dlaswp06T.c"
      mem_59 = u0 + 20;
# 177 "../HPL_dlaswp06T.c"
      *a0 = *mem_59;
# 177 "../HPL_dlaswp06T.c"
      mem_60 = u0 + 20;
# 177 "../HPL_dlaswp06T.c"
      *mem_60 = r;
# 177 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 178 "../HPL_dlaswp06T.c"
      r = *a0;
# 178 "../HPL_dlaswp06T.c"
      mem_61 = u0 + 21;
# 178 "../HPL_dlaswp06T.c"
      *a0 = *mem_61;
# 178 "../HPL_dlaswp06T.c"
      mem_62 = u0 + 21;
# 178 "../HPL_dlaswp06T.c"
      *mem_62 = r;
# 178 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 179 "../HPL_dlaswp06T.c"
      r = *a0;
# 179 "../HPL_dlaswp06T.c"
      mem_63 = u0 + 22;
# 179 "../HPL_dlaswp06T.c"
      *a0 = *mem_63;
# 179 "../HPL_dlaswp06T.c"
      mem_64 = u0 + 22;
# 179 "../HPL_dlaswp06T.c"
      *mem_64 = r;
# 179 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 180 "../HPL_dlaswp06T.c"
      r = *a0;
# 180 "../HPL_dlaswp06T.c"
      mem_65 = u0 + 23;
# 180 "../HPL_dlaswp06T.c"
      *a0 = *mem_65;
# 180 "../HPL_dlaswp06T.c"
      mem_66 = u0 + 23;
# 180 "../HPL_dlaswp06T.c"
      *mem_66 = r;
# 180 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 181 "../HPL_dlaswp06T.c"
      r = *a0;
# 181 "../HPL_dlaswp06T.c"
      mem_67 = u0 + 24;
# 181 "../HPL_dlaswp06T.c"
      *a0 = *mem_67;
# 181 "../HPL_dlaswp06T.c"
      mem_68 = u0 + 24;
# 181 "../HPL_dlaswp06T.c"
      *mem_68 = r;
# 181 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 182 "../HPL_dlaswp06T.c"
      r = *a0;
# 182 "../HPL_dlaswp06T.c"
      mem_69 = u0 + 25;
# 182 "../HPL_dlaswp06T.c"
      *a0 = *mem_69;
# 182 "../HPL_dlaswp06T.c"
      mem_70 = u0 + 25;
# 182 "../HPL_dlaswp06T.c"
      *mem_70 = r;
# 182 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 183 "../HPL_dlaswp06T.c"
      r = *a0;
# 183 "../HPL_dlaswp06T.c"
      mem_71 = u0 + 26;
# 183 "../HPL_dlaswp06T.c"
      *a0 = *mem_71;
# 183 "../HPL_dlaswp06T.c"
      mem_72 = u0 + 26;
# 183 "../HPL_dlaswp06T.c"
      *mem_72 = r;
# 183 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 184 "../HPL_dlaswp06T.c"
      r = *a0;
# 184 "../HPL_dlaswp06T.c"
      mem_73 = u0 + 27;
# 184 "../HPL_dlaswp06T.c"
      *a0 = *mem_73;
# 184 "../HPL_dlaswp06T.c"
      mem_74 = u0 + 27;
# 184 "../HPL_dlaswp06T.c"
      *mem_74 = r;
# 184 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 185 "../HPL_dlaswp06T.c"
      r = *a0;
# 185 "../HPL_dlaswp06T.c"
      mem_75 = u0 + 28;
# 185 "../HPL_dlaswp06T.c"
      *a0 = *mem_75;
# 185 "../HPL_dlaswp06T.c"
      mem_76 = u0 + 28;
# 185 "../HPL_dlaswp06T.c"
      *mem_76 = r;
# 185 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 186 "../HPL_dlaswp06T.c"
      r = *a0;
# 186 "../HPL_dlaswp06T.c"
      mem_77 = u0 + 29;
# 186 "../HPL_dlaswp06T.c"
      *a0 = *mem_77;
# 186 "../HPL_dlaswp06T.c"
      mem_78 = u0 + 29;
# 186 "../HPL_dlaswp06T.c"
      *mem_78 = r;
# 186 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 187 "../HPL_dlaswp06T.c"
      r = *a0;
# 187 "../HPL_dlaswp06T.c"
      mem_79 = u0 + 30;
# 187 "../HPL_dlaswp06T.c"
      *a0 = *mem_79;
# 187 "../HPL_dlaswp06T.c"
      mem_80 = u0 + 30;
# 187 "../HPL_dlaswp06T.c"
      *mem_80 = r;
# 187 "../HPL_dlaswp06T.c"
      a0 += LDA;
# 188 "../HPL_dlaswp06T.c"
      r = *a0;
# 188 "../HPL_dlaswp06T.c"
      mem_81 = u0 + 31;
# 188 "../HPL_dlaswp06T.c"
      *a0 = *mem_81;
# 188 "../HPL_dlaswp06T.c"
      mem_82 = u0 + 31;
# 188 "../HPL_dlaswp06T.c"
      *mem_82 = r;
# 188 "../HPL_dlaswp06T.c"
      a0 += LDA;
      __CrestLoad(10637, (unsigned long )(& i), (long long )i);
      __CrestLoad(10636, (unsigned long )0, (long long )1);
      __CrestApply2(10635, 0, (long long )(i + 1));
      __CrestStore(10638, (unsigned long )(& i));
# 144 "../HPL_dlaswp06T.c"
      i ++;
    }
    while_break___0: ;
    }
    __CrestLoad(10641, (unsigned long )(& j), (long long )j);
    __CrestLoad(10640, (unsigned long )0, (long long )32);
    __CrestApply2(10639, 0, (long long )(j + 32));
    __CrestStore(10642, (unsigned long )(& j));
# 142 "../HPL_dlaswp06T.c"
    j += 32;
# 142 "../HPL_dlaswp06T.c"
    A += incA;
# 142 "../HPL_dlaswp06T.c"
    U0 += incU;
  }
  while_break: ;
  }
  {
  __CrestLoad(10645, (unsigned long )(& nr), (long long )nr);
  __CrestLoad(10644, (unsigned long )0, (long long )0);
  __CrestApply2(10643, 14, (long long )(nr > 0));
# 193 "../HPL_dlaswp06T.c"
  if (nr > 0) {
    __CrestBranch(10646, 4294, 1);
    __CrestLoad(10648, (unsigned long )0, (long long )0);
    __CrestStore(10649, (unsigned long )(& i));
# 195 "../HPL_dlaswp06T.c"
    i = 0;
    {
# 195 "../HPL_dlaswp06T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(10652, (unsigned long )(& i), (long long )i);
      __CrestLoad(10651, (unsigned long )(& M), (long long )M);
      __CrestApply2(10650, 16, (long long )(i < (int )M));
# 195 "../HPL_dlaswp06T.c"
      if (i < (int )M) {
        __CrestBranch(10653, 4299, 1);

      } else {
        __CrestBranch(10654, 4300, 0);
# 195 "../HPL_dlaswp06T.c"
        goto while_break___1;
      }
      }
# 197 "../HPL_dlaswp06T.c"
      mem_83 = LINDXA + i;
# 197 "../HPL_dlaswp06T.c"
      a0 = A + *mem_83;
# 197 "../HPL_dlaswp06T.c"
      u0 = U0 + i * (int )LDU;
      __CrestLoad(10655, (unsigned long )0, (long long )0);
      __CrestStore(10656, (unsigned long )(& j));
# 198 "../HPL_dlaswp06T.c"
      j = 0;
      {
# 198 "../HPL_dlaswp06T.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(10659, (unsigned long )(& j), (long long )j);
        __CrestLoad(10658, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(10657, 16, (long long )(j < nr));
# 198 "../HPL_dlaswp06T.c"
        if (j < nr) {
          __CrestBranch(10660, 4306, 1);

        } else {
          __CrestBranch(10661, 4307, 0);
# 198 "../HPL_dlaswp06T.c"
          goto while_break___2;
        }
        }
# 199 "../HPL_dlaswp06T.c"
        r = *a0;
# 199 "../HPL_dlaswp06T.c"
        mem_84 = u0 + j;
# 199 "../HPL_dlaswp06T.c"
        *a0 = *mem_84;
# 199 "../HPL_dlaswp06T.c"
        mem_85 = u0 + j;
# 199 "../HPL_dlaswp06T.c"
        *mem_85 = r;
        __CrestLoad(10664, (unsigned long )(& j), (long long )j);
        __CrestLoad(10663, (unsigned long )0, (long long )1);
        __CrestApply2(10662, 0, (long long )(j + 1));
        __CrestStore(10665, (unsigned long )(& j));
# 198 "../HPL_dlaswp06T.c"
        j ++;
# 198 "../HPL_dlaswp06T.c"
        a0 += LDA;
      }
      while_break___2: ;
      }
      __CrestLoad(10668, (unsigned long )(& i), (long long )i);
      __CrestLoad(10667, (unsigned long )0, (long long )1);
      __CrestApply2(10666, 0, (long long )(i + 1));
      __CrestStore(10669, (unsigned long )(& i));
# 195 "../HPL_dlaswp06T.c"
      i ++;
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(10647, 4312, 0);

  }
  }

  return_label:
  {
  __CrestReturn(10670);
# 60 "../HPL_dlaswp06T.c"
  return;
  }
}
}
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pwarn.c"
void HPL_pwarn(FILE *STREAM , int LINE , char const *SRNAME , char const *FORM
               , ...)
{
  va_list argptr ;
  int rank ;
  char cline[128] ;

  {
  __CrestCall(10671, 72);
# 113 "../HPL_pwarn.c"
  __builtin_va_start(argptr, FORM);
  __CrestClearStack(10672);
# 121 "../HPL_pwarn.c"
  vsprintf((char * __restrict )(cline), (char const * __restrict )FORM, argptr);
  __CrestClearStack(10673);
# 122 "../HPL_pwarn.c"
  __builtin_va_end(argptr);
  __CrestClearStack(10674);
  __CrestLoad(10675, (unsigned long )0, (long long )1140850688);
  __CrestRank((unsigned long )(& rank));
# 124 "../HPL_pwarn.c"
  MPI_Comm_rank(1140850688, & rank);
  __CrestClearStack(10676);
  {
  __CrestLoad(10679, (unsigned long )(& LINE), (long long )LINE);
  __CrestLoad(10678, (unsigned long )0, (long long )0);
  __CrestApply2(10677, 15, (long long )(LINE <= 0));
# 128 "../HPL_pwarn.c"
  if (LINE <= 0) {
    __CrestBranch(10680, 4317, 1);
    __CrestLoad(10682, (unsigned long )(& rank), (long long )rank);
# 129 "../HPL_pwarn.c"
    HPL_fprintf(STREAM, "%s %s %d, %s %s:\n>>> %s <<<\n\n", "HPL ERROR", "from process #",
                rank, "in function", SRNAME, cline);
    __CrestClearStack(10683);
  } else {
    __CrestBranch(10681, 4318, 0);
    __CrestLoad(10684, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(10685, (unsigned long )(& LINE), (long long )LINE);
# 133 "../HPL_pwarn.c"
    HPL_fprintf(STREAM, "%s %s %d, %s %d %s %s:\n>>> %s <<<\n\n", "HPL ERROR", "from process #",
                rank, "on line", LINE, "of function", SRNAME, cline);
    __CrestClearStack(10686);
  }
  }

  {
  __CrestReturn(10687);
# 53 "../HPL_pwarn.c"
  return;
  }
}
}
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1044 "//usr/include/mpich/mpi.h"
extern int MPI_Abort(MPI_Comm comm , int errorcode ) ;
# 53 "../HPL_pabort.c"
void HPL_pabort(int LINE , char const *SRNAME , char const *FORM , ...)
{
  va_list argptr ;
  int rank ;
  char cline[128] ;

  {
  __CrestCall(10688, 73);
# 108 "../HPL_pabort.c"
  __builtin_va_start(argptr, FORM);
  __CrestClearStack(10689);
# 115 "../HPL_pabort.c"
  vsprintf((char * __restrict )(cline), (char const * __restrict )FORM, argptr);
  __CrestClearStack(10690);
# 116 "../HPL_pabort.c"
  __builtin_va_end(argptr);
  __CrestClearStack(10691);
  __CrestLoad(10692, (unsigned long )0, (long long )1140850688);
  __CrestRank((unsigned long )(& rank));
# 118 "../HPL_pabort.c"
  MPI_Comm_rank(1140850688, & rank);
  __CrestClearStack(10693);
  {
  __CrestLoad(10696, (unsigned long )(& LINE), (long long )LINE);
  __CrestLoad(10695, (unsigned long )0, (long long )0);
  __CrestApply2(10694, 15, (long long )(LINE <= 0));
# 122 "../HPL_pabort.c"
  if (LINE <= 0) {
    __CrestBranch(10697, 4323, 1);
    __CrestLoad(10699, (unsigned long )(& rank), (long long )rank);
# 123 "../HPL_pabort.c"
    HPL_fprintf(stderr, "%s %s %d, %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR",
                "from process #", rank, "in function", SRNAME, cline);
    __CrestClearStack(10700);
  } else {
    __CrestBranch(10698, 4324, 0);
    __CrestLoad(10701, (unsigned long )(& rank), (long long )rank);
    __CrestLoad(10702, (unsigned long )(& LINE), (long long )LINE);
# 127 "../HPL_pabort.c"
    HPL_fprintf(stderr, "%s %s %d, %s %d %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR",
                "from process #", rank, "on line", LINE, "of function", SRNAME, cline);
    __CrestClearStack(10703);
  }
  }
  __CrestLoad(10704, (unsigned long )0, (long long )1140850688);
  __CrestLoad(10705, (unsigned long )0, (long long )-1);
# 132 "../HPL_pabort.c"
  MPI_Abort(1140850688, -1);
  __CrestClearStack(10706);
  __CrestLoad(10707, (unsigned long )0, (long long )-1);
# 133 "../HPL_pabort.c"
  exit(-1);
  __CrestClearStack(10708);
  {
  __CrestReturn(10709);
# 53 "../HPL_pabort.c"
  return;
  }
}
}
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 474 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pdlaprnt(HPL_T_grid const *GRID , int const M , int const N , int const NB ,
                  double *A , int const LDA , int const IAROW , int const IACOL ,
                  char const *CMATNM ) ;
# 53 "../HPL_pdlaprnt.c"
void HPL_pdlaprnt(HPL_T_grid const *GRID , int const M , int const N , int const NB ,
                  double *A , int const LDA , int const IAROW , int const IACOL ,
                  char const *CMATNM )
{
  MPI_Comm Acomm ;
  double *buf ;
  int h ;
  int i ;
  int ib ;
  int icurcol ;
  int icurrow ;
  int ii ;
  int j ;
  int jb ;
  int jj ;
  int mycol ;
  int myrow ;
  int npcol ;
  int nprow ;
  int src ;
  void *tmp ;

  {
  __CrestCall(10716, 74);
  __CrestStore(10715, (unsigned long )(& IACOL));
  __CrestStore(10714, (unsigned long )(& IAROW));
  __CrestStore(10713, (unsigned long )(& LDA));
  __CrestStore(10712, (unsigned long )(& NB));
  __CrestStore(10711, (unsigned long )(& N));
  __CrestStore(10710, (unsigned long )(& M));
# 133 "../HPL_pdlaprnt.c"
  buf = (double *)((void *)0);
  __CrestLoad(10717, (unsigned long )(& IACOL), (long long )IACOL);
  __CrestStore(10718, (unsigned long )(& icurcol));
# 134 "../HPL_pdlaprnt.c"
  icurcol = (int )IACOL;
  __CrestLoad(10719, (unsigned long )(& IAROW), (long long )IAROW);
  __CrestStore(10720, (unsigned long )(& icurrow));
# 134 "../HPL_pdlaprnt.c"
  icurrow = (int )IAROW;
  __CrestLoad(10721, (unsigned long )0, (long long )0);
  __CrestStore(10722, (unsigned long )(& ii));
# 134 "../HPL_pdlaprnt.c"
  ii = 0;
  __CrestLoad(10723, (unsigned long )0, (long long )0);
  __CrestStore(10724, (unsigned long )(& jj));
# 134 "../HPL_pdlaprnt.c"
  jj = 0;
# 140 "../HPL_pdlaprnt.c"
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
  __CrestClearStack(10725);
  __CrestLoad(10726, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestStore(10727, (unsigned long )(& Acomm));
# 141 "../HPL_pdlaprnt.c"
  Acomm = (MPI_Comm )GRID->all_comm;
  {
  __CrestLoad(10730, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(10729, (unsigned long )0, (long long )0);
  __CrestApply2(10728, 12, (long long )(myrow == 0));
# 142 "../HPL_pdlaprnt.c"
  if (myrow == 0) {
    __CrestBranch(10731, 4329, 1);
    {
    __CrestLoad(10735, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(10734, (unsigned long )0, (long long )0);
    __CrestApply2(10733, 12, (long long )(mycol == 0));
# 142 "../HPL_pdlaprnt.c"
    if (mycol == 0) {
      __CrestBranch(10736, 4330, 1);
      __CrestLoad(10740, (unsigned long )(& NB), (long long )NB);
      __CrestLoad(10739, (unsigned long )0, (long long )sizeof(double ));
      __CrestApply2(10738, 2, (long long )((unsigned long )NB * sizeof(double )));
# 143 "../HPL_pdlaprnt.c"
      tmp = malloc((unsigned long )NB * sizeof(double ));
      __CrestClearStack(10741);
# 143 "../HPL_pdlaprnt.c"
      buf = (double *)tmp;
    } else {
      __CrestBranch(10737, 4331, 0);

    }
    }
  } else {
    __CrestBranch(10732, 4332, 0);

  }
  }
  __CrestLoad(10742, (unsigned long )0, (long long )0);
  __CrestStore(10743, (unsigned long )(& j));
# 145 "../HPL_pdlaprnt.c"
  j = 0;
  {
# 145 "../HPL_pdlaprnt.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(10746, (unsigned long )(& j), (long long )j);
    __CrestLoad(10745, (unsigned long )(& N), (long long )N);
    __CrestApply2(10744, 16, (long long )(j < (int )N));
# 145 "../HPL_pdlaprnt.c"
    if (j < (int )N) {
      __CrestBranch(10747, 4338, 1);

    } else {
      __CrestBranch(10748, 4339, 0);
# 145 "../HPL_pdlaprnt.c"
      goto while_break;
    }
    }
    __CrestLoad(10751, (unsigned long )(& N), (long long )N);
    __CrestLoad(10750, (unsigned long )(& j), (long long )j);
    __CrestApply2(10749, 1, (long long )(N - (int const )j));
    __CrestStore(10752, (unsigned long )(& jb));
# 147 "../HPL_pdlaprnt.c"
    jb = (int )(N - (int const )j);
    {
    __CrestLoad(10755, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(10754, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(10753, 16, (long long )(jb < (int )NB));
# 147 "../HPL_pdlaprnt.c"
    if (jb < (int )NB) {
      __CrestBranch(10756, 4342, 1);
      __CrestLoad(10758, (unsigned long )(& jb), (long long )jb);
      __CrestStore(10759, (unsigned long )(& jb));
# 147 "../HPL_pdlaprnt.c"
      jb = jb;
    } else {
      __CrestBranch(10757, 4343, 0);
      __CrestLoad(10760, (unsigned long )(& NB), (long long )NB);
      __CrestStore(10761, (unsigned long )(& jb));
# 147 "../HPL_pdlaprnt.c"
      jb = (int )NB;
    }
    }
    __CrestLoad(10762, (unsigned long )0, (long long )0);
    __CrestStore(10763, (unsigned long )(& h));
# 148 "../HPL_pdlaprnt.c"
    h = 0;
    {
# 148 "../HPL_pdlaprnt.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(10766, (unsigned long )(& h), (long long )h);
      __CrestLoad(10765, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(10764, 16, (long long )(h < jb));
# 148 "../HPL_pdlaprnt.c"
      if (h < jb) {
        __CrestBranch(10767, 4349, 1);

      } else {
        __CrestBranch(10768, 4350, 0);
# 148 "../HPL_pdlaprnt.c"
        goto while_break___0;
      }
      }
      __CrestLoad(10769, (unsigned long )(& Acomm), (long long )Acomm);
# 150 "../HPL_pdlaprnt.c"
      HPL_barrier(Acomm);
      __CrestClearStack(10770);
      __CrestLoad(10771, (unsigned long )0, (long long )0);
      __CrestStore(10772, (unsigned long )(& i));
# 152 "../HPL_pdlaprnt.c"
      i = 0;
      {
# 152 "../HPL_pdlaprnt.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(10775, (unsigned long )(& i), (long long )i);
        __CrestLoad(10774, (unsigned long )(& M), (long long )M);
        __CrestApply2(10773, 16, (long long )(i < (int )M));
# 152 "../HPL_pdlaprnt.c"
        if (i < (int )M) {
          __CrestBranch(10776, 4356, 1);

        } else {
          __CrestBranch(10777, 4357, 0);
# 152 "../HPL_pdlaprnt.c"
          goto while_break___1;
        }
        }
        __CrestLoad(10780, (unsigned long )(& M), (long long )M);
        __CrestLoad(10779, (unsigned long )(& i), (long long )i);
        __CrestApply2(10778, 1, (long long )(M - (int const )i));
        __CrestStore(10781, (unsigned long )(& ib));
# 154 "../HPL_pdlaprnt.c"
        ib = (int )(M - (int const )i);
        {
        __CrestLoad(10784, (unsigned long )(& ib), (long long )ib);
        __CrestLoad(10783, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(10782, 16, (long long )(ib < (int )NB));
# 154 "../HPL_pdlaprnt.c"
        if (ib < (int )NB) {
          __CrestBranch(10785, 4360, 1);
          __CrestLoad(10787, (unsigned long )(& ib), (long long )ib);
          __CrestStore(10788, (unsigned long )(& ib));
# 154 "../HPL_pdlaprnt.c"
          ib = ib;
        } else {
          __CrestBranch(10786, 4361, 0);
          __CrestLoad(10789, (unsigned long )(& NB), (long long )NB);
          __CrestStore(10790, (unsigned long )(& ib));
# 154 "../HPL_pdlaprnt.c"
          ib = (int )NB;
        }
        }
        {
        __CrestLoad(10793, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(10792, (unsigned long )0, (long long )0);
        __CrestApply2(10791, 12, (long long )(icurrow == 0));
# 155 "../HPL_pdlaprnt.c"
        if (icurrow == 0) {
          __CrestBranch(10794, 4363, 1);
          {
          __CrestLoad(10798, (unsigned long )(& icurcol), (long long )icurcol);
          __CrestLoad(10797, (unsigned long )0, (long long )0);
          __CrestApply2(10796, 12, (long long )(icurcol == 0));
# 155 "../HPL_pdlaprnt.c"
          if (icurcol == 0) {
            __CrestBranch(10799, 4364, 1);
            {
            __CrestLoad(10803, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(10802, (unsigned long )0, (long long )0);
            __CrestApply2(10801, 12, (long long )(myrow == 0));
# 157 "../HPL_pdlaprnt.c"
            if (myrow == 0) {
              __CrestBranch(10804, 4365, 1);
              {
              __CrestLoad(10808, (unsigned long )(& mycol), (long long )mycol);
              __CrestLoad(10807, (unsigned long )0, (long long )0);
              __CrestApply2(10806, 12, (long long )(mycol == 0));
# 157 "../HPL_pdlaprnt.c"
              if (mycol == 0) {
                __CrestBranch(10809, 4366, 1);
                __CrestLoad(10811, (unsigned long )(& ib), (long long )ib);
                __CrestLoad(10812, (unsigned long )0, (long long )((int const )1));
                __CrestLoad(10815, (unsigned long )(& i), (long long )i);
                __CrestLoad(10814, (unsigned long )0, (long long )1);
                __CrestApply2(10813, 0, (long long )(i + 1));
                __CrestLoad(10820, (unsigned long )(& j), (long long )j);
                __CrestLoad(10819, (unsigned long )(& h), (long long )h);
                __CrestApply2(10818, 0, (long long )(j + h));
                __CrestLoad(10817, (unsigned long )0, (long long )1);
                __CrestApply2(10816, 0, (long long )((j + h) + 1));
                __CrestLoad(10821, (unsigned long )(& LDA), (long long )LDA);
# 158 "../HPL_pdlaprnt.c"
                HPL_dlaprnt((int const )ib, (int const )1, (A + ii) + (jj + h) * (int )LDA,
                            (int const )(i + 1), (int const )((j + h) + 1), LDA,
                            CMATNM);
                __CrestClearStack(10822);
              } else {
                __CrestBranch(10810, 4367, 0);

              }
              }
            } else {
              __CrestBranch(10805, 4368, 0);

            }
            }
          } else {
            __CrestBranch(10800, 4369, 0);
# 155 "../HPL_pdlaprnt.c"
            goto _L___0;
          }
          }
        } else {
          __CrestBranch(10795, 4370, 0);
          _L___0:
          {
          __CrestLoad(10825, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(10824, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(10823, 12, (long long )(myrow == icurrow));
# 163 "../HPL_pdlaprnt.c"
          if (myrow == icurrow) {
            __CrestBranch(10826, 4371, 1);
            {
            __CrestLoad(10830, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(10829, (unsigned long )(& icurcol), (long long )icurcol);
            __CrestApply2(10828, 12, (long long )(mycol == icurcol));
# 163 "../HPL_pdlaprnt.c"
            if (mycol == icurcol) {
              __CrestBranch(10831, 4372, 1);
              __CrestLoad(10833, (unsigned long )(& ib), (long long )ib);
              __CrestLoad(10834, (unsigned long )0, (long long )0);
              __CrestLoad(10843, (unsigned long )0, (long long )9000);
              __CrestLoad(10842, (unsigned long )(& j), (long long )j);
              __CrestLoad(10841, (unsigned long )(& h), (long long )h);
              __CrestApply2(10840, 0, (long long )(j + h));
              __CrestLoad(10839, (unsigned long )(& M), (long long )M);
              __CrestApply2(10838, 2, (long long )((j + h) * (int )M));
              __CrestApply2(10837, 0, (long long )(9000 + (j + h) * (int )M));
              __CrestLoad(10836, (unsigned long )(& i), (long long )i);
              __CrestApply2(10835, 0, (long long )((9000 + (j + h) * (int )M) + i));
              __CrestLoad(10844, (unsigned long )(& Acomm), (long long )Acomm);
# 165 "../HPL_pdlaprnt.c"
              HPL_send((A + ii) + (jj + h) * (int )LDA, ib, 0, (9000 + (j + h) * (int )M) + i,
                       Acomm);
              __CrestClearStack(10845);
            } else {
              __CrestBranch(10832, 4373, 0);
# 163 "../HPL_pdlaprnt.c"
              goto _L;
            }
            }
          } else {
            __CrestBranch(10827, 4374, 0);
            _L:
            {
            __CrestLoad(10848, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(10847, (unsigned long )0, (long long )0);
            __CrestApply2(10846, 12, (long long )(myrow == 0));
# 168 "../HPL_pdlaprnt.c"
            if (myrow == 0) {
              __CrestBranch(10849, 4375, 1);
              {
              __CrestLoad(10853, (unsigned long )(& mycol), (long long )mycol);
              __CrestLoad(10852, (unsigned long )0, (long long )0);
              __CrestApply2(10851, 12, (long long )(mycol == 0));
# 168 "../HPL_pdlaprnt.c"
              if (mycol == 0) {
                __CrestBranch(10854, 4376, 1);
                __CrestLoad(10856, (unsigned long )(& icurrow), (long long )icurrow);
                __CrestLoad(10857, (unsigned long )(& icurcol), (long long )icurcol);
# 170 "../HPL_pdlaprnt.c"
                src = HPL_pnum(GRID, (int const )icurrow, (int const )icurcol);
                __CrestHandleReturn(10859, (long long )src);
                __CrestStore(10858, (unsigned long )(& src));
                __CrestLoad(10860, (unsigned long )(& ib), (long long )ib);
                __CrestLoad(10861, (unsigned long )(& src), (long long )src);
                __CrestLoad(10870, (unsigned long )0, (long long )9000);
                __CrestLoad(10869, (unsigned long )(& j), (long long )j);
                __CrestLoad(10868, (unsigned long )(& h), (long long )h);
                __CrestApply2(10867, 0, (long long )(j + h));
                __CrestLoad(10866, (unsigned long )(& M), (long long )M);
                __CrestApply2(10865, 2, (long long )((j + h) * (int )M));
                __CrestApply2(10864, 0, (long long )(9000 + (j + h) * (int )M));
                __CrestLoad(10863, (unsigned long )(& i), (long long )i);
                __CrestApply2(10862, 0, (long long )((9000 + (j + h) * (int )M) + i));
                __CrestLoad(10871, (unsigned long )(& Acomm), (long long )Acomm);
# 171 "../HPL_pdlaprnt.c"
                HPL_recv(buf, ib, src, (9000 + (j + h) * (int )M) + i, Acomm);
                __CrestClearStack(10872);
                __CrestLoad(10873, (unsigned long )(& ib), (long long )ib);
                __CrestLoad(10874, (unsigned long )0, (long long )((int const )1));
                __CrestLoad(10877, (unsigned long )(& i), (long long )i);
                __CrestLoad(10876, (unsigned long )0, (long long )1);
                __CrestApply2(10875, 0, (long long )(i + 1));
                __CrestLoad(10882, (unsigned long )(& j), (long long )j);
                __CrestLoad(10881, (unsigned long )(& h), (long long )h);
                __CrestApply2(10880, 0, (long long )(j + h));
                __CrestLoad(10879, (unsigned long )0, (long long )1);
                __CrestApply2(10878, 0, (long long )((j + h) + 1));
                __CrestLoad(10883, (unsigned long )(& NB), (long long )NB);
# 173 "../HPL_pdlaprnt.c"
                HPL_dlaprnt((int const )ib, (int const )1, buf, (int const )(i + 1),
                            (int const )((j + h) + 1), NB, CMATNM);
                __CrestClearStack(10884);
              } else {
                __CrestBranch(10855, 4377, 0);

              }
              }
            } else {
              __CrestBranch(10850, 4378, 0);

            }
            }
          }
          }
        }
        }
        {
        __CrestLoad(10887, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(10886, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(10885, 12, (long long )(myrow == icurrow));
# 176 "../HPL_pdlaprnt.c"
        if (myrow == icurrow) {
          __CrestBranch(10888, 4380, 1);
          __CrestLoad(10892, (unsigned long )(& ii), (long long )ii);
          __CrestLoad(10891, (unsigned long )(& ib), (long long )ib);
          __CrestApply2(10890, 0, (long long )(ii + ib));
          __CrestStore(10893, (unsigned long )(& ii));
# 176 "../HPL_pdlaprnt.c"
          ii += ib;
        } else {
          __CrestBranch(10889, 4381, 0);

        }
        }
        {
        __CrestLoad(10898, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(10897, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(10896, (unsigned long )0, (long long )1);
        __CrestApply2(10895, 1, (long long )(nprow - 1));
        __CrestApply2(10894, 13, (long long )(icurrow != nprow - 1));
# 177 "../HPL_pdlaprnt.c"
        if (icurrow != nprow - 1) {
          __CrestBranch(10899, 4383, 1);
          __CrestLoad(10903, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestLoad(10902, (unsigned long )0, (long long )1);
          __CrestApply2(10901, 0, (long long )(icurrow + 1));
          __CrestStore(10904, (unsigned long )(& icurrow));
# 177 "../HPL_pdlaprnt.c"
          icurrow ++;
        } else {
          __CrestBranch(10900, 4384, 0);
          __CrestLoad(10905, (unsigned long )0, (long long )0);
          __CrestStore(10906, (unsigned long )(& icurrow));
# 177 "../HPL_pdlaprnt.c"
          icurrow = 0;
        }
        }
        __CrestLoad(10907, (unsigned long )(& Acomm), (long long )Acomm);
# 178 "../HPL_pdlaprnt.c"
        HPL_barrier(Acomm);
        __CrestClearStack(10908);
        __CrestLoad(10911, (unsigned long )(& i), (long long )i);
        __CrestLoad(10910, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(10909, 0, (long long )(i + (int )NB));
        __CrestStore(10912, (unsigned long )(& i));
# 152 "../HPL_pdlaprnt.c"
        i += (int )NB;
      }
      while_break___1: ;
      }
      __CrestLoad(10913, (unsigned long )0, (long long )0);
      __CrestStore(10914, (unsigned long )(& ii));
# 180 "../HPL_pdlaprnt.c"
      ii = 0;
      __CrestLoad(10915, (unsigned long )(& IAROW), (long long )IAROW);
      __CrestStore(10916, (unsigned long )(& icurrow));
# 180 "../HPL_pdlaprnt.c"
      icurrow = (int )IAROW;
      __CrestLoad(10919, (unsigned long )(& h), (long long )h);
      __CrestLoad(10918, (unsigned long )0, (long long )1);
      __CrestApply2(10917, 0, (long long )(h + 1));
      __CrestStore(10920, (unsigned long )(& h));
# 148 "../HPL_pdlaprnt.c"
      h ++;
    }
    while_break___0: ;
    }
    {
    __CrestLoad(10923, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(10922, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(10921, 12, (long long )(mycol == icurcol));
# 182 "../HPL_pdlaprnt.c"
    if (mycol == icurcol) {
      __CrestBranch(10924, 4390, 1);
      __CrestLoad(10928, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(10927, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(10926, 0, (long long )(jj + jb));
      __CrestStore(10929, (unsigned long )(& jj));
# 182 "../HPL_pdlaprnt.c"
      jj += jb;
    } else {
      __CrestBranch(10925, 4391, 0);

    }
    }
    {
    __CrestLoad(10934, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestLoad(10933, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(10932, (unsigned long )0, (long long )1);
    __CrestApply2(10931, 1, (long long )(npcol - 1));
    __CrestApply2(10930, 13, (long long )(icurcol != npcol - 1));
# 183 "../HPL_pdlaprnt.c"
    if (icurcol != npcol - 1) {
      __CrestBranch(10935, 4393, 1);
      __CrestLoad(10939, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestLoad(10938, (unsigned long )0, (long long )1);
      __CrestApply2(10937, 0, (long long )(icurcol + 1));
      __CrestStore(10940, (unsigned long )(& icurcol));
# 183 "../HPL_pdlaprnt.c"
      icurcol ++;
    } else {
      __CrestBranch(10936, 4394, 0);
      __CrestLoad(10941, (unsigned long )0, (long long )0);
      __CrestStore(10942, (unsigned long )(& icurcol));
# 183 "../HPL_pdlaprnt.c"
      icurcol = 0;
    }
    }
    __CrestLoad(10943, (unsigned long )(& Acomm), (long long )Acomm);
# 184 "../HPL_pdlaprnt.c"
    HPL_barrier(Acomm);
    __CrestClearStack(10944);
    __CrestLoad(10947, (unsigned long )(& j), (long long )j);
    __CrestLoad(10946, (unsigned long )(& NB), (long long )NB);
    __CrestApply2(10945, 0, (long long )(j + (int )NB));
    __CrestStore(10948, (unsigned long )(& j));
# 145 "../HPL_pdlaprnt.c"
    j += (int )NB;
  }
  while_break: ;
  }
  {
  __CrestLoad(10951, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(10950, (unsigned long )0, (long long )0);
  __CrestApply2(10949, 12, (long long )(myrow == 0));
# 186 "../HPL_pdlaprnt.c"
  if (myrow == 0) {
    __CrestBranch(10952, 4398, 1);
    {
    __CrestLoad(10956, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(10955, (unsigned long )0, (long long )0);
    __CrestApply2(10954, 12, (long long )(mycol == 0));
# 186 "../HPL_pdlaprnt.c"
    if (mycol == 0) {
      __CrestBranch(10957, 4399, 1);
      {
      __CrestLoad(10961, (unsigned long )(& buf), (long long )((unsigned long )buf));
      __CrestLoad(10960, (unsigned long )0, (long long )0);
      __CrestApply2(10959, 13, (long long )(buf != 0));
# 186 "../HPL_pdlaprnt.c"
      if (buf != 0) {
        __CrestBranch(10962, 4400, 1);
# 186 "../HPL_pdlaprnt.c"
        free((void *)buf);
        __CrestClearStack(10964);
      } else {
        __CrestBranch(10963, 4401, 0);

      }
      }
    } else {
      __CrestBranch(10958, 4402, 0);

    }
    }
  } else {
    __CrestBranch(10953, 4403, 0);

  }
  }

  {
  __CrestReturn(10965);
# 53 "../HPL_pdlaprnt.c"
  return;
  }
}
}
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 139 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
extern double HPL_dlamch(HPL_T_MACH const ) ;
# 53 "../HPL_pdlamch.c"
double HPL_pdlamch(MPI_Comm COMM , HPL_T_MACH const CMACH )
{
  double param ;

  {
  __CrestCall(10968, 75);
  __CrestStore(10967, (unsigned long )(& CMACH));
  __CrestStore(10966, (unsigned long )(& COMM));
  __CrestLoad(10969, (unsigned long )(& CMACH), (long long )CMACH);
# 119 "../HPL_pdlamch.c"
  param = HPL_dlamch(CMACH);
  __CrestClearStack(10970);
  {
  {
  __CrestLoad(10973, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10972, (unsigned long )0, (long long )900U);
  __CrestApply2(10971, 12, (long long )((unsigned int const )CMACH == 900U));
# 125 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 900U) {
    __CrestBranch(10974, 4409, 1);
# 125 "../HPL_pdlamch.c"
    goto case_900;
  } else {
    __CrestBranch(10975, 4410, 0);

  }
  }
  {
  __CrestLoad(10978, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10977, (unsigned long )0, (long long )901U);
  __CrestApply2(10976, 12, (long long )((unsigned int const )CMACH == 901U));
# 125 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 901U) {
    __CrestBranch(10979, 4412, 1);
# 125 "../HPL_pdlamch.c"
    goto case_900;
  } else {
    __CrestBranch(10980, 4413, 0);

  }
  }
  {
  __CrestLoad(10983, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10982, (unsigned long )0, (long long )906U);
  __CrestApply2(10981, 12, (long long )((unsigned int const )CMACH == 906U));
# 125 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 906U) {
    __CrestBranch(10984, 4415, 1);
# 125 "../HPL_pdlamch.c"
    goto case_900;
  } else {
    __CrestBranch(10985, 4416, 0);

  }
  }
  {
  __CrestLoad(10988, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10987, (unsigned long )0, (long long )907U);
  __CrestApply2(10986, 12, (long long )((unsigned int const )CMACH == 907U));
# 125 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 907U) {
    __CrestBranch(10989, 4418, 1);
# 125 "../HPL_pdlamch.c"
    goto case_900;
  } else {
    __CrestBranch(10990, 4419, 0);

  }
  }
  {
  __CrestLoad(10993, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10992, (unsigned long )0, (long long )908U);
  __CrestApply2(10991, 12, (long long )((unsigned int const )CMACH == 908U));
# 131 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 908U) {
    __CrestBranch(10994, 4421, 1);
# 131 "../HPL_pdlamch.c"
    goto case_908;
  } else {
    __CrestBranch(10995, 4422, 0);

  }
  }
  {
  __CrestLoad(10998, (unsigned long )(& CMACH), (long long )CMACH);
  __CrestLoad(10997, (unsigned long )0, (long long )909U);
  __CrestApply2(10996, 12, (long long )((unsigned int const )CMACH == 909U));
# 131 "../HPL_pdlamch.c"
  if ((unsigned int const )CMACH == 909U) {
    __CrestBranch(10999, 4424, 1);
# 131 "../HPL_pdlamch.c"
    goto case_908;
  } else {
    __CrestBranch(11000, 4425, 0);

  }
  }
# 135 "../HPL_pdlamch.c"
  goto switch_default;
  case_900:
  case_901:
  case_906:
  case_907:
  __CrestLoad(11001, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(11002, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
  __CrestLoad(11003, (unsigned long )(& COMM), (long long )COMM);
# 127 "../HPL_pdlamch.c"
  HPL_all_reduce((void *)(& param), (int const )1, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                                 void const * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const ))(& HPL_max),
                 COMM);
  __CrestClearStack(11004);
# 129 "../HPL_pdlamch.c"
  goto switch_break;
  case_908:
  case_909:
  __CrestLoad(11005, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(11006, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
  __CrestLoad(11007, (unsigned long )(& COMM), (long long )COMM);
# 132 "../HPL_pdlamch.c"
  HPL_all_reduce((void *)(& param), (int const )1, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                                 void const * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const ))(& HPL_min),
                 COMM);
  __CrestClearStack(11008);
# 134 "../HPL_pdlamch.c"
  goto switch_break;
  switch_default:
# 136 "../HPL_pdlamch.c"
  goto switch_break;
  switch_break: ;
  }
  {
  __CrestReturn(11009);
# 139 "../HPL_pdlamch.c"
  return (param);
  }
}
}
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdlange.c"
double HPL_pdlange(HPL_T_grid const *GRID , HPL_T_NORM const NORM , int const M ,
                   int const N , int const NB , double const *A , int const LDA )
{
  double s ;
  double v0 ;
  double *work ;
  MPI_Comm Acomm ;
  MPI_Comm Ccomm ;
  MPI_Comm Rcomm ;
  int ii ;
  int jj ;
  int mp ;
  int mycol ;
  int myrow ;
  int npcol ;
  int nprow ;
  int nq ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;
  double tmp___0 ;
  double tmp___1 ;
  void *tmp___2 ;
  double tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  double tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  double *mem_43 ;
  double *mem_44 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double __retres49 ;

  {
  __CrestCall(11015, 76);
  __CrestStore(11014, (unsigned long )(& LDA));
  __CrestStore(11013, (unsigned long )(& NB));
  __CrestStore(11012, (unsigned long )(& N));
  __CrestStore(11011, (unsigned long )(& M));
  __CrestStore(11010, (unsigned long )(& NORM));
# 127 "../HPL_pdlange.c"
  v0 = 0.0;
# 127 "../HPL_pdlange.c"
  work = (double *)((void *)0);
# 134 "../HPL_pdlange.c"
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
  __CrestClearStack(11016);
  __CrestLoad(11017, (unsigned long )(& GRID->row_comm), (long long )GRID->row_comm);
  __CrestStore(11018, (unsigned long )(& Rcomm));
# 135 "../HPL_pdlange.c"
  Rcomm = (MPI_Comm )GRID->row_comm;
  __CrestLoad(11019, (unsigned long )(& GRID->col_comm), (long long )GRID->col_comm);
  __CrestStore(11020, (unsigned long )(& Ccomm));
# 135 "../HPL_pdlange.c"
  Ccomm = (MPI_Comm )GRID->col_comm;
  __CrestLoad(11021, (unsigned long )(& GRID->all_comm), (long long )GRID->all_comm);
  __CrestStore(11022, (unsigned long )(& Acomm));
# 136 "../HPL_pdlange.c"
  Acomm = (MPI_Comm )GRID->all_comm;
  {
  __CrestLoad(11025, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(11024, (unsigned long )0, (long long )1);
  __CrestApply2(11023, 14, (long long )(nprow > 1));
# 138 "../HPL_pdlange.c"
  if (nprow > 1) {
    __CrestBranch(11026, 4436, 1);
    __CrestLoad(11028, (unsigned long )(& NB), (long long )NB);
    __CrestStore(11029, (unsigned long )(& inb__));
# 138 "../HPL_pdlange.c"
    inb__ = (int )NB;
    {
    __CrestLoad(11032, (unsigned long )(& inb__), (long long )inb__);
    __CrestLoad(11031, (unsigned long )0, (long long )0);
    __CrestApply2(11030, 15, (long long )(inb__ <= 0));
# 138 "../HPL_pdlange.c"
    if (inb__ <= 0) {
      __CrestBranch(11033, 4438, 1);
      __CrestLoad(11040, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply1(11039, 19, (long long )(- inb__));
      __CrestLoad(11038, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(11037, 3, (long long )(- inb__ / (int )NB));
      __CrestLoad(11036, (unsigned long )0, (long long )1);
      __CrestApply2(11035, 0, (long long )(- inb__ / (int )NB + 1));
      __CrestStore(11041, (unsigned long )(& nblk__));
# 138 "../HPL_pdlange.c"
      nblk__ = - inb__ / (int )NB + 1;
      __CrestLoad(11042, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestStore(11043, (unsigned long )(& src__));
# 138 "../HPL_pdlange.c"
      src__ = nblk__;
      __CrestLoad(11050, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(11049, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(11048, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(11047, 3, (long long )(src__ / nprow));
      __CrestLoad(11046, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(11045, 2, (long long )((src__ / nprow) * nprow));
      __CrestApply2(11044, 1, (long long )(src__ - (src__ / nprow) * nprow));
      __CrestStore(11051, (unsigned long )(& src__));
# 138 "../HPL_pdlange.c"
      src__ -= (src__ / nprow) * nprow;
      __CrestLoad(11056, (unsigned long )(& inb__), (long long )inb__);
      __CrestLoad(11055, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestLoad(11054, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(11053, 2, (long long )(nblk__ * (int )NB));
      __CrestApply2(11052, 0, (long long )(inb__ + nblk__ * (int )NB));
      __CrestStore(11057, (unsigned long )(& inb__));
# 138 "../HPL_pdlange.c"
      inb__ += nblk__ * (int )NB;
      __CrestLoad(11060, (unsigned long )(& M), (long long )M);
      __CrestLoad(11059, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(11058, 1, (long long )(M - (int const )inb__));
      __CrestStore(11061, (unsigned long )(& n__));
# 138 "../HPL_pdlange.c"
      n__ = (int )(M - (int const )inb__);
      {
      __CrestLoad(11064, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(11063, (unsigned long )0, (long long )0);
      __CrestApply2(11062, 15, (long long )(n__ <= 0));
# 138 "../HPL_pdlange.c"
      if (n__ <= 0) {
        __CrestBranch(11065, 4440, 1);
        {
        __CrestLoad(11069, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(11068, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(11067, 12, (long long )(myrow == src__));
# 138 "../HPL_pdlange.c"
        if (myrow == src__) {
          __CrestBranch(11070, 4441, 1);
          __CrestLoad(11072, (unsigned long )(& M), (long long )M);
          __CrestStore(11073, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
          mp = (int )M;
        } else {
          __CrestBranch(11071, 4442, 0);
          __CrestLoad(11074, (unsigned long )0, (long long )0);
          __CrestStore(11075, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
          mp = 0;
        }
        }
      } else {
        __CrestBranch(11066, 4443, 0);
        __CrestLoad(11078, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(11077, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(11076, 1, (long long )(myrow - src__));
        __CrestStore(11079, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
        mydist__ = myrow - src__;
        {
        __CrestLoad(11082, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11081, (unsigned long )0, (long long )0);
        __CrestApply2(11080, 16, (long long )(mydist__ < 0));
# 138 "../HPL_pdlange.c"
        if (mydist__ < 0) {
          __CrestBranch(11083, 4445, 1);
          __CrestLoad(11087, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(11086, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(11085, 0, (long long )(mydist__ + nprow));
          __CrestStore(11088, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(11084, 4446, 0);

        }
        }
        __CrestLoad(11093, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(11092, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(11091, 3, (long long )(n__ / (int )NB));
        __CrestLoad(11090, (unsigned long )0, (long long )1);
        __CrestApply2(11089, 0, (long long )(n__ / (int )NB + 1));
        __CrestStore(11094, (unsigned long )(& nblk__));
# 138 "../HPL_pdlange.c"
        nblk__ = n__ / (int )NB + 1;
        __CrestLoad(11097, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(11096, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(11095, 3, (long long )(nblk__ / nprow));
        __CrestStore(11098, (unsigned long )(& quot__));
# 138 "../HPL_pdlange.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(11105, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11104, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(11103, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(11102, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(11101, 2, (long long )(quot__ * nprow));
        __CrestApply2(11100, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(11099, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(11106, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(11109, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11108, (unsigned long )0, (long long )0);
        __CrestApply2(11107, 16, (long long )(mydist__ < 0));
# 138 "../HPL_pdlange.c"
        if (mydist__ < 0) {
          __CrestBranch(11110, 4449, 1);
          {
          __CrestLoad(11114, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(11113, (unsigned long )(& src__), (long long )src__);
          __CrestApply2(11112, 13, (long long )(myrow != src__));
# 138 "../HPL_pdlange.c"
          if (myrow != src__) {
            __CrestBranch(11115, 4450, 1);
            __CrestLoad(11121, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11120, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11119, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11118, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(11117, 0, (long long )(NB + NB * (int const )quot__));
            __CrestStore(11122, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = (int )(NB + NB * (int const )quot__);
          } else {
            __CrestBranch(11116, 4451, 0);
            __CrestLoad(11127, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(11126, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11125, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11124, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(11123, 0, (long long )(inb__ + (int )(NB * (int const )quot__)));
            __CrestStore(11128, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = inb__ + (int )(NB * (int const )quot__);
          }
          }
        } else {
          __CrestBranch(11111, 4452, 0);
          {
          __CrestLoad(11131, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(11130, (unsigned long )0, (long long )0);
          __CrestApply2(11129, 14, (long long )(mydist__ > 0));
# 138 "../HPL_pdlange.c"
          if (mydist__ > 0) {
            __CrestBranch(11132, 4453, 1);
            __CrestLoad(11136, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11135, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11134, 2, (long long )(NB * (int const )quot__));
            __CrestStore(11137, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = (int )(NB * (int const )quot__);
          } else {
            __CrestBranch(11133, 4454, 0);
            {
            __CrestLoad(11140, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(11139, (unsigned long )(& src__), (long long )src__);
            __CrestApply2(11138, 13, (long long )(myrow != src__));
# 138 "../HPL_pdlange.c"
            if (myrow != src__) {
              __CrestBranch(11141, 4455, 1);
              __CrestLoad(11151, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(11150, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(11149, 0, (long long )(n__ + (int )NB));
              __CrestLoad(11148, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11147, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(11146, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(11145, 1, (long long )(quot__ - nblk__));
              __CrestApply2(11144, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(11143, 0, (long long )((n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__))));
              __CrestStore(11152, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
              mp = (n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__));
            } else {
              __CrestBranch(11142, 4456, 0);
              __CrestLoad(11159, (unsigned long )(& M), (long long )M);
              __CrestLoad(11158, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11157, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(11156, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(11155, 1, (long long )(quot__ - nblk__));
              __CrestApply2(11154, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(11153, 0, (long long )(M + NB * (int const )(quot__ - nblk__)));
              __CrestStore(11160, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
              mp = (int )(M + NB * (int const )(quot__ - nblk__));
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(11034, 4457, 0);
      __CrestLoad(11163, (unsigned long )(& M), (long long )M);
      __CrestLoad(11162, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(11161, 1, (long long )(M - (int const )inb__));
      __CrestStore(11164, (unsigned long )(& n__));
# 138 "../HPL_pdlange.c"
      n__ = (int )(M - (int const )inb__);
      {
      __CrestLoad(11167, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(11166, (unsigned long )0, (long long )0);
      __CrestApply2(11165, 15, (long long )(n__ <= 0));
# 138 "../HPL_pdlange.c"
      if (n__ <= 0) {
        __CrestBranch(11168, 4459, 1);
        {
        __CrestLoad(11172, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(11171, (unsigned long )0, (long long )0);
        __CrestApply2(11170, 12, (long long )(myrow == 0));
# 138 "../HPL_pdlange.c"
        if (myrow == 0) {
          __CrestBranch(11173, 4460, 1);
          __CrestLoad(11175, (unsigned long )(& M), (long long )M);
          __CrestStore(11176, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
          mp = (int )M;
        } else {
          __CrestBranch(11174, 4461, 0);
          __CrestLoad(11177, (unsigned long )0, (long long )0);
          __CrestStore(11178, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
          mp = 0;
        }
        }
      } else {
        __CrestBranch(11169, 4462, 0);
        __CrestLoad(11179, (unsigned long )(& myrow), (long long )myrow);
        __CrestStore(11180, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
        mydist__ = myrow;
        {
        __CrestLoad(11183, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11182, (unsigned long )0, (long long )0);
        __CrestApply2(11181, 16, (long long )(mydist__ < 0));
# 138 "../HPL_pdlange.c"
        if (mydist__ < 0) {
          __CrestBranch(11184, 4464, 1);
          __CrestLoad(11188, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(11187, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(11186, 0, (long long )(mydist__ + nprow));
          __CrestStore(11189, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(11185, 4465, 0);

        }
        }
        __CrestLoad(11194, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(11193, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(11192, 3, (long long )(n__ / (int )NB));
        __CrestLoad(11191, (unsigned long )0, (long long )1);
        __CrestApply2(11190, 0, (long long )(n__ / (int )NB + 1));
        __CrestStore(11195, (unsigned long )(& nblk__));
# 138 "../HPL_pdlange.c"
        nblk__ = n__ / (int )NB + 1;
        __CrestLoad(11198, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(11197, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(11196, 3, (long long )(nblk__ / nprow));
        __CrestStore(11199, (unsigned long )(& quot__));
# 138 "../HPL_pdlange.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(11206, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11205, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(11204, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(11203, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(11202, 2, (long long )(quot__ * nprow));
        __CrestApply2(11201, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(11200, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(11207, (unsigned long )(& mydist__));
# 138 "../HPL_pdlange.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(11210, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(11209, (unsigned long )0, (long long )0);
        __CrestApply2(11208, 16, (long long )(mydist__ < 0));
# 138 "../HPL_pdlange.c"
        if (mydist__ < 0) {
          __CrestBranch(11211, 4468, 1);
          {
          __CrestLoad(11215, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(11214, (unsigned long )0, (long long )0);
          __CrestApply2(11213, 13, (long long )(myrow != 0));
# 138 "../HPL_pdlange.c"
          if (myrow != 0) {
            __CrestBranch(11216, 4469, 1);
            __CrestLoad(11222, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11221, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11220, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11219, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(11218, 0, (long long )(NB + NB * (int const )quot__));
            __CrestStore(11223, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = (int )(NB + NB * (int const )quot__);
          } else {
            __CrestBranch(11217, 4470, 0);
            __CrestLoad(11228, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(11227, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11226, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11225, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(11224, 0, (long long )(inb__ + (int )(NB * (int const )quot__)));
            __CrestStore(11229, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = inb__ + (int )(NB * (int const )quot__);
          }
          }
        } else {
          __CrestBranch(11212, 4471, 0);
          {
          __CrestLoad(11232, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(11231, (unsigned long )0, (long long )0);
          __CrestApply2(11230, 14, (long long )(mydist__ > 0));
# 138 "../HPL_pdlange.c"
          if (mydist__ > 0) {
            __CrestBranch(11233, 4472, 1);
            __CrestLoad(11237, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11236, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(11235, 2, (long long )(NB * (int const )quot__));
            __CrestStore(11238, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
            mp = (int )(NB * (int const )quot__);
          } else {
            __CrestBranch(11234, 4473, 0);
            {
            __CrestLoad(11241, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(11240, (unsigned long )0, (long long )0);
            __CrestApply2(11239, 13, (long long )(myrow != 0));
# 138 "../HPL_pdlange.c"
            if (myrow != 0) {
              __CrestBranch(11242, 4474, 1);
              __CrestLoad(11252, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(11251, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(11250, 0, (long long )(n__ + (int )NB));
              __CrestLoad(11249, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11248, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(11247, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(11246, 1, (long long )(quot__ - nblk__));
              __CrestApply2(11245, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(11244, 0, (long long )((n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__))));
              __CrestStore(11253, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
              mp = (n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__));
            } else {
              __CrestBranch(11243, 4475, 0);
              __CrestLoad(11260, (unsigned long )(& M), (long long )M);
              __CrestLoad(11259, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11258, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(11257, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(11256, 1, (long long )(quot__ - nblk__));
              __CrestApply2(11255, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(11254, 0, (long long )(M + NB * (int const )(quot__ - nblk__)));
              __CrestStore(11261, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
              mp = (int )(M + NB * (int const )(quot__ - nblk__));
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(11027, 4476, 0);
    __CrestLoad(11262, (unsigned long )(& M), (long long )M);
    __CrestStore(11263, (unsigned long )(& mp));
# 138 "../HPL_pdlange.c"
    mp = (int )M;
  }
  }
  {
  __CrestLoad(11266, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(11265, (unsigned long )0, (long long )1);
  __CrestApply2(11264, 14, (long long )(npcol > 1));
# 139 "../HPL_pdlange.c"
  if (npcol > 1) {
    __CrestBranch(11267, 4478, 1);
    __CrestLoad(11269, (unsigned long )(& NB), (long long )NB);
    __CrestStore(11270, (unsigned long )(& inb_____0));
# 139 "../HPL_pdlange.c"
    inb_____0 = (int )NB;
    {
    __CrestLoad(11273, (unsigned long )(& inb_____0), (long long )inb_____0);
    __CrestLoad(11272, (unsigned long )0, (long long )0);
    __CrestApply2(11271, 15, (long long )(inb_____0 <= 0));
# 139 "../HPL_pdlange.c"
    if (inb_____0 <= 0) {
      __CrestBranch(11274, 4480, 1);
      __CrestLoad(11281, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply1(11280, 19, (long long )(- inb_____0));
      __CrestLoad(11279, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(11278, 3, (long long )(- inb_____0 / (int )NB));
      __CrestLoad(11277, (unsigned long )0, (long long )1);
      __CrestApply2(11276, 0, (long long )(- inb_____0 / (int )NB + 1));
      __CrestStore(11282, (unsigned long )(& nblk_____0));
# 139 "../HPL_pdlange.c"
      nblk_____0 = - inb_____0 / (int )NB + 1;
      __CrestLoad(11283, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestStore(11284, (unsigned long )(& src_____0));
# 139 "../HPL_pdlange.c"
      src_____0 = nblk_____0;
      __CrestLoad(11291, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(11290, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(11289, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(11288, 3, (long long )(src_____0 / npcol));
      __CrestLoad(11287, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(11286, 2, (long long )((src_____0 / npcol) * npcol));
      __CrestApply2(11285, 1, (long long )(src_____0 - (src_____0 / npcol) * npcol));
      __CrestStore(11292, (unsigned long )(& src_____0));
# 139 "../HPL_pdlange.c"
      src_____0 -= (src_____0 / npcol) * npcol;
      __CrestLoad(11297, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestLoad(11296, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestLoad(11295, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(11294, 2, (long long )(nblk_____0 * (int )NB));
      __CrestApply2(11293, 0, (long long )(inb_____0 + nblk_____0 * (int )NB));
      __CrestStore(11298, (unsigned long )(& inb_____0));
# 139 "../HPL_pdlange.c"
      inb_____0 += nblk_____0 * (int )NB;
      __CrestLoad(11301, (unsigned long )(& N), (long long )N);
      __CrestLoad(11300, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(11299, 1, (long long )(N - (int const )inb_____0));
      __CrestStore(11302, (unsigned long )(& n_____0));
# 139 "../HPL_pdlange.c"
      n_____0 = (int )(N - (int const )inb_____0);
      {
      __CrestLoad(11305, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(11304, (unsigned long )0, (long long )0);
      __CrestApply2(11303, 15, (long long )(n_____0 <= 0));
# 139 "../HPL_pdlange.c"
      if (n_____0 <= 0) {
        __CrestBranch(11306, 4482, 1);
        {
        __CrestLoad(11310, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(11309, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(11308, 12, (long long )(mycol == src_____0));
# 139 "../HPL_pdlange.c"
        if (mycol == src_____0) {
          __CrestBranch(11311, 4483, 1);
          __CrestLoad(11313, (unsigned long )(& N), (long long )N);
          __CrestStore(11314, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
          nq = (int )N;
        } else {
          __CrestBranch(11312, 4484, 0);
          __CrestLoad(11315, (unsigned long )0, (long long )0);
          __CrestStore(11316, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
          nq = 0;
        }
        }
      } else {
        __CrestBranch(11307, 4485, 0);
        __CrestLoad(11319, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(11318, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(11317, 1, (long long )(mycol - src_____0));
        __CrestStore(11320, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
        mydist_____0 = mycol - src_____0;
        {
        __CrestLoad(11323, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11322, (unsigned long )0, (long long )0);
        __CrestApply2(11321, 16, (long long )(mydist_____0 < 0));
# 139 "../HPL_pdlange.c"
        if (mydist_____0 < 0) {
          __CrestBranch(11324, 4487, 1);
          __CrestLoad(11328, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(11327, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(11326, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(11329, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(11325, 4488, 0);

        }
        }
        __CrestLoad(11334, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(11333, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(11332, 3, (long long )(n_____0 / (int )NB));
        __CrestLoad(11331, (unsigned long )0, (long long )1);
        __CrestApply2(11330, 0, (long long )(n_____0 / (int )NB + 1));
        __CrestStore(11335, (unsigned long )(& nblk_____0));
# 139 "../HPL_pdlange.c"
        nblk_____0 = n_____0 / (int )NB + 1;
        __CrestLoad(11338, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(11337, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(11336, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(11339, (unsigned long )(& quot_____0));
# 139 "../HPL_pdlange.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(11346, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11345, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(11344, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(11343, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(11342, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(11341, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(11340, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(11347, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(11350, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11349, (unsigned long )0, (long long )0);
        __CrestApply2(11348, 16, (long long )(mydist_____0 < 0));
# 139 "../HPL_pdlange.c"
        if (mydist_____0 < 0) {
          __CrestBranch(11351, 4491, 1);
          {
          __CrestLoad(11355, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(11354, (unsigned long )(& src_____0), (long long )src_____0);
          __CrestApply2(11353, 13, (long long )(mycol != src_____0));
# 139 "../HPL_pdlange.c"
          if (mycol != src_____0) {
            __CrestBranch(11356, 4492, 1);
            __CrestLoad(11362, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11361, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11360, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11359, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(11358, 0, (long long )(NB + NB * (int const )quot_____0));
            __CrestStore(11363, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = (int )(NB + NB * (int const )quot_____0);
          } else {
            __CrestBranch(11357, 4493, 0);
            __CrestLoad(11368, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(11367, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11366, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11365, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(11364, 0, (long long )(inb_____0 + (int )(NB * (int const )quot_____0)));
            __CrestStore(11369, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = inb_____0 + (int )(NB * (int const )quot_____0);
          }
          }
        } else {
          __CrestBranch(11352, 4494, 0);
          {
          __CrestLoad(11372, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(11371, (unsigned long )0, (long long )0);
          __CrestApply2(11370, 14, (long long )(mydist_____0 > 0));
# 139 "../HPL_pdlange.c"
          if (mydist_____0 > 0) {
            __CrestBranch(11373, 4495, 1);
            __CrestLoad(11377, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11376, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11375, 2, (long long )(NB * (int const )quot_____0));
            __CrestStore(11378, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = (int )(NB * (int const )quot_____0);
          } else {
            __CrestBranch(11374, 4496, 0);
            {
            __CrestLoad(11381, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(11380, (unsigned long )(& src_____0), (long long )src_____0);
            __CrestApply2(11379, 13, (long long )(mycol != src_____0));
# 139 "../HPL_pdlange.c"
            if (mycol != src_____0) {
              __CrestBranch(11382, 4497, 1);
              __CrestLoad(11392, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(11391, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(11390, 0, (long long )(n_____0 + (int )NB));
              __CrestLoad(11389, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11388, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(11387, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(11386, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(11385, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(11384, 0, (long long )((n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0))));
              __CrestStore(11393, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
              nq = (n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0));
            } else {
              __CrestBranch(11383, 4498, 0);
              __CrestLoad(11400, (unsigned long )(& N), (long long )N);
              __CrestLoad(11399, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11398, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(11397, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(11396, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(11395, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(11394, 0, (long long )(N + NB * (int const )(quot_____0 - nblk_____0)));
              __CrestStore(11401, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
              nq = (int )(N + NB * (int const )(quot_____0 - nblk_____0));
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(11275, 4499, 0);
      __CrestLoad(11404, (unsigned long )(& N), (long long )N);
      __CrestLoad(11403, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(11402, 1, (long long )(N - (int const )inb_____0));
      __CrestStore(11405, (unsigned long )(& n_____0));
# 139 "../HPL_pdlange.c"
      n_____0 = (int )(N - (int const )inb_____0);
      {
      __CrestLoad(11408, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(11407, (unsigned long )0, (long long )0);
      __CrestApply2(11406, 15, (long long )(n_____0 <= 0));
# 139 "../HPL_pdlange.c"
      if (n_____0 <= 0) {
        __CrestBranch(11409, 4501, 1);
        {
        __CrestLoad(11413, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(11412, (unsigned long )0, (long long )0);
        __CrestApply2(11411, 12, (long long )(mycol == 0));
# 139 "../HPL_pdlange.c"
        if (mycol == 0) {
          __CrestBranch(11414, 4502, 1);
          __CrestLoad(11416, (unsigned long )(& N), (long long )N);
          __CrestStore(11417, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
          nq = (int )N;
        } else {
          __CrestBranch(11415, 4503, 0);
          __CrestLoad(11418, (unsigned long )0, (long long )0);
          __CrestStore(11419, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
          nq = 0;
        }
        }
      } else {
        __CrestBranch(11410, 4504, 0);
        __CrestLoad(11420, (unsigned long )(& mycol), (long long )mycol);
        __CrestStore(11421, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
        mydist_____0 = mycol;
        {
        __CrestLoad(11424, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11423, (unsigned long )0, (long long )0);
        __CrestApply2(11422, 16, (long long )(mydist_____0 < 0));
# 139 "../HPL_pdlange.c"
        if (mydist_____0 < 0) {
          __CrestBranch(11425, 4506, 1);
          __CrestLoad(11429, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(11428, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(11427, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(11430, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(11426, 4507, 0);

        }
        }
        __CrestLoad(11435, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(11434, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(11433, 3, (long long )(n_____0 / (int )NB));
        __CrestLoad(11432, (unsigned long )0, (long long )1);
        __CrestApply2(11431, 0, (long long )(n_____0 / (int )NB + 1));
        __CrestStore(11436, (unsigned long )(& nblk_____0));
# 139 "../HPL_pdlange.c"
        nblk_____0 = n_____0 / (int )NB + 1;
        __CrestLoad(11439, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(11438, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(11437, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(11440, (unsigned long )(& quot_____0));
# 139 "../HPL_pdlange.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(11447, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11446, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(11445, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(11444, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(11443, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(11442, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(11441, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(11448, (unsigned long )(& mydist_____0));
# 139 "../HPL_pdlange.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(11451, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(11450, (unsigned long )0, (long long )0);
        __CrestApply2(11449, 16, (long long )(mydist_____0 < 0));
# 139 "../HPL_pdlange.c"
        if (mydist_____0 < 0) {
          __CrestBranch(11452, 4510, 1);
          {
          __CrestLoad(11456, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(11455, (unsigned long )0, (long long )0);
          __CrestApply2(11454, 13, (long long )(mycol != 0));
# 139 "../HPL_pdlange.c"
          if (mycol != 0) {
            __CrestBranch(11457, 4511, 1);
            __CrestLoad(11463, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11462, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11461, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11460, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(11459, 0, (long long )(NB + NB * (int const )quot_____0));
            __CrestStore(11464, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = (int )(NB + NB * (int const )quot_____0);
          } else {
            __CrestBranch(11458, 4512, 0);
            __CrestLoad(11469, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(11468, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11467, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11466, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(11465, 0, (long long )(inb_____0 + (int )(NB * (int const )quot_____0)));
            __CrestStore(11470, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = inb_____0 + (int )(NB * (int const )quot_____0);
          }
          }
        } else {
          __CrestBranch(11453, 4513, 0);
          {
          __CrestLoad(11473, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(11472, (unsigned long )0, (long long )0);
          __CrestApply2(11471, 14, (long long )(mydist_____0 > 0));
# 139 "../HPL_pdlange.c"
          if (mydist_____0 > 0) {
            __CrestBranch(11474, 4514, 1);
            __CrestLoad(11478, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(11477, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(11476, 2, (long long )(NB * (int const )quot_____0));
            __CrestStore(11479, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
            nq = (int )(NB * (int const )quot_____0);
          } else {
            __CrestBranch(11475, 4515, 0);
            {
            __CrestLoad(11482, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(11481, (unsigned long )0, (long long )0);
            __CrestApply2(11480, 13, (long long )(mycol != 0));
# 139 "../HPL_pdlange.c"
            if (mycol != 0) {
              __CrestBranch(11483, 4516, 1);
              __CrestLoad(11493, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(11492, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(11491, 0, (long long )(n_____0 + (int )NB));
              __CrestLoad(11490, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11489, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(11488, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(11487, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(11486, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(11485, 0, (long long )((n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0))));
              __CrestStore(11494, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
              nq = (n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0));
            } else {
              __CrestBranch(11484, 4517, 0);
              __CrestLoad(11501, (unsigned long )(& N), (long long )N);
              __CrestLoad(11500, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(11499, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(11498, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(11497, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(11496, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(11495, 0, (long long )(N + NB * (int const )(quot_____0 - nblk_____0)));
              __CrestStore(11502, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
              nq = (int )(N + NB * (int const )(quot_____0 - nblk_____0));
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(11268, 4518, 0);
    __CrestLoad(11503, (unsigned long )(& N), (long long )N);
    __CrestStore(11504, (unsigned long )(& nq));
# 139 "../HPL_pdlange.c"
    nq = (int )N;
  }
  }
  {
  __CrestLoad(11507, (unsigned long )(& M), (long long )M);
  __CrestLoad(11506, (unsigned long )(& N), (long long )N);
  __CrestApply2(11505, 16, (long long )(M < N));
# 141 "../HPL_pdlange.c"
  if (M < N) {
    __CrestBranch(11508, 4520, 1);
    __CrestLoad(11510, (unsigned long )(& M), (long long )M);
    __CrestStore(11511, (unsigned long )(& tmp___8));
# 141 "../HPL_pdlange.c"
    tmp___8 = (int )M;
  } else {
    __CrestBranch(11509, 4521, 0);
    __CrestLoad(11512, (unsigned long )(& N), (long long )N);
    __CrestStore(11513, (unsigned long )(& tmp___8));
# 141 "../HPL_pdlange.c"
    tmp___8 = (int )N;
  }
  }
  {
  __CrestLoad(11516, (unsigned long )(& tmp___8), (long long )tmp___8);
  __CrestLoad(11515, (unsigned long )0, (long long )0);
  __CrestApply2(11514, 12, (long long )(tmp___8 == 0));
# 141 "../HPL_pdlange.c"
  if (tmp___8 == 0) {
    __CrestBranch(11517, 4523, 1);
# 141 "../HPL_pdlange.c"
    __retres49 = v0;
# 141 "../HPL_pdlange.c"
    goto return_label;
  } else {
    __CrestBranch(11518, 4525, 0);
    {
    __CrestLoad(11521, (unsigned long )(& NORM), (long long )NORM);
    __CrestLoad(11520, (unsigned long )0, (long long )800U);
    __CrestApply2(11519, 12, (long long )((unsigned int const )NORM == 800U));
# 142 "../HPL_pdlange.c"
    if ((unsigned int const )NORM == 800U) {
      __CrestBranch(11522, 4526, 1);
      {
      __CrestLoad(11526, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(11525, (unsigned long )0, (long long )0);
      __CrestApply2(11524, 14, (long long )(nq > 0));
# 147 "../HPL_pdlange.c"
      if (nq > 0) {
        __CrestBranch(11527, 4527, 1);
        {
        __CrestLoad(11531, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(11530, (unsigned long )0, (long long )0);
        __CrestApply2(11529, 14, (long long )(mp > 0));
# 147 "../HPL_pdlange.c"
        if (mp > 0) {
          __CrestBranch(11532, 4528, 1);
          __CrestLoad(11534, (unsigned long )0, (long long )0);
          __CrestStore(11535, (unsigned long )(& jj));
# 149 "../HPL_pdlange.c"
          jj = 0;
          {
# 149 "../HPL_pdlange.c"
          while (1) {
            while_continue: ;
            {
            __CrestLoad(11538, (unsigned long )(& jj), (long long )jj);
            __CrestLoad(11537, (unsigned long )(& nq), (long long )nq);
            __CrestApply2(11536, 16, (long long )(jj < nq));
# 149 "../HPL_pdlange.c"
            if (jj < nq) {
              __CrestBranch(11539, 4533, 1);

            } else {
              __CrestBranch(11540, 4534, 0);
# 149 "../HPL_pdlange.c"
              goto while_break;
            }
            }
            __CrestLoad(11541, (unsigned long )0, (long long )0);
            __CrestStore(11542, (unsigned long )(& ii));
# 151 "../HPL_pdlange.c"
            ii = 0;
            {
# 151 "../HPL_pdlange.c"
            while (1) {
              while_continue___0: ;
              {
              __CrestLoad(11545, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11544, (unsigned long )(& mp), (long long )mp);
              __CrestApply2(11543, 16, (long long )(ii < mp));
# 151 "../HPL_pdlange.c"
              if (ii < mp) {
                __CrestBranch(11546, 4540, 1);

              } else {
                __CrestBranch(11547, 4541, 0);
# 151 "../HPL_pdlange.c"
                goto while_break___0;
              }
              }
              {
              __CrestLoad(11550, (unsigned long )A, (long long )*A);
              __CrestLoad(11549, (unsigned long )0, (long long )((double const )0));
              __CrestApply2(11548, 16, (long long )(*A < (double const )0));
# 152 "../HPL_pdlange.c"
              if (*A < (double const )0) {
                __CrestBranch(11551, 4543, 1);
# 152 "../HPL_pdlange.c"
                tmp___1 = (double )(- *A);
              } else {
                __CrestBranch(11552, 4544, 0);
# 152 "../HPL_pdlange.c"
                tmp___1 = (double )*A;
              }
              }
              {
              __CrestLoad(11555, (unsigned long )(& v0), (long long )v0);
              __CrestLoad(11554, (unsigned long )(& tmp___1), (long long )tmp___1);
              __CrestApply2(11553, 14, (long long )(v0 > tmp___1));
# 152 "../HPL_pdlange.c"
              if (v0 > tmp___1) {
                __CrestBranch(11556, 4546, 1);
# 152 "../HPL_pdlange.c"
                v0 = v0;
              } else {
                __CrestBranch(11557, 4547, 0);
                {
                __CrestLoad(11560, (unsigned long )A, (long long )*A);
                __CrestLoad(11559, (unsigned long )0, (long long )((double const )0));
                __CrestApply2(11558, 16, (long long )(*A < (double const )0));
# 152 "../HPL_pdlange.c"
                if (*A < (double const )0) {
                  __CrestBranch(11561, 4548, 1);
# 152 "../HPL_pdlange.c"
                  tmp___0 = (double )(- *A);
                } else {
                  __CrestBranch(11562, 4549, 0);
# 152 "../HPL_pdlange.c"
                  tmp___0 = (double )*A;
                }
                }
# 152 "../HPL_pdlange.c"
                v0 = tmp___0;
              }
              }
# 152 "../HPL_pdlange.c"
              A ++;
              __CrestLoad(11565, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11564, (unsigned long )0, (long long )1);
              __CrestApply2(11563, 0, (long long )(ii + 1));
              __CrestStore(11566, (unsigned long )(& ii));
# 151 "../HPL_pdlange.c"
              ii ++;
            }
            while_break___0: ;
            }
# 153 "../HPL_pdlange.c"
            A += LDA - (int const )mp;
            __CrestLoad(11569, (unsigned long )(& jj), (long long )jj);
            __CrestLoad(11568, (unsigned long )0, (long long )1);
            __CrestApply2(11567, 0, (long long )(jj + 1));
            __CrestStore(11570, (unsigned long )(& jj));
# 149 "../HPL_pdlange.c"
            jj ++;
          }
          while_break: ;
          }
        } else {
          __CrestBranch(11533, 4555, 0);

        }
        }
      } else {
        __CrestBranch(11528, 4556, 0);

      }
      }
      __CrestLoad(11571, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(11572, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
      __CrestLoad(11573, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(11574, (unsigned long )(& Acomm), (long long )Acomm);
# 156 "../HPL_pdlange.c"
      HPL_reduce((void *)(& v0), (int const )1, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                              void const * ,
                                                                                              void * ,
                                                                                              HPL_T_TYPE const ))(& HPL_max),
                 (int const )0, Acomm);
      __CrestClearStack(11575);
    } else {
      __CrestBranch(11523, 4558, 0);
      {
      __CrestLoad(11578, (unsigned long )(& NORM), (long long )NORM);
      __CrestLoad(11577, (unsigned long )0, (long long )801U);
      __CrestApply2(11576, 12, (long long )((unsigned int const )NORM == 801U));
# 159 "../HPL_pdlange.c"
      if ((unsigned int const )NORM == 801U) {
        __CrestBranch(11579, 4559, 1);
        {
        __CrestLoad(11583, (unsigned long )(& nq), (long long )nq);
        __CrestLoad(11582, (unsigned long )0, (long long )0);
        __CrestApply2(11581, 14, (long long )(nq > 0));
# 164 "../HPL_pdlange.c"
        if (nq > 0) {
          __CrestBranch(11584, 4560, 1);
          __CrestLoad(11588, (unsigned long )(& nq), (long long )nq);
          __CrestLoad(11587, (unsigned long )0, (long long )sizeof(double ));
          __CrestApply2(11586, 2, (long long )((unsigned long )nq * sizeof(double )));
# 166 "../HPL_pdlange.c"
          tmp___2 = malloc((unsigned long )nq * sizeof(double ));
          __CrestClearStack(11589);
# 166 "../HPL_pdlange.c"
          work = (double *)tmp___2;
          {
          __CrestLoad(11592, (unsigned long )(& work), (long long )((unsigned long )work));
          __CrestLoad(11591, (unsigned long )0, (long long )((unsigned long )((void *)0)));
          __CrestApply2(11590, 12, (long long )((unsigned long )work == (unsigned long )((void *)0)));
# 167 "../HPL_pdlange.c"
          if ((unsigned long )work == (unsigned long )((void *)0)) {
            __CrestBranch(11593, 4562, 1);
            __CrestLoad(11595, (unsigned long )0, (long long )168);
# 168 "../HPL_pdlange.c"
            HPL_pabort(168, "HPL_pdlange", "Memory allocation failed");
            __CrestClearStack(11596);
          } else {
            __CrestBranch(11594, 4563, 0);

          }
          }
          __CrestLoad(11597, (unsigned long )0, (long long )0);
          __CrestStore(11598, (unsigned long )(& jj));
# 170 "../HPL_pdlange.c"
          jj = 0;
          {
# 170 "../HPL_pdlange.c"
          while (1) {
            while_continue___1: ;
            {
            __CrestLoad(11601, (unsigned long )(& jj), (long long )jj);
            __CrestLoad(11600, (unsigned long )(& nq), (long long )nq);
            __CrestApply2(11599, 16, (long long )(jj < nq));
# 170 "../HPL_pdlange.c"
            if (jj < nq) {
              __CrestBranch(11602, 4569, 1);

            } else {
              __CrestBranch(11603, 4570, 0);
# 170 "../HPL_pdlange.c"
              goto while_break___1;
            }
            }
# 172 "../HPL_pdlange.c"
            s = 0.0;
            __CrestLoad(11604, (unsigned long )0, (long long )0);
            __CrestStore(11605, (unsigned long )(& ii));
# 173 "../HPL_pdlange.c"
            ii = 0;
            {
# 173 "../HPL_pdlange.c"
            while (1) {
              while_continue___2: ;
              {
              __CrestLoad(11608, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11607, (unsigned long )(& mp), (long long )mp);
              __CrestApply2(11606, 16, (long long )(ii < mp));
# 173 "../HPL_pdlange.c"
              if (ii < mp) {
                __CrestBranch(11609, 4576, 1);

              } else {
                __CrestBranch(11610, 4577, 0);
# 173 "../HPL_pdlange.c"
                goto while_break___2;
              }
              }
              {
              __CrestLoad(11613, (unsigned long )A, (long long )*A);
              __CrestLoad(11612, (unsigned long )0, (long long )((double const )0));
              __CrestApply2(11611, 16, (long long )(*A < (double const )0));
# 173 "../HPL_pdlange.c"
              if (*A < (double const )0) {
                __CrestBranch(11614, 4579, 1);
# 173 "../HPL_pdlange.c"
                tmp___3 = (double )(- *A);
              } else {
                __CrestBranch(11615, 4580, 0);
# 173 "../HPL_pdlange.c"
                tmp___3 = (double )*A;
              }
              }
# 173 "../HPL_pdlange.c"
              s += tmp___3;
# 173 "../HPL_pdlange.c"
              A ++;
              __CrestLoad(11618, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11617, (unsigned long )0, (long long )1);
              __CrestApply2(11616, 0, (long long )(ii + 1));
              __CrestStore(11619, (unsigned long )(& ii));
# 173 "../HPL_pdlange.c"
              ii ++;
            }
            while_break___2: ;
            }
# 174 "../HPL_pdlange.c"
            mem_43 = work + jj;
# 174 "../HPL_pdlange.c"
            *mem_43 = s;
# 174 "../HPL_pdlange.c"
            A += LDA - (int const )mp;
            __CrestLoad(11622, (unsigned long )(& jj), (long long )jj);
            __CrestLoad(11621, (unsigned long )0, (long long )1);
            __CrestApply2(11620, 0, (long long )(jj + 1));
            __CrestStore(11623, (unsigned long )(& jj));
# 170 "../HPL_pdlange.c"
            jj ++;
          }
          while_break___1: ;
          }
          __CrestLoad(11624, (unsigned long )(& nq), (long long )nq);
          __CrestLoad(11625, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
          __CrestLoad(11626, (unsigned long )0, (long long )((int const )0));
          __CrestLoad(11627, (unsigned long )(& Ccomm), (long long )Ccomm);
# 179 "../HPL_pdlange.c"
          HPL_reduce((void *)work, (int const )nq, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                                 void const * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const ))(& HPL_sum),
                     (int const )0, Ccomm);
          __CrestClearStack(11628);
          {
          __CrestLoad(11631, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(11630, (unsigned long )0, (long long )0);
          __CrestApply2(11629, 12, (long long )(myrow == 0));
# 184 "../HPL_pdlange.c"
          if (myrow == 0) {
            __CrestBranch(11632, 4587, 1);
            __CrestLoad(11634, (unsigned long )(& nq), (long long )nq);
            __CrestLoad(11635, (unsigned long )0, (long long )((int const )1));
# 185 "../HPL_pdlange.c"
            tmp___4 = cblas_idamax((int const )nq, (double const *)work, (int const )1);
            __CrestHandleReturn(11637, (long long )tmp___4);
            __CrestStore(11636, (unsigned long )(& tmp___4));
# 185 "../HPL_pdlange.c"
            mem_44 = work + tmp___4;
# 185 "../HPL_pdlange.c"
            v0 = *mem_44;
            {
            __CrestLoad(11640, (unsigned long )(& v0), (long long )v0);
            __CrestLoad(11639, (unsigned long )0, (long long )((double )0));
            __CrestApply2(11638, 16, (long long )(v0 < (double )0));
# 185 "../HPL_pdlange.c"
            if (v0 < (double )0) {
              __CrestBranch(11641, 4589, 1);
# 185 "../HPL_pdlange.c"
              v0 = - v0;
            } else {
              __CrestBranch(11642, 4590, 0);
# 185 "../HPL_pdlange.c"
              v0 = v0;
            }
            }
          } else {
            __CrestBranch(11633, 4591, 0);

          }
          }
          {
          __CrestLoad(11645, (unsigned long )(& work), (long long )((unsigned long )work));
          __CrestLoad(11644, (unsigned long )0, (long long )0);
          __CrestApply2(11643, 13, (long long )(work != 0));
# 186 "../HPL_pdlange.c"
          if (work != 0) {
            __CrestBranch(11646, 4593, 1);
# 186 "../HPL_pdlange.c"
            free((void *)work);
            __CrestClearStack(11648);
          } else {
            __CrestBranch(11647, 4594, 0);

          }
          }
        } else {
          __CrestBranch(11585, 4595, 0);

        }
        }
        {
        __CrestLoad(11651, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(11650, (unsigned long )0, (long long )0);
        __CrestApply2(11649, 12, (long long )(myrow == 0));
# 191 "../HPL_pdlange.c"
        if (myrow == 0) {
          __CrestBranch(11652, 4597, 1);
          __CrestLoad(11654, (unsigned long )0, (long long )((int const )1));
          __CrestLoad(11655, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
          __CrestLoad(11656, (unsigned long )0, (long long )((int const )0));
          __CrestLoad(11657, (unsigned long )(& Rcomm), (long long )Rcomm);
# 192 "../HPL_pdlange.c"
          HPL_reduce((void *)(& v0), (int const )1, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                                  void const * ,
                                                                                                  void * ,
                                                                                                  HPL_T_TYPE const ))(& HPL_max),
                     (int const )0, Rcomm);
          __CrestClearStack(11658);
        } else {
          __CrestBranch(11653, 4598, 0);

        }
        }
      } else {
        __CrestBranch(11580, 4599, 0);
        {
        __CrestLoad(11661, (unsigned long )(& NORM), (long long )NORM);
        __CrestLoad(11660, (unsigned long )0, (long long )802U);
        __CrestApply2(11659, 12, (long long )((unsigned int const )NORM == 802U));
# 195 "../HPL_pdlange.c"
        if ((unsigned int const )NORM == 802U) {
          __CrestBranch(11662, 4600, 1);
          {
          __CrestLoad(11666, (unsigned long )(& mp), (long long )mp);
          __CrestLoad(11665, (unsigned long )0, (long long )0);
          __CrestApply2(11664, 14, (long long )(mp > 0));
# 200 "../HPL_pdlange.c"
          if (mp > 0) {
            __CrestBranch(11667, 4601, 1);
            __CrestLoad(11671, (unsigned long )(& mp), (long long )mp);
            __CrestLoad(11670, (unsigned long )0, (long long )sizeof(double ));
            __CrestApply2(11669, 2, (long long )((unsigned long )mp * sizeof(double )));
# 202 "../HPL_pdlange.c"
            tmp___5 = malloc((unsigned long )mp * sizeof(double ));
            __CrestClearStack(11672);
# 202 "../HPL_pdlange.c"
            work = (double *)tmp___5;
            {
            __CrestLoad(11675, (unsigned long )(& work), (long long )((unsigned long )work));
            __CrestLoad(11674, (unsigned long )0, (long long )((unsigned long )((void *)0)));
            __CrestApply2(11673, 12, (long long )((unsigned long )work == (unsigned long )((void *)0)));
# 203 "../HPL_pdlange.c"
            if ((unsigned long )work == (unsigned long )((void *)0)) {
              __CrestBranch(11676, 4603, 1);
              __CrestLoad(11678, (unsigned long )0, (long long )204);
# 204 "../HPL_pdlange.c"
              HPL_pabort(204, "HPL_pdlange", "Memory allocation failed");
              __CrestClearStack(11679);
            } else {
              __CrestBranch(11677, 4604, 0);

            }
            }
            __CrestLoad(11680, (unsigned long )0, (long long )0);
            __CrestStore(11681, (unsigned long )(& ii));
# 206 "../HPL_pdlange.c"
            ii = 0;
            {
# 206 "../HPL_pdlange.c"
            while (1) {
              while_continue___3: ;
              {
              __CrestLoad(11684, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11683, (unsigned long )(& mp), (long long )mp);
              __CrestApply2(11682, 16, (long long )(ii < mp));
# 206 "../HPL_pdlange.c"
              if (ii < mp) {
                __CrestBranch(11685, 4610, 1);

              } else {
                __CrestBranch(11686, 4611, 0);
# 206 "../HPL_pdlange.c"
                goto while_break___3;
              }
              }
# 206 "../HPL_pdlange.c"
              mem_45 = work + ii;
# 206 "../HPL_pdlange.c"
              *mem_45 = 0.0;
              __CrestLoad(11689, (unsigned long )(& ii), (long long )ii);
              __CrestLoad(11688, (unsigned long )0, (long long )1);
              __CrestApply2(11687, 0, (long long )(ii + 1));
              __CrestStore(11690, (unsigned long )(& ii));
# 206 "../HPL_pdlange.c"
              ii ++;
            }
            while_break___3: ;
            }
            __CrestLoad(11691, (unsigned long )0, (long long )0);
            __CrestStore(11692, (unsigned long )(& jj));
# 208 "../HPL_pdlange.c"
            jj = 0;
            {
# 208 "../HPL_pdlange.c"
            while (1) {
              while_continue___4: ;
              {
              __CrestLoad(11695, (unsigned long )(& jj), (long long )jj);
              __CrestLoad(11694, (unsigned long )(& nq), (long long )nq);
              __CrestApply2(11693, 16, (long long )(jj < nq));
# 208 "../HPL_pdlange.c"
              if (jj < nq) {
                __CrestBranch(11696, 4619, 1);

              } else {
                __CrestBranch(11697, 4620, 0);
# 208 "../HPL_pdlange.c"
                goto while_break___4;
              }
              }
              __CrestLoad(11698, (unsigned long )0, (long long )0);
              __CrestStore(11699, (unsigned long )(& ii));
# 210 "../HPL_pdlange.c"
              ii = 0;
              {
# 210 "../HPL_pdlange.c"
              while (1) {
                while_continue___5: ;
                {
                __CrestLoad(11702, (unsigned long )(& ii), (long long )ii);
                __CrestLoad(11701, (unsigned long )(& mp), (long long )mp);
                __CrestApply2(11700, 16, (long long )(ii < mp));
# 210 "../HPL_pdlange.c"
                if (ii < mp) {
                  __CrestBranch(11703, 4626, 1);

                } else {
                  __CrestBranch(11704, 4627, 0);
# 210 "../HPL_pdlange.c"
                  goto while_break___5;
                }
                }
                {
                __CrestLoad(11707, (unsigned long )A, (long long )*A);
                __CrestLoad(11706, (unsigned long )0, (long long )((double const )0));
                __CrestApply2(11705, 16, (long long )(*A < (double const )0));
# 211 "../HPL_pdlange.c"
                if (*A < (double const )0) {
                  __CrestBranch(11708, 4629, 1);
# 211 "../HPL_pdlange.c"
                  tmp___6 = (double )(- *A);
                } else {
                  __CrestBranch(11709, 4630, 0);
# 211 "../HPL_pdlange.c"
                  tmp___6 = (double )*A;
                }
                }
# 211 "../HPL_pdlange.c"
                mem_46 = work + ii;
# 211 "../HPL_pdlange.c"
                mem_47 = work + ii;
# 211 "../HPL_pdlange.c"
                *mem_46 = *mem_47 + tmp___6;
# 211 "../HPL_pdlange.c"
                A ++;
                __CrestLoad(11712, (unsigned long )(& ii), (long long )ii);
                __CrestLoad(11711, (unsigned long )0, (long long )1);
                __CrestApply2(11710, 0, (long long )(ii + 1));
                __CrestStore(11713, (unsigned long )(& ii));
# 210 "../HPL_pdlange.c"
                ii ++;
              }
              while_break___5: ;
              }
# 212 "../HPL_pdlange.c"
              A += LDA - (int const )mp;
              __CrestLoad(11716, (unsigned long )(& jj), (long long )jj);
              __CrestLoad(11715, (unsigned long )0, (long long )1);
              __CrestApply2(11714, 0, (long long )(jj + 1));
              __CrestStore(11717, (unsigned long )(& jj));
# 208 "../HPL_pdlange.c"
              jj ++;
            }
            while_break___4: ;
            }
            __CrestLoad(11718, (unsigned long )(& mp), (long long )mp);
            __CrestLoad(11719, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
            __CrestLoad(11720, (unsigned long )0, (long long )((int const )0));
            __CrestLoad(11721, (unsigned long )(& Rcomm), (long long )Rcomm);
# 217 "../HPL_pdlange.c"
            HPL_reduce((void *)work, (int const )mp, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                                   void const * ,
                                                                                                   void * ,
                                                                                                   HPL_T_TYPE const ))(& HPL_sum),
                       (int const )0, Rcomm);
            __CrestClearStack(11722);
            {
            __CrestLoad(11725, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(11724, (unsigned long )0, (long long )0);
            __CrestApply2(11723, 12, (long long )(mycol == 0));
# 222 "../HPL_pdlange.c"
            if (mycol == 0) {
              __CrestBranch(11726, 4637, 1);
              __CrestLoad(11728, (unsigned long )(& mp), (long long )mp);
              __CrestLoad(11729, (unsigned long )0, (long long )((int const )1));
# 223 "../HPL_pdlange.c"
              tmp___7 = cblas_idamax((int const )mp, (double const *)work, (int const )1);
              __CrestHandleReturn(11731, (long long )tmp___7);
              __CrestStore(11730, (unsigned long )(& tmp___7));
# 223 "../HPL_pdlange.c"
              mem_48 = work + tmp___7;
# 223 "../HPL_pdlange.c"
              v0 = *mem_48;
              {
              __CrestLoad(11734, (unsigned long )(& v0), (long long )v0);
              __CrestLoad(11733, (unsigned long )0, (long long )((double )0));
              __CrestApply2(11732, 16, (long long )(v0 < (double )0));
# 223 "../HPL_pdlange.c"
              if (v0 < (double )0) {
                __CrestBranch(11735, 4639, 1);
# 223 "../HPL_pdlange.c"
                v0 = - v0;
              } else {
                __CrestBranch(11736, 4640, 0);
# 223 "../HPL_pdlange.c"
                v0 = v0;
              }
              }
            } else {
              __CrestBranch(11727, 4641, 0);

            }
            }
            {
            __CrestLoad(11739, (unsigned long )(& work), (long long )((unsigned long )work));
            __CrestLoad(11738, (unsigned long )0, (long long )0);
            __CrestApply2(11737, 13, (long long )(work != 0));
# 224 "../HPL_pdlange.c"
            if (work != 0) {
              __CrestBranch(11740, 4643, 1);
# 224 "../HPL_pdlange.c"
              free((void *)work);
              __CrestClearStack(11742);
            } else {
              __CrestBranch(11741, 4644, 0);

            }
            }
          } else {
            __CrestBranch(11668, 4645, 0);

          }
          }
          {
          __CrestLoad(11745, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(11744, (unsigned long )0, (long long )0);
          __CrestApply2(11743, 12, (long long )(mycol == 0));
# 229 "../HPL_pdlange.c"
          if (mycol == 0) {
            __CrestBranch(11746, 4647, 1);
            __CrestLoad(11748, (unsigned long )0, (long long )((int const )1));
            __CrestLoad(11749, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
            __CrestLoad(11750, (unsigned long )0, (long long )((int const )0));
            __CrestLoad(11751, (unsigned long )(& Ccomm), (long long )Ccomm);
# 230 "../HPL_pdlange.c"
            HPL_reduce((void *)(& v0), (int const )1, (HPL_T_TYPE const )101,
                       (void (* const )(int const , void const * , void * ,
                                         HPL_T_TYPE const ))(& HPL_max), (int const )0,
                       Ccomm);
            __CrestClearStack(11752);
          } else {
            __CrestBranch(11747, 4648, 0);

          }
          }
        } else {
          __CrestBranch(11663, 4649, 0);

        }
        }
      }
      }
    }
    }
  }
  }
  __CrestLoad(11753, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(11754, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
  __CrestLoad(11755, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(11756, (unsigned long )(& Acomm), (long long )Acomm);
# 236 "../HPL_pdlange.c"
  HPL_broadcast((void *)(& v0), (int const )1, (HPL_T_TYPE const )101, (int const )0,
                Acomm);
  __CrestClearStack(11757);
# 238 "../HPL_pdlange.c"
  __retres49 = v0;
  return_label:
  {
  __CrestReturn(11758);
# 53 "../HPL_pdlange.c"
  return (__retres49);
  }
}
}
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 78 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocmax(HPL_T_panel *PANEL , int const N , int const II , int const JJ ,
                 double *WORK ) ;
# 53 "../HPL_dlocmax.c"
void HPL_dlocmax(HPL_T_panel *PANEL , int const N , int const II , int const JJ ,
                 double *WORK )
{
  double *A ;
  int kk ;
  int igindx ;
  int ilindx ;
  int myrow ;
  int nb ;
  int nprow ;
  double tmp ;
  double tmp___0 ;
  struct HPL_S_grid *mem_15 ;
  struct HPL_S_grid *mem_16 ;
  double *mem_17 ;
  double *mem_18 ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;
  double *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(11762, 77);
  __CrestStore(11761, (unsigned long )(& JJ));
  __CrestStore(11760, (unsigned long )(& II));
  __CrestStore(11759, (unsigned long )(& N));
  {
  __CrestLoad(11765, (unsigned long )(& N), (long long )N);
  __CrestLoad(11764, (unsigned long )0, (long long )0);
  __CrestApply2(11763, 14, (long long )(N > 0));
# 119 "../HPL_dlocmax.c"
  if (N > 0) {
    __CrestBranch(11766, 4654, 1);
# 121 "../HPL_dlocmax.c"
    A = (PANEL->A + II) + JJ * (int const )PANEL->lda;
# 122 "../HPL_dlocmax.c"
    mem_15 = PANEL->grid;
    __CrestLoad(11768, (unsigned long )(& mem_15->myrow), (long long )mem_15->myrow);
    __CrestStore(11769, (unsigned long )(& myrow));
# 122 "../HPL_dlocmax.c"
    myrow = mem_15->myrow;
# 123 "../HPL_dlocmax.c"
    mem_16 = PANEL->grid;
    __CrestLoad(11770, (unsigned long )(& mem_16->nprow), (long long )mem_16->nprow);
    __CrestStore(11771, (unsigned long )(& nprow));
# 123 "../HPL_dlocmax.c"
    nprow = mem_16->nprow;
    __CrestLoad(11772, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
    __CrestStore(11773, (unsigned long )(& nb));
# 124 "../HPL_dlocmax.c"
    nb = PANEL->nb;
    __CrestLoad(11774, (unsigned long )(& N), (long long )N);
    __CrestLoad(11775, (unsigned long )0, (long long )((int const )1));
# 125 "../HPL_dlocmax.c"
    ilindx = cblas_idamax(N, (double const *)A, (int const )1);
    __CrestHandleReturn(11777, (long long )ilindx);
    __CrestStore(11776, (unsigned long )(& ilindx));
    __CrestLoad(11782, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
    __CrestLoad(11781, (unsigned long )(& II), (long long )II);
    __CrestApply2(11780, 0, (long long )(PANEL->ii + (int )II));
    __CrestLoad(11779, (unsigned long )(& ilindx), (long long )ilindx);
    __CrestApply2(11778, 0, (long long )((PANEL->ii + (int )II) + ilindx));
    __CrestStore(11783, (unsigned long )(& kk));
# 125 "../HPL_dlocmax.c"
    kk = (PANEL->ii + (int )II) + ilindx;
    {
    __CrestLoad(11786, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(11785, (unsigned long )0, (long long )1);
    __CrestApply2(11784, 14, (long long )(nprow > 1));
# 126 "../HPL_dlocmax.c"
    if (nprow > 1) {
      __CrestBranch(11787, 4656, 1);
      {
      __CrestLoad(11791, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(11790, (unsigned long )0, (long long )0);
      __CrestApply2(11789, 12, (long long )(myrow == 0));
# 126 "../HPL_dlocmax.c"
      if (myrow == 0) {
        __CrestBranch(11792, 4657, 1);
        {
        __CrestLoad(11796, (unsigned long )(& kk), (long long )kk);
        __CrestLoad(11795, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(11794, 16, (long long )(kk < nb));
# 126 "../HPL_dlocmax.c"
        if (kk < nb) {
          __CrestBranch(11797, 4658, 1);
          __CrestLoad(11799, (unsigned long )(& kk), (long long )kk);
          __CrestStore(11800, (unsigned long )(& igindx));
# 126 "../HPL_dlocmax.c"
          igindx = kk;
        } else {
          __CrestBranch(11798, 4659, 0);
          __CrestLoad(11815, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11814, (unsigned long )(& nb), (long long )nb);
          __CrestLoad(11813, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(11812, (unsigned long )0, (long long )1);
          __CrestApply2(11811, 1, (long long )(nprow - 1));
          __CrestApply2(11810, 2, (long long )(nb * (nprow - 1)));
          __CrestLoad(11809, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11808, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11807, 1, (long long )(kk - nb));
          __CrestLoad(11806, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11805, 3, (long long )((kk - nb) / nb));
          __CrestLoad(11804, (unsigned long )0, (long long )1);
          __CrestApply2(11803, 0, (long long )((kk - nb) / nb + 1));
          __CrestApply2(11802, 2, (long long )((nb * (nprow - 1)) * ((kk - nb) / nb + 1)));
          __CrestApply2(11801, 0, (long long )(kk + (nb * (nprow - 1)) * ((kk - nb) / nb + 1)));
          __CrestStore(11816, (unsigned long )(& igindx));
# 126 "../HPL_dlocmax.c"
          igindx = kk + (nb * (nprow - 1)) * ((kk - nb) / nb + 1);
        }
        }
      } else {
        __CrestBranch(11793, 4660, 0);
        {
        __CrestLoad(11819, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(11818, (unsigned long )0, (long long )0);
        __CrestApply2(11817, 16, (long long )(myrow < 0));
# 126 "../HPL_dlocmax.c"
        if (myrow < 0) {
          __CrestBranch(11820, 4661, 1);
          __CrestLoad(11840, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11839, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11838, 0, (long long )(kk + nb));
          __CrestLoad(11837, (unsigned long )(& nb), (long long )nb);
          __CrestLoad(11836, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(11835, (unsigned long )0, (long long )1);
          __CrestApply2(11834, 1, (long long )(nprow - 1));
          __CrestLoad(11833, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11832, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11831, 3, (long long )(kk / nb));
          __CrestApply2(11830, 2, (long long )((nprow - 1) * (kk / nb)));
          __CrestLoad(11829, (unsigned long )(& myrow), (long long )myrow);
          __CrestApply2(11828, 0, (long long )((nprow - 1) * (kk / nb) + myrow));
          __CrestLoad(11827, (unsigned long )0, (long long )1);
          __CrestApply2(11826, 1, (long long )(((nprow - 1) * (kk / nb) + myrow) - 1));
          __CrestLoad(11825, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(11824, 0, (long long )((((nprow - 1) * (kk / nb) + myrow) - 1) + nprow));
          __CrestApply2(11823, 2, (long long )(nb * ((((nprow - 1) * (kk / nb) + myrow) - 1) + nprow)));
          __CrestApply2(11822, 0, (long long )((kk + nb) + nb * ((((nprow - 1) * (kk / nb) + myrow) - 1) + nprow)));
          __CrestStore(11841, (unsigned long )(& igindx));
# 126 "../HPL_dlocmax.c"
          igindx = (kk + nb) + nb * ((((nprow - 1) * (kk / nb) + myrow) - 1) + nprow);
        } else {
          __CrestBranch(11821, 4662, 0);
          __CrestLoad(11858, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11857, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11856, 0, (long long )(kk + nb));
          __CrestLoad(11855, (unsigned long )(& nb), (long long )nb);
          __CrestLoad(11854, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(11853, (unsigned long )0, (long long )1);
          __CrestApply2(11852, 1, (long long )(nprow - 1));
          __CrestLoad(11851, (unsigned long )(& kk), (long long )kk);
          __CrestLoad(11850, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(11849, 3, (long long )(kk / nb));
          __CrestApply2(11848, 2, (long long )((nprow - 1) * (kk / nb)));
          __CrestLoad(11847, (unsigned long )(& myrow), (long long )myrow);
          __CrestApply2(11846, 0, (long long )((nprow - 1) * (kk / nb) + myrow));
          __CrestLoad(11845, (unsigned long )0, (long long )1);
          __CrestApply2(11844, 1, (long long )(((nprow - 1) * (kk / nb) + myrow) - 1));
          __CrestApply2(11843, 2, (long long )(nb * (((nprow - 1) * (kk / nb) + myrow) - 1)));
          __CrestApply2(11842, 0, (long long )((kk + nb) + nb * (((nprow - 1) * (kk / nb) + myrow) - 1)));
          __CrestStore(11859, (unsigned long )(& igindx));
# 126 "../HPL_dlocmax.c"
          igindx = (kk + nb) + nb * (((nprow - 1) * (kk / nb) + myrow) - 1);
        }
        }
      }
      }
    } else {
      __CrestBranch(11788, 4663, 0);
      __CrestLoad(11860, (unsigned long )(& kk), (long long )kk);
      __CrestStore(11861, (unsigned long )(& igindx));
# 126 "../HPL_dlocmax.c"
      igindx = kk;
    }
    }
# 133 "../HPL_dlocmax.c"
    mem_17 = WORK + 0;
# 133 "../HPL_dlocmax.c"
    mem_18 = A + ilindx;
# 133 "../HPL_dlocmax.c"
    *mem_17 = *mem_18;
# 133 "../HPL_dlocmax.c"
    mem_19 = WORK + 1;
# 133 "../HPL_dlocmax.c"
    *mem_19 = (double )ilindx;
# 134 "../HPL_dlocmax.c"
    mem_20 = WORK + 2;
# 134 "../HPL_dlocmax.c"
    *mem_20 = (double )igindx;
# 134 "../HPL_dlocmax.c"
    mem_21 = WORK + 3;
# 134 "../HPL_dlocmax.c"
    *mem_21 = (double )myrow;
  } else {
    __CrestBranch(11767, 4665, 0);
# 143 "../HPL_dlocmax.c"
    tmp___0 = 0.0;
# 143 "../HPL_dlocmax.c"
    mem_22 = WORK + 2;
# 143 "../HPL_dlocmax.c"
    *mem_22 = tmp___0;
# 143 "../HPL_dlocmax.c"
    tmp = tmp___0;
# 143 "../HPL_dlocmax.c"
    mem_23 = WORK + 1;
# 143 "../HPL_dlocmax.c"
    *mem_23 = tmp;
# 143 "../HPL_dlocmax.c"
    mem_24 = WORK + 0;
# 143 "../HPL_dlocmax.c"
    *mem_24 = tmp;
# 144 "../HPL_dlocmax.c"
    mem_25 = WORK + 3;
# 144 "../HPL_dlocmax.c"
    mem_26 = PANEL->grid;
# 144 "../HPL_dlocmax.c"
    *mem_25 = (double )mem_26->nprow;
  }
  }

  {
  __CrestReturn(11862);
# 53 "../HPL_dlocmax.c"
  return;
  }
}
}
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 87 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocswpN(HPL_T_panel *PANEL , int const II , int const JJ , double *WORK ) ;
# 60 "../HPL_dlocswpN.c"
void HPL_dlocswpN(HPL_T_panel *PANEL , int const II , int const JJ , double *WORK )
{
  double gmax ;
  double *A1 ;
  double *A2 ;
  double *L ;
  double *Wr0 ;
  double *Wmx ;
  int ilindx ;
  int lda ;
  int myrow ;
  int n0 ;
  int nr ;
  int nu ;
  int i ;
  double tmp ;
  double tmp___0 ;
  double tmp___1 ;
  double tmp___2 ;
  double tmp___3 ;
  double tmp___4 ;
  double tmp___5 ;
  double tmp___6 ;
  double tmp___7 ;
  double tmp___8 ;
  double tmp___9 ;
  double tmp___10 ;
  double tmp___11 ;
  double tmp___12 ;
  double tmp___13 ;
  double tmp___14 ;
  double tmp___15 ;
  double tmp___16 ;
  double tmp___17 ;
  double tmp___18 ;
  double tmp___19 ;
  double tmp___20 ;
  double tmp___21 ;
  double tmp___22 ;
  double tmp___23 ;
  double tmp___24 ;
  double tmp___25 ;
  double tmp___26 ;
  double tmp___27 ;
  double tmp___28 ;
  double tmp___29 ;
  double tmp___30 ;
  double tmp___31 ;
  double tmp___32 ;
  double tmp___33 ;
  double tmp___34 ;
  double tmp___35 ;
  double tmp___36 ;
  double tmp___37 ;
  double tmp___38 ;
  double tmp___39 ;
  double tmp___40 ;
  double tmp___41 ;
  double tmp___42 ;
  double tmp___43 ;
  double tmp___44 ;
  double tmp___45 ;
  double tmp___46 ;
  double tmp___47 ;
  double tmp___48 ;
  double tmp___49 ;
  double tmp___50 ;
  double tmp___51 ;
  double tmp___52 ;
  double tmp___53 ;
  double tmp___54 ;
  double tmp___55 ;
  double tmp___56 ;
  double tmp___57 ;
  double tmp___58 ;
  double tmp___59 ;
  double tmp___60 ;
  double tmp___61 ;
  double tmp___62 ;
  double tmp___63 ;
  double tmp___64 ;
  struct HPL_S_grid *mem_84 ;
  double *mem_85 ;
  double *mem_86 ;
  double *mem_87 ;
  double *mem_88 ;
  double *mem_89 ;
  double *mem_90 ;
  double *mem_91 ;
  double *mem_92 ;
  double *mem_93 ;
  double *mem_94 ;
  double *mem_95 ;
  double *mem_96 ;
  double *mem_97 ;
  double *mem_98 ;
  double *mem_99 ;
  double *mem_100 ;
  double *mem_101 ;
  double *mem_102 ;
  double *mem_103 ;
  double *mem_104 ;
  double *mem_105 ;
  double *mem_106 ;
  double *mem_107 ;
  double *mem_108 ;
  double *mem_109 ;
  double *mem_110 ;
  double *mem_111 ;
  double *mem_112 ;
  double *mem_113 ;
  double *mem_114 ;
  double *mem_115 ;
  double *mem_116 ;
  double *mem_117 ;
  double *mem_118 ;
  double *mem_119 ;
  double *mem_120 ;
  double *mem_121 ;
  double *mem_122 ;
  double *mem_123 ;
  double *mem_124 ;
  double *mem_125 ;
  double *mem_126 ;
  double *mem_127 ;
  double *mem_128 ;
  double *mem_129 ;
  double *mem_130 ;
  double *mem_131 ;
  double *mem_132 ;
  double *mem_133 ;
  double *mem_134 ;
  double *mem_135 ;
  double *mem_136 ;
  double *mem_137 ;
  double *mem_138 ;
  double *mem_139 ;
  double *mem_140 ;
  double *mem_141 ;
  double *mem_142 ;
  double *mem_143 ;
  double *mem_144 ;
  double *mem_145 ;
  double *mem_146 ;
  double *mem_147 ;
  double *mem_148 ;
  double *mem_149 ;
  double *mem_150 ;
  double *mem_151 ;
  double *mem_152 ;
  double *mem_153 ;
  double *mem_154 ;
  double *mem_155 ;
  double *mem_156 ;
  double *mem_157 ;
  double *mem_158 ;
  double *mem_159 ;
  double *mem_160 ;
  double *mem_161 ;
  double *mem_162 ;
  double *mem_163 ;
  double *mem_164 ;
  double *mem_165 ;
  double *mem_166 ;
  double *mem_167 ;
  double *mem_168 ;
  double *mem_169 ;
  double *mem_170 ;
  double *mem_171 ;
  double *mem_172 ;
  double *mem_173 ;
  double *mem_174 ;
  double *mem_175 ;
  double *mem_176 ;
  double *mem_177 ;
  double *mem_178 ;
  double *mem_179 ;
  double *mem_180 ;
  double *mem_181 ;
  double *mem_182 ;
  double *mem_183 ;
  double *mem_184 ;
  double *mem_185 ;
  double *mem_186 ;
  double *mem_187 ;
  double *mem_188 ;
  double *mem_189 ;
  double *mem_190 ;
  double *mem_191 ;
  double *mem_192 ;
  double *mem_193 ;
  double *mem_194 ;
  double *mem_195 ;
  double *mem_196 ;
  double *mem_197 ;
  double *mem_198 ;
  double *mem_199 ;
  double *mem_200 ;
  double *mem_201 ;
  double *mem_202 ;
  double *mem_203 ;
  double *mem_204 ;
  double *mem_205 ;
  double *mem_206 ;
  double *mem_207 ;
  double *mem_208 ;
  double *mem_209 ;
  double *mem_210 ;
  double *mem_211 ;
  double *mem_212 ;
  double *mem_213 ;
  double *mem_214 ;
  double *mem_215 ;
  double *mem_216 ;
  double *mem_217 ;
  double *mem_218 ;
  double *mem_219 ;
  double *mem_220 ;
  double *mem_221 ;
  double *mem_222 ;
  double *mem_223 ;
  double *mem_224 ;
  double *mem_225 ;
  double *mem_226 ;
  double *mem_227 ;
  double *mem_228 ;
  double *mem_229 ;
  double *mem_230 ;
  double *mem_231 ;
  double *mem_232 ;
  double *mem_233 ;
  double *mem_234 ;
  double *mem_235 ;
  double *mem_236 ;
  double *mem_237 ;
  double *mem_238 ;
  double *mem_239 ;
  double *mem_240 ;
  double *mem_241 ;
  double *mem_242 ;
  double *mem_243 ;
  double *mem_244 ;
  double *mem_245 ;
  double *mem_246 ;
  double *mem_247 ;
  double *mem_248 ;
  double *mem_249 ;
  double *mem_250 ;
  double *mem_251 ;
  double *mem_252 ;
  double *mem_253 ;
  double *mem_254 ;
  double *mem_255 ;
  double *mem_256 ;
  double *mem_257 ;
  double *mem_258 ;
  double *mem_259 ;
  double *mem_260 ;
  double *mem_261 ;
  double *mem_262 ;
  double *mem_263 ;
  double *mem_264 ;
  double *mem_265 ;
  double *mem_266 ;
  double *mem_267 ;
  double *mem_268 ;
  double *mem_269 ;
  double *mem_270 ;
  double *mem_271 ;
  double *mem_272 ;
  double *mem_273 ;
  double *mem_274 ;
  double *mem_275 ;
  double *mem_276 ;
  double *mem_277 ;
  double *mem_278 ;
  double *mem_279 ;
  double *mem_280 ;
  double *mem_281 ;
  double *mem_282 ;
  double *mem_283 ;
  double *mem_284 ;
  double *mem_285 ;
  double *mem_286 ;
  double *mem_287 ;
  double *mem_288 ;
  double *mem_289 ;
  double *mem_290 ;
  double *mem_291 ;
  double *mem_292 ;
  double *mem_293 ;
  double *mem_294 ;
  double *mem_295 ;
  double *mem_296 ;
  double *mem_297 ;
  double *mem_298 ;
  double *mem_299 ;
  double *mem_300 ;
  double *mem_301 ;
  double *mem_302 ;
  double *mem_303 ;
  double *mem_304 ;
  double *mem_305 ;
  double *mem_306 ;
  double *mem_307 ;
  double *mem_308 ;
  double *mem_309 ;
  double *mem_310 ;
  double *mem_311 ;
  double *mem_312 ;
  double *mem_313 ;
  double *mem_314 ;
  double *mem_315 ;
  double *mem_316 ;
  double *mem_317 ;
  double *mem_318 ;
  double *mem_319 ;
  double *mem_320 ;
  double *mem_321 ;
  double *mem_322 ;
  double *mem_323 ;
  double *mem_324 ;

  {
  __CrestCall(11865, 78);
  __CrestStore(11864, (unsigned long )(& JJ));
  __CrestStore(11863, (unsigned long )(& II));
# 121 "../HPL_dlocswpN.c"
  mem_84 = PANEL->grid;
  __CrestLoad(11866, (unsigned long )(& mem_84->myrow), (long long )mem_84->myrow);
  __CrestStore(11867, (unsigned long )(& myrow));
# 121 "../HPL_dlocswpN.c"
  myrow = mem_84->myrow;
  __CrestLoad(11868, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(11869, (unsigned long )(& n0));
# 121 "../HPL_dlocswpN.c"
  n0 = PANEL->jb;
  __CrestLoad(11870, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(11871, (unsigned long )(& lda));
# 121 "../HPL_dlocswpN.c"
  lda = PANEL->lda;
# 123 "../HPL_dlocswpN.c"
  Wmx = WORK + 4;
# 123 "../HPL_dlocswpN.c"
  Wr0 = Wmx + n0;
# 123 "../HPL_dlocswpN.c"
  mem_85 = WORK + 0;
# 123 "../HPL_dlocswpN.c"
  gmax = *mem_85;
# 123 "../HPL_dlocswpN.c"
  mem_86 = Wmx + JJ;
# 123 "../HPL_dlocswpN.c"
  *mem_86 = gmax;
  __CrestLoad(11876, (unsigned long )(& n0), (long long )n0);
  __CrestLoad(11875, (unsigned long )0, (long long )5);
  __CrestApply2(11874, 9, (long long )((unsigned int )n0 >> 5));
  __CrestLoad(11873, (unsigned long )0, (long long )5);
  __CrestApply2(11872, 8, (long long )(((unsigned int )n0 >> 5) << 5));
  __CrestStore(11877, (unsigned long )(& nu));
# 124 "../HPL_dlocswpN.c"
  nu = (int )(((unsigned int )n0 >> 5) << 5);
  __CrestLoad(11880, (unsigned long )(& n0), (long long )n0);
  __CrestLoad(11879, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(11878, 1, (long long )(n0 - nu));
  __CrestStore(11881, (unsigned long )(& nr));
# 126 "../HPL_dlocswpN.c"
  nr = n0 - nu;
# 130 "../HPL_dlocswpN.c"
  L = (PANEL->L1 + JJ) + 0;
  {
  __CrestLoad(11884, (unsigned long )(& gmax), (long long )gmax);
  __CrestLoad(11883, (unsigned long )0, (long long )0.0);
  __CrestApply2(11882, 13, (long long )(gmax != 0.0));
# 134 "../HPL_dlocswpN.c"
  if (gmax != 0.0) {
    __CrestBranch(11885, 4670, 1);
    {
    __CrestLoad(11889, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(11888, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(11887, 12, (long long )(myrow == PANEL->prow));
# 139 "../HPL_dlocswpN.c"
    if (myrow == PANEL->prow) {
      __CrestBranch(11890, 4671, 1);
      {
# 144 "../HPL_dlocswpN.c"
      mem_87 = WORK + 3;
      {
      __CrestLoad(11894, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(11893, (unsigned long )mem_87, (long long )*mem_87);
      __CrestApply2(11892, 12, (long long )(myrow == (int )*mem_87));
# 144 "../HPL_dlocswpN.c"
      if (myrow == (int )*mem_87) {
        __CrestBranch(11895, 4674, 1);
# 149 "../HPL_dlocswpN.c"
        mem_88 = WORK + 1;
        __CrestLoad(11897, (unsigned long )mem_88, (long long )*mem_88);
        __CrestStore(11898, (unsigned long )(& ilindx));
# 149 "../HPL_dlocswpN.c"
        ilindx = (int )*mem_88;
        {
        __CrestLoad(11901, (unsigned long )(& ilindx), (long long )ilindx);
        __CrestLoad(11900, (unsigned long )0, (long long )0);
        __CrestApply2(11899, 13, (long long )(ilindx != 0));
# 149 "../HPL_dlocswpN.c"
        if (ilindx != 0) {
          __CrestBranch(11902, 4676, 1);
# 154 "../HPL_dlocswpN.c"
          A1 = (PANEL->A + II) + 0;
# 155 "../HPL_dlocswpN.c"
          A2 = (A1 + ilindx) + 0;
          __CrestLoad(11904, (unsigned long )0, (long long )0);
          __CrestStore(11905, (unsigned long )(& i));
# 157 "../HPL_dlocswpN.c"
          i = 0;
          {
# 157 "../HPL_dlocswpN.c"
          while (1) {
            while_continue: ;
            {
            __CrestLoad(11908, (unsigned long )(& i), (long long )i);
            __CrestLoad(11907, (unsigned long )(& nu), (long long )nu);
            __CrestApply2(11906, 16, (long long )(i < nu));
# 157 "../HPL_dlocswpN.c"
            if (i < nu) {
              __CrestBranch(11909, 4681, 1);

            } else {
              __CrestBranch(11910, 4682, 0);
# 157 "../HPL_dlocswpN.c"
              goto while_break;
            }
            }
# 160 "../HPL_dlocswpN.c"
            mem_89 = Wmx + 0;
# 160 "../HPL_dlocswpN.c"
            tmp = *mem_89;
# 160 "../HPL_dlocswpN.c"
            *A1 = tmp;
# 160 "../HPL_dlocswpN.c"
            *L = tmp;
# 160 "../HPL_dlocswpN.c"
            mem_90 = Wr0 + 0;
# 160 "../HPL_dlocswpN.c"
            *A2 = *mem_90;
# 160 "../HPL_dlocswpN.c"
            L += n0;
# 160 "../HPL_dlocswpN.c"
            A1 += lda;
# 160 "../HPL_dlocswpN.c"
            A2 += lda;
# 162 "../HPL_dlocswpN.c"
            mem_91 = Wmx + 1;
# 162 "../HPL_dlocswpN.c"
            tmp___0 = *mem_91;
# 162 "../HPL_dlocswpN.c"
            *A1 = tmp___0;
# 162 "../HPL_dlocswpN.c"
            *L = tmp___0;
# 162 "../HPL_dlocswpN.c"
            mem_92 = Wr0 + 1;
# 162 "../HPL_dlocswpN.c"
            *A2 = *mem_92;
# 162 "../HPL_dlocswpN.c"
            L += n0;
# 162 "../HPL_dlocswpN.c"
            A1 += lda;
# 162 "../HPL_dlocswpN.c"
            A2 += lda;
# 165 "../HPL_dlocswpN.c"
            mem_93 = Wmx + 2;
# 165 "../HPL_dlocswpN.c"
            tmp___1 = *mem_93;
# 165 "../HPL_dlocswpN.c"
            *A1 = tmp___1;
# 165 "../HPL_dlocswpN.c"
            *L = tmp___1;
# 165 "../HPL_dlocswpN.c"
            mem_94 = Wr0 + 2;
# 165 "../HPL_dlocswpN.c"
            *A2 = *mem_94;
# 165 "../HPL_dlocswpN.c"
            L += n0;
# 165 "../HPL_dlocswpN.c"
            A1 += lda;
# 165 "../HPL_dlocswpN.c"
            A2 += lda;
# 166 "../HPL_dlocswpN.c"
            mem_95 = Wmx + 3;
# 166 "../HPL_dlocswpN.c"
            tmp___2 = *mem_95;
# 166 "../HPL_dlocswpN.c"
            *A1 = tmp___2;
# 166 "../HPL_dlocswpN.c"
            *L = tmp___2;
# 166 "../HPL_dlocswpN.c"
            mem_96 = Wr0 + 3;
# 166 "../HPL_dlocswpN.c"
            *A2 = *mem_96;
# 166 "../HPL_dlocswpN.c"
            L += n0;
# 166 "../HPL_dlocswpN.c"
            A1 += lda;
# 166 "../HPL_dlocswpN.c"
            A2 += lda;
# 169 "../HPL_dlocswpN.c"
            mem_97 = Wmx + 4;
# 169 "../HPL_dlocswpN.c"
            tmp___3 = *mem_97;
# 169 "../HPL_dlocswpN.c"
            *A1 = tmp___3;
# 169 "../HPL_dlocswpN.c"
            *L = tmp___3;
# 169 "../HPL_dlocswpN.c"
            mem_98 = Wr0 + 4;
# 169 "../HPL_dlocswpN.c"
            *A2 = *mem_98;
# 169 "../HPL_dlocswpN.c"
            L += n0;
# 169 "../HPL_dlocswpN.c"
            A1 += lda;
# 169 "../HPL_dlocswpN.c"
            A2 += lda;
# 170 "../HPL_dlocswpN.c"
            mem_99 = Wmx + 5;
# 170 "../HPL_dlocswpN.c"
            tmp___4 = *mem_99;
# 170 "../HPL_dlocswpN.c"
            *A1 = tmp___4;
# 170 "../HPL_dlocswpN.c"
            *L = tmp___4;
# 170 "../HPL_dlocswpN.c"
            mem_100 = Wr0 + 5;
# 170 "../HPL_dlocswpN.c"
            *A2 = *mem_100;
# 170 "../HPL_dlocswpN.c"
            L += n0;
# 170 "../HPL_dlocswpN.c"
            A1 += lda;
# 170 "../HPL_dlocswpN.c"
            A2 += lda;
# 171 "../HPL_dlocswpN.c"
            mem_101 = Wmx + 6;
# 171 "../HPL_dlocswpN.c"
            tmp___5 = *mem_101;
# 171 "../HPL_dlocswpN.c"
            *A1 = tmp___5;
# 171 "../HPL_dlocswpN.c"
            *L = tmp___5;
# 171 "../HPL_dlocswpN.c"
            mem_102 = Wr0 + 6;
# 171 "../HPL_dlocswpN.c"
            *A2 = *mem_102;
# 171 "../HPL_dlocswpN.c"
            L += n0;
# 171 "../HPL_dlocswpN.c"
            A1 += lda;
# 171 "../HPL_dlocswpN.c"
            A2 += lda;
# 172 "../HPL_dlocswpN.c"
            mem_103 = Wmx + 7;
# 172 "../HPL_dlocswpN.c"
            tmp___6 = *mem_103;
# 172 "../HPL_dlocswpN.c"
            *A1 = tmp___6;
# 172 "../HPL_dlocswpN.c"
            *L = tmp___6;
# 172 "../HPL_dlocswpN.c"
            mem_104 = Wr0 + 7;
# 172 "../HPL_dlocswpN.c"
            *A2 = *mem_104;
# 172 "../HPL_dlocswpN.c"
            L += n0;
# 172 "../HPL_dlocswpN.c"
            A1 += lda;
# 172 "../HPL_dlocswpN.c"
            A2 += lda;
# 175 "../HPL_dlocswpN.c"
            mem_105 = Wmx + 8;
# 175 "../HPL_dlocswpN.c"
            tmp___7 = *mem_105;
# 175 "../HPL_dlocswpN.c"
            *A1 = tmp___7;
# 175 "../HPL_dlocswpN.c"
            *L = tmp___7;
# 175 "../HPL_dlocswpN.c"
            mem_106 = Wr0 + 8;
# 175 "../HPL_dlocswpN.c"
            *A2 = *mem_106;
# 175 "../HPL_dlocswpN.c"
            L += n0;
# 175 "../HPL_dlocswpN.c"
            A1 += lda;
# 175 "../HPL_dlocswpN.c"
            A2 += lda;
# 176 "../HPL_dlocswpN.c"
            mem_107 = Wmx + 9;
# 176 "../HPL_dlocswpN.c"
            tmp___8 = *mem_107;
# 176 "../HPL_dlocswpN.c"
            *A1 = tmp___8;
# 176 "../HPL_dlocswpN.c"
            *L = tmp___8;
# 176 "../HPL_dlocswpN.c"
            mem_108 = Wr0 + 9;
# 176 "../HPL_dlocswpN.c"
            *A2 = *mem_108;
# 176 "../HPL_dlocswpN.c"
            L += n0;
# 176 "../HPL_dlocswpN.c"
            A1 += lda;
# 176 "../HPL_dlocswpN.c"
            A2 += lda;
# 177 "../HPL_dlocswpN.c"
            mem_109 = Wmx + 10;
# 177 "../HPL_dlocswpN.c"
            tmp___9 = *mem_109;
# 177 "../HPL_dlocswpN.c"
            *A1 = tmp___9;
# 177 "../HPL_dlocswpN.c"
            *L = tmp___9;
# 177 "../HPL_dlocswpN.c"
            mem_110 = Wr0 + 10;
# 177 "../HPL_dlocswpN.c"
            *A2 = *mem_110;
# 177 "../HPL_dlocswpN.c"
            L += n0;
# 177 "../HPL_dlocswpN.c"
            A1 += lda;
# 177 "../HPL_dlocswpN.c"
            A2 += lda;
# 178 "../HPL_dlocswpN.c"
            mem_111 = Wmx + 11;
# 178 "../HPL_dlocswpN.c"
            tmp___10 = *mem_111;
# 178 "../HPL_dlocswpN.c"
            *A1 = tmp___10;
# 178 "../HPL_dlocswpN.c"
            *L = tmp___10;
# 178 "../HPL_dlocswpN.c"
            mem_112 = Wr0 + 11;
# 178 "../HPL_dlocswpN.c"
            *A2 = *mem_112;
# 178 "../HPL_dlocswpN.c"
            L += n0;
# 178 "../HPL_dlocswpN.c"
            A1 += lda;
# 178 "../HPL_dlocswpN.c"
            A2 += lda;
# 179 "../HPL_dlocswpN.c"
            mem_113 = Wmx + 12;
# 179 "../HPL_dlocswpN.c"
            tmp___11 = *mem_113;
# 179 "../HPL_dlocswpN.c"
            *A1 = tmp___11;
# 179 "../HPL_dlocswpN.c"
            *L = tmp___11;
# 179 "../HPL_dlocswpN.c"
            mem_114 = Wr0 + 12;
# 179 "../HPL_dlocswpN.c"
            *A2 = *mem_114;
# 179 "../HPL_dlocswpN.c"
            L += n0;
# 179 "../HPL_dlocswpN.c"
            A1 += lda;
# 179 "../HPL_dlocswpN.c"
            A2 += lda;
# 180 "../HPL_dlocswpN.c"
            mem_115 = Wmx + 13;
# 180 "../HPL_dlocswpN.c"
            tmp___12 = *mem_115;
# 180 "../HPL_dlocswpN.c"
            *A1 = tmp___12;
# 180 "../HPL_dlocswpN.c"
            *L = tmp___12;
# 180 "../HPL_dlocswpN.c"
            mem_116 = Wr0 + 13;
# 180 "../HPL_dlocswpN.c"
            *A2 = *mem_116;
# 180 "../HPL_dlocswpN.c"
            L += n0;
# 180 "../HPL_dlocswpN.c"
            A1 += lda;
# 180 "../HPL_dlocswpN.c"
            A2 += lda;
# 181 "../HPL_dlocswpN.c"
            mem_117 = Wmx + 14;
# 181 "../HPL_dlocswpN.c"
            tmp___13 = *mem_117;
# 181 "../HPL_dlocswpN.c"
            *A1 = tmp___13;
# 181 "../HPL_dlocswpN.c"
            *L = tmp___13;
# 181 "../HPL_dlocswpN.c"
            mem_118 = Wr0 + 14;
# 181 "../HPL_dlocswpN.c"
            *A2 = *mem_118;
# 181 "../HPL_dlocswpN.c"
            L += n0;
# 181 "../HPL_dlocswpN.c"
            A1 += lda;
# 181 "../HPL_dlocswpN.c"
            A2 += lda;
# 182 "../HPL_dlocswpN.c"
            mem_119 = Wmx + 15;
# 182 "../HPL_dlocswpN.c"
            tmp___14 = *mem_119;
# 182 "../HPL_dlocswpN.c"
            *A1 = tmp___14;
# 182 "../HPL_dlocswpN.c"
            *L = tmp___14;
# 182 "../HPL_dlocswpN.c"
            mem_120 = Wr0 + 15;
# 182 "../HPL_dlocswpN.c"
            *A2 = *mem_120;
# 182 "../HPL_dlocswpN.c"
            L += n0;
# 182 "../HPL_dlocswpN.c"
            A1 += lda;
# 182 "../HPL_dlocswpN.c"
            A2 += lda;
# 185 "../HPL_dlocswpN.c"
            mem_121 = Wmx + 16;
# 185 "../HPL_dlocswpN.c"
            tmp___15 = *mem_121;
# 185 "../HPL_dlocswpN.c"
            *A1 = tmp___15;
# 185 "../HPL_dlocswpN.c"
            *L = tmp___15;
# 185 "../HPL_dlocswpN.c"
            mem_122 = Wr0 + 16;
# 185 "../HPL_dlocswpN.c"
            *A2 = *mem_122;
# 185 "../HPL_dlocswpN.c"
            L += n0;
# 185 "../HPL_dlocswpN.c"
            A1 += lda;
# 185 "../HPL_dlocswpN.c"
            A2 += lda;
# 186 "../HPL_dlocswpN.c"
            mem_123 = Wmx + 17;
# 186 "../HPL_dlocswpN.c"
            tmp___16 = *mem_123;
# 186 "../HPL_dlocswpN.c"
            *A1 = tmp___16;
# 186 "../HPL_dlocswpN.c"
            *L = tmp___16;
# 186 "../HPL_dlocswpN.c"
            mem_124 = Wr0 + 17;
# 186 "../HPL_dlocswpN.c"
            *A2 = *mem_124;
# 186 "../HPL_dlocswpN.c"
            L += n0;
# 186 "../HPL_dlocswpN.c"
            A1 += lda;
# 186 "../HPL_dlocswpN.c"
            A2 += lda;
# 187 "../HPL_dlocswpN.c"
            mem_125 = Wmx + 18;
# 187 "../HPL_dlocswpN.c"
            tmp___17 = *mem_125;
# 187 "../HPL_dlocswpN.c"
            *A1 = tmp___17;
# 187 "../HPL_dlocswpN.c"
            *L = tmp___17;
# 187 "../HPL_dlocswpN.c"
            mem_126 = Wr0 + 18;
# 187 "../HPL_dlocswpN.c"
            *A2 = *mem_126;
# 187 "../HPL_dlocswpN.c"
            L += n0;
# 187 "../HPL_dlocswpN.c"
            A1 += lda;
# 187 "../HPL_dlocswpN.c"
            A2 += lda;
# 188 "../HPL_dlocswpN.c"
            mem_127 = Wmx + 19;
# 188 "../HPL_dlocswpN.c"
            tmp___18 = *mem_127;
# 188 "../HPL_dlocswpN.c"
            *A1 = tmp___18;
# 188 "../HPL_dlocswpN.c"
            *L = tmp___18;
# 188 "../HPL_dlocswpN.c"
            mem_128 = Wr0 + 19;
# 188 "../HPL_dlocswpN.c"
            *A2 = *mem_128;
# 188 "../HPL_dlocswpN.c"
            L += n0;
# 188 "../HPL_dlocswpN.c"
            A1 += lda;
# 188 "../HPL_dlocswpN.c"
            A2 += lda;
# 189 "../HPL_dlocswpN.c"
            mem_129 = Wmx + 20;
# 189 "../HPL_dlocswpN.c"
            tmp___19 = *mem_129;
# 189 "../HPL_dlocswpN.c"
            *A1 = tmp___19;
# 189 "../HPL_dlocswpN.c"
            *L = tmp___19;
# 189 "../HPL_dlocswpN.c"
            mem_130 = Wr0 + 20;
# 189 "../HPL_dlocswpN.c"
            *A2 = *mem_130;
# 189 "../HPL_dlocswpN.c"
            L += n0;
# 189 "../HPL_dlocswpN.c"
            A1 += lda;
# 189 "../HPL_dlocswpN.c"
            A2 += lda;
# 190 "../HPL_dlocswpN.c"
            mem_131 = Wmx + 21;
# 190 "../HPL_dlocswpN.c"
            tmp___20 = *mem_131;
# 190 "../HPL_dlocswpN.c"
            *A1 = tmp___20;
# 190 "../HPL_dlocswpN.c"
            *L = tmp___20;
# 190 "../HPL_dlocswpN.c"
            mem_132 = Wr0 + 21;
# 190 "../HPL_dlocswpN.c"
            *A2 = *mem_132;
# 190 "../HPL_dlocswpN.c"
            L += n0;
# 190 "../HPL_dlocswpN.c"
            A1 += lda;
# 190 "../HPL_dlocswpN.c"
            A2 += lda;
# 191 "../HPL_dlocswpN.c"
            mem_133 = Wmx + 22;
# 191 "../HPL_dlocswpN.c"
            tmp___21 = *mem_133;
# 191 "../HPL_dlocswpN.c"
            *A1 = tmp___21;
# 191 "../HPL_dlocswpN.c"
            *L = tmp___21;
# 191 "../HPL_dlocswpN.c"
            mem_134 = Wr0 + 22;
# 191 "../HPL_dlocswpN.c"
            *A2 = *mem_134;
# 191 "../HPL_dlocswpN.c"
            L += n0;
# 191 "../HPL_dlocswpN.c"
            A1 += lda;
# 191 "../HPL_dlocswpN.c"
            A2 += lda;
# 192 "../HPL_dlocswpN.c"
            mem_135 = Wmx + 23;
# 192 "../HPL_dlocswpN.c"
            tmp___22 = *mem_135;
# 192 "../HPL_dlocswpN.c"
            *A1 = tmp___22;
# 192 "../HPL_dlocswpN.c"
            *L = tmp___22;
# 192 "../HPL_dlocswpN.c"
            mem_136 = Wr0 + 23;
# 192 "../HPL_dlocswpN.c"
            *A2 = *mem_136;
# 192 "../HPL_dlocswpN.c"
            L += n0;
# 192 "../HPL_dlocswpN.c"
            A1 += lda;
# 192 "../HPL_dlocswpN.c"
            A2 += lda;
# 193 "../HPL_dlocswpN.c"
            mem_137 = Wmx + 24;
# 193 "../HPL_dlocswpN.c"
            tmp___23 = *mem_137;
# 193 "../HPL_dlocswpN.c"
            *A1 = tmp___23;
# 193 "../HPL_dlocswpN.c"
            *L = tmp___23;
# 193 "../HPL_dlocswpN.c"
            mem_138 = Wr0 + 24;
# 193 "../HPL_dlocswpN.c"
            *A2 = *mem_138;
# 193 "../HPL_dlocswpN.c"
            L += n0;
# 193 "../HPL_dlocswpN.c"
            A1 += lda;
# 193 "../HPL_dlocswpN.c"
            A2 += lda;
# 194 "../HPL_dlocswpN.c"
            mem_139 = Wmx + 25;
# 194 "../HPL_dlocswpN.c"
            tmp___24 = *mem_139;
# 194 "../HPL_dlocswpN.c"
            *A1 = tmp___24;
# 194 "../HPL_dlocswpN.c"
            *L = tmp___24;
# 194 "../HPL_dlocswpN.c"
            mem_140 = Wr0 + 25;
# 194 "../HPL_dlocswpN.c"
            *A2 = *mem_140;
# 194 "../HPL_dlocswpN.c"
            L += n0;
# 194 "../HPL_dlocswpN.c"
            A1 += lda;
# 194 "../HPL_dlocswpN.c"
            A2 += lda;
# 195 "../HPL_dlocswpN.c"
            mem_141 = Wmx + 26;
# 195 "../HPL_dlocswpN.c"
            tmp___25 = *mem_141;
# 195 "../HPL_dlocswpN.c"
            *A1 = tmp___25;
# 195 "../HPL_dlocswpN.c"
            *L = tmp___25;
# 195 "../HPL_dlocswpN.c"
            mem_142 = Wr0 + 26;
# 195 "../HPL_dlocswpN.c"
            *A2 = *mem_142;
# 195 "../HPL_dlocswpN.c"
            L += n0;
# 195 "../HPL_dlocswpN.c"
            A1 += lda;
# 195 "../HPL_dlocswpN.c"
            A2 += lda;
# 196 "../HPL_dlocswpN.c"
            mem_143 = Wmx + 27;
# 196 "../HPL_dlocswpN.c"
            tmp___26 = *mem_143;
# 196 "../HPL_dlocswpN.c"
            *A1 = tmp___26;
# 196 "../HPL_dlocswpN.c"
            *L = tmp___26;
# 196 "../HPL_dlocswpN.c"
            mem_144 = Wr0 + 27;
# 196 "../HPL_dlocswpN.c"
            *A2 = *mem_144;
# 196 "../HPL_dlocswpN.c"
            L += n0;
# 196 "../HPL_dlocswpN.c"
            A1 += lda;
# 196 "../HPL_dlocswpN.c"
            A2 += lda;
# 197 "../HPL_dlocswpN.c"
            mem_145 = Wmx + 28;
# 197 "../HPL_dlocswpN.c"
            tmp___27 = *mem_145;
# 197 "../HPL_dlocswpN.c"
            *A1 = tmp___27;
# 197 "../HPL_dlocswpN.c"
            *L = tmp___27;
# 197 "../HPL_dlocswpN.c"
            mem_146 = Wr0 + 28;
# 197 "../HPL_dlocswpN.c"
            *A2 = *mem_146;
# 197 "../HPL_dlocswpN.c"
            L += n0;
# 197 "../HPL_dlocswpN.c"
            A1 += lda;
# 197 "../HPL_dlocswpN.c"
            A2 += lda;
# 198 "../HPL_dlocswpN.c"
            mem_147 = Wmx + 29;
# 198 "../HPL_dlocswpN.c"
            tmp___28 = *mem_147;
# 198 "../HPL_dlocswpN.c"
            *A1 = tmp___28;
# 198 "../HPL_dlocswpN.c"
            *L = tmp___28;
# 198 "../HPL_dlocswpN.c"
            mem_148 = Wr0 + 29;
# 198 "../HPL_dlocswpN.c"
            *A2 = *mem_148;
# 198 "../HPL_dlocswpN.c"
            L += n0;
# 198 "../HPL_dlocswpN.c"
            A1 += lda;
# 198 "../HPL_dlocswpN.c"
            A2 += lda;
# 199 "../HPL_dlocswpN.c"
            mem_149 = Wmx + 30;
# 199 "../HPL_dlocswpN.c"
            tmp___29 = *mem_149;
# 199 "../HPL_dlocswpN.c"
            *A1 = tmp___29;
# 199 "../HPL_dlocswpN.c"
            *L = tmp___29;
# 199 "../HPL_dlocswpN.c"
            mem_150 = Wr0 + 30;
# 199 "../HPL_dlocswpN.c"
            *A2 = *mem_150;
# 199 "../HPL_dlocswpN.c"
            L += n0;
# 199 "../HPL_dlocswpN.c"
            A1 += lda;
# 199 "../HPL_dlocswpN.c"
            A2 += lda;
# 200 "../HPL_dlocswpN.c"
            mem_151 = Wmx + 31;
# 200 "../HPL_dlocswpN.c"
            tmp___30 = *mem_151;
# 200 "../HPL_dlocswpN.c"
            *A1 = tmp___30;
# 200 "../HPL_dlocswpN.c"
            *L = tmp___30;
# 200 "../HPL_dlocswpN.c"
            mem_152 = Wr0 + 31;
# 200 "../HPL_dlocswpN.c"
            *A2 = *mem_152;
# 200 "../HPL_dlocswpN.c"
            L += n0;
# 200 "../HPL_dlocswpN.c"
            A1 += lda;
# 200 "../HPL_dlocswpN.c"
            A2 += lda;
            __CrestLoad(11913, (unsigned long )(& i), (long long )i);
            __CrestLoad(11912, (unsigned long )0, (long long )32);
            __CrestApply2(11911, 0, (long long )(i + 32));
            __CrestStore(11914, (unsigned long )(& i));
# 157 "../HPL_dlocswpN.c"
            i += 32;
# 157 "../HPL_dlocswpN.c"
            Wmx += 32;
# 157 "../HPL_dlocswpN.c"
            Wr0 += 32;
          }
          while_break: ;
          }
          __CrestLoad(11915, (unsigned long )0, (long long )0);
          __CrestStore(11916, (unsigned long )(& i));
# 203 "../HPL_dlocswpN.c"
          i = 0;
          {
# 203 "../HPL_dlocswpN.c"
          while (1) {
            while_continue___0: ;
            {
            __CrestLoad(11919, (unsigned long )(& i), (long long )i);
            __CrestLoad(11918, (unsigned long )(& nr), (long long )nr);
            __CrestApply2(11917, 16, (long long )(i < nr));
# 203 "../HPL_dlocswpN.c"
            if (i < nr) {
              __CrestBranch(11920, 4690, 1);

            } else {
              __CrestBranch(11921, 4691, 0);
# 203 "../HPL_dlocswpN.c"
              goto while_break___0;
            }
            }
# 204 "../HPL_dlocswpN.c"
            mem_153 = Wmx + i;
# 204 "../HPL_dlocswpN.c"
            tmp___31 = *mem_153;
# 204 "../HPL_dlocswpN.c"
            *A1 = tmp___31;
# 204 "../HPL_dlocswpN.c"
            *L = tmp___31;
# 204 "../HPL_dlocswpN.c"
            mem_154 = Wr0 + i;
# 204 "../HPL_dlocswpN.c"
            *A2 = *mem_154;
            __CrestLoad(11924, (unsigned long )(& i), (long long )i);
            __CrestLoad(11923, (unsigned long )0, (long long )1);
            __CrestApply2(11922, 0, (long long )(i + 1));
            __CrestStore(11925, (unsigned long )(& i));
# 203 "../HPL_dlocswpN.c"
            i ++;
# 203 "../HPL_dlocswpN.c"
            L += n0;
# 203 "../HPL_dlocswpN.c"
            A1 += lda;
# 203 "../HPL_dlocswpN.c"
            A2 += lda;
          }
          while_break___0: ;
          }
        } else {
          __CrestBranch(11903, 4694, 0);
# 212 "../HPL_dlocswpN.c"
          mem_155 = (PANEL->A + II) + JJ * (int const )lda;
# 212 "../HPL_dlocswpN.c"
          *mem_155 = gmax;
          __CrestLoad(11926, (unsigned long )0, (long long )0);
          __CrestStore(11927, (unsigned long )(& i));
# 214 "../HPL_dlocswpN.c"
          i = 0;
          {
# 214 "../HPL_dlocswpN.c"
          while (1) {
            while_continue___1: ;
            {
            __CrestLoad(11930, (unsigned long )(& i), (long long )i);
            __CrestLoad(11929, (unsigned long )(& nu), (long long )nu);
            __CrestApply2(11928, 16, (long long )(i < nu));
# 214 "../HPL_dlocswpN.c"
            if (i < nu) {
              __CrestBranch(11931, 4699, 1);

            } else {
              __CrestBranch(11932, 4700, 0);
# 214 "../HPL_dlocswpN.c"
              goto while_break___1;
            }
            }
# 217 "../HPL_dlocswpN.c"
            mem_156 = Wmx + 0;
# 217 "../HPL_dlocswpN.c"
            *L = *mem_156;
# 217 "../HPL_dlocswpN.c"
            L += n0;
# 219 "../HPL_dlocswpN.c"
            mem_157 = Wmx + 1;
# 219 "../HPL_dlocswpN.c"
            *L = *mem_157;
# 219 "../HPL_dlocswpN.c"
            L += n0;
# 222 "../HPL_dlocswpN.c"
            mem_158 = Wmx + 2;
# 222 "../HPL_dlocswpN.c"
            *L = *mem_158;
# 222 "../HPL_dlocswpN.c"
            L += n0;
# 222 "../HPL_dlocswpN.c"
            mem_159 = Wmx + 3;
# 222 "../HPL_dlocswpN.c"
            *L = *mem_159;
# 222 "../HPL_dlocswpN.c"
            L += n0;
# 225 "../HPL_dlocswpN.c"
            mem_160 = Wmx + 4;
# 225 "../HPL_dlocswpN.c"
            *L = *mem_160;
# 225 "../HPL_dlocswpN.c"
            L += n0;
# 225 "../HPL_dlocswpN.c"
            mem_161 = Wmx + 5;
# 225 "../HPL_dlocswpN.c"
            *L = *mem_161;
# 225 "../HPL_dlocswpN.c"
            L += n0;
# 226 "../HPL_dlocswpN.c"
            mem_162 = Wmx + 6;
# 226 "../HPL_dlocswpN.c"
            *L = *mem_162;
# 226 "../HPL_dlocswpN.c"
            L += n0;
# 226 "../HPL_dlocswpN.c"
            mem_163 = Wmx + 7;
# 226 "../HPL_dlocswpN.c"
            *L = *mem_163;
# 226 "../HPL_dlocswpN.c"
            L += n0;
# 229 "../HPL_dlocswpN.c"
            mem_164 = Wmx + 8;
# 229 "../HPL_dlocswpN.c"
            *L = *mem_164;
# 229 "../HPL_dlocswpN.c"
            L += n0;
# 229 "../HPL_dlocswpN.c"
            mem_165 = Wmx + 9;
# 229 "../HPL_dlocswpN.c"
            *L = *mem_165;
# 229 "../HPL_dlocswpN.c"
            L += n0;
# 230 "../HPL_dlocswpN.c"
            mem_166 = Wmx + 10;
# 230 "../HPL_dlocswpN.c"
            *L = *mem_166;
# 230 "../HPL_dlocswpN.c"
            L += n0;
# 230 "../HPL_dlocswpN.c"
            mem_167 = Wmx + 11;
# 230 "../HPL_dlocswpN.c"
            *L = *mem_167;
# 230 "../HPL_dlocswpN.c"
            L += n0;
# 231 "../HPL_dlocswpN.c"
            mem_168 = Wmx + 12;
# 231 "../HPL_dlocswpN.c"
            *L = *mem_168;
# 231 "../HPL_dlocswpN.c"
            L += n0;
# 231 "../HPL_dlocswpN.c"
            mem_169 = Wmx + 13;
# 231 "../HPL_dlocswpN.c"
            *L = *mem_169;
# 231 "../HPL_dlocswpN.c"
            L += n0;
# 232 "../HPL_dlocswpN.c"
            mem_170 = Wmx + 14;
# 232 "../HPL_dlocswpN.c"
            *L = *mem_170;
# 232 "../HPL_dlocswpN.c"
            L += n0;
# 232 "../HPL_dlocswpN.c"
            mem_171 = Wmx + 15;
# 232 "../HPL_dlocswpN.c"
            *L = *mem_171;
# 232 "../HPL_dlocswpN.c"
            L += n0;
# 235 "../HPL_dlocswpN.c"
            mem_172 = Wmx + 16;
# 235 "../HPL_dlocswpN.c"
            *L = *mem_172;
# 235 "../HPL_dlocswpN.c"
            L += n0;
# 235 "../HPL_dlocswpN.c"
            mem_173 = Wmx + 17;
# 235 "../HPL_dlocswpN.c"
            *L = *mem_173;
# 235 "../HPL_dlocswpN.c"
            L += n0;
# 236 "../HPL_dlocswpN.c"
            mem_174 = Wmx + 18;
# 236 "../HPL_dlocswpN.c"
            *L = *mem_174;
# 236 "../HPL_dlocswpN.c"
            L += n0;
# 236 "../HPL_dlocswpN.c"
            mem_175 = Wmx + 19;
# 236 "../HPL_dlocswpN.c"
            *L = *mem_175;
# 236 "../HPL_dlocswpN.c"
            L += n0;
# 237 "../HPL_dlocswpN.c"
            mem_176 = Wmx + 20;
# 237 "../HPL_dlocswpN.c"
            *L = *mem_176;
# 237 "../HPL_dlocswpN.c"
            L += n0;
# 237 "../HPL_dlocswpN.c"
            mem_177 = Wmx + 21;
# 237 "../HPL_dlocswpN.c"
            *L = *mem_177;
# 237 "../HPL_dlocswpN.c"
            L += n0;
# 238 "../HPL_dlocswpN.c"
            mem_178 = Wmx + 22;
# 238 "../HPL_dlocswpN.c"
            *L = *mem_178;
# 238 "../HPL_dlocswpN.c"
            L += n0;
# 238 "../HPL_dlocswpN.c"
            mem_179 = Wmx + 23;
# 238 "../HPL_dlocswpN.c"
            *L = *mem_179;
# 238 "../HPL_dlocswpN.c"
            L += n0;
# 239 "../HPL_dlocswpN.c"
            mem_180 = Wmx + 24;
# 239 "../HPL_dlocswpN.c"
            *L = *mem_180;
# 239 "../HPL_dlocswpN.c"
            L += n0;
# 239 "../HPL_dlocswpN.c"
            mem_181 = Wmx + 25;
# 239 "../HPL_dlocswpN.c"
            *L = *mem_181;
# 239 "../HPL_dlocswpN.c"
            L += n0;
# 240 "../HPL_dlocswpN.c"
            mem_182 = Wmx + 26;
# 240 "../HPL_dlocswpN.c"
            *L = *mem_182;
# 240 "../HPL_dlocswpN.c"
            L += n0;
# 240 "../HPL_dlocswpN.c"
            mem_183 = Wmx + 27;
# 240 "../HPL_dlocswpN.c"
            *L = *mem_183;
# 240 "../HPL_dlocswpN.c"
            L += n0;
# 241 "../HPL_dlocswpN.c"
            mem_184 = Wmx + 28;
# 241 "../HPL_dlocswpN.c"
            *L = *mem_184;
# 241 "../HPL_dlocswpN.c"
            L += n0;
# 241 "../HPL_dlocswpN.c"
            mem_185 = Wmx + 29;
# 241 "../HPL_dlocswpN.c"
            *L = *mem_185;
# 241 "../HPL_dlocswpN.c"
            L += n0;
# 242 "../HPL_dlocswpN.c"
            mem_186 = Wmx + 30;
# 242 "../HPL_dlocswpN.c"
            *L = *mem_186;
# 242 "../HPL_dlocswpN.c"
            L += n0;
# 242 "../HPL_dlocswpN.c"
            mem_187 = Wmx + 31;
# 242 "../HPL_dlocswpN.c"
            *L = *mem_187;
# 242 "../HPL_dlocswpN.c"
            L += n0;
            __CrestLoad(11935, (unsigned long )(& i), (long long )i);
            __CrestLoad(11934, (unsigned long )0, (long long )32);
            __CrestApply2(11933, 0, (long long )(i + 32));
            __CrestStore(11936, (unsigned long )(& i));
# 214 "../HPL_dlocswpN.c"
            i += 32;
# 214 "../HPL_dlocswpN.c"
            Wmx += 32;
# 214 "../HPL_dlocswpN.c"
            Wr0 += 32;
          }
          while_break___1: ;
          }
          __CrestLoad(11937, (unsigned long )0, (long long )0);
          __CrestStore(11938, (unsigned long )(& i));
# 245 "../HPL_dlocswpN.c"
          i = 0;
          {
# 245 "../HPL_dlocswpN.c"
          while (1) {
            while_continue___2: ;
            {
            __CrestLoad(11941, (unsigned long )(& i), (long long )i);
            __CrestLoad(11940, (unsigned long )(& nr), (long long )nr);
            __CrestApply2(11939, 16, (long long )(i < nr));
# 245 "../HPL_dlocswpN.c"
            if (i < nr) {
              __CrestBranch(11942, 4708, 1);

            } else {
              __CrestBranch(11943, 4709, 0);
# 245 "../HPL_dlocswpN.c"
              goto while_break___2;
            }
            }
# 245 "../HPL_dlocswpN.c"
            mem_188 = Wmx + i;
# 245 "../HPL_dlocswpN.c"
            *L = *mem_188;
            __CrestLoad(11946, (unsigned long )(& i), (long long )i);
            __CrestLoad(11945, (unsigned long )0, (long long )1);
            __CrestApply2(11944, 0, (long long )(i + 1));
            __CrestStore(11947, (unsigned long )(& i));
# 245 "../HPL_dlocswpN.c"
            i ++;
# 245 "../HPL_dlocswpN.c"
            L += n0;
          }
          while_break___2: ;
          }
        }
        }
      } else {
        __CrestBranch(11896, 4712, 0);
# 254 "../HPL_dlocswpN.c"
        A1 = (PANEL->A + II) + 0;
        __CrestLoad(11948, (unsigned long )0, (long long )0);
        __CrestStore(11949, (unsigned long )(& i));
# 256 "../HPL_dlocswpN.c"
        i = 0;
        {
# 256 "../HPL_dlocswpN.c"
        while (1) {
          while_continue___3: ;
          {
          __CrestLoad(11952, (unsigned long )(& i), (long long )i);
          __CrestLoad(11951, (unsigned long )(& nu), (long long )nu);
          __CrestApply2(11950, 16, (long long )(i < nu));
# 256 "../HPL_dlocswpN.c"
          if (i < nu) {
            __CrestBranch(11953, 4717, 1);

          } else {
            __CrestBranch(11954, 4718, 0);
# 256 "../HPL_dlocswpN.c"
            goto while_break___3;
          }
          }
# 259 "../HPL_dlocswpN.c"
          mem_189 = Wmx + 0;
# 259 "../HPL_dlocswpN.c"
          tmp___32 = *mem_189;
# 259 "../HPL_dlocswpN.c"
          *A1 = tmp___32;
# 259 "../HPL_dlocswpN.c"
          *L = tmp___32;
# 259 "../HPL_dlocswpN.c"
          L += n0;
# 259 "../HPL_dlocswpN.c"
          A1 += lda;
# 261 "../HPL_dlocswpN.c"
          mem_190 = Wmx + 1;
# 261 "../HPL_dlocswpN.c"
          tmp___33 = *mem_190;
# 261 "../HPL_dlocswpN.c"
          *A1 = tmp___33;
# 261 "../HPL_dlocswpN.c"
          *L = tmp___33;
# 261 "../HPL_dlocswpN.c"
          L += n0;
# 261 "../HPL_dlocswpN.c"
          A1 += lda;
# 264 "../HPL_dlocswpN.c"
          mem_191 = Wmx + 2;
# 264 "../HPL_dlocswpN.c"
          tmp___34 = *mem_191;
# 264 "../HPL_dlocswpN.c"
          *A1 = tmp___34;
# 264 "../HPL_dlocswpN.c"
          *L = tmp___34;
# 264 "../HPL_dlocswpN.c"
          L += n0;
# 264 "../HPL_dlocswpN.c"
          A1 += lda;
# 265 "../HPL_dlocswpN.c"
          mem_192 = Wmx + 3;
# 265 "../HPL_dlocswpN.c"
          tmp___35 = *mem_192;
# 265 "../HPL_dlocswpN.c"
          *A1 = tmp___35;
# 265 "../HPL_dlocswpN.c"
          *L = tmp___35;
# 265 "../HPL_dlocswpN.c"
          L += n0;
# 265 "../HPL_dlocswpN.c"
          A1 += lda;
# 268 "../HPL_dlocswpN.c"
          mem_193 = Wmx + 4;
# 268 "../HPL_dlocswpN.c"
          tmp___36 = *mem_193;
# 268 "../HPL_dlocswpN.c"
          *A1 = tmp___36;
# 268 "../HPL_dlocswpN.c"
          *L = tmp___36;
# 268 "../HPL_dlocswpN.c"
          L += n0;
# 268 "../HPL_dlocswpN.c"
          A1 += lda;
# 269 "../HPL_dlocswpN.c"
          mem_194 = Wmx + 5;
# 269 "../HPL_dlocswpN.c"
          tmp___37 = *mem_194;
# 269 "../HPL_dlocswpN.c"
          *A1 = tmp___37;
# 269 "../HPL_dlocswpN.c"
          *L = tmp___37;
# 269 "../HPL_dlocswpN.c"
          L += n0;
# 269 "../HPL_dlocswpN.c"
          A1 += lda;
# 270 "../HPL_dlocswpN.c"
          mem_195 = Wmx + 6;
# 270 "../HPL_dlocswpN.c"
          tmp___38 = *mem_195;
# 270 "../HPL_dlocswpN.c"
          *A1 = tmp___38;
# 270 "../HPL_dlocswpN.c"
          *L = tmp___38;
# 270 "../HPL_dlocswpN.c"
          L += n0;
# 270 "../HPL_dlocswpN.c"
          A1 += lda;
# 271 "../HPL_dlocswpN.c"
          mem_196 = Wmx + 7;
# 271 "../HPL_dlocswpN.c"
          tmp___39 = *mem_196;
# 271 "../HPL_dlocswpN.c"
          *A1 = tmp___39;
# 271 "../HPL_dlocswpN.c"
          *L = tmp___39;
# 271 "../HPL_dlocswpN.c"
          L += n0;
# 271 "../HPL_dlocswpN.c"
          A1 += lda;
# 274 "../HPL_dlocswpN.c"
          mem_197 = Wmx + 8;
# 274 "../HPL_dlocswpN.c"
          tmp___40 = *mem_197;
# 274 "../HPL_dlocswpN.c"
          *A1 = tmp___40;
# 274 "../HPL_dlocswpN.c"
          *L = tmp___40;
# 274 "../HPL_dlocswpN.c"
          L += n0;
# 274 "../HPL_dlocswpN.c"
          A1 += lda;
# 275 "../HPL_dlocswpN.c"
          mem_198 = Wmx + 9;
# 275 "../HPL_dlocswpN.c"
          tmp___41 = *mem_198;
# 275 "../HPL_dlocswpN.c"
          *A1 = tmp___41;
# 275 "../HPL_dlocswpN.c"
          *L = tmp___41;
# 275 "../HPL_dlocswpN.c"
          L += n0;
# 275 "../HPL_dlocswpN.c"
          A1 += lda;
# 276 "../HPL_dlocswpN.c"
          mem_199 = Wmx + 10;
# 276 "../HPL_dlocswpN.c"
          tmp___42 = *mem_199;
# 276 "../HPL_dlocswpN.c"
          *A1 = tmp___42;
# 276 "../HPL_dlocswpN.c"
          *L = tmp___42;
# 276 "../HPL_dlocswpN.c"
          L += n0;
# 276 "../HPL_dlocswpN.c"
          A1 += lda;
# 277 "../HPL_dlocswpN.c"
          mem_200 = Wmx + 11;
# 277 "../HPL_dlocswpN.c"
          tmp___43 = *mem_200;
# 277 "../HPL_dlocswpN.c"
          *A1 = tmp___43;
# 277 "../HPL_dlocswpN.c"
          *L = tmp___43;
# 277 "../HPL_dlocswpN.c"
          L += n0;
# 277 "../HPL_dlocswpN.c"
          A1 += lda;
# 278 "../HPL_dlocswpN.c"
          mem_201 = Wmx + 12;
# 278 "../HPL_dlocswpN.c"
          tmp___44 = *mem_201;
# 278 "../HPL_dlocswpN.c"
          *A1 = tmp___44;
# 278 "../HPL_dlocswpN.c"
          *L = tmp___44;
# 278 "../HPL_dlocswpN.c"
          L += n0;
# 278 "../HPL_dlocswpN.c"
          A1 += lda;
# 279 "../HPL_dlocswpN.c"
          mem_202 = Wmx + 13;
# 279 "../HPL_dlocswpN.c"
          tmp___45 = *mem_202;
# 279 "../HPL_dlocswpN.c"
          *A1 = tmp___45;
# 279 "../HPL_dlocswpN.c"
          *L = tmp___45;
# 279 "../HPL_dlocswpN.c"
          L += n0;
# 279 "../HPL_dlocswpN.c"
          A1 += lda;
# 280 "../HPL_dlocswpN.c"
          mem_203 = Wmx + 14;
# 280 "../HPL_dlocswpN.c"
          tmp___46 = *mem_203;
# 280 "../HPL_dlocswpN.c"
          *A1 = tmp___46;
# 280 "../HPL_dlocswpN.c"
          *L = tmp___46;
# 280 "../HPL_dlocswpN.c"
          L += n0;
# 280 "../HPL_dlocswpN.c"
          A1 += lda;
# 281 "../HPL_dlocswpN.c"
          mem_204 = Wmx + 15;
# 281 "../HPL_dlocswpN.c"
          tmp___47 = *mem_204;
# 281 "../HPL_dlocswpN.c"
          *A1 = tmp___47;
# 281 "../HPL_dlocswpN.c"
          *L = tmp___47;
# 281 "../HPL_dlocswpN.c"
          L += n0;
# 281 "../HPL_dlocswpN.c"
          A1 += lda;
# 284 "../HPL_dlocswpN.c"
          mem_205 = Wmx + 16;
# 284 "../HPL_dlocswpN.c"
          tmp___48 = *mem_205;
# 284 "../HPL_dlocswpN.c"
          *A1 = tmp___48;
# 284 "../HPL_dlocswpN.c"
          *L = tmp___48;
# 284 "../HPL_dlocswpN.c"
          L += n0;
# 284 "../HPL_dlocswpN.c"
          A1 += lda;
# 285 "../HPL_dlocswpN.c"
          mem_206 = Wmx + 17;
# 285 "../HPL_dlocswpN.c"
          tmp___49 = *mem_206;
# 285 "../HPL_dlocswpN.c"
          *A1 = tmp___49;
# 285 "../HPL_dlocswpN.c"
          *L = tmp___49;
# 285 "../HPL_dlocswpN.c"
          L += n0;
# 285 "../HPL_dlocswpN.c"
          A1 += lda;
# 286 "../HPL_dlocswpN.c"
          mem_207 = Wmx + 18;
# 286 "../HPL_dlocswpN.c"
          tmp___50 = *mem_207;
# 286 "../HPL_dlocswpN.c"
          *A1 = tmp___50;
# 286 "../HPL_dlocswpN.c"
          *L = tmp___50;
# 286 "../HPL_dlocswpN.c"
          L += n0;
# 286 "../HPL_dlocswpN.c"
          A1 += lda;
# 287 "../HPL_dlocswpN.c"
          mem_208 = Wmx + 19;
# 287 "../HPL_dlocswpN.c"
          tmp___51 = *mem_208;
# 287 "../HPL_dlocswpN.c"
          *A1 = tmp___51;
# 287 "../HPL_dlocswpN.c"
          *L = tmp___51;
# 287 "../HPL_dlocswpN.c"
          L += n0;
# 287 "../HPL_dlocswpN.c"
          A1 += lda;
# 288 "../HPL_dlocswpN.c"
          mem_209 = Wmx + 20;
# 288 "../HPL_dlocswpN.c"
          tmp___52 = *mem_209;
# 288 "../HPL_dlocswpN.c"
          *A1 = tmp___52;
# 288 "../HPL_dlocswpN.c"
          *L = tmp___52;
# 288 "../HPL_dlocswpN.c"
          L += n0;
# 288 "../HPL_dlocswpN.c"
          A1 += lda;
# 289 "../HPL_dlocswpN.c"
          mem_210 = Wmx + 21;
# 289 "../HPL_dlocswpN.c"
          tmp___53 = *mem_210;
# 289 "../HPL_dlocswpN.c"
          *A1 = tmp___53;
# 289 "../HPL_dlocswpN.c"
          *L = tmp___53;
# 289 "../HPL_dlocswpN.c"
          L += n0;
# 289 "../HPL_dlocswpN.c"
          A1 += lda;
# 290 "../HPL_dlocswpN.c"
          mem_211 = Wmx + 22;
# 290 "../HPL_dlocswpN.c"
          tmp___54 = *mem_211;
# 290 "../HPL_dlocswpN.c"
          *A1 = tmp___54;
# 290 "../HPL_dlocswpN.c"
          *L = tmp___54;
# 290 "../HPL_dlocswpN.c"
          L += n0;
# 290 "../HPL_dlocswpN.c"
          A1 += lda;
# 291 "../HPL_dlocswpN.c"
          mem_212 = Wmx + 23;
# 291 "../HPL_dlocswpN.c"
          tmp___55 = *mem_212;
# 291 "../HPL_dlocswpN.c"
          *A1 = tmp___55;
# 291 "../HPL_dlocswpN.c"
          *L = tmp___55;
# 291 "../HPL_dlocswpN.c"
          L += n0;
# 291 "../HPL_dlocswpN.c"
          A1 += lda;
# 292 "../HPL_dlocswpN.c"
          mem_213 = Wmx + 24;
# 292 "../HPL_dlocswpN.c"
          tmp___56 = *mem_213;
# 292 "../HPL_dlocswpN.c"
          *A1 = tmp___56;
# 292 "../HPL_dlocswpN.c"
          *L = tmp___56;
# 292 "../HPL_dlocswpN.c"
          L += n0;
# 292 "../HPL_dlocswpN.c"
          A1 += lda;
# 293 "../HPL_dlocswpN.c"
          mem_214 = Wmx + 25;
# 293 "../HPL_dlocswpN.c"
          tmp___57 = *mem_214;
# 293 "../HPL_dlocswpN.c"
          *A1 = tmp___57;
# 293 "../HPL_dlocswpN.c"
          *L = tmp___57;
# 293 "../HPL_dlocswpN.c"
          L += n0;
# 293 "../HPL_dlocswpN.c"
          A1 += lda;
# 294 "../HPL_dlocswpN.c"
          mem_215 = Wmx + 26;
# 294 "../HPL_dlocswpN.c"
          tmp___58 = *mem_215;
# 294 "../HPL_dlocswpN.c"
          *A1 = tmp___58;
# 294 "../HPL_dlocswpN.c"
          *L = tmp___58;
# 294 "../HPL_dlocswpN.c"
          L += n0;
# 294 "../HPL_dlocswpN.c"
          A1 += lda;
# 295 "../HPL_dlocswpN.c"
          mem_216 = Wmx + 27;
# 295 "../HPL_dlocswpN.c"
          tmp___59 = *mem_216;
# 295 "../HPL_dlocswpN.c"
          *A1 = tmp___59;
# 295 "../HPL_dlocswpN.c"
          *L = tmp___59;
# 295 "../HPL_dlocswpN.c"
          L += n0;
# 295 "../HPL_dlocswpN.c"
          A1 += lda;
# 296 "../HPL_dlocswpN.c"
          mem_217 = Wmx + 28;
# 296 "../HPL_dlocswpN.c"
          tmp___60 = *mem_217;
# 296 "../HPL_dlocswpN.c"
          *A1 = tmp___60;
# 296 "../HPL_dlocswpN.c"
          *L = tmp___60;
# 296 "../HPL_dlocswpN.c"
          L += n0;
# 296 "../HPL_dlocswpN.c"
          A1 += lda;
# 297 "../HPL_dlocswpN.c"
          mem_218 = Wmx + 29;
# 297 "../HPL_dlocswpN.c"
          tmp___61 = *mem_218;
# 297 "../HPL_dlocswpN.c"
          *A1 = tmp___61;
# 297 "../HPL_dlocswpN.c"
          *L = tmp___61;
# 297 "../HPL_dlocswpN.c"
          L += n0;
# 297 "../HPL_dlocswpN.c"
          A1 += lda;
# 298 "../HPL_dlocswpN.c"
          mem_219 = Wmx + 30;
# 298 "../HPL_dlocswpN.c"
          tmp___62 = *mem_219;
# 298 "../HPL_dlocswpN.c"
          *A1 = tmp___62;
# 298 "../HPL_dlocswpN.c"
          *L = tmp___62;
# 298 "../HPL_dlocswpN.c"
          L += n0;
# 298 "../HPL_dlocswpN.c"
          A1 += lda;
# 299 "../HPL_dlocswpN.c"
          mem_220 = Wmx + 31;
# 299 "../HPL_dlocswpN.c"
          tmp___63 = *mem_220;
# 299 "../HPL_dlocswpN.c"
          *A1 = tmp___63;
# 299 "../HPL_dlocswpN.c"
          *L = tmp___63;
# 299 "../HPL_dlocswpN.c"
          L += n0;
# 299 "../HPL_dlocswpN.c"
          A1 += lda;
          __CrestLoad(11957, (unsigned long )(& i), (long long )i);
          __CrestLoad(11956, (unsigned long )0, (long long )32);
          __CrestApply2(11955, 0, (long long )(i + 32));
          __CrestStore(11958, (unsigned long )(& i));
# 256 "../HPL_dlocswpN.c"
          i += 32;
# 256 "../HPL_dlocswpN.c"
          Wmx += 32;
        }
        while_break___3: ;
        }
        __CrestLoad(11959, (unsigned long )0, (long long )0);
        __CrestStore(11960, (unsigned long )(& i));
# 303 "../HPL_dlocswpN.c"
        i = 0;
        {
# 303 "../HPL_dlocswpN.c"
        while (1) {
          while_continue___4: ;
          {
          __CrestLoad(11963, (unsigned long )(& i), (long long )i);
          __CrestLoad(11962, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(11961, 16, (long long )(i < nr));
# 303 "../HPL_dlocswpN.c"
          if (i < nr) {
            __CrestBranch(11964, 4726, 1);

          } else {
            __CrestBranch(11965, 4727, 0);
# 303 "../HPL_dlocswpN.c"
            goto while_break___4;
          }
          }
# 304 "../HPL_dlocswpN.c"
          mem_221 = Wmx + i;
# 304 "../HPL_dlocswpN.c"
          tmp___64 = *mem_221;
# 304 "../HPL_dlocswpN.c"
          *A1 = tmp___64;
# 304 "../HPL_dlocswpN.c"
          *L = tmp___64;
          __CrestLoad(11968, (unsigned long )(& i), (long long )i);
          __CrestLoad(11967, (unsigned long )0, (long long )1);
          __CrestApply2(11966, 0, (long long )(i + 1));
          __CrestStore(11969, (unsigned long )(& i));
# 303 "../HPL_dlocswpN.c"
          i ++;
# 303 "../HPL_dlocswpN.c"
          L += n0;
# 303 "../HPL_dlocswpN.c"
          A1 += lda;
        }
        while_break___4: ;
        }
      }
      }
      }
    } else {
      __CrestBranch(11891, 4730, 0);
      __CrestLoad(11970, (unsigned long )0, (long long )0);
      __CrestStore(11971, (unsigned long )(& i));
# 313 "../HPL_dlocswpN.c"
      i = 0;
      {
# 313 "../HPL_dlocswpN.c"
      while (1) {
        while_continue___5: ;
        {
        __CrestLoad(11974, (unsigned long )(& i), (long long )i);
        __CrestLoad(11973, (unsigned long )(& nu), (long long )nu);
        __CrestApply2(11972, 16, (long long )(i < nu));
# 313 "../HPL_dlocswpN.c"
        if (i < nu) {
          __CrestBranch(11975, 4735, 1);

        } else {
          __CrestBranch(11976, 4736, 0);
# 313 "../HPL_dlocswpN.c"
          goto while_break___5;
        }
        }
# 316 "../HPL_dlocswpN.c"
        mem_222 = Wmx + 0;
# 316 "../HPL_dlocswpN.c"
        *L = *mem_222;
# 316 "../HPL_dlocswpN.c"
        L += n0;
# 318 "../HPL_dlocswpN.c"
        mem_223 = Wmx + 1;
# 318 "../HPL_dlocswpN.c"
        *L = *mem_223;
# 318 "../HPL_dlocswpN.c"
        L += n0;
# 321 "../HPL_dlocswpN.c"
        mem_224 = Wmx + 2;
# 321 "../HPL_dlocswpN.c"
        *L = *mem_224;
# 321 "../HPL_dlocswpN.c"
        L += n0;
# 321 "../HPL_dlocswpN.c"
        mem_225 = Wmx + 3;
# 321 "../HPL_dlocswpN.c"
        *L = *mem_225;
# 321 "../HPL_dlocswpN.c"
        L += n0;
# 324 "../HPL_dlocswpN.c"
        mem_226 = Wmx + 4;
# 324 "../HPL_dlocswpN.c"
        *L = *mem_226;
# 324 "../HPL_dlocswpN.c"
        L += n0;
# 324 "../HPL_dlocswpN.c"
        mem_227 = Wmx + 5;
# 324 "../HPL_dlocswpN.c"
        *L = *mem_227;
# 324 "../HPL_dlocswpN.c"
        L += n0;
# 325 "../HPL_dlocswpN.c"
        mem_228 = Wmx + 6;
# 325 "../HPL_dlocswpN.c"
        *L = *mem_228;
# 325 "../HPL_dlocswpN.c"
        L += n0;
# 325 "../HPL_dlocswpN.c"
        mem_229 = Wmx + 7;
# 325 "../HPL_dlocswpN.c"
        *L = *mem_229;
# 325 "../HPL_dlocswpN.c"
        L += n0;
# 328 "../HPL_dlocswpN.c"
        mem_230 = Wmx + 8;
# 328 "../HPL_dlocswpN.c"
        *L = *mem_230;
# 328 "../HPL_dlocswpN.c"
        L += n0;
# 328 "../HPL_dlocswpN.c"
        mem_231 = Wmx + 9;
# 328 "../HPL_dlocswpN.c"
        *L = *mem_231;
# 328 "../HPL_dlocswpN.c"
        L += n0;
# 329 "../HPL_dlocswpN.c"
        mem_232 = Wmx + 10;
# 329 "../HPL_dlocswpN.c"
        *L = *mem_232;
# 329 "../HPL_dlocswpN.c"
        L += n0;
# 329 "../HPL_dlocswpN.c"
        mem_233 = Wmx + 11;
# 329 "../HPL_dlocswpN.c"
        *L = *mem_233;
# 329 "../HPL_dlocswpN.c"
        L += n0;
# 330 "../HPL_dlocswpN.c"
        mem_234 = Wmx + 12;
# 330 "../HPL_dlocswpN.c"
        *L = *mem_234;
# 330 "../HPL_dlocswpN.c"
        L += n0;
# 330 "../HPL_dlocswpN.c"
        mem_235 = Wmx + 13;
# 330 "../HPL_dlocswpN.c"
        *L = *mem_235;
# 330 "../HPL_dlocswpN.c"
        L += n0;
# 331 "../HPL_dlocswpN.c"
        mem_236 = Wmx + 14;
# 331 "../HPL_dlocswpN.c"
        *L = *mem_236;
# 331 "../HPL_dlocswpN.c"
        L += n0;
# 331 "../HPL_dlocswpN.c"
        mem_237 = Wmx + 15;
# 331 "../HPL_dlocswpN.c"
        *L = *mem_237;
# 331 "../HPL_dlocswpN.c"
        L += n0;
# 334 "../HPL_dlocswpN.c"
        mem_238 = Wmx + 16;
# 334 "../HPL_dlocswpN.c"
        *L = *mem_238;
# 334 "../HPL_dlocswpN.c"
        L += n0;
# 334 "../HPL_dlocswpN.c"
        mem_239 = Wmx + 17;
# 334 "../HPL_dlocswpN.c"
        *L = *mem_239;
# 334 "../HPL_dlocswpN.c"
        L += n0;
# 335 "../HPL_dlocswpN.c"
        mem_240 = Wmx + 18;
# 335 "../HPL_dlocswpN.c"
        *L = *mem_240;
# 335 "../HPL_dlocswpN.c"
        L += n0;
# 335 "../HPL_dlocswpN.c"
        mem_241 = Wmx + 19;
# 335 "../HPL_dlocswpN.c"
        *L = *mem_241;
# 335 "../HPL_dlocswpN.c"
        L += n0;
# 336 "../HPL_dlocswpN.c"
        mem_242 = Wmx + 20;
# 336 "../HPL_dlocswpN.c"
        *L = *mem_242;
# 336 "../HPL_dlocswpN.c"
        L += n0;
# 336 "../HPL_dlocswpN.c"
        mem_243 = Wmx + 21;
# 336 "../HPL_dlocswpN.c"
        *L = *mem_243;
# 336 "../HPL_dlocswpN.c"
        L += n0;
# 337 "../HPL_dlocswpN.c"
        mem_244 = Wmx + 22;
# 337 "../HPL_dlocswpN.c"
        *L = *mem_244;
# 337 "../HPL_dlocswpN.c"
        L += n0;
# 337 "../HPL_dlocswpN.c"
        mem_245 = Wmx + 23;
# 337 "../HPL_dlocswpN.c"
        *L = *mem_245;
# 337 "../HPL_dlocswpN.c"
        L += n0;
# 338 "../HPL_dlocswpN.c"
        mem_246 = Wmx + 24;
# 338 "../HPL_dlocswpN.c"
        *L = *mem_246;
# 338 "../HPL_dlocswpN.c"
        L += n0;
# 338 "../HPL_dlocswpN.c"
        mem_247 = Wmx + 25;
# 338 "../HPL_dlocswpN.c"
        *L = *mem_247;
# 338 "../HPL_dlocswpN.c"
        L += n0;
# 339 "../HPL_dlocswpN.c"
        mem_248 = Wmx + 26;
# 339 "../HPL_dlocswpN.c"
        *L = *mem_248;
# 339 "../HPL_dlocswpN.c"
        L += n0;
# 339 "../HPL_dlocswpN.c"
        mem_249 = Wmx + 27;
# 339 "../HPL_dlocswpN.c"
        *L = *mem_249;
# 339 "../HPL_dlocswpN.c"
        L += n0;
# 340 "../HPL_dlocswpN.c"
        mem_250 = Wmx + 28;
# 340 "../HPL_dlocswpN.c"
        *L = *mem_250;
# 340 "../HPL_dlocswpN.c"
        L += n0;
# 340 "../HPL_dlocswpN.c"
        mem_251 = Wmx + 29;
# 340 "../HPL_dlocswpN.c"
        *L = *mem_251;
# 340 "../HPL_dlocswpN.c"
        L += n0;
# 341 "../HPL_dlocswpN.c"
        mem_252 = Wmx + 30;
# 341 "../HPL_dlocswpN.c"
        *L = *mem_252;
# 341 "../HPL_dlocswpN.c"
        L += n0;
# 341 "../HPL_dlocswpN.c"
        mem_253 = Wmx + 31;
# 341 "../HPL_dlocswpN.c"
        *L = *mem_253;
# 341 "../HPL_dlocswpN.c"
        L += n0;
        __CrestLoad(11979, (unsigned long )(& i), (long long )i);
        __CrestLoad(11978, (unsigned long )0, (long long )32);
        __CrestApply2(11977, 0, (long long )(i + 32));
        __CrestStore(11980, (unsigned long )(& i));
# 313 "../HPL_dlocswpN.c"
        i += 32;
# 313 "../HPL_dlocswpN.c"
        Wmx += 32;
      }
      while_break___5: ;
      }
      __CrestLoad(11981, (unsigned long )0, (long long )0);
      __CrestStore(11982, (unsigned long )(& i));
# 344 "../HPL_dlocswpN.c"
      i = 0;
      {
# 344 "../HPL_dlocswpN.c"
      while (1) {
        while_continue___6: ;
        {
        __CrestLoad(11985, (unsigned long )(& i), (long long )i);
        __CrestLoad(11984, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(11983, 16, (long long )(i < nr));
# 344 "../HPL_dlocswpN.c"
        if (i < nr) {
          __CrestBranch(11986, 4744, 1);

        } else {
          __CrestBranch(11987, 4745, 0);
# 344 "../HPL_dlocswpN.c"
          goto while_break___6;
        }
        }
# 344 "../HPL_dlocswpN.c"
        mem_254 = Wmx + i;
# 344 "../HPL_dlocswpN.c"
        *L = *mem_254;
        __CrestLoad(11990, (unsigned long )(& i), (long long )i);
        __CrestLoad(11989, (unsigned long )0, (long long )1);
        __CrestApply2(11988, 0, (long long )(i + 1));
        __CrestStore(11991, (unsigned long )(& i));
# 344 "../HPL_dlocswpN.c"
        i ++;
# 344 "../HPL_dlocswpN.c"
        L += n0;
      }
      while_break___6: ;
      }
      {
# 348 "../HPL_dlocswpN.c"
      mem_255 = WORK + 3;
      {
      __CrestLoad(11994, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(11993, (unsigned long )mem_255, (long long )*mem_255);
      __CrestApply2(11992, 12, (long long )(myrow == (int )*mem_255));
# 348 "../HPL_dlocswpN.c"
      if (myrow == (int )*mem_255) {
        __CrestBranch(11995, 4751, 1);
# 350 "../HPL_dlocswpN.c"
        mem_256 = WORK + 1;
# 350 "../HPL_dlocswpN.c"
        A2 = (PANEL->A + (II + (int const )((int )*mem_256))) + 0;
        __CrestLoad(11997, (unsigned long )0, (long long )0);
        __CrestStore(11998, (unsigned long )(& i));
# 352 "../HPL_dlocswpN.c"
        i = 0;
        {
# 352 "../HPL_dlocswpN.c"
        while (1) {
          while_continue___7: ;
          {
          __CrestLoad(12001, (unsigned long )(& i), (long long )i);
          __CrestLoad(12000, (unsigned long )(& nu), (long long )nu);
          __CrestApply2(11999, 16, (long long )(i < nu));
# 352 "../HPL_dlocswpN.c"
          if (i < nu) {
            __CrestBranch(12002, 4756, 1);

          } else {
            __CrestBranch(12003, 4757, 0);
# 352 "../HPL_dlocswpN.c"
            goto while_break___7;
          }
          }
# 355 "../HPL_dlocswpN.c"
          mem_257 = Wr0 + 0;
# 355 "../HPL_dlocswpN.c"
          *A2 = *mem_257;
# 355 "../HPL_dlocswpN.c"
          A2 += lda;
# 357 "../HPL_dlocswpN.c"
          mem_258 = Wr0 + 1;
# 357 "../HPL_dlocswpN.c"
          *A2 = *mem_258;
# 357 "../HPL_dlocswpN.c"
          A2 += lda;
# 360 "../HPL_dlocswpN.c"
          mem_259 = Wr0 + 2;
# 360 "../HPL_dlocswpN.c"
          *A2 = *mem_259;
# 360 "../HPL_dlocswpN.c"
          A2 += lda;
# 360 "../HPL_dlocswpN.c"
          mem_260 = Wr0 + 3;
# 360 "../HPL_dlocswpN.c"
          *A2 = *mem_260;
# 360 "../HPL_dlocswpN.c"
          A2 += lda;
# 363 "../HPL_dlocswpN.c"
          mem_261 = Wr0 + 4;
# 363 "../HPL_dlocswpN.c"
          *A2 = *mem_261;
# 363 "../HPL_dlocswpN.c"
          A2 += lda;
# 363 "../HPL_dlocswpN.c"
          mem_262 = Wr0 + 5;
# 363 "../HPL_dlocswpN.c"
          *A2 = *mem_262;
# 363 "../HPL_dlocswpN.c"
          A2 += lda;
# 364 "../HPL_dlocswpN.c"
          mem_263 = Wr0 + 6;
# 364 "../HPL_dlocswpN.c"
          *A2 = *mem_263;
# 364 "../HPL_dlocswpN.c"
          A2 += lda;
# 364 "../HPL_dlocswpN.c"
          mem_264 = Wr0 + 7;
# 364 "../HPL_dlocswpN.c"
          *A2 = *mem_264;
# 364 "../HPL_dlocswpN.c"
          A2 += lda;
# 367 "../HPL_dlocswpN.c"
          mem_265 = Wr0 + 8;
# 367 "../HPL_dlocswpN.c"
          *A2 = *mem_265;
# 367 "../HPL_dlocswpN.c"
          A2 += lda;
# 367 "../HPL_dlocswpN.c"
          mem_266 = Wr0 + 9;
# 367 "../HPL_dlocswpN.c"
          *A2 = *mem_266;
# 367 "../HPL_dlocswpN.c"
          A2 += lda;
# 368 "../HPL_dlocswpN.c"
          mem_267 = Wr0 + 10;
# 368 "../HPL_dlocswpN.c"
          *A2 = *mem_267;
# 368 "../HPL_dlocswpN.c"
          A2 += lda;
# 368 "../HPL_dlocswpN.c"
          mem_268 = Wr0 + 11;
# 368 "../HPL_dlocswpN.c"
          *A2 = *mem_268;
# 368 "../HPL_dlocswpN.c"
          A2 += lda;
# 369 "../HPL_dlocswpN.c"
          mem_269 = Wr0 + 12;
# 369 "../HPL_dlocswpN.c"
          *A2 = *mem_269;
# 369 "../HPL_dlocswpN.c"
          A2 += lda;
# 369 "../HPL_dlocswpN.c"
          mem_270 = Wr0 + 13;
# 369 "../HPL_dlocswpN.c"
          *A2 = *mem_270;
# 369 "../HPL_dlocswpN.c"
          A2 += lda;
# 370 "../HPL_dlocswpN.c"
          mem_271 = Wr0 + 14;
# 370 "../HPL_dlocswpN.c"
          *A2 = *mem_271;
# 370 "../HPL_dlocswpN.c"
          A2 += lda;
# 370 "../HPL_dlocswpN.c"
          mem_272 = Wr0 + 15;
# 370 "../HPL_dlocswpN.c"
          *A2 = *mem_272;
# 370 "../HPL_dlocswpN.c"
          A2 += lda;
# 373 "../HPL_dlocswpN.c"
          mem_273 = Wr0 + 16;
# 373 "../HPL_dlocswpN.c"
          *A2 = *mem_273;
# 373 "../HPL_dlocswpN.c"
          A2 += lda;
# 373 "../HPL_dlocswpN.c"
          mem_274 = Wr0 + 17;
# 373 "../HPL_dlocswpN.c"
          *A2 = *mem_274;
# 373 "../HPL_dlocswpN.c"
          A2 += lda;
# 374 "../HPL_dlocswpN.c"
          mem_275 = Wr0 + 18;
# 374 "../HPL_dlocswpN.c"
          *A2 = *mem_275;
# 374 "../HPL_dlocswpN.c"
          A2 += lda;
# 374 "../HPL_dlocswpN.c"
          mem_276 = Wr0 + 19;
# 374 "../HPL_dlocswpN.c"
          *A2 = *mem_276;
# 374 "../HPL_dlocswpN.c"
          A2 += lda;
# 375 "../HPL_dlocswpN.c"
          mem_277 = Wr0 + 20;
# 375 "../HPL_dlocswpN.c"
          *A2 = *mem_277;
# 375 "../HPL_dlocswpN.c"
          A2 += lda;
# 375 "../HPL_dlocswpN.c"
          mem_278 = Wr0 + 21;
# 375 "../HPL_dlocswpN.c"
          *A2 = *mem_278;
# 375 "../HPL_dlocswpN.c"
          A2 += lda;
# 376 "../HPL_dlocswpN.c"
          mem_279 = Wr0 + 22;
# 376 "../HPL_dlocswpN.c"
          *A2 = *mem_279;
# 376 "../HPL_dlocswpN.c"
          A2 += lda;
# 376 "../HPL_dlocswpN.c"
          mem_280 = Wr0 + 23;
# 376 "../HPL_dlocswpN.c"
          *A2 = *mem_280;
# 376 "../HPL_dlocswpN.c"
          A2 += lda;
# 377 "../HPL_dlocswpN.c"
          mem_281 = Wr0 + 24;
# 377 "../HPL_dlocswpN.c"
          *A2 = *mem_281;
# 377 "../HPL_dlocswpN.c"
          A2 += lda;
# 377 "../HPL_dlocswpN.c"
          mem_282 = Wr0 + 25;
# 377 "../HPL_dlocswpN.c"
          *A2 = *mem_282;
# 377 "../HPL_dlocswpN.c"
          A2 += lda;
# 378 "../HPL_dlocswpN.c"
          mem_283 = Wr0 + 26;
# 378 "../HPL_dlocswpN.c"
          *A2 = *mem_283;
# 378 "../HPL_dlocswpN.c"
          A2 += lda;
# 378 "../HPL_dlocswpN.c"
          mem_284 = Wr0 + 27;
# 378 "../HPL_dlocswpN.c"
          *A2 = *mem_284;
# 378 "../HPL_dlocswpN.c"
          A2 += lda;
# 379 "../HPL_dlocswpN.c"
          mem_285 = Wr0 + 28;
# 379 "../HPL_dlocswpN.c"
          *A2 = *mem_285;
# 379 "../HPL_dlocswpN.c"
          A2 += lda;
# 379 "../HPL_dlocswpN.c"
          mem_286 = Wr0 + 29;
# 379 "../HPL_dlocswpN.c"
          *A2 = *mem_286;
# 379 "../HPL_dlocswpN.c"
          A2 += lda;
# 380 "../HPL_dlocswpN.c"
          mem_287 = Wr0 + 30;
# 380 "../HPL_dlocswpN.c"
          *A2 = *mem_287;
# 380 "../HPL_dlocswpN.c"
          A2 += lda;
# 380 "../HPL_dlocswpN.c"
          mem_288 = Wr0 + 31;
# 380 "../HPL_dlocswpN.c"
          *A2 = *mem_288;
# 380 "../HPL_dlocswpN.c"
          A2 += lda;
          __CrestLoad(12006, (unsigned long )(& i), (long long )i);
          __CrestLoad(12005, (unsigned long )0, (long long )32);
          __CrestApply2(12004, 0, (long long )(i + 32));
          __CrestStore(12007, (unsigned long )(& i));
# 352 "../HPL_dlocswpN.c"
          i += 32;
# 352 "../HPL_dlocswpN.c"
          Wr0 += 32;
        }
        while_break___7: ;
        }
        __CrestLoad(12008, (unsigned long )0, (long long )0);
        __CrestStore(12009, (unsigned long )(& i));
# 384 "../HPL_dlocswpN.c"
        i = 0;
        {
# 384 "../HPL_dlocswpN.c"
        while (1) {
          while_continue___8: ;
          {
          __CrestLoad(12012, (unsigned long )(& i), (long long )i);
          __CrestLoad(12011, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(12010, 16, (long long )(i < nr));
# 384 "../HPL_dlocswpN.c"
          if (i < nr) {
            __CrestBranch(12013, 4765, 1);

          } else {
            __CrestBranch(12014, 4766, 0);
# 384 "../HPL_dlocswpN.c"
            goto while_break___8;
          }
          }
# 384 "../HPL_dlocswpN.c"
          mem_289 = Wr0 + i;
# 384 "../HPL_dlocswpN.c"
          *A2 = *mem_289;
          __CrestLoad(12017, (unsigned long )(& i), (long long )i);
          __CrestLoad(12016, (unsigned long )0, (long long )1);
          __CrestApply2(12015, 0, (long long )(i + 1));
          __CrestStore(12018, (unsigned long )(& i));
# 384 "../HPL_dlocswpN.c"
          i ++;
# 384 "../HPL_dlocswpN.c"
          A2 += lda;
        }
        while_break___8: ;
        }
      } else {
        __CrestBranch(11996, 4769, 0);

      }
      }
      }
    }
    }
  } else {
    __CrestBranch(11886, 4770, 0);
    __CrestLoad(12019, (unsigned long )0, (long long )0);
    __CrestStore(12020, (unsigned long )(& i));
# 394 "../HPL_dlocswpN.c"
    i = 0;
    {
# 394 "../HPL_dlocswpN.c"
    while (1) {
      while_continue___9: ;
      {
      __CrestLoad(12023, (unsigned long )(& i), (long long )i);
      __CrestLoad(12022, (unsigned long )(& nu), (long long )nu);
      __CrestApply2(12021, 16, (long long )(i < nu));
# 394 "../HPL_dlocswpN.c"
      if (i < nu) {
        __CrestBranch(12024, 4775, 1);

      } else {
        __CrestBranch(12025, 4776, 0);
# 394 "../HPL_dlocswpN.c"
        goto while_break___9;
      }
      }
# 397 "../HPL_dlocswpN.c"
      mem_290 = Wr0 + 0;
# 397 "../HPL_dlocswpN.c"
      *L = *mem_290;
# 397 "../HPL_dlocswpN.c"
      L += n0;
# 399 "../HPL_dlocswpN.c"
      mem_291 = Wr0 + 1;
# 399 "../HPL_dlocswpN.c"
      *L = *mem_291;
# 399 "../HPL_dlocswpN.c"
      L += n0;
# 402 "../HPL_dlocswpN.c"
      mem_292 = Wr0 + 2;
# 402 "../HPL_dlocswpN.c"
      *L = *mem_292;
# 402 "../HPL_dlocswpN.c"
      L += n0;
# 402 "../HPL_dlocswpN.c"
      mem_293 = Wr0 + 3;
# 402 "../HPL_dlocswpN.c"
      *L = *mem_293;
# 402 "../HPL_dlocswpN.c"
      L += n0;
# 405 "../HPL_dlocswpN.c"
      mem_294 = Wr0 + 4;
# 405 "../HPL_dlocswpN.c"
      *L = *mem_294;
# 405 "../HPL_dlocswpN.c"
      L += n0;
# 405 "../HPL_dlocswpN.c"
      mem_295 = Wr0 + 5;
# 405 "../HPL_dlocswpN.c"
      *L = *mem_295;
# 405 "../HPL_dlocswpN.c"
      L += n0;
# 406 "../HPL_dlocswpN.c"
      mem_296 = Wr0 + 6;
# 406 "../HPL_dlocswpN.c"
      *L = *mem_296;
# 406 "../HPL_dlocswpN.c"
      L += n0;
# 406 "../HPL_dlocswpN.c"
      mem_297 = Wr0 + 7;
# 406 "../HPL_dlocswpN.c"
      *L = *mem_297;
# 406 "../HPL_dlocswpN.c"
      L += n0;
# 409 "../HPL_dlocswpN.c"
      mem_298 = Wr0 + 8;
# 409 "../HPL_dlocswpN.c"
      *L = *mem_298;
# 409 "../HPL_dlocswpN.c"
      L += n0;
# 409 "../HPL_dlocswpN.c"
      mem_299 = Wr0 + 9;
# 409 "../HPL_dlocswpN.c"
      *L = *mem_299;
# 409 "../HPL_dlocswpN.c"
      L += n0;
# 410 "../HPL_dlocswpN.c"
      mem_300 = Wr0 + 10;
# 410 "../HPL_dlocswpN.c"
      *L = *mem_300;
# 410 "../HPL_dlocswpN.c"
      L += n0;
# 410 "../HPL_dlocswpN.c"
      mem_301 = Wr0 + 11;
# 410 "../HPL_dlocswpN.c"
      *L = *mem_301;
# 410 "../HPL_dlocswpN.c"
      L += n0;
# 411 "../HPL_dlocswpN.c"
      mem_302 = Wr0 + 12;
# 411 "../HPL_dlocswpN.c"
      *L = *mem_302;
# 411 "../HPL_dlocswpN.c"
      L += n0;
# 411 "../HPL_dlocswpN.c"
      mem_303 = Wr0 + 13;
# 411 "../HPL_dlocswpN.c"
      *L = *mem_303;
# 411 "../HPL_dlocswpN.c"
      L += n0;
# 412 "../HPL_dlocswpN.c"
      mem_304 = Wr0 + 14;
# 412 "../HPL_dlocswpN.c"
      *L = *mem_304;
# 412 "../HPL_dlocswpN.c"
      L += n0;
# 412 "../HPL_dlocswpN.c"
      mem_305 = Wr0 + 15;
# 412 "../HPL_dlocswpN.c"
      *L = *mem_305;
# 412 "../HPL_dlocswpN.c"
      L += n0;
# 415 "../HPL_dlocswpN.c"
      mem_306 = Wr0 + 16;
# 415 "../HPL_dlocswpN.c"
      *L = *mem_306;
# 415 "../HPL_dlocswpN.c"
      L += n0;
# 415 "../HPL_dlocswpN.c"
      mem_307 = Wr0 + 17;
# 415 "../HPL_dlocswpN.c"
      *L = *mem_307;
# 415 "../HPL_dlocswpN.c"
      L += n0;
# 416 "../HPL_dlocswpN.c"
      mem_308 = Wr0 + 18;
# 416 "../HPL_dlocswpN.c"
      *L = *mem_308;
# 416 "../HPL_dlocswpN.c"
      L += n0;
# 416 "../HPL_dlocswpN.c"
      mem_309 = Wr0 + 19;
# 416 "../HPL_dlocswpN.c"
      *L = *mem_309;
# 416 "../HPL_dlocswpN.c"
      L += n0;
# 417 "../HPL_dlocswpN.c"
      mem_310 = Wr0 + 20;
# 417 "../HPL_dlocswpN.c"
      *L = *mem_310;
# 417 "../HPL_dlocswpN.c"
      L += n0;
# 417 "../HPL_dlocswpN.c"
      mem_311 = Wr0 + 21;
# 417 "../HPL_dlocswpN.c"
      *L = *mem_311;
# 417 "../HPL_dlocswpN.c"
      L += n0;
# 418 "../HPL_dlocswpN.c"
      mem_312 = Wr0 + 22;
# 418 "../HPL_dlocswpN.c"
      *L = *mem_312;
# 418 "../HPL_dlocswpN.c"
      L += n0;
# 418 "../HPL_dlocswpN.c"
      mem_313 = Wr0 + 23;
# 418 "../HPL_dlocswpN.c"
      *L = *mem_313;
# 418 "../HPL_dlocswpN.c"
      L += n0;
# 419 "../HPL_dlocswpN.c"
      mem_314 = Wr0 + 24;
# 419 "../HPL_dlocswpN.c"
      *L = *mem_314;
# 419 "../HPL_dlocswpN.c"
      L += n0;
# 419 "../HPL_dlocswpN.c"
      mem_315 = Wr0 + 25;
# 419 "../HPL_dlocswpN.c"
      *L = *mem_315;
# 419 "../HPL_dlocswpN.c"
      L += n0;
# 420 "../HPL_dlocswpN.c"
      mem_316 = Wr0 + 26;
# 420 "../HPL_dlocswpN.c"
      *L = *mem_316;
# 420 "../HPL_dlocswpN.c"
      L += n0;
# 420 "../HPL_dlocswpN.c"
      mem_317 = Wr0 + 27;
# 420 "../HPL_dlocswpN.c"
      *L = *mem_317;
# 420 "../HPL_dlocswpN.c"
      L += n0;
# 421 "../HPL_dlocswpN.c"
      mem_318 = Wr0 + 28;
# 421 "../HPL_dlocswpN.c"
      *L = *mem_318;
# 421 "../HPL_dlocswpN.c"
      L += n0;
# 421 "../HPL_dlocswpN.c"
      mem_319 = Wr0 + 29;
# 421 "../HPL_dlocswpN.c"
      *L = *mem_319;
# 421 "../HPL_dlocswpN.c"
      L += n0;
# 422 "../HPL_dlocswpN.c"
      mem_320 = Wr0 + 30;
# 422 "../HPL_dlocswpN.c"
      *L = *mem_320;
# 422 "../HPL_dlocswpN.c"
      L += n0;
# 422 "../HPL_dlocswpN.c"
      mem_321 = Wr0 + 31;
# 422 "../HPL_dlocswpN.c"
      *L = *mem_321;
# 422 "../HPL_dlocswpN.c"
      L += n0;
      __CrestLoad(12028, (unsigned long )(& i), (long long )i);
      __CrestLoad(12027, (unsigned long )0, (long long )32);
      __CrestApply2(12026, 0, (long long )(i + 32));
      __CrestStore(12029, (unsigned long )(& i));
# 394 "../HPL_dlocswpN.c"
      i += 32;
# 394 "../HPL_dlocswpN.c"
      Wr0 += 32;
    }
    while_break___9: ;
    }
    __CrestLoad(12030, (unsigned long )0, (long long )0);
    __CrestStore(12031, (unsigned long )(& i));
# 426 "../HPL_dlocswpN.c"
    i = 0;
    {
# 426 "../HPL_dlocswpN.c"
    while (1) {
      while_continue___10: ;
      {
      __CrestLoad(12034, (unsigned long )(& i), (long long )i);
      __CrestLoad(12033, (unsigned long )(& nr), (long long )nr);
      __CrestApply2(12032, 16, (long long )(i < nr));
# 426 "../HPL_dlocswpN.c"
      if (i < nr) {
        __CrestBranch(12035, 4784, 1);

      } else {
        __CrestBranch(12036, 4785, 0);
# 426 "../HPL_dlocswpN.c"
        goto while_break___10;
      }
      }
# 426 "../HPL_dlocswpN.c"
      mem_322 = Wr0 + i;
# 426 "../HPL_dlocswpN.c"
      *L = *mem_322;
      __CrestLoad(12039, (unsigned long )(& i), (long long )i);
      __CrestLoad(12038, (unsigned long )0, (long long )1);
      __CrestApply2(12037, 0, (long long )(i + 1));
      __CrestStore(12040, (unsigned long )(& i));
# 426 "../HPL_dlocswpN.c"
      i ++;
# 426 "../HPL_dlocswpN.c"
      L += n0;
    }
    while_break___10: ;
    }
    {
# 430 "../HPL_dlocswpN.c"
    mem_323 = PANEL->DINFO;
    {
    __CrestLoad(12043, (unsigned long )mem_323, (long long )*mem_323);
    __CrestLoad(12042, (unsigned long )0, (long long )0.0);
    __CrestApply2(12041, 12, (long long )(*mem_323 == 0.0));
# 430 "../HPL_dlocswpN.c"
    if (*mem_323 == 0.0) {
      __CrestBranch(12044, 4791, 1);
# 431 "../HPL_dlocswpN.c"
      mem_324 = PANEL->DINFO;
# 431 "../HPL_dlocswpN.c"
      *mem_324 = (double )((PANEL->ia + (int )JJ) + 1);
    } else {
      __CrestBranch(12045, 4792, 0);

    }
    }
    }
  }
  }

  {
  __CrestReturn(12046);
# 60 "../HPL_dlocswpN.c"
  return;
  }
}
}
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocswpT(HPL_T_panel *PANEL , int const II , int const JJ , double *WORK ) ;
# 60 "../HPL_dlocswpT.c"
void HPL_dlocswpT(HPL_T_panel *PANEL , int const II , int const JJ , double *WORK )
{
  double gmax ;
  double *A1 ;
  double *A2 ;
  double *L ;
  double *Wr0 ;
  double *Wmx ;
  int ilindx ;
  int lda ;
  int myrow ;
  int n0 ;
  int nr ;
  int nu ;
  int i ;
  double tmp ;
  double tmp___0 ;
  double tmp___1 ;
  double tmp___2 ;
  double tmp___3 ;
  double tmp___4 ;
  double tmp___5 ;
  double tmp___6 ;
  double tmp___7 ;
  double tmp___8 ;
  double tmp___9 ;
  double tmp___10 ;
  double tmp___11 ;
  double tmp___12 ;
  double tmp___13 ;
  double tmp___14 ;
  double tmp___15 ;
  double tmp___16 ;
  double tmp___17 ;
  double tmp___18 ;
  double tmp___19 ;
  double tmp___20 ;
  double tmp___21 ;
  double tmp___22 ;
  double tmp___23 ;
  double tmp___24 ;
  double tmp___25 ;
  double tmp___26 ;
  double tmp___27 ;
  double tmp___28 ;
  double tmp___29 ;
  double tmp___30 ;
  double tmp___31 ;
  double tmp___32 ;
  double tmp___33 ;
  double tmp___34 ;
  double tmp___35 ;
  double tmp___36 ;
  double tmp___37 ;
  double tmp___38 ;
  double tmp___39 ;
  double tmp___40 ;
  double tmp___41 ;
  double tmp___42 ;
  double tmp___43 ;
  double tmp___44 ;
  double tmp___45 ;
  double tmp___46 ;
  double tmp___47 ;
  double tmp___48 ;
  double tmp___49 ;
  double tmp___50 ;
  double tmp___51 ;
  double tmp___52 ;
  double tmp___53 ;
  double tmp___54 ;
  double tmp___55 ;
  double tmp___56 ;
  double tmp___57 ;
  double tmp___58 ;
  double tmp___59 ;
  double tmp___60 ;
  double tmp___61 ;
  double tmp___62 ;
  double tmp___63 ;
  double tmp___64 ;
  struct HPL_S_grid *mem_84 ;
  double *mem_85 ;
  double *mem_86 ;
  double *mem_87 ;
  double *mem_88 ;
  double *mem_89 ;
  double *mem_90 ;
  double *mem_91 ;
  double *mem_92 ;
  double *mem_93 ;
  double *mem_94 ;
  double *mem_95 ;
  double *mem_96 ;
  double *mem_97 ;
  double *mem_98 ;
  double *mem_99 ;
  double *mem_100 ;
  double *mem_101 ;
  double *mem_102 ;
  double *mem_103 ;
  double *mem_104 ;
  double *mem_105 ;
  double *mem_106 ;
  double *mem_107 ;
  double *mem_108 ;
  double *mem_109 ;
  double *mem_110 ;
  double *mem_111 ;
  double *mem_112 ;
  double *mem_113 ;
  double *mem_114 ;
  double *mem_115 ;
  double *mem_116 ;
  double *mem_117 ;
  double *mem_118 ;
  double *mem_119 ;
  double *mem_120 ;
  double *mem_121 ;
  double *mem_122 ;
  double *mem_123 ;
  double *mem_124 ;
  double *mem_125 ;
  double *mem_126 ;
  double *mem_127 ;
  double *mem_128 ;
  double *mem_129 ;
  double *mem_130 ;
  double *mem_131 ;
  double *mem_132 ;
  double *mem_133 ;
  double *mem_134 ;
  double *mem_135 ;
  double *mem_136 ;
  double *mem_137 ;
  double *mem_138 ;
  double *mem_139 ;
  double *mem_140 ;
  double *mem_141 ;
  double *mem_142 ;
  double *mem_143 ;
  double *mem_144 ;
  double *mem_145 ;
  double *mem_146 ;
  double *mem_147 ;
  double *mem_148 ;
  double *mem_149 ;
  double *mem_150 ;
  double *mem_151 ;
  double *mem_152 ;
  double *mem_153 ;
  double *mem_154 ;
  double *mem_155 ;
  double *mem_156 ;
  double *mem_157 ;
  double *mem_158 ;
  double *mem_159 ;
  double *mem_160 ;
  double *mem_161 ;
  double *mem_162 ;
  double *mem_163 ;
  double *mem_164 ;
  double *mem_165 ;
  double *mem_166 ;
  double *mem_167 ;
  double *mem_168 ;
  double *mem_169 ;
  double *mem_170 ;
  double *mem_171 ;
  double *mem_172 ;
  double *mem_173 ;
  double *mem_174 ;
  double *mem_175 ;
  double *mem_176 ;
  double *mem_177 ;
  double *mem_178 ;
  double *mem_179 ;
  double *mem_180 ;
  double *mem_181 ;
  double *mem_182 ;
  double *mem_183 ;
  double *mem_184 ;
  double *mem_185 ;
  double *mem_186 ;
  double *mem_187 ;
  double *mem_188 ;
  double *mem_189 ;
  double *mem_190 ;
  double *mem_191 ;
  double *mem_192 ;
  double *mem_193 ;
  double *mem_194 ;
  double *mem_195 ;
  double *mem_196 ;
  double *mem_197 ;
  double *mem_198 ;
  double *mem_199 ;
  double *mem_200 ;
  double *mem_201 ;
  double *mem_202 ;
  double *mem_203 ;
  double *mem_204 ;
  double *mem_205 ;
  double *mem_206 ;
  double *mem_207 ;
  double *mem_208 ;
  double *mem_209 ;
  double *mem_210 ;
  double *mem_211 ;
  double *mem_212 ;
  double *mem_213 ;
  double *mem_214 ;
  double *mem_215 ;
  double *mem_216 ;
  double *mem_217 ;
  double *mem_218 ;
  double *mem_219 ;
  double *mem_220 ;
  double *mem_221 ;
  double *mem_222 ;
  double *mem_223 ;
  double *mem_224 ;
  double *mem_225 ;
  double *mem_226 ;
  double *mem_227 ;
  double *mem_228 ;
  double *mem_229 ;
  double *mem_230 ;
  double *mem_231 ;
  double *mem_232 ;
  double *mem_233 ;
  double *mem_234 ;
  double *mem_235 ;
  double *mem_236 ;
  double *mem_237 ;
  double *mem_238 ;
  double *mem_239 ;
  double *mem_240 ;
  double *mem_241 ;
  double *mem_242 ;
  double *mem_243 ;
  double *mem_244 ;
  double *mem_245 ;
  double *mem_246 ;
  double *mem_247 ;
  double *mem_248 ;
  double *mem_249 ;
  double *mem_250 ;
  double *mem_251 ;
  double *mem_252 ;
  double *mem_253 ;
  double *mem_254 ;
  double *mem_255 ;
  double *mem_256 ;
  double *mem_257 ;
  double *mem_258 ;
  double *mem_259 ;
  double *mem_260 ;
  double *mem_261 ;
  double *mem_262 ;
  double *mem_263 ;
  double *mem_264 ;
  double *mem_265 ;
  double *mem_266 ;
  double *mem_267 ;
  double *mem_268 ;
  double *mem_269 ;
  double *mem_270 ;
  double *mem_271 ;
  double *mem_272 ;
  double *mem_273 ;
  double *mem_274 ;
  double *mem_275 ;
  double *mem_276 ;
  double *mem_277 ;
  double *mem_278 ;
  double *mem_279 ;
  double *mem_280 ;
  double *mem_281 ;
  double *mem_282 ;
  double *mem_283 ;
  double *mem_284 ;
  double *mem_285 ;
  double *mem_286 ;
  double *mem_287 ;
  double *mem_288 ;
  double *mem_289 ;
  double *mem_290 ;
  double *mem_291 ;
  double *mem_292 ;
  double *mem_293 ;
  double *mem_294 ;
  double *mem_295 ;
  double *mem_296 ;
  double *mem_297 ;
  double *mem_298 ;
  double *mem_299 ;
  double *mem_300 ;
  double *mem_301 ;
  double *mem_302 ;
  double *mem_303 ;
  double *mem_304 ;
  double *mem_305 ;
  double *mem_306 ;
  double *mem_307 ;
  double *mem_308 ;
  double *mem_309 ;
  double *mem_310 ;
  double *mem_311 ;
  double *mem_312 ;
  double *mem_313 ;
  double *mem_314 ;
  double *mem_315 ;
  double *mem_316 ;
  double *mem_317 ;
  double *mem_318 ;
  double *mem_319 ;
  double *mem_320 ;
  double *mem_321 ;
  double *mem_322 ;
  double *mem_323 ;
  double *mem_324 ;
  double *mem_325 ;
  double *mem_326 ;
  double *mem_327 ;
  double *mem_328 ;
  double *mem_329 ;
  double *mem_330 ;
  double *mem_331 ;
  double *mem_332 ;
  double *mem_333 ;
  double *mem_334 ;
  double *mem_335 ;
  double *mem_336 ;
  double *mem_337 ;
  double *mem_338 ;
  double *mem_339 ;
  double *mem_340 ;
  double *mem_341 ;
  double *mem_342 ;
  double *mem_343 ;
  double *mem_344 ;
  double *mem_345 ;
  double *mem_346 ;
  double *mem_347 ;
  double *mem_348 ;
  double *mem_349 ;
  double *mem_350 ;
  double *mem_351 ;
  double *mem_352 ;
  double *mem_353 ;
  double *mem_354 ;
  double *mem_355 ;
  double *mem_356 ;
  double *mem_357 ;
  double *mem_358 ;
  double *mem_359 ;
  double *mem_360 ;
  double *mem_361 ;
  double *mem_362 ;
  double *mem_363 ;
  double *mem_364 ;
  double *mem_365 ;
  double *mem_366 ;
  double *mem_367 ;
  double *mem_368 ;
  double *mem_369 ;
  double *mem_370 ;
  double *mem_371 ;
  double *mem_372 ;
  double *mem_373 ;
  double *mem_374 ;
  double *mem_375 ;
  double *mem_376 ;
  double *mem_377 ;
  double *mem_378 ;
  double *mem_379 ;
  double *mem_380 ;
  double *mem_381 ;
  double *mem_382 ;
  double *mem_383 ;
  double *mem_384 ;
  double *mem_385 ;
  double *mem_386 ;
  double *mem_387 ;
  double *mem_388 ;
  double *mem_389 ;
  double *mem_390 ;
  double *mem_391 ;
  double *mem_392 ;
  double *mem_393 ;
  double *mem_394 ;
  double *mem_395 ;
  double *mem_396 ;
  double *mem_397 ;
  double *mem_398 ;
  double *mem_399 ;
  double *mem_400 ;
  double *mem_401 ;
  double *mem_402 ;
  double *mem_403 ;
  double *mem_404 ;
  double *mem_405 ;
  double *mem_406 ;
  double *mem_407 ;
  double *mem_408 ;
  double *mem_409 ;
  double *mem_410 ;
  double *mem_411 ;
  double *mem_412 ;
  double *mem_413 ;
  double *mem_414 ;
  double *mem_415 ;
  double *mem_416 ;
  double *mem_417 ;
  double *mem_418 ;
  double *mem_419 ;
  double *mem_420 ;
  double *mem_421 ;
  double *mem_422 ;
  double *mem_423 ;
  double *mem_424 ;
  double *mem_425 ;
  double *mem_426 ;
  double *mem_427 ;
  double *mem_428 ;
  double *mem_429 ;
  double *mem_430 ;
  double *mem_431 ;
  double *mem_432 ;
  double *mem_433 ;
  double *mem_434 ;
  double *mem_435 ;
  double *mem_436 ;
  double *mem_437 ;
  double *mem_438 ;
  double *mem_439 ;
  double *mem_440 ;
  double *mem_441 ;
  double *mem_442 ;
  double *mem_443 ;
  double *mem_444 ;
  double *mem_445 ;
  double *mem_446 ;
  double *mem_447 ;
  double *mem_448 ;
  double *mem_449 ;
  double *mem_450 ;
  double *mem_451 ;
  double *mem_452 ;
  double *mem_453 ;
  double *mem_454 ;
  double *mem_455 ;
  double *mem_456 ;
  double *mem_457 ;
  double *mem_458 ;
  double *mem_459 ;
  double *mem_460 ;
  double *mem_461 ;
  double *mem_462 ;
  double *mem_463 ;
  double *mem_464 ;
  double *mem_465 ;
  double *mem_466 ;
  double *mem_467 ;
  double *mem_468 ;
  double *mem_469 ;
  double *mem_470 ;
  double *mem_471 ;
  double *mem_472 ;
  double *mem_473 ;
  double *mem_474 ;
  double *mem_475 ;
  double *mem_476 ;
  double *mem_477 ;
  double *mem_478 ;
  double *mem_479 ;
  double *mem_480 ;
  double *mem_481 ;
  double *mem_482 ;
  double *mem_483 ;
  double *mem_484 ;
  double *mem_485 ;
  double *mem_486 ;
  double *mem_487 ;
  double *mem_488 ;
  double *mem_489 ;

  {
  __CrestCall(12049, 79);
  __CrestStore(12048, (unsigned long )(& JJ));
  __CrestStore(12047, (unsigned long )(& II));
# 121 "../HPL_dlocswpT.c"
  mem_84 = PANEL->grid;
  __CrestLoad(12050, (unsigned long )(& mem_84->myrow), (long long )mem_84->myrow);
  __CrestStore(12051, (unsigned long )(& myrow));
# 121 "../HPL_dlocswpT.c"
  myrow = mem_84->myrow;
  __CrestLoad(12052, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(12053, (unsigned long )(& n0));
# 121 "../HPL_dlocswpT.c"
  n0 = PANEL->jb;
  __CrestLoad(12054, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(12055, (unsigned long )(& lda));
# 121 "../HPL_dlocswpT.c"
  lda = PANEL->lda;
# 123 "../HPL_dlocswpT.c"
  Wmx = WORK + 4;
# 123 "../HPL_dlocswpT.c"
  Wr0 = Wmx + n0;
# 123 "../HPL_dlocswpT.c"
  mem_85 = WORK + 0;
# 123 "../HPL_dlocswpT.c"
  gmax = *mem_85;
# 123 "../HPL_dlocswpT.c"
  mem_86 = Wmx + JJ;
# 123 "../HPL_dlocswpT.c"
  *mem_86 = gmax;
  __CrestLoad(12060, (unsigned long )(& n0), (long long )n0);
  __CrestLoad(12059, (unsigned long )0, (long long )5);
  __CrestApply2(12058, 9, (long long )((unsigned int )n0 >> 5));
  __CrestLoad(12057, (unsigned long )0, (long long )5);
  __CrestApply2(12056, 8, (long long )(((unsigned int )n0 >> 5) << 5));
  __CrestStore(12061, (unsigned long )(& nu));
# 124 "../HPL_dlocswpT.c"
  nu = (int )(((unsigned int )n0 >> 5) << 5);
  __CrestLoad(12064, (unsigned long )(& n0), (long long )n0);
  __CrestLoad(12063, (unsigned long )(& nu), (long long )nu);
  __CrestApply2(12062, 1, (long long )(n0 - nu));
  __CrestStore(12065, (unsigned long )(& nr));
# 126 "../HPL_dlocswpT.c"
  nr = n0 - nu;
# 130 "../HPL_dlocswpT.c"
  L = (PANEL->L1 + 0) + JJ * (int const )n0;
  {
  __CrestLoad(12068, (unsigned long )(& gmax), (long long )gmax);
  __CrestLoad(12067, (unsigned long )0, (long long )0.0);
  __CrestApply2(12066, 13, (long long )(gmax != 0.0));
# 134 "../HPL_dlocswpT.c"
  if (gmax != 0.0) {
    __CrestBranch(12069, 4797, 1);
    {
    __CrestLoad(12073, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(12072, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(12071, 12, (long long )(myrow == PANEL->prow));
# 139 "../HPL_dlocswpT.c"
    if (myrow == PANEL->prow) {
      __CrestBranch(12074, 4798, 1);
      {
# 144 "../HPL_dlocswpT.c"
      mem_87 = WORK + 3;
      {
      __CrestLoad(12078, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(12077, (unsigned long )mem_87, (long long )*mem_87);
      __CrestApply2(12076, 12, (long long )(myrow == (int )*mem_87));
# 144 "../HPL_dlocswpT.c"
      if (myrow == (int )*mem_87) {
        __CrestBranch(12079, 4801, 1);
# 149 "../HPL_dlocswpT.c"
        mem_88 = WORK + 1;
        __CrestLoad(12081, (unsigned long )mem_88, (long long )*mem_88);
        __CrestStore(12082, (unsigned long )(& ilindx));
# 149 "../HPL_dlocswpT.c"
        ilindx = (int )*mem_88;
        {
        __CrestLoad(12085, (unsigned long )(& ilindx), (long long )ilindx);
        __CrestLoad(12084, (unsigned long )0, (long long )0);
        __CrestApply2(12083, 13, (long long )(ilindx != 0));
# 149 "../HPL_dlocswpT.c"
        if (ilindx != 0) {
          __CrestBranch(12086, 4803, 1);
# 154 "../HPL_dlocswpT.c"
          A1 = (PANEL->A + II) + 0;
# 155 "../HPL_dlocswpT.c"
          A2 = (A1 + ilindx) + 0;
          __CrestLoad(12088, (unsigned long )0, (long long )0);
          __CrestStore(12089, (unsigned long )(& i));
# 157 "../HPL_dlocswpT.c"
          i = 0;
          {
# 157 "../HPL_dlocswpT.c"
          while (1) {
            while_continue: ;
            {
            __CrestLoad(12092, (unsigned long )(& i), (long long )i);
            __CrestLoad(12091, (unsigned long )(& nu), (long long )nu);
            __CrestApply2(12090, 16, (long long )(i < nu));
# 157 "../HPL_dlocswpT.c"
            if (i < nu) {
              __CrestBranch(12093, 4808, 1);

            } else {
              __CrestBranch(12094, 4809, 0);
# 157 "../HPL_dlocswpT.c"
              goto while_break;
            }
            }
# 161 "../HPL_dlocswpT.c"
            mem_89 = Wmx + 0;
# 161 "../HPL_dlocswpT.c"
            tmp = *mem_89;
# 161 "../HPL_dlocswpT.c"
            *A1 = tmp;
# 161 "../HPL_dlocswpT.c"
            mem_90 = L + 0;
# 161 "../HPL_dlocswpT.c"
            *mem_90 = tmp;
# 161 "../HPL_dlocswpT.c"
            mem_91 = Wr0 + 0;
# 161 "../HPL_dlocswpT.c"
            *A2 = *mem_91;
# 161 "../HPL_dlocswpT.c"
            A1 += lda;
# 161 "../HPL_dlocswpT.c"
            A2 += lda;
# 163 "../HPL_dlocswpT.c"
            mem_92 = Wmx + 1;
# 163 "../HPL_dlocswpT.c"
            tmp___0 = *mem_92;
# 163 "../HPL_dlocswpT.c"
            *A1 = tmp___0;
# 163 "../HPL_dlocswpT.c"
            mem_93 = L + 1;
# 163 "../HPL_dlocswpT.c"
            *mem_93 = tmp___0;
# 163 "../HPL_dlocswpT.c"
            mem_94 = Wr0 + 1;
# 163 "../HPL_dlocswpT.c"
            *A2 = *mem_94;
# 163 "../HPL_dlocswpT.c"
            A1 += lda;
# 163 "../HPL_dlocswpT.c"
            A2 += lda;
# 166 "../HPL_dlocswpT.c"
            mem_95 = Wmx + 2;
# 166 "../HPL_dlocswpT.c"
            tmp___1 = *mem_95;
# 166 "../HPL_dlocswpT.c"
            *A1 = tmp___1;
# 166 "../HPL_dlocswpT.c"
            mem_96 = L + 2;
# 166 "../HPL_dlocswpT.c"
            *mem_96 = tmp___1;
# 166 "../HPL_dlocswpT.c"
            mem_97 = Wr0 + 2;
# 166 "../HPL_dlocswpT.c"
            *A2 = *mem_97;
# 166 "../HPL_dlocswpT.c"
            A1 += lda;
# 166 "../HPL_dlocswpT.c"
            A2 += lda;
# 167 "../HPL_dlocswpT.c"
            mem_98 = Wmx + 3;
# 167 "../HPL_dlocswpT.c"
            tmp___2 = *mem_98;
# 167 "../HPL_dlocswpT.c"
            *A1 = tmp___2;
# 167 "../HPL_dlocswpT.c"
            mem_99 = L + 3;
# 167 "../HPL_dlocswpT.c"
            *mem_99 = tmp___2;
# 167 "../HPL_dlocswpT.c"
            mem_100 = Wr0 + 3;
# 167 "../HPL_dlocswpT.c"
            *A2 = *mem_100;
# 167 "../HPL_dlocswpT.c"
            A1 += lda;
# 167 "../HPL_dlocswpT.c"
            A2 += lda;
# 170 "../HPL_dlocswpT.c"
            mem_101 = Wmx + 4;
# 170 "../HPL_dlocswpT.c"
            tmp___3 = *mem_101;
# 170 "../HPL_dlocswpT.c"
            *A1 = tmp___3;
# 170 "../HPL_dlocswpT.c"
            mem_102 = L + 4;
# 170 "../HPL_dlocswpT.c"
            *mem_102 = tmp___3;
# 170 "../HPL_dlocswpT.c"
            mem_103 = Wr0 + 4;
# 170 "../HPL_dlocswpT.c"
            *A2 = *mem_103;
# 170 "../HPL_dlocswpT.c"
            A1 += lda;
# 170 "../HPL_dlocswpT.c"
            A2 += lda;
# 171 "../HPL_dlocswpT.c"
            mem_104 = Wmx + 5;
# 171 "../HPL_dlocswpT.c"
            tmp___4 = *mem_104;
# 171 "../HPL_dlocswpT.c"
            *A1 = tmp___4;
# 171 "../HPL_dlocswpT.c"
            mem_105 = L + 5;
# 171 "../HPL_dlocswpT.c"
            *mem_105 = tmp___4;
# 171 "../HPL_dlocswpT.c"
            mem_106 = Wr0 + 5;
# 171 "../HPL_dlocswpT.c"
            *A2 = *mem_106;
# 171 "../HPL_dlocswpT.c"
            A1 += lda;
# 171 "../HPL_dlocswpT.c"
            A2 += lda;
# 172 "../HPL_dlocswpT.c"
            mem_107 = Wmx + 6;
# 172 "../HPL_dlocswpT.c"
            tmp___5 = *mem_107;
# 172 "../HPL_dlocswpT.c"
            *A1 = tmp___5;
# 172 "../HPL_dlocswpT.c"
            mem_108 = L + 6;
# 172 "../HPL_dlocswpT.c"
            *mem_108 = tmp___5;
# 172 "../HPL_dlocswpT.c"
            mem_109 = Wr0 + 6;
# 172 "../HPL_dlocswpT.c"
            *A2 = *mem_109;
# 172 "../HPL_dlocswpT.c"
            A1 += lda;
# 172 "../HPL_dlocswpT.c"
            A2 += lda;
# 173 "../HPL_dlocswpT.c"
            mem_110 = Wmx + 7;
# 173 "../HPL_dlocswpT.c"
            tmp___6 = *mem_110;
# 173 "../HPL_dlocswpT.c"
            *A1 = tmp___6;
# 173 "../HPL_dlocswpT.c"
            mem_111 = L + 7;
# 173 "../HPL_dlocswpT.c"
            *mem_111 = tmp___6;
# 173 "../HPL_dlocswpT.c"
            mem_112 = Wr0 + 7;
# 173 "../HPL_dlocswpT.c"
            *A2 = *mem_112;
# 173 "../HPL_dlocswpT.c"
            A1 += lda;
# 173 "../HPL_dlocswpT.c"
            A2 += lda;
# 176 "../HPL_dlocswpT.c"
            mem_113 = Wmx + 8;
# 176 "../HPL_dlocswpT.c"
            tmp___7 = *mem_113;
# 176 "../HPL_dlocswpT.c"
            *A1 = tmp___7;
# 176 "../HPL_dlocswpT.c"
            mem_114 = L + 8;
# 176 "../HPL_dlocswpT.c"
            *mem_114 = tmp___7;
# 176 "../HPL_dlocswpT.c"
            mem_115 = Wr0 + 8;
# 176 "../HPL_dlocswpT.c"
            *A2 = *mem_115;
# 176 "../HPL_dlocswpT.c"
            A1 += lda;
# 176 "../HPL_dlocswpT.c"
            A2 += lda;
# 177 "../HPL_dlocswpT.c"
            mem_116 = Wmx + 9;
# 177 "../HPL_dlocswpT.c"
            tmp___8 = *mem_116;
# 177 "../HPL_dlocswpT.c"
            *A1 = tmp___8;
# 177 "../HPL_dlocswpT.c"
            mem_117 = L + 9;
# 177 "../HPL_dlocswpT.c"
            *mem_117 = tmp___8;
# 177 "../HPL_dlocswpT.c"
            mem_118 = Wr0 + 9;
# 177 "../HPL_dlocswpT.c"
            *A2 = *mem_118;
# 177 "../HPL_dlocswpT.c"
            A1 += lda;
# 177 "../HPL_dlocswpT.c"
            A2 += lda;
# 178 "../HPL_dlocswpT.c"
            mem_119 = Wmx + 10;
# 178 "../HPL_dlocswpT.c"
            tmp___9 = *mem_119;
# 178 "../HPL_dlocswpT.c"
            *A1 = tmp___9;
# 178 "../HPL_dlocswpT.c"
            mem_120 = L + 10;
# 178 "../HPL_dlocswpT.c"
            *mem_120 = tmp___9;
# 178 "../HPL_dlocswpT.c"
            mem_121 = Wr0 + 10;
# 178 "../HPL_dlocswpT.c"
            *A2 = *mem_121;
# 178 "../HPL_dlocswpT.c"
            A1 += lda;
# 178 "../HPL_dlocswpT.c"
            A2 += lda;
# 179 "../HPL_dlocswpT.c"
            mem_122 = Wmx + 11;
# 179 "../HPL_dlocswpT.c"
            tmp___10 = *mem_122;
# 179 "../HPL_dlocswpT.c"
            *A1 = tmp___10;
# 179 "../HPL_dlocswpT.c"
            mem_123 = L + 11;
# 179 "../HPL_dlocswpT.c"
            *mem_123 = tmp___10;
# 179 "../HPL_dlocswpT.c"
            mem_124 = Wr0 + 11;
# 179 "../HPL_dlocswpT.c"
            *A2 = *mem_124;
# 179 "../HPL_dlocswpT.c"
            A1 += lda;
# 179 "../HPL_dlocswpT.c"
            A2 += lda;
# 180 "../HPL_dlocswpT.c"
            mem_125 = Wmx + 12;
# 180 "../HPL_dlocswpT.c"
            tmp___11 = *mem_125;
# 180 "../HPL_dlocswpT.c"
            *A1 = tmp___11;
# 180 "../HPL_dlocswpT.c"
            mem_126 = L + 12;
# 180 "../HPL_dlocswpT.c"
            *mem_126 = tmp___11;
# 180 "../HPL_dlocswpT.c"
            mem_127 = Wr0 + 12;
# 180 "../HPL_dlocswpT.c"
            *A2 = *mem_127;
# 180 "../HPL_dlocswpT.c"
            A1 += lda;
# 180 "../HPL_dlocswpT.c"
            A2 += lda;
# 181 "../HPL_dlocswpT.c"
            mem_128 = Wmx + 13;
# 181 "../HPL_dlocswpT.c"
            tmp___12 = *mem_128;
# 181 "../HPL_dlocswpT.c"
            *A1 = tmp___12;
# 181 "../HPL_dlocswpT.c"
            mem_129 = L + 13;
# 181 "../HPL_dlocswpT.c"
            *mem_129 = tmp___12;
# 181 "../HPL_dlocswpT.c"
            mem_130 = Wr0 + 13;
# 181 "../HPL_dlocswpT.c"
            *A2 = *mem_130;
# 181 "../HPL_dlocswpT.c"
            A1 += lda;
# 181 "../HPL_dlocswpT.c"
            A2 += lda;
# 182 "../HPL_dlocswpT.c"
            mem_131 = Wmx + 14;
# 182 "../HPL_dlocswpT.c"
            tmp___13 = *mem_131;
# 182 "../HPL_dlocswpT.c"
            *A1 = tmp___13;
# 182 "../HPL_dlocswpT.c"
            mem_132 = L + 14;
# 182 "../HPL_dlocswpT.c"
            *mem_132 = tmp___13;
# 182 "../HPL_dlocswpT.c"
            mem_133 = Wr0 + 14;
# 182 "../HPL_dlocswpT.c"
            *A2 = *mem_133;
# 182 "../HPL_dlocswpT.c"
            A1 += lda;
# 182 "../HPL_dlocswpT.c"
            A2 += lda;
# 183 "../HPL_dlocswpT.c"
            mem_134 = Wmx + 15;
# 183 "../HPL_dlocswpT.c"
            tmp___14 = *mem_134;
# 183 "../HPL_dlocswpT.c"
            *A1 = tmp___14;
# 183 "../HPL_dlocswpT.c"
            mem_135 = L + 15;
# 183 "../HPL_dlocswpT.c"
            *mem_135 = tmp___14;
# 183 "../HPL_dlocswpT.c"
            mem_136 = Wr0 + 15;
# 183 "../HPL_dlocswpT.c"
            *A2 = *mem_136;
# 183 "../HPL_dlocswpT.c"
            A1 += lda;
# 183 "../HPL_dlocswpT.c"
            A2 += lda;
# 186 "../HPL_dlocswpT.c"
            mem_137 = Wmx + 16;
# 186 "../HPL_dlocswpT.c"
            tmp___15 = *mem_137;
# 186 "../HPL_dlocswpT.c"
            *A1 = tmp___15;
# 186 "../HPL_dlocswpT.c"
            mem_138 = L + 16;
# 186 "../HPL_dlocswpT.c"
            *mem_138 = tmp___15;
# 186 "../HPL_dlocswpT.c"
            mem_139 = Wr0 + 16;
# 186 "../HPL_dlocswpT.c"
            *A2 = *mem_139;
# 186 "../HPL_dlocswpT.c"
            A1 += lda;
# 186 "../HPL_dlocswpT.c"
            A2 += lda;
# 187 "../HPL_dlocswpT.c"
            mem_140 = Wmx + 17;
# 187 "../HPL_dlocswpT.c"
            tmp___16 = *mem_140;
# 187 "../HPL_dlocswpT.c"
            *A1 = tmp___16;
# 187 "../HPL_dlocswpT.c"
            mem_141 = L + 17;
# 187 "../HPL_dlocswpT.c"
            *mem_141 = tmp___16;
# 187 "../HPL_dlocswpT.c"
            mem_142 = Wr0 + 17;
# 187 "../HPL_dlocswpT.c"
            *A2 = *mem_142;
# 187 "../HPL_dlocswpT.c"
            A1 += lda;
# 187 "../HPL_dlocswpT.c"
            A2 += lda;
# 188 "../HPL_dlocswpT.c"
            mem_143 = Wmx + 18;
# 188 "../HPL_dlocswpT.c"
            tmp___17 = *mem_143;
# 188 "../HPL_dlocswpT.c"
            *A1 = tmp___17;
# 188 "../HPL_dlocswpT.c"
            mem_144 = L + 18;
# 188 "../HPL_dlocswpT.c"
            *mem_144 = tmp___17;
# 188 "../HPL_dlocswpT.c"
            mem_145 = Wr0 + 18;
# 188 "../HPL_dlocswpT.c"
            *A2 = *mem_145;
# 188 "../HPL_dlocswpT.c"
            A1 += lda;
# 188 "../HPL_dlocswpT.c"
            A2 += lda;
# 189 "../HPL_dlocswpT.c"
            mem_146 = Wmx + 19;
# 189 "../HPL_dlocswpT.c"
            tmp___18 = *mem_146;
# 189 "../HPL_dlocswpT.c"
            *A1 = tmp___18;
# 189 "../HPL_dlocswpT.c"
            mem_147 = L + 19;
# 189 "../HPL_dlocswpT.c"
            *mem_147 = tmp___18;
# 189 "../HPL_dlocswpT.c"
            mem_148 = Wr0 + 19;
# 189 "../HPL_dlocswpT.c"
            *A2 = *mem_148;
# 189 "../HPL_dlocswpT.c"
            A1 += lda;
# 189 "../HPL_dlocswpT.c"
            A2 += lda;
# 190 "../HPL_dlocswpT.c"
            mem_149 = Wmx + 20;
# 190 "../HPL_dlocswpT.c"
            tmp___19 = *mem_149;
# 190 "../HPL_dlocswpT.c"
            *A1 = tmp___19;
# 190 "../HPL_dlocswpT.c"
            mem_150 = L + 20;
# 190 "../HPL_dlocswpT.c"
            *mem_150 = tmp___19;
# 190 "../HPL_dlocswpT.c"
            mem_151 = Wr0 + 20;
# 190 "../HPL_dlocswpT.c"
            *A2 = *mem_151;
# 190 "../HPL_dlocswpT.c"
            A1 += lda;
# 190 "../HPL_dlocswpT.c"
            A2 += lda;
# 191 "../HPL_dlocswpT.c"
            mem_152 = Wmx + 21;
# 191 "../HPL_dlocswpT.c"
            tmp___20 = *mem_152;
# 191 "../HPL_dlocswpT.c"
            *A1 = tmp___20;
# 191 "../HPL_dlocswpT.c"
            mem_153 = L + 21;
# 191 "../HPL_dlocswpT.c"
            *mem_153 = tmp___20;
# 191 "../HPL_dlocswpT.c"
            mem_154 = Wr0 + 21;
# 191 "../HPL_dlocswpT.c"
            *A2 = *mem_154;
# 191 "../HPL_dlocswpT.c"
            A1 += lda;
# 191 "../HPL_dlocswpT.c"
            A2 += lda;
# 192 "../HPL_dlocswpT.c"
            mem_155 = Wmx + 22;
# 192 "../HPL_dlocswpT.c"
            tmp___21 = *mem_155;
# 192 "../HPL_dlocswpT.c"
            *A1 = tmp___21;
# 192 "../HPL_dlocswpT.c"
            mem_156 = L + 22;
# 192 "../HPL_dlocswpT.c"
            *mem_156 = tmp___21;
# 192 "../HPL_dlocswpT.c"
            mem_157 = Wr0 + 22;
# 192 "../HPL_dlocswpT.c"
            *A2 = *mem_157;
# 192 "../HPL_dlocswpT.c"
            A1 += lda;
# 192 "../HPL_dlocswpT.c"
            A2 += lda;
# 193 "../HPL_dlocswpT.c"
            mem_158 = Wmx + 23;
# 193 "../HPL_dlocswpT.c"
            tmp___22 = *mem_158;
# 193 "../HPL_dlocswpT.c"
            *A1 = tmp___22;
# 193 "../HPL_dlocswpT.c"
            mem_159 = L + 23;
# 193 "../HPL_dlocswpT.c"
            *mem_159 = tmp___22;
# 193 "../HPL_dlocswpT.c"
            mem_160 = Wr0 + 23;
# 193 "../HPL_dlocswpT.c"
            *A2 = *mem_160;
# 193 "../HPL_dlocswpT.c"
            A1 += lda;
# 193 "../HPL_dlocswpT.c"
            A2 += lda;
# 194 "../HPL_dlocswpT.c"
            mem_161 = Wmx + 24;
# 194 "../HPL_dlocswpT.c"
            tmp___23 = *mem_161;
# 194 "../HPL_dlocswpT.c"
            *A1 = tmp___23;
# 194 "../HPL_dlocswpT.c"
            mem_162 = L + 24;
# 194 "../HPL_dlocswpT.c"
            *mem_162 = tmp___23;
# 194 "../HPL_dlocswpT.c"
            mem_163 = Wr0 + 24;
# 194 "../HPL_dlocswpT.c"
            *A2 = *mem_163;
# 194 "../HPL_dlocswpT.c"
            A1 += lda;
# 194 "../HPL_dlocswpT.c"
            A2 += lda;
# 195 "../HPL_dlocswpT.c"
            mem_164 = Wmx + 25;
# 195 "../HPL_dlocswpT.c"
            tmp___24 = *mem_164;
# 195 "../HPL_dlocswpT.c"
            *A1 = tmp___24;
# 195 "../HPL_dlocswpT.c"
            mem_165 = L + 25;
# 195 "../HPL_dlocswpT.c"
            *mem_165 = tmp___24;
# 195 "../HPL_dlocswpT.c"
            mem_166 = Wr0 + 25;
# 195 "../HPL_dlocswpT.c"
            *A2 = *mem_166;
# 195 "../HPL_dlocswpT.c"
            A1 += lda;
# 195 "../HPL_dlocswpT.c"
            A2 += lda;
# 196 "../HPL_dlocswpT.c"
            mem_167 = Wmx + 26;
# 196 "../HPL_dlocswpT.c"
            tmp___25 = *mem_167;
# 196 "../HPL_dlocswpT.c"
            *A1 = tmp___25;
# 196 "../HPL_dlocswpT.c"
            mem_168 = L + 26;
# 196 "../HPL_dlocswpT.c"
            *mem_168 = tmp___25;
# 196 "../HPL_dlocswpT.c"
            mem_169 = Wr0 + 26;
# 196 "../HPL_dlocswpT.c"
            *A2 = *mem_169;
# 196 "../HPL_dlocswpT.c"
            A1 += lda;
# 196 "../HPL_dlocswpT.c"
            A2 += lda;
# 197 "../HPL_dlocswpT.c"
            mem_170 = Wmx + 27;
# 197 "../HPL_dlocswpT.c"
            tmp___26 = *mem_170;
# 197 "../HPL_dlocswpT.c"
            *A1 = tmp___26;
# 197 "../HPL_dlocswpT.c"
            mem_171 = L + 27;
# 197 "../HPL_dlocswpT.c"
            *mem_171 = tmp___26;
# 197 "../HPL_dlocswpT.c"
            mem_172 = Wr0 + 27;
# 197 "../HPL_dlocswpT.c"
            *A2 = *mem_172;
# 197 "../HPL_dlocswpT.c"
            A1 += lda;
# 197 "../HPL_dlocswpT.c"
            A2 += lda;
# 198 "../HPL_dlocswpT.c"
            mem_173 = Wmx + 28;
# 198 "../HPL_dlocswpT.c"
            tmp___27 = *mem_173;
# 198 "../HPL_dlocswpT.c"
            *A1 = tmp___27;
# 198 "../HPL_dlocswpT.c"
            mem_174 = L + 28;
# 198 "../HPL_dlocswpT.c"
            *mem_174 = tmp___27;
# 198 "../HPL_dlocswpT.c"
            mem_175 = Wr0 + 28;
# 198 "../HPL_dlocswpT.c"
            *A2 = *mem_175;
# 198 "../HPL_dlocswpT.c"
            A1 += lda;
# 198 "../HPL_dlocswpT.c"
            A2 += lda;
# 199 "../HPL_dlocswpT.c"
            mem_176 = Wmx + 29;
# 199 "../HPL_dlocswpT.c"
            tmp___28 = *mem_176;
# 199 "../HPL_dlocswpT.c"
            *A1 = tmp___28;
# 199 "../HPL_dlocswpT.c"
            mem_177 = L + 29;
# 199 "../HPL_dlocswpT.c"
            *mem_177 = tmp___28;
# 199 "../HPL_dlocswpT.c"
            mem_178 = Wr0 + 29;
# 199 "../HPL_dlocswpT.c"
            *A2 = *mem_178;
# 199 "../HPL_dlocswpT.c"
            A1 += lda;
# 199 "../HPL_dlocswpT.c"
            A2 += lda;
# 200 "../HPL_dlocswpT.c"
            mem_179 = Wmx + 30;
# 200 "../HPL_dlocswpT.c"
            tmp___29 = *mem_179;
# 200 "../HPL_dlocswpT.c"
            *A1 = tmp___29;
# 200 "../HPL_dlocswpT.c"
            mem_180 = L + 30;
# 200 "../HPL_dlocswpT.c"
            *mem_180 = tmp___29;
# 200 "../HPL_dlocswpT.c"
            mem_181 = Wr0 + 30;
# 200 "../HPL_dlocswpT.c"
            *A2 = *mem_181;
# 200 "../HPL_dlocswpT.c"
            A1 += lda;
# 200 "../HPL_dlocswpT.c"
            A2 += lda;
# 201 "../HPL_dlocswpT.c"
            mem_182 = Wmx + 31;
# 201 "../HPL_dlocswpT.c"
            tmp___30 = *mem_182;
# 201 "../HPL_dlocswpT.c"
            *A1 = tmp___30;
# 201 "../HPL_dlocswpT.c"
            mem_183 = L + 31;
# 201 "../HPL_dlocswpT.c"
            *mem_183 = tmp___30;
# 201 "../HPL_dlocswpT.c"
            mem_184 = Wr0 + 31;
# 201 "../HPL_dlocswpT.c"
            *A2 = *mem_184;
# 201 "../HPL_dlocswpT.c"
            A1 += lda;
# 201 "../HPL_dlocswpT.c"
            A2 += lda;
            __CrestLoad(12097, (unsigned long )(& i), (long long )i);
            __CrestLoad(12096, (unsigned long )0, (long long )32);
            __CrestApply2(12095, 0, (long long )(i + 32));
            __CrestStore(12098, (unsigned long )(& i));
# 157 "../HPL_dlocswpT.c"
            i += 32;
# 157 "../HPL_dlocswpT.c"
            Wmx += 32;
# 157 "../HPL_dlocswpT.c"
            Wr0 += 32;
# 157 "../HPL_dlocswpT.c"
            L += 32;
          }
          while_break: ;
          }
          __CrestLoad(12099, (unsigned long )0, (long long )0);
          __CrestStore(12100, (unsigned long )(& i));
# 205 "../HPL_dlocswpT.c"
          i = 0;
          {
# 205 "../HPL_dlocswpT.c"
          while (1) {
            while_continue___0: ;
            {
            __CrestLoad(12103, (unsigned long )(& i), (long long )i);
            __CrestLoad(12102, (unsigned long )(& nr), (long long )nr);
            __CrestApply2(12101, 16, (long long )(i < nr));
# 205 "../HPL_dlocswpT.c"
            if (i < nr) {
              __CrestBranch(12104, 4817, 1);

            } else {
              __CrestBranch(12105, 4818, 0);
# 205 "../HPL_dlocswpT.c"
              goto while_break___0;
            }
            }
# 206 "../HPL_dlocswpT.c"
            mem_185 = Wmx + i;
# 206 "../HPL_dlocswpT.c"
            tmp___31 = *mem_185;
# 206 "../HPL_dlocswpT.c"
            *A1 = tmp___31;
# 206 "../HPL_dlocswpT.c"
            mem_186 = L + i;
# 206 "../HPL_dlocswpT.c"
            *mem_186 = tmp___31;
# 206 "../HPL_dlocswpT.c"
            mem_187 = Wr0 + i;
# 206 "../HPL_dlocswpT.c"
            *A2 = *mem_187;
            __CrestLoad(12108, (unsigned long )(& i), (long long )i);
            __CrestLoad(12107, (unsigned long )0, (long long )1);
            __CrestApply2(12106, 0, (long long )(i + 1));
            __CrestStore(12109, (unsigned long )(& i));
# 205 "../HPL_dlocswpT.c"
            i ++;
# 205 "../HPL_dlocswpT.c"
            A1 += lda;
# 205 "../HPL_dlocswpT.c"
            A2 += lda;
          }
          while_break___0: ;
          }
        } else {
          __CrestBranch(12087, 4821, 0);
# 214 "../HPL_dlocswpT.c"
          mem_188 = (PANEL->A + II) + JJ * (int const )lda;
# 214 "../HPL_dlocswpT.c"
          *mem_188 = gmax;
          __CrestLoad(12110, (unsigned long )0, (long long )0);
          __CrestStore(12111, (unsigned long )(& i));
# 216 "../HPL_dlocswpT.c"
          i = 0;
          {
# 216 "../HPL_dlocswpT.c"
          while (1) {
            while_continue___1: ;
            {
            __CrestLoad(12114, (unsigned long )(& i), (long long )i);
            __CrestLoad(12113, (unsigned long )(& nu), (long long )nu);
            __CrestApply2(12112, 16, (long long )(i < nu));
# 216 "../HPL_dlocswpT.c"
            if (i < nu) {
              __CrestBranch(12115, 4826, 1);

            } else {
              __CrestBranch(12116, 4827, 0);
# 216 "../HPL_dlocswpT.c"
              goto while_break___1;
            }
            }
# 219 "../HPL_dlocswpT.c"
            mem_189 = L + 0;
# 219 "../HPL_dlocswpT.c"
            mem_190 = Wmx + 0;
# 219 "../HPL_dlocswpT.c"
            *mem_189 = *mem_190;
# 221 "../HPL_dlocswpT.c"
            mem_191 = L + 1;
# 221 "../HPL_dlocswpT.c"
            mem_192 = Wmx + 1;
# 221 "../HPL_dlocswpT.c"
            *mem_191 = *mem_192;
# 224 "../HPL_dlocswpT.c"
            mem_193 = L + 2;
# 224 "../HPL_dlocswpT.c"
            mem_194 = Wmx + 2;
# 224 "../HPL_dlocswpT.c"
            *mem_193 = *mem_194;
# 224 "../HPL_dlocswpT.c"
            mem_195 = L + 3;
# 224 "../HPL_dlocswpT.c"
            mem_196 = Wmx + 3;
# 224 "../HPL_dlocswpT.c"
            *mem_195 = *mem_196;
# 227 "../HPL_dlocswpT.c"
            mem_197 = L + 4;
# 227 "../HPL_dlocswpT.c"
            mem_198 = Wmx + 4;
# 227 "../HPL_dlocswpT.c"
            *mem_197 = *mem_198;
# 227 "../HPL_dlocswpT.c"
            mem_199 = L + 5;
# 227 "../HPL_dlocswpT.c"
            mem_200 = Wmx + 5;
# 227 "../HPL_dlocswpT.c"
            *mem_199 = *mem_200;
# 228 "../HPL_dlocswpT.c"
            mem_201 = L + 6;
# 228 "../HPL_dlocswpT.c"
            mem_202 = Wmx + 6;
# 228 "../HPL_dlocswpT.c"
            *mem_201 = *mem_202;
# 228 "../HPL_dlocswpT.c"
            mem_203 = L + 7;
# 228 "../HPL_dlocswpT.c"
            mem_204 = Wmx + 7;
# 228 "../HPL_dlocswpT.c"
            *mem_203 = *mem_204;
# 231 "../HPL_dlocswpT.c"
            mem_205 = L + 8;
# 231 "../HPL_dlocswpT.c"
            mem_206 = Wmx + 8;
# 231 "../HPL_dlocswpT.c"
            *mem_205 = *mem_206;
# 231 "../HPL_dlocswpT.c"
            mem_207 = L + 12;
# 231 "../HPL_dlocswpT.c"
            mem_208 = Wmx + 12;
# 231 "../HPL_dlocswpT.c"
            *mem_207 = *mem_208;
# 232 "../HPL_dlocswpT.c"
            mem_209 = L + 9;
# 232 "../HPL_dlocswpT.c"
            mem_210 = Wmx + 9;
# 232 "../HPL_dlocswpT.c"
            *mem_209 = *mem_210;
# 232 "../HPL_dlocswpT.c"
            mem_211 = L + 13;
# 232 "../HPL_dlocswpT.c"
            mem_212 = Wmx + 13;
# 232 "../HPL_dlocswpT.c"
            *mem_211 = *mem_212;
# 233 "../HPL_dlocswpT.c"
            mem_213 = L + 10;
# 233 "../HPL_dlocswpT.c"
            mem_214 = Wmx + 10;
# 233 "../HPL_dlocswpT.c"
            *mem_213 = *mem_214;
# 233 "../HPL_dlocswpT.c"
            mem_215 = L + 14;
# 233 "../HPL_dlocswpT.c"
            mem_216 = Wmx + 14;
# 233 "../HPL_dlocswpT.c"
            *mem_215 = *mem_216;
# 234 "../HPL_dlocswpT.c"
            mem_217 = L + 11;
# 234 "../HPL_dlocswpT.c"
            mem_218 = Wmx + 11;
# 234 "../HPL_dlocswpT.c"
            *mem_217 = *mem_218;
# 234 "../HPL_dlocswpT.c"
            mem_219 = L + 15;
# 234 "../HPL_dlocswpT.c"
            mem_220 = Wmx + 15;
# 234 "../HPL_dlocswpT.c"
            *mem_219 = *mem_220;
# 237 "../HPL_dlocswpT.c"
            mem_221 = L + 16;
# 237 "../HPL_dlocswpT.c"
            mem_222 = Wmx + 16;
# 237 "../HPL_dlocswpT.c"
            *mem_221 = *mem_222;
# 237 "../HPL_dlocswpT.c"
            mem_223 = L + 20;
# 237 "../HPL_dlocswpT.c"
            mem_224 = Wmx + 20;
# 237 "../HPL_dlocswpT.c"
            *mem_223 = *mem_224;
# 238 "../HPL_dlocswpT.c"
            mem_225 = L + 17;
# 238 "../HPL_dlocswpT.c"
            mem_226 = Wmx + 17;
# 238 "../HPL_dlocswpT.c"
            *mem_225 = *mem_226;
# 238 "../HPL_dlocswpT.c"
            mem_227 = L + 21;
# 238 "../HPL_dlocswpT.c"
            mem_228 = Wmx + 21;
# 238 "../HPL_dlocswpT.c"
            *mem_227 = *mem_228;
# 239 "../HPL_dlocswpT.c"
            mem_229 = L + 18;
# 239 "../HPL_dlocswpT.c"
            mem_230 = Wmx + 18;
# 239 "../HPL_dlocswpT.c"
            *mem_229 = *mem_230;
# 239 "../HPL_dlocswpT.c"
            mem_231 = L + 22;
# 239 "../HPL_dlocswpT.c"
            mem_232 = Wmx + 22;
# 239 "../HPL_dlocswpT.c"
            *mem_231 = *mem_232;
# 240 "../HPL_dlocswpT.c"
            mem_233 = L + 19;
# 240 "../HPL_dlocswpT.c"
            mem_234 = Wmx + 19;
# 240 "../HPL_dlocswpT.c"
            *mem_233 = *mem_234;
# 240 "../HPL_dlocswpT.c"
            mem_235 = L + 23;
# 240 "../HPL_dlocswpT.c"
            mem_236 = Wmx + 23;
# 240 "../HPL_dlocswpT.c"
            *mem_235 = *mem_236;
# 241 "../HPL_dlocswpT.c"
            mem_237 = L + 24;
# 241 "../HPL_dlocswpT.c"
            mem_238 = Wmx + 24;
# 241 "../HPL_dlocswpT.c"
            *mem_237 = *mem_238;
# 241 "../HPL_dlocswpT.c"
            mem_239 = L + 28;
# 241 "../HPL_dlocswpT.c"
            mem_240 = Wmx + 28;
# 241 "../HPL_dlocswpT.c"
            *mem_239 = *mem_240;
# 242 "../HPL_dlocswpT.c"
            mem_241 = L + 25;
# 242 "../HPL_dlocswpT.c"
            mem_242 = Wmx + 25;
# 242 "../HPL_dlocswpT.c"
            *mem_241 = *mem_242;
# 242 "../HPL_dlocswpT.c"
            mem_243 = L + 29;
# 242 "../HPL_dlocswpT.c"
            mem_244 = Wmx + 29;
# 242 "../HPL_dlocswpT.c"
            *mem_243 = *mem_244;
# 243 "../HPL_dlocswpT.c"
            mem_245 = L + 26;
# 243 "../HPL_dlocswpT.c"
            mem_246 = Wmx + 26;
# 243 "../HPL_dlocswpT.c"
            *mem_245 = *mem_246;
# 243 "../HPL_dlocswpT.c"
            mem_247 = L + 30;
# 243 "../HPL_dlocswpT.c"
            mem_248 = Wmx + 30;
# 243 "../HPL_dlocswpT.c"
            *mem_247 = *mem_248;
# 244 "../HPL_dlocswpT.c"
            mem_249 = L + 27;
# 244 "../HPL_dlocswpT.c"
            mem_250 = Wmx + 27;
# 244 "../HPL_dlocswpT.c"
            *mem_249 = *mem_250;
# 244 "../HPL_dlocswpT.c"
            mem_251 = L + 31;
# 244 "../HPL_dlocswpT.c"
            mem_252 = Wmx + 31;
# 244 "../HPL_dlocswpT.c"
            *mem_251 = *mem_252;
            __CrestLoad(12119, (unsigned long )(& i), (long long )i);
            __CrestLoad(12118, (unsigned long )0, (long long )32);
            __CrestApply2(12117, 0, (long long )(i + 32));
            __CrestStore(12120, (unsigned long )(& i));
# 216 "../HPL_dlocswpT.c"
            i += 32;
# 216 "../HPL_dlocswpT.c"
            Wmx += 32;
# 216 "../HPL_dlocswpT.c"
            L += 32;
          }
          while_break___1: ;
          }
          __CrestLoad(12121, (unsigned long )0, (long long )0);
          __CrestStore(12122, (unsigned long )(& i));
# 247 "../HPL_dlocswpT.c"
          i = 0;
          {
# 247 "../HPL_dlocswpT.c"
          while (1) {
            while_continue___2: ;
            {
            __CrestLoad(12125, (unsigned long )(& i), (long long )i);
            __CrestLoad(12124, (unsigned long )(& nr), (long long )nr);
            __CrestApply2(12123, 16, (long long )(i < nr));
# 247 "../HPL_dlocswpT.c"
            if (i < nr) {
              __CrestBranch(12126, 4835, 1);

            } else {
              __CrestBranch(12127, 4836, 0);
# 247 "../HPL_dlocswpT.c"
              goto while_break___2;
            }
            }
# 247 "../HPL_dlocswpT.c"
            mem_253 = L + i;
# 247 "../HPL_dlocswpT.c"
            mem_254 = Wmx + i;
# 247 "../HPL_dlocswpT.c"
            *mem_253 = *mem_254;
            __CrestLoad(12130, (unsigned long )(& i), (long long )i);
            __CrestLoad(12129, (unsigned long )0, (long long )1);
            __CrestApply2(12128, 0, (long long )(i + 1));
            __CrestStore(12131, (unsigned long )(& i));
# 247 "../HPL_dlocswpT.c"
            i ++;
          }
          while_break___2: ;
          }
        }
        }
      } else {
        __CrestBranch(12080, 4839, 0);
# 256 "../HPL_dlocswpT.c"
        A1 = (PANEL->A + II) + 0;
        __CrestLoad(12132, (unsigned long )0, (long long )0);
        __CrestStore(12133, (unsigned long )(& i));
# 258 "../HPL_dlocswpT.c"
        i = 0;
        {
# 258 "../HPL_dlocswpT.c"
        while (1) {
          while_continue___3: ;
          {
          __CrestLoad(12136, (unsigned long )(& i), (long long )i);
          __CrestLoad(12135, (unsigned long )(& nu), (long long )nu);
          __CrestApply2(12134, 16, (long long )(i < nu));
# 258 "../HPL_dlocswpT.c"
          if (i < nu) {
            __CrestBranch(12137, 4844, 1);

          } else {
            __CrestBranch(12138, 4845, 0);
# 258 "../HPL_dlocswpT.c"
            goto while_break___3;
          }
          }
# 261 "../HPL_dlocswpT.c"
          mem_255 = Wmx + 0;
# 261 "../HPL_dlocswpT.c"
          tmp___32 = *mem_255;
# 261 "../HPL_dlocswpT.c"
          *A1 = tmp___32;
# 261 "../HPL_dlocswpT.c"
          mem_256 = L + 0;
# 261 "../HPL_dlocswpT.c"
          *mem_256 = tmp___32;
# 261 "../HPL_dlocswpT.c"
          A1 += lda;
# 263 "../HPL_dlocswpT.c"
          mem_257 = Wmx + 1;
# 263 "../HPL_dlocswpT.c"
          tmp___33 = *mem_257;
# 263 "../HPL_dlocswpT.c"
          *A1 = tmp___33;
# 263 "../HPL_dlocswpT.c"
          mem_258 = L + 1;
# 263 "../HPL_dlocswpT.c"
          *mem_258 = tmp___33;
# 263 "../HPL_dlocswpT.c"
          A1 += lda;
# 266 "../HPL_dlocswpT.c"
          mem_259 = Wmx + 2;
# 266 "../HPL_dlocswpT.c"
          tmp___34 = *mem_259;
# 266 "../HPL_dlocswpT.c"
          *A1 = tmp___34;
# 266 "../HPL_dlocswpT.c"
          mem_260 = L + 2;
# 266 "../HPL_dlocswpT.c"
          *mem_260 = tmp___34;
# 266 "../HPL_dlocswpT.c"
          A1 += lda;
# 266 "../HPL_dlocswpT.c"
          mem_261 = Wmx + 3;
# 266 "../HPL_dlocswpT.c"
          tmp___35 = *mem_261;
# 266 "../HPL_dlocswpT.c"
          *A1 = tmp___35;
# 266 "../HPL_dlocswpT.c"
          mem_262 = L + 3;
# 266 "../HPL_dlocswpT.c"
          *mem_262 = tmp___35;
# 266 "../HPL_dlocswpT.c"
          A1 += lda;
# 269 "../HPL_dlocswpT.c"
          mem_263 = Wmx + 4;
# 269 "../HPL_dlocswpT.c"
          tmp___36 = *mem_263;
# 269 "../HPL_dlocswpT.c"
          *A1 = tmp___36;
# 269 "../HPL_dlocswpT.c"
          mem_264 = L + 4;
# 269 "../HPL_dlocswpT.c"
          *mem_264 = tmp___36;
# 269 "../HPL_dlocswpT.c"
          A1 += lda;
# 269 "../HPL_dlocswpT.c"
          mem_265 = Wmx + 5;
# 269 "../HPL_dlocswpT.c"
          tmp___37 = *mem_265;
# 269 "../HPL_dlocswpT.c"
          *A1 = tmp___37;
# 269 "../HPL_dlocswpT.c"
          mem_266 = L + 5;
# 269 "../HPL_dlocswpT.c"
          *mem_266 = tmp___37;
# 269 "../HPL_dlocswpT.c"
          A1 += lda;
# 270 "../HPL_dlocswpT.c"
          mem_267 = Wmx + 6;
# 270 "../HPL_dlocswpT.c"
          tmp___38 = *mem_267;
# 270 "../HPL_dlocswpT.c"
          *A1 = tmp___38;
# 270 "../HPL_dlocswpT.c"
          mem_268 = L + 6;
# 270 "../HPL_dlocswpT.c"
          *mem_268 = tmp___38;
# 270 "../HPL_dlocswpT.c"
          A1 += lda;
# 270 "../HPL_dlocswpT.c"
          mem_269 = Wmx + 7;
# 270 "../HPL_dlocswpT.c"
          tmp___39 = *mem_269;
# 270 "../HPL_dlocswpT.c"
          *A1 = tmp___39;
# 270 "../HPL_dlocswpT.c"
          mem_270 = L + 7;
# 270 "../HPL_dlocswpT.c"
          *mem_270 = tmp___39;
# 270 "../HPL_dlocswpT.c"
          A1 += lda;
# 273 "../HPL_dlocswpT.c"
          mem_271 = Wmx + 8;
# 273 "../HPL_dlocswpT.c"
          tmp___40 = *mem_271;
# 273 "../HPL_dlocswpT.c"
          *A1 = tmp___40;
# 273 "../HPL_dlocswpT.c"
          mem_272 = L + 8;
# 273 "../HPL_dlocswpT.c"
          *mem_272 = tmp___40;
# 273 "../HPL_dlocswpT.c"
          A1 += lda;
# 273 "../HPL_dlocswpT.c"
          mem_273 = Wmx + 9;
# 273 "../HPL_dlocswpT.c"
          tmp___41 = *mem_273;
# 273 "../HPL_dlocswpT.c"
          *A1 = tmp___41;
# 273 "../HPL_dlocswpT.c"
          mem_274 = L + 9;
# 273 "../HPL_dlocswpT.c"
          *mem_274 = tmp___41;
# 273 "../HPL_dlocswpT.c"
          A1 += lda;
# 274 "../HPL_dlocswpT.c"
          mem_275 = Wmx + 10;
# 274 "../HPL_dlocswpT.c"
          tmp___42 = *mem_275;
# 274 "../HPL_dlocswpT.c"
          *A1 = tmp___42;
# 274 "../HPL_dlocswpT.c"
          mem_276 = L + 10;
# 274 "../HPL_dlocswpT.c"
          *mem_276 = tmp___42;
# 274 "../HPL_dlocswpT.c"
          A1 += lda;
# 274 "../HPL_dlocswpT.c"
          mem_277 = Wmx + 11;
# 274 "../HPL_dlocswpT.c"
          tmp___43 = *mem_277;
# 274 "../HPL_dlocswpT.c"
          *A1 = tmp___43;
# 274 "../HPL_dlocswpT.c"
          mem_278 = L + 11;
# 274 "../HPL_dlocswpT.c"
          *mem_278 = tmp___43;
# 274 "../HPL_dlocswpT.c"
          A1 += lda;
# 275 "../HPL_dlocswpT.c"
          mem_279 = Wmx + 12;
# 275 "../HPL_dlocswpT.c"
          tmp___44 = *mem_279;
# 275 "../HPL_dlocswpT.c"
          *A1 = tmp___44;
# 275 "../HPL_dlocswpT.c"
          mem_280 = L + 12;
# 275 "../HPL_dlocswpT.c"
          *mem_280 = tmp___44;
# 275 "../HPL_dlocswpT.c"
          A1 += lda;
# 275 "../HPL_dlocswpT.c"
          mem_281 = Wmx + 13;
# 275 "../HPL_dlocswpT.c"
          tmp___45 = *mem_281;
# 275 "../HPL_dlocswpT.c"
          *A1 = tmp___45;
# 275 "../HPL_dlocswpT.c"
          mem_282 = L + 13;
# 275 "../HPL_dlocswpT.c"
          *mem_282 = tmp___45;
# 275 "../HPL_dlocswpT.c"
          A1 += lda;
# 276 "../HPL_dlocswpT.c"
          mem_283 = Wmx + 14;
# 276 "../HPL_dlocswpT.c"
          tmp___46 = *mem_283;
# 276 "../HPL_dlocswpT.c"
          *A1 = tmp___46;
# 276 "../HPL_dlocswpT.c"
          mem_284 = L + 14;
# 276 "../HPL_dlocswpT.c"
          *mem_284 = tmp___46;
# 276 "../HPL_dlocswpT.c"
          A1 += lda;
# 276 "../HPL_dlocswpT.c"
          mem_285 = Wmx + 15;
# 276 "../HPL_dlocswpT.c"
          tmp___47 = *mem_285;
# 276 "../HPL_dlocswpT.c"
          *A1 = tmp___47;
# 276 "../HPL_dlocswpT.c"
          mem_286 = L + 15;
# 276 "../HPL_dlocswpT.c"
          *mem_286 = tmp___47;
# 276 "../HPL_dlocswpT.c"
          A1 += lda;
# 279 "../HPL_dlocswpT.c"
          mem_287 = Wmx + 16;
# 279 "../HPL_dlocswpT.c"
          tmp___48 = *mem_287;
# 279 "../HPL_dlocswpT.c"
          *A1 = tmp___48;
# 279 "../HPL_dlocswpT.c"
          mem_288 = L + 16;
# 279 "../HPL_dlocswpT.c"
          *mem_288 = tmp___48;
# 279 "../HPL_dlocswpT.c"
          A1 += lda;
# 279 "../HPL_dlocswpT.c"
          mem_289 = Wmx + 17;
# 279 "../HPL_dlocswpT.c"
          tmp___49 = *mem_289;
# 279 "../HPL_dlocswpT.c"
          *A1 = tmp___49;
# 279 "../HPL_dlocswpT.c"
          mem_290 = L + 17;
# 279 "../HPL_dlocswpT.c"
          *mem_290 = tmp___49;
# 279 "../HPL_dlocswpT.c"
          A1 += lda;
# 280 "../HPL_dlocswpT.c"
          mem_291 = Wmx + 18;
# 280 "../HPL_dlocswpT.c"
          tmp___50 = *mem_291;
# 280 "../HPL_dlocswpT.c"
          *A1 = tmp___50;
# 280 "../HPL_dlocswpT.c"
          mem_292 = L + 18;
# 280 "../HPL_dlocswpT.c"
          *mem_292 = tmp___50;
# 280 "../HPL_dlocswpT.c"
          A1 += lda;
# 280 "../HPL_dlocswpT.c"
          mem_293 = Wmx + 19;
# 280 "../HPL_dlocswpT.c"
          tmp___51 = *mem_293;
# 280 "../HPL_dlocswpT.c"
          *A1 = tmp___51;
# 280 "../HPL_dlocswpT.c"
          mem_294 = L + 19;
# 280 "../HPL_dlocswpT.c"
          *mem_294 = tmp___51;
# 280 "../HPL_dlocswpT.c"
          A1 += lda;
# 281 "../HPL_dlocswpT.c"
          mem_295 = Wmx + 20;
# 281 "../HPL_dlocswpT.c"
          tmp___52 = *mem_295;
# 281 "../HPL_dlocswpT.c"
          *A1 = tmp___52;
# 281 "../HPL_dlocswpT.c"
          mem_296 = L + 20;
# 281 "../HPL_dlocswpT.c"
          *mem_296 = tmp___52;
# 281 "../HPL_dlocswpT.c"
          A1 += lda;
# 281 "../HPL_dlocswpT.c"
          mem_297 = Wmx + 21;
# 281 "../HPL_dlocswpT.c"
          tmp___53 = *mem_297;
# 281 "../HPL_dlocswpT.c"
          *A1 = tmp___53;
# 281 "../HPL_dlocswpT.c"
          mem_298 = L + 21;
# 281 "../HPL_dlocswpT.c"
          *mem_298 = tmp___53;
# 281 "../HPL_dlocswpT.c"
          A1 += lda;
# 282 "../HPL_dlocswpT.c"
          mem_299 = Wmx + 22;
# 282 "../HPL_dlocswpT.c"
          tmp___54 = *mem_299;
# 282 "../HPL_dlocswpT.c"
          *A1 = tmp___54;
# 282 "../HPL_dlocswpT.c"
          mem_300 = L + 22;
# 282 "../HPL_dlocswpT.c"
          *mem_300 = tmp___54;
# 282 "../HPL_dlocswpT.c"
          A1 += lda;
# 282 "../HPL_dlocswpT.c"
          mem_301 = Wmx + 23;
# 282 "../HPL_dlocswpT.c"
          tmp___55 = *mem_301;
# 282 "../HPL_dlocswpT.c"
          *A1 = tmp___55;
# 282 "../HPL_dlocswpT.c"
          mem_302 = L + 23;
# 282 "../HPL_dlocswpT.c"
          *mem_302 = tmp___55;
# 282 "../HPL_dlocswpT.c"
          A1 += lda;
# 283 "../HPL_dlocswpT.c"
          mem_303 = Wmx + 24;
# 283 "../HPL_dlocswpT.c"
          tmp___56 = *mem_303;
# 283 "../HPL_dlocswpT.c"
          *A1 = tmp___56;
# 283 "../HPL_dlocswpT.c"
          mem_304 = L + 24;
# 283 "../HPL_dlocswpT.c"
          *mem_304 = tmp___56;
# 283 "../HPL_dlocswpT.c"
          A1 += lda;
# 283 "../HPL_dlocswpT.c"
          mem_305 = Wmx + 25;
# 283 "../HPL_dlocswpT.c"
          tmp___57 = *mem_305;
# 283 "../HPL_dlocswpT.c"
          *A1 = tmp___57;
# 283 "../HPL_dlocswpT.c"
          mem_306 = L + 25;
# 283 "../HPL_dlocswpT.c"
          *mem_306 = tmp___57;
# 283 "../HPL_dlocswpT.c"
          A1 += lda;
# 284 "../HPL_dlocswpT.c"
          mem_307 = Wmx + 26;
# 284 "../HPL_dlocswpT.c"
          tmp___58 = *mem_307;
# 284 "../HPL_dlocswpT.c"
          *A1 = tmp___58;
# 284 "../HPL_dlocswpT.c"
          mem_308 = L + 26;
# 284 "../HPL_dlocswpT.c"
          *mem_308 = tmp___58;
# 284 "../HPL_dlocswpT.c"
          A1 += lda;
# 284 "../HPL_dlocswpT.c"
          mem_309 = Wmx + 27;
# 284 "../HPL_dlocswpT.c"
          tmp___59 = *mem_309;
# 284 "../HPL_dlocswpT.c"
          *A1 = tmp___59;
# 284 "../HPL_dlocswpT.c"
          mem_310 = L + 27;
# 284 "../HPL_dlocswpT.c"
          *mem_310 = tmp___59;
# 284 "../HPL_dlocswpT.c"
          A1 += lda;
# 285 "../HPL_dlocswpT.c"
          mem_311 = Wmx + 28;
# 285 "../HPL_dlocswpT.c"
          tmp___60 = *mem_311;
# 285 "../HPL_dlocswpT.c"
          *A1 = tmp___60;
# 285 "../HPL_dlocswpT.c"
          mem_312 = L + 28;
# 285 "../HPL_dlocswpT.c"
          *mem_312 = tmp___60;
# 285 "../HPL_dlocswpT.c"
          A1 += lda;
# 285 "../HPL_dlocswpT.c"
          mem_313 = Wmx + 29;
# 285 "../HPL_dlocswpT.c"
          tmp___61 = *mem_313;
# 285 "../HPL_dlocswpT.c"
          *A1 = tmp___61;
# 285 "../HPL_dlocswpT.c"
          mem_314 = L + 29;
# 285 "../HPL_dlocswpT.c"
          *mem_314 = tmp___61;
# 285 "../HPL_dlocswpT.c"
          A1 += lda;
# 286 "../HPL_dlocswpT.c"
          mem_315 = Wmx + 30;
# 286 "../HPL_dlocswpT.c"
          tmp___62 = *mem_315;
# 286 "../HPL_dlocswpT.c"
          *A1 = tmp___62;
# 286 "../HPL_dlocswpT.c"
          mem_316 = L + 30;
# 286 "../HPL_dlocswpT.c"
          *mem_316 = tmp___62;
# 286 "../HPL_dlocswpT.c"
          A1 += lda;
# 286 "../HPL_dlocswpT.c"
          mem_317 = Wmx + 31;
# 286 "../HPL_dlocswpT.c"
          tmp___63 = *mem_317;
# 286 "../HPL_dlocswpT.c"
          *A1 = tmp___63;
# 286 "../HPL_dlocswpT.c"
          mem_318 = L + 31;
# 286 "../HPL_dlocswpT.c"
          *mem_318 = tmp___63;
# 286 "../HPL_dlocswpT.c"
          A1 += lda;
          __CrestLoad(12141, (unsigned long )(& i), (long long )i);
          __CrestLoad(12140, (unsigned long )0, (long long )32);
          __CrestApply2(12139, 0, (long long )(i + 32));
          __CrestStore(12142, (unsigned long )(& i));
# 258 "../HPL_dlocswpT.c"
          i += 32;
# 258 "../HPL_dlocswpT.c"
          Wmx += 32;
# 258 "../HPL_dlocswpT.c"
          L += 32;
        }
        while_break___3: ;
        }
        __CrestLoad(12143, (unsigned long )0, (long long )0);
        __CrestStore(12144, (unsigned long )(& i));
# 290 "../HPL_dlocswpT.c"
        i = 0;
        {
# 290 "../HPL_dlocswpT.c"
        while (1) {
          while_continue___4: ;
          {
          __CrestLoad(12147, (unsigned long )(& i), (long long )i);
          __CrestLoad(12146, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(12145, 16, (long long )(i < nr));
# 290 "../HPL_dlocswpT.c"
          if (i < nr) {
            __CrestBranch(12148, 4853, 1);

          } else {
            __CrestBranch(12149, 4854, 0);
# 290 "../HPL_dlocswpT.c"
            goto while_break___4;
          }
          }
# 290 "../HPL_dlocswpT.c"
          mem_319 = Wmx + i;
# 290 "../HPL_dlocswpT.c"
          tmp___64 = *mem_319;
# 290 "../HPL_dlocswpT.c"
          *A1 = tmp___64;
# 290 "../HPL_dlocswpT.c"
          mem_320 = L + i;
# 290 "../HPL_dlocswpT.c"
          *mem_320 = tmp___64;
          __CrestLoad(12152, (unsigned long )(& i), (long long )i);
          __CrestLoad(12151, (unsigned long )0, (long long )1);
          __CrestApply2(12150, 0, (long long )(i + 1));
          __CrestStore(12153, (unsigned long )(& i));
# 290 "../HPL_dlocswpT.c"
          i ++;
# 290 "../HPL_dlocswpT.c"
          A1 += lda;
        }
        while_break___4: ;
        }
      }
      }
      }
    } else {
      __CrestBranch(12075, 4857, 0);
      __CrestLoad(12154, (unsigned long )0, (long long )0);
      __CrestStore(12155, (unsigned long )(& i));
# 299 "../HPL_dlocswpT.c"
      i = 0;
      {
# 299 "../HPL_dlocswpT.c"
      while (1) {
        while_continue___5: ;
        {
        __CrestLoad(12158, (unsigned long )(& i), (long long )i);
        __CrestLoad(12157, (unsigned long )(& nu), (long long )nu);
        __CrestApply2(12156, 16, (long long )(i < nu));
# 299 "../HPL_dlocswpT.c"
        if (i < nu) {
          __CrestBranch(12159, 4862, 1);

        } else {
          __CrestBranch(12160, 4863, 0);
# 299 "../HPL_dlocswpT.c"
          goto while_break___5;
        }
        }
# 302 "../HPL_dlocswpT.c"
        mem_321 = L + 0;
# 302 "../HPL_dlocswpT.c"
        mem_322 = Wmx + 0;
# 302 "../HPL_dlocswpT.c"
        *mem_321 = *mem_322;
# 304 "../HPL_dlocswpT.c"
        mem_323 = L + 1;
# 304 "../HPL_dlocswpT.c"
        mem_324 = Wmx + 1;
# 304 "../HPL_dlocswpT.c"
        *mem_323 = *mem_324;
# 307 "../HPL_dlocswpT.c"
        mem_325 = L + 2;
# 307 "../HPL_dlocswpT.c"
        mem_326 = Wmx + 2;
# 307 "../HPL_dlocswpT.c"
        *mem_325 = *mem_326;
# 307 "../HPL_dlocswpT.c"
        mem_327 = L + 3;
# 307 "../HPL_dlocswpT.c"
        mem_328 = Wmx + 3;
# 307 "../HPL_dlocswpT.c"
        *mem_327 = *mem_328;
# 310 "../HPL_dlocswpT.c"
        mem_329 = L + 4;
# 310 "../HPL_dlocswpT.c"
        mem_330 = Wmx + 4;
# 310 "../HPL_dlocswpT.c"
        *mem_329 = *mem_330;
# 310 "../HPL_dlocswpT.c"
        mem_331 = L + 5;
# 310 "../HPL_dlocswpT.c"
        mem_332 = Wmx + 5;
# 310 "../HPL_dlocswpT.c"
        *mem_331 = *mem_332;
# 310 "../HPL_dlocswpT.c"
        mem_333 = L + 6;
# 310 "../HPL_dlocswpT.c"
        mem_334 = Wmx + 6;
# 310 "../HPL_dlocswpT.c"
        *mem_333 = *mem_334;
# 310 "../HPL_dlocswpT.c"
        mem_335 = L + 7;
# 310 "../HPL_dlocswpT.c"
        mem_336 = Wmx + 7;
# 310 "../HPL_dlocswpT.c"
        *mem_335 = *mem_336;
# 313 "../HPL_dlocswpT.c"
        mem_337 = L + 8;
# 313 "../HPL_dlocswpT.c"
        mem_338 = Wmx + 8;
# 313 "../HPL_dlocswpT.c"
        *mem_337 = *mem_338;
# 313 "../HPL_dlocswpT.c"
        mem_339 = L + 9;
# 313 "../HPL_dlocswpT.c"
        mem_340 = Wmx + 9;
# 313 "../HPL_dlocswpT.c"
        *mem_339 = *mem_340;
# 313 "../HPL_dlocswpT.c"
        mem_341 = L + 10;
# 313 "../HPL_dlocswpT.c"
        mem_342 = Wmx + 10;
# 313 "../HPL_dlocswpT.c"
        *mem_341 = *mem_342;
# 313 "../HPL_dlocswpT.c"
        mem_343 = L + 11;
# 313 "../HPL_dlocswpT.c"
        mem_344 = Wmx + 11;
# 313 "../HPL_dlocswpT.c"
        *mem_343 = *mem_344;
# 314 "../HPL_dlocswpT.c"
        mem_345 = L + 12;
# 314 "../HPL_dlocswpT.c"
        mem_346 = Wmx + 12;
# 314 "../HPL_dlocswpT.c"
        *mem_345 = *mem_346;
# 314 "../HPL_dlocswpT.c"
        mem_347 = L + 13;
# 314 "../HPL_dlocswpT.c"
        mem_348 = Wmx + 13;
# 314 "../HPL_dlocswpT.c"
        *mem_347 = *mem_348;
# 314 "../HPL_dlocswpT.c"
        mem_349 = L + 14;
# 314 "../HPL_dlocswpT.c"
        mem_350 = Wmx + 14;
# 314 "../HPL_dlocswpT.c"
        *mem_349 = *mem_350;
# 314 "../HPL_dlocswpT.c"
        mem_351 = L + 15;
# 314 "../HPL_dlocswpT.c"
        mem_352 = Wmx + 15;
# 314 "../HPL_dlocswpT.c"
        *mem_351 = *mem_352;
# 317 "../HPL_dlocswpT.c"
        mem_353 = L + 16;
# 317 "../HPL_dlocswpT.c"
        mem_354 = Wmx + 16;
# 317 "../HPL_dlocswpT.c"
        *mem_353 = *mem_354;
# 317 "../HPL_dlocswpT.c"
        mem_355 = L + 17;
# 317 "../HPL_dlocswpT.c"
        mem_356 = Wmx + 17;
# 317 "../HPL_dlocswpT.c"
        *mem_355 = *mem_356;
# 317 "../HPL_dlocswpT.c"
        mem_357 = L + 18;
# 317 "../HPL_dlocswpT.c"
        mem_358 = Wmx + 18;
# 317 "../HPL_dlocswpT.c"
        *mem_357 = *mem_358;
# 317 "../HPL_dlocswpT.c"
        mem_359 = L + 19;
# 317 "../HPL_dlocswpT.c"
        mem_360 = Wmx + 19;
# 317 "../HPL_dlocswpT.c"
        *mem_359 = *mem_360;
# 318 "../HPL_dlocswpT.c"
        mem_361 = L + 20;
# 318 "../HPL_dlocswpT.c"
        mem_362 = Wmx + 20;
# 318 "../HPL_dlocswpT.c"
        *mem_361 = *mem_362;
# 318 "../HPL_dlocswpT.c"
        mem_363 = L + 21;
# 318 "../HPL_dlocswpT.c"
        mem_364 = Wmx + 21;
# 318 "../HPL_dlocswpT.c"
        *mem_363 = *mem_364;
# 318 "../HPL_dlocswpT.c"
        mem_365 = L + 22;
# 318 "../HPL_dlocswpT.c"
        mem_366 = Wmx + 22;
# 318 "../HPL_dlocswpT.c"
        *mem_365 = *mem_366;
# 318 "../HPL_dlocswpT.c"
        mem_367 = L + 23;
# 318 "../HPL_dlocswpT.c"
        mem_368 = Wmx + 23;
# 318 "../HPL_dlocswpT.c"
        *mem_367 = *mem_368;
# 319 "../HPL_dlocswpT.c"
        mem_369 = L + 24;
# 319 "../HPL_dlocswpT.c"
        mem_370 = Wmx + 24;
# 319 "../HPL_dlocswpT.c"
        *mem_369 = *mem_370;
# 319 "../HPL_dlocswpT.c"
        mem_371 = L + 25;
# 319 "../HPL_dlocswpT.c"
        mem_372 = Wmx + 25;
# 319 "../HPL_dlocswpT.c"
        *mem_371 = *mem_372;
# 319 "../HPL_dlocswpT.c"
        mem_373 = L + 26;
# 319 "../HPL_dlocswpT.c"
        mem_374 = Wmx + 26;
# 319 "../HPL_dlocswpT.c"
        *mem_373 = *mem_374;
# 319 "../HPL_dlocswpT.c"
        mem_375 = L + 27;
# 319 "../HPL_dlocswpT.c"
        mem_376 = Wmx + 27;
# 319 "../HPL_dlocswpT.c"
        *mem_375 = *mem_376;
# 320 "../HPL_dlocswpT.c"
        mem_377 = L + 28;
# 320 "../HPL_dlocswpT.c"
        mem_378 = Wmx + 28;
# 320 "../HPL_dlocswpT.c"
        *mem_377 = *mem_378;
# 320 "../HPL_dlocswpT.c"
        mem_379 = L + 29;
# 320 "../HPL_dlocswpT.c"
        mem_380 = Wmx + 29;
# 320 "../HPL_dlocswpT.c"
        *mem_379 = *mem_380;
# 320 "../HPL_dlocswpT.c"
        mem_381 = L + 30;
# 320 "../HPL_dlocswpT.c"
        mem_382 = Wmx + 30;
# 320 "../HPL_dlocswpT.c"
        *mem_381 = *mem_382;
# 320 "../HPL_dlocswpT.c"
        mem_383 = L + 31;
# 320 "../HPL_dlocswpT.c"
        mem_384 = Wmx + 31;
# 320 "../HPL_dlocswpT.c"
        *mem_383 = *mem_384;
        __CrestLoad(12163, (unsigned long )(& i), (long long )i);
        __CrestLoad(12162, (unsigned long )0, (long long )32);
        __CrestApply2(12161, 0, (long long )(i + 32));
        __CrestStore(12164, (unsigned long )(& i));
# 299 "../HPL_dlocswpT.c"
        i += 32;
# 299 "../HPL_dlocswpT.c"
        Wmx += 32;
# 299 "../HPL_dlocswpT.c"
        L += 32;
      }
      while_break___5: ;
      }
      __CrestLoad(12165, (unsigned long )0, (long long )0);
      __CrestStore(12166, (unsigned long )(& i));
# 323 "../HPL_dlocswpT.c"
      i = 0;
      {
# 323 "../HPL_dlocswpT.c"
      while (1) {
        while_continue___6: ;
        {
        __CrestLoad(12169, (unsigned long )(& i), (long long )i);
        __CrestLoad(12168, (unsigned long )(& nr), (long long )nr);
        __CrestApply2(12167, 16, (long long )(i < nr));
# 323 "../HPL_dlocswpT.c"
        if (i < nr) {
          __CrestBranch(12170, 4871, 1);

        } else {
          __CrestBranch(12171, 4872, 0);
# 323 "../HPL_dlocswpT.c"
          goto while_break___6;
        }
        }
# 323 "../HPL_dlocswpT.c"
        mem_385 = L + i;
# 323 "../HPL_dlocswpT.c"
        mem_386 = Wmx + i;
# 323 "../HPL_dlocswpT.c"
        *mem_385 = *mem_386;
        __CrestLoad(12174, (unsigned long )(& i), (long long )i);
        __CrestLoad(12173, (unsigned long )0, (long long )1);
        __CrestApply2(12172, 0, (long long )(i + 1));
        __CrestStore(12175, (unsigned long )(& i));
# 323 "../HPL_dlocswpT.c"
        i ++;
      }
      while_break___6: ;
      }
      {
# 327 "../HPL_dlocswpT.c"
      mem_387 = WORK + 3;
      {
      __CrestLoad(12178, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(12177, (unsigned long )mem_387, (long long )*mem_387);
      __CrestApply2(12176, 12, (long long )(myrow == (int )*mem_387));
# 327 "../HPL_dlocswpT.c"
      if (myrow == (int )*mem_387) {
        __CrestBranch(12179, 4878, 1);
# 329 "../HPL_dlocswpT.c"
        mem_388 = WORK + 1;
# 329 "../HPL_dlocswpT.c"
        A2 = (PANEL->A + (II + (int const )((int )*mem_388))) + 0;
        __CrestLoad(12181, (unsigned long )0, (long long )0);
        __CrestStore(12182, (unsigned long )(& i));
# 331 "../HPL_dlocswpT.c"
        i = 0;
        {
# 331 "../HPL_dlocswpT.c"
        while (1) {
          while_continue___7: ;
          {
          __CrestLoad(12185, (unsigned long )(& i), (long long )i);
          __CrestLoad(12184, (unsigned long )(& nu), (long long )nu);
          __CrestApply2(12183, 16, (long long )(i < nu));
# 331 "../HPL_dlocswpT.c"
          if (i < nu) {
            __CrestBranch(12186, 4883, 1);

          } else {
            __CrestBranch(12187, 4884, 0);
# 331 "../HPL_dlocswpT.c"
            goto while_break___7;
          }
          }
# 334 "../HPL_dlocswpT.c"
          mem_389 = Wr0 + 0;
# 334 "../HPL_dlocswpT.c"
          *A2 = *mem_389;
# 334 "../HPL_dlocswpT.c"
          A2 += lda;
# 336 "../HPL_dlocswpT.c"
          mem_390 = Wr0 + 1;
# 336 "../HPL_dlocswpT.c"
          *A2 = *mem_390;
# 336 "../HPL_dlocswpT.c"
          A2 += lda;
# 339 "../HPL_dlocswpT.c"
          mem_391 = Wr0 + 2;
# 339 "../HPL_dlocswpT.c"
          *A2 = *mem_391;
# 339 "../HPL_dlocswpT.c"
          A2 += lda;
# 339 "../HPL_dlocswpT.c"
          mem_392 = Wr0 + 3;
# 339 "../HPL_dlocswpT.c"
          *A2 = *mem_392;
# 339 "../HPL_dlocswpT.c"
          A2 += lda;
# 342 "../HPL_dlocswpT.c"
          mem_393 = Wr0 + 4;
# 342 "../HPL_dlocswpT.c"
          *A2 = *mem_393;
# 342 "../HPL_dlocswpT.c"
          A2 += lda;
# 342 "../HPL_dlocswpT.c"
          mem_394 = Wr0 + 5;
# 342 "../HPL_dlocswpT.c"
          *A2 = *mem_394;
# 342 "../HPL_dlocswpT.c"
          A2 += lda;
# 343 "../HPL_dlocswpT.c"
          mem_395 = Wr0 + 6;
# 343 "../HPL_dlocswpT.c"
          *A2 = *mem_395;
# 343 "../HPL_dlocswpT.c"
          A2 += lda;
# 343 "../HPL_dlocswpT.c"
          mem_396 = Wr0 + 7;
# 343 "../HPL_dlocswpT.c"
          *A2 = *mem_396;
# 343 "../HPL_dlocswpT.c"
          A2 += lda;
# 346 "../HPL_dlocswpT.c"
          mem_397 = Wr0 + 8;
# 346 "../HPL_dlocswpT.c"
          *A2 = *mem_397;
# 346 "../HPL_dlocswpT.c"
          A2 += lda;
# 346 "../HPL_dlocswpT.c"
          mem_398 = Wr0 + 9;
# 346 "../HPL_dlocswpT.c"
          *A2 = *mem_398;
# 346 "../HPL_dlocswpT.c"
          A2 += lda;
# 347 "../HPL_dlocswpT.c"
          mem_399 = Wr0 + 10;
# 347 "../HPL_dlocswpT.c"
          *A2 = *mem_399;
# 347 "../HPL_dlocswpT.c"
          A2 += lda;
# 347 "../HPL_dlocswpT.c"
          mem_400 = Wr0 + 11;
# 347 "../HPL_dlocswpT.c"
          *A2 = *mem_400;
# 347 "../HPL_dlocswpT.c"
          A2 += lda;
# 348 "../HPL_dlocswpT.c"
          mem_401 = Wr0 + 12;
# 348 "../HPL_dlocswpT.c"
          *A2 = *mem_401;
# 348 "../HPL_dlocswpT.c"
          A2 += lda;
# 348 "../HPL_dlocswpT.c"
          mem_402 = Wr0 + 13;
# 348 "../HPL_dlocswpT.c"
          *A2 = *mem_402;
# 348 "../HPL_dlocswpT.c"
          A2 += lda;
# 349 "../HPL_dlocswpT.c"
          mem_403 = Wr0 + 14;
# 349 "../HPL_dlocswpT.c"
          *A2 = *mem_403;
# 349 "../HPL_dlocswpT.c"
          A2 += lda;
# 349 "../HPL_dlocswpT.c"
          mem_404 = Wr0 + 15;
# 349 "../HPL_dlocswpT.c"
          *A2 = *mem_404;
# 349 "../HPL_dlocswpT.c"
          A2 += lda;
# 352 "../HPL_dlocswpT.c"
          mem_405 = Wr0 + 16;
# 352 "../HPL_dlocswpT.c"
          *A2 = *mem_405;
# 352 "../HPL_dlocswpT.c"
          A2 += lda;
# 352 "../HPL_dlocswpT.c"
          mem_406 = Wr0 + 17;
# 352 "../HPL_dlocswpT.c"
          *A2 = *mem_406;
# 352 "../HPL_dlocswpT.c"
          A2 += lda;
# 353 "../HPL_dlocswpT.c"
          mem_407 = Wr0 + 18;
# 353 "../HPL_dlocswpT.c"
          *A2 = *mem_407;
# 353 "../HPL_dlocswpT.c"
          A2 += lda;
# 353 "../HPL_dlocswpT.c"
          mem_408 = Wr0 + 19;
# 353 "../HPL_dlocswpT.c"
          *A2 = *mem_408;
# 353 "../HPL_dlocswpT.c"
          A2 += lda;
# 354 "../HPL_dlocswpT.c"
          mem_409 = Wr0 + 20;
# 354 "../HPL_dlocswpT.c"
          *A2 = *mem_409;
# 354 "../HPL_dlocswpT.c"
          A2 += lda;
# 354 "../HPL_dlocswpT.c"
          mem_410 = Wr0 + 21;
# 354 "../HPL_dlocswpT.c"
          *A2 = *mem_410;
# 354 "../HPL_dlocswpT.c"
          A2 += lda;
# 355 "../HPL_dlocswpT.c"
          mem_411 = Wr0 + 22;
# 355 "../HPL_dlocswpT.c"
          *A2 = *mem_411;
# 355 "../HPL_dlocswpT.c"
          A2 += lda;
# 355 "../HPL_dlocswpT.c"
          mem_412 = Wr0 + 23;
# 355 "../HPL_dlocswpT.c"
          *A2 = *mem_412;
# 355 "../HPL_dlocswpT.c"
          A2 += lda;
# 356 "../HPL_dlocswpT.c"
          mem_413 = Wr0 + 24;
# 356 "../HPL_dlocswpT.c"
          *A2 = *mem_413;
# 356 "../HPL_dlocswpT.c"
          A2 += lda;
# 356 "../HPL_dlocswpT.c"
          mem_414 = Wr0 + 25;
# 356 "../HPL_dlocswpT.c"
          *A2 = *mem_414;
# 356 "../HPL_dlocswpT.c"
          A2 += lda;
# 357 "../HPL_dlocswpT.c"
          mem_415 = Wr0 + 26;
# 357 "../HPL_dlocswpT.c"
          *A2 = *mem_415;
# 357 "../HPL_dlocswpT.c"
          A2 += lda;
# 357 "../HPL_dlocswpT.c"
          mem_416 = Wr0 + 27;
# 357 "../HPL_dlocswpT.c"
          *A2 = *mem_416;
# 357 "../HPL_dlocswpT.c"
          A2 += lda;
# 358 "../HPL_dlocswpT.c"
          mem_417 = Wr0 + 28;
# 358 "../HPL_dlocswpT.c"
          *A2 = *mem_417;
# 358 "../HPL_dlocswpT.c"
          A2 += lda;
# 358 "../HPL_dlocswpT.c"
          mem_418 = Wr0 + 29;
# 358 "../HPL_dlocswpT.c"
          *A2 = *mem_418;
# 358 "../HPL_dlocswpT.c"
          A2 += lda;
# 359 "../HPL_dlocswpT.c"
          mem_419 = Wr0 + 30;
# 359 "../HPL_dlocswpT.c"
          *A2 = *mem_419;
# 359 "../HPL_dlocswpT.c"
          A2 += lda;
# 359 "../HPL_dlocswpT.c"
          mem_420 = Wr0 + 31;
# 359 "../HPL_dlocswpT.c"
          *A2 = *mem_420;
# 359 "../HPL_dlocswpT.c"
          A2 += lda;
          __CrestLoad(12190, (unsigned long )(& i), (long long )i);
          __CrestLoad(12189, (unsigned long )0, (long long )32);
          __CrestApply2(12188, 0, (long long )(i + 32));
          __CrestStore(12191, (unsigned long )(& i));
# 331 "../HPL_dlocswpT.c"
          i += 32;
# 331 "../HPL_dlocswpT.c"
          Wr0 += 32;
        }
        while_break___7: ;
        }
        __CrestLoad(12192, (unsigned long )0, (long long )0);
        __CrestStore(12193, (unsigned long )(& i));
# 362 "../HPL_dlocswpT.c"
        i = 0;
        {
# 362 "../HPL_dlocswpT.c"
        while (1) {
          while_continue___8: ;
          {
          __CrestLoad(12196, (unsigned long )(& i), (long long )i);
          __CrestLoad(12195, (unsigned long )(& nr), (long long )nr);
          __CrestApply2(12194, 16, (long long )(i < nr));
# 362 "../HPL_dlocswpT.c"
          if (i < nr) {
            __CrestBranch(12197, 4892, 1);

          } else {
            __CrestBranch(12198, 4893, 0);
# 362 "../HPL_dlocswpT.c"
            goto while_break___8;
          }
          }
# 362 "../HPL_dlocswpT.c"
          mem_421 = Wr0 + i;
# 362 "../HPL_dlocswpT.c"
          *A2 = *mem_421;
          __CrestLoad(12201, (unsigned long )(& i), (long long )i);
          __CrestLoad(12200, (unsigned long )0, (long long )1);
          __CrestApply2(12199, 0, (long long )(i + 1));
          __CrestStore(12202, (unsigned long )(& i));
# 362 "../HPL_dlocswpT.c"
          i ++;
# 362 "../HPL_dlocswpT.c"
          A2 += lda;
        }
        while_break___8: ;
        }
      } else {
        __CrestBranch(12180, 4896, 0);

      }
      }
      }
    }
    }
  } else {
    __CrestBranch(12070, 4897, 0);
    __CrestLoad(12203, (unsigned long )0, (long long )0);
    __CrestStore(12204, (unsigned long )(& i));
# 372 "../HPL_dlocswpT.c"
    i = 0;
    {
# 372 "../HPL_dlocswpT.c"
    while (1) {
      while_continue___9: ;
      {
      __CrestLoad(12207, (unsigned long )(& i), (long long )i);
      __CrestLoad(12206, (unsigned long )(& nu), (long long )nu);
      __CrestApply2(12205, 16, (long long )(i < nu));
# 372 "../HPL_dlocswpT.c"
      if (i < nu) {
        __CrestBranch(12208, 4902, 1);

      } else {
        __CrestBranch(12209, 4903, 0);
# 372 "../HPL_dlocswpT.c"
        goto while_break___9;
      }
      }
# 375 "../HPL_dlocswpT.c"
      mem_422 = L + 0;
# 375 "../HPL_dlocswpT.c"
      mem_423 = Wr0 + 0;
# 375 "../HPL_dlocswpT.c"
      *mem_422 = *mem_423;
# 377 "../HPL_dlocswpT.c"
      mem_424 = L + 1;
# 377 "../HPL_dlocswpT.c"
      mem_425 = Wr0 + 1;
# 377 "../HPL_dlocswpT.c"
      *mem_424 = *mem_425;
# 380 "../HPL_dlocswpT.c"
      mem_426 = L + 2;
# 380 "../HPL_dlocswpT.c"
      mem_427 = Wr0 + 2;
# 380 "../HPL_dlocswpT.c"
      *mem_426 = *mem_427;
# 380 "../HPL_dlocswpT.c"
      mem_428 = L + 3;
# 380 "../HPL_dlocswpT.c"
      mem_429 = Wr0 + 3;
# 380 "../HPL_dlocswpT.c"
      *mem_428 = *mem_429;
# 383 "../HPL_dlocswpT.c"
      mem_430 = L + 4;
# 383 "../HPL_dlocswpT.c"
      mem_431 = Wr0 + 4;
# 383 "../HPL_dlocswpT.c"
      *mem_430 = *mem_431;
# 383 "../HPL_dlocswpT.c"
      mem_432 = L + 5;
# 383 "../HPL_dlocswpT.c"
      mem_433 = Wr0 + 5;
# 383 "../HPL_dlocswpT.c"
      *mem_432 = *mem_433;
# 383 "../HPL_dlocswpT.c"
      mem_434 = L + 6;
# 383 "../HPL_dlocswpT.c"
      mem_435 = Wr0 + 6;
# 383 "../HPL_dlocswpT.c"
      *mem_434 = *mem_435;
# 383 "../HPL_dlocswpT.c"
      mem_436 = L + 7;
# 383 "../HPL_dlocswpT.c"
      mem_437 = Wr0 + 7;
# 383 "../HPL_dlocswpT.c"
      *mem_436 = *mem_437;
# 386 "../HPL_dlocswpT.c"
      mem_438 = L + 8;
# 386 "../HPL_dlocswpT.c"
      mem_439 = Wr0 + 8;
# 386 "../HPL_dlocswpT.c"
      *mem_438 = *mem_439;
# 386 "../HPL_dlocswpT.c"
      mem_440 = L + 12;
# 386 "../HPL_dlocswpT.c"
      mem_441 = Wr0 + 12;
# 386 "../HPL_dlocswpT.c"
      *mem_440 = *mem_441;
# 386 "../HPL_dlocswpT.c"
      mem_442 = L + 9;
# 386 "../HPL_dlocswpT.c"
      mem_443 = Wr0 + 9;
# 386 "../HPL_dlocswpT.c"
      *mem_442 = *mem_443;
# 386 "../HPL_dlocswpT.c"
      mem_444 = L + 13;
# 386 "../HPL_dlocswpT.c"
      mem_445 = Wr0 + 13;
# 386 "../HPL_dlocswpT.c"
      *mem_444 = *mem_445;
# 387 "../HPL_dlocswpT.c"
      mem_446 = L + 10;
# 387 "../HPL_dlocswpT.c"
      mem_447 = Wr0 + 10;
# 387 "../HPL_dlocswpT.c"
      *mem_446 = *mem_447;
# 387 "../HPL_dlocswpT.c"
      mem_448 = L + 14;
# 387 "../HPL_dlocswpT.c"
      mem_449 = Wr0 + 14;
# 387 "../HPL_dlocswpT.c"
      *mem_448 = *mem_449;
# 387 "../HPL_dlocswpT.c"
      mem_450 = L + 11;
# 387 "../HPL_dlocswpT.c"
      mem_451 = Wr0 + 11;
# 387 "../HPL_dlocswpT.c"
      *mem_450 = *mem_451;
# 387 "../HPL_dlocswpT.c"
      mem_452 = L + 15;
# 387 "../HPL_dlocswpT.c"
      mem_453 = Wr0 + 15;
# 387 "../HPL_dlocswpT.c"
      *mem_452 = *mem_453;
# 390 "../HPL_dlocswpT.c"
      mem_454 = L + 16;
# 390 "../HPL_dlocswpT.c"
      mem_455 = Wr0 + 16;
# 390 "../HPL_dlocswpT.c"
      *mem_454 = *mem_455;
# 390 "../HPL_dlocswpT.c"
      mem_456 = L + 20;
# 390 "../HPL_dlocswpT.c"
      mem_457 = Wr0 + 20;
# 390 "../HPL_dlocswpT.c"
      *mem_456 = *mem_457;
# 390 "../HPL_dlocswpT.c"
      mem_458 = L + 17;
# 390 "../HPL_dlocswpT.c"
      mem_459 = Wr0 + 17;
# 390 "../HPL_dlocswpT.c"
      *mem_458 = *mem_459;
# 390 "../HPL_dlocswpT.c"
      mem_460 = L + 21;
# 390 "../HPL_dlocswpT.c"
      mem_461 = Wr0 + 21;
# 390 "../HPL_dlocswpT.c"
      *mem_460 = *mem_461;
# 391 "../HPL_dlocswpT.c"
      mem_462 = L + 18;
# 391 "../HPL_dlocswpT.c"
      mem_463 = Wr0 + 18;
# 391 "../HPL_dlocswpT.c"
      *mem_462 = *mem_463;
# 391 "../HPL_dlocswpT.c"
      mem_464 = L + 22;
# 391 "../HPL_dlocswpT.c"
      mem_465 = Wr0 + 22;
# 391 "../HPL_dlocswpT.c"
      *mem_464 = *mem_465;
# 391 "../HPL_dlocswpT.c"
      mem_466 = L + 19;
# 391 "../HPL_dlocswpT.c"
      mem_467 = Wr0 + 19;
# 391 "../HPL_dlocswpT.c"
      *mem_466 = *mem_467;
# 391 "../HPL_dlocswpT.c"
      mem_468 = L + 23;
# 391 "../HPL_dlocswpT.c"
      mem_469 = Wr0 + 23;
# 391 "../HPL_dlocswpT.c"
      *mem_468 = *mem_469;
# 392 "../HPL_dlocswpT.c"
      mem_470 = L + 24;
# 392 "../HPL_dlocswpT.c"
      mem_471 = Wr0 + 24;
# 392 "../HPL_dlocswpT.c"
      *mem_470 = *mem_471;
# 392 "../HPL_dlocswpT.c"
      mem_472 = L + 28;
# 392 "../HPL_dlocswpT.c"
      mem_473 = Wr0 + 28;
# 392 "../HPL_dlocswpT.c"
      *mem_472 = *mem_473;
# 392 "../HPL_dlocswpT.c"
      mem_474 = L + 25;
# 392 "../HPL_dlocswpT.c"
      mem_475 = Wr0 + 25;
# 392 "../HPL_dlocswpT.c"
      *mem_474 = *mem_475;
# 392 "../HPL_dlocswpT.c"
      mem_476 = L + 29;
# 392 "../HPL_dlocswpT.c"
      mem_477 = Wr0 + 29;
# 392 "../HPL_dlocswpT.c"
      *mem_476 = *mem_477;
# 393 "../HPL_dlocswpT.c"
      mem_478 = L + 26;
# 393 "../HPL_dlocswpT.c"
      mem_479 = Wr0 + 26;
# 393 "../HPL_dlocswpT.c"
      *mem_478 = *mem_479;
# 393 "../HPL_dlocswpT.c"
      mem_480 = L + 30;
# 393 "../HPL_dlocswpT.c"
      mem_481 = Wr0 + 30;
# 393 "../HPL_dlocswpT.c"
      *mem_480 = *mem_481;
# 393 "../HPL_dlocswpT.c"
      mem_482 = L + 27;
# 393 "../HPL_dlocswpT.c"
      mem_483 = Wr0 + 27;
# 393 "../HPL_dlocswpT.c"
      *mem_482 = *mem_483;
# 393 "../HPL_dlocswpT.c"
      mem_484 = L + 31;
# 393 "../HPL_dlocswpT.c"
      mem_485 = Wr0 + 31;
# 393 "../HPL_dlocswpT.c"
      *mem_484 = *mem_485;
      __CrestLoad(12212, (unsigned long )(& i), (long long )i);
      __CrestLoad(12211, (unsigned long )0, (long long )32);
      __CrestApply2(12210, 0, (long long )(i + 32));
      __CrestStore(12213, (unsigned long )(& i));
# 372 "../HPL_dlocswpT.c"
      i += 32;
# 372 "../HPL_dlocswpT.c"
      Wr0 += 32;
# 372 "../HPL_dlocswpT.c"
      L += 32;
    }
    while_break___9: ;
    }
    __CrestLoad(12214, (unsigned long )0, (long long )0);
    __CrestStore(12215, (unsigned long )(& i));
# 396 "../HPL_dlocswpT.c"
    i = 0;
    {
# 396 "../HPL_dlocswpT.c"
    while (1) {
      while_continue___10: ;
      {
      __CrestLoad(12218, (unsigned long )(& i), (long long )i);
      __CrestLoad(12217, (unsigned long )(& nr), (long long )nr);
      __CrestApply2(12216, 16, (long long )(i < nr));
# 396 "../HPL_dlocswpT.c"
      if (i < nr) {
        __CrestBranch(12219, 4911, 1);

      } else {
        __CrestBranch(12220, 4912, 0);
# 396 "../HPL_dlocswpT.c"
        goto while_break___10;
      }
      }
# 396 "../HPL_dlocswpT.c"
      mem_486 = L + i;
# 396 "../HPL_dlocswpT.c"
      mem_487 = Wr0 + i;
# 396 "../HPL_dlocswpT.c"
      *mem_486 = *mem_487;
      __CrestLoad(12223, (unsigned long )(& i), (long long )i);
      __CrestLoad(12222, (unsigned long )0, (long long )1);
      __CrestApply2(12221, 0, (long long )(i + 1));
      __CrestStore(12224, (unsigned long )(& i));
# 396 "../HPL_dlocswpT.c"
      i ++;
    }
    while_break___10: ;
    }
    {
# 400 "../HPL_dlocswpT.c"
    mem_488 = PANEL->DINFO;
    {
    __CrestLoad(12227, (unsigned long )mem_488, (long long )*mem_488);
    __CrestLoad(12226, (unsigned long )0, (long long )0.0);
    __CrestApply2(12225, 12, (long long )(*mem_488 == 0.0));
# 400 "../HPL_dlocswpT.c"
    if (*mem_488 == 0.0) {
      __CrestBranch(12228, 4918, 1);
# 401 "../HPL_dlocswpT.c"
      mem_489 = PANEL->DINFO;
# 401 "../HPL_dlocswpT.c"
      *mem_489 = (double )((PANEL->ia + (int )JJ) + 1);
    } else {
      __CrestBranch(12229, 4919, 0);

    }
    }
    }
  }
  }

  {
  __CrestReturn(12230);
# 60 "../HPL_dlocswpT.c"
  return;
  }
}
}
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 112 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dcopy(int const , double const * , int const , double * ,
                        int const ) ;
# 101 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdmxswp(HPL_T_panel *PANEL , int const M , int const II , int const JJ ,
                 double *WORK ) ;
# 53 "../HPL_pdmxswp.c"
void HPL_pdmxswp(HPL_T_panel *PANEL , int const M , int const II , int const JJ ,
                 double *WORK )
{
  double gmax ;
  double tmp1 ;
  double *A0 ;
  double *Wmx ;
  double *Wwork ;
  HPL_T_grid *grid ;
  MPI_Comm comm ;
  unsigned int hdim ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipow ;
  unsigned int k ;
  unsigned int mask ;
  int Np2 ;
  int cnt_ ;
  int cnt0 ;
  int i ;
  int icurrow ;
  int lda ;
  int mydist ;
  int mydis_ ;
  int myrow ;
  int n0 ;
  int nprow ;
  int partner ;
  int rcnt ;
  int root ;
  int scnt ;
  int size_ ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  double *mem_45 ;
  double *mem_46 ;
  double *mem_47 ;
  double *mem_48 ;
  double *mem_49 ;
  double *mem_50 ;
  double *mem_51 ;
  double *mem_52 ;
  double *mem_53 ;
  double *mem_54 ;
  double *mem_55 ;
  double *mem_56 ;
  double *mem_57 ;
  double *mem_58 ;
  double *mem_59 ;
  double *mem_60 ;
  double *mem_61 ;
  double *mem_62 ;
  double *mem_63 ;
  double *mem_64 ;

  {
  __CrestCall(12234, 80);
  __CrestStore(12233, (unsigned long )(& JJ));
  __CrestStore(12232, (unsigned long )(& II));
  __CrestStore(12231, (unsigned long )(& M));
# 137 "../HPL_pdmxswp.c"
  grid = PANEL->grid;
  __CrestLoad(12235, (unsigned long )(& grid->myrow), (long long )grid->myrow);
  __CrestStore(12236, (unsigned long )(& myrow));
# 137 "../HPL_pdmxswp.c"
  myrow = grid->myrow;
  __CrestLoad(12237, (unsigned long )(& grid->nprow), (long long )grid->nprow);
  __CrestStore(12238, (unsigned long )(& nprow));
# 137 "../HPL_pdmxswp.c"
  nprow = grid->nprow;
  __CrestLoad(12239, (unsigned long )(& grid->col_comm), (long long )grid->col_comm);
  __CrestStore(12240, (unsigned long )(& comm));
# 143 "../HPL_pdmxswp.c"
  comm = grid->col_comm;
  __CrestLoad(12241, (unsigned long )(& grid->row_ip2), (long long )grid->row_ip2);
  __CrestStore(12242, (unsigned long )(& ip2));
# 143 "../HPL_pdmxswp.c"
  ip2 = (unsigned int )grid->row_ip2;
  __CrestLoad(12243, (unsigned long )(& grid->row_hdim), (long long )grid->row_hdim);
  __CrestStore(12244, (unsigned long )(& hdim));
# 144 "../HPL_pdmxswp.c"
  hdim = (unsigned int )grid->row_hdim;
  __CrestLoad(12245, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(12246, (unsigned long )(& n0));
# 144 "../HPL_pdmxswp.c"
  n0 = PANEL->jb;
  __CrestLoad(12247, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(12248, (unsigned long )(& icurrow));
# 145 "../HPL_pdmxswp.c"
  icurrow = PANEL->prow;
  __CrestLoad(12251, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(12250, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(12249, 1, (long long )((unsigned int )nprow - ip2));
  __CrestStore(12252, (unsigned long )(& size_));
# 145 "../HPL_pdmxswp.c"
  size_ = (int )((unsigned int )nprow - ip2);
  __CrestLoad(12255, (unsigned long )(& size_), (long long )size_);
  __CrestLoad(12254, (unsigned long )0, (long long )0);
  __CrestApply2(12253, 13, (long long )(size_ != 0));
  __CrestStore(12256, (unsigned long )(& Np2));
# 145 "../HPL_pdmxswp.c"
  Np2 = size_ != 0;
  {
  __CrestLoad(12259, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(12258, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(12257, 16, (long long )(myrow < icurrow));
# 146 "../HPL_pdmxswp.c"
  if (myrow < icurrow) {
    __CrestBranch(12260, 4924, 1);
    __CrestLoad(12266, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(12265, (unsigned long )(& myrow), (long long )myrow);
    __CrestApply2(12264, 0, (long long )(nprow + myrow));
    __CrestLoad(12263, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(12262, 1, (long long )((nprow + myrow) - icurrow));
    __CrestStore(12267, (unsigned long )(& mydist));
# 146 "../HPL_pdmxswp.c"
    mydist = (nprow + myrow) - icurrow;
  } else {
    __CrestBranch(12261, 4925, 0);
    __CrestLoad(12270, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(12269, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(12268, 1, (long long )(myrow - icurrow));
    __CrestStore(12271, (unsigned long )(& mydist));
# 146 "../HPL_pdmxswp.c"
    mydist = myrow - icurrow;
  }
  }
  __CrestLoad(12274, (unsigned long )(& n0), (long long )n0);
  __CrestLoad(12273, (unsigned long )0, (long long )4);
  __CrestApply2(12272, 0, (long long )(n0 + 4));
  __CrestStore(12275, (unsigned long )(& cnt_));
# 153 "../HPL_pdmxswp.c"
  cnt_ = n0 + 4;
  __CrestLoad(12278, (unsigned long )(& cnt_), (long long )cnt_);
  __CrestLoad(12277, (unsigned long )(& n0), (long long )n0);
  __CrestApply2(12276, 0, (long long )(cnt_ + n0));
  __CrestStore(12279, (unsigned long )(& cnt0));
# 153 "../HPL_pdmxswp.c"
  cnt0 = cnt_ + n0;
# 153 "../HPL_pdmxswp.c"
  Wmx = WORK + 4;
# 153 "../HPL_pdmxswp.c"
  A0 = Wmx + n0;
# 154 "../HPL_pdmxswp.c"
  Wwork = WORK + cnt0;
  {
  __CrestLoad(12282, (unsigned long )(& M), (long long )M);
  __CrestLoad(12281, (unsigned long )0, (long long )0);
  __CrestApply2(12280, 14, (long long )(M > 0));
# 161 "../HPL_pdmxswp.c"
  if (M > 0) {
    __CrestBranch(12283, 4928, 1);
    __CrestLoad(12285, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
    __CrestStore(12286, (unsigned long )(& lda));
# 163 "../HPL_pdmxswp.c"
    lda = PANEL->lda;
# 164 "../HPL_pdmxswp.c"
    mem_45 = WORK + 1;
    __CrestLoad(12287, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(12288, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(12289, (unsigned long )0, (long long )((int const )1));
# 164 "../HPL_pdmxswp.c"
    cblas_dcopy((int const )n0, (double const *)((PANEL->A + (II + (int const )((int )*mem_45))) + 0),
                (int const )lda, Wmx, (int const )1);
    __CrestClearStack(12290);
    {
    __CrestLoad(12293, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(12292, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(12291, 12, (long long )(myrow == icurrow));
# 166 "../HPL_pdmxswp.c"
    if (myrow == icurrow) {
      __CrestBranch(12294, 4930, 1);
      __CrestLoad(12296, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(12297, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(12298, (unsigned long )0, (long long )((int const )1));
# 167 "../HPL_pdmxswp.c"
      cblas_dcopy((int const )n0, (double const *)((PANEL->A + II) + 0), (int const )lda,
                  A0, (int const )1);
      __CrestClearStack(12299);
    } else {
      __CrestBranch(12295, 4931, 0);

    }
    }
  } else {
    __CrestBranch(12284, 4932, 0);
    __CrestLoad(12300, (unsigned long )0, (long long )0);
    __CrestStore(12301, (unsigned long )(& i));
# 169 "../HPL_pdmxswp.c"
    i = 0;
    {
# 169 "../HPL_pdmxswp.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(12304, (unsigned long )(& i), (long long )i);
      __CrestLoad(12303, (unsigned long )(& n0), (long long )n0);
      __CrestApply2(12302, 16, (long long )(i < n0));
# 169 "../HPL_pdmxswp.c"
      if (i < n0) {
        __CrestBranch(12305, 4937, 1);

      } else {
        __CrestBranch(12306, 4938, 0);
# 169 "../HPL_pdmxswp.c"
        goto while_break;
      }
      }
# 169 "../HPL_pdmxswp.c"
      mem_46 = Wmx + i;
# 169 "../HPL_pdmxswp.c"
      *mem_46 = 0.0;
      __CrestLoad(12309, (unsigned long )(& i), (long long )i);
      __CrestLoad(12308, (unsigned long )0, (long long )1);
      __CrestApply2(12307, 0, (long long )(i + 1));
      __CrestStore(12310, (unsigned long )(& i));
# 169 "../HPL_pdmxswp.c"
      i ++;
    }
    while_break: ;
    }
  }
  }
  {
  __CrestLoad(12313, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(12312, (unsigned long )0, (long long )0);
  __CrestApply2(12311, 13, (long long )(Np2 != 0));
# 180 "../HPL_pdmxswp.c"
  if (Np2 != 0) {
    __CrestBranch(12314, 4942, 1);
    __CrestLoad(12318, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(12317, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(12316, 7, (long long )((unsigned int )mydist ^ ip2));
    __CrestStore(12319, (unsigned long )(& partner));
# 180 "../HPL_pdmxswp.c"
    partner = (int )((unsigned int )mydist ^ ip2);
    {
    __CrestLoad(12322, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(12321, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(12320, 16, (long long )(partner < nprow));
# 180 "../HPL_pdmxswp.c"
    if (partner < nprow) {
      __CrestBranch(12323, 4944, 1);
      {
      __CrestLoad(12329, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(12328, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(12327, 5, (long long )((unsigned int )mydist & ip2));
      __CrestLoad(12326, (unsigned long )0, (long long )0U);
      __CrestApply2(12325, 13, (long long )(((unsigned int )mydist & ip2) != 0U));
# 183 "../HPL_pdmxswp.c"
      if (((unsigned int )mydist & ip2) != 0U) {
        __CrestBranch(12330, 4945, 1);
        {
        __CrestLoad(12334, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(12333, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(12332, 12, (long long )(mydist == (int )ip2));
# 185 "../HPL_pdmxswp.c"
        if (mydist == (int )ip2) {
          __CrestBranch(12335, 4946, 1);
          {
          __CrestLoad(12341, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12340, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12339, 0, (long long )(partner + icurrow));
          __CrestLoad(12338, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12337, 16, (long long )(partner + icurrow < nprow));
# 186 "../HPL_pdmxswp.c"
          if (partner + icurrow < nprow) {
            __CrestBranch(12342, 4947, 1);
            __CrestLoad(12346, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12345, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12344, 0, (long long )(partner + icurrow));
            __CrestStore(12347, (unsigned long )(& tmp));
# 186 "../HPL_pdmxswp.c"
            tmp = partner + icurrow;
          } else {
            __CrestBranch(12343, 4948, 0);
            __CrestLoad(12352, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12351, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12350, 0, (long long )(partner + icurrow));
            __CrestLoad(12349, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(12348, 1, (long long )((partner + icurrow) - nprow));
            __CrestStore(12353, (unsigned long )(& tmp));
# 186 "../HPL_pdmxswp.c"
            tmp = (partner + icurrow) - nprow;
          }
          }
          __CrestLoad(12354, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestLoad(12355, (unsigned long )0, (long long )1001);
          __CrestLoad(12356, (unsigned long )(& n0), (long long )n0);
          __CrestLoad(12357, (unsigned long )0, (long long )1001);
          __CrestLoad(12358, (unsigned long )(& tmp), (long long )tmp);
          __CrestLoad(12359, (unsigned long )(& comm), (long long )comm);
# 186 "../HPL_pdmxswp.c"
          HPL_sdrv(WORK, cnt_, 1001, A0, n0, 1001, tmp, comm);
          __CrestClearStack(12360);
        } else {
          __CrestBranch(12336, 4950, 0);
          {
          __CrestLoad(12365, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12364, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12363, 0, (long long )(partner + icurrow));
          __CrestLoad(12362, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12361, 16, (long long )(partner + icurrow < nprow));
# 190 "../HPL_pdmxswp.c"
          if (partner + icurrow < nprow) {
            __CrestBranch(12366, 4951, 1);
            __CrestLoad(12370, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12369, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12368, 0, (long long )(partner + icurrow));
            __CrestStore(12371, (unsigned long )(& tmp___0));
# 190 "../HPL_pdmxswp.c"
            tmp___0 = partner + icurrow;
          } else {
            __CrestBranch(12367, 4952, 0);
            __CrestLoad(12376, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12375, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12374, 0, (long long )(partner + icurrow));
            __CrestLoad(12373, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(12372, 1, (long long )((partner + icurrow) - nprow));
            __CrestStore(12377, (unsigned long )(& tmp___0));
# 190 "../HPL_pdmxswp.c"
            tmp___0 = (partner + icurrow) - nprow;
          }
          }
          __CrestLoad(12378, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestLoad(12379, (unsigned long )(& tmp___0), (long long )tmp___0);
          __CrestLoad(12380, (unsigned long )0, (long long )1001);
          __CrestLoad(12381, (unsigned long )(& comm), (long long )comm);
# 190 "../HPL_pdmxswp.c"
          HPL_send(WORK, cnt_, tmp___0, 1001, comm);
          __CrestClearStack(12382);
        }
        }
      } else {
        __CrestBranch(12331, 4954, 0);
        {
        __CrestLoad(12385, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(12384, (unsigned long )0, (long long )0);
        __CrestApply2(12383, 12, (long long )(mydist == 0));
# 195 "../HPL_pdmxswp.c"
        if (mydist == 0) {
          __CrestBranch(12386, 4955, 1);
          {
          __CrestLoad(12392, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12391, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12390, 0, (long long )(partner + icurrow));
          __CrestLoad(12389, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12388, 16, (long long )(partner + icurrow < nprow));
# 196 "../HPL_pdmxswp.c"
          if (partner + icurrow < nprow) {
            __CrestBranch(12393, 4956, 1);
            __CrestLoad(12397, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12396, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12395, 0, (long long )(partner + icurrow));
            __CrestStore(12398, (unsigned long )(& tmp___1));
# 196 "../HPL_pdmxswp.c"
            tmp___1 = partner + icurrow;
          } else {
            __CrestBranch(12394, 4957, 0);
            __CrestLoad(12403, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12402, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12401, 0, (long long )(partner + icurrow));
            __CrestLoad(12400, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(12399, 1, (long long )((partner + icurrow) - nprow));
            __CrestStore(12404, (unsigned long )(& tmp___1));
# 196 "../HPL_pdmxswp.c"
            tmp___1 = (partner + icurrow) - nprow;
          }
          }
          __CrestLoad(12405, (unsigned long )(& n0), (long long )n0);
          __CrestLoad(12406, (unsigned long )0, (long long )1001);
          __CrestLoad(12407, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestLoad(12408, (unsigned long )0, (long long )1001);
          __CrestLoad(12409, (unsigned long )(& tmp___1), (long long )tmp___1);
          __CrestLoad(12410, (unsigned long )(& comm), (long long )comm);
# 196 "../HPL_pdmxswp.c"
          HPL_sdrv(A0, n0, 1001, Wwork, cnt_, 1001, tmp___1, comm);
          __CrestClearStack(12411);
        } else {
          __CrestBranch(12387, 4959, 0);
          {
          __CrestLoad(12416, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12415, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12414, 0, (long long )(partner + icurrow));
          __CrestLoad(12413, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12412, 16, (long long )(partner + icurrow < nprow));
# 200 "../HPL_pdmxswp.c"
          if (partner + icurrow < nprow) {
            __CrestBranch(12417, 4960, 1);
            __CrestLoad(12421, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12420, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12419, 0, (long long )(partner + icurrow));
            __CrestStore(12422, (unsigned long )(& tmp___2));
# 200 "../HPL_pdmxswp.c"
            tmp___2 = partner + icurrow;
          } else {
            __CrestBranch(12418, 4961, 0);
            __CrestLoad(12427, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12426, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(12425, 0, (long long )(partner + icurrow));
            __CrestLoad(12424, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(12423, 1, (long long )((partner + icurrow) - nprow));
            __CrestStore(12428, (unsigned long )(& tmp___2));
# 200 "../HPL_pdmxswp.c"
            tmp___2 = (partner + icurrow) - nprow;
          }
          }
          __CrestLoad(12429, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestLoad(12430, (unsigned long )(& tmp___2), (long long )tmp___2);
          __CrestLoad(12431, (unsigned long )0, (long long )1001);
          __CrestLoad(12432, (unsigned long )(& comm), (long long )comm);
# 200 "../HPL_pdmxswp.c"
          HPL_recv(Wwork, cnt_, tmp___2, 1001, comm);
          __CrestClearStack(12433);
        }
        }
        {
# 203 "../HPL_pdmxswp.c"
        mem_47 = Wwork + 0;
        {
        __CrestLoad(12436, (unsigned long )mem_47, (long long )*mem_47);
        __CrestLoad(12435, (unsigned long )0, (long long )((double )0));
        __CrestApply2(12434, 16, (long long )(*mem_47 < (double )0));
# 203 "../HPL_pdmxswp.c"
        if (*mem_47 < (double )0) {
          __CrestBranch(12437, 4966, 1);
# 203 "../HPL_pdmxswp.c"
          mem_48 = Wwork + 0;
# 203 "../HPL_pdmxswp.c"
          tmp1 = - *mem_48;
        } else {
          __CrestBranch(12438, 4967, 0);
# 203 "../HPL_pdmxswp.c"
          mem_49 = Wwork + 0;
# 203 "../HPL_pdmxswp.c"
          tmp1 = *mem_49;
        }
        }
        }
        {
# 203 "../HPL_pdmxswp.c"
        mem_50 = WORK + 0;
        {
        __CrestLoad(12441, (unsigned long )mem_50, (long long )*mem_50);
        __CrestLoad(12440, (unsigned long )0, (long long )((double )0));
        __CrestApply2(12439, 16, (long long )(*mem_50 < (double )0));
# 203 "../HPL_pdmxswp.c"
        if (*mem_50 < (double )0) {
          __CrestBranch(12442, 4971, 1);
# 203 "../HPL_pdmxswp.c"
          mem_51 = WORK + 0;
# 203 "../HPL_pdmxswp.c"
          gmax = - *mem_51;
        } else {
          __CrestBranch(12443, 4972, 0);
# 203 "../HPL_pdmxswp.c"
          mem_52 = WORK + 0;
# 203 "../HPL_pdmxswp.c"
          gmax = *mem_52;
        }
        }
        }
        {
        __CrestLoad(12446, (unsigned long )(& tmp1), (long long )tmp1);
        __CrestLoad(12445, (unsigned long )(& gmax), (long long )gmax);
        __CrestApply2(12444, 14, (long long )(tmp1 > gmax));
# 204 "../HPL_pdmxswp.c"
        if (tmp1 > gmax) {
          __CrestBranch(12447, 4974, 1);
          __CrestLoad(12449, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestLoad(12450, (unsigned long )0, (long long )((int const )1));
          __CrestLoad(12451, (unsigned long )0, (long long )((int const )1));
# 206 "../HPL_pdmxswp.c"
          cblas_dcopy((int const )cnt_, (double const *)Wwork, (int const )1,
                      WORK, (int const )1);
          __CrestClearStack(12452);
        } else {
          __CrestBranch(12448, 4975, 0);
          {
          __CrestLoad(12455, (unsigned long )(& tmp1), (long long )tmp1);
          __CrestLoad(12454, (unsigned long )(& gmax), (long long )gmax);
          __CrestApply2(12453, 12, (long long )(tmp1 == gmax));
# 204 "../HPL_pdmxswp.c"
          if (tmp1 == gmax) {
            __CrestBranch(12456, 4976, 1);
            {
# 204 "../HPL_pdmxswp.c"
            mem_53 = Wwork + 3;
# 204 "../HPL_pdmxswp.c"
            mem_54 = WORK + 3;
            {
            __CrestLoad(12460, (unsigned long )mem_53, (long long )*mem_53);
            __CrestLoad(12459, (unsigned long )mem_54, (long long )*mem_54);
            __CrestApply2(12458, 16, (long long )(*mem_53 < *mem_54));
# 204 "../HPL_pdmxswp.c"
            if (*mem_53 < *mem_54) {
              __CrestBranch(12461, 4979, 1);
              __CrestLoad(12463, (unsigned long )(& cnt_), (long long )cnt_);
              __CrestLoad(12464, (unsigned long )0, (long long )((int const )1));
              __CrestLoad(12465, (unsigned long )0, (long long )((int const )1));
# 206 "../HPL_pdmxswp.c"
              cblas_dcopy((int const )cnt_, (double const *)Wwork, (int const )1,
                          WORK, (int const )1);
              __CrestClearStack(12466);
            } else {
              __CrestBranch(12462, 4980, 0);

            }
            }
            }
          } else {
            __CrestBranch(12457, 4981, 0);

          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(12324, 4982, 0);

    }
    }
  } else {
    __CrestBranch(12315, 4983, 0);

  }
  }
  {
  __CrestLoad(12469, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(12468, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(12467, 16, (long long )(mydist < (int )ip2));
# 210 "../HPL_pdmxswp.c"
  if (mydist < (int )ip2) {
    __CrestBranch(12470, 4985, 1);
    __CrestLoad(12472, (unsigned long )0, (long long )0U);
    __CrestStore(12473, (unsigned long )(& k));
# 220 "../HPL_pdmxswp.c"
    k = 0U;
    __CrestLoad(12474, (unsigned long )0, (long long )1U);
    __CrestStore(12475, (unsigned long )(& ipow));
# 220 "../HPL_pdmxswp.c"
    ipow = 1U;
    {
# 222 "../HPL_pdmxswp.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(12478, (unsigned long )(& k), (long long )k);
      __CrestLoad(12477, (unsigned long )(& hdim), (long long )hdim);
      __CrestApply2(12476, 16, (long long )(k < hdim));
# 222 "../HPL_pdmxswp.c"
      if (k < hdim) {
        __CrestBranch(12479, 4990, 1);

      } else {
        __CrestBranch(12480, 4991, 0);
# 222 "../HPL_pdmxswp.c"
        goto while_break___0;
      }
      }
      {
      __CrestLoad(12487, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(12486, (unsigned long )(& k), (long long )k);
      __CrestLoad(12485, (unsigned long )0, (long long )1U);
      __CrestApply2(12484, 0, (long long )(k + 1U));
      __CrestApply2(12483, 9, (long long )((unsigned int )mydist >> (k + 1U)));
      __CrestLoad(12482, (unsigned long )0, (long long )0U);
      __CrestApply2(12481, 12, (long long )((unsigned int )mydist >> (k + 1U) == 0U));
# 224 "../HPL_pdmxswp.c"
      if ((unsigned int )mydist >> (k + 1U) == 0U) {
        __CrestBranch(12488, 4993, 1);
        {
        __CrestLoad(12494, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(12493, (unsigned long )(& k), (long long )k);
        __CrestApply2(12492, 9, (long long )((unsigned int )mydist >> k));
        __CrestLoad(12491, (unsigned long )0, (long long )0U);
        __CrestApply2(12490, 12, (long long )((unsigned int )mydist >> k == 0U));
# 226 "../HPL_pdmxswp.c"
        if ((unsigned int )mydist >> k == 0U) {
          __CrestBranch(12495, 4994, 1);
          __CrestLoad(12497, (unsigned long )(& cnt0), (long long )cnt0);
          __CrestStore(12498, (unsigned long )(& scnt));
# 227 "../HPL_pdmxswp.c"
          scnt = cnt0;
          __CrestLoad(12499, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestStore(12500, (unsigned long )(& rcnt));
# 227 "../HPL_pdmxswp.c"
          rcnt = cnt_;
        } else {
          __CrestBranch(12496, 4995, 0);
          __CrestLoad(12501, (unsigned long )(& cnt_), (long long )cnt_);
          __CrestStore(12502, (unsigned long )(& scnt));
# 229 "../HPL_pdmxswp.c"
          scnt = cnt_;
          __CrestLoad(12503, (unsigned long )(& cnt0), (long long )cnt0);
          __CrestStore(12504, (unsigned long )(& rcnt));
# 229 "../HPL_pdmxswp.c"
          rcnt = cnt0;
        }
        }
      } else {
        __CrestBranch(12489, 4996, 0);
        __CrestLoad(12505, (unsigned long )(& cnt_), (long long )cnt_);
        __CrestStore(12506, (unsigned long )(& rcnt));
# 231 "../HPL_pdmxswp.c"
        rcnt = cnt_;
        __CrestLoad(12507, (unsigned long )(& rcnt), (long long )rcnt);
        __CrestStore(12508, (unsigned long )(& scnt));
# 231 "../HPL_pdmxswp.c"
        scnt = rcnt;
      }
      }
      __CrestLoad(12511, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(12510, (unsigned long )(& ipow), (long long )ipow);
      __CrestApply2(12509, 7, (long long )((unsigned int )mydist ^ ipow));
      __CrestStore(12512, (unsigned long )(& partner));
# 233 "../HPL_pdmxswp.c"
      partner = (int )((unsigned int )mydist ^ ipow);
      {
      __CrestLoad(12517, (unsigned long )(& partner), (long long )partner);
      __CrestLoad(12516, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestApply2(12515, 0, (long long )(partner + icurrow));
      __CrestLoad(12514, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(12513, 16, (long long )(partner + icurrow < nprow));
# 234 "../HPL_pdmxswp.c"
      if (partner + icurrow < nprow) {
        __CrestBranch(12518, 4999, 1);
        __CrestLoad(12522, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(12521, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(12520, 0, (long long )(partner + icurrow));
        __CrestStore(12523, (unsigned long )(& tmp___3));
# 234 "../HPL_pdmxswp.c"
        tmp___3 = partner + icurrow;
      } else {
        __CrestBranch(12519, 5000, 0);
        __CrestLoad(12528, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(12527, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(12526, 0, (long long )(partner + icurrow));
        __CrestLoad(12525, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(12524, 1, (long long )((partner + icurrow) - nprow));
        __CrestStore(12529, (unsigned long )(& tmp___3));
# 234 "../HPL_pdmxswp.c"
        tmp___3 = (partner + icurrow) - nprow;
      }
      }
      __CrestLoad(12530, (unsigned long )(& scnt), (long long )scnt);
      __CrestLoad(12531, (unsigned long )0, (long long )1001);
      __CrestLoad(12532, (unsigned long )(& rcnt), (long long )rcnt);
      __CrestLoad(12533, (unsigned long )0, (long long )1001);
      __CrestLoad(12534, (unsigned long )(& tmp___3), (long long )tmp___3);
      __CrestLoad(12535, (unsigned long )(& comm), (long long )comm);
# 234 "../HPL_pdmxswp.c"
      HPL_sdrv(WORK, scnt, 1001, Wwork, rcnt, 1001, tmp___3, comm);
      __CrestClearStack(12536);
      {
# 238 "../HPL_pdmxswp.c"
      mem_55 = Wwork + 0;
      {
      __CrestLoad(12539, (unsigned long )mem_55, (long long )*mem_55);
      __CrestLoad(12538, (unsigned long )0, (long long )((double )0));
      __CrestApply2(12537, 16, (long long )(*mem_55 < (double )0));
# 238 "../HPL_pdmxswp.c"
      if (*mem_55 < (double )0) {
        __CrestBranch(12540, 5005, 1);
# 238 "../HPL_pdmxswp.c"
        mem_56 = Wwork + 0;
# 238 "../HPL_pdmxswp.c"
        tmp1 = - *mem_56;
      } else {
        __CrestBranch(12541, 5006, 0);
# 238 "../HPL_pdmxswp.c"
        mem_57 = Wwork + 0;
# 238 "../HPL_pdmxswp.c"
        tmp1 = *mem_57;
      }
      }
      }
      {
# 238 "../HPL_pdmxswp.c"
      mem_58 = WORK + 0;
      {
      __CrestLoad(12544, (unsigned long )mem_58, (long long )*mem_58);
      __CrestLoad(12543, (unsigned long )0, (long long )((double )0));
      __CrestApply2(12542, 16, (long long )(*mem_58 < (double )0));
# 238 "../HPL_pdmxswp.c"
      if (*mem_58 < (double )0) {
        __CrestBranch(12545, 5010, 1);
# 238 "../HPL_pdmxswp.c"
        mem_59 = WORK + 0;
# 238 "../HPL_pdmxswp.c"
        gmax = - *mem_59;
      } else {
        __CrestBranch(12546, 5011, 0);
# 238 "../HPL_pdmxswp.c"
        mem_60 = WORK + 0;
# 238 "../HPL_pdmxswp.c"
        gmax = *mem_60;
      }
      }
      }
      {
      __CrestLoad(12549, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestLoad(12548, (unsigned long )(& gmax), (long long )gmax);
      __CrestApply2(12547, 14, (long long )(tmp1 > gmax));
# 239 "../HPL_pdmxswp.c"
      if (tmp1 > gmax) {
        __CrestBranch(12550, 5013, 1);
# 239 "../HPL_pdmxswp.c"
        goto _L;
      } else {
        __CrestBranch(12551, 5014, 0);
        {
        __CrestLoad(12554, (unsigned long )(& tmp1), (long long )tmp1);
        __CrestLoad(12553, (unsigned long )(& gmax), (long long )gmax);
        __CrestApply2(12552, 12, (long long )(tmp1 == gmax));
# 239 "../HPL_pdmxswp.c"
        if (tmp1 == gmax) {
          __CrestBranch(12555, 5015, 1);
          {
# 239 "../HPL_pdmxswp.c"
          mem_61 = Wwork + 3;
# 239 "../HPL_pdmxswp.c"
          mem_62 = WORK + 3;
          {
          __CrestLoad(12559, (unsigned long )mem_61, (long long )*mem_61);
          __CrestLoad(12558, (unsigned long )mem_62, (long long )*mem_62);
          __CrestApply2(12557, 16, (long long )(*mem_61 < *mem_62));
# 239 "../HPL_pdmxswp.c"
          if (*mem_61 < *mem_62) {
            __CrestBranch(12560, 5018, 1);
            _L:
            {
            __CrestLoad(12564, (unsigned long )(& rcnt), (long long )rcnt);
            __CrestLoad(12563, (unsigned long )(& cnt0), (long long )cnt0);
            __CrestApply2(12562, 12, (long long )(rcnt == cnt0));
# 242 "../HPL_pdmxswp.c"
            if (rcnt == cnt0) {
              __CrestBranch(12565, 5019, 1);
              __CrestLoad(12567, (unsigned long )(& cnt0), (long long )cnt0);
              __CrestStore(12568, (unsigned long )(& tmp___4));
# 242 "../HPL_pdmxswp.c"
              tmp___4 = cnt0;
            } else {
              __CrestBranch(12566, 5020, 0);
              __CrestLoad(12569, (unsigned long )(& cnt_), (long long )cnt_);
              __CrestStore(12570, (unsigned long )(& tmp___4));
# 242 "../HPL_pdmxswp.c"
              tmp___4 = cnt_;
            }
            }
            __CrestLoad(12571, (unsigned long )(& tmp___4), (long long )tmp___4);
            __CrestLoad(12572, (unsigned long )0, (long long )((int const )1));
            __CrestLoad(12573, (unsigned long )0, (long long )((int const )1));
# 242 "../HPL_pdmxswp.c"
            cblas_dcopy((int const )tmp___4, (double const *)Wwork, (int const )1,
                        WORK, (int const )1);
            __CrestClearStack(12574);
          } else {
            __CrestBranch(12561, 5022, 0);
# 239 "../HPL_pdmxswp.c"
            goto _L___0;
          }
          }
          }
        } else {
          __CrestBranch(12556, 5023, 0);
          _L___0:
          {
          __CrestLoad(12577, (unsigned long )(& rcnt), (long long )rcnt);
          __CrestLoad(12576, (unsigned long )(& cnt0), (long long )cnt0);
          __CrestApply2(12575, 12, (long long )(rcnt == cnt0));
# 245 "../HPL_pdmxswp.c"
          if (rcnt == cnt0) {
            __CrestBranch(12578, 5024, 1);
            __CrestLoad(12580, (unsigned long )(& n0), (long long )n0);
            __CrestLoad(12581, (unsigned long )0, (long long )((int const )1));
            __CrestLoad(12582, (unsigned long )0, (long long )((int const )1));
# 246 "../HPL_pdmxswp.c"
            cblas_dcopy((int const )n0, (double const *)(Wwork + cnt_), (int const )1,
                        A0, (int const )1);
            __CrestClearStack(12583);
          } else {
            __CrestBranch(12579, 5025, 0);

          }
          }
        }
        }
      }
      }
      __CrestLoad(12586, (unsigned long )(& ipow), (long long )ipow);
      __CrestLoad(12585, (unsigned long )0, (long long )1);
      __CrestApply2(12584, 8, (long long )(ipow << 1));
      __CrestStore(12587, (unsigned long )(& ipow));
# 248 "../HPL_pdmxswp.c"
      ipow <<= 1;
      __CrestLoad(12590, (unsigned long )(& k), (long long )k);
      __CrestLoad(12589, (unsigned long )0, (long long )1U);
      __CrestApply2(12588, 0, (long long )(k + 1U));
      __CrestStore(12591, (unsigned long )(& k));
# 248 "../HPL_pdmxswp.c"
      k ++;
    }
    while_break___0: ;
    }
  } else {
    __CrestBranch(12471, 5028, 0);
    {
    __CrestLoad(12594, (unsigned long )(& size_), (long long )size_);
    __CrestLoad(12593, (unsigned long )0, (long long )1);
    __CrestApply2(12592, 14, (long long )(size_ > 1));
# 251 "../HPL_pdmxswp.c"
    if (size_ > 1) {
      __CrestBranch(12595, 5029, 1);
      __CrestLoad(12599, (unsigned long )(& size_), (long long )size_);
      __CrestLoad(12598, (unsigned long )0, (long long )1U);
      __CrestApply2(12597, 1, (long long )((unsigned int )size_ - 1U));
      __CrestStore(12600, (unsigned long )(& k));
# 256 "../HPL_pdmxswp.c"
      k = (unsigned int )size_ - 1U;
      __CrestLoad(12601, (unsigned long )0, (long long )1U);
      __CrestStore(12602, (unsigned long )(& mask));
# 256 "../HPL_pdmxswp.c"
      mask = 1U;
      __CrestLoad(12603, (unsigned long )(& mask), (long long )mask);
      __CrestStore(12604, (unsigned long )(& ip2_));
# 256 "../HPL_pdmxswp.c"
      ip2_ = mask;
      {
# 257 "../HPL_pdmxswp.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(12607, (unsigned long )(& k), (long long )k);
        __CrestLoad(12606, (unsigned long )0, (long long )1U);
        __CrestApply2(12605, 14, (long long )(k > 1U));
# 257 "../HPL_pdmxswp.c"
        if (k > 1U) {
          __CrestBranch(12608, 5034, 1);

        } else {
          __CrestBranch(12609, 5035, 0);
# 257 "../HPL_pdmxswp.c"
          goto while_break___1;
        }
        }
        __CrestLoad(12612, (unsigned long )(& k), (long long )k);
        __CrestLoad(12611, (unsigned long )0, (long long )1);
        __CrestApply2(12610, 9, (long long )(k >> 1));
        __CrestStore(12613, (unsigned long )(& k));
# 257 "../HPL_pdmxswp.c"
        k >>= 1;
        __CrestLoad(12616, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(12615, (unsigned long )0, (long long )1);
        __CrestApply2(12614, 8, (long long )(ip2_ << 1));
        __CrestStore(12617, (unsigned long )(& ip2_));
# 257 "../HPL_pdmxswp.c"
        ip2_ <<= 1;
        __CrestLoad(12620, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(12619, (unsigned long )0, (long long )1);
        __CrestApply2(12618, 8, (long long )(mask << 1));
        __CrestStore(12621, (unsigned long )(& mask));
# 257 "../HPL_pdmxswp.c"
        mask <<= 1;
        __CrestLoad(12624, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(12623, (unsigned long )0, (long long )1U);
        __CrestApply2(12622, 0, (long long )(mask + 1U));
        __CrestStore(12625, (unsigned long )(& mask));
# 257 "../HPL_pdmxswp.c"
        mask ++;
      }
      while_break___1: ;
      }
      {
      __CrestLoad(12630, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(12629, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(12628, 0, (long long )(icurrow + (int )ip2));
      __CrestLoad(12627, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(12626, 16, (long long )(icurrow + (int )ip2 < nprow));
# 259 "../HPL_pdmxswp.c"
      if (icurrow + (int )ip2 < nprow) {
        __CrestBranch(12631, 5039, 1);
        __CrestLoad(12635, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(12634, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(12633, 0, (long long )(icurrow + (int )ip2));
        __CrestStore(12636, (unsigned long )(& root));
# 259 "../HPL_pdmxswp.c"
        root = icurrow + (int )ip2;
      } else {
        __CrestBranch(12632, 5040, 0);
        __CrestLoad(12641, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(12640, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(12639, 0, (long long )(icurrow + (int )ip2));
        __CrestLoad(12638, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(12637, 1, (long long )((icurrow + (int )ip2) - nprow));
        __CrestStore(12642, (unsigned long )(& root));
# 259 "../HPL_pdmxswp.c"
        root = (icurrow + (int )ip2) - nprow;
      }
      }
      {
      __CrestLoad(12645, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(12644, (unsigned long )(& root), (long long )root);
      __CrestApply2(12643, 16, (long long )(myrow < root));
# 260 "../HPL_pdmxswp.c"
      if (myrow < root) {
        __CrestBranch(12646, 5042, 1);
        __CrestLoad(12652, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(12651, (unsigned long )(& myrow), (long long )myrow);
        __CrestApply2(12650, 0, (long long )(nprow + myrow));
        __CrestLoad(12649, (unsigned long )(& root), (long long )root);
        __CrestApply2(12648, 1, (long long )((nprow + myrow) - root));
        __CrestStore(12653, (unsigned long )(& mydis_));
# 260 "../HPL_pdmxswp.c"
        mydis_ = (nprow + myrow) - root;
      } else {
        __CrestBranch(12647, 5043, 0);
        __CrestLoad(12656, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(12655, (unsigned long )(& root), (long long )root);
        __CrestApply2(12654, 1, (long long )(myrow - root));
        __CrestStore(12657, (unsigned long )(& mydis_));
# 260 "../HPL_pdmxswp.c"
        mydis_ = myrow - root;
      }
      }
      {
# 262 "../HPL_pdmxswp.c"
      while (1) {
        while_continue___2: ;
        __CrestLoad(12660, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(12659, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestApply2(12658, 7, (long long )(mask ^ ip2_));
        __CrestStore(12661, (unsigned long )(& mask));
# 264 "../HPL_pdmxswp.c"
        mask ^= ip2_;
        {
        __CrestLoad(12666, (unsigned long )(& mydis_), (long long )mydis_);
        __CrestLoad(12665, (unsigned long )(& mask), (long long )mask);
        __CrestApply2(12664, 5, (long long )((unsigned int )mydis_ & mask));
        __CrestLoad(12663, (unsigned long )0, (long long )0U);
        __CrestApply2(12662, 12, (long long )(((unsigned int )mydis_ & mask) == 0U));
# 265 "../HPL_pdmxswp.c"
        if (((unsigned int )mydis_ & mask) == 0U) {
          __CrestBranch(12667, 5049, 1);
          __CrestLoad(12671, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(12670, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(12669, 7, (long long )((unsigned int )mydis_ ^ ip2_));
          __CrestStore(12672, (unsigned long )(& partner));
# 267 "../HPL_pdmxswp.c"
          partner = (int )((unsigned int )mydis_ ^ ip2_);
          {
          __CrestLoad(12677, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(12676, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(12675, 5, (long long )((unsigned int )mydis_ & ip2_));
          __CrestLoad(12674, (unsigned long )0, (long long )0U);
          __CrestApply2(12673, 13, (long long )(((unsigned int )mydis_ & ip2_) != 0U));
# 268 "../HPL_pdmxswp.c"
          if (((unsigned int )mydis_ & ip2_) != 0U) {
            __CrestBranch(12678, 5051, 1);
            {
            __CrestLoad(12684, (unsigned long )(& root), (long long )root);
            __CrestLoad(12683, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(12682, 0, (long long )(root + partner));
            __CrestLoad(12681, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(12680, 16, (long long )(root + partner < nprow));
# 270 "../HPL_pdmxswp.c"
            if (root + partner < nprow) {
              __CrestBranch(12685, 5052, 1);
              __CrestLoad(12689, (unsigned long )(& root), (long long )root);
              __CrestLoad(12688, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(12687, 0, (long long )(root + partner));
              __CrestStore(12690, (unsigned long )(& tmp___5));
# 270 "../HPL_pdmxswp.c"
              tmp___5 = root + partner;
            } else {
              __CrestBranch(12686, 5053, 0);
              __CrestLoad(12695, (unsigned long )(& root), (long long )root);
              __CrestLoad(12694, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(12693, 0, (long long )(root + partner));
              __CrestLoad(12692, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(12691, 1, (long long )((root + partner) - nprow));
              __CrestStore(12696, (unsigned long )(& tmp___5));
# 270 "../HPL_pdmxswp.c"
              tmp___5 = (root + partner) - nprow;
            }
            }
            __CrestLoad(12697, (unsigned long )(& n0), (long long )n0);
            __CrestLoad(12698, (unsigned long )(& tmp___5), (long long )tmp___5);
            __CrestLoad(12699, (unsigned long )0, (long long )1001);
            __CrestLoad(12700, (unsigned long )(& comm), (long long )comm);
# 270 "../HPL_pdmxswp.c"
            HPL_recv(A0, n0, tmp___5, 1001, comm);
            __CrestClearStack(12701);
          } else {
            __CrestBranch(12679, 5055, 0);
            {
            __CrestLoad(12704, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(12703, (unsigned long )(& size_), (long long )size_);
            __CrestApply2(12702, 16, (long long )(partner < size_));
# 273 "../HPL_pdmxswp.c"
            if (partner < size_) {
              __CrestBranch(12705, 5056, 1);
              {
              __CrestLoad(12711, (unsigned long )(& root), (long long )root);
              __CrestLoad(12710, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(12709, 0, (long long )(root + partner));
              __CrestLoad(12708, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(12707, 16, (long long )(root + partner < nprow));
# 275 "../HPL_pdmxswp.c"
              if (root + partner < nprow) {
                __CrestBranch(12712, 5057, 1);
                __CrestLoad(12716, (unsigned long )(& root), (long long )root);
                __CrestLoad(12715, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(12714, 0, (long long )(root + partner));
                __CrestStore(12717, (unsigned long )(& tmp___6));
# 275 "../HPL_pdmxswp.c"
                tmp___6 = root + partner;
              } else {
                __CrestBranch(12713, 5058, 0);
                __CrestLoad(12722, (unsigned long )(& root), (long long )root);
                __CrestLoad(12721, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(12720, 0, (long long )(root + partner));
                __CrestLoad(12719, (unsigned long )(& nprow), (long long )nprow);
                __CrestApply2(12718, 1, (long long )((root + partner) - nprow));
                __CrestStore(12723, (unsigned long )(& tmp___6));
# 275 "../HPL_pdmxswp.c"
                tmp___6 = (root + partner) - nprow;
              }
              }
              __CrestLoad(12724, (unsigned long )(& n0), (long long )n0);
              __CrestLoad(12725, (unsigned long )(& tmp___6), (long long )tmp___6);
              __CrestLoad(12726, (unsigned long )0, (long long )1001);
              __CrestLoad(12727, (unsigned long )(& comm), (long long )comm);
# 275 "../HPL_pdmxswp.c"
              HPL_send(A0, n0, tmp___6, 1001, comm);
              __CrestClearStack(12728);
            } else {
              __CrestBranch(12706, 5060, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(12668, 5061, 0);

        }
        }
        __CrestLoad(12731, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(12730, (unsigned long )0, (long long )1);
        __CrestApply2(12729, 9, (long long )(ip2_ >> 1));
        __CrestStore(12732, (unsigned long )(& ip2_));
# 279 "../HPL_pdmxswp.c"
        ip2_ >>= 1;
        {
        __CrestLoad(12735, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(12734, (unsigned long )0, (long long )0U);
        __CrestApply2(12733, 15, (long long )(ip2_ <= 0U));
# 262 "../HPL_pdmxswp.c"
        if (ip2_ <= 0U) {
          __CrestBranch(12736, 5064, 1);
# 262 "../HPL_pdmxswp.c"
          goto while_break___2;
        } else {
          __CrestBranch(12737, 5065, 0);

        }
        }
      }
      while_break___2: ;
      }
    } else {
      __CrestBranch(12596, 5067, 0);

    }
    }
  }
  }
  {
  __CrestLoad(12740, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(12739, (unsigned long )0, (long long )0);
  __CrestApply2(12738, 13, (long long )(Np2 != 0));
# 287 "../HPL_pdmxswp.c"
  if (Np2 != 0) {
    __CrestBranch(12741, 5069, 1);
    __CrestLoad(12745, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(12744, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(12743, 7, (long long )((unsigned int )mydist ^ ip2));
    __CrestStore(12746, (unsigned long )(& partner));
# 287 "../HPL_pdmxswp.c"
    partner = (int )((unsigned int )mydist ^ ip2);
    {
    __CrestLoad(12749, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(12748, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(12747, 16, (long long )(partner < nprow));
# 287 "../HPL_pdmxswp.c"
    if (partner < nprow) {
      __CrestBranch(12750, 5071, 1);
      {
      __CrestLoad(12756, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(12755, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(12754, 5, (long long )((unsigned int )mydist & ip2));
      __CrestLoad(12753, (unsigned long )0, (long long )0U);
      __CrestApply2(12752, 13, (long long )(((unsigned int )mydist & ip2) != 0U));
# 290 "../HPL_pdmxswp.c"
      if (((unsigned int )mydist & ip2) != 0U) {
        __CrestBranch(12757, 5072, 1);
        {
        __CrestLoad(12763, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(12762, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(12761, 0, (long long )(partner + icurrow));
        __CrestLoad(12760, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(12759, 16, (long long )(partner + icurrow < nprow));
# 292 "../HPL_pdmxswp.c"
        if (partner + icurrow < nprow) {
          __CrestBranch(12764, 5073, 1);
          __CrestLoad(12768, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12767, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12766, 0, (long long )(partner + icurrow));
          __CrestStore(12769, (unsigned long )(& tmp___7));
# 292 "../HPL_pdmxswp.c"
          tmp___7 = partner + icurrow;
        } else {
          __CrestBranch(12765, 5074, 0);
          __CrestLoad(12774, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12773, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12772, 0, (long long )(partner + icurrow));
          __CrestLoad(12771, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12770, 1, (long long )((partner + icurrow) - nprow));
          __CrestStore(12775, (unsigned long )(& tmp___7));
# 292 "../HPL_pdmxswp.c"
          tmp___7 = (partner + icurrow) - nprow;
        }
        }
        __CrestLoad(12776, (unsigned long )(& cnt_), (long long )cnt_);
        __CrestLoad(12777, (unsigned long )(& tmp___7), (long long )tmp___7);
        __CrestLoad(12778, (unsigned long )0, (long long )1001);
        __CrestLoad(12779, (unsigned long )(& comm), (long long )comm);
# 292 "../HPL_pdmxswp.c"
        HPL_recv(WORK, cnt_, tmp___7, 1001, comm);
        __CrestClearStack(12780);
      } else {
        __CrestBranch(12758, 5076, 0);
        {
        __CrestLoad(12785, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(12784, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(12783, 0, (long long )(partner + icurrow));
        __CrestLoad(12782, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(12781, 16, (long long )(partner + icurrow < nprow));
# 297 "../HPL_pdmxswp.c"
        if (partner + icurrow < nprow) {
          __CrestBranch(12786, 5077, 1);
          __CrestLoad(12790, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12789, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12788, 0, (long long )(partner + icurrow));
          __CrestStore(12791, (unsigned long )(& tmp___8));
# 297 "../HPL_pdmxswp.c"
          tmp___8 = partner + icurrow;
        } else {
          __CrestBranch(12787, 5078, 0);
          __CrestLoad(12796, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(12795, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(12794, 0, (long long )(partner + icurrow));
          __CrestLoad(12793, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(12792, 1, (long long )((partner + icurrow) - nprow));
          __CrestStore(12797, (unsigned long )(& tmp___8));
# 297 "../HPL_pdmxswp.c"
          tmp___8 = (partner + icurrow) - nprow;
        }
        }
        __CrestLoad(12798, (unsigned long )(& cnt_), (long long )cnt_);
        __CrestLoad(12799, (unsigned long )(& tmp___8), (long long )tmp___8);
        __CrestLoad(12800, (unsigned long )0, (long long )1001);
        __CrestLoad(12801, (unsigned long )(& comm), (long long )comm);
# 297 "../HPL_pdmxswp.c"
        HPL_send(WORK, cnt_, tmp___8, 1001, comm);
        __CrestClearStack(12802);
      }
      }
    } else {
      __CrestBranch(12751, 5080, 0);

    }
    }
  } else {
    __CrestBranch(12742, 5081, 0);

  }
  }
# 304 "../HPL_pdmxswp.c"
  mem_63 = PANEL->DPIV + JJ;
# 304 "../HPL_pdmxswp.c"
  mem_64 = WORK + 2;
# 304 "../HPL_pdmxswp.c"
  *mem_63 = *mem_64;

  {
  __CrestReturn(12803);
# 53 "../HPL_pdmxswp.c"
  return;
  }
}
}
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 120 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dscal(int const , double const , double * , int const ) ;
# 53 "../HPL_pdpancrN.c"
void HPL_pdpancrN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;
  struct HPL_S_grid *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;

  {
  __CrestCall(12807, 81);
  __CrestStore(12806, (unsigned long )(& ICOFF));
  __CrestStore(12805, (unsigned long )(& N));
  __CrestStore(12804, (unsigned long )(& M));
  __CrestLoad(12808, (unsigned long )0, (long long )0);
  __CrestStore(12809, (unsigned long )(& kk));
# 138 "../HPL_pdpancrN.c"
  kk = 0;
  __CrestLoad(12810, (unsigned long )(& M), (long long )M);
  __CrestStore(12811, (unsigned long )(& m));
# 138 "../HPL_pdpancrN.c"
  m = (int )M;
# 146 "../HPL_pdpancrN.c"
  A = PANEL->A;
  __CrestLoad(12812, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(12813, (unsigned long )(& lda));
# 146 "../HPL_pdpancrN.c"
  lda = PANEL->lda;
# 147 "../HPL_pdpancrN.c"
  L1 = PANEL->L1;
  __CrestLoad(12814, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(12815, (unsigned long )(& n0));
# 147 "../HPL_pdpancrN.c"
  n0 = PANEL->jb;
# 148 "../HPL_pdpancrN.c"
  mem_19 = PANEL->grid;
  __CrestLoad(12818, (unsigned long )(& mem_19->myrow), (long long )mem_19->myrow);
  __CrestLoad(12817, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(12816, 12, (long long )(mem_19->myrow == PANEL->prow));
  __CrestStore(12819, (unsigned long )(& curr));
# 148 "../HPL_pdpancrN.c"
  curr = mem_19->myrow == PANEL->prow;
  __CrestLoad(12822, (unsigned long )(& N), (long long )N);
  __CrestLoad(12821, (unsigned long )0, (long long )1);
  __CrestApply2(12820, 1, (long long )(N - 1));
  __CrestStore(12823, (unsigned long )(& Nm1));
# 150 "../HPL_pdpancrN.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(12824, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(12825, (unsigned long )(& jj));
# 150 "../HPL_pdpancrN.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(12828, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(12827, (unsigned long )0, (long long )0);
  __CrestApply2(12826, 13, (long long )(curr != 0));
# 151 "../HPL_pdpancrN.c"
  if (curr != 0) {
    __CrestBranch(12829, 5087, 1);
    __CrestLoad(12831, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(12832, (unsigned long )(& ii));
# 151 "../HPL_pdpancrN.c"
    ii = (int )ICOFF;
    __CrestLoad(12835, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(12834, (unsigned long )0, (long long )1);
    __CrestApply2(12833, 0, (long long )(ii + 1));
    __CrestStore(12836, (unsigned long )(& iip1));
# 151 "../HPL_pdpancrN.c"
    iip1 = ii + 1;
    __CrestLoad(12839, (unsigned long )(& m), (long long )m);
    __CrestLoad(12838, (unsigned long )0, (long long )1);
    __CrestApply2(12837, 1, (long long )(m - 1));
    __CrestStore(12840, (unsigned long )(& Mm1));
# 151 "../HPL_pdpancrN.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(12830, 5088, 0);
    __CrestLoad(12841, (unsigned long )0, (long long )0);
    __CrestStore(12842, (unsigned long )(& ii));
# 152 "../HPL_pdpancrN.c"
    ii = 0;
    __CrestLoad(12843, (unsigned long )(& ii), (long long )ii);
    __CrestStore(12844, (unsigned long )(& iip1));
# 152 "../HPL_pdpancrN.c"
    iip1 = ii;
    __CrestLoad(12845, (unsigned long )(& m), (long long )m);
    __CrestStore(12846, (unsigned long )(& Mm1));
# 152 "../HPL_pdpancrN.c"
    Mm1 = m;
  }
  }
  __CrestLoad(12847, (unsigned long )(& m), (long long )m);
  __CrestLoad(12848, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(12849, (unsigned long )(& jj), (long long )jj);
# 168 "../HPL_pdpancrN.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(12850);
  {
# 170 "../HPL_pdpancrN.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(12853, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(12852, (unsigned long )0, (long long )0);
    __CrestApply2(12851, 14, (long long )(Nm1 > 0));
# 170 "../HPL_pdpancrN.c"
    if (Nm1 > 0) {
      __CrestBranch(12854, 5094, 1);

    } else {
      __CrestBranch(12855, 5095, 0);
# 170 "../HPL_pdpancrN.c"
      goto while_break;
    }
    }
    __CrestLoad(12856, (unsigned long )(& m), (long long )m);
    __CrestLoad(12857, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(12858, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpancrN.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(12859);
    __CrestLoad(12860, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(12861, (unsigned long )(& jj), (long long )jj);
# 176 "../HPL_pdpancrN.c"
    HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(12862);
    {
    __CrestLoad(12865, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(12864, (unsigned long )0, (long long )0);
    __CrestApply2(12863, 14, (long long )(kk > 0));
# 180 "../HPL_pdpancrN.c"
    if (kk > 0) {
      __CrestBranch(12866, 5098, 1);
# 182 "../HPL_pdpancrN.c"
      L1ptr = (L1 + jj) + (jj + 1) * n0;
      __CrestLoad(12868, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(12869, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(12870, (unsigned long )(& kk), (long long )kk);
      __CrestLoad(12871, (unsigned long )(& Nm1), (long long )Nm1);
      __CrestLoad(12872, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(12873, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(12874, (unsigned long )(& n0), (long long )n0);
# 200 "../HPL_pdpancrN.c"
      cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )112, (int const )kk,
                  (int const )Nm1, (double const )(- 1.0), (double const *)((L1 + ICOFF) + (jj + 1) * n0),
                  (int const )n0, (double const *)((L1 + jj) + ICOFF * (int const )n0),
                  (int const )n0, (double const )1.0, L1ptr, (int const )n0);
      __CrestClearStack(12875);
      {
      __CrestLoad(12878, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(12877, (unsigned long )0, (long long )0);
      __CrestApply2(12876, 13, (long long )(curr != 0));
# 204 "../HPL_pdpancrN.c"
      if (curr != 0) {
        __CrestBranch(12879, 5100, 1);
        __CrestLoad(12881, (unsigned long )(& Nm1), (long long )Nm1);
        __CrestLoad(12882, (unsigned long )(& n0), (long long )n0);
        __CrestLoad(12883, (unsigned long )(& lda), (long long )lda);
# 205 "../HPL_pdpancrN.c"
        cblas_dcopy((int const )Nm1, (double const *)L1ptr, (int const )n0,
                    (A + ii) + (jj + 1) * lda, (int const )lda);
        __CrestClearStack(12884);
      } else {
        __CrestBranch(12880, 5101, 0);

      }
      }
    } else {
      __CrestBranch(12867, 5102, 0);

    }
    }
    {
# 214 "../HPL_pdpancrN.c"
    mem_20 = WORK + 0;
    {
    __CrestLoad(12887, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(12886, (unsigned long )0, (long long )0.0);
    __CrestApply2(12885, 13, (long long )(*mem_20 != 0.0));
# 214 "../HPL_pdpancrN.c"
    if (*mem_20 != 0.0) {
      __CrestBranch(12888, 5106, 1);
# 215 "../HPL_pdpancrN.c"
      mem_21 = WORK + 0;
      __CrestLoad(12890, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(12891, (unsigned long )0, (long long )((int const )1));
# 215 "../HPL_pdpancrN.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_21), (A + iip1) + jj * lda,
                  (int const )1);
      __CrestClearStack(12892);
    } else {
      __CrestBranch(12889, 5107, 0);

    }
    }
    }
    __CrestLoad(12893, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(12894, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(12895, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(12898, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(12897, (unsigned long )0, (long long )1);
    __CrestApply2(12896, 0, (long long )(kk + 1));
    __CrestLoad(12899, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(12900, (unsigned long )0, (long long )((int const )1));
    __CrestLoad(12901, (unsigned long )0, (long long )((int const )1));
# 233 "../HPL_pdpancrN.c"
    cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )Mm1,
                (int const )(kk + 1), (double const )(- 1.0), (double const *)((A + iip1) + ICOFF * (int const )lda),
                (int const )lda, (double const *)((L1 + ICOFF) + (jj + 1) * n0),
                (int const )1, (double const )1.0, (A + iip1) + (jj + 1) * lda,
                (int const )1);
    __CrestClearStack(12902);
    __CrestLoad(12903, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(12904, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(12907, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(12906, (unsigned long )0, (long long )1);
    __CrestApply2(12905, 0, (long long )(jj + 1));
# 238 "../HPL_pdpancrN.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(12908);
    {
    __CrestLoad(12911, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(12910, (unsigned long )0, (long long )0);
    __CrestApply2(12909, 13, (long long )(curr != 0));
# 239 "../HPL_pdpancrN.c"
    if (curr != 0) {
      __CrestBranch(12912, 5110, 1);
      __CrestLoad(12914, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(12915, (unsigned long )(& ii));
# 239 "../HPL_pdpancrN.c"
      ii = iip1;
      __CrestLoad(12918, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(12917, (unsigned long )0, (long long )1);
      __CrestApply2(12916, 0, (long long )(iip1 + 1));
      __CrestStore(12919, (unsigned long )(& iip1));
# 239 "../HPL_pdpancrN.c"
      iip1 ++;
      __CrestLoad(12920, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(12921, (unsigned long )(& m));
# 239 "../HPL_pdpancrN.c"
      m = Mm1;
      __CrestLoad(12924, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(12923, (unsigned long )0, (long long )1);
      __CrestApply2(12922, 1, (long long )(Mm1 - 1));
      __CrestStore(12925, (unsigned long )(& Mm1));
# 239 "../HPL_pdpancrN.c"
      Mm1 --;
    } else {
      __CrestBranch(12913, 5111, 0);

    }
    }
    __CrestLoad(12928, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(12927, (unsigned long )0, (long long )1);
    __CrestApply2(12926, 1, (long long )(Nm1 - 1));
    __CrestStore(12929, (unsigned long )(& Nm1));
# 241 "../HPL_pdpancrN.c"
    Nm1 --;
    __CrestLoad(12932, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(12931, (unsigned long )0, (long long )1);
    __CrestApply2(12930, 0, (long long )(jj + 1));
    __CrestStore(12933, (unsigned long )(& jj));
# 241 "../HPL_pdpancrN.c"
    jj ++;
    __CrestLoad(12936, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(12935, (unsigned long )0, (long long )1);
    __CrestApply2(12934, 0, (long long )(kk + 1));
    __CrestStore(12937, (unsigned long )(& kk));
# 241 "../HPL_pdpancrN.c"
    kk ++;
  }
  while_break: ;
  }
  __CrestLoad(12938, (unsigned long )(& m), (long long )m);
  __CrestLoad(12939, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(12940, (unsigned long )(& jj), (long long )jj);
# 247 "../HPL_pdpancrN.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(12941);
  __CrestLoad(12942, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(12943, (unsigned long )(& jj), (long long )jj);
# 248 "../HPL_pdpancrN.c"
  HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(12944);
  {
# 249 "../HPL_pdpancrN.c"
  mem_22 = WORK + 0;
  {
  __CrestLoad(12947, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(12946, (unsigned long )0, (long long )0.0);
  __CrestApply2(12945, 13, (long long )(*mem_22 != 0.0));
# 249 "../HPL_pdpancrN.c"
  if (*mem_22 != 0.0) {
    __CrestBranch(12948, 5118, 1);
# 250 "../HPL_pdpancrN.c"
    mem_23 = WORK + 0;
    __CrestLoad(12950, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(12951, (unsigned long )0, (long long )((int const )1));
# 250 "../HPL_pdpancrN.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_23), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(12952);
  } else {
    __CrestBranch(12949, 5119, 0);

  }
  }
  }

  {
  __CrestReturn(12953);
# 53 "../HPL_pdpancrN.c"
  return;
  }
}
}
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdpancrT.c"
void HPL_pdpancrT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;
  struct HPL_S_grid *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;

  {
  __CrestCall(12957, 82);
  __CrestStore(12956, (unsigned long )(& ICOFF));
  __CrestStore(12955, (unsigned long )(& N));
  __CrestStore(12954, (unsigned long )(& M));
  __CrestLoad(12958, (unsigned long )0, (long long )0);
  __CrestStore(12959, (unsigned long )(& kk));
# 137 "../HPL_pdpancrT.c"
  kk = 0;
  __CrestLoad(12960, (unsigned long )(& M), (long long )M);
  __CrestStore(12961, (unsigned long )(& m));
# 137 "../HPL_pdpancrT.c"
  m = (int )M;
# 145 "../HPL_pdpancrT.c"
  A = PANEL->A;
  __CrestLoad(12962, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(12963, (unsigned long )(& lda));
# 145 "../HPL_pdpancrT.c"
  lda = PANEL->lda;
# 146 "../HPL_pdpancrT.c"
  L1 = PANEL->L1;
  __CrestLoad(12964, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(12965, (unsigned long )(& n0));
# 146 "../HPL_pdpancrT.c"
  n0 = PANEL->jb;
# 147 "../HPL_pdpancrT.c"
  mem_19 = PANEL->grid;
  __CrestLoad(12968, (unsigned long )(& mem_19->myrow), (long long )mem_19->myrow);
  __CrestLoad(12967, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(12966, 12, (long long )(mem_19->myrow == PANEL->prow));
  __CrestStore(12969, (unsigned long )(& curr));
# 147 "../HPL_pdpancrT.c"
  curr = mem_19->myrow == PANEL->prow;
  __CrestLoad(12972, (unsigned long )(& N), (long long )N);
  __CrestLoad(12971, (unsigned long )0, (long long )1);
  __CrestApply2(12970, 1, (long long )(N - 1));
  __CrestStore(12973, (unsigned long )(& Nm1));
# 149 "../HPL_pdpancrT.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(12974, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(12975, (unsigned long )(& jj));
# 149 "../HPL_pdpancrT.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(12978, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(12977, (unsigned long )0, (long long )0);
  __CrestApply2(12976, 13, (long long )(curr != 0));
# 150 "../HPL_pdpancrT.c"
  if (curr != 0) {
    __CrestBranch(12979, 5124, 1);
    __CrestLoad(12981, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(12982, (unsigned long )(& ii));
# 150 "../HPL_pdpancrT.c"
    ii = (int )ICOFF;
    __CrestLoad(12985, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(12984, (unsigned long )0, (long long )1);
    __CrestApply2(12983, 0, (long long )(ii + 1));
    __CrestStore(12986, (unsigned long )(& iip1));
# 150 "../HPL_pdpancrT.c"
    iip1 = ii + 1;
    __CrestLoad(12989, (unsigned long )(& m), (long long )m);
    __CrestLoad(12988, (unsigned long )0, (long long )1);
    __CrestApply2(12987, 1, (long long )(m - 1));
    __CrestStore(12990, (unsigned long )(& Mm1));
# 150 "../HPL_pdpancrT.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(12980, 5125, 0);
    __CrestLoad(12991, (unsigned long )0, (long long )0);
    __CrestStore(12992, (unsigned long )(& ii));
# 151 "../HPL_pdpancrT.c"
    ii = 0;
    __CrestLoad(12993, (unsigned long )(& ii), (long long )ii);
    __CrestStore(12994, (unsigned long )(& iip1));
# 151 "../HPL_pdpancrT.c"
    iip1 = ii;
    __CrestLoad(12995, (unsigned long )(& m), (long long )m);
    __CrestStore(12996, (unsigned long )(& Mm1));
# 151 "../HPL_pdpancrT.c"
    Mm1 = m;
  }
  }
  __CrestLoad(12997, (unsigned long )(& m), (long long )m);
  __CrestLoad(12998, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(12999, (unsigned long )(& jj), (long long )jj);
# 167 "../HPL_pdpancrT.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13000);
  {
# 169 "../HPL_pdpancrT.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(13003, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13002, (unsigned long )0, (long long )0);
    __CrestApply2(13001, 14, (long long )(Nm1 > 0));
# 169 "../HPL_pdpancrT.c"
    if (Nm1 > 0) {
      __CrestBranch(13004, 5131, 1);

    } else {
      __CrestBranch(13005, 5132, 0);
# 169 "../HPL_pdpancrT.c"
      goto while_break;
    }
    }
    __CrestLoad(13006, (unsigned long )(& m), (long long )m);
    __CrestLoad(13007, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13008, (unsigned long )(& jj), (long long )jj);
# 174 "../HPL_pdpancrT.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13009);
    __CrestLoad(13010, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13011, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpancrT.c"
    HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13012);
    {
    __CrestLoad(13015, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13014, (unsigned long )0, (long long )0);
    __CrestApply2(13013, 14, (long long )(kk > 0));
# 179 "../HPL_pdpancrT.c"
    if (kk > 0) {
      __CrestBranch(13016, 5135, 1);
# 181 "../HPL_pdpancrT.c"
      L1ptr = (L1 + (jj + 1)) + jj * n0;
      __CrestLoad(13018, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(13019, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(13020, (unsigned long )(& Nm1), (long long )Nm1);
      __CrestLoad(13021, (unsigned long )(& kk), (long long )kk);
      __CrestLoad(13022, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13023, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13024, (unsigned long )0, (long long )((int const )1));
# 199 "../HPL_pdpancrT.c"
      cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )Nm1,
                  (int const )kk, (double const )(- 1.0), (double const *)((L1 + (jj + 1)) + ICOFF * (int const )n0),
                  (int const )n0, (double const *)((L1 + ICOFF) + jj * n0), (int const )1,
                  (double const )1.0, L1ptr, (int const )1);
      __CrestClearStack(13025);
      {
      __CrestLoad(13028, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(13027, (unsigned long )0, (long long )0);
      __CrestApply2(13026, 13, (long long )(curr != 0));
# 203 "../HPL_pdpancrT.c"
      if (curr != 0) {
        __CrestBranch(13029, 5137, 1);
        __CrestLoad(13031, (unsigned long )(& Nm1), (long long )Nm1);
        __CrestLoad(13032, (unsigned long )0, (long long )((int const )1));
        __CrestLoad(13033, (unsigned long )(& lda), (long long )lda);
# 204 "../HPL_pdpancrT.c"
        cblas_dcopy((int const )Nm1, (double const *)L1ptr, (int const )1, (A + ii) + (jj + 1) * lda,
                    (int const )lda);
        __CrestClearStack(13034);
      } else {
        __CrestBranch(13030, 5138, 0);

      }
      }
    } else {
      __CrestBranch(13017, 5139, 0);

    }
    }
    {
# 213 "../HPL_pdpancrT.c"
    mem_20 = WORK + 0;
    {
    __CrestLoad(13037, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(13036, (unsigned long )0, (long long )0.0);
    __CrestApply2(13035, 13, (long long )(*mem_20 != 0.0));
# 213 "../HPL_pdpancrT.c"
    if (*mem_20 != 0.0) {
      __CrestBranch(13038, 5143, 1);
# 214 "../HPL_pdpancrT.c"
      mem_21 = WORK + 0;
      __CrestLoad(13040, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13041, (unsigned long )0, (long long )((int const )1));
# 214 "../HPL_pdpancrT.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_21), (A + iip1) + jj * lda,
                  (int const )1);
      __CrestClearStack(13042);
    } else {
      __CrestBranch(13039, 5144, 0);

    }
    }
    }
    __CrestLoad(13043, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13044, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13045, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13048, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13047, (unsigned long )0, (long long )1);
    __CrestApply2(13046, 0, (long long )(kk + 1));
    __CrestLoad(13049, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13050, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13051, (unsigned long )0, (long long )((int const )1));
# 232 "../HPL_pdpancrT.c"
    cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )Mm1,
                (int const )(kk + 1), (double const )(- 1.0), (double const *)((A + iip1) + ICOFF * (int const )lda),
                (int const )lda, (double const *)((L1 + (jj + 1)) + ICOFF * (int const )n0),
                (int const )n0, (double const )1.0, (A + iip1) + (jj + 1) * lda,
                (int const )1);
    __CrestClearStack(13052);
    __CrestLoad(13053, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13054, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(13057, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13056, (unsigned long )0, (long long )1);
    __CrestApply2(13055, 0, (long long )(jj + 1));
# 236 "../HPL_pdpancrT.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(13058);
    {
    __CrestLoad(13061, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13060, (unsigned long )0, (long long )0);
    __CrestApply2(13059, 13, (long long )(curr != 0));
# 237 "../HPL_pdpancrT.c"
    if (curr != 0) {
      __CrestBranch(13062, 5147, 1);
      __CrestLoad(13064, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(13065, (unsigned long )(& ii));
# 237 "../HPL_pdpancrT.c"
      ii = iip1;
      __CrestLoad(13068, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(13067, (unsigned long )0, (long long )1);
      __CrestApply2(13066, 0, (long long )(iip1 + 1));
      __CrestStore(13069, (unsigned long )(& iip1));
# 237 "../HPL_pdpancrT.c"
      iip1 ++;
      __CrestLoad(13070, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(13071, (unsigned long )(& m));
# 237 "../HPL_pdpancrT.c"
      m = Mm1;
      __CrestLoad(13074, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13073, (unsigned long )0, (long long )1);
      __CrestApply2(13072, 1, (long long )(Mm1 - 1));
      __CrestStore(13075, (unsigned long )(& Mm1));
# 237 "../HPL_pdpancrT.c"
      Mm1 --;
    } else {
      __CrestBranch(13063, 5148, 0);

    }
    }
    __CrestLoad(13078, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13077, (unsigned long )0, (long long )1);
    __CrestApply2(13076, 1, (long long )(Nm1 - 1));
    __CrestStore(13079, (unsigned long )(& Nm1));
# 239 "../HPL_pdpancrT.c"
    Nm1 --;
    __CrestLoad(13082, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13081, (unsigned long )0, (long long )1);
    __CrestApply2(13080, 0, (long long )(jj + 1));
    __CrestStore(13083, (unsigned long )(& jj));
# 239 "../HPL_pdpancrT.c"
    jj ++;
    __CrestLoad(13086, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13085, (unsigned long )0, (long long )1);
    __CrestApply2(13084, 0, (long long )(kk + 1));
    __CrestStore(13087, (unsigned long )(& kk));
# 239 "../HPL_pdpancrT.c"
    kk ++;
  }
  while_break: ;
  }
  __CrestLoad(13088, (unsigned long )(& m), (long long )m);
  __CrestLoad(13089, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13090, (unsigned long )(& jj), (long long )jj);
# 245 "../HPL_pdpancrT.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13091);
  __CrestLoad(13092, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13093, (unsigned long )(& jj), (long long )jj);
# 246 "../HPL_pdpancrT.c"
  HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13094);
  {
# 247 "../HPL_pdpancrT.c"
  mem_22 = WORK + 0;
  {
  __CrestLoad(13097, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(13096, (unsigned long )0, (long long )0.0);
  __CrestApply2(13095, 13, (long long )(*mem_22 != 0.0));
# 247 "../HPL_pdpancrT.c"
  if (*mem_22 != 0.0) {
    __CrestBranch(13098, 5155, 1);
# 248 "../HPL_pdpancrT.c"
    mem_23 = WORK + 0;
    __CrestLoad(13100, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13101, (unsigned long )0, (long long )((int const )1));
# 248 "../HPL_pdpancrT.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_23), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(13102);
  } else {
    __CrestBranch(13099, 5156, 0);

  }
  }
  }

  {
  __CrestReturn(13103);
# 53 "../HPL_pdpancrT.c"
  return;
  }
}
}
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 136 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dtrsv(enum HPL_ORDER const , enum HPL_UPLO const , enum HPL_TRANS const ,
                        enum HPL_DIAG const , int const , double const * ,
                        int const , double * , int const ) ;
# 53 "../HPL_pdpanllN.c"
void HPL_pdpanllN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;
  struct HPL_S_grid *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;

  {
  __CrestCall(13107, 83);
  __CrestStore(13106, (unsigned long )(& ICOFF));
  __CrestStore(13105, (unsigned long )(& N));
  __CrestStore(13104, (unsigned long )(& M));
  __CrestLoad(13108, (unsigned long )(& M), (long long )M);
  __CrestStore(13109, (unsigned long )(& m));
# 138 "../HPL_pdpanllN.c"
  m = (int )M;
# 146 "../HPL_pdpanllN.c"
  A = PANEL->A;
  __CrestLoad(13110, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13111, (unsigned long )(& lda));
# 146 "../HPL_pdpanllN.c"
  lda = PANEL->lda;
# 147 "../HPL_pdpanllN.c"
  L1 = PANEL->L1;
  __CrestLoad(13112, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13113, (unsigned long )(& n0));
# 147 "../HPL_pdpanllN.c"
  n0 = PANEL->jb;
# 148 "../HPL_pdpanllN.c"
  mem_19 = PANEL->grid;
  __CrestLoad(13116, (unsigned long )(& mem_19->myrow), (long long )mem_19->myrow);
  __CrestLoad(13115, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13114, 12, (long long )(mem_19->myrow == PANEL->prow));
  __CrestStore(13117, (unsigned long )(& curr));
# 148 "../HPL_pdpanllN.c"
  curr = mem_19->myrow == PANEL->prow;
  __CrestLoad(13120, (unsigned long )(& N), (long long )N);
  __CrestLoad(13119, (unsigned long )0, (long long )1);
  __CrestApply2(13118, 1, (long long )(N - 1));
  __CrestStore(13121, (unsigned long )(& Nm1));
# 150 "../HPL_pdpanllN.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(13122, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(13123, (unsigned long )(& jj));
# 150 "../HPL_pdpanllN.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(13126, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13125, (unsigned long )0, (long long )0);
  __CrestApply2(13124, 13, (long long )(curr != 0));
# 151 "../HPL_pdpanllN.c"
  if (curr != 0) {
    __CrestBranch(13127, 5161, 1);
    __CrestLoad(13129, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(13130, (unsigned long )(& ii));
# 151 "../HPL_pdpanllN.c"
    ii = (int )ICOFF;
    __CrestLoad(13133, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13132, (unsigned long )0, (long long )1);
    __CrestApply2(13131, 0, (long long )(ii + 1));
    __CrestStore(13134, (unsigned long )(& iip1));
# 151 "../HPL_pdpanllN.c"
    iip1 = ii + 1;
    __CrestLoad(13137, (unsigned long )(& m), (long long )m);
    __CrestLoad(13136, (unsigned long )0, (long long )1);
    __CrestApply2(13135, 1, (long long )(m - 1));
    __CrestStore(13138, (unsigned long )(& Mm1));
# 151 "../HPL_pdpanllN.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(13128, 5162, 0);
    __CrestLoad(13139, (unsigned long )0, (long long )0);
    __CrestStore(13140, (unsigned long )(& ii));
# 152 "../HPL_pdpanllN.c"
    ii = 0;
    __CrestLoad(13141, (unsigned long )(& ii), (long long )ii);
    __CrestStore(13142, (unsigned long )(& iip1));
# 152 "../HPL_pdpanllN.c"
    iip1 = ii;
    __CrestLoad(13143, (unsigned long )(& m), (long long )m);
    __CrestStore(13144, (unsigned long )(& Mm1));
# 152 "../HPL_pdpanllN.c"
    Mm1 = m;
  }
  }
  __CrestLoad(13145, (unsigned long )(& m), (long long )m);
  __CrestLoad(13146, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13147, (unsigned long )(& jj), (long long )jj);
# 168 "../HPL_pdpanllN.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13148);
  {
# 170 "../HPL_pdpanllN.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(13151, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13150, (unsigned long )0, (long long )0);
    __CrestApply2(13149, 14, (long long )(Nm1 > 0));
# 170 "../HPL_pdpanllN.c"
    if (Nm1 > 0) {
      __CrestBranch(13152, 5168, 1);

    } else {
      __CrestBranch(13153, 5169, 0);
# 170 "../HPL_pdpanllN.c"
      goto while_break;
    }
    }
    __CrestLoad(13154, (unsigned long )(& m), (long long )m);
    __CrestLoad(13155, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13156, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpanllN.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13157);
    __CrestLoad(13158, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13159, (unsigned long )(& jj), (long long )jj);
# 176 "../HPL_pdpanllN.c"
    HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13160);
# 178 "../HPL_pdpanllN.c"
    L1ptr = (L1 + ICOFF) + (jj + 1) * n0;
    __CrestLoad(13165, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13164, (unsigned long )0, (long long )1);
    __CrestApply2(13163, 0, (long long )(jj + 1));
    __CrestLoad(13162, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestApply2(13161, 1, (long long )((jj + 1) - (int )ICOFF));
    __CrestStore(13166, (unsigned long )(& kk));
# 178 "../HPL_pdpanllN.c"
    kk = (jj + 1) - (int )ICOFF;
    __CrestLoad(13167, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13168, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
    __CrestLoad(13169, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13170, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(13171, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13172, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13173, (unsigned long )0, (long long )((int const )1));
# 179 "../HPL_pdpanllN.c"
    cblas_dtrsv((enum HPL_ORDER const )102, (enum HPL_UPLO const )122, (enum HPL_TRANS const )111,
                (enum HPL_DIAG const )132, (int const )kk, (double const *)((L1 + ICOFF) + ICOFF * (int const )n0),
                (int const )n0, L1ptr, (int const )1);
    __CrestClearStack(13174);
    {
# 187 "../HPL_pdpanllN.c"
    mem_20 = WORK + 0;
    {
    __CrestLoad(13177, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(13176, (unsigned long )0, (long long )0.0);
    __CrestApply2(13175, 13, (long long )(*mem_20 != 0.0));
# 187 "../HPL_pdpanllN.c"
    if (*mem_20 != 0.0) {
      __CrestBranch(13178, 5174, 1);
# 188 "../HPL_pdpanllN.c"
      mem_21 = WORK + 0;
      __CrestLoad(13180, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13181, (unsigned long )0, (long long )((int const )1));
# 188 "../HPL_pdpanllN.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_21), (A + iip1) + jj * lda,
                  (int const )1);
      __CrestClearStack(13182);
    } else {
      __CrestBranch(13179, 5175, 0);

    }
    }
    }
    __CrestLoad(13183, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13184, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13185, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13186, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13187, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13188, (unsigned long )0, (long long )((int const )1));
    __CrestLoad(13189, (unsigned long )0, (long long )((int const )1));
# 206 "../HPL_pdpanllN.c"
    cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )Mm1,
                (int const )kk, (double const )(- 1.0), (double const *)((A + iip1) + ICOFF * (int const )lda),
                (int const )lda, (double const *)L1ptr, (int const )1, (double const )1.0,
                (A + iip1) + (jj + 1) * lda, (int const )1);
    __CrestClearStack(13190);
    __CrestLoad(13191, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13192, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(13195, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13194, (unsigned long )0, (long long )1);
    __CrestApply2(13193, 0, (long long )(jj + 1));
# 210 "../HPL_pdpanllN.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(13196);
    {
    __CrestLoad(13199, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13198, (unsigned long )0, (long long )0);
    __CrestApply2(13197, 13, (long long )(curr != 0));
# 211 "../HPL_pdpanllN.c"
    if (curr != 0) {
      __CrestBranch(13200, 5178, 1);
      __CrestLoad(13202, (unsigned long )(& kk), (long long )kk);
      __CrestLoad(13203, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13204, (unsigned long )0, (long long )((int const )1));
# 213 "../HPL_pdpanllN.c"
      cblas_dcopy((int const )kk, (double const *)L1ptr, (int const )1, (A + ICOFF) + (jj + 1) * lda,
                  (int const )1);
      __CrestClearStack(13205);
      __CrestLoad(13206, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(13207, (unsigned long )(& ii));
# 214 "../HPL_pdpanllN.c"
      ii = iip1;
      __CrestLoad(13210, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(13209, (unsigned long )0, (long long )1);
      __CrestApply2(13208, 0, (long long )(iip1 + 1));
      __CrestStore(13211, (unsigned long )(& iip1));
# 214 "../HPL_pdpanllN.c"
      iip1 ++;
      __CrestLoad(13212, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(13213, (unsigned long )(& m));
# 214 "../HPL_pdpanllN.c"
      m = Mm1;
      __CrestLoad(13216, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13215, (unsigned long )0, (long long )1);
      __CrestApply2(13214, 1, (long long )(Mm1 - 1));
      __CrestStore(13217, (unsigned long )(& Mm1));
# 214 "../HPL_pdpanllN.c"
      Mm1 --;
    } else {
      __CrestBranch(13201, 5179, 0);

    }
    }
    __CrestLoad(13220, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13219, (unsigned long )0, (long long )1);
    __CrestApply2(13218, 1, (long long )(Nm1 - 1));
    __CrestStore(13221, (unsigned long )(& Nm1));
# 216 "../HPL_pdpanllN.c"
    Nm1 --;
    __CrestLoad(13224, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13223, (unsigned long )0, (long long )1);
    __CrestApply2(13222, 0, (long long )(jj + 1));
    __CrestStore(13225, (unsigned long )(& jj));
# 216 "../HPL_pdpanllN.c"
    jj ++;
  }
  while_break: ;
  }
  __CrestLoad(13226, (unsigned long )(& m), (long long )m);
  __CrestLoad(13227, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13228, (unsigned long )(& jj), (long long )jj);
# 222 "../HPL_pdpanllN.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13229);
  __CrestLoad(13230, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13231, (unsigned long )(& jj), (long long )jj);
# 223 "../HPL_pdpanllN.c"
  HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13232);
  {
# 224 "../HPL_pdpanllN.c"
  mem_22 = WORK + 0;
  {
  __CrestLoad(13235, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(13234, (unsigned long )0, (long long )0.0);
  __CrestApply2(13233, 13, (long long )(*mem_22 != 0.0));
# 224 "../HPL_pdpanllN.c"
  if (*mem_22 != 0.0) {
    __CrestBranch(13236, 5186, 1);
# 225 "../HPL_pdpanllN.c"
    mem_23 = WORK + 0;
    __CrestLoad(13238, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13239, (unsigned long )0, (long long )((int const )1));
# 225 "../HPL_pdpanllN.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_23), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(13240);
  } else {
    __CrestBranch(13237, 5187, 0);

  }
  }
  }

  {
  __CrestReturn(13241);
# 53 "../HPL_pdpanllN.c"
  return;
  }
}
}
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdpanllT.c"
void HPL_pdpanllT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;
  struct HPL_S_grid *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;

  {
  __CrestCall(13245, 84);
  __CrestStore(13244, (unsigned long )(& ICOFF));
  __CrestStore(13243, (unsigned long )(& N));
  __CrestStore(13242, (unsigned long )(& M));
  __CrestLoad(13246, (unsigned long )(& M), (long long )M);
  __CrestStore(13247, (unsigned long )(& m));
# 137 "../HPL_pdpanllT.c"
  m = (int )M;
# 145 "../HPL_pdpanllT.c"
  A = PANEL->A;
  __CrestLoad(13248, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13249, (unsigned long )(& lda));
# 145 "../HPL_pdpanllT.c"
  lda = PANEL->lda;
# 146 "../HPL_pdpanllT.c"
  L1 = PANEL->L1;
  __CrestLoad(13250, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13251, (unsigned long )(& n0));
# 146 "../HPL_pdpanllT.c"
  n0 = PANEL->jb;
# 147 "../HPL_pdpanllT.c"
  mem_19 = PANEL->grid;
  __CrestLoad(13254, (unsigned long )(& mem_19->myrow), (long long )mem_19->myrow);
  __CrestLoad(13253, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13252, 12, (long long )(mem_19->myrow == PANEL->prow));
  __CrestStore(13255, (unsigned long )(& curr));
# 147 "../HPL_pdpanllT.c"
  curr = mem_19->myrow == PANEL->prow;
  __CrestLoad(13258, (unsigned long )(& N), (long long )N);
  __CrestLoad(13257, (unsigned long )0, (long long )1);
  __CrestApply2(13256, 1, (long long )(N - 1));
  __CrestStore(13259, (unsigned long )(& Nm1));
# 149 "../HPL_pdpanllT.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(13260, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(13261, (unsigned long )(& jj));
# 149 "../HPL_pdpanllT.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(13264, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13263, (unsigned long )0, (long long )0);
  __CrestApply2(13262, 13, (long long )(curr != 0));
# 150 "../HPL_pdpanllT.c"
  if (curr != 0) {
    __CrestBranch(13265, 5192, 1);
    __CrestLoad(13267, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(13268, (unsigned long )(& ii));
# 150 "../HPL_pdpanllT.c"
    ii = (int )ICOFF;
    __CrestLoad(13271, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13270, (unsigned long )0, (long long )1);
    __CrestApply2(13269, 0, (long long )(ii + 1));
    __CrestStore(13272, (unsigned long )(& iip1));
# 150 "../HPL_pdpanllT.c"
    iip1 = ii + 1;
    __CrestLoad(13275, (unsigned long )(& m), (long long )m);
    __CrestLoad(13274, (unsigned long )0, (long long )1);
    __CrestApply2(13273, 1, (long long )(m - 1));
    __CrestStore(13276, (unsigned long )(& Mm1));
# 150 "../HPL_pdpanllT.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(13266, 5193, 0);
    __CrestLoad(13277, (unsigned long )0, (long long )0);
    __CrestStore(13278, (unsigned long )(& ii));
# 151 "../HPL_pdpanllT.c"
    ii = 0;
    __CrestLoad(13279, (unsigned long )(& ii), (long long )ii);
    __CrestStore(13280, (unsigned long )(& iip1));
# 151 "../HPL_pdpanllT.c"
    iip1 = ii;
    __CrestLoad(13281, (unsigned long )(& m), (long long )m);
    __CrestStore(13282, (unsigned long )(& Mm1));
# 151 "../HPL_pdpanllT.c"
    Mm1 = m;
  }
  }
  __CrestLoad(13283, (unsigned long )(& m), (long long )m);
  __CrestLoad(13284, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13285, (unsigned long )(& jj), (long long )jj);
# 167 "../HPL_pdpanllT.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13286);
  {
# 169 "../HPL_pdpanllT.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(13289, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13288, (unsigned long )0, (long long )0);
    __CrestApply2(13287, 14, (long long )(Nm1 > 0));
# 169 "../HPL_pdpanllT.c"
    if (Nm1 > 0) {
      __CrestBranch(13290, 5199, 1);

    } else {
      __CrestBranch(13291, 5200, 0);
# 169 "../HPL_pdpanllT.c"
      goto while_break;
    }
    }
    __CrestLoad(13292, (unsigned long )(& m), (long long )m);
    __CrestLoad(13293, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13294, (unsigned long )(& jj), (long long )jj);
# 174 "../HPL_pdpanllT.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13295);
    __CrestLoad(13296, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13297, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpanllT.c"
    HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13298);
# 177 "../HPL_pdpanllT.c"
    L1ptr = (L1 + (jj + 1)) + ICOFF * (int const )n0;
    __CrestLoad(13303, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13302, (unsigned long )0, (long long )1);
    __CrestApply2(13301, 0, (long long )(jj + 1));
    __CrestLoad(13300, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestApply2(13299, 1, (long long )((jj + 1) - (int )ICOFF));
    __CrestStore(13304, (unsigned long )(& kk));
# 177 "../HPL_pdpanllT.c"
    kk = (jj + 1) - (int )ICOFF;
    __CrestLoad(13305, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13306, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
    __CrestLoad(13307, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
    __CrestLoad(13308, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(13309, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13310, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13311, (unsigned long )(& n0), (long long )n0);
# 178 "../HPL_pdpanllT.c"
    cblas_dtrsv((enum HPL_ORDER const )102, (enum HPL_UPLO const )121, (enum HPL_TRANS const )112,
                (enum HPL_DIAG const )132, (int const )kk, (double const *)((L1 + ICOFF) + ICOFF * (int const )n0),
                (int const )n0, L1ptr, (int const )n0);
    __CrestClearStack(13312);
    {
# 186 "../HPL_pdpanllT.c"
    mem_20 = WORK + 0;
    {
    __CrestLoad(13315, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(13314, (unsigned long )0, (long long )0.0);
    __CrestApply2(13313, 13, (long long )(*mem_20 != 0.0));
# 186 "../HPL_pdpanllT.c"
    if (*mem_20 != 0.0) {
      __CrestBranch(13316, 5205, 1);
# 187 "../HPL_pdpanllT.c"
      mem_21 = WORK + 0;
      __CrestLoad(13318, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13319, (unsigned long )0, (long long )((int const )1));
# 187 "../HPL_pdpanllT.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_21), (A + iip1) + jj * lda,
                  (int const )1);
      __CrestClearStack(13320);
    } else {
      __CrestBranch(13317, 5206, 0);

    }
    }
    }
    __CrestLoad(13321, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13322, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13323, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13324, (unsigned long )(& kk), (long long )kk);
    __CrestLoad(13325, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13326, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13327, (unsigned long )0, (long long )((int const )1));
# 205 "../HPL_pdpanllT.c"
    cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )Mm1,
                (int const )kk, (double const )(- 1.0), (double const *)((A + iip1) + ICOFF * (int const )lda),
                (int const )lda, (double const *)L1ptr, (int const )n0, (double const )1.0,
                (A + iip1) + (jj + 1) * lda, (int const )1);
    __CrestClearStack(13328);
    __CrestLoad(13329, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13330, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(13333, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13332, (unsigned long )0, (long long )1);
    __CrestApply2(13331, 0, (long long )(jj + 1));
# 209 "../HPL_pdpanllT.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(13334);
    {
    __CrestLoad(13337, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13336, (unsigned long )0, (long long )0);
    __CrestApply2(13335, 13, (long long )(curr != 0));
# 210 "../HPL_pdpanllT.c"
    if (curr != 0) {
      __CrestBranch(13338, 5209, 1);
      __CrestLoad(13340, (unsigned long )(& kk), (long long )kk);
      __CrestLoad(13341, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13342, (unsigned long )0, (long long )((int const )1));
# 212 "../HPL_pdpanllT.c"
      cblas_dcopy((int const )kk, (double const *)L1ptr, (int const )n0, (A + ICOFF) + (jj + 1) * lda,
                  (int const )1);
      __CrestClearStack(13343);
      __CrestLoad(13344, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(13345, (unsigned long )(& ii));
# 213 "../HPL_pdpanllT.c"
      ii = iip1;
      __CrestLoad(13348, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(13347, (unsigned long )0, (long long )1);
      __CrestApply2(13346, 0, (long long )(iip1 + 1));
      __CrestStore(13349, (unsigned long )(& iip1));
# 213 "../HPL_pdpanllT.c"
      iip1 ++;
      __CrestLoad(13350, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(13351, (unsigned long )(& m));
# 213 "../HPL_pdpanllT.c"
      m = Mm1;
      __CrestLoad(13354, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13353, (unsigned long )0, (long long )1);
      __CrestApply2(13352, 1, (long long )(Mm1 - 1));
      __CrestStore(13355, (unsigned long )(& Mm1));
# 213 "../HPL_pdpanllT.c"
      Mm1 --;
    } else {
      __CrestBranch(13339, 5210, 0);

    }
    }
    __CrestLoad(13358, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13357, (unsigned long )0, (long long )1);
    __CrestApply2(13356, 1, (long long )(Nm1 - 1));
    __CrestStore(13359, (unsigned long )(& Nm1));
# 215 "../HPL_pdpanllT.c"
    Nm1 --;
    __CrestLoad(13362, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13361, (unsigned long )0, (long long )1);
    __CrestApply2(13360, 0, (long long )(jj + 1));
    __CrestStore(13363, (unsigned long )(& jj));
# 215 "../HPL_pdpanllT.c"
    jj ++;
  }
  while_break: ;
  }
  __CrestLoad(13364, (unsigned long )(& m), (long long )m);
  __CrestLoad(13365, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13366, (unsigned long )(& jj), (long long )jj);
# 221 "../HPL_pdpanllT.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13367);
  __CrestLoad(13368, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13369, (unsigned long )(& jj), (long long )jj);
# 222 "../HPL_pdpanllT.c"
  HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13370);
  {
# 223 "../HPL_pdpanllT.c"
  mem_22 = WORK + 0;
  {
  __CrestLoad(13373, (unsigned long )mem_22, (long long )*mem_22);
  __CrestLoad(13372, (unsigned long )0, (long long )0.0);
  __CrestApply2(13371, 13, (long long )(*mem_22 != 0.0));
# 223 "../HPL_pdpanllT.c"
  if (*mem_22 != 0.0) {
    __CrestBranch(13374, 5217, 1);
# 224 "../HPL_pdpanllT.c"
    mem_23 = WORK + 0;
    __CrestLoad(13376, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13377, (unsigned long )0, (long long )((int const )1));
# 224 "../HPL_pdpanllT.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_23), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(13378);
  } else {
    __CrestBranch(13375, 5218, 0);

  }
  }
  }

  {
  __CrestReturn(13379);
# 53 "../HPL_pdpanllT.c"
  return;
  }
}
}
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 116 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_daxpy(int const , double const , double const * , int const ,
                        double * , int const ) ;
# 131 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dger(enum HPL_ORDER const , int const , int const , double const ,
                       double const * , int const , double const * , int const ,
                       double * , int const ) ;
# 53 "../HPL_pdpanrlN.c"
void HPL_pdpanrlN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *Acur ;
  double *Anxt ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int lda ;
  int m ;
  struct HPL_S_grid *mem_17 ;
  double *mem_18 ;
  double *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;

  {
  __CrestCall(13383, 85);
  __CrestStore(13382, (unsigned long )(& ICOFF));
  __CrestStore(13381, (unsigned long )(& N));
  __CrestStore(13380, (unsigned long )(& M));
  __CrestLoad(13384, (unsigned long )(& M), (long long )M);
  __CrestStore(13385, (unsigned long )(& m));
# 138 "../HPL_pdpanrlN.c"
  m = (int )M;
# 145 "../HPL_pdpanrlN.c"
  A = PANEL->A;
  __CrestLoad(13386, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13387, (unsigned long )(& lda));
# 145 "../HPL_pdpanrlN.c"
  lda = PANEL->lda;
# 146 "../HPL_pdpanrlN.c"
  mem_17 = PANEL->grid;
  __CrestLoad(13390, (unsigned long )(& mem_17->myrow), (long long )mem_17->myrow);
  __CrestLoad(13389, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13388, 12, (long long )(mem_17->myrow == PANEL->prow));
  __CrestStore(13391, (unsigned long )(& curr));
# 146 "../HPL_pdpanrlN.c"
  curr = mem_17->myrow == PANEL->prow;
  __CrestLoad(13394, (unsigned long )(& N), (long long )N);
  __CrestLoad(13393, (unsigned long )0, (long long )1);
  __CrestApply2(13392, 1, (long long )(N - 1));
  __CrestStore(13395, (unsigned long )(& Nm1));
# 148 "../HPL_pdpanrlN.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(13396, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(13397, (unsigned long )(& jj));
# 148 "../HPL_pdpanrlN.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(13400, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13399, (unsigned long )0, (long long )0);
  __CrestApply2(13398, 13, (long long )(curr != 0));
# 149 "../HPL_pdpanrlN.c"
  if (curr != 0) {
    __CrestBranch(13401, 5223, 1);
    __CrestLoad(13403, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(13404, (unsigned long )(& ii));
# 149 "../HPL_pdpanrlN.c"
    ii = (int )ICOFF;
    __CrestLoad(13407, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13406, (unsigned long )0, (long long )1);
    __CrestApply2(13405, 0, (long long )(ii + 1));
    __CrestStore(13408, (unsigned long )(& iip1));
# 149 "../HPL_pdpanrlN.c"
    iip1 = ii + 1;
    __CrestLoad(13411, (unsigned long )(& m), (long long )m);
    __CrestLoad(13410, (unsigned long )0, (long long )1);
    __CrestApply2(13409, 1, (long long )(m - 1));
    __CrestStore(13412, (unsigned long )(& Mm1));
# 149 "../HPL_pdpanrlN.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(13402, 5224, 0);
    __CrestLoad(13413, (unsigned long )0, (long long )0);
    __CrestStore(13414, (unsigned long )(& ii));
# 150 "../HPL_pdpanrlN.c"
    ii = 0;
    __CrestLoad(13415, (unsigned long )(& ii), (long long )ii);
    __CrestStore(13416, (unsigned long )(& iip1));
# 150 "../HPL_pdpanrlN.c"
    iip1 = ii;
    __CrestLoad(13417, (unsigned long )(& m), (long long )m);
    __CrestStore(13418, (unsigned long )(& Mm1));
# 150 "../HPL_pdpanrlN.c"
    Mm1 = m;
  }
  }
  __CrestLoad(13419, (unsigned long )(& m), (long long )m);
  __CrestLoad(13420, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13421, (unsigned long )(& jj), (long long )jj);
# 166 "../HPL_pdpanrlN.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13422);
  {
# 168 "../HPL_pdpanrlN.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(13425, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13424, (unsigned long )0, (long long )1);
    __CrestApply2(13423, 17, (long long )(Nm1 >= 1));
# 168 "../HPL_pdpanrlN.c"
    if (Nm1 >= 1) {
      __CrestBranch(13426, 5230, 1);

    } else {
      __CrestBranch(13427, 5231, 0);
# 168 "../HPL_pdpanrlN.c"
      goto while_break;
    }
    }
# 170 "../HPL_pdpanrlN.c"
    Acur = (A + iip1) + jj * lda;
# 170 "../HPL_pdpanrlN.c"
    Anxt = (Acur + 0) + lda;
    __CrestLoad(13428, (unsigned long )(& m), (long long )m);
    __CrestLoad(13429, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13430, (unsigned long )(& jj), (long long )jj);
# 174 "../HPL_pdpanrlN.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13431);
    __CrestLoad(13432, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13433, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpanrlN.c"
    HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13434);
    {
# 182 "../HPL_pdpanrlN.c"
    mem_18 = WORK + 0;
    {
    __CrestLoad(13437, (unsigned long )mem_18, (long long )*mem_18);
    __CrestLoad(13436, (unsigned long )0, (long long )0.0);
    __CrestApply2(13435, 13, (long long )(*mem_18 != 0.0));
# 182 "../HPL_pdpanrlN.c"
    if (*mem_18 != 0.0) {
      __CrestBranch(13438, 5236, 1);
# 183 "../HPL_pdpanrlN.c"
      mem_19 = WORK + 0;
      __CrestLoad(13440, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13441, (unsigned long )0, (long long )((int const )1));
# 183 "../HPL_pdpanrlN.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_19), Acur, (int const )1);
      __CrestClearStack(13442);
    } else {
      __CrestBranch(13439, 5237, 0);

    }
    }
    }
# 184 "../HPL_pdpanrlN.c"
    mem_20 = WORK + ((4 + jj) + 1);
    __CrestLoad(13443, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13444, (unsigned long )0, (long long )((int const )1));
    __CrestLoad(13445, (unsigned long )0, (long long )((int const )1));
# 184 "../HPL_pdpanrlN.c"
    cblas_daxpy((int const )Mm1, (double const )(- *mem_20), (double const *)Acur,
                (int const )1, Anxt, (int const )1);
    __CrestClearStack(13446);
    __CrestLoad(13447, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13448, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(13451, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13450, (unsigned long )0, (long long )1);
    __CrestApply2(13449, 0, (long long )(jj + 1));
# 185 "../HPL_pdpanrlN.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(13452);
    {
    __CrestLoad(13455, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13454, (unsigned long )0, (long long )1);
    __CrestApply2(13453, 14, (long long )(Nm1 > 1));
# 208 "../HPL_pdpanrlN.c"
    if (Nm1 > 1) {
      __CrestBranch(13456, 5240, 1);
      __CrestLoad(13458, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(13459, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13462, (unsigned long )(& Nm1), (long long )Nm1);
      __CrestLoad(13461, (unsigned long )0, (long long )1);
      __CrestApply2(13460, 1, (long long )(Nm1 - 1));
      __CrestLoad(13463, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13464, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13465, (unsigned long )(& lda), (long long )lda);
# 209 "../HPL_pdpanrlN.c"
      cblas_dger((enum HPL_ORDER const )102, (int const )Mm1, (int const )(Nm1 - 1),
                 (double const )(- 1.0), (double const *)Acur, (int const )1,
                 (double const *)(((WORK + 4) + jj) + 2), (int const )1, (Anxt + 0) + lda,
                 (int const )lda);
      __CrestClearStack(13466);
    } else {
      __CrestBranch(13457, 5241, 0);

    }
    }
    {
    __CrestLoad(13469, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13468, (unsigned long )0, (long long )0);
    __CrestApply2(13467, 13, (long long )(curr != 0));
# 220 "../HPL_pdpanrlN.c"
    if (curr != 0) {
      __CrestBranch(13470, 5243, 1);
      __CrestLoad(13472, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(13473, (unsigned long )(& ii));
# 220 "../HPL_pdpanrlN.c"
      ii = iip1;
      __CrestLoad(13476, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(13475, (unsigned long )0, (long long )1);
      __CrestApply2(13474, 0, (long long )(iip1 + 1));
      __CrestStore(13477, (unsigned long )(& iip1));
# 220 "../HPL_pdpanrlN.c"
      iip1 ++;
      __CrestLoad(13478, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(13479, (unsigned long )(& m));
# 220 "../HPL_pdpanrlN.c"
      m = Mm1;
      __CrestLoad(13482, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13481, (unsigned long )0, (long long )1);
      __CrestApply2(13480, 1, (long long )(Mm1 - 1));
      __CrestStore(13483, (unsigned long )(& Mm1));
# 220 "../HPL_pdpanrlN.c"
      Mm1 --;
    } else {
      __CrestBranch(13471, 5244, 0);

    }
    }
    __CrestLoad(13486, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13485, (unsigned long )0, (long long )1);
    __CrestApply2(13484, 1, (long long )(Nm1 - 1));
    __CrestStore(13487, (unsigned long )(& Nm1));
# 222 "../HPL_pdpanrlN.c"
    Nm1 --;
    __CrestLoad(13490, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13489, (unsigned long )0, (long long )1);
    __CrestApply2(13488, 0, (long long )(jj + 1));
    __CrestStore(13491, (unsigned long )(& jj));
# 222 "../HPL_pdpanrlN.c"
    jj ++;
  }
  while_break: ;
  }
  __CrestLoad(13492, (unsigned long )(& m), (long long )m);
  __CrestLoad(13493, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13494, (unsigned long )(& jj), (long long )jj);
# 228 "../HPL_pdpanrlN.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13495);
  __CrestLoad(13496, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13497, (unsigned long )(& jj), (long long )jj);
# 229 "../HPL_pdpanrlN.c"
  HPL_dlocswpN(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13498);
  {
# 230 "../HPL_pdpanrlN.c"
  mem_21 = WORK + 0;
  {
  __CrestLoad(13501, (unsigned long )mem_21, (long long )*mem_21);
  __CrestLoad(13500, (unsigned long )0, (long long )0.0);
  __CrestApply2(13499, 13, (long long )(*mem_21 != 0.0));
# 230 "../HPL_pdpanrlN.c"
  if (*mem_21 != 0.0) {
    __CrestBranch(13502, 5251, 1);
# 231 "../HPL_pdpanrlN.c"
    mem_22 = WORK + 0;
    __CrestLoad(13504, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13505, (unsigned long )0, (long long )((int const )1));
# 231 "../HPL_pdpanrlN.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_22), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(13506);
  } else {
    __CrestBranch(13503, 5252, 0);

  }
  }
  }

  {
  __CrestReturn(13507);
# 53 "../HPL_pdpanrlN.c"
  return;
  }
}
}
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdpanrlT.c"
void HPL_pdpanrlT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                  double *WORK )
{
  double *A ;
  double *Acur ;
  double *Anxt ;
  double *L1 ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int lda ;
  int m ;
  int n0 ;
  struct HPL_S_grid *mem_19 ;
  double *mem_20 ;
  double *mem_21 ;
  double *mem_22 ;
  double *mem_23 ;
  double *mem_24 ;

  {
  __CrestCall(13511, 86);
  __CrestStore(13510, (unsigned long )(& ICOFF));
  __CrestStore(13509, (unsigned long )(& N));
  __CrestStore(13508, (unsigned long )(& M));
  __CrestLoad(13512, (unsigned long )(& M), (long long )M);
  __CrestStore(13513, (unsigned long )(& m));
# 137 "../HPL_pdpanrlT.c"
  m = (int )M;
# 145 "../HPL_pdpanrlT.c"
  A = PANEL->A;
  __CrestLoad(13514, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13515, (unsigned long )(& lda));
# 145 "../HPL_pdpanrlT.c"
  lda = PANEL->lda;
# 146 "../HPL_pdpanrlT.c"
  L1 = PANEL->L1;
  __CrestLoad(13516, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13517, (unsigned long )(& n0));
# 146 "../HPL_pdpanrlT.c"
  n0 = PANEL->jb;
# 147 "../HPL_pdpanrlT.c"
  mem_19 = PANEL->grid;
  __CrestLoad(13520, (unsigned long )(& mem_19->myrow), (long long )mem_19->myrow);
  __CrestLoad(13519, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13518, 12, (long long )(mem_19->myrow == PANEL->prow));
  __CrestStore(13521, (unsigned long )(& curr));
# 147 "../HPL_pdpanrlT.c"
  curr = mem_19->myrow == PANEL->prow;
  __CrestLoad(13524, (unsigned long )(& N), (long long )N);
  __CrestLoad(13523, (unsigned long )0, (long long )1);
  __CrestApply2(13522, 1, (long long )(N - 1));
  __CrestStore(13525, (unsigned long )(& Nm1));
# 149 "../HPL_pdpanrlT.c"
  Nm1 = (int )(N - 1);
  __CrestLoad(13526, (unsigned long )(& ICOFF), (long long )ICOFF);
  __CrestStore(13527, (unsigned long )(& jj));
# 149 "../HPL_pdpanrlT.c"
  jj = (int )ICOFF;
  {
  __CrestLoad(13530, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13529, (unsigned long )0, (long long )0);
  __CrestApply2(13528, 13, (long long )(curr != 0));
# 150 "../HPL_pdpanrlT.c"
  if (curr != 0) {
    __CrestBranch(13531, 5257, 1);
    __CrestLoad(13533, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestStore(13534, (unsigned long )(& ii));
# 150 "../HPL_pdpanrlT.c"
    ii = (int )ICOFF;
    __CrestLoad(13537, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13536, (unsigned long )0, (long long )1);
    __CrestApply2(13535, 0, (long long )(ii + 1));
    __CrestStore(13538, (unsigned long )(& iip1));
# 150 "../HPL_pdpanrlT.c"
    iip1 = ii + 1;
    __CrestLoad(13541, (unsigned long )(& m), (long long )m);
    __CrestLoad(13540, (unsigned long )0, (long long )1);
    __CrestApply2(13539, 1, (long long )(m - 1));
    __CrestStore(13542, (unsigned long )(& Mm1));
# 150 "../HPL_pdpanrlT.c"
    Mm1 = m - 1;
  } else {
    __CrestBranch(13532, 5258, 0);
    __CrestLoad(13543, (unsigned long )0, (long long )0);
    __CrestStore(13544, (unsigned long )(& ii));
# 151 "../HPL_pdpanrlT.c"
    ii = 0;
    __CrestLoad(13545, (unsigned long )(& ii), (long long )ii);
    __CrestStore(13546, (unsigned long )(& iip1));
# 151 "../HPL_pdpanrlT.c"
    iip1 = ii;
    __CrestLoad(13547, (unsigned long )(& m), (long long )m);
    __CrestStore(13548, (unsigned long )(& Mm1));
# 151 "../HPL_pdpanrlT.c"
    Mm1 = m;
  }
  }
  __CrestLoad(13549, (unsigned long )(& m), (long long )m);
  __CrestLoad(13550, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13551, (unsigned long )(& jj), (long long )jj);
# 167 "../HPL_pdpanrlT.c"
  HPL_dlocmax(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13552);
  {
# 169 "../HPL_pdpanrlT.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(13555, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13554, (unsigned long )0, (long long )1);
    __CrestApply2(13553, 17, (long long )(Nm1 >= 1));
# 169 "../HPL_pdpanrlT.c"
    if (Nm1 >= 1) {
      __CrestBranch(13556, 5264, 1);

    } else {
      __CrestBranch(13557, 5265, 0);
# 169 "../HPL_pdpanrlT.c"
      goto while_break;
    }
    }
# 171 "../HPL_pdpanrlT.c"
    Acur = (A + iip1) + jj * lda;
# 171 "../HPL_pdpanrlT.c"
    Anxt = (Acur + 0) + lda;
    __CrestLoad(13558, (unsigned long )(& m), (long long )m);
    __CrestLoad(13559, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13560, (unsigned long )(& jj), (long long )jj);
# 175 "../HPL_pdpanrlT.c"
    HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13561);
    __CrestLoad(13562, (unsigned long )(& ii), (long long )ii);
    __CrestLoad(13563, (unsigned long )(& jj), (long long )jj);
# 176 "../HPL_pdpanrlT.c"
    HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
    __CrestClearStack(13564);
    {
# 183 "../HPL_pdpanrlT.c"
    mem_20 = WORK + 0;
    {
    __CrestLoad(13567, (unsigned long )mem_20, (long long )*mem_20);
    __CrestLoad(13566, (unsigned long )0, (long long )0.0);
    __CrestApply2(13565, 13, (long long )(*mem_20 != 0.0));
# 183 "../HPL_pdpanrlT.c"
    if (*mem_20 != 0.0) {
      __CrestBranch(13568, 5270, 1);
# 184 "../HPL_pdpanrlT.c"
      mem_21 = WORK + 0;
      __CrestLoad(13570, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13571, (unsigned long )0, (long long )((int const )1));
# 184 "../HPL_pdpanrlT.c"
      cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_21), Acur, (int const )1);
      __CrestClearStack(13572);
    } else {
      __CrestBranch(13569, 5271, 0);

    }
    }
    }
# 185 "../HPL_pdpanrlT.c"
    mem_22 = (L1 + (jj + 1)) + jj * n0;
    __CrestLoad(13573, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13574, (unsigned long )0, (long long )((int const )1));
    __CrestLoad(13575, (unsigned long )0, (long long )((int const )1));
# 185 "../HPL_pdpanrlT.c"
    cblas_daxpy((int const )Mm1, (double const )(- *mem_22), (double const *)Acur,
                (int const )1, Anxt, (int const )1);
    __CrestClearStack(13576);
    __CrestLoad(13577, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13578, (unsigned long )(& iip1), (long long )iip1);
    __CrestLoad(13581, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13580, (unsigned long )0, (long long )1);
    __CrestApply2(13579, 0, (long long )(jj + 1));
# 186 "../HPL_pdpanrlT.c"
    HPL_dlocmax(PANEL, (int const )Mm1, (int const )iip1, (int const )(jj + 1),
                WORK);
    __CrestClearStack(13582);
    {
    __CrestLoad(13585, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13584, (unsigned long )0, (long long )1);
    __CrestApply2(13583, 14, (long long )(Nm1 > 1));
# 188 "../HPL_pdpanrlT.c"
    if (Nm1 > 1) {
      __CrestBranch(13586, 5274, 1);
      __CrestLoad(13588, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(13589, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13592, (unsigned long )(& Nm1), (long long )Nm1);
      __CrestLoad(13591, (unsigned long )0, (long long )1);
      __CrestApply2(13590, 1, (long long )(Nm1 - 1));
      __CrestLoad(13593, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13594, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(13595, (unsigned long )(& lda), (long long )lda);
# 209 "../HPL_pdpanrlT.c"
      cblas_dger((enum HPL_ORDER const )102, (int const )Mm1, (int const )(Nm1 - 1),
                 (double const )(- 1.0), (double const *)Acur, (int const )1,
                 (double const *)((L1 + (jj + 2)) + jj * n0), (int const )1, (Anxt + 0) + lda,
                 (int const )lda);
      __CrestClearStack(13596);
    } else {
      __CrestBranch(13587, 5275, 0);

    }
    }
    {
    __CrestLoad(13599, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13598, (unsigned long )0, (long long )0);
    __CrestApply2(13597, 13, (long long )(curr != 0));
# 214 "../HPL_pdpanrlT.c"
    if (curr != 0) {
      __CrestBranch(13600, 5277, 1);
      __CrestLoad(13602, (unsigned long )(& iip1), (long long )iip1);
      __CrestStore(13603, (unsigned long )(& ii));
# 214 "../HPL_pdpanrlT.c"
      ii = iip1;
      __CrestLoad(13606, (unsigned long )(& iip1), (long long )iip1);
      __CrestLoad(13605, (unsigned long )0, (long long )1);
      __CrestApply2(13604, 0, (long long )(iip1 + 1));
      __CrestStore(13607, (unsigned long )(& iip1));
# 214 "../HPL_pdpanrlT.c"
      iip1 ++;
      __CrestLoad(13608, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestStore(13609, (unsigned long )(& m));
# 214 "../HPL_pdpanrlT.c"
      m = Mm1;
      __CrestLoad(13612, (unsigned long )(& Mm1), (long long )Mm1);
      __CrestLoad(13611, (unsigned long )0, (long long )1);
      __CrestApply2(13610, 1, (long long )(Mm1 - 1));
      __CrestStore(13613, (unsigned long )(& Mm1));
# 214 "../HPL_pdpanrlT.c"
      Mm1 --;
    } else {
      __CrestBranch(13601, 5278, 0);

    }
    }
    __CrestLoad(13616, (unsigned long )(& Nm1), (long long )Nm1);
    __CrestLoad(13615, (unsigned long )0, (long long )1);
    __CrestApply2(13614, 1, (long long )(Nm1 - 1));
    __CrestStore(13617, (unsigned long )(& Nm1));
# 216 "../HPL_pdpanrlT.c"
    Nm1 --;
    __CrestLoad(13620, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13619, (unsigned long )0, (long long )1);
    __CrestApply2(13618, 0, (long long )(jj + 1));
    __CrestStore(13621, (unsigned long )(& jj));
# 216 "../HPL_pdpanrlT.c"
    jj ++;
  }
  while_break: ;
  }
  __CrestLoad(13622, (unsigned long )(& m), (long long )m);
  __CrestLoad(13623, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13624, (unsigned long )(& jj), (long long )jj);
# 222 "../HPL_pdpanrlT.c"
  HPL_pdmxswp(PANEL, (int const )m, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13625);
  __CrestLoad(13626, (unsigned long )(& ii), (long long )ii);
  __CrestLoad(13627, (unsigned long )(& jj), (long long )jj);
# 223 "../HPL_pdpanrlT.c"
  HPL_dlocswpT(PANEL, (int const )ii, (int const )jj, WORK);
  __CrestClearStack(13628);
  {
# 224 "../HPL_pdpanrlT.c"
  mem_23 = WORK + 0;
  {
  __CrestLoad(13631, (unsigned long )mem_23, (long long )*mem_23);
  __CrestLoad(13630, (unsigned long )0, (long long )0.0);
  __CrestApply2(13629, 13, (long long )(*mem_23 != 0.0));
# 224 "../HPL_pdpanrlT.c"
  if (*mem_23 != 0.0) {
    __CrestBranch(13632, 5285, 1);
# 225 "../HPL_pdpanrlT.c"
    mem_24 = WORK + 0;
    __CrestLoad(13634, (unsigned long )(& Mm1), (long long )Mm1);
    __CrestLoad(13635, (unsigned long )0, (long long )((int const )1));
# 225 "../HPL_pdpanrlT.c"
    cblas_dscal((int const )Mm1, (double const )(1.0 / *mem_24), (A + iip1) + jj * lda,
                (int const )1);
    __CrestClearStack(13636);
  } else {
    __CrestBranch(13633, 5286, 0);

  }
  }
  }

  {
  __CrestReturn(13637);
# 53 "../HPL_pdpanrlT.c"
  return;
  }
}
}
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 143 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dgemm(enum HPL_ORDER const , enum HPL_TRANS const , enum HPL_TRANS const ,
                        int const , int const , int const , double const ,
                        double const * , int const , double const * , int const ,
                        double const , double * , int const ) ;
# 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dtrsm(enum HPL_ORDER const , enum HPL_SIDE const , enum HPL_UPLO const ,
                        enum HPL_TRANS const , enum HPL_DIAG const , int const ,
                        int const , double const , double const * , int const ,
                        double * , int const ) ;
# 53 "../HPL_pdrpanllN.c"
void HPL_pdrpanllN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(13641, 87);
  __CrestStore(13640, (unsigned long )(& ICOFF));
  __CrestStore(13639, (unsigned long )(& N));
  __CrestStore(13638, (unsigned long )(& M));
# 133 "../HPL_pdrpanllN.c"
  mem_22 = PANEL->algo;
  __CrestLoad(13642, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(13643, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpanllN.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(13646, (unsigned long )(& N), (long long )N);
  __CrestLoad(13645, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13644, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpanllN.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(13647, 5291, 1);
# 134 "../HPL_pdrpanllN.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpanllN.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(13649, (unsigned long )(& M), (long long )M);
    __CrestLoad(13650, (unsigned long )(& N), (long long )N);
    __CrestLoad(13651, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpanllN.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(13652);
# 134 "../HPL_pdrpanllN.c"
    goto return_label;
  } else {
    __CrestBranch(13648, 5294, 0);

  }
  }
# 146 "../HPL_pdrpanllN.c"
  mem_25 = PANEL->algo;
  __CrestLoad(13653, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(13654, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpanllN.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(13655, (unsigned long )0, (long long )0);
  __CrestStore(13656, (unsigned long )(& jj));
# 146 "../HPL_pdrpanllN.c"
  jj = 0;
  __CrestLoad(13657, (unsigned long )(& jj), (long long )jj);
  __CrestStore(13658, (unsigned long )(& ii));
# 146 "../HPL_pdrpanllN.c"
  ii = jj;
  __CrestLoad(13659, (unsigned long )(& M), (long long )M);
  __CrestStore(13660, (unsigned long )(& m));
# 146 "../HPL_pdrpanllN.c"
  m = (int )M;
  __CrestLoad(13661, (unsigned long )(& N), (long long )N);
  __CrestStore(13662, (unsigned long )(& n));
# 146 "../HPL_pdrpanllN.c"
  n = (int )N;
  __CrestLoad(13677, (unsigned long )(& N), (long long )N);
  __CrestLoad(13676, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13675, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(13674, (unsigned long )0, (long long )1);
  __CrestApply2(13673, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(13672, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13671, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(13670, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13669, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(13668, (unsigned long )0, (long long )1);
  __CrestApply2(13667, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(13666, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13665, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(13664, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13663, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(13678, (unsigned long )(& jb));
# 147 "../HPL_pdrpanllN.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(13679, (unsigned long )(& jb), (long long )jb);
  __CrestStore(13680, (unsigned long )(& nb));
# 147 "../HPL_pdrpanllN.c"
  nb = jb;
# 149 "../HPL_pdrpanllN.c"
  A = PANEL->A;
  __CrestLoad(13681, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13682, (unsigned long )(& lda));
# 149 "../HPL_pdrpanllN.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpanllN.c"
  L1 = PANEL->L1;
  __CrestLoad(13683, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13684, (unsigned long )(& n0));
# 150 "../HPL_pdrpanllN.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpanllN.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpanllN.c"
  mem_26 = PANEL->grid;
  __CrestLoad(13687, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(13686, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13685, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(13688, (unsigned long )(& curr));
# 152 "../HPL_pdrpanllN.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(13691, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13690, (unsigned long )0, (long long )0);
  __CrestApply2(13689, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpanllN.c"
  if (curr != 0) {
    __CrestBranch(13692, 5297, 1);
# 154 "../HPL_pdrpanllN.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(13693, 5298, 0);
# 155 "../HPL_pdrpanllN.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpanllN.c"
  while (1) {
    while_continue: ;
    __CrestLoad(13696, (unsigned long )(& n), (long long )n);
    __CrestLoad(13695, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(13694, 1, (long long )(n - jb));
    __CrestStore(13697, (unsigned long )(& n));
# 165 "../HPL_pdrpanllN.c"
    n -= jb;
    __CrestLoad(13700, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(13699, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(13698, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(13701, (unsigned long )(& ioff));
# 165 "../HPL_pdrpanllN.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(13702, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13703, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
    __CrestLoad(13704, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
    __CrestLoad(13705, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13706, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(13707, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13708, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13709, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13710, (unsigned long )(& n0), (long long )n0);
# 169 "../HPL_pdrpanllN.c"
    cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jj,
                (int const )jb, (double const )1.0, (double const *)L1ptr, (int const )n0,
                (L1ptr + 0) + jj * n0, (int const )n0);
    __CrestClearStack(13711);
    __CrestLoad(13712, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13713, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13714, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13715, (unsigned long )(& m), (long long )m);
    __CrestLoad(13716, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13717, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13718, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13719, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13720, (unsigned long )(& lda), (long long )lda);
# 219 "../HPL_pdrpanllN.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                (int const )m, (int const )jb, (int const )jj, (double const )(- 1.0),
                (double const *)((Aptr + ii) + 0), (int const )lda, (double const *)((L1ptr + 0) + jj * n0),
                (int const )n0, (double const )1.0, (Aptr + ii) + jj * lda, (int const )lda);
    __CrestClearStack(13721);
    __CrestLoad(13722, (unsigned long )(& m), (long long )m);
    __CrestLoad(13723, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13724, (unsigned long )(& ioff), (long long )ioff);
# 224 "../HPL_pdrpanllN.c"
    HPL_pdrpanllN(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(13725);
    {
    __CrestLoad(13728, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13727, (unsigned long )0, (long long )0);
    __CrestApply2(13726, 13, (long long )(curr != 0));
# 228 "../HPL_pdrpanllN.c"
    if (curr != 0) {
      __CrestBranch(13729, 5304, 1);
      __CrestLoad(13731, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(13732, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(13733, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13734, (unsigned long )(& lda), (long long )lda);
# 230 "../HPL_pdrpanllN.c"
      HPL_dlacpy((int const )ioff, (int const )jb, (double const *)((L1 + 0) + ioff * n0),
                 (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(13735);
      __CrestLoad(13738, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(13737, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(13736, 0, (long long )(ii + jb));
      __CrestStore(13739, (unsigned long )(& ii));
# 232 "../HPL_pdrpanllN.c"
      ii += jb;
      __CrestLoad(13742, (unsigned long )(& m), (long long )m);
      __CrestLoad(13741, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(13740, 1, (long long )(m - jb));
      __CrestStore(13743, (unsigned long )(& m));
# 232 "../HPL_pdrpanllN.c"
      m -= jb;
    } else {
      __CrestBranch(13730, 5305, 0);

    }
    }
    __CrestLoad(13746, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13745, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(13744, 0, (long long )(jj + jb));
    __CrestStore(13747, (unsigned long )(& jj));
# 234 "../HPL_pdrpanllN.c"
    jj += jb;
    {
    __CrestLoad(13750, (unsigned long )(& n), (long long )n);
    __CrestLoad(13749, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(13748, 16, (long long )(n < nb));
# 234 "../HPL_pdrpanllN.c"
    if (n < nb) {
      __CrestBranch(13751, 5308, 1);
      __CrestLoad(13753, (unsigned long )(& n), (long long )n);
      __CrestStore(13754, (unsigned long )(& jb));
# 234 "../HPL_pdrpanllN.c"
      jb = n;
    } else {
      __CrestBranch(13752, 5309, 0);
      __CrestLoad(13755, (unsigned long )(& nb), (long long )nb);
      __CrestStore(13756, (unsigned long )(& jb));
# 234 "../HPL_pdrpanllN.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(13759, (unsigned long )(& n), (long long )n);
    __CrestLoad(13758, (unsigned long )0, (long long )0);
    __CrestApply2(13757, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpanllN.c"
    if (n <= 0) {
      __CrestBranch(13760, 5311, 1);
# 163 "../HPL_pdrpanllN.c"
      goto while_break;
    } else {
      __CrestBranch(13761, 5312, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(13762);
# 53 "../HPL_pdrpanllN.c"
  return;
  }
}
}
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdrpanllT.c"
void HPL_pdrpanllT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(13766, 88);
  __CrestStore(13765, (unsigned long )(& ICOFF));
  __CrestStore(13764, (unsigned long )(& N));
  __CrestStore(13763, (unsigned long )(& M));
# 133 "../HPL_pdrpanllT.c"
  mem_22 = PANEL->algo;
  __CrestLoad(13767, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(13768, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpanllT.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(13771, (unsigned long )(& N), (long long )N);
  __CrestLoad(13770, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13769, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpanllT.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(13772, 5318, 1);
# 134 "../HPL_pdrpanllT.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpanllT.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(13774, (unsigned long )(& M), (long long )M);
    __CrestLoad(13775, (unsigned long )(& N), (long long )N);
    __CrestLoad(13776, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpanllT.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(13777);
# 134 "../HPL_pdrpanllT.c"
    goto return_label;
  } else {
    __CrestBranch(13773, 5321, 0);

  }
  }
# 146 "../HPL_pdrpanllT.c"
  mem_25 = PANEL->algo;
  __CrestLoad(13778, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(13779, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpanllT.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(13780, (unsigned long )0, (long long )0);
  __CrestStore(13781, (unsigned long )(& jj));
# 146 "../HPL_pdrpanllT.c"
  jj = 0;
  __CrestLoad(13782, (unsigned long )(& jj), (long long )jj);
  __CrestStore(13783, (unsigned long )(& ii));
# 146 "../HPL_pdrpanllT.c"
  ii = jj;
  __CrestLoad(13784, (unsigned long )(& M), (long long )M);
  __CrestStore(13785, (unsigned long )(& m));
# 146 "../HPL_pdrpanllT.c"
  m = (int )M;
  __CrestLoad(13786, (unsigned long )(& N), (long long )N);
  __CrestStore(13787, (unsigned long )(& n));
# 146 "../HPL_pdrpanllT.c"
  n = (int )N;
  __CrestLoad(13802, (unsigned long )(& N), (long long )N);
  __CrestLoad(13801, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13800, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(13799, (unsigned long )0, (long long )1);
  __CrestApply2(13798, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(13797, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13796, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(13795, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13794, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(13793, (unsigned long )0, (long long )1);
  __CrestApply2(13792, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(13791, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13790, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(13789, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13788, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(13803, (unsigned long )(& jb));
# 147 "../HPL_pdrpanllT.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(13804, (unsigned long )(& jb), (long long )jb);
  __CrestStore(13805, (unsigned long )(& nb));
# 147 "../HPL_pdrpanllT.c"
  nb = jb;
# 149 "../HPL_pdrpanllT.c"
  A = PANEL->A;
  __CrestLoad(13806, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13807, (unsigned long )(& lda));
# 149 "../HPL_pdrpanllT.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpanllT.c"
  L1 = PANEL->L1;
  __CrestLoad(13808, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13809, (unsigned long )(& n0));
# 150 "../HPL_pdrpanllT.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpanllT.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpanllT.c"
  mem_26 = PANEL->grid;
  __CrestLoad(13812, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(13811, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13810, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(13813, (unsigned long )(& curr));
# 152 "../HPL_pdrpanllT.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(13816, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13815, (unsigned long )0, (long long )0);
  __CrestApply2(13814, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpanllT.c"
  if (curr != 0) {
    __CrestBranch(13817, 5324, 1);
# 154 "../HPL_pdrpanllT.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(13818, 5325, 0);
# 155 "../HPL_pdrpanllT.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpanllT.c"
  while (1) {
    while_continue: ;
    __CrestLoad(13821, (unsigned long )(& n), (long long )n);
    __CrestLoad(13820, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(13819, 1, (long long )(n - jb));
    __CrestStore(13822, (unsigned long )(& n));
# 165 "../HPL_pdrpanllT.c"
    n -= jb;
    __CrestLoad(13825, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(13824, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(13823, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(13826, (unsigned long )(& ioff));
# 165 "../HPL_pdrpanllT.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(13827, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13828, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
    __CrestLoad(13829, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
    __CrestLoad(13830, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13831, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(13832, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13833, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13834, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13835, (unsigned long )(& n0), (long long )n0);
# 169 "../HPL_pdrpanllT.c"
    cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )121,
                (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                (int const )jj, (double const )1.0, (double const *)L1ptr, (int const )n0,
                (L1ptr + jj) + 0, (int const )n0);
    __CrestClearStack(13836);
    __CrestLoad(13837, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13838, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13839, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
    __CrestLoad(13840, (unsigned long )(& m), (long long )m);
    __CrestLoad(13841, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13842, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13843, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13844, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13845, (unsigned long )(& lda), (long long )lda);
# 219 "../HPL_pdrpanllT.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                (int const )m, (int const )jb, (int const )jj, (double const )(- 1.0),
                (double const *)((Aptr + ii) + 0), (int const )lda, (double const *)((L1ptr + jj) + 0),
                (int const )n0, (double const )1.0, (Aptr + ii) + jj * lda, (int const )lda);
    __CrestClearStack(13846);
    __CrestLoad(13847, (unsigned long )(& m), (long long )m);
    __CrestLoad(13848, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13849, (unsigned long )(& ioff), (long long )ioff);
# 224 "../HPL_pdrpanllT.c"
    HPL_pdrpanllT(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(13850);
    {
    __CrestLoad(13853, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13852, (unsigned long )0, (long long )0);
    __CrestApply2(13851, 13, (long long )(curr != 0));
# 228 "../HPL_pdrpanllT.c"
    if (curr != 0) {
      __CrestBranch(13854, 5331, 1);
      __CrestLoad(13856, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(13857, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(13858, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13859, (unsigned long )(& lda), (long long )lda);
# 230 "../HPL_pdrpanllT.c"
      HPL_dlatcpy((int const )ioff, (int const )jb, (double const *)((L1 + ioff) + 0),
                  (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(13860);
      __CrestLoad(13863, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(13862, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(13861, 0, (long long )(ii + jb));
      __CrestStore(13864, (unsigned long )(& ii));
# 232 "../HPL_pdrpanllT.c"
      ii += jb;
      __CrestLoad(13867, (unsigned long )(& m), (long long )m);
      __CrestLoad(13866, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(13865, 1, (long long )(m - jb));
      __CrestStore(13868, (unsigned long )(& m));
# 232 "../HPL_pdrpanllT.c"
      m -= jb;
    } else {
      __CrestBranch(13855, 5332, 0);

    }
    }
    __CrestLoad(13871, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13870, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(13869, 0, (long long )(jj + jb));
    __CrestStore(13872, (unsigned long )(& jj));
# 234 "../HPL_pdrpanllT.c"
    jj += jb;
    {
    __CrestLoad(13875, (unsigned long )(& n), (long long )n);
    __CrestLoad(13874, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(13873, 16, (long long )(n < nb));
# 234 "../HPL_pdrpanllT.c"
    if (n < nb) {
      __CrestBranch(13876, 5335, 1);
      __CrestLoad(13878, (unsigned long )(& n), (long long )n);
      __CrestStore(13879, (unsigned long )(& jb));
# 234 "../HPL_pdrpanllT.c"
      jb = n;
    } else {
      __CrestBranch(13877, 5336, 0);
      __CrestLoad(13880, (unsigned long )(& nb), (long long )nb);
      __CrestStore(13881, (unsigned long )(& jb));
# 234 "../HPL_pdrpanllT.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(13884, (unsigned long )(& n), (long long )n);
    __CrestLoad(13883, (unsigned long )0, (long long )0);
    __CrestApply2(13882, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpanllT.c"
    if (n <= 0) {
      __CrestBranch(13885, 5338, 1);
# 163 "../HPL_pdrpanllT.c"
      goto while_break;
    } else {
      __CrestBranch(13886, 5339, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(13887);
# 53 "../HPL_pdrpanllT.c"
  return;
  }
}
}
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdrpancrN.c"
void HPL_pdrpancrN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(13891, 89);
  __CrestStore(13890, (unsigned long )(& ICOFF));
  __CrestStore(13889, (unsigned long )(& N));
  __CrestStore(13888, (unsigned long )(& M));
# 133 "../HPL_pdrpancrN.c"
  mem_22 = PANEL->algo;
  __CrestLoad(13892, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(13893, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpancrN.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(13896, (unsigned long )(& N), (long long )N);
  __CrestLoad(13895, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13894, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpancrN.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(13897, 5345, 1);
# 134 "../HPL_pdrpancrN.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpancrN.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(13899, (unsigned long )(& M), (long long )M);
    __CrestLoad(13900, (unsigned long )(& N), (long long )N);
    __CrestLoad(13901, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpancrN.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(13902);
# 134 "../HPL_pdrpancrN.c"
    goto return_label;
  } else {
    __CrestBranch(13898, 5348, 0);

  }
  }
# 146 "../HPL_pdrpancrN.c"
  mem_25 = PANEL->algo;
  __CrestLoad(13903, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(13904, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpancrN.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(13905, (unsigned long )0, (long long )0);
  __CrestStore(13906, (unsigned long )(& jj));
# 146 "../HPL_pdrpancrN.c"
  jj = 0;
  __CrestLoad(13907, (unsigned long )(& jj), (long long )jj);
  __CrestStore(13908, (unsigned long )(& ii));
# 146 "../HPL_pdrpancrN.c"
  ii = jj;
  __CrestLoad(13909, (unsigned long )(& M), (long long )M);
  __CrestStore(13910, (unsigned long )(& m));
# 146 "../HPL_pdrpancrN.c"
  m = (int )M;
  __CrestLoad(13911, (unsigned long )(& N), (long long )N);
  __CrestStore(13912, (unsigned long )(& n));
# 146 "../HPL_pdrpancrN.c"
  n = (int )N;
  __CrestLoad(13927, (unsigned long )(& N), (long long )N);
  __CrestLoad(13926, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13925, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(13924, (unsigned long )0, (long long )1);
  __CrestApply2(13923, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(13922, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13921, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(13920, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13919, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(13918, (unsigned long )0, (long long )1);
  __CrestApply2(13917, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(13916, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(13915, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(13914, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(13913, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(13928, (unsigned long )(& jb));
# 147 "../HPL_pdrpancrN.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(13929, (unsigned long )(& jb), (long long )jb);
  __CrestStore(13930, (unsigned long )(& nb));
# 147 "../HPL_pdrpancrN.c"
  nb = jb;
# 149 "../HPL_pdrpancrN.c"
  A = PANEL->A;
  __CrestLoad(13931, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(13932, (unsigned long )(& lda));
# 149 "../HPL_pdrpancrN.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpancrN.c"
  L1 = PANEL->L1;
  __CrestLoad(13933, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(13934, (unsigned long )(& n0));
# 150 "../HPL_pdrpancrN.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpancrN.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpancrN.c"
  mem_26 = PANEL->grid;
  __CrestLoad(13937, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(13936, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(13935, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(13938, (unsigned long )(& curr));
# 152 "../HPL_pdrpancrN.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(13941, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(13940, (unsigned long )0, (long long )0);
  __CrestApply2(13939, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpancrN.c"
  if (curr != 0) {
    __CrestBranch(13942, 5351, 1);
# 154 "../HPL_pdrpancrN.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(13943, 5352, 0);
# 155 "../HPL_pdrpancrN.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpancrN.c"
  while (1) {
    while_continue: ;
    __CrestLoad(13946, (unsigned long )(& n), (long long )n);
    __CrestLoad(13945, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(13944, 1, (long long )(n - jb));
    __CrestStore(13947, (unsigned long )(& n));
# 165 "../HPL_pdrpancrN.c"
    n -= jb;
    __CrestLoad(13950, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(13949, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(13948, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(13951, (unsigned long )(& ioff));
# 165 "../HPL_pdrpancrN.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(13952, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(13953, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13954, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(13955, (unsigned long )(& m), (long long )m);
    __CrestLoad(13956, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13957, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(13958, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(13959, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(13960, (unsigned long )(& lda), (long long )lda);
# 216 "../HPL_pdrpancrN.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                (int const )m, (int const )jb, (int const )jj, (double const )(- 1.0),
                (double const *)((Aptr + ii) + 0), (int const )lda, (double const *)((L1ptr + 0) + jj * n0),
                (int const )n0, (double const )1.0, (Aptr + ii) + jj * lda, (int const )lda);
    __CrestClearStack(13961);
    __CrestLoad(13962, (unsigned long )(& m), (long long )m);
    __CrestLoad(13963, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(13964, (unsigned long )(& ioff), (long long )ioff);
# 221 "../HPL_pdrpancrN.c"
    HPL_pdrpancrN(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(13965);
    {
    __CrestLoad(13968, (unsigned long )(& n), (long long )n);
    __CrestLoad(13967, (unsigned long )0, (long long )0);
    __CrestApply2(13966, 14, (long long )(n > 0));
# 223 "../HPL_pdrpancrN.c"
    if (n > 0) {
      __CrestBranch(13969, 5358, 1);
      __CrestLoad(13971, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(13972, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(13973, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(13974, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(13975, (unsigned long )(& n), (long long )n);
      __CrestLoad(13976, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(13977, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13978, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13979, (unsigned long )(& n0), (long long )n0);
# 258 "../HPL_pdrpancrN.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )jb, (int const )n, (int const )jj, (double const )(- 1.0),
                  (double const *)((L1ptr + jj) + 0), (int const )n0, (double const *)((L1ptr + 0) + (jj + jb) * n0),
                  (int const )n0, (double const )1.0, (L1ptr + jj) + (jj + jb) * n0,
                  (int const )n0);
      __CrestClearStack(13980);
      __CrestLoad(13981, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(13982, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(13983, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(13984, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(13985, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(13986, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(13987, (unsigned long )(& n), (long long )n);
      __CrestLoad(13988, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13989, (unsigned long )(& n0), (long long )n0);
# 263 "../HPL_pdrpancrN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )n, (double const )1.0, (double const *)((L1ptr + jj) + jj * n0),
                  (int const )n0, (L1ptr + jj) + (jj + jb) * n0, (int const )n0);
      __CrestClearStack(13990);
    } else {
      __CrestBranch(13970, 5359, 0);

    }
    }
    {
    __CrestLoad(13993, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(13992, (unsigned long )0, (long long )0);
    __CrestApply2(13991, 13, (long long )(curr != 0));
# 270 "../HPL_pdrpancrN.c"
    if (curr != 0) {
      __CrestBranch(13994, 5361, 1);
      __CrestLoad(13996, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(13997, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(13998, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(13999, (unsigned long )(& lda), (long long )lda);
# 272 "../HPL_pdrpancrN.c"
      HPL_dlacpy((int const )ioff, (int const )jb, (double const *)((L1 + 0) + ioff * n0),
                 (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(14000);
      __CrestLoad(14003, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(14002, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14001, 0, (long long )(ii + jb));
      __CrestStore(14004, (unsigned long )(& ii));
# 274 "../HPL_pdrpancrN.c"
      ii += jb;
      __CrestLoad(14007, (unsigned long )(& m), (long long )m);
      __CrestLoad(14006, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14005, 1, (long long )(m - jb));
      __CrestStore(14008, (unsigned long )(& m));
# 274 "../HPL_pdrpancrN.c"
      m -= jb;
    } else {
      __CrestBranch(13995, 5362, 0);

    }
    }
    __CrestLoad(14011, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(14010, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14009, 0, (long long )(jj + jb));
    __CrestStore(14012, (unsigned long )(& jj));
# 276 "../HPL_pdrpancrN.c"
    jj += jb;
    {
    __CrestLoad(14015, (unsigned long )(& n), (long long )n);
    __CrestLoad(14014, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(14013, 16, (long long )(n < nb));
# 276 "../HPL_pdrpancrN.c"
    if (n < nb) {
      __CrestBranch(14016, 5365, 1);
      __CrestLoad(14018, (unsigned long )(& n), (long long )n);
      __CrestStore(14019, (unsigned long )(& jb));
# 276 "../HPL_pdrpancrN.c"
      jb = n;
    } else {
      __CrestBranch(14017, 5366, 0);
      __CrestLoad(14020, (unsigned long )(& nb), (long long )nb);
      __CrestStore(14021, (unsigned long )(& jb));
# 276 "../HPL_pdrpancrN.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(14024, (unsigned long )(& n), (long long )n);
    __CrestLoad(14023, (unsigned long )0, (long long )0);
    __CrestApply2(14022, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpancrN.c"
    if (n <= 0) {
      __CrestBranch(14025, 5368, 1);
# 163 "../HPL_pdrpancrN.c"
      goto while_break;
    } else {
      __CrestBranch(14026, 5369, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(14027);
# 53 "../HPL_pdrpancrN.c"
  return;
  }
}
}
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdrpancrT.c"
void HPL_pdrpancrT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(14031, 90);
  __CrestStore(14030, (unsigned long )(& ICOFF));
  __CrestStore(14029, (unsigned long )(& N));
  __CrestStore(14028, (unsigned long )(& M));
# 133 "../HPL_pdrpancrT.c"
  mem_22 = PANEL->algo;
  __CrestLoad(14032, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(14033, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpancrT.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(14036, (unsigned long )(& N), (long long )N);
  __CrestLoad(14035, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14034, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpancrT.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(14037, 5375, 1);
# 134 "../HPL_pdrpancrT.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpancrT.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(14039, (unsigned long )(& M), (long long )M);
    __CrestLoad(14040, (unsigned long )(& N), (long long )N);
    __CrestLoad(14041, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpancrT.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(14042);
# 134 "../HPL_pdrpancrT.c"
    goto return_label;
  } else {
    __CrestBranch(14038, 5378, 0);

  }
  }
# 146 "../HPL_pdrpancrT.c"
  mem_25 = PANEL->algo;
  __CrestLoad(14043, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(14044, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpancrT.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(14045, (unsigned long )0, (long long )0);
  __CrestStore(14046, (unsigned long )(& jj));
# 146 "../HPL_pdrpancrT.c"
  jj = 0;
  __CrestLoad(14047, (unsigned long )(& jj), (long long )jj);
  __CrestStore(14048, (unsigned long )(& ii));
# 146 "../HPL_pdrpancrT.c"
  ii = jj;
  __CrestLoad(14049, (unsigned long )(& M), (long long )M);
  __CrestStore(14050, (unsigned long )(& m));
# 146 "../HPL_pdrpancrT.c"
  m = (int )M;
  __CrestLoad(14051, (unsigned long )(& N), (long long )N);
  __CrestStore(14052, (unsigned long )(& n));
# 146 "../HPL_pdrpancrT.c"
  n = (int )N;
  __CrestLoad(14067, (unsigned long )(& N), (long long )N);
  __CrestLoad(14066, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14065, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(14064, (unsigned long )0, (long long )1);
  __CrestApply2(14063, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(14062, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14061, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(14060, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14059, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(14058, (unsigned long )0, (long long )1);
  __CrestApply2(14057, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(14056, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14055, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(14054, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14053, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(14068, (unsigned long )(& jb));
# 147 "../HPL_pdrpancrT.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(14069, (unsigned long )(& jb), (long long )jb);
  __CrestStore(14070, (unsigned long )(& nb));
# 147 "../HPL_pdrpancrT.c"
  nb = jb;
# 149 "../HPL_pdrpancrT.c"
  A = PANEL->A;
  __CrestLoad(14071, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(14072, (unsigned long )(& lda));
# 149 "../HPL_pdrpancrT.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpancrT.c"
  L1 = PANEL->L1;
  __CrestLoad(14073, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14074, (unsigned long )(& n0));
# 150 "../HPL_pdrpancrT.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpancrT.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpancrT.c"
  mem_26 = PANEL->grid;
  __CrestLoad(14077, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(14076, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(14075, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(14078, (unsigned long )(& curr));
# 152 "../HPL_pdrpancrT.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(14081, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(14080, (unsigned long )0, (long long )0);
  __CrestApply2(14079, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpancrT.c"
  if (curr != 0) {
    __CrestBranch(14082, 5381, 1);
# 154 "../HPL_pdrpancrT.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(14083, 5382, 0);
# 155 "../HPL_pdrpancrT.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpancrT.c"
  while (1) {
    while_continue: ;
    __CrestLoad(14086, (unsigned long )(& n), (long long )n);
    __CrestLoad(14085, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14084, 1, (long long )(n - jb));
    __CrestStore(14087, (unsigned long )(& n));
# 165 "../HPL_pdrpancrT.c"
    n -= jb;
    __CrestLoad(14090, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(14089, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(14088, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(14091, (unsigned long )(& ioff));
# 165 "../HPL_pdrpancrT.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(14092, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(14093, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14094, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
    __CrestLoad(14095, (unsigned long )(& m), (long long )m);
    __CrestLoad(14096, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14097, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(14098, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(14099, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(14100, (unsigned long )(& lda), (long long )lda);
# 216 "../HPL_pdrpancrT.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                (int const )m, (int const )jb, (int const )jj, (double const )(- 1.0),
                (double const *)((Aptr + ii) + 0), (int const )lda, (double const *)((L1ptr + jj) + 0),
                (int const )n0, (double const )1.0, (Aptr + ii) + jj * lda, (int const )lda);
    __CrestClearStack(14101);
    __CrestLoad(14102, (unsigned long )(& m), (long long )m);
    __CrestLoad(14103, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14104, (unsigned long )(& ioff), (long long )ioff);
# 221 "../HPL_pdrpancrT.c"
    HPL_pdrpancrT(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(14105);
    {
    __CrestLoad(14108, (unsigned long )(& n), (long long )n);
    __CrestLoad(14107, (unsigned long )0, (long long )0);
    __CrestApply2(14106, 14, (long long )(n > 0));
# 223 "../HPL_pdrpancrT.c"
    if (n > 0) {
      __CrestBranch(14109, 5388, 1);
      __CrestLoad(14111, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(14112, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(14113, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(14114, (unsigned long )(& n), (long long )n);
      __CrestLoad(14115, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(14116, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(14117, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14118, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14119, (unsigned long )(& n0), (long long )n0);
# 258 "../HPL_pdrpancrT.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )n, (int const )jb, (int const )jj, (double const )(- 1.0),
                  (double const *)((L1ptr + (jj + jb)) + 0), (int const )n0, (double const *)((L1ptr + 0) + jj * n0),
                  (int const )n0, (double const )1.0, (L1ptr + (jj + jb)) + jj * n0,
                  (int const )n0);
      __CrestClearStack(14120);
      __CrestLoad(14121, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(14122, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
      __CrestLoad(14123, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(14124, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(14125, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(14126, (unsigned long )(& n), (long long )n);
      __CrestLoad(14127, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(14128, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14129, (unsigned long )(& n0), (long long )n0);
# 263 "../HPL_pdrpancrT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )n,
                  (int const )jb, (double const )1.0, (double const *)((L1ptr + jj) + jj * n0),
                  (int const )n0, (L1ptr + (jj + jb)) + jj * n0, (int const )n0);
      __CrestClearStack(14130);
    } else {
      __CrestBranch(14110, 5389, 0);

    }
    }
    {
    __CrestLoad(14133, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(14132, (unsigned long )0, (long long )0);
    __CrestApply2(14131, 13, (long long )(curr != 0));
# 270 "../HPL_pdrpancrT.c"
    if (curr != 0) {
      __CrestBranch(14134, 5391, 1);
      __CrestLoad(14136, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(14137, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(14138, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14139, (unsigned long )(& lda), (long long )lda);
# 272 "../HPL_pdrpancrT.c"
      HPL_dlatcpy((int const )ioff, (int const )jb, (double const *)((L1 + ioff) + 0),
                  (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(14140);
      __CrestLoad(14143, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(14142, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14141, 0, (long long )(ii + jb));
      __CrestStore(14144, (unsigned long )(& ii));
# 274 "../HPL_pdrpancrT.c"
      ii += jb;
      __CrestLoad(14147, (unsigned long )(& m), (long long )m);
      __CrestLoad(14146, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14145, 1, (long long )(m - jb));
      __CrestStore(14148, (unsigned long )(& m));
# 274 "../HPL_pdrpancrT.c"
      m -= jb;
    } else {
      __CrestBranch(14135, 5392, 0);

    }
    }
    __CrestLoad(14151, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(14150, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14149, 0, (long long )(jj + jb));
    __CrestStore(14152, (unsigned long )(& jj));
# 276 "../HPL_pdrpancrT.c"
    jj += jb;
    {
    __CrestLoad(14155, (unsigned long )(& n), (long long )n);
    __CrestLoad(14154, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(14153, 16, (long long )(n < nb));
# 276 "../HPL_pdrpancrT.c"
    if (n < nb) {
      __CrestBranch(14156, 5395, 1);
      __CrestLoad(14158, (unsigned long )(& n), (long long )n);
      __CrestStore(14159, (unsigned long )(& jb));
# 276 "../HPL_pdrpancrT.c"
      jb = n;
    } else {
      __CrestBranch(14157, 5396, 0);
      __CrestLoad(14160, (unsigned long )(& nb), (long long )nb);
      __CrestStore(14161, (unsigned long )(& jb));
# 276 "../HPL_pdrpancrT.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(14164, (unsigned long )(& n), (long long )n);
    __CrestLoad(14163, (unsigned long )0, (long long )0);
    __CrestApply2(14162, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpancrT.c"
    if (n <= 0) {
      __CrestBranch(14165, 5398, 1);
# 163 "../HPL_pdrpancrT.c"
      goto while_break;
    } else {
      __CrestBranch(14166, 5399, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(14167);
# 53 "../HPL_pdrpancrT.c"
  return;
  }
}
}
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdrpanrlN.c"
void HPL_pdrpanrlN(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(14171, 91);
  __CrestStore(14170, (unsigned long )(& ICOFF));
  __CrestStore(14169, (unsigned long )(& N));
  __CrestStore(14168, (unsigned long )(& M));
# 133 "../HPL_pdrpanrlN.c"
  mem_22 = PANEL->algo;
  __CrestLoad(14172, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(14173, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpanrlN.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(14176, (unsigned long )(& N), (long long )N);
  __CrestLoad(14175, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14174, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpanrlN.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(14177, 5405, 1);
# 134 "../HPL_pdrpanrlN.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpanrlN.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(14179, (unsigned long )(& M), (long long )M);
    __CrestLoad(14180, (unsigned long )(& N), (long long )N);
    __CrestLoad(14181, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpanrlN.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(14182);
# 134 "../HPL_pdrpanrlN.c"
    goto return_label;
  } else {
    __CrestBranch(14178, 5408, 0);

  }
  }
# 146 "../HPL_pdrpanrlN.c"
  mem_25 = PANEL->algo;
  __CrestLoad(14183, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(14184, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpanrlN.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(14185, (unsigned long )0, (long long )0);
  __CrestStore(14186, (unsigned long )(& jj));
# 146 "../HPL_pdrpanrlN.c"
  jj = 0;
  __CrestLoad(14187, (unsigned long )(& jj), (long long )jj);
  __CrestStore(14188, (unsigned long )(& ii));
# 146 "../HPL_pdrpanrlN.c"
  ii = jj;
  __CrestLoad(14189, (unsigned long )(& M), (long long )M);
  __CrestStore(14190, (unsigned long )(& m));
# 146 "../HPL_pdrpanrlN.c"
  m = (int )M;
  __CrestLoad(14191, (unsigned long )(& N), (long long )N);
  __CrestStore(14192, (unsigned long )(& n));
# 146 "../HPL_pdrpanrlN.c"
  n = (int )N;
  __CrestLoad(14207, (unsigned long )(& N), (long long )N);
  __CrestLoad(14206, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14205, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(14204, (unsigned long )0, (long long )1);
  __CrestApply2(14203, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(14202, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14201, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(14200, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14199, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(14198, (unsigned long )0, (long long )1);
  __CrestApply2(14197, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(14196, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14195, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(14194, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14193, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(14208, (unsigned long )(& jb));
# 147 "../HPL_pdrpanrlN.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(14209, (unsigned long )(& jb), (long long )jb);
  __CrestStore(14210, (unsigned long )(& nb));
# 147 "../HPL_pdrpanrlN.c"
  nb = jb;
# 149 "../HPL_pdrpanrlN.c"
  A = PANEL->A;
  __CrestLoad(14211, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(14212, (unsigned long )(& lda));
# 149 "../HPL_pdrpanrlN.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpanrlN.c"
  L1 = PANEL->L1;
  __CrestLoad(14213, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14214, (unsigned long )(& n0));
# 150 "../HPL_pdrpanrlN.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpanrlN.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpanrlN.c"
  mem_26 = PANEL->grid;
  __CrestLoad(14217, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(14216, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(14215, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(14218, (unsigned long )(& curr));
# 152 "../HPL_pdrpanrlN.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(14221, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(14220, (unsigned long )0, (long long )0);
  __CrestApply2(14219, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpanrlN.c"
  if (curr != 0) {
    __CrestBranch(14222, 5411, 1);
# 154 "../HPL_pdrpanrlN.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(14223, 5412, 0);
# 155 "../HPL_pdrpanrlN.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpanrlN.c"
  while (1) {
    while_continue: ;
    __CrestLoad(14226, (unsigned long )(& n), (long long )n);
    __CrestLoad(14225, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14224, 1, (long long )(n - jb));
    __CrestStore(14227, (unsigned long )(& n));
# 165 "../HPL_pdrpanrlN.c"
    n -= jb;
    __CrestLoad(14230, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(14229, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(14228, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(14231, (unsigned long )(& ioff));
# 165 "../HPL_pdrpanrlN.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(14232, (unsigned long )(& m), (long long )m);
    __CrestLoad(14233, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14234, (unsigned long )(& ioff), (long long )ioff);
# 169 "../HPL_pdrpanrlN.c"
    HPL_pdrpanrlN(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(14235);
    __CrestLoad(14236, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(14237, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
    __CrestLoad(14238, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
    __CrestLoad(14239, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14240, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(14241, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14242, (unsigned long )(& n), (long long )n);
    __CrestLoad(14243, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(14244, (unsigned long )(& n0), (long long )n0);
# 170 "../HPL_pdrpanrlN.c"
    cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                (int const )n, (double const )1.0, (double const *)((L1ptr + jj) + jj * n0),
                (int const )n0, (L1ptr + jj) + (jj + jb) * n0, (int const )n0);
    __CrestClearStack(14245);
    {
    __CrestLoad(14248, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(14247, (unsigned long )0, (long long )0);
    __CrestApply2(14246, 13, (long long )(curr != 0));
# 173 "../HPL_pdrpanrlN.c"
    if (curr != 0) {
      __CrestBranch(14249, 5418, 1);
      __CrestLoad(14253, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(14252, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14251, 0, (long long )(ii + jb));
      __CrestStore(14254, (unsigned long )(& ii));
# 173 "../HPL_pdrpanrlN.c"
      ii += jb;
      __CrestLoad(14257, (unsigned long )(& m), (long long )m);
      __CrestLoad(14256, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14255, 1, (long long )(m - jb));
      __CrestStore(14258, (unsigned long )(& m));
# 173 "../HPL_pdrpanrlN.c"
      m -= jb;
    } else {
      __CrestBranch(14250, 5419, 0);

    }
    }
    __CrestLoad(14259, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(14260, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14261, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14262, (unsigned long )(& m), (long long )m);
    __CrestLoad(14263, (unsigned long )(& n), (long long )n);
    __CrestLoad(14264, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14265, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(14266, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(14267, (unsigned long )(& lda), (long long )lda);
# 221 "../HPL_pdrpanrlN.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                (int const )m, (int const )n, (int const )jb, (double const )(- 1.0),
                (double const *)((Aptr + ii) + jj * lda), (int const )lda, (double const *)((L1ptr + jj) + (jj + jb) * n0),
                (int const )n0, (double const )1.0, (Aptr + ii) + (jj + jb) * lda,
                (int const )lda);
    __CrestClearStack(14268);
    {
    __CrestLoad(14271, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(14270, (unsigned long )0, (long long )0);
    __CrestApply2(14269, 13, (long long )(curr != 0));
# 229 "../HPL_pdrpanrlN.c"
    if (curr != 0) {
      __CrestBranch(14272, 5422, 1);
      __CrestLoad(14274, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(14275, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(14276, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14277, (unsigned long )(& lda), (long long )lda);
# 231 "../HPL_pdrpanrlN.c"
      HPL_dlacpy((int const )ioff, (int const )jb, (double const *)((L1 + 0) + ioff * n0),
                 (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(14278);
    } else {
      __CrestBranch(14273, 5423, 0);

    }
    }
    __CrestLoad(14281, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(14280, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14279, 0, (long long )(jj + jb));
    __CrestStore(14282, (unsigned long )(& jj));
# 234 "../HPL_pdrpanrlN.c"
    jj += jb;
    {
    __CrestLoad(14285, (unsigned long )(& n), (long long )n);
    __CrestLoad(14284, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(14283, 16, (long long )(n < nb));
# 234 "../HPL_pdrpanrlN.c"
    if (n < nb) {
      __CrestBranch(14286, 5426, 1);
      __CrestLoad(14288, (unsigned long )(& n), (long long )n);
      __CrestStore(14289, (unsigned long )(& jb));
# 234 "../HPL_pdrpanrlN.c"
      jb = n;
    } else {
      __CrestBranch(14287, 5427, 0);
      __CrestLoad(14290, (unsigned long )(& nb), (long long )nb);
      __CrestStore(14291, (unsigned long )(& jb));
# 234 "../HPL_pdrpanrlN.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(14294, (unsigned long )(& n), (long long )n);
    __CrestLoad(14293, (unsigned long )0, (long long )0);
    __CrestApply2(14292, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpanrlN.c"
    if (n <= 0) {
      __CrestBranch(14295, 5429, 1);
# 163 "../HPL_pdrpanrlN.c"
      goto while_break;
    } else {
      __CrestBranch(14296, 5430, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(14297);
# 53 "../HPL_pdrpanrlN.c"
  return;
  }
}
}
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdrpanrlT.c"
void HPL_pdrpanrlT(HPL_T_panel *PANEL , int const M , int const N , int const ICOFF ,
                   double *WORK )
{
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;
  struct HPL_S_palg *mem_22 ;
  struct HPL_S_palg *mem_23 ;
  void (*mem_24)(HPL_T_panel * , int const , int const , int const , double * ) ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;

  {
  __CrestCall(14301, 92);
  __CrestStore(14300, (unsigned long )(& ICOFF));
  __CrestStore(14299, (unsigned long )(& N));
  __CrestStore(14298, (unsigned long )(& M));
# 133 "../HPL_pdrpanrlT.c"
  mem_22 = PANEL->algo;
  __CrestLoad(14302, (unsigned long )(& mem_22->nbmin), (long long )mem_22->nbmin);
  __CrestStore(14303, (unsigned long )(& nbmin));
# 133 "../HPL_pdrpanrlT.c"
  nbmin = mem_22->nbmin;
  {
  __CrestLoad(14306, (unsigned long )(& N), (long long )N);
  __CrestLoad(14305, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14304, 15, (long long )(N <= (int const )nbmin));
# 133 "../HPL_pdrpanrlT.c"
  if (N <= (int const )nbmin) {
    __CrestBranch(14307, 5436, 1);
# 134 "../HPL_pdrpanrlT.c"
    mem_23 = PANEL->algo;
# 134 "../HPL_pdrpanrlT.c"
    mem_24 = mem_23->pffun;
    __CrestLoad(14309, (unsigned long )(& M), (long long )M);
    __CrestLoad(14310, (unsigned long )(& N), (long long )N);
    __CrestLoad(14311, (unsigned long )(& ICOFF), (long long )ICOFF);
# 134 "../HPL_pdrpanrlT.c"
    (*mem_24)(PANEL, M, N, ICOFF, WORK);
    __CrestClearStack(14312);
# 134 "../HPL_pdrpanrlT.c"
    goto return_label;
  } else {
    __CrestBranch(14308, 5439, 0);

  }
  }
# 146 "../HPL_pdrpanrlT.c"
  mem_25 = PANEL->algo;
  __CrestLoad(14313, (unsigned long )(& mem_25->nbdiv), (long long )mem_25->nbdiv);
  __CrestStore(14314, (unsigned long )(& nbdiv));
# 146 "../HPL_pdrpanrlT.c"
  nbdiv = mem_25->nbdiv;
  __CrestLoad(14315, (unsigned long )0, (long long )0);
  __CrestStore(14316, (unsigned long )(& jj));
# 146 "../HPL_pdrpanrlT.c"
  jj = 0;
  __CrestLoad(14317, (unsigned long )(& jj), (long long )jj);
  __CrestStore(14318, (unsigned long )(& ii));
# 146 "../HPL_pdrpanrlT.c"
  ii = jj;
  __CrestLoad(14319, (unsigned long )(& M), (long long )M);
  __CrestStore(14320, (unsigned long )(& m));
# 146 "../HPL_pdrpanrlT.c"
  m = (int )M;
  __CrestLoad(14321, (unsigned long )(& N), (long long )N);
  __CrestStore(14322, (unsigned long )(& n));
# 146 "../HPL_pdrpanrlT.c"
  n = (int )N;
  __CrestLoad(14337, (unsigned long )(& N), (long long )N);
  __CrestLoad(14336, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14335, 0, (long long )(N + (int const )nbmin));
  __CrestLoad(14334, (unsigned long )0, (long long )1);
  __CrestApply2(14333, 1, (long long )((N + (int const )nbmin) - 1));
  __CrestLoad(14332, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14331, 3, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin));
  __CrestLoad(14330, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14329, 0, (long long )(((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv));
  __CrestLoad(14328, (unsigned long )0, (long long )1);
  __CrestApply2(14327, 1, (long long )((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1));
  __CrestLoad(14326, (unsigned long )(& nbdiv), (long long )nbdiv);
  __CrestApply2(14325, 3, (long long )(((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv));
  __CrestLoad(14324, (unsigned long )(& nbmin), (long long )nbmin);
  __CrestApply2(14323, 2, (long long )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin));
  __CrestStore(14338, (unsigned long )(& jb));
# 147 "../HPL_pdrpanrlT.c"
  jb = (int )((((((N + (int const )nbmin) - 1) / (int const )nbmin + (int const )nbdiv) - 1) / (int const )nbdiv) * (int const )nbmin);
  __CrestLoad(14339, (unsigned long )(& jb), (long long )jb);
  __CrestStore(14340, (unsigned long )(& nb));
# 147 "../HPL_pdrpanrlT.c"
  nb = jb;
# 149 "../HPL_pdrpanrlT.c"
  A = PANEL->A;
  __CrestLoad(14341, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(14342, (unsigned long )(& lda));
# 149 "../HPL_pdrpanrlT.c"
  lda = PANEL->lda;
# 150 "../HPL_pdrpanrlT.c"
  L1 = PANEL->L1;
  __CrestLoad(14343, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14344, (unsigned long )(& n0));
# 150 "../HPL_pdrpanrlT.c"
  n0 = PANEL->jb;
# 151 "../HPL_pdrpanrlT.c"
  L1ptr = (L1 + ICOFF) + ICOFF * (int const )n0;
# 152 "../HPL_pdrpanrlT.c"
  mem_26 = PANEL->grid;
  __CrestLoad(14347, (unsigned long )(& mem_26->myrow), (long long )mem_26->myrow);
  __CrestLoad(14346, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestApply2(14345, 12, (long long )(mem_26->myrow == PANEL->prow));
  __CrestStore(14348, (unsigned long )(& curr));
# 152 "../HPL_pdrpanrlT.c"
  curr = mem_26->myrow == PANEL->prow;
  {
  __CrestLoad(14351, (unsigned long )(& curr), (long long )curr);
  __CrestLoad(14350, (unsigned long )0, (long long )0);
  __CrestApply2(14349, 13, (long long )(curr != 0));
# 154 "../HPL_pdrpanrlT.c"
  if (curr != 0) {
    __CrestBranch(14352, 5442, 1);
# 154 "../HPL_pdrpanrlT.c"
    Aptr = (A + ICOFF) + ICOFF * (int const )lda;
  } else {
    __CrestBranch(14353, 5443, 0);
# 155 "../HPL_pdrpanrlT.c"
    Aptr = (A + 0) + ICOFF * (int const )lda;
  }
  }
  {
# 163 "../HPL_pdrpanrlT.c"
  while (1) {
    while_continue: ;
    __CrestLoad(14356, (unsigned long )(& n), (long long )n);
    __CrestLoad(14355, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14354, 1, (long long )(n - jb));
    __CrestStore(14357, (unsigned long )(& n));
# 165 "../HPL_pdrpanrlT.c"
    n -= jb;
    __CrestLoad(14360, (unsigned long )(& ICOFF), (long long )ICOFF);
    __CrestLoad(14359, (unsigned long )(& jj), (long long )jj);
    __CrestApply2(14358, 0, (long long )(ICOFF + (int const )jj));
    __CrestStore(14361, (unsigned long )(& ioff));
# 165 "../HPL_pdrpanrlT.c"
    ioff = (int )(ICOFF + (int const )jj);
    __CrestLoad(14362, (unsigned long )(& m), (long long )m);
    __CrestLoad(14363, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14364, (unsigned long )(& ioff), (long long )ioff);
# 169 "../HPL_pdrpanrlT.c"
    HPL_pdrpanrlT(PANEL, (int const )m, (int const )jb, (int const )ioff, WORK);
    __CrestClearStack(14365);
    __CrestLoad(14366, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(14367, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
    __CrestLoad(14368, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
    __CrestLoad(14369, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14370, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
    __CrestLoad(14371, (unsigned long )(& n), (long long )n);
    __CrestLoad(14372, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14373, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(14374, (unsigned long )(& n0), (long long )n0);
# 170 "../HPL_pdrpanrlT.c"
    cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )121,
                (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )n,
                (int const )jb, (double const )1.0, (double const *)((L1ptr + jj) + jj * n0),
                (int const )n0, (L1ptr + (jj + jb)) + jj * n0, (int const )n0);
    __CrestClearStack(14375);
    {
    __CrestLoad(14378, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(14377, (unsigned long )0, (long long )0);
    __CrestApply2(14376, 13, (long long )(curr != 0));
# 173 "../HPL_pdrpanrlT.c"
    if (curr != 0) {
      __CrestBranch(14379, 5449, 1);
      __CrestLoad(14383, (unsigned long )(& ii), (long long )ii);
      __CrestLoad(14382, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14381, 0, (long long )(ii + jb));
      __CrestStore(14384, (unsigned long )(& ii));
# 173 "../HPL_pdrpanrlT.c"
      ii += jb;
      __CrestLoad(14387, (unsigned long )(& m), (long long )m);
      __CrestLoad(14386, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(14385, 1, (long long )(m - jb));
      __CrestStore(14388, (unsigned long )(& m));
# 173 "../HPL_pdrpanrlT.c"
      m -= jb;
    } else {
      __CrestBranch(14380, 5450, 0);

    }
    }
    __CrestLoad(14389, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
    __CrestLoad(14390, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(14391, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
    __CrestLoad(14392, (unsigned long )(& m), (long long )m);
    __CrestLoad(14393, (unsigned long )(& n), (long long )n);
    __CrestLoad(14394, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14395, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(14396, (unsigned long )(& n0), (long long )n0);
    __CrestLoad(14397, (unsigned long )(& lda), (long long )lda);
# 221 "../HPL_pdrpanrlT.c"
    cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                (int const )m, (int const )n, (int const )jb, (double const )(- 1.0),
                (double const *)((Aptr + ii) + jj * lda), (int const )lda, (double const *)((L1ptr + (jj + jb)) + jj * n0),
                (int const )n0, (double const )1.0, (Aptr + ii) + (jj + jb) * lda,
                (int const )lda);
    __CrestClearStack(14398);
    {
    __CrestLoad(14401, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(14400, (unsigned long )0, (long long )0);
    __CrestApply2(14399, 13, (long long )(curr != 0));
# 229 "../HPL_pdrpanrlT.c"
    if (curr != 0) {
      __CrestBranch(14402, 5453, 1);
      __CrestLoad(14404, (unsigned long )(& ioff), (long long )ioff);
      __CrestLoad(14405, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(14406, (unsigned long )(& n0), (long long )n0);
      __CrestLoad(14407, (unsigned long )(& lda), (long long )lda);
# 231 "../HPL_pdrpanrlT.c"
      HPL_dlatcpy((int const )ioff, (int const )jb, (double const *)((L1 + ioff) + 0),
                  (int const )n0, (A + 0) + ioff * lda, (int const )lda);
      __CrestClearStack(14408);
    } else {
      __CrestBranch(14403, 5454, 0);

    }
    }
    __CrestLoad(14411, (unsigned long )(& jj), (long long )jj);
    __CrestLoad(14410, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14409, 0, (long long )(jj + jb));
    __CrestStore(14412, (unsigned long )(& jj));
# 234 "../HPL_pdrpanrlT.c"
    jj += jb;
    {
    __CrestLoad(14415, (unsigned long )(& n), (long long )n);
    __CrestLoad(14414, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(14413, 16, (long long )(n < nb));
# 234 "../HPL_pdrpanrlT.c"
    if (n < nb) {
      __CrestBranch(14416, 5457, 1);
      __CrestLoad(14418, (unsigned long )(& n), (long long )n);
      __CrestStore(14419, (unsigned long )(& jb));
# 234 "../HPL_pdrpanrlT.c"
      jb = n;
    } else {
      __CrestBranch(14417, 5458, 0);
      __CrestLoad(14420, (unsigned long )(& nb), (long long )nb);
      __CrestStore(14421, (unsigned long )(& jb));
# 234 "../HPL_pdrpanrlT.c"
      jb = nb;
    }
    }
    {
    __CrestLoad(14424, (unsigned long )(& n), (long long )n);
    __CrestLoad(14423, (unsigned long )0, (long long )0);
    __CrestApply2(14422, 15, (long long )(n <= 0));
# 163 "../HPL_pdrpanrlT.c"
    if (n <= 0) {
      __CrestBranch(14425, 5460, 1);
# 163 "../HPL_pdrpanrlT.c"
      goto while_break;
    } else {
      __CrestBranch(14426, 5461, 0);

    }
    }
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(14427);
# 53 "../HPL_pdrpanrlT.c"
  return;
  }
}
}
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 208 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdfact(HPL_T_panel *PANEL ) ;
# 53 "../HPL_pdfact.c"
void HPL_pdfact(HPL_T_panel *PANEL )
{
  void *vptr ;
  int align ;
  int jb ;
  void *tmp ;
  struct HPL_S_grid *mem_6 ;
  struct HPL_S_palg *mem_7 ;
  struct HPL_S_palg *mem_8 ;
  void (*mem_9)(HPL_T_panel * , int const , int const , int const , double * ) ;

  {
  __CrestCall(14428, 93);
# 109 "../HPL_pdfact.c"
  vptr = (void *)0;
  __CrestLoad(14429, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14430, (unsigned long )(& jb));
# 114 "../HPL_pdfact.c"
  jb = PANEL->jb;
  __CrestLoad(14433, (unsigned long )(& PANEL->n), (long long )PANEL->n);
  __CrestLoad(14432, (unsigned long )(& jb), (long long )jb);
  __CrestApply2(14431, 1, (long long )(PANEL->n - jb));
  __CrestStore(14434, (unsigned long )(& PANEL->n));
# 114 "../HPL_pdfact.c"
  PANEL->n -= jb;
  __CrestLoad(14437, (unsigned long )(& PANEL->ja), (long long )PANEL->ja);
  __CrestLoad(14436, (unsigned long )(& jb), (long long )jb);
  __CrestApply2(14435, 0, (long long )(PANEL->ja + jb));
  __CrestStore(14438, (unsigned long )(& PANEL->ja));
# 114 "../HPL_pdfact.c"
  PANEL->ja += jb;
  {
# 116 "../HPL_pdfact.c"
  mem_6 = PANEL->grid;
  {
  __CrestLoad(14441, (unsigned long )(& mem_6->mycol), (long long )mem_6->mycol);
  __CrestLoad(14440, (unsigned long )(& PANEL->pcol), (long long )PANEL->pcol);
  __CrestApply2(14439, 13, (long long )(mem_6->mycol != PANEL->pcol));
# 116 "../HPL_pdfact.c"
  if (mem_6->mycol != PANEL->pcol) {
    __CrestBranch(14442, 5469, 1);
# 116 "../HPL_pdfact.c"
    goto return_label;
  } else {
    __CrestBranch(14443, 5471, 0);
    {
    __CrestLoad(14446, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14445, (unsigned long )0, (long long )0);
    __CrestApply2(14444, 15, (long long )(jb <= 0));
# 116 "../HPL_pdfact.c"
    if (jb <= 0) {
      __CrestBranch(14447, 5472, 1);
# 116 "../HPL_pdfact.c"
      goto return_label;
    } else {
      __CrestBranch(14448, 5474, 0);

    }
    }
  }
  }
  }
# 120 "../HPL_pdfact.c"
  mem_7 = PANEL->algo;
  __CrestLoad(14449, (unsigned long )(& mem_7->align), (long long )mem_7->align);
  __CrestStore(14450, (unsigned long )(& align));
# 120 "../HPL_pdfact.c"
  align = mem_7->align;
  __CrestLoad(14461, (unsigned long )(& align), (long long )align);
  __CrestLoad(14460, (unsigned long )0, (long long )4U);
  __CrestLoad(14459, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(14458, (unsigned long )0, (long long )1);
  __CrestApply2(14457, 8, (long long )((unsigned int )jb << 1));
  __CrestApply2(14456, 0, (long long )(4U + ((unsigned int )jb << 1)));
  __CrestLoad(14455, (unsigned long )0, (long long )1);
  __CrestApply2(14454, 8, (long long )((4U + ((unsigned int )jb << 1)) << 1));
  __CrestApply2(14453, 0, (long long )((unsigned int )align + ((4U + ((unsigned int )jb << 1)) << 1)));
  __CrestLoad(14452, (unsigned long )0, (long long )sizeof(double ));
  __CrestApply2(14451, 2, (long long )((unsigned long )((unsigned int )align + ((4U + ((unsigned int )jb << 1)) << 1)) * sizeof(double )));
# 121 "../HPL_pdfact.c"
  tmp = malloc((unsigned long )((unsigned int )align + ((4U + ((unsigned int )jb << 1)) << 1)) * sizeof(double ));
  __CrestClearStack(14462);
# 121 "../HPL_pdfact.c"
  vptr = tmp;
  {
  __CrestLoad(14465, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(14464, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(14463, 12, (long long )((unsigned long )vptr == (unsigned long )((void *)0)));
# 124 "../HPL_pdfact.c"
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
    __CrestBranch(14466, 5477, 1);
    __CrestLoad(14468, (unsigned long )0, (long long )125);
# 125 "../HPL_pdfact.c"
    HPL_pabort(125, "HPL_pdfact", "Memory allocation failed");
    __CrestClearStack(14469);
  } else {
    __CrestBranch(14467, 5478, 0);

  }
  }
# 129 "../HPL_pdfact.c"
  mem_8 = PANEL->algo;
# 129 "../HPL_pdfact.c"
  mem_9 = mem_8->rffun;
  __CrestLoad(14470, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
  __CrestLoad(14471, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(14472, (unsigned long )0, (long long )((int const )0));
# 129 "../HPL_pdfact.c"
  (*mem_9)(PANEL, (int const )PANEL->mp, (int const )jb, (int const )0, (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double ))));
  __CrestClearStack(14473);
  {
  __CrestLoad(14476, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(14475, (unsigned long )0, (long long )0);
  __CrestApply2(14474, 13, (long long )(vptr != 0));
# 131 "../HPL_pdfact.c"
  if (vptr != 0) {
    __CrestBranch(14477, 5481, 1);
# 131 "../HPL_pdfact.c"
    free(vptr);
    __CrestClearStack(14479);
  } else {
    __CrestBranch(14478, 5482, 0);

  }
  }
# 133 "../HPL_pdfact.c"
  PANEL->A = (PANEL->A + 0) + jb * PANEL->lda;
  __CrestLoad(14482, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestLoad(14481, (unsigned long )(& jb), (long long )jb);
  __CrestApply2(14480, 1, (long long )(PANEL->nq - jb));
  __CrestStore(14483, (unsigned long )(& PANEL->nq));
# 134 "../HPL_pdfact.c"
  PANEL->nq -= jb;
  __CrestLoad(14486, (unsigned long )(& PANEL->jj), (long long )PANEL->jj);
  __CrestLoad(14485, (unsigned long )(& jb), (long long )jb);
  __CrestApply2(14484, 0, (long long )(PANEL->jj + jb));
  __CrestStore(14487, (unsigned long )(& PANEL->jj));
# 134 "../HPL_pdfact.c"
  PANEL->jj += jb;

  return_label:
  {
  __CrestReturn(14488);
# 53 "../HPL_pdfact.c"
  return;
  }
}
}
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 134 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pipid(HPL_T_panel *PANEL , int *K , int *IPID ) ;
# 53 "../HPL_pipid.c"
void HPL_pipid(HPL_T_panel *PANEL , int *K , int *IPID )
{
  int dst ;
  int fndd ;
  int fnds ;
  int ia ;
  int i ;
  int j ;
  int jb ;
  int lst ;
  int off ;
  int src ;
  double *dpiv ;
  double *mem_15 ;
  int *mem_16 ;
  int *mem_17 ;
  int *mem_18 ;
  int *mem_19 ;
  double *mem_20 ;
  int *mem_21 ;
  int *mem_22 ;
  int *mem_23 ;
  int *mem_24 ;
  int *mem_25 ;
  int *mem_26 ;
  int *mem_27 ;
  int *mem_28 ;
  int *mem_29 ;
  int *mem_30 ;
  int *mem_31 ;
  int *mem_32 ;
  int *mem_33 ;
  int *mem_34 ;
  int *mem_35 ;
  int *mem_36 ;
  int *mem_37 ;
  int *mem_38 ;

  {
  __CrestCall(14489, 94);
# 142 "../HPL_pipid.c"
  dpiv = PANEL->DPIV;
  __CrestLoad(14490, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14491, (unsigned long )(& jb));
# 142 "../HPL_pipid.c"
  jb = PANEL->jb;
  __CrestLoad(14492, (unsigned long )(& PANEL->ia), (long long )PANEL->ia);
  __CrestStore(14493, (unsigned long )(& ia));
# 142 "../HPL_pipid.c"
  ia = PANEL->ia;
  __CrestLoad(14494, (unsigned long )(& ia), (long long )ia);
  __CrestStore(14495, (unsigned long )(& src));
# 142 "../HPL_pipid.c"
  src = ia;
# 143 "../HPL_pipid.c"
  mem_15 = dpiv + 0;
  __CrestLoad(14496, (unsigned long )mem_15, (long long )*mem_15);
  __CrestStore(14497, (unsigned long )(& dst));
# 143 "../HPL_pipid.c"
  dst = (int )*mem_15;
# 143 "../HPL_pipid.c"
  mem_16 = IPID + 0;
  __CrestLoad(14498, (unsigned long )(& dst), (long long )dst);
  __CrestStore(14499, (unsigned long )mem_16);
# 143 "../HPL_pipid.c"
  *mem_16 = dst;
# 143 "../HPL_pipid.c"
  mem_17 = IPID + 1;
  __CrestLoad(14500, (unsigned long )(& src), (long long )src);
  __CrestStore(14501, (unsigned long )mem_17);
# 143 "../HPL_pipid.c"
  *mem_17 = src;
  __CrestLoad(14502, (unsigned long )0, (long long )2);
  __CrestStore(14503, (unsigned long )K);
# 143 "../HPL_pipid.c"
  *K = 2;
  {
  __CrestLoad(14506, (unsigned long )(& src), (long long )src);
  __CrestLoad(14505, (unsigned long )(& dst), (long long )dst);
  __CrestApply2(14504, 13, (long long )(src != dst));
# 144 "../HPL_pipid.c"
  if (src != dst) {
    __CrestBranch(14507, 5488, 1);
# 144 "../HPL_pipid.c"
    mem_18 = IPID + 2;
    __CrestLoad(14509, (unsigned long )(& src), (long long )src);
    __CrestStore(14510, (unsigned long )mem_18);
# 144 "../HPL_pipid.c"
    *mem_18 = src;
# 144 "../HPL_pipid.c"
    mem_19 = IPID + 3;
    __CrestLoad(14511, (unsigned long )(& dst), (long long )dst);
    __CrestStore(14512, (unsigned long )mem_19);
# 144 "../HPL_pipid.c"
    *mem_19 = dst;
    __CrestLoad(14515, (unsigned long )K, (long long )*K);
    __CrestLoad(14514, (unsigned long )0, (long long )2);
    __CrestApply2(14513, 0, (long long )(*K + 2));
    __CrestStore(14516, (unsigned long )K);
# 144 "../HPL_pipid.c"
    *K += 2;
  } else {
    __CrestBranch(14508, 5489, 0);

  }
  }
  __CrestLoad(14517, (unsigned long )0, (long long )1);
  __CrestStore(14518, (unsigned long )(& i));
# 146 "../HPL_pipid.c"
  i = 1;
  {
# 146 "../HPL_pipid.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(14521, (unsigned long )(& i), (long long )i);
    __CrestLoad(14520, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(14519, 16, (long long )(i < jb));
# 146 "../HPL_pipid.c"
    if (i < jb) {
      __CrestBranch(14522, 5495, 1);

    } else {
      __CrestBranch(14523, 5496, 0);
# 146 "../HPL_pipid.c"
      goto while_break;
    }
    }
    __CrestLoad(14524, (unsigned long )0, (long long )0);
    __CrestStore(14525, (unsigned long )(& fnds));
# 148 "../HPL_pipid.c"
    fnds = 0;
    __CrestLoad(14526, (unsigned long )0, (long long )1);
    __CrestStore(14527, (unsigned long )(& j));
# 148 "../HPL_pipid.c"
    j = 1;
    __CrestLoad(14530, (unsigned long )(& ia), (long long )ia);
    __CrestLoad(14529, (unsigned long )(& i), (long long )i);
    __CrestApply2(14528, 0, (long long )(ia + i));
    __CrestStore(14531, (unsigned long )(& src));
# 150 "../HPL_pipid.c"
    src = ia + i;
# 150 "../HPL_pipid.c"
    mem_20 = dpiv + i;
    __CrestLoad(14532, (unsigned long )mem_20, (long long )*mem_20);
    __CrestStore(14533, (unsigned long )(& dst));
# 150 "../HPL_pipid.c"
    dst = (int )*mem_20;
    {
    __CrestLoad(14536, (unsigned long )(& src), (long long )src);
    __CrestLoad(14535, (unsigned long )(& dst), (long long )dst);
    __CrestApply2(14534, 12, (long long )(src == dst));
# 150 "../HPL_pipid.c"
    if (src == dst) {
      __CrestBranch(14537, 5499, 1);
      {
# 152 "../HPL_pipid.c"
      while (1) {
        while_continue___0: ;
        {
# 152 "../HPL_pipid.c"
        mem_21 = IPID + j;
        {
        __CrestLoad(14541, (unsigned long )(& src), (long long )src);
        __CrestLoad(14540, (unsigned long )mem_21, (long long )*mem_21);
        __CrestApply2(14539, 12, (long long )(src == *mem_21));
# 152 "../HPL_pipid.c"
        if (src == *mem_21) {
          __CrestBranch(14542, 5505, 1);
          __CrestLoad(14544, (unsigned long )(& j), (long long )j);
          __CrestStore(14545, (unsigned long )(& fnds));
# 152 "../HPL_pipid.c"
          fnds = j;
        } else {
          __CrestBranch(14543, 5506, 0);
          __CrestLoad(14548, (unsigned long )(& j), (long long )j);
          __CrestLoad(14547, (unsigned long )0, (long long )2);
          __CrestApply2(14546, 0, (long long )(j + 2));
          __CrestStore(14549, (unsigned long )(& j));
# 152 "../HPL_pipid.c"
          j += 2;
        }
        }
        }
        {
        __CrestLoad(14552, (unsigned long )(& fnds), (long long )fnds);
        __CrestLoad(14551, (unsigned long )0, (long long )0);
        __CrestApply2(14550, 12, (long long )(fnds == 0));
# 152 "../HPL_pipid.c"
        if (fnds == 0) {
          __CrestBranch(14553, 5508, 1);
          {
          __CrestLoad(14557, (unsigned long )(& j), (long long )j);
          __CrestLoad(14556, (unsigned long )K, (long long )*K);
          __CrestApply2(14555, 17, (long long )(j >= *K));
# 152 "../HPL_pipid.c"
          if (j >= *K) {
            __CrestBranch(14558, 5509, 1);
# 152 "../HPL_pipid.c"
            goto while_break___0;
          } else {
            __CrestBranch(14559, 5510, 0);

          }
          }
        } else {
          __CrestBranch(14554, 5511, 0);
# 152 "../HPL_pipid.c"
          goto while_break___0;
        }
        }
      }
      while_break___0: ;
      }
      {
      __CrestLoad(14562, (unsigned long )(& fnds), (long long )fnds);
      __CrestLoad(14561, (unsigned long )0, (long long )0);
      __CrestApply2(14560, 12, (long long )(fnds == 0));
# 154 "../HPL_pipid.c"
      if (fnds == 0) {
        __CrestBranch(14563, 5514, 1);
        __CrestLoad(14565, (unsigned long )K, (long long )*K);
        __CrestStore(14566, (unsigned long )(& lst));
# 154 "../HPL_pipid.c"
        lst = *K;
        __CrestLoad(14567, (unsigned long )0, (long long )2);
        __CrestStore(14568, (unsigned long )(& off));
# 154 "../HPL_pipid.c"
        off = 2;
# 154 "../HPL_pipid.c"
        mem_22 = IPID + lst;
        __CrestLoad(14569, (unsigned long )(& src), (long long )src);
        __CrestStore(14570, (unsigned long )mem_22);
# 154 "../HPL_pipid.c"
        *mem_22 = src;
      } else {
        __CrestBranch(14564, 5515, 0);
        __CrestLoad(14573, (unsigned long )(& fnds), (long long )fnds);
        __CrestLoad(14572, (unsigned long )0, (long long )1);
        __CrestApply2(14571, 1, (long long )(fnds - 1));
        __CrestStore(14574, (unsigned long )(& lst));
# 155 "../HPL_pipid.c"
        lst = fnds - 1;
        __CrestLoad(14575, (unsigned long )0, (long long )0);
        __CrestStore(14576, (unsigned long )(& off));
# 155 "../HPL_pipid.c"
        off = 0;
      }
      }
# 156 "../HPL_pipid.c"
      mem_23 = IPID + (lst + 1);
      __CrestLoad(14577, (unsigned long )(& dst), (long long )dst);
      __CrestStore(14578, (unsigned long )mem_23);
# 156 "../HPL_pipid.c"
      *mem_23 = dst;
    } else {
      __CrestBranch(14538, 5517, 0);
      __CrestLoad(14579, (unsigned long )0, (long long )0);
      __CrestStore(14580, (unsigned long )(& fndd));
# 160 "../HPL_pipid.c"
      fndd = 0;
      {
# 161 "../HPL_pipid.c"
      while (1) {
        while_continue___1: ;
        {
# 163 "../HPL_pipid.c"
        mem_24 = IPID + j;
        {
        __CrestLoad(14583, (unsigned long )(& src), (long long )src);
        __CrestLoad(14582, (unsigned long )mem_24, (long long )*mem_24);
        __CrestApply2(14581, 12, (long long )(src == *mem_24));
# 163 "../HPL_pipid.c"
        if (src == *mem_24) {
          __CrestBranch(14584, 5524, 1);
          __CrestLoad(14586, (unsigned long )(& j), (long long )j);
          __CrestStore(14587, (unsigned long )(& fnds));
# 163 "../HPL_pipid.c"
          fnds = j;
        } else {
          __CrestBranch(14585, 5525, 0);
          {
# 164 "../HPL_pipid.c"
          mem_25 = IPID + j;
          {
          __CrestLoad(14590, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(14589, (unsigned long )mem_25, (long long )*mem_25);
          __CrestApply2(14588, 12, (long long )(dst == *mem_25));
# 164 "../HPL_pipid.c"
          if (dst == *mem_25) {
            __CrestBranch(14591, 5528, 1);
            __CrestLoad(14593, (unsigned long )(& j), (long long )j);
            __CrestStore(14594, (unsigned long )(& fndd));
# 164 "../HPL_pipid.c"
            fndd = j;
          } else {
            __CrestBranch(14592, 5529, 0);

          }
          }
          }
        }
        }
        }
        __CrestLoad(14597, (unsigned long )(& j), (long long )j);
        __CrestLoad(14596, (unsigned long )0, (long long )2);
        __CrestApply2(14595, 0, (long long )(j + 2));
        __CrestStore(14598, (unsigned long )(& j));
# 165 "../HPL_pipid.c"
        j += 2;
        {
        __CrestLoad(14601, (unsigned long )(& fnds), (long long )fnds);
        __CrestLoad(14600, (unsigned long )0, (long long )0);
        __CrestApply2(14599, 12, (long long )(fnds == 0));
# 161 "../HPL_pipid.c"
        if (fnds == 0) {
          __CrestBranch(14602, 5532, 1);
# 161 "../HPL_pipid.c"
          goto _L;
        } else {
          __CrestBranch(14603, 5533, 0);
          {
          __CrestLoad(14606, (unsigned long )(& fndd), (long long )fndd);
          __CrestLoad(14605, (unsigned long )0, (long long )0);
          __CrestApply2(14604, 12, (long long )(fndd == 0));
# 161 "../HPL_pipid.c"
          if (fndd == 0) {
            __CrestBranch(14607, 5534, 1);
            _L:
            {
            __CrestLoad(14611, (unsigned long )(& j), (long long )j);
            __CrestLoad(14610, (unsigned long )K, (long long )*K);
            __CrestApply2(14609, 17, (long long )(j >= *K));
# 161 "../HPL_pipid.c"
            if (j >= *K) {
              __CrestBranch(14612, 5535, 1);
# 161 "../HPL_pipid.c"
              goto while_break___1;
            } else {
              __CrestBranch(14613, 5536, 0);

            }
            }
          } else {
            __CrestBranch(14608, 5537, 0);
# 161 "../HPL_pipid.c"
            goto while_break___1;
          }
          }
        }
        }
      }
      while_break___1: ;
      }
      {
      __CrestLoad(14616, (unsigned long )(& fnds), (long long )fnds);
      __CrestLoad(14615, (unsigned long )0, (long long )0);
      __CrestApply2(14614, 12, (long long )(fnds == 0));
# 168 "../HPL_pipid.c"
      if (fnds == 0) {
        __CrestBranch(14617, 5540, 1);
# 168 "../HPL_pipid.c"
        mem_26 = IPID + *K;
        __CrestLoad(14619, (unsigned long )(& src), (long long )src);
        __CrestStore(14620, (unsigned long )mem_26);
# 168 "../HPL_pipid.c"
        *mem_26 = src;
# 168 "../HPL_pipid.c"
        mem_27 = IPID + (*K + 1);
        __CrestLoad(14621, (unsigned long )(& dst), (long long )dst);
        __CrestStore(14622, (unsigned long )mem_27);
# 168 "../HPL_pipid.c"
        *mem_27 = dst;
        __CrestLoad(14623, (unsigned long )0, (long long )2);
        __CrestStore(14624, (unsigned long )(& off));
# 168 "../HPL_pipid.c"
        off = 2;
      } else {
        __CrestBranch(14618, 5541, 0);
# 169 "../HPL_pipid.c"
        mem_28 = IPID + fnds;
        __CrestLoad(14625, (unsigned long )(& dst), (long long )dst);
        __CrestStore(14626, (unsigned long )mem_28);
# 169 "../HPL_pipid.c"
        *mem_28 = dst;
        __CrestLoad(14627, (unsigned long )0, (long long )0);
        __CrestStore(14628, (unsigned long )(& off));
# 169 "../HPL_pipid.c"
        off = 0;
      }
      }
      {
      __CrestLoad(14631, (unsigned long )(& fndd), (long long )fndd);
      __CrestLoad(14630, (unsigned long )0, (long long )0);
      __CrestApply2(14629, 12, (long long )(fndd == 0));
# 170 "../HPL_pipid.c"
      if (fndd == 0) {
        __CrestBranch(14632, 5543, 1);
        __CrestLoad(14636, (unsigned long )K, (long long )*K);
        __CrestLoad(14635, (unsigned long )(& off), (long long )off);
        __CrestApply2(14634, 0, (long long )(*K + off));
        __CrestStore(14637, (unsigned long )(& lst));
# 170 "../HPL_pipid.c"
        lst = *K + off;
# 170 "../HPL_pipid.c"
        mem_29 = IPID + lst;
        __CrestLoad(14638, (unsigned long )(& dst), (long long )dst);
        __CrestStore(14639, (unsigned long )mem_29);
# 170 "../HPL_pipid.c"
        *mem_29 = dst;
        __CrestLoad(14642, (unsigned long )(& off), (long long )off);
        __CrestLoad(14641, (unsigned long )0, (long long )2);
        __CrestApply2(14640, 0, (long long )(off + 2));
        __CrestStore(14643, (unsigned long )(& off));
# 170 "../HPL_pipid.c"
        off += 2;
      } else {
        __CrestBranch(14633, 5544, 0);
        __CrestLoad(14646, (unsigned long )(& fndd), (long long )fndd);
        __CrestLoad(14645, (unsigned long )0, (long long )1);
        __CrestApply2(14644, 1, (long long )(fndd - 1));
        __CrestStore(14647, (unsigned long )(& lst));
# 171 "../HPL_pipid.c"
        lst = fndd - 1;
      }
      }
# 172 "../HPL_pipid.c"
      mem_30 = IPID + (lst + 1);
      __CrestLoad(14648, (unsigned long )(& src), (long long )src);
      __CrestStore(14649, (unsigned long )mem_30);
# 172 "../HPL_pipid.c"
      *mem_30 = src;
    }
    }
    __CrestLoad(14652, (unsigned long )(& i), (long long )i);
    __CrestLoad(14651, (unsigned long )0, (long long )1);
    __CrestApply2(14650, 8, (long long )(i << 1));
    __CrestStore(14653, (unsigned long )(& j));
# 177 "../HPL_pipid.c"
    j = i << 1;
    {
    __CrestLoad(14656, (unsigned long )(& lst), (long long )lst);
    __CrestLoad(14655, (unsigned long )(& j), (long long )j);
    __CrestApply2(14654, 13, (long long )(lst != j));
# 177 "../HPL_pipid.c"
    if (lst != j) {
      __CrestBranch(14657, 5548, 1);
# 179 "../HPL_pipid.c"
      mem_31 = IPID + j;
      __CrestLoad(14659, (unsigned long )mem_31, (long long )*mem_31);
      __CrestStore(14660, (unsigned long )(& src));
# 179 "../HPL_pipid.c"
      src = *mem_31;
# 179 "../HPL_pipid.c"
      mem_32 = IPID + j;
# 179 "../HPL_pipid.c"
      mem_33 = IPID + lst;
      __CrestLoad(14661, (unsigned long )mem_33, (long long )*mem_33);
      __CrestStore(14662, (unsigned long )mem_32);
# 179 "../HPL_pipid.c"
      *mem_32 = *mem_33;
# 179 "../HPL_pipid.c"
      mem_34 = IPID + lst;
      __CrestLoad(14663, (unsigned long )(& src), (long long )src);
      __CrestStore(14664, (unsigned long )mem_34);
# 179 "../HPL_pipid.c"
      *mem_34 = src;
# 180 "../HPL_pipid.c"
      mem_35 = IPID + (j + 1);
      __CrestLoad(14665, (unsigned long )mem_35, (long long )*mem_35);
      __CrestStore(14666, (unsigned long )(& dst));
# 180 "../HPL_pipid.c"
      dst = *mem_35;
# 180 "../HPL_pipid.c"
      mem_36 = IPID + (j + 1);
# 180 "../HPL_pipid.c"
      mem_37 = IPID + (lst + 1);
      __CrestLoad(14667, (unsigned long )mem_37, (long long )*mem_37);
      __CrestStore(14668, (unsigned long )mem_36);
# 180 "../HPL_pipid.c"
      *mem_36 = *mem_37;
# 180 "../HPL_pipid.c"
      mem_38 = IPID + (lst + 1);
      __CrestLoad(14669, (unsigned long )(& dst), (long long )dst);
      __CrestStore(14670, (unsigned long )mem_38);
# 180 "../HPL_pipid.c"
      *mem_38 = dst;
    } else {
      __CrestBranch(14658, 5549, 0);

    }
    }
    __CrestLoad(14673, (unsigned long )K, (long long )*K);
    __CrestLoad(14672, (unsigned long )(& off), (long long )off);
    __CrestApply2(14671, 0, (long long )(*K + off));
    __CrestStore(14674, (unsigned long )K);
# 182 "../HPL_pipid.c"
    *K += off;
    __CrestLoad(14677, (unsigned long )(& i), (long long )i);
    __CrestLoad(14676, (unsigned long )0, (long long )1);
    __CrestApply2(14675, 0, (long long )(i + 1));
    __CrestStore(14678, (unsigned long )(& i));
# 146 "../HPL_pipid.c"
    i ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(14679);
# 53 "../HPL_pipid.c"
  return;
  }
}
}
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 140 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx0(HPL_T_panel *PANEL , int const K , int *IPID , int *LINDXA , int *LINDXAU ,
                 int *LLEN ) ;
# 53 "../HPL_plindx0.c"
void HPL_plindx0(HPL_T_panel *PANEL , int const K , int *IPID , int *LINDXA , int *LINDXAU ,
                 int *LLEN )
{
  int dst ;
  int dstrow ;
  int fndd ;
  int i ;
  int ia ;
  int icurrow ;
  int il ;
  int ip ;
  int iroff ;
  int j ;
  int jb ;
  int myrow ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;
  int i__ ;
  int j__ ;
  int tmp ;
  int i_____0 ;
  int j_____0 ;
  int tmp___0 ;
  struct HPL_S_grid *mem_29 ;
  struct HPL_S_grid *mem_30 ;
  int *mem_31 ;
  int *mem_32 ;
  int *mem_33 ;
  int *mem_34 ;
  int *mem_35 ;
  int *mem_36 ;
  int *mem_37 ;
  int *mem_38 ;
  int *mem_39 ;
  int *mem_40 ;
  int *mem_41 ;
  int *mem_42 ;

  {
  __CrestCall(14681, 95);
  __CrestStore(14680, (unsigned long )(& K));
  __CrestLoad(14682, (unsigned long )0, (long long )0);
  __CrestStore(14683, (unsigned long )(& ip));
# 225 "../HPL_plindx0.c"
  ip = 0;
# 236 "../HPL_plindx0.c"
  mem_29 = PANEL->grid;
  __CrestLoad(14684, (unsigned long )(& mem_29->myrow), (long long )mem_29->myrow);
  __CrestStore(14685, (unsigned long )(& myrow));
# 236 "../HPL_plindx0.c"
  myrow = mem_29->myrow;
# 236 "../HPL_plindx0.c"
  mem_30 = PANEL->grid;
  __CrestLoad(14686, (unsigned long )(& mem_30->nprow), (long long )mem_30->nprow);
  __CrestStore(14687, (unsigned long )(& nprow));
# 236 "../HPL_plindx0.c"
  nprow = mem_30->nprow;
  __CrestLoad(14688, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(14689, (unsigned long )(& icurrow));
# 237 "../HPL_plindx0.c"
  icurrow = PANEL->prow;
  __CrestLoad(14690, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14691, (unsigned long )(& jb));
# 237 "../HPL_plindx0.c"
  jb = PANEL->jb;
  __CrestLoad(14692, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(14693, (unsigned long )(& nb));
# 238 "../HPL_plindx0.c"
  nb = PANEL->nb;
  __CrestLoad(14694, (unsigned long )(& PANEL->ia), (long long )PANEL->ia);
  __CrestStore(14695, (unsigned long )(& ia));
# 238 "../HPL_plindx0.c"
  ia = PANEL->ia;
  __CrestLoad(14696, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
  __CrestStore(14697, (unsigned long )(& iroff));
# 239 "../HPL_plindx0.c"
  iroff = PANEL->ii;
  __CrestLoad(14698, (unsigned long )0, (long long )0);
  __CrestStore(14699, (unsigned long )(& i));
# 241 "../HPL_plindx0.c"
  i = 0;
  {
# 241 "../HPL_plindx0.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(14702, (unsigned long )(& i), (long long )i);
    __CrestLoad(14701, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(14700, 16, (long long )(i < nprow));
# 241 "../HPL_plindx0.c"
    if (i < nprow) {
      __CrestBranch(14703, 5559, 1);

    } else {
      __CrestBranch(14704, 5560, 0);
# 241 "../HPL_plindx0.c"
      goto while_break;
    }
    }
# 241 "../HPL_plindx0.c"
    mem_31 = LLEN + i;
    __CrestLoad(14705, (unsigned long )0, (long long )0);
    __CrestStore(14706, (unsigned long )mem_31);
# 241 "../HPL_plindx0.c"
    *mem_31 = 0;
    __CrestLoad(14709, (unsigned long )(& i), (long long )i);
    __CrestLoad(14708, (unsigned long )0, (long long )1);
    __CrestApply2(14707, 0, (long long )(i + 1));
    __CrestStore(14710, (unsigned long )(& i));
# 241 "../HPL_plindx0.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(14711, (unsigned long )0, (long long )0);
  __CrestStore(14712, (unsigned long )(& i));
# 243 "../HPL_plindx0.c"
  i = 0;
  {
# 243 "../HPL_plindx0.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(14715, (unsigned long )(& i), (long long )i);
    __CrestLoad(14714, (unsigned long )(& K), (long long )K);
    __CrestApply2(14713, 16, (long long )(i < (int )K));
# 243 "../HPL_plindx0.c"
    if (i < (int )K) {
      __CrestBranch(14716, 5568, 1);

    } else {
      __CrestBranch(14717, 5569, 0);
# 243 "../HPL_plindx0.c"
      goto while_break___0;
    }
    }
# 245 "../HPL_plindx0.c"
    mem_32 = IPID + i;
    __CrestLoad(14718, (unsigned long )mem_32, (long long )*mem_32);
    __CrestStore(14719, (unsigned long )(& src));
# 245 "../HPL_plindx0.c"
    src = *mem_32;
    {
    __CrestLoad(14722, (unsigned long )(& src), (long long )src);
    __CrestLoad(14721, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(14720, 17, (long long )(src >= nb));
# 246 "../HPL_plindx0.c"
    if (src >= nb) {
      __CrestBranch(14723, 5572, 1);
      {
      __CrestLoad(14727, (unsigned long )(& nprow), (long long )nprow);
      __CrestLoad(14726, (unsigned long )0, (long long )1);
      __CrestApply2(14725, 14, (long long )(nprow > 1));
# 246 "../HPL_plindx0.c"
      if (nprow > 1) {
        __CrestBranch(14728, 5573, 1);
        __CrestLoad(14736, (unsigned long )0, (long long )1);
        __CrestLoad(14735, (unsigned long )(& src), (long long )src);
        __CrestLoad(14734, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(14733, 1, (long long )(src - nb));
        __CrestLoad(14732, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(14731, 3, (long long )((src - nb) / nb));
        __CrestApply2(14730, 0, (long long )(1 + (src - nb) / nb));
        __CrestStore(14737, (unsigned long )(& srcrow));
# 246 "../HPL_plindx0.c"
        srcrow = 1 + (src - nb) / nb;
        __CrestLoad(14744, (unsigned long )(& srcrow), (long long )srcrow);
        __CrestLoad(14743, (unsigned long )(& srcrow), (long long )srcrow);
        __CrestLoad(14742, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(14741, 3, (long long )(srcrow / nprow));
        __CrestLoad(14740, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(14739, 2, (long long )((srcrow / nprow) * nprow));
        __CrestApply2(14738, 1, (long long )(srcrow - (srcrow / nprow) * nprow));
        __CrestStore(14745, (unsigned long )(& srcrow));
# 246 "../HPL_plindx0.c"
        srcrow -= (srcrow / nprow) * nprow;
      } else {
        __CrestBranch(14729, 5574, 0);
        __CrestLoad(14746, (unsigned long )0, (long long )0);
        __CrestStore(14747, (unsigned long )(& srcrow));
# 246 "../HPL_plindx0.c"
        srcrow = 0;
      }
      }
    } else {
      __CrestBranch(14724, 5575, 0);
      __CrestLoad(14748, (unsigned long )0, (long long )0);
      __CrestStore(14749, (unsigned long )(& srcrow));
# 246 "../HPL_plindx0.c"
      srcrow = 0;
    }
    }
# 246 "../HPL_plindx0.c"
    mem_33 = LLEN + srcrow;
# 246 "../HPL_plindx0.c"
    mem_34 = LLEN + srcrow;
    __CrestLoad(14752, (unsigned long )mem_34, (long long )*mem_34);
    __CrestLoad(14751, (unsigned long )0, (long long )1);
    __CrestApply2(14750, 0, (long long )(*mem_34 + 1));
    __CrestStore(14753, (unsigned long )mem_33);
# 246 "../HPL_plindx0.c"
    *mem_33 = *mem_34 + 1;
    {
    __CrestLoad(14756, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(14755, (unsigned long )(& srcrow), (long long )srcrow);
    __CrestApply2(14754, 12, (long long )(myrow == srcrow));
# 248 "../HPL_plindx0.c"
    if (myrow == srcrow) {
      __CrestBranch(14757, 5578, 1);
      {
      __CrestLoad(14761, (unsigned long )(& src), (long long )src);
      __CrestLoad(14760, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(14759, 16, (long long )(src < nb));
# 250 "../HPL_plindx0.c"
      if (src < nb) {
        __CrestBranch(14762, 5579, 1);
        __CrestLoad(14764, (unsigned long )(& src), (long long )src);
        __CrestStore(14765, (unsigned long )(& il));
# 250 "../HPL_plindx0.c"
        il = src;
      } else {
        __CrestBranch(14763, 5580, 0);
        {
        __CrestLoad(14768, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(14767, (unsigned long )0, (long long )1);
        __CrestApply2(14766, 12, (long long )(nprow == 1));
# 250 "../HPL_plindx0.c"
        if (nprow == 1) {
          __CrestBranch(14769, 5581, 1);
          __CrestLoad(14771, (unsigned long )(& src), (long long )src);
          __CrestStore(14772, (unsigned long )(& il));
# 250 "../HPL_plindx0.c"
          il = src;
        } else {
          __CrestBranch(14770, 5582, 0);
          __CrestLoad(14777, (unsigned long )(& src), (long long )src);
          __CrestLoad(14776, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(14775, 1, (long long )(src - nb));
          __CrestLoad(14774, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(14773, 3, (long long )((src - nb) / nb));
          __CrestStore(14778, (unsigned long )(& i__));
# 250 "../HPL_plindx0.c"
          i__ = (src - nb) / nb;
          __CrestLoad(14781, (unsigned long )(& i__), (long long )i__);
          __CrestLoad(14780, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(14779, 3, (long long )(i__ / nprow));
          __CrestStore(14782, (unsigned long )(& j__));
# 250 "../HPL_plindx0.c"
          j__ = i__ / nprow;
          {
          __CrestLoad(14793, (unsigned long )(& i__), (long long )i__);
          __CrestLoad(14792, (unsigned long )0, (long long )1);
          __CrestApply2(14791, 0, (long long )(i__ + 1));
          __CrestLoad(14790, (unsigned long )(& j__), (long long )j__);
          __CrestLoad(14789, (unsigned long )0, (long long )1);
          __CrestApply2(14788, 0, (long long )(j__ + 1));
          __CrestLoad(14787, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(14786, 2, (long long )((j__ + 1) * nprow));
          __CrestApply2(14785, 1, (long long )((i__ + 1) - (j__ + 1) * nprow));
          __CrestLoad(14784, (unsigned long )0, (long long )0);
          __CrestApply2(14783, 13, (long long )((i__ + 1) - (j__ + 1) * nprow != 0));
# 250 "../HPL_plindx0.c"
          if ((i__ + 1) - (j__ + 1) * nprow != 0) {
            __CrestBranch(14794, 5584, 1);
            __CrestLoad(14798, (unsigned long )(& src), (long long )src);
            __CrestLoad(14797, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(14796, 1, (long long )(src - nb));
            __CrestStore(14799, (unsigned long )(& tmp));
# 250 "../HPL_plindx0.c"
            tmp = src - nb;
          } else {
            __CrestBranch(14795, 5585, 0);
            __CrestLoad(14800, (unsigned long )(& src), (long long )src);
            __CrestStore(14801, (unsigned long )(& tmp));
# 250 "../HPL_plindx0.c"
            tmp = src;
          }
          }
          __CrestLoad(14808, (unsigned long )(& nb), (long long )nb);
          __CrestLoad(14807, (unsigned long )(& j__), (long long )j__);
          __CrestLoad(14806, (unsigned long )(& i__), (long long )i__);
          __CrestApply2(14805, 1, (long long )(j__ - i__));
          __CrestApply2(14804, 2, (long long )(nb * (j__ - i__)));
          __CrestLoad(14803, (unsigned long )(& tmp), (long long )tmp);
          __CrestApply2(14802, 0, (long long )(nb * (j__ - i__) + tmp));
          __CrestStore(14809, (unsigned long )(& il));
# 250 "../HPL_plindx0.c"
          il = nb * (j__ - i__) + tmp;
        }
        }
      }
      }
# 251 "../HPL_plindx0.c"
      mem_35 = LINDXA + ip;
      __CrestLoad(14812, (unsigned long )(& il), (long long )il);
      __CrestLoad(14811, (unsigned long )(& iroff), (long long )iroff);
      __CrestApply2(14810, 1, (long long )(il - iroff));
      __CrestStore(14813, (unsigned long )mem_35);
# 251 "../HPL_plindx0.c"
      *mem_35 = il - iroff;
# 251 "../HPL_plindx0.c"
      mem_36 = IPID + (i + 1);
      __CrestLoad(14814, (unsigned long )mem_36, (long long )*mem_36);
      __CrestStore(14815, (unsigned long )(& dst));
# 251 "../HPL_plindx0.c"
      dst = *mem_36;
      {
      __CrestLoad(14818, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(14817, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestApply2(14816, 12, (long long )(myrow == icurrow));
# 253 "../HPL_plindx0.c"
      if (myrow == icurrow) {
        __CrestBranch(14819, 5589, 1);
        {
        __CrestLoad(14823, (unsigned long )(& dst), (long long )dst);
        __CrestLoad(14822, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(14821, 17, (long long )(dst >= nb));
# 255 "../HPL_plindx0.c"
        if (dst >= nb) {
          __CrestBranch(14824, 5590, 1);
          {
          __CrestLoad(14828, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(14827, (unsigned long )0, (long long )1);
          __CrestApply2(14826, 14, (long long )(nprow > 1));
# 255 "../HPL_plindx0.c"
          if (nprow > 1) {
            __CrestBranch(14829, 5591, 1);
            __CrestLoad(14837, (unsigned long )0, (long long )1);
            __CrestLoad(14836, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(14835, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(14834, 1, (long long )(dst - nb));
            __CrestLoad(14833, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(14832, 3, (long long )((dst - nb) / nb));
            __CrestApply2(14831, 0, (long long )(1 + (dst - nb) / nb));
            __CrestStore(14838, (unsigned long )(& dstrow));
# 255 "../HPL_plindx0.c"
            dstrow = 1 + (dst - nb) / nb;
            __CrestLoad(14845, (unsigned long )(& dstrow), (long long )dstrow);
            __CrestLoad(14844, (unsigned long )(& dstrow), (long long )dstrow);
            __CrestLoad(14843, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(14842, 3, (long long )(dstrow / nprow));
            __CrestLoad(14841, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(14840, 2, (long long )((dstrow / nprow) * nprow));
            __CrestApply2(14839, 1, (long long )(dstrow - (dstrow / nprow) * nprow));
            __CrestStore(14846, (unsigned long )(& dstrow));
# 255 "../HPL_plindx0.c"
            dstrow -= (dstrow / nprow) * nprow;
          } else {
            __CrestBranch(14830, 5592, 0);
            __CrestLoad(14847, (unsigned long )0, (long long )0);
            __CrestStore(14848, (unsigned long )(& dstrow));
# 255 "../HPL_plindx0.c"
            dstrow = 0;
          }
          }
        } else {
          __CrestBranch(14825, 5593, 0);
          __CrestLoad(14849, (unsigned long )0, (long long )0);
          __CrestStore(14850, (unsigned long )(& dstrow));
# 255 "../HPL_plindx0.c"
          dstrow = 0;
        }
        }
        {
        __CrestLoad(14853, (unsigned long )(& dstrow), (long long )dstrow);
        __CrestLoad(14852, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(14851, 12, (long long )(dstrow == icurrow));
# 256 "../HPL_plindx0.c"
        if (dstrow == icurrow) {
          __CrestBranch(14854, 5595, 1);
          {
          __CrestLoad(14860, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(14859, (unsigned long )(& ia), (long long )ia);
          __CrestApply2(14858, 1, (long long )(dst - ia));
          __CrestLoad(14857, (unsigned long )(& jb), (long long )jb);
          __CrestApply2(14856, 16, (long long )(dst - ia < jb));
# 258 "../HPL_plindx0.c"
          if (dst - ia < jb) {
            __CrestBranch(14861, 5596, 1);
# 258 "../HPL_plindx0.c"
            mem_37 = LINDXAU + ip;
            __CrestLoad(14865, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(14864, (unsigned long )(& ia), (long long )ia);
            __CrestApply2(14863, 1, (long long )(dst - ia));
            __CrestStore(14866, (unsigned long )mem_37);
# 258 "../HPL_plindx0.c"
            *mem_37 = dst - ia;
          } else {
            __CrestBranch(14862, 5597, 0);
            {
            __CrestLoad(14869, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(14868, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(14867, 16, (long long )(dst < nb));
# 261 "../HPL_plindx0.c"
            if (dst < nb) {
              __CrestBranch(14870, 5598, 1);
              __CrestLoad(14872, (unsigned long )(& dst), (long long )dst);
              __CrestStore(14873, (unsigned long )(& il));
# 261 "../HPL_plindx0.c"
              il = dst;
            } else {
              __CrestBranch(14871, 5599, 0);
              {
              __CrestLoad(14876, (unsigned long )(& nprow), (long long )nprow);
              __CrestLoad(14875, (unsigned long )0, (long long )1);
              __CrestApply2(14874, 12, (long long )(nprow == 1));
# 261 "../HPL_plindx0.c"
              if (nprow == 1) {
                __CrestBranch(14877, 5600, 1);
                __CrestLoad(14879, (unsigned long )(& dst), (long long )dst);
                __CrestStore(14880, (unsigned long )(& il));
# 261 "../HPL_plindx0.c"
                il = dst;
              } else {
                __CrestBranch(14878, 5601, 0);
                __CrestLoad(14885, (unsigned long )(& dst), (long long )dst);
                __CrestLoad(14884, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(14883, 1, (long long )(dst - nb));
                __CrestLoad(14882, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(14881, 3, (long long )((dst - nb) / nb));
                __CrestStore(14886, (unsigned long )(& i_____0));
# 261 "../HPL_plindx0.c"
                i_____0 = (dst - nb) / nb;
                __CrestLoad(14889, (unsigned long )(& i_____0), (long long )i_____0);
                __CrestLoad(14888, (unsigned long )(& nprow), (long long )nprow);
                __CrestApply2(14887, 3, (long long )(i_____0 / nprow));
                __CrestStore(14890, (unsigned long )(& j_____0));
# 261 "../HPL_plindx0.c"
                j_____0 = i_____0 / nprow;
                {
                __CrestLoad(14901, (unsigned long )(& i_____0), (long long )i_____0);
                __CrestLoad(14900, (unsigned long )0, (long long )1);
                __CrestApply2(14899, 0, (long long )(i_____0 + 1));
                __CrestLoad(14898, (unsigned long )(& j_____0), (long long )j_____0);
                __CrestLoad(14897, (unsigned long )0, (long long )1);
                __CrestApply2(14896, 0, (long long )(j_____0 + 1));
                __CrestLoad(14895, (unsigned long )(& nprow), (long long )nprow);
                __CrestApply2(14894, 2, (long long )((j_____0 + 1) * nprow));
                __CrestApply2(14893, 1, (long long )((i_____0 + 1) - (j_____0 + 1) * nprow));
                __CrestLoad(14892, (unsigned long )0, (long long )0);
                __CrestApply2(14891, 13, (long long )((i_____0 + 1) - (j_____0 + 1) * nprow != 0));
# 261 "../HPL_plindx0.c"
                if ((i_____0 + 1) - (j_____0 + 1) * nprow != 0) {
                  __CrestBranch(14902, 5603, 1);
                  __CrestLoad(14906, (unsigned long )(& dst), (long long )dst);
                  __CrestLoad(14905, (unsigned long )(& nb), (long long )nb);
                  __CrestApply2(14904, 1, (long long )(dst - nb));
                  __CrestStore(14907, (unsigned long )(& tmp___0));
# 261 "../HPL_plindx0.c"
                  tmp___0 = dst - nb;
                } else {
                  __CrestBranch(14903, 5604, 0);
                  __CrestLoad(14908, (unsigned long )(& dst), (long long )dst);
                  __CrestStore(14909, (unsigned long )(& tmp___0));
# 261 "../HPL_plindx0.c"
                  tmp___0 = dst;
                }
                }
                __CrestLoad(14916, (unsigned long )(& nb), (long long )nb);
                __CrestLoad(14915, (unsigned long )(& j_____0), (long long )j_____0);
                __CrestLoad(14914, (unsigned long )(& i_____0), (long long )i_____0);
                __CrestApply2(14913, 1, (long long )(j_____0 - i_____0));
                __CrestApply2(14912, 2, (long long )(nb * (j_____0 - i_____0)));
                __CrestLoad(14911, (unsigned long )(& tmp___0), (long long )tmp___0);
                __CrestApply2(14910, 0, (long long )(nb * (j_____0 - i_____0) + tmp___0));
                __CrestStore(14917, (unsigned long )(& il));
# 261 "../HPL_plindx0.c"
                il = nb * (j_____0 - i_____0) + tmp___0;
              }
              }
            }
            }
# 262 "../HPL_plindx0.c"
            mem_38 = LINDXAU + ip;
            __CrestLoad(14920, (unsigned long )(& iroff), (long long )iroff);
            __CrestLoad(14919, (unsigned long )(& il), (long long )il);
            __CrestApply2(14918, 1, (long long )(iroff - il));
            __CrestStore(14921, (unsigned long )mem_38);
# 262 "../HPL_plindx0.c"
            *mem_38 = iroff - il;
          }
          }
        } else {
          __CrestBranch(14855, 5607, 0);
          __CrestLoad(14922, (unsigned long )0, (long long )0);
          __CrestStore(14923, (unsigned long )(& j));
# 267 "../HPL_plindx0.c"
          j = 0;
          {
# 268 "../HPL_plindx0.c"
          while (1) {
            while_continue___1: ;
# 268 "../HPL_plindx0.c"
            mem_39 = IPID + j;
            __CrestLoad(14926, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(14925, (unsigned long )mem_39, (long long )*mem_39);
            __CrestApply2(14924, 12, (long long )(dst == *mem_39));
            __CrestStore(14927, (unsigned long )(& fndd));
# 268 "../HPL_plindx0.c"
            fndd = dst == *mem_39;
            __CrestLoad(14930, (unsigned long )(& j), (long long )j);
            __CrestLoad(14929, (unsigned long )0, (long long )2);
            __CrestApply2(14928, 0, (long long )(j + 2));
            __CrestStore(14931, (unsigned long )(& j));
# 268 "../HPL_plindx0.c"
            j += 2;
            {
            __CrestLoad(14934, (unsigned long )(& fndd), (long long )fndd);
            __CrestLoad(14933, (unsigned long )0, (long long )0);
            __CrestApply2(14932, 12, (long long )(fndd == 0));
# 268 "../HPL_plindx0.c"
            if (fndd == 0) {
              __CrestBranch(14935, 5613, 1);
              {
              __CrestLoad(14939, (unsigned long )(& j), (long long )j);
              __CrestLoad(14938, (unsigned long )(& K), (long long )K);
              __CrestApply2(14937, 17, (long long )(j >= (int )K));
# 268 "../HPL_plindx0.c"
              if (j >= (int )K) {
                __CrestBranch(14940, 5614, 1);
# 268 "../HPL_plindx0.c"
                goto while_break___1;
              } else {
                __CrestBranch(14941, 5615, 0);

              }
              }
            } else {
              __CrestBranch(14936, 5616, 0);
# 268 "../HPL_plindx0.c"
              goto while_break___1;
            }
            }
          }
          while_break___1: ;
          }
# 270 "../HPL_plindx0.c"
          mem_40 = LINDXAU + ip;
# 270 "../HPL_plindx0.c"
          mem_41 = IPID + (j - 1);
          __CrestLoad(14944, (unsigned long )mem_41, (long long )*mem_41);
          __CrestLoad(14943, (unsigned long )(& ia), (long long )ia);
          __CrestApply2(14942, 1, (long long )(*mem_41 - ia));
          __CrestStore(14945, (unsigned long )mem_40);
# 270 "../HPL_plindx0.c"
          *mem_40 = *mem_41 - ia;
        }
        }
      } else {
        __CrestBranch(14820, 5619, 0);
# 273 "../HPL_plindx0.c"
        mem_42 = LINDXAU + ip;
        __CrestLoad(14948, (unsigned long )(& dst), (long long )dst);
        __CrestLoad(14947, (unsigned long )(& ia), (long long )ia);
        __CrestApply2(14946, 1, (long long )(dst - ia));
        __CrestStore(14949, (unsigned long )mem_42);
# 273 "../HPL_plindx0.c"
        *mem_42 = dst - ia;
      }
      }
      __CrestLoad(14952, (unsigned long )(& ip), (long long )ip);
      __CrestLoad(14951, (unsigned long )0, (long long )1);
      __CrestApply2(14950, 0, (long long )(ip + 1));
      __CrestStore(14953, (unsigned long )(& ip));
# 275 "../HPL_plindx0.c"
      ip ++;
    } else {
      __CrestBranch(14758, 5621, 0);

    }
    }
    __CrestLoad(14956, (unsigned long )(& i), (long long )i);
    __CrestLoad(14955, (unsigned long )0, (long long )2);
    __CrestApply2(14954, 0, (long long )(i + 2));
    __CrestStore(14957, (unsigned long )(& i));
# 243 "../HPL_plindx0.c"
    i += 2;
  }
  while_break___0: ;
  }

  {
  __CrestReturn(14958);
# 53 "../HPL_plindx0.c"
  return;
  }
}
}
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 149 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp00N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 53 "../HPL_pdlaswp00N.c"
void HPL_pdlaswp00N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  MPI_Comm comm ;
  HPL_T_grid *grid ;
  double *A ;
  double *U ;
  double *W ;
  void *vptr ;
  int *ipID ;
  int *lindxA ;
  int *lindxAU ;
  int *llen ;
  int *llen_sv ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipdist ;
  unsigned int ipow ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydis_ ;
  int Cmsgid ;
  int Np2 ;
  int align ;
  int hdim ;
  int i ;
  int icurrow ;
  int *iflag ;
  int ipA ;
  int ipW ;
  int *ipl ;
  int iprow ;
  int jb ;
  int k ;
  int lda ;
  int ldW ;
  int myrow ;
  int n ;
  int nprow ;
  int partner ;
  int root ;
  int size_ ;
  int usize ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct HPL_S_palg *mem_50 ;
  int *mem_51 ;
  int *mem_52 ;
  int *mem_53 ;
  int *mem_54 ;
  int *mem_55 ;
  int *mem_56 ;
  int *mem_57 ;
  int *mem_58 ;
  int *mem_59 ;
  int *mem_60 ;
  int *mem_61 ;
  int *mem_62 ;
  int *mem_63 ;
  int *mem_64 ;
  int *mem_65 ;
  int *mem_66 ;
  int *mem_67 ;
  int *mem_68 ;
  int *mem_69 ;
  int *mem_70 ;
  int *mem_71 ;
  int *mem_72 ;
  int *mem_73 ;
  int *mem_74 ;
  int *mem_75 ;
  int *mem_76 ;
  int *mem_77 ;
  int *mem_78 ;

  {
  __CrestCall(14960, 96);
  __CrestStore(14959, (unsigned long )(& NN));
# 118 "../HPL_pdlaswp00N.c"
  vptr = (void *)0;
  __CrestLoad(14961, (unsigned long )0, (long long )1U);
  __CrestStore(14962, (unsigned long )(& ip2_));
# 121 "../HPL_pdlaswp00N.c"
  ip2_ = 1U;
  __CrestLoad(14963, (unsigned long )0, (long long )1U);
  __CrestStore(14964, (unsigned long )(& ipow));
# 121 "../HPL_pdlaswp00N.c"
  ipow = 1U;
  __CrestLoad(14965, (unsigned long )0, (long long )1U);
  __CrestStore(14966, (unsigned long )(& mask));
# 121 "../HPL_pdlaswp00N.c"
  mask = 1U;
  __CrestLoad(14967, (unsigned long )0, (long long )1001);
  __CrestStore(14968, (unsigned long )(& Cmsgid));
# 123 "../HPL_pdlaswp00N.c"
  Cmsgid = 1001;
  {
  __CrestLoad(14971, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(14970, (unsigned long )(& PANEL->n), (long long )PANEL->n);
  __CrestApply2(14969, 16, (long long )(NN < (int const )PANEL->n));
# 131 "../HPL_pdlaswp00N.c"
  if (NN < (int const )PANEL->n) {
    __CrestBranch(14972, 5628, 1);
    __CrestLoad(14974, (unsigned long )(& NN), (long long )NN);
    __CrestStore(14975, (unsigned long )(& n));
# 131 "../HPL_pdlaswp00N.c"
    n = (int )NN;
  } else {
    __CrestBranch(14973, 5629, 0);
    __CrestLoad(14976, (unsigned long )(& PANEL->n), (long long )PANEL->n);
    __CrestStore(14977, (unsigned long )(& n));
# 131 "../HPL_pdlaswp00N.c"
    n = PANEL->n;
  }
  }
  __CrestLoad(14978, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(14979, (unsigned long )(& jb));
# 131 "../HPL_pdlaswp00N.c"
  jb = PANEL->jb;
  {
  __CrestLoad(14982, (unsigned long )(& n), (long long )n);
  __CrestLoad(14981, (unsigned long )0, (long long )0);
  __CrestApply2(14980, 15, (long long )(n <= 0));
# 135 "../HPL_pdlaswp00N.c"
  if (n <= 0) {
    __CrestBranch(14983, 5632, 1);
# 135 "../HPL_pdlaswp00N.c"
    goto return_label;
  } else {
    __CrestBranch(14984, 5634, 0);
    {
    __CrestLoad(14987, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(14986, (unsigned long )0, (long long )0);
    __CrestApply2(14985, 15, (long long )(jb <= 0));
# 135 "../HPL_pdlaswp00N.c"
    if (jb <= 0) {
      __CrestBranch(14988, 5635, 1);
# 135 "../HPL_pdlaswp00N.c"
      goto return_label;
    } else {
      __CrestBranch(14989, 5637, 0);

    }
    }
  }
  }
# 143 "../HPL_pdlaswp00N.c"
  grid = PANEL->grid;
  __CrestLoad(14990, (unsigned long )(& grid->nprow), (long long )grid->nprow);
  __CrestStore(14991, (unsigned long )(& nprow));
# 143 "../HPL_pdlaswp00N.c"
  nprow = grid->nprow;
  __CrestLoad(14992, (unsigned long )(& grid->myrow), (long long )grid->myrow);
  __CrestStore(14993, (unsigned long )(& myrow));
# 143 "../HPL_pdlaswp00N.c"
  myrow = grid->myrow;
  __CrestLoad(14994, (unsigned long )(& grid->col_comm), (long long )grid->col_comm);
  __CrestStore(14995, (unsigned long )(& comm));
# 144 "../HPL_pdlaswp00N.c"
  comm = grid->col_comm;
  __CrestLoad(14996, (unsigned long )(& grid->row_ip2), (long long )grid->row_ip2);
  __CrestStore(14997, (unsigned long )(& ip2));
# 144 "../HPL_pdlaswp00N.c"
  ip2 = (unsigned int )grid->row_ip2;
  __CrestLoad(14998, (unsigned long )(& grid->row_hdim), (long long )grid->row_hdim);
  __CrestStore(14999, (unsigned long )(& hdim));
# 145 "../HPL_pdlaswp00N.c"
  hdim = grid->row_hdim;
# 145 "../HPL_pdlaswp00N.c"
  mem_50 = PANEL->algo;
  __CrestLoad(15000, (unsigned long )(& mem_50->align), (long long )mem_50->align);
  __CrestStore(15001, (unsigned long )(& align));
# 145 "../HPL_pdlaswp00N.c"
  align = mem_50->align;
# 146 "../HPL_pdlaswp00N.c"
  A = PANEL->A;
# 146 "../HPL_pdlaswp00N.c"
  U = PANEL->U;
# 146 "../HPL_pdlaswp00N.c"
  iflag = PANEL->IWORK;
  __CrestLoad(15002, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(15003, (unsigned long )(& lda));
# 147 "../HPL_pdlaswp00N.c"
  lda = PANEL->lda;
  __CrestLoad(15004, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(15005, (unsigned long )(& icurrow));
# 147 "../HPL_pdlaswp00N.c"
  icurrow = PANEL->prow;
  __CrestLoad(15008, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15007, (unsigned long )(& n), (long long )n);
  __CrestApply2(15006, 2, (long long )(jb * n));
  __CrestStore(15009, (unsigned long )(& usize));
# 147 "../HPL_pdlaswp00N.c"
  usize = jb * n;
  __CrestLoad(15012, (unsigned long )(& n), (long long )n);
  __CrestLoad(15011, (unsigned long )0, (long long )1);
  __CrestApply2(15010, 0, (long long )(n + 1));
  __CrestStore(15013, (unsigned long )(& ldW));
# 148 "../HPL_pdlaswp00N.c"
  ldW = n + 1;
  __CrestLoad(15020, (unsigned long )(& align), (long long )align);
  __CrestLoad(15019, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15018, (unsigned long )(& ldW), (long long )ldW);
  __CrestApply2(15017, 2, (long long )(jb * ldW));
  __CrestApply2(15016, 0, (long long )(align + jb * ldW));
  __CrestLoad(15015, (unsigned long )0, (long long )sizeof(double ));
  __CrestApply2(15014, 2, (long long )((unsigned long )(align + jb * ldW) * sizeof(double )));
# 152 "../HPL_pdlaswp00N.c"
  tmp = malloc((unsigned long )(align + jb * ldW) * sizeof(double ));
  __CrestClearStack(15021);
# 152 "../HPL_pdlaswp00N.c"
  vptr = tmp;
  {
  __CrestLoad(15024, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(15023, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(15022, 12, (long long )((unsigned long )vptr == (unsigned long )((void *)0)));
# 153 "../HPL_pdlaswp00N.c"
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
    __CrestBranch(15025, 5640, 1);
    __CrestLoad(15027, (unsigned long )0, (long long )154);
# 154 "../HPL_pdlaswp00N.c"
    HPL_pabort(154, "HPL_pdlaswp00N", "Memory allocation failed");
    __CrestClearStack(15028);
  } else {
    __CrestBranch(15026, 5641, 0);

  }
  }
# 156 "../HPL_pdlaswp00N.c"
  W = (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double )));
  __CrestLoad(15031, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15030, (unsigned long )0, (long long )1);
  __CrestApply2(15029, 8, (long long )((unsigned int )jb << 1));
  __CrestStore(15032, (unsigned long )(& k));
# 163 "../HPL_pdlaswp00N.c"
  k = (int )((unsigned int )jb << 1);
# 163 "../HPL_pdlaswp00N.c"
  ipl = iflag + 1;
# 163 "../HPL_pdlaswp00N.c"
  ipID = ipl + 1;
# 164 "../HPL_pdlaswp00N.c"
  lindxA = ipID + ((unsigned int )k << 1);
# 164 "../HPL_pdlaswp00N.c"
  lindxAU = lindxA + k;
# 165 "../HPL_pdlaswp00N.c"
  llen = lindxAU + k;
# 165 "../HPL_pdlaswp00N.c"
  llen_sv = llen + nprow;
  {
  __CrestLoad(15035, (unsigned long )iflag, (long long )*iflag);
  __CrestLoad(15034, (unsigned long )0, (long long )-1);
  __CrestApply2(15033, 12, (long long )(*iflag == -1));
# 167 "../HPL_pdlaswp00N.c"
  if (*iflag == -1) {
    __CrestBranch(15036, 5644, 1);
# 169 "../HPL_pdlaswp00N.c"
    HPL_pipid(PANEL, ipl, ipID);
    __CrestClearStack(15038);
    __CrestLoad(15039, (unsigned long )ipl, (long long )*ipl);
# 170 "../HPL_pdlaswp00N.c"
    HPL_plindx0(PANEL, (int const )*ipl, ipID, lindxA, lindxAU, llen_sv);
    __CrestClearStack(15040);
    __CrestLoad(15041, (unsigned long )0, (long long )0);
    __CrestStore(15042, (unsigned long )iflag);
# 171 "../HPL_pdlaswp00N.c"
    *iflag = 0;
  } else {
    __CrestBranch(15037, 5645, 0);
    {
    __CrestLoad(15045, (unsigned long )iflag, (long long )*iflag);
    __CrestLoad(15044, (unsigned long )0, (long long )1);
    __CrestApply2(15043, 12, (long long )(*iflag == 1));
# 173 "../HPL_pdlaswp00N.c"
    if (*iflag == 1) {
      __CrestBranch(15046, 5646, 1);
      __CrestLoad(15048, (unsigned long )ipl, (long long )*ipl);
# 175 "../HPL_pdlaswp00N.c"
      HPL_plindx0(PANEL, (int const )*ipl, ipID, lindxA, lindxAU, llen_sv);
      __CrestClearStack(15049);
      __CrestLoad(15050, (unsigned long )0, (long long )0);
      __CrestStore(15051, (unsigned long )iflag);
# 176 "../HPL_pdlaswp00N.c"
      *iflag = 0;
    } else {
      __CrestBranch(15047, 5647, 0);

    }
    }
  }
  }
# 181 "../HPL_pdlaswp00N.c"
  mem_51 = llen_sv + myrow;
  __CrestLoad(15052, (unsigned long )mem_51, (long long )*mem_51);
  __CrestStore(15053, (unsigned long )(& ipA));
# 181 "../HPL_pdlaswp00N.c"
  ipA = *mem_51;
  __CrestLoad(15054, (unsigned long )0, (long long )0);
  __CrestStore(15055, (unsigned long )(& i));
# 182 "../HPL_pdlaswp00N.c"
  i = 0;
  {
# 182 "../HPL_pdlaswp00N.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(15058, (unsigned long )(& i), (long long )i);
    __CrestLoad(15057, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15056, 16, (long long )(i < nprow));
# 182 "../HPL_pdlaswp00N.c"
    if (i < nprow) {
      __CrestBranch(15059, 5653, 1);

    } else {
      __CrestBranch(15060, 5654, 0);
# 182 "../HPL_pdlaswp00N.c"
      goto while_break;
    }
    }
# 182 "../HPL_pdlaswp00N.c"
    mem_52 = llen + i;
# 182 "../HPL_pdlaswp00N.c"
    mem_53 = llen_sv + i;
    __CrestLoad(15061, (unsigned long )mem_53, (long long )*mem_53);
    __CrestStore(15062, (unsigned long )mem_52);
# 182 "../HPL_pdlaswp00N.c"
    *mem_52 = *mem_53;
    __CrestLoad(15065, (unsigned long )(& i), (long long )i);
    __CrestLoad(15064, (unsigned long )0, (long long )1);
    __CrestApply2(15063, 0, (long long )(i + 1));
    __CrestStore(15066, (unsigned long )(& i));
# 182 "../HPL_pdlaswp00N.c"
    i ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(15069, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15068, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15067, 12, (long long )(myrow == icurrow));
# 190 "../HPL_pdlaswp00N.c"
  if (myrow == icurrow) {
    __CrestBranch(15070, 5658, 1);
    __CrestLoad(15072, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(15073, (unsigned long )(& n), (long long )n);
    __CrestLoad(15074, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(15075, (unsigned long )(& jb), (long long )jb);
# 192 "../HPL_pdlaswp00N.c"
    HPL_dlaswp01N((int const )ipA, (int const )n, A, (int const )lda, U, (int const )jb,
                  (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(15076);
  } else {
    __CrestBranch(15071, 5659, 0);
    __CrestLoad(15077, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(15078, (unsigned long )(& n), (long long )n);
    __CrestLoad(15079, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(15080, (unsigned long )(& ldW), (long long )ldW);
# 196 "../HPL_pdlaswp00N.c"
    HPL_dlaswp02N((int const )ipA, (int const )n, (double const *)A, (int const )lda,
                  W, W + 1, (int const )ldW, (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(15081);
  }
  }
  {
  __CrestLoad(15084, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(15083, (unsigned long )0, (long long )2);
  __CrestApply2(15082, 12, (long long )(*IFLAG == 2));
# 201 "../HPL_pdlaswp00N.c"
  if (*IFLAG == 2) {
    __CrestBranch(15085, 5661, 1);
# 201 "../HPL_pdlaswp00N.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(15087);
  } else {
    __CrestBranch(15086, 5662, 0);

  }
  }
  {
  __CrestLoad(15090, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15089, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15088, 12, (long long )(myrow == icurrow));
# 236 "../HPL_pdlaswp00N.c"
  if (myrow == icurrow) {
    __CrestBranch(15091, 5664, 1);
# 236 "../HPL_pdlaswp00N.c"
    mem_54 = llen + myrow;
    __CrestLoad(15093, (unsigned long )0, (long long )0);
    __CrestStore(15094, (unsigned long )mem_54);
# 236 "../HPL_pdlaswp00N.c"
    *mem_54 = 0;
    __CrestLoad(15095, (unsigned long )0, (long long )0);
    __CrestStore(15096, (unsigned long )(& ipA));
# 236 "../HPL_pdlaswp00N.c"
    ipA = 0;
  } else {
    __CrestBranch(15092, 5665, 0);

  }
  }
  __CrestLoad(15097, (unsigned long )(& ipA), (long long )ipA);
  __CrestStore(15098, (unsigned long )(& ipW));
# 237 "../HPL_pdlaswp00N.c"
  ipW = ipA;
  __CrestLoad(15101, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(15100, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(15099, 1, (long long )((unsigned int )nprow - ip2));
  __CrestStore(15102, (unsigned long )(& size_));
# 238 "../HPL_pdlaswp00N.c"
  size_ = (int )((unsigned int )nprow - ip2);
  __CrestLoad(15105, (unsigned long )(& size_), (long long )size_);
  __CrestLoad(15104, (unsigned long )0, (long long )0);
  __CrestApply2(15103, 13, (long long )(size_ != 0));
  __CrestStore(15106, (unsigned long )(& Np2));
# 238 "../HPL_pdlaswp00N.c"
  Np2 = size_ != 0;
  {
  __CrestLoad(15109, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15108, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15107, 16, (long long )(myrow < icurrow));
# 239 "../HPL_pdlaswp00N.c"
  if (myrow < icurrow) {
    __CrestBranch(15110, 5668, 1);
    __CrestLoad(15116, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(15115, (unsigned long )(& myrow), (long long )myrow);
    __CrestApply2(15114, 0, (long long )(nprow + myrow));
    __CrestLoad(15113, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(15112, 1, (long long )((nprow + myrow) - icurrow));
    __CrestStore(15117, (unsigned long )(& tmp___0));
# 239 "../HPL_pdlaswp00N.c"
    tmp___0 = (nprow + myrow) - icurrow;
  } else {
    __CrestBranch(15111, 5669, 0);
    __CrestLoad(15120, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(15119, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(15118, 1, (long long )(myrow - icurrow));
    __CrestStore(15121, (unsigned long )(& tmp___0));
# 239 "../HPL_pdlaswp00N.c"
    tmp___0 = myrow - icurrow;
  }
  }
  __CrestLoad(15122, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(15123, (unsigned long )(& mydist));
# 239 "../HPL_pdlaswp00N.c"
  mydist = (unsigned int )tmp___0;
  {
  __CrestLoad(15126, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(15125, (unsigned long )0, (long long )0);
  __CrestApply2(15124, 13, (long long )(Np2 != 0));
# 245 "../HPL_pdlaswp00N.c"
  if (Np2 != 0) {
    __CrestBranch(15127, 5672, 1);
    __CrestLoad(15131, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(15130, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(15129, 7, (long long )(mydist ^ ip2));
    __CrestStore(15132, (unsigned long )(& partner));
# 245 "../HPL_pdlaswp00N.c"
    partner = (int )(mydist ^ ip2);
    {
    __CrestLoad(15135, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(15134, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15133, 16, (long long )(partner < nprow));
# 245 "../HPL_pdlaswp00N.c"
    if (partner < nprow) {
      __CrestBranch(15136, 5674, 1);
      {
      __CrestLoad(15142, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15141, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(15140, 0, (long long )(icurrow + partner));
      __CrestLoad(15139, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15138, 16, (long long )(icurrow + partner < nprow));
# 247 "../HPL_pdlaswp00N.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(15143, 5675, 1);
        __CrestLoad(15147, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15146, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15145, 0, (long long )(icurrow + partner));
        __CrestStore(15148, (unsigned long )(& partner));
# 247 "../HPL_pdlaswp00N.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(15144, 5676, 0);
        __CrestLoad(15153, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15152, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15151, 0, (long long )(icurrow + partner));
        __CrestLoad(15150, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15149, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(15154, (unsigned long )(& partner));
# 247 "../HPL_pdlaswp00N.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(15157, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(15156, (unsigned long )0, (long long )0U);
      __CrestApply2(15155, 12, (long long )(mydist == 0U));
# 249 "../HPL_pdlaswp00N.c"
      if (mydist == 0U) {
        __CrestBranch(15158, 5678, 1);
# 251 "../HPL_pdlaswp00N.c"
        mem_55 = llen + partner;
        __CrestLoad(15160, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(15161, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15164, (unsigned long )mem_55, (long long )*mem_55);
        __CrestLoad(15163, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(15162, 2, (long long )(*mem_55 * ldW));
        __CrestLoad(15165, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15166, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15167, (unsigned long )(& comm), (long long )comm);
# 251 "../HPL_pdlaswp00N.c"
        HPL_sdrv(U, usize, Cmsgid, W, *mem_55 * ldW, Cmsgid, partner, comm);
        __CrestClearStack(15168);
        {
# 253 "../HPL_pdlaswp00N.c"
        mem_56 = llen + partner;
        {
        __CrestLoad(15171, (unsigned long )mem_56, (long long )*mem_56);
        __CrestLoad(15170, (unsigned long )0, (long long )0);
        __CrestApply2(15169, 14, (long long )(*mem_56 > 0));
# 253 "../HPL_pdlaswp00N.c"
        if (*mem_56 > 0) {
          __CrestBranch(15172, 5682, 1);
# 254 "../HPL_pdlaswp00N.c"
          mem_57 = llen + partner;
          __CrestLoad(15174, (unsigned long )mem_57, (long long )*mem_57);
          __CrestLoad(15175, (unsigned long )(& n), (long long )n);
          __CrestLoad(15176, (unsigned long )(& jb), (long long )jb);
          __CrestLoad(15177, (unsigned long )(& ldW), (long long )ldW);
# 254 "../HPL_pdlaswp00N.c"
          HPL_dlaswp03N((int const )*mem_57, (int const )n, U, (int const )jb,
                        (double const *)W, (double const *)(W + 1), (int const )ldW);
          __CrestClearStack(15178);
        } else {
          __CrestBranch(15173, 5683, 0);

        }
        }
        }
      } else {
        __CrestBranch(15159, 5684, 0);
        {
        __CrestLoad(15181, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(15180, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(15179, 12, (long long )(mydist == ip2));
# 256 "../HPL_pdlaswp00N.c"
        if (mydist == ip2) {
          __CrestBranch(15182, 5685, 1);
# 258 "../HPL_pdlaswp00N.c"
          mem_58 = llen + myrow;
          __CrestLoad(15186, (unsigned long )mem_58, (long long )*mem_58);
          __CrestLoad(15185, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(15184, 2, (long long )(*mem_58 * ldW));
          __CrestLoad(15187, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15188, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(15189, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15190, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(15191, (unsigned long )(& comm), (long long )comm);
# 258 "../HPL_pdlaswp00N.c"
          HPL_sdrv(W, *mem_58 * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
          __CrestClearStack(15192);
        } else {
          __CrestBranch(15183, 5686, 0);
          {
          __CrestLoad(15197, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(15196, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(15195, 5, (long long )(mydist & ip2));
          __CrestLoad(15194, (unsigned long )0, (long long )0U);
          __CrestApply2(15193, 13, (long long )((mydist & ip2) != 0U));
# 263 "../HPL_pdlaswp00N.c"
          if ((mydist & ip2) != 0U) {
            __CrestBranch(15198, 5687, 1);
# 265 "../HPL_pdlaswp00N.c"
            mem_59 = llen + myrow;
            __CrestLoad(15202, (unsigned long )mem_59, (long long )*mem_59);
            __CrestLoad(15201, (unsigned long )(& ldW), (long long )ldW);
            __CrestApply2(15200, 2, (long long )(*mem_59 * ldW));
            __CrestLoad(15203, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(15204, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(15205, (unsigned long )(& comm), (long long )comm);
# 265 "../HPL_pdlaswp00N.c"
            HPL_send(W, *mem_59 * ldW, partner, Cmsgid, comm);
            __CrestClearStack(15206);
          } else {
            __CrestBranch(15199, 5688, 0);
# 269 "../HPL_pdlaswp00N.c"
            mem_60 = llen + partner;
            __CrestLoad(15209, (unsigned long )mem_60, (long long )*mem_60);
            __CrestLoad(15208, (unsigned long )(& ldW), (long long )ldW);
            __CrestApply2(15207, 2, (long long )(*mem_60 * ldW));
            __CrestLoad(15210, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(15211, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(15212, (unsigned long )(& comm), (long long )comm);
# 269 "../HPL_pdlaswp00N.c"
            HPL_recv((W + 0) + ipW * ldW, *mem_60 * ldW, partner, Cmsgid, comm);
            __CrestClearStack(15213);
            {
# 271 "../HPL_pdlaswp00N.c"
            mem_61 = llen + partner;
            {
            __CrestLoad(15216, (unsigned long )mem_61, (long long )*mem_61);
            __CrestLoad(15215, (unsigned long )0, (long long )0);
            __CrestApply2(15214, 14, (long long )(*mem_61 > 0));
# 271 "../HPL_pdlaswp00N.c"
            if (*mem_61 > 0) {
              __CrestBranch(15217, 5692, 1);
# 271 "../HPL_pdlaswp00N.c"
              mem_62 = llen + partner;
              __CrestLoad(15221, (unsigned long )(& ipW), (long long )ipW);
              __CrestLoad(15220, (unsigned long )mem_62, (long long )*mem_62);
              __CrestApply2(15219, 0, (long long )(ipW + *mem_62));
              __CrestStore(15222, (unsigned long )(& ipW));
# 271 "../HPL_pdlaswp00N.c"
              ipW += *mem_62;
            } else {
              __CrestBranch(15218, 5693, 0);

            }
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(15137, 5694, 0);

    }
    }
  } else {
    __CrestBranch(15128, 5695, 0);

  }
  }
  __CrestLoad(15223, (unsigned long )0, (long long )1);
  __CrestStore(15224, (unsigned long )(& i));
# 278 "../HPL_pdlaswp00N.c"
  i = 1;
  {
# 278 "../HPL_pdlaswp00N.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(15227, (unsigned long )(& i), (long long )i);
    __CrestLoad(15226, (unsigned long )(& size_), (long long )size_);
    __CrestApply2(15225, 16, (long long )(i < size_));
# 278 "../HPL_pdlaswp00N.c"
    if (i < size_) {
      __CrestBranch(15228, 5701, 1);

    } else {
      __CrestBranch(15229, 5702, 0);
# 278 "../HPL_pdlaswp00N.c"
      goto while_break___0;
    }
    }
    {
    __CrestLoad(15234, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestLoad(15233, (unsigned long )(& i), (long long )i);
    __CrestApply2(15232, 0, (long long )(icurrow + i));
    __CrestLoad(15231, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15230, 16, (long long )(icurrow + i < nprow));
# 280 "../HPL_pdlaswp00N.c"
    if (icurrow + i < nprow) {
      __CrestBranch(15235, 5704, 1);
      __CrestLoad(15239, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15238, (unsigned long )(& i), (long long )i);
      __CrestApply2(15237, 0, (long long )(icurrow + i));
      __CrestStore(15240, (unsigned long )(& iprow));
# 280 "../HPL_pdlaswp00N.c"
      iprow = icurrow + i;
    } else {
      __CrestBranch(15236, 5705, 0);
      __CrestLoad(15245, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15244, (unsigned long )(& i), (long long )i);
      __CrestApply2(15243, 0, (long long )(icurrow + i));
      __CrestLoad(15242, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15241, 1, (long long )((icurrow + i) - nprow));
      __CrestStore(15246, (unsigned long )(& iprow));
# 280 "../HPL_pdlaswp00N.c"
      iprow = (icurrow + i) - nprow;
    }
    }
    {
    __CrestLoad(15251, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(15250, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(15249, 0, (long long )(iprow + (int )ip2));
    __CrestLoad(15248, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15247, 16, (long long )(iprow + (int )ip2 < nprow));
# 281 "../HPL_pdlaswp00N.c"
    if (iprow + (int )ip2 < nprow) {
      __CrestBranch(15252, 5707, 1);
      __CrestLoad(15256, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(15255, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15254, 0, (long long )(iprow + (int )ip2));
      __CrestStore(15257, (unsigned long )(& partner));
# 281 "../HPL_pdlaswp00N.c"
      partner = iprow + (int )ip2;
    } else {
      __CrestBranch(15253, 5708, 0);
      __CrestLoad(15262, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(15261, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15260, 0, (long long )(iprow + (int )ip2));
      __CrestLoad(15259, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15258, 1, (long long )((iprow + (int )ip2) - nprow));
      __CrestStore(15263, (unsigned long )(& partner));
# 281 "../HPL_pdlaswp00N.c"
      partner = (iprow + (int )ip2) - nprow;
    }
    }
# 282 "../HPL_pdlaswp00N.c"
    mem_63 = llen + iprow;
# 282 "../HPL_pdlaswp00N.c"
    mem_64 = llen + iprow;
# 282 "../HPL_pdlaswp00N.c"
    mem_65 = llen + partner;
    __CrestLoad(15266, (unsigned long )mem_64, (long long )*mem_64);
    __CrestLoad(15265, (unsigned long )mem_65, (long long )*mem_65);
    __CrestApply2(15264, 0, (long long )(*mem_64 + *mem_65));
    __CrestStore(15267, (unsigned long )mem_63);
# 282 "../HPL_pdlaswp00N.c"
    *mem_63 = *mem_64 + *mem_65;
    __CrestLoad(15270, (unsigned long )(& i), (long long )i);
    __CrestLoad(15269, (unsigned long )0, (long long )1);
    __CrestApply2(15268, 0, (long long )(i + 1));
    __CrestStore(15271, (unsigned long )(& i));
# 278 "../HPL_pdlaswp00N.c"
    i ++;
  }
  while_break___0: ;
  }
  {
  __CrestLoad(15274, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(15273, (unsigned long )0, (long long )2);
  __CrestApply2(15272, 12, (long long )(*IFLAG == 2));
# 287 "../HPL_pdlaswp00N.c"
  if (*IFLAG == 2) {
    __CrestBranch(15275, 5712, 1);
# 287 "../HPL_pdlaswp00N.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(15277);
  } else {
    __CrestBranch(15276, 5713, 0);

  }
  }
  {
  __CrestLoad(15280, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(15279, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(15278, 16, (long long )(mydist < ip2));
# 296 "../HPL_pdlaswp00N.c"
  if (mydist < ip2) {
    __CrestBranch(15281, 5715, 1);
    __CrestLoad(15283, (unsigned long )0, (long long )0);
    __CrestStore(15284, (unsigned long )(& k));
# 298 "../HPL_pdlaswp00N.c"
    k = 0;
    {
# 300 "../HPL_pdlaswp00N.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(15287, (unsigned long )(& k), (long long )k);
      __CrestLoad(15286, (unsigned long )(& hdim), (long long )hdim);
      __CrestApply2(15285, 16, (long long )(k < hdim));
# 300 "../HPL_pdlaswp00N.c"
      if (k < hdim) {
        __CrestBranch(15288, 5720, 1);

      } else {
        __CrestBranch(15289, 5721, 0);
# 300 "../HPL_pdlaswp00N.c"
        goto while_break___1;
      }
      }
      __CrestLoad(15292, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(15291, (unsigned long )(& ipow), (long long )ipow);
      __CrestApply2(15290, 7, (long long )(mydist ^ ipow));
      __CrestStore(15293, (unsigned long )(& partner));
# 302 "../HPL_pdlaswp00N.c"
      partner = (int )(mydist ^ ipow);
      {
      __CrestLoad(15298, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15297, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(15296, 0, (long long )(icurrow + partner));
      __CrestLoad(15295, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15294, 16, (long long )(icurrow + partner < nprow));
# 303 "../HPL_pdlaswp00N.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(15299, 5724, 1);
        __CrestLoad(15303, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15302, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15301, 0, (long long )(icurrow + partner));
        __CrestStore(15304, (unsigned long )(& partner));
# 303 "../HPL_pdlaswp00N.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(15300, 5725, 0);
        __CrestLoad(15309, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15308, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15307, 0, (long long )(icurrow + partner));
        __CrestLoad(15306, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15305, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(15310, (unsigned long )(& partner));
# 303 "../HPL_pdlaswp00N.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(15317, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(15316, (unsigned long )(& k), (long long )k);
      __CrestLoad(15315, (unsigned long )0, (long long )1);
      __CrestApply2(15314, 0, (long long )(k + 1));
      __CrestApply2(15313, 9, (long long )(mydist >> (unsigned int )(k + 1)));
      __CrestLoad(15312, (unsigned long )0, (long long )0U);
      __CrestApply2(15311, 12, (long long )(mydist >> (unsigned int )(k + 1) == 0U));
# 312 "../HPL_pdlaswp00N.c"
      if (mydist >> (unsigned int )(k + 1) == 0U) {
        __CrestBranch(15318, 5727, 1);
        {
        __CrestLoad(15324, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(15323, (unsigned long )(& k), (long long )k);
        __CrestApply2(15322, 9, (long long )(mydist >> (unsigned int )k));
        __CrestLoad(15321, (unsigned long )0, (long long )0U);
        __CrestApply2(15320, 12, (long long )(mydist >> (unsigned int )k == 0U));
# 314 "../HPL_pdlaswp00N.c"
        if (mydist >> (unsigned int )k == 0U) {
          __CrestBranch(15325, 5728, 1);
# 316 "../HPL_pdlaswp00N.c"
          mem_66 = llen + partner;
          __CrestLoad(15327, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(15328, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15331, (unsigned long )mem_66, (long long )*mem_66);
          __CrestLoad(15330, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(15329, 2, (long long )(*mem_66 * ldW));
          __CrestLoad(15332, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15333, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(15334, (unsigned long )(& comm), (long long )comm);
# 316 "../HPL_pdlaswp00N.c"
          HPL_sdrv(U, usize, Cmsgid, (W + 0) + ipW * ldW, *mem_66 * ldW, Cmsgid, partner,
                   comm);
          __CrestClearStack(15335);
# 319 "../HPL_pdlaswp00N.c"
          mem_67 = llen + partner;
          __CrestLoad(15336, (unsigned long )mem_67, (long long )*mem_67);
          __CrestLoad(15337, (unsigned long )(& n), (long long )n);
          __CrestLoad(15338, (unsigned long )(& jb), (long long )jb);
          __CrestLoad(15339, (unsigned long )(& ldW), (long long )ldW);
# 319 "../HPL_pdlaswp00N.c"
          HPL_dlaswp03N((int const )*mem_67, (int const )n, U, (int const )jb,
                        (double const *)((W + 0) + ipW * ldW), (double const *)((W + 1) + ipW * ldW),
                        (int const )ldW);
          __CrestClearStack(15340);
# 321 "../HPL_pdlaswp00N.c"
          mem_68 = llen + partner;
          __CrestLoad(15343, (unsigned long )(& ipW), (long long )ipW);
          __CrestLoad(15342, (unsigned long )mem_68, (long long )*mem_68);
          __CrestApply2(15341, 0, (long long )(ipW + *mem_68));
          __CrestStore(15344, (unsigned long )(& ipW));
# 321 "../HPL_pdlaswp00N.c"
          ipW += *mem_68;
        } else {
          __CrestBranch(15326, 5729, 0);
# 325 "../HPL_pdlaswp00N.c"
          mem_69 = llen + myrow;
          __CrestLoad(15347, (unsigned long )mem_69, (long long )*mem_69);
          __CrestLoad(15346, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(15345, 2, (long long )(*mem_69 * ldW));
          __CrestLoad(15348, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15349, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(15350, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15351, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(15352, (unsigned long )(& comm), (long long )comm);
# 325 "../HPL_pdlaswp00N.c"
          HPL_sdrv(W, *mem_69 * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
          __CrestClearStack(15353);
# 327 "../HPL_pdlaswp00N.c"
          mem_70 = llen + myrow;
          __CrestLoad(15354, (unsigned long )(& ipA), (long long )ipA);
          __CrestLoad(15355, (unsigned long )mem_70, (long long )*mem_70);
          __CrestLoad(15356, (unsigned long )(& n), (long long )n);
          __CrestLoad(15357, (unsigned long )(& jb), (long long )jb);
          __CrestLoad(15358, (unsigned long )(& lda), (long long )lda);
          __CrestLoad(15359, (unsigned long )(& ldW), (long long )ldW);
# 327 "../HPL_pdlaswp00N.c"
          HPL_dlaswp04N((int const )ipA, (int const )*mem_70, (int const )n,
                        U, (int const )jb, A, (int const )lda, (double const *)W,
                        (double const *)(W + 1), (int const )ldW, (int const *)lindxA,
                        (int const *)lindxAU);
          __CrestClearStack(15360);
        }
        }
      } else {
        __CrestBranch(15319, 5730, 0);
# 333 "../HPL_pdlaswp00N.c"
        mem_71 = llen + myrow;
# 333 "../HPL_pdlaswp00N.c"
        mem_72 = llen + partner;
        __CrestLoad(15363, (unsigned long )mem_71, (long long )*mem_71);
        __CrestLoad(15362, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(15361, 2, (long long )(*mem_71 * ldW));
        __CrestLoad(15364, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15367, (unsigned long )mem_72, (long long )*mem_72);
        __CrestLoad(15366, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(15365, 2, (long long )(*mem_72 * ldW));
        __CrestLoad(15368, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15369, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15370, (unsigned long )(& comm), (long long )comm);
# 333 "../HPL_pdlaswp00N.c"
        HPL_sdrv(W, *mem_71 * ldW, Cmsgid, (W + 0) + ipW * ldW, *mem_72 * ldW, Cmsgid,
                 partner, comm);
        __CrestClearStack(15371);
# 336 "../HPL_pdlaswp00N.c"
        mem_73 = llen + partner;
        __CrestLoad(15374, (unsigned long )(& ipW), (long long )ipW);
        __CrestLoad(15373, (unsigned long )mem_73, (long long )*mem_73);
        __CrestApply2(15372, 0, (long long )(ipW + *mem_73));
        __CrestStore(15375, (unsigned long )(& ipW));
# 336 "../HPL_pdlaswp00N.c"
        ipW += *mem_73;
      }
      }
      __CrestLoad(15376, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestStore(15377, (unsigned long )(& iprow));
# 341 "../HPL_pdlaswp00N.c"
      iprow = icurrow;
      __CrestLoad(15378, (unsigned long )0, (long long )0U);
      __CrestStore(15379, (unsigned long )(& ipdist));
# 341 "../HPL_pdlaswp00N.c"
      ipdist = 0U;
      {
# 342 "../HPL_pdlaswp00N.c"
      while (1) {
        while_continue___2: ;
        __CrestLoad(15382, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(15381, (unsigned long )(& ipow), (long long )ipow);
        __CrestApply2(15380, 7, (long long )(ipdist ^ ipow));
        __CrestStore(15383, (unsigned long )(& partner));
# 344 "../HPL_pdlaswp00N.c"
        partner = (int )(ipdist ^ ipow);
        {
        __CrestLoad(15386, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15385, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestApply2(15384, 14, (long long )((unsigned int )partner > ipdist));
# 344 "../HPL_pdlaswp00N.c"
        if ((unsigned int )partner > ipdist) {
          __CrestBranch(15387, 5737, 1);
          {
          __CrestLoad(15393, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestLoad(15392, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(15391, 0, (long long )(icurrow + partner));
          __CrestLoad(15390, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(15389, 16, (long long )(icurrow + partner < nprow));
# 346 "../HPL_pdlaswp00N.c"
          if (icurrow + partner < nprow) {
            __CrestBranch(15394, 5738, 1);
            __CrestLoad(15398, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestLoad(15397, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(15396, 0, (long long )(icurrow + partner));
            __CrestStore(15399, (unsigned long )(& partner));
# 346 "../HPL_pdlaswp00N.c"
            partner = icurrow + partner;
          } else {
            __CrestBranch(15395, 5739, 0);
            __CrestLoad(15404, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestLoad(15403, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(15402, 0, (long long )(icurrow + partner));
            __CrestLoad(15401, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(15400, 1, (long long )((icurrow + partner) - nprow));
            __CrestStore(15405, (unsigned long )(& partner));
# 346 "../HPL_pdlaswp00N.c"
            partner = (icurrow + partner) - nprow;
          }
          }
# 347 "../HPL_pdlaswp00N.c"
          mem_74 = llen + iprow;
# 347 "../HPL_pdlaswp00N.c"
          mem_75 = llen + iprow;
# 347 "../HPL_pdlaswp00N.c"
          mem_76 = llen + partner;
          __CrestLoad(15408, (unsigned long )mem_75, (long long )*mem_75);
          __CrestLoad(15407, (unsigned long )mem_76, (long long )*mem_76);
          __CrestApply2(15406, 0, (long long )(*mem_75 + *mem_76));
          __CrestStore(15409, (unsigned long )mem_74);
# 347 "../HPL_pdlaswp00N.c"
          *mem_74 = *mem_75 + *mem_76;
# 348 "../HPL_pdlaswp00N.c"
          mem_77 = llen + partner;
# 348 "../HPL_pdlaswp00N.c"
          mem_78 = llen + iprow;
          __CrestLoad(15410, (unsigned long )mem_78, (long long )*mem_78);
          __CrestStore(15411, (unsigned long )mem_77);
# 348 "../HPL_pdlaswp00N.c"
          *mem_77 = *mem_78;
        } else {
          __CrestBranch(15388, 5741, 0);

        }
        }
        {
        __CrestLoad(15416, (unsigned long )(& iprow), (long long )iprow);
        __CrestLoad(15415, (unsigned long )0, (long long )1);
        __CrestApply2(15414, 0, (long long )(iprow + 1));
        __CrestLoad(15413, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15412, 16, (long long )(iprow + 1 < nprow));
# 350 "../HPL_pdlaswp00N.c"
        if (iprow + 1 < nprow) {
          __CrestBranch(15417, 5743, 1);
          __CrestLoad(15421, (unsigned long )(& iprow), (long long )iprow);
          __CrestLoad(15420, (unsigned long )0, (long long )1);
          __CrestApply2(15419, 0, (long long )(iprow + 1));
          __CrestStore(15422, (unsigned long )(& iprow));
# 350 "../HPL_pdlaswp00N.c"
          iprow ++;
        } else {
          __CrestBranch(15418, 5744, 0);
          __CrestLoad(15427, (unsigned long )(& iprow), (long long )iprow);
          __CrestLoad(15426, (unsigned long )0, (long long )1);
          __CrestApply2(15425, 0, (long long )(iprow + 1));
          __CrestLoad(15424, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(15423, 1, (long long )((iprow + 1) - nprow));
          __CrestStore(15428, (unsigned long )(& iprow));
# 350 "../HPL_pdlaswp00N.c"
          iprow = (iprow + 1) - nprow;
        }
        }
        __CrestLoad(15431, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(15430, (unsigned long )0, (long long )1U);
        __CrestApply2(15429, 0, (long long )(ipdist + 1U));
        __CrestStore(15432, (unsigned long )(& ipdist));
# 350 "../HPL_pdlaswp00N.c"
        ipdist ++;
        {
        __CrestLoad(15435, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(15434, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(15433, 17, (long long )(ipdist >= ip2));
# 342 "../HPL_pdlaswp00N.c"
        if (ipdist >= ip2) {
          __CrestBranch(15436, 5747, 1);
# 342 "../HPL_pdlaswp00N.c"
          goto while_break___2;
        } else {
          __CrestBranch(15437, 5748, 0);

        }
        }
      }
      while_break___2: ;
      }
      __CrestLoad(15440, (unsigned long )(& ipow), (long long )ipow);
      __CrestLoad(15439, (unsigned long )0, (long long )1);
      __CrestApply2(15438, 8, (long long )(ipow << 1));
      __CrestStore(15441, (unsigned long )(& ipow));
# 354 "../HPL_pdlaswp00N.c"
      ipow <<= 1;
      __CrestLoad(15444, (unsigned long )(& k), (long long )k);
      __CrestLoad(15443, (unsigned long )0, (long long )1);
      __CrestApply2(15442, 0, (long long )(k + 1));
      __CrestStore(15445, (unsigned long )(& k));
# 354 "../HPL_pdlaswp00N.c"
      k ++;
      {
      __CrestLoad(15448, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(15447, (unsigned long )0, (long long )2);
      __CrestApply2(15446, 12, (long long )(*IFLAG == 2));
# 358 "../HPL_pdlaswp00N.c"
      if (*IFLAG == 2) {
        __CrestBranch(15449, 5752, 1);
# 358 "../HPL_pdlaswp00N.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(15451);
      } else {
        __CrestBranch(15450, 5753, 0);

      }
      }
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(15282, 5755, 0);
    {
    __CrestLoad(15454, (unsigned long )(& size_), (long long )size_);
    __CrestLoad(15453, (unsigned long )0, (long long )1);
    __CrestApply2(15452, 14, (long long )(size_ > 1));
# 367 "../HPL_pdlaswp00N.c"
    if (size_ > 1) {
      __CrestBranch(15455, 5756, 1);
      __CrestLoad(15459, (unsigned long )(& size_), (long long )size_);
      __CrestLoad(15458, (unsigned long )0, (long long )1);
      __CrestApply2(15457, 1, (long long )(size_ - 1));
      __CrestStore(15460, (unsigned long )(& k));
# 369 "../HPL_pdlaswp00N.c"
      k = size_ - 1;
      {
# 370 "../HPL_pdlaswp00N.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(15463, (unsigned long )(& k), (long long )k);
        __CrestLoad(15462, (unsigned long )0, (long long )1);
        __CrestApply2(15461, 14, (long long )(k > 1));
# 370 "../HPL_pdlaswp00N.c"
        if (k > 1) {
          __CrestBranch(15464, 5761, 1);

        } else {
          __CrestBranch(15465, 5762, 0);
# 370 "../HPL_pdlaswp00N.c"
          goto while_break___3;
        }
        }
        __CrestLoad(15468, (unsigned long )(& k), (long long )k);
        __CrestLoad(15467, (unsigned long )0, (long long )1);
        __CrestApply2(15466, 9, (long long )(k >> 1));
        __CrestStore(15469, (unsigned long )(& k));
# 370 "../HPL_pdlaswp00N.c"
        k >>= 1;
        __CrestLoad(15472, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(15471, (unsigned long )0, (long long )1);
        __CrestApply2(15470, 8, (long long )(ip2_ << 1));
        __CrestStore(15473, (unsigned long )(& ip2_));
# 370 "../HPL_pdlaswp00N.c"
        ip2_ <<= 1;
        __CrestLoad(15476, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(15475, (unsigned long )0, (long long )1);
        __CrestApply2(15474, 8, (long long )(mask << 1));
        __CrestStore(15477, (unsigned long )(& mask));
# 370 "../HPL_pdlaswp00N.c"
        mask <<= 1;
        __CrestLoad(15480, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(15479, (unsigned long )0, (long long )1U);
        __CrestApply2(15478, 0, (long long )(mask + 1U));
        __CrestStore(15481, (unsigned long )(& mask));
# 370 "../HPL_pdlaswp00N.c"
        mask ++;
      }
      while_break___3: ;
      }
      {
      __CrestLoad(15486, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15485, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15484, 0, (long long )(icurrow + (int )ip2));
      __CrestLoad(15483, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15482, 16, (long long )(icurrow + (int )ip2 < nprow));
# 371 "../HPL_pdlaswp00N.c"
      if (icurrow + (int )ip2 < nprow) {
        __CrestBranch(15487, 5766, 1);
        __CrestLoad(15491, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15490, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(15489, 0, (long long )(icurrow + (int )ip2));
        __CrestStore(15492, (unsigned long )(& root));
# 371 "../HPL_pdlaswp00N.c"
        root = icurrow + (int )ip2;
      } else {
        __CrestBranch(15488, 5767, 0);
        __CrestLoad(15497, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15496, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(15495, 0, (long long )(icurrow + (int )ip2));
        __CrestLoad(15494, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15493, 1, (long long )((icurrow + (int )ip2) - nprow));
        __CrestStore(15498, (unsigned long )(& root));
# 371 "../HPL_pdlaswp00N.c"
        root = (icurrow + (int )ip2) - nprow;
      }
      }
      {
      __CrestLoad(15501, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(15500, (unsigned long )(& root), (long long )root);
      __CrestApply2(15499, 16, (long long )(myrow < root));
# 372 "../HPL_pdlaswp00N.c"
      if (myrow < root) {
        __CrestBranch(15502, 5769, 1);
        __CrestLoad(15508, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(15507, (unsigned long )(& myrow), (long long )myrow);
        __CrestApply2(15506, 0, (long long )(nprow + myrow));
        __CrestLoad(15505, (unsigned long )(& root), (long long )root);
        __CrestApply2(15504, 1, (long long )((nprow + myrow) - root));
        __CrestStore(15509, (unsigned long )(& tmp___1));
# 372 "../HPL_pdlaswp00N.c"
        tmp___1 = (nprow + myrow) - root;
      } else {
        __CrestBranch(15503, 5770, 0);
        __CrestLoad(15512, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(15511, (unsigned long )(& root), (long long )root);
        __CrestApply2(15510, 1, (long long )(myrow - root));
        __CrestStore(15513, (unsigned long )(& tmp___1));
# 372 "../HPL_pdlaswp00N.c"
        tmp___1 = myrow - root;
      }
      }
      __CrestLoad(15514, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(15515, (unsigned long )(& mydis_));
# 372 "../HPL_pdlaswp00N.c"
      mydis_ = (unsigned int )tmp___1;
      {
# 374 "../HPL_pdlaswp00N.c"
      while (1) {
        while_continue___4: ;
        __CrestLoad(15518, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(15517, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestApply2(15516, 7, (long long )(mask ^ ip2_));
        __CrestStore(15519, (unsigned long )(& mask));
# 376 "../HPL_pdlaswp00N.c"
        mask ^= ip2_;
        {
        __CrestLoad(15524, (unsigned long )(& mydis_), (long long )mydis_);
        __CrestLoad(15523, (unsigned long )(& mask), (long long )mask);
        __CrestApply2(15522, 5, (long long )(mydis_ & mask));
        __CrestLoad(15521, (unsigned long )0, (long long )0U);
        __CrestApply2(15520, 12, (long long )((mydis_ & mask) == 0U));
# 377 "../HPL_pdlaswp00N.c"
        if ((mydis_ & mask) == 0U) {
          __CrestBranch(15525, 5777, 1);
          __CrestLoad(15529, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(15528, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(15527, 7, (long long )(mydis_ ^ ip2_));
          __CrestStore(15530, (unsigned long )(& partner));
# 379 "../HPL_pdlaswp00N.c"
          partner = (int )(mydis_ ^ ip2_);
          {
          __CrestLoad(15535, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(15534, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(15533, 5, (long long )(mydis_ & ip2_));
          __CrestLoad(15532, (unsigned long )0, (long long )0U);
          __CrestApply2(15531, 13, (long long )((mydis_ & ip2_) != 0U));
# 380 "../HPL_pdlaswp00N.c"
          if ((mydis_ & ip2_) != 0U) {
            __CrestBranch(15536, 5779, 1);
            {
            __CrestLoad(15542, (unsigned long )(& root), (long long )root);
            __CrestLoad(15541, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(15540, 0, (long long )(root + partner));
            __CrestLoad(15539, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(15538, 16, (long long )(root + partner < nprow));
# 382 "../HPL_pdlaswp00N.c"
            if (root + partner < nprow) {
              __CrestBranch(15543, 5780, 1);
              __CrestLoad(15547, (unsigned long )(& root), (long long )root);
              __CrestLoad(15546, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(15545, 0, (long long )(root + partner));
              __CrestStore(15548, (unsigned long )(& tmp___2));
# 382 "../HPL_pdlaswp00N.c"
              tmp___2 = root + partner;
            } else {
              __CrestBranch(15544, 5781, 0);
              __CrestLoad(15553, (unsigned long )(& root), (long long )root);
              __CrestLoad(15552, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(15551, 0, (long long )(root + partner));
              __CrestLoad(15550, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(15549, 1, (long long )((root + partner) - nprow));
              __CrestStore(15554, (unsigned long )(& tmp___2));
# 382 "../HPL_pdlaswp00N.c"
              tmp___2 = (root + partner) - nprow;
            }
            }
            __CrestLoad(15555, (unsigned long )(& usize), (long long )usize);
            __CrestLoad(15556, (unsigned long )(& tmp___2), (long long )tmp___2);
            __CrestLoad(15557, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(15558, (unsigned long )(& comm), (long long )comm);
# 382 "../HPL_pdlaswp00N.c"
            HPL_recv(U, usize, tmp___2, Cmsgid, comm);
            __CrestClearStack(15559);
          } else {
            __CrestBranch(15537, 5783, 0);
            {
            __CrestLoad(15562, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(15561, (unsigned long )(& size_), (long long )size_);
            __CrestApply2(15560, 16, (long long )(partner < size_));
# 386 "../HPL_pdlaswp00N.c"
            if (partner < size_) {
              __CrestBranch(15563, 5784, 1);
              {
              __CrestLoad(15569, (unsigned long )(& root), (long long )root);
              __CrestLoad(15568, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(15567, 0, (long long )(root + partner));
              __CrestLoad(15566, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(15565, 16, (long long )(root + partner < nprow));
# 388 "../HPL_pdlaswp00N.c"
              if (root + partner < nprow) {
                __CrestBranch(15570, 5785, 1);
                __CrestLoad(15574, (unsigned long )(& root), (long long )root);
                __CrestLoad(15573, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(15572, 0, (long long )(root + partner));
                __CrestStore(15575, (unsigned long )(& tmp___3));
# 388 "../HPL_pdlaswp00N.c"
                tmp___3 = root + partner;
              } else {
                __CrestBranch(15571, 5786, 0);
                __CrestLoad(15580, (unsigned long )(& root), (long long )root);
                __CrestLoad(15579, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(15578, 0, (long long )(root + partner));
                __CrestLoad(15577, (unsigned long )(& nprow), (long long )nprow);
                __CrestApply2(15576, 1, (long long )((root + partner) - nprow));
                __CrestStore(15581, (unsigned long )(& tmp___3));
# 388 "../HPL_pdlaswp00N.c"
                tmp___3 = (root + partner) - nprow;
              }
              }
              __CrestLoad(15582, (unsigned long )(& usize), (long long )usize);
              __CrestLoad(15583, (unsigned long )(& tmp___3), (long long )tmp___3);
              __CrestLoad(15584, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(15585, (unsigned long )(& comm), (long long )comm);
# 388 "../HPL_pdlaswp00N.c"
              HPL_send(U, usize, tmp___3, Cmsgid, comm);
              __CrestClearStack(15586);
            } else {
              __CrestBranch(15564, 5788, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(15526, 5789, 0);

        }
        }
        __CrestLoad(15589, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(15588, (unsigned long )0, (long long )1);
        __CrestApply2(15587, 9, (long long )(ip2_ >> 1));
        __CrestStore(15590, (unsigned long )(& ip2_));
# 392 "../HPL_pdlaswp00N.c"
        ip2_ >>= 1;
        {
        __CrestLoad(15593, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestLoad(15592, (unsigned long )0, (long long )2);
        __CrestApply2(15591, 12, (long long )(*IFLAG == 2));
# 396 "../HPL_pdlaswp00N.c"
        if (*IFLAG == 2) {
          __CrestBranch(15594, 5792, 1);
# 396 "../HPL_pdlaswp00N.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(15596);
        } else {
          __CrestBranch(15595, 5793, 0);

        }
        }
        {
        __CrestLoad(15599, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(15598, (unsigned long )0, (long long )0U);
        __CrestApply2(15597, 15, (long long )(ip2_ <= 0U));
# 374 "../HPL_pdlaswp00N.c"
        if (ip2_ <= 0U) {
          __CrestBranch(15600, 5795, 1);
# 374 "../HPL_pdlaswp00N.c"
          goto while_break___4;
        } else {
          __CrestBranch(15601, 5796, 0);

        }
        }
      }
      while_break___4: ;
      }
    } else {
      __CrestBranch(15456, 5798, 0);

    }
    }
    __CrestLoad(15602, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(15603, (unsigned long )(& n), (long long )n);
    __CrestLoad(15604, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(15605, (unsigned long )(& jb), (long long )jb);
# 404 "../HPL_pdlaswp00N.c"
    HPL_dlaswp05N((int const )ipA, (int const )n, A, (int const )lda, (double const *)U,
                  (int const )jb, (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(15606);
  }
  }
  {
  __CrestLoad(15609, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(15608, (unsigned long )0, (long long )0);
  __CrestApply2(15607, 13, (long long )(Np2 != 0));
# 410 "../HPL_pdlaswp00N.c"
  if (Np2 != 0) {
    __CrestBranch(15610, 5801, 1);
    __CrestLoad(15614, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(15613, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(15612, 7, (long long )(mydist ^ ip2));
    __CrestStore(15615, (unsigned long )(& partner));
# 410 "../HPL_pdlaswp00N.c"
    partner = (int )(mydist ^ ip2);
    {
    __CrestLoad(15618, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(15617, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15616, 16, (long long )(partner < nprow));
# 410 "../HPL_pdlaswp00N.c"
    if (partner < nprow) {
      __CrestBranch(15619, 5803, 1);
      {
      __CrestLoad(15625, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15624, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(15623, 0, (long long )(icurrow + partner));
      __CrestLoad(15622, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15621, 16, (long long )(icurrow + partner < nprow));
# 412 "../HPL_pdlaswp00N.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(15626, 5804, 1);
        __CrestLoad(15630, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15629, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15628, 0, (long long )(icurrow + partner));
        __CrestStore(15631, (unsigned long )(& partner));
# 412 "../HPL_pdlaswp00N.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(15627, 5805, 0);
        __CrestLoad(15636, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15635, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15634, 0, (long long )(icurrow + partner));
        __CrestLoad(15633, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15632, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(15637, (unsigned long )(& partner));
# 412 "../HPL_pdlaswp00N.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(15642, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(15641, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15640, 5, (long long )(mydist & ip2));
      __CrestLoad(15639, (unsigned long )0, (long long )0U);
      __CrestApply2(15638, 13, (long long )((mydist & ip2) != 0U));
# 413 "../HPL_pdlaswp00N.c"
      if ((mydist & ip2) != 0U) {
        __CrestBranch(15643, 5807, 1);
        __CrestLoad(15645, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(15646, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15647, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15648, (unsigned long )(& comm), (long long )comm);
# 414 "../HPL_pdlaswp00N.c"
        HPL_recv(U, usize, partner, Cmsgid, comm);
        __CrestClearStack(15649);
      } else {
        __CrestBranch(15644, 5808, 0);
        __CrestLoad(15650, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(15651, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15652, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15653, (unsigned long )(& comm), (long long )comm);
# 416 "../HPL_pdlaswp00N.c"
        HPL_send(U, usize, partner, Cmsgid, comm);
        __CrestClearStack(15654);
      }
      }
    } else {
      __CrestBranch(15620, 5809, 0);

    }
    }
  } else {
    __CrestBranch(15611, 5810, 0);

  }
  }
  {
  __CrestLoad(15657, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(15656, (unsigned long )0, (long long )0);
  __CrestApply2(15655, 13, (long long )(vptr != 0));
# 419 "../HPL_pdlaswp00N.c"
  if (vptr != 0) {
    __CrestBranch(15658, 5812, 1);
# 419 "../HPL_pdlaswp00N.c"
    free(vptr);
    __CrestClearStack(15660);
  } else {
    __CrestBranch(15659, 5813, 0);

  }
  }
  {
  __CrestLoad(15663, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(15662, (unsigned long )0, (long long )2);
  __CrestApply2(15661, 12, (long long )(*IFLAG == 2));
# 423 "../HPL_pdlaswp00N.c"
  if (*IFLAG == 2) {
    __CrestBranch(15664, 5815, 1);
# 423 "../HPL_pdlaswp00N.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(15666);
  } else {
    __CrestBranch(15665, 5816, 0);

  }
  }

  return_label:
  {
  __CrestReturn(15667);
# 53 "../HPL_pdlaswp00N.c"
  return;
  }
}
}
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 156 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp00T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 53 "../HPL_pdlaswp00T.c"
void HPL_pdlaswp00T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  MPI_Comm comm ;
  HPL_T_grid *grid ;
  double *A ;
  double *U ;
  double *W ;
  void *vptr ;
  int *ipID ;
  int *lindxA ;
  int *lindxAU ;
  int *llen ;
  int *llen_sv ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipdist ;
  unsigned int ipow ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydis_ ;
  int Cmsgid ;
  int Np2 ;
  int align ;
  int hdim ;
  int i ;
  int icurrow ;
  int *iflag ;
  int ipA ;
  int ipW ;
  int *ipl ;
  int iprow ;
  int jb ;
  int k ;
  int lda ;
  int ldW ;
  int myrow ;
  int n ;
  int nprow ;
  int partner ;
  int root ;
  int size_ ;
  int usize ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  struct HPL_S_palg *mem_50 ;
  int *mem_51 ;
  int *mem_52 ;
  int *mem_53 ;
  int *mem_54 ;
  int *mem_55 ;
  int *mem_56 ;
  int *mem_57 ;
  int *mem_58 ;
  int *mem_59 ;
  int *mem_60 ;
  int *mem_61 ;
  int *mem_62 ;
  int *mem_63 ;
  int *mem_64 ;
  int *mem_65 ;
  int *mem_66 ;
  int *mem_67 ;
  int *mem_68 ;
  int *mem_69 ;
  int *mem_70 ;
  int *mem_71 ;
  int *mem_72 ;
  int *mem_73 ;
  int *mem_74 ;
  int *mem_75 ;
  int *mem_76 ;
  int *mem_77 ;
  int *mem_78 ;

  {
  __CrestCall(15669, 97);
  __CrestStore(15668, (unsigned long )(& NN));
# 118 "../HPL_pdlaswp00T.c"
  vptr = (void *)0;
  __CrestLoad(15670, (unsigned long )0, (long long )1U);
  __CrestStore(15671, (unsigned long )(& ip2_));
# 121 "../HPL_pdlaswp00T.c"
  ip2_ = 1U;
  __CrestLoad(15672, (unsigned long )0, (long long )1U);
  __CrestStore(15673, (unsigned long )(& ipow));
# 121 "../HPL_pdlaswp00T.c"
  ipow = 1U;
  __CrestLoad(15674, (unsigned long )0, (long long )1U);
  __CrestStore(15675, (unsigned long )(& mask));
# 121 "../HPL_pdlaswp00T.c"
  mask = 1U;
  __CrestLoad(15676, (unsigned long )0, (long long )1001);
  __CrestStore(15677, (unsigned long )(& Cmsgid));
# 123 "../HPL_pdlaswp00T.c"
  Cmsgid = 1001;
  {
  __CrestLoad(15680, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(15679, (unsigned long )(& PANEL->n), (long long )PANEL->n);
  __CrestApply2(15678, 16, (long long )(NN < (int const )PANEL->n));
# 131 "../HPL_pdlaswp00T.c"
  if (NN < (int const )PANEL->n) {
    __CrestBranch(15681, 5821, 1);
    __CrestLoad(15683, (unsigned long )(& NN), (long long )NN);
    __CrestStore(15684, (unsigned long )(& n));
# 131 "../HPL_pdlaswp00T.c"
    n = (int )NN;
  } else {
    __CrestBranch(15682, 5822, 0);
    __CrestLoad(15685, (unsigned long )(& PANEL->n), (long long )PANEL->n);
    __CrestStore(15686, (unsigned long )(& n));
# 131 "../HPL_pdlaswp00T.c"
    n = PANEL->n;
  }
  }
  __CrestLoad(15687, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(15688, (unsigned long )(& jb));
# 131 "../HPL_pdlaswp00T.c"
  jb = PANEL->jb;
  {
  __CrestLoad(15691, (unsigned long )(& n), (long long )n);
  __CrestLoad(15690, (unsigned long )0, (long long )0);
  __CrestApply2(15689, 15, (long long )(n <= 0));
# 135 "../HPL_pdlaswp00T.c"
  if (n <= 0) {
    __CrestBranch(15692, 5825, 1);
# 135 "../HPL_pdlaswp00T.c"
    goto return_label;
  } else {
    __CrestBranch(15693, 5827, 0);
    {
    __CrestLoad(15696, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(15695, (unsigned long )0, (long long )0);
    __CrestApply2(15694, 15, (long long )(jb <= 0));
# 135 "../HPL_pdlaswp00T.c"
    if (jb <= 0) {
      __CrestBranch(15697, 5828, 1);
# 135 "../HPL_pdlaswp00T.c"
      goto return_label;
    } else {
      __CrestBranch(15698, 5830, 0);

    }
    }
  }
  }
# 143 "../HPL_pdlaswp00T.c"
  grid = PANEL->grid;
  __CrestLoad(15699, (unsigned long )(& grid->nprow), (long long )grid->nprow);
  __CrestStore(15700, (unsigned long )(& nprow));
# 143 "../HPL_pdlaswp00T.c"
  nprow = grid->nprow;
  __CrestLoad(15701, (unsigned long )(& grid->myrow), (long long )grid->myrow);
  __CrestStore(15702, (unsigned long )(& myrow));
# 143 "../HPL_pdlaswp00T.c"
  myrow = grid->myrow;
  __CrestLoad(15703, (unsigned long )(& grid->col_comm), (long long )grid->col_comm);
  __CrestStore(15704, (unsigned long )(& comm));
# 144 "../HPL_pdlaswp00T.c"
  comm = grid->col_comm;
  __CrestLoad(15705, (unsigned long )(& grid->row_ip2), (long long )grid->row_ip2);
  __CrestStore(15706, (unsigned long )(& ip2));
# 144 "../HPL_pdlaswp00T.c"
  ip2 = (unsigned int )grid->row_ip2;
  __CrestLoad(15707, (unsigned long )(& grid->row_hdim), (long long )grid->row_hdim);
  __CrestStore(15708, (unsigned long )(& hdim));
# 145 "../HPL_pdlaswp00T.c"
  hdim = grid->row_hdim;
# 145 "../HPL_pdlaswp00T.c"
  mem_50 = PANEL->algo;
  __CrestLoad(15709, (unsigned long )(& mem_50->align), (long long )mem_50->align);
  __CrestStore(15710, (unsigned long )(& align));
# 145 "../HPL_pdlaswp00T.c"
  align = mem_50->align;
# 146 "../HPL_pdlaswp00T.c"
  A = PANEL->A;
# 146 "../HPL_pdlaswp00T.c"
  U = PANEL->U;
# 146 "../HPL_pdlaswp00T.c"
  iflag = PANEL->IWORK;
  __CrestLoad(15711, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(15712, (unsigned long )(& lda));
# 147 "../HPL_pdlaswp00T.c"
  lda = PANEL->lda;
  __CrestLoad(15713, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(15714, (unsigned long )(& icurrow));
# 147 "../HPL_pdlaswp00T.c"
  icurrow = PANEL->prow;
  __CrestLoad(15717, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15716, (unsigned long )(& n), (long long )n);
  __CrestApply2(15715, 2, (long long )(jb * n));
  __CrestStore(15718, (unsigned long )(& usize));
# 147 "../HPL_pdlaswp00T.c"
  usize = jb * n;
  __CrestLoad(15721, (unsigned long )(& n), (long long )n);
  __CrestLoad(15720, (unsigned long )0, (long long )1);
  __CrestApply2(15719, 0, (long long )(n + 1));
  __CrestStore(15722, (unsigned long )(& ldW));
# 148 "../HPL_pdlaswp00T.c"
  ldW = n + 1;
  __CrestLoad(15729, (unsigned long )(& align), (long long )align);
  __CrestLoad(15728, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15727, (unsigned long )(& ldW), (long long )ldW);
  __CrestApply2(15726, 2, (long long )(jb * ldW));
  __CrestApply2(15725, 0, (long long )(align + jb * ldW));
  __CrestLoad(15724, (unsigned long )0, (long long )sizeof(double ));
  __CrestApply2(15723, 2, (long long )((unsigned long )(align + jb * ldW) * sizeof(double )));
# 152 "../HPL_pdlaswp00T.c"
  tmp = malloc((unsigned long )(align + jb * ldW) * sizeof(double ));
  __CrestClearStack(15730);
# 152 "../HPL_pdlaswp00T.c"
  vptr = tmp;
  {
  __CrestLoad(15733, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(15732, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(15731, 12, (long long )((unsigned long )vptr == (unsigned long )((void *)0)));
# 153 "../HPL_pdlaswp00T.c"
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
    __CrestBranch(15734, 5833, 1);
    __CrestLoad(15736, (unsigned long )0, (long long )154);
# 154 "../HPL_pdlaswp00T.c"
    HPL_pabort(154, "HPL_pdlaswp00T", "Memory allocation failed");
    __CrestClearStack(15737);
  } else {
    __CrestBranch(15735, 5834, 0);

  }
  }
# 156 "../HPL_pdlaswp00T.c"
  W = (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double )));
  __CrestLoad(15740, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(15739, (unsigned long )0, (long long )1);
  __CrestApply2(15738, 8, (long long )((unsigned int )jb << 1));
  __CrestStore(15741, (unsigned long )(& k));
# 163 "../HPL_pdlaswp00T.c"
  k = (int )((unsigned int )jb << 1);
# 163 "../HPL_pdlaswp00T.c"
  ipl = iflag + 1;
# 163 "../HPL_pdlaswp00T.c"
  ipID = ipl + 1;
# 164 "../HPL_pdlaswp00T.c"
  lindxA = ipID + ((unsigned int )k << 1);
# 164 "../HPL_pdlaswp00T.c"
  lindxAU = lindxA + k;
# 165 "../HPL_pdlaswp00T.c"
  llen = lindxAU + k;
# 165 "../HPL_pdlaswp00T.c"
  llen_sv = llen + nprow;
  {
  __CrestLoad(15744, (unsigned long )iflag, (long long )*iflag);
  __CrestLoad(15743, (unsigned long )0, (long long )-1);
  __CrestApply2(15742, 12, (long long )(*iflag == -1));
# 167 "../HPL_pdlaswp00T.c"
  if (*iflag == -1) {
    __CrestBranch(15745, 5837, 1);
# 169 "../HPL_pdlaswp00T.c"
    HPL_pipid(PANEL, ipl, ipID);
    __CrestClearStack(15747);
    __CrestLoad(15748, (unsigned long )ipl, (long long )*ipl);
# 170 "../HPL_pdlaswp00T.c"
    HPL_plindx0(PANEL, (int const )*ipl, ipID, lindxA, lindxAU, llen_sv);
    __CrestClearStack(15749);
    __CrestLoad(15750, (unsigned long )0, (long long )0);
    __CrestStore(15751, (unsigned long )iflag);
# 171 "../HPL_pdlaswp00T.c"
    *iflag = 0;
  } else {
    __CrestBranch(15746, 5838, 0);
    {
    __CrestLoad(15754, (unsigned long )iflag, (long long )*iflag);
    __CrestLoad(15753, (unsigned long )0, (long long )1);
    __CrestApply2(15752, 12, (long long )(*iflag == 1));
# 173 "../HPL_pdlaswp00T.c"
    if (*iflag == 1) {
      __CrestBranch(15755, 5839, 1);
      __CrestLoad(15757, (unsigned long )ipl, (long long )*ipl);
# 175 "../HPL_pdlaswp00T.c"
      HPL_plindx0(PANEL, (int const )*ipl, ipID, lindxA, lindxAU, llen_sv);
      __CrestClearStack(15758);
      __CrestLoad(15759, (unsigned long )0, (long long )0);
      __CrestStore(15760, (unsigned long )iflag);
# 176 "../HPL_pdlaswp00T.c"
      *iflag = 0;
    } else {
      __CrestBranch(15756, 5840, 0);

    }
    }
  }
  }
# 181 "../HPL_pdlaswp00T.c"
  mem_51 = llen_sv + myrow;
  __CrestLoad(15761, (unsigned long )mem_51, (long long )*mem_51);
  __CrestStore(15762, (unsigned long )(& ipA));
# 181 "../HPL_pdlaswp00T.c"
  ipA = *mem_51;
  __CrestLoad(15763, (unsigned long )0, (long long )0);
  __CrestStore(15764, (unsigned long )(& i));
# 182 "../HPL_pdlaswp00T.c"
  i = 0;
  {
# 182 "../HPL_pdlaswp00T.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(15767, (unsigned long )(& i), (long long )i);
    __CrestLoad(15766, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15765, 16, (long long )(i < nprow));
# 182 "../HPL_pdlaswp00T.c"
    if (i < nprow) {
      __CrestBranch(15768, 5846, 1);

    } else {
      __CrestBranch(15769, 5847, 0);
# 182 "../HPL_pdlaswp00T.c"
      goto while_break;
    }
    }
# 182 "../HPL_pdlaswp00T.c"
    mem_52 = llen + i;
# 182 "../HPL_pdlaswp00T.c"
    mem_53 = llen_sv + i;
    __CrestLoad(15770, (unsigned long )mem_53, (long long )*mem_53);
    __CrestStore(15771, (unsigned long )mem_52);
# 182 "../HPL_pdlaswp00T.c"
    *mem_52 = *mem_53;
    __CrestLoad(15774, (unsigned long )(& i), (long long )i);
    __CrestLoad(15773, (unsigned long )0, (long long )1);
    __CrestApply2(15772, 0, (long long )(i + 1));
    __CrestStore(15775, (unsigned long )(& i));
# 182 "../HPL_pdlaswp00T.c"
    i ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(15778, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15777, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15776, 12, (long long )(myrow == icurrow));
# 190 "../HPL_pdlaswp00T.c"
  if (myrow == icurrow) {
    __CrestBranch(15779, 5851, 1);
    __CrestLoad(15781, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(15782, (unsigned long )(& n), (long long )n);
    __CrestLoad(15783, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(15784, (unsigned long )(& n), (long long )n);
# 192 "../HPL_pdlaswp00T.c"
    HPL_dlaswp01T((int const )ipA, (int const )n, A, (int const )lda, U, (int const )n,
                  (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(15785);
  } else {
    __CrestBranch(15780, 5852, 0);
    __CrestLoad(15786, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(15787, (unsigned long )(& n), (long long )n);
    __CrestLoad(15788, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(15789, (unsigned long )(& ldW), (long long )ldW);
# 196 "../HPL_pdlaswp00T.c"
    HPL_dlaswp02N((int const )ipA, (int const )n, (double const *)A, (int const )lda,
                  W, W + 1, (int const )ldW, (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(15790);
  }
  }
  {
  __CrestLoad(15793, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(15792, (unsigned long )0, (long long )2);
  __CrestApply2(15791, 12, (long long )(*IFLAG == 2));
# 201 "../HPL_pdlaswp00T.c"
  if (*IFLAG == 2) {
    __CrestBranch(15794, 5854, 1);
# 201 "../HPL_pdlaswp00T.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(15796);
  } else {
    __CrestBranch(15795, 5855, 0);

  }
  }
  {
  __CrestLoad(15799, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15798, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15797, 12, (long long )(myrow == icurrow));
# 236 "../HPL_pdlaswp00T.c"
  if (myrow == icurrow) {
    __CrestBranch(15800, 5857, 1);
# 236 "../HPL_pdlaswp00T.c"
    mem_54 = llen + myrow;
    __CrestLoad(15802, (unsigned long )0, (long long )0);
    __CrestStore(15803, (unsigned long )mem_54);
# 236 "../HPL_pdlaswp00T.c"
    *mem_54 = 0;
    __CrestLoad(15804, (unsigned long )0, (long long )0);
    __CrestStore(15805, (unsigned long )(& ipA));
# 236 "../HPL_pdlaswp00T.c"
    ipA = 0;
  } else {
    __CrestBranch(15801, 5858, 0);

  }
  }
  __CrestLoad(15806, (unsigned long )(& ipA), (long long )ipA);
  __CrestStore(15807, (unsigned long )(& ipW));
# 237 "../HPL_pdlaswp00T.c"
  ipW = ipA;
  __CrestLoad(15810, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(15809, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(15808, 1, (long long )((unsigned int )nprow - ip2));
  __CrestStore(15811, (unsigned long )(& size_));
# 238 "../HPL_pdlaswp00T.c"
  size_ = (int )((unsigned int )nprow - ip2);
  __CrestLoad(15814, (unsigned long )(& size_), (long long )size_);
  __CrestLoad(15813, (unsigned long )0, (long long )0);
  __CrestApply2(15812, 13, (long long )(size_ != 0));
  __CrestStore(15815, (unsigned long )(& Np2));
# 238 "../HPL_pdlaswp00T.c"
  Np2 = size_ != 0;
  {
  __CrestLoad(15818, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(15817, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(15816, 16, (long long )(myrow < icurrow));
# 239 "../HPL_pdlaswp00T.c"
  if (myrow < icurrow) {
    __CrestBranch(15819, 5861, 1);
    __CrestLoad(15825, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(15824, (unsigned long )(& myrow), (long long )myrow);
    __CrestApply2(15823, 0, (long long )(nprow + myrow));
    __CrestLoad(15822, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(15821, 1, (long long )((nprow + myrow) - icurrow));
    __CrestStore(15826, (unsigned long )(& tmp___0));
# 239 "../HPL_pdlaswp00T.c"
    tmp___0 = (nprow + myrow) - icurrow;
  } else {
    __CrestBranch(15820, 5862, 0);
    __CrestLoad(15829, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(15828, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(15827, 1, (long long )(myrow - icurrow));
    __CrestStore(15830, (unsigned long )(& tmp___0));
# 239 "../HPL_pdlaswp00T.c"
    tmp___0 = myrow - icurrow;
  }
  }
  __CrestLoad(15831, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestStore(15832, (unsigned long )(& mydist));
# 239 "../HPL_pdlaswp00T.c"
  mydist = (unsigned int )tmp___0;
  {
  __CrestLoad(15835, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(15834, (unsigned long )0, (long long )0);
  __CrestApply2(15833, 13, (long long )(Np2 != 0));
# 245 "../HPL_pdlaswp00T.c"
  if (Np2 != 0) {
    __CrestBranch(15836, 5865, 1);
    __CrestLoad(15840, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(15839, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(15838, 7, (long long )(mydist ^ ip2));
    __CrestStore(15841, (unsigned long )(& partner));
# 245 "../HPL_pdlaswp00T.c"
    partner = (int )(mydist ^ ip2);
    {
    __CrestLoad(15844, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(15843, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15842, 16, (long long )(partner < nprow));
# 245 "../HPL_pdlaswp00T.c"
    if (partner < nprow) {
      __CrestBranch(15845, 5867, 1);
      {
      __CrestLoad(15851, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15850, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(15849, 0, (long long )(icurrow + partner));
      __CrestLoad(15848, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15847, 16, (long long )(icurrow + partner < nprow));
# 247 "../HPL_pdlaswp00T.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(15852, 5868, 1);
        __CrestLoad(15856, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15855, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15854, 0, (long long )(icurrow + partner));
        __CrestStore(15857, (unsigned long )(& partner));
# 247 "../HPL_pdlaswp00T.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(15853, 5869, 0);
        __CrestLoad(15862, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(15861, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(15860, 0, (long long )(icurrow + partner));
        __CrestLoad(15859, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(15858, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(15863, (unsigned long )(& partner));
# 247 "../HPL_pdlaswp00T.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(15866, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(15865, (unsigned long )0, (long long )0U);
      __CrestApply2(15864, 12, (long long )(mydist == 0U));
# 249 "../HPL_pdlaswp00T.c"
      if (mydist == 0U) {
        __CrestBranch(15867, 5871, 1);
# 251 "../HPL_pdlaswp00T.c"
        mem_55 = llen + partner;
        __CrestLoad(15869, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(15870, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15873, (unsigned long )mem_55, (long long )*mem_55);
        __CrestLoad(15872, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(15871, 2, (long long )(*mem_55 * ldW));
        __CrestLoad(15874, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(15875, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(15876, (unsigned long )(& comm), (long long )comm);
# 251 "../HPL_pdlaswp00T.c"
        HPL_sdrv(U, usize, Cmsgid, W, *mem_55 * ldW, Cmsgid, partner, comm);
        __CrestClearStack(15877);
        {
# 253 "../HPL_pdlaswp00T.c"
        mem_56 = llen + partner;
        {
        __CrestLoad(15880, (unsigned long )mem_56, (long long )*mem_56);
        __CrestLoad(15879, (unsigned long )0, (long long )0);
        __CrestApply2(15878, 14, (long long )(*mem_56 > 0));
# 253 "../HPL_pdlaswp00T.c"
        if (*mem_56 > 0) {
          __CrestBranch(15881, 5875, 1);
# 254 "../HPL_pdlaswp00T.c"
          mem_57 = llen + partner;
          __CrestLoad(15883, (unsigned long )mem_57, (long long )*mem_57);
          __CrestLoad(15884, (unsigned long )(& n), (long long )n);
          __CrestLoad(15885, (unsigned long )(& n), (long long )n);
          __CrestLoad(15886, (unsigned long )(& ldW), (long long )ldW);
# 254 "../HPL_pdlaswp00T.c"
          HPL_dlaswp03T((int const )*mem_57, (int const )n, U, (int const )n,
                        (double const *)W, (double const *)(W + 1), (int const )ldW);
          __CrestClearStack(15887);
        } else {
          __CrestBranch(15882, 5876, 0);

        }
        }
        }
      } else {
        __CrestBranch(15868, 5877, 0);
        {
        __CrestLoad(15890, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(15889, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(15888, 12, (long long )(mydist == ip2));
# 256 "../HPL_pdlaswp00T.c"
        if (mydist == ip2) {
          __CrestBranch(15891, 5878, 1);
# 258 "../HPL_pdlaswp00T.c"
          mem_58 = llen + myrow;
          __CrestLoad(15895, (unsigned long )mem_58, (long long )*mem_58);
          __CrestLoad(15894, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(15893, 2, (long long )(*mem_58 * ldW));
          __CrestLoad(15896, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15897, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(15898, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(15899, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(15900, (unsigned long )(& comm), (long long )comm);
# 258 "../HPL_pdlaswp00T.c"
          HPL_sdrv(W, *mem_58 * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
          __CrestClearStack(15901);
        } else {
          __CrestBranch(15892, 5879, 0);
          {
          __CrestLoad(15906, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(15905, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(15904, 5, (long long )(mydist & ip2));
          __CrestLoad(15903, (unsigned long )0, (long long )0U);
          __CrestApply2(15902, 13, (long long )((mydist & ip2) != 0U));
# 263 "../HPL_pdlaswp00T.c"
          if ((mydist & ip2) != 0U) {
            __CrestBranch(15907, 5880, 1);
# 265 "../HPL_pdlaswp00T.c"
            mem_59 = llen + myrow;
            __CrestLoad(15911, (unsigned long )mem_59, (long long )*mem_59);
            __CrestLoad(15910, (unsigned long )(& ldW), (long long )ldW);
            __CrestApply2(15909, 2, (long long )(*mem_59 * ldW));
            __CrestLoad(15912, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(15913, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(15914, (unsigned long )(& comm), (long long )comm);
# 265 "../HPL_pdlaswp00T.c"
            HPL_send(W, *mem_59 * ldW, partner, Cmsgid, comm);
            __CrestClearStack(15915);
          } else {
            __CrestBranch(15908, 5881, 0);
# 269 "../HPL_pdlaswp00T.c"
            mem_60 = llen + partner;
            __CrestLoad(15918, (unsigned long )mem_60, (long long )*mem_60);
            __CrestLoad(15917, (unsigned long )(& ldW), (long long )ldW);
            __CrestApply2(15916, 2, (long long )(*mem_60 * ldW));
            __CrestLoad(15919, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(15920, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(15921, (unsigned long )(& comm), (long long )comm);
# 269 "../HPL_pdlaswp00T.c"
            HPL_recv((W + 0) + ipW * ldW, *mem_60 * ldW, partner, Cmsgid, comm);
            __CrestClearStack(15922);
            {
# 271 "../HPL_pdlaswp00T.c"
            mem_61 = llen + partner;
            {
            __CrestLoad(15925, (unsigned long )mem_61, (long long )*mem_61);
            __CrestLoad(15924, (unsigned long )0, (long long )0);
            __CrestApply2(15923, 14, (long long )(*mem_61 > 0));
# 271 "../HPL_pdlaswp00T.c"
            if (*mem_61 > 0) {
              __CrestBranch(15926, 5885, 1);
# 271 "../HPL_pdlaswp00T.c"
              mem_62 = llen + partner;
              __CrestLoad(15930, (unsigned long )(& ipW), (long long )ipW);
              __CrestLoad(15929, (unsigned long )mem_62, (long long )*mem_62);
              __CrestApply2(15928, 0, (long long )(ipW + *mem_62));
              __CrestStore(15931, (unsigned long )(& ipW));
# 271 "../HPL_pdlaswp00T.c"
              ipW += *mem_62;
            } else {
              __CrestBranch(15927, 5886, 0);

            }
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(15846, 5887, 0);

    }
    }
  } else {
    __CrestBranch(15837, 5888, 0);

  }
  }
  __CrestLoad(15932, (unsigned long )0, (long long )1);
  __CrestStore(15933, (unsigned long )(& i));
# 278 "../HPL_pdlaswp00T.c"
  i = 1;
  {
# 278 "../HPL_pdlaswp00T.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(15936, (unsigned long )(& i), (long long )i);
    __CrestLoad(15935, (unsigned long )(& size_), (long long )size_);
    __CrestApply2(15934, 16, (long long )(i < size_));
# 278 "../HPL_pdlaswp00T.c"
    if (i < size_) {
      __CrestBranch(15937, 5894, 1);

    } else {
      __CrestBranch(15938, 5895, 0);
# 278 "../HPL_pdlaswp00T.c"
      goto while_break___0;
    }
    }
    {
    __CrestLoad(15943, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestLoad(15942, (unsigned long )(& i), (long long )i);
    __CrestApply2(15941, 0, (long long )(icurrow + i));
    __CrestLoad(15940, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15939, 16, (long long )(icurrow + i < nprow));
# 280 "../HPL_pdlaswp00T.c"
    if (icurrow + i < nprow) {
      __CrestBranch(15944, 5897, 1);
      __CrestLoad(15948, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15947, (unsigned long )(& i), (long long )i);
      __CrestApply2(15946, 0, (long long )(icurrow + i));
      __CrestStore(15949, (unsigned long )(& iprow));
# 280 "../HPL_pdlaswp00T.c"
      iprow = icurrow + i;
    } else {
      __CrestBranch(15945, 5898, 0);
      __CrestLoad(15954, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(15953, (unsigned long )(& i), (long long )i);
      __CrestApply2(15952, 0, (long long )(icurrow + i));
      __CrestLoad(15951, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15950, 1, (long long )((icurrow + i) - nprow));
      __CrestStore(15955, (unsigned long )(& iprow));
# 280 "../HPL_pdlaswp00T.c"
      iprow = (icurrow + i) - nprow;
    }
    }
    {
    __CrestLoad(15960, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(15959, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(15958, 0, (long long )(iprow + (int )ip2));
    __CrestLoad(15957, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(15956, 16, (long long )(iprow + (int )ip2 < nprow));
# 281 "../HPL_pdlaswp00T.c"
    if (iprow + (int )ip2 < nprow) {
      __CrestBranch(15961, 5900, 1);
      __CrestLoad(15965, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(15964, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15963, 0, (long long )(iprow + (int )ip2));
      __CrestStore(15966, (unsigned long )(& partner));
# 281 "../HPL_pdlaswp00T.c"
      partner = iprow + (int )ip2;
    } else {
      __CrestBranch(15962, 5901, 0);
      __CrestLoad(15971, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(15970, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(15969, 0, (long long )(iprow + (int )ip2));
      __CrestLoad(15968, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(15967, 1, (long long )((iprow + (int )ip2) - nprow));
      __CrestStore(15972, (unsigned long )(& partner));
# 281 "../HPL_pdlaswp00T.c"
      partner = (iprow + (int )ip2) - nprow;
    }
    }
# 282 "../HPL_pdlaswp00T.c"
    mem_63 = llen + iprow;
# 282 "../HPL_pdlaswp00T.c"
    mem_64 = llen + iprow;
# 282 "../HPL_pdlaswp00T.c"
    mem_65 = llen + partner;
    __CrestLoad(15975, (unsigned long )mem_64, (long long )*mem_64);
    __CrestLoad(15974, (unsigned long )mem_65, (long long )*mem_65);
    __CrestApply2(15973, 0, (long long )(*mem_64 + *mem_65));
    __CrestStore(15976, (unsigned long )mem_63);
# 282 "../HPL_pdlaswp00T.c"
    *mem_63 = *mem_64 + *mem_65;
    __CrestLoad(15979, (unsigned long )(& i), (long long )i);
    __CrestLoad(15978, (unsigned long )0, (long long )1);
    __CrestApply2(15977, 0, (long long )(i + 1));
    __CrestStore(15980, (unsigned long )(& i));
# 278 "../HPL_pdlaswp00T.c"
    i ++;
  }
  while_break___0: ;
  }
  {
  __CrestLoad(15983, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(15982, (unsigned long )0, (long long )2);
  __CrestApply2(15981, 12, (long long )(*IFLAG == 2));
# 287 "../HPL_pdlaswp00T.c"
  if (*IFLAG == 2) {
    __CrestBranch(15984, 5905, 1);
# 287 "../HPL_pdlaswp00T.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(15986);
  } else {
    __CrestBranch(15985, 5906, 0);

  }
  }
  {
  __CrestLoad(15989, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(15988, (unsigned long )(& ip2), (long long )ip2);
  __CrestApply2(15987, 16, (long long )(mydist < ip2));
# 296 "../HPL_pdlaswp00T.c"
  if (mydist < ip2) {
    __CrestBranch(15990, 5908, 1);
    __CrestLoad(15992, (unsigned long )0, (long long )0);
    __CrestStore(15993, (unsigned long )(& k));
# 298 "../HPL_pdlaswp00T.c"
    k = 0;
    {
# 300 "../HPL_pdlaswp00T.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(15996, (unsigned long )(& k), (long long )k);
      __CrestLoad(15995, (unsigned long )(& hdim), (long long )hdim);
      __CrestApply2(15994, 16, (long long )(k < hdim));
# 300 "../HPL_pdlaswp00T.c"
      if (k < hdim) {
        __CrestBranch(15997, 5913, 1);

      } else {
        __CrestBranch(15998, 5914, 0);
# 300 "../HPL_pdlaswp00T.c"
        goto while_break___1;
      }
      }
      __CrestLoad(16001, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(16000, (unsigned long )(& ipow), (long long )ipow);
      __CrestApply2(15999, 7, (long long )(mydist ^ ipow));
      __CrestStore(16002, (unsigned long )(& partner));
# 302 "../HPL_pdlaswp00T.c"
      partner = (int )(mydist ^ ipow);
      {
      __CrestLoad(16007, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(16006, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(16005, 0, (long long )(icurrow + partner));
      __CrestLoad(16004, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(16003, 16, (long long )(icurrow + partner < nprow));
# 303 "../HPL_pdlaswp00T.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(16008, 5917, 1);
        __CrestLoad(16012, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16011, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(16010, 0, (long long )(icurrow + partner));
        __CrestStore(16013, (unsigned long )(& partner));
# 303 "../HPL_pdlaswp00T.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(16009, 5918, 0);
        __CrestLoad(16018, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16017, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(16016, 0, (long long )(icurrow + partner));
        __CrestLoad(16015, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16014, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(16019, (unsigned long )(& partner));
# 303 "../HPL_pdlaswp00T.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(16026, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(16025, (unsigned long )(& k), (long long )k);
      __CrestLoad(16024, (unsigned long )0, (long long )1);
      __CrestApply2(16023, 0, (long long )(k + 1));
      __CrestApply2(16022, 9, (long long )(mydist >> (unsigned int )(k + 1)));
      __CrestLoad(16021, (unsigned long )0, (long long )0U);
      __CrestApply2(16020, 12, (long long )(mydist >> (unsigned int )(k + 1) == 0U));
# 312 "../HPL_pdlaswp00T.c"
      if (mydist >> (unsigned int )(k + 1) == 0U) {
        __CrestBranch(16027, 5920, 1);
        {
        __CrestLoad(16033, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(16032, (unsigned long )(& k), (long long )k);
        __CrestApply2(16031, 9, (long long )(mydist >> (unsigned int )k));
        __CrestLoad(16030, (unsigned long )0, (long long )0U);
        __CrestApply2(16029, 12, (long long )(mydist >> (unsigned int )k == 0U));
# 314 "../HPL_pdlaswp00T.c"
        if (mydist >> (unsigned int )k == 0U) {
          __CrestBranch(16034, 5921, 1);
# 316 "../HPL_pdlaswp00T.c"
          mem_66 = llen + partner;
          __CrestLoad(16036, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(16037, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(16040, (unsigned long )mem_66, (long long )*mem_66);
          __CrestLoad(16039, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(16038, 2, (long long )(*mem_66 * ldW));
          __CrestLoad(16041, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(16042, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(16043, (unsigned long )(& comm), (long long )comm);
# 316 "../HPL_pdlaswp00T.c"
          HPL_sdrv(U, usize, Cmsgid, (W + 0) + ipW * ldW, *mem_66 * ldW, Cmsgid, partner,
                   comm);
          __CrestClearStack(16044);
# 319 "../HPL_pdlaswp00T.c"
          mem_67 = llen + partner;
          __CrestLoad(16045, (unsigned long )mem_67, (long long )*mem_67);
          __CrestLoad(16046, (unsigned long )(& n), (long long )n);
          __CrestLoad(16047, (unsigned long )(& n), (long long )n);
          __CrestLoad(16048, (unsigned long )(& ldW), (long long )ldW);
# 319 "../HPL_pdlaswp00T.c"
          HPL_dlaswp03T((int const )*mem_67, (int const )n, U, (int const )n,
                        (double const *)((W + 0) + ipW * ldW), (double const *)((W + 1) + ipW * ldW),
                        (int const )ldW);
          __CrestClearStack(16049);
# 321 "../HPL_pdlaswp00T.c"
          mem_68 = llen + partner;
          __CrestLoad(16052, (unsigned long )(& ipW), (long long )ipW);
          __CrestLoad(16051, (unsigned long )mem_68, (long long )*mem_68);
          __CrestApply2(16050, 0, (long long )(ipW + *mem_68));
          __CrestStore(16053, (unsigned long )(& ipW));
# 321 "../HPL_pdlaswp00T.c"
          ipW += *mem_68;
        } else {
          __CrestBranch(16035, 5922, 0);
# 325 "../HPL_pdlaswp00T.c"
          mem_69 = llen + myrow;
          __CrestLoad(16056, (unsigned long )mem_69, (long long )*mem_69);
          __CrestLoad(16055, (unsigned long )(& ldW), (long long )ldW);
          __CrestApply2(16054, 2, (long long )(*mem_69 * ldW));
          __CrestLoad(16057, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(16058, (unsigned long )(& usize), (long long )usize);
          __CrestLoad(16059, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(16060, (unsigned long )(& partner), (long long )partner);
          __CrestLoad(16061, (unsigned long )(& comm), (long long )comm);
# 325 "../HPL_pdlaswp00T.c"
          HPL_sdrv(W, *mem_69 * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
          __CrestClearStack(16062);
# 327 "../HPL_pdlaswp00T.c"
          mem_70 = llen + myrow;
          __CrestLoad(16063, (unsigned long )(& ipA), (long long )ipA);
          __CrestLoad(16064, (unsigned long )mem_70, (long long )*mem_70);
          __CrestLoad(16065, (unsigned long )(& n), (long long )n);
          __CrestLoad(16066, (unsigned long )(& n), (long long )n);
          __CrestLoad(16067, (unsigned long )(& lda), (long long )lda);
          __CrestLoad(16068, (unsigned long )(& ldW), (long long )ldW);
# 327 "../HPL_pdlaswp00T.c"
          HPL_dlaswp04T((int const )ipA, (int const )*mem_70, (int const )n,
                        U, (int const )n, A, (int const )lda, (double const *)W,
                        (double const *)(W + 1), (int const )ldW, (int const *)lindxA,
                        (int const *)lindxAU);
          __CrestClearStack(16069);
        }
        }
      } else {
        __CrestBranch(16028, 5923, 0);
# 333 "../HPL_pdlaswp00T.c"
        mem_71 = llen + myrow;
# 333 "../HPL_pdlaswp00T.c"
        mem_72 = llen + partner;
        __CrestLoad(16072, (unsigned long )mem_71, (long long )*mem_71);
        __CrestLoad(16071, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(16070, 2, (long long )(*mem_71 * ldW));
        __CrestLoad(16073, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(16076, (unsigned long )mem_72, (long long )*mem_72);
        __CrestLoad(16075, (unsigned long )(& ldW), (long long )ldW);
        __CrestApply2(16074, 2, (long long )(*mem_72 * ldW));
        __CrestLoad(16077, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(16078, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(16079, (unsigned long )(& comm), (long long )comm);
# 333 "../HPL_pdlaswp00T.c"
        HPL_sdrv(W, *mem_71 * ldW, Cmsgid, (W + 0) + ipW * ldW, *mem_72 * ldW, Cmsgid,
                 partner, comm);
        __CrestClearStack(16080);
# 336 "../HPL_pdlaswp00T.c"
        mem_73 = llen + partner;
        __CrestLoad(16083, (unsigned long )(& ipW), (long long )ipW);
        __CrestLoad(16082, (unsigned long )mem_73, (long long )*mem_73);
        __CrestApply2(16081, 0, (long long )(ipW + *mem_73));
        __CrestStore(16084, (unsigned long )(& ipW));
# 336 "../HPL_pdlaswp00T.c"
        ipW += *mem_73;
      }
      }
      __CrestLoad(16085, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestStore(16086, (unsigned long )(& iprow));
# 341 "../HPL_pdlaswp00T.c"
      iprow = icurrow;
      __CrestLoad(16087, (unsigned long )0, (long long )0U);
      __CrestStore(16088, (unsigned long )(& ipdist));
# 341 "../HPL_pdlaswp00T.c"
      ipdist = 0U;
      {
# 342 "../HPL_pdlaswp00T.c"
      while (1) {
        while_continue___2: ;
        __CrestLoad(16091, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(16090, (unsigned long )(& ipow), (long long )ipow);
        __CrestApply2(16089, 7, (long long )(ipdist ^ ipow));
        __CrestStore(16092, (unsigned long )(& partner));
# 344 "../HPL_pdlaswp00T.c"
        partner = (int )(ipdist ^ ipow);
        {
        __CrestLoad(16095, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(16094, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestApply2(16093, 14, (long long )((unsigned int )partner > ipdist));
# 344 "../HPL_pdlaswp00T.c"
        if ((unsigned int )partner > ipdist) {
          __CrestBranch(16096, 5930, 1);
          {
          __CrestLoad(16102, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestLoad(16101, (unsigned long )(& partner), (long long )partner);
          __CrestApply2(16100, 0, (long long )(icurrow + partner));
          __CrestLoad(16099, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16098, 16, (long long )(icurrow + partner < nprow));
# 346 "../HPL_pdlaswp00T.c"
          if (icurrow + partner < nprow) {
            __CrestBranch(16103, 5931, 1);
            __CrestLoad(16107, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestLoad(16106, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(16105, 0, (long long )(icurrow + partner));
            __CrestStore(16108, (unsigned long )(& partner));
# 346 "../HPL_pdlaswp00T.c"
            partner = icurrow + partner;
          } else {
            __CrestBranch(16104, 5932, 0);
            __CrestLoad(16113, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestLoad(16112, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(16111, 0, (long long )(icurrow + partner));
            __CrestLoad(16110, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16109, 1, (long long )((icurrow + partner) - nprow));
            __CrestStore(16114, (unsigned long )(& partner));
# 346 "../HPL_pdlaswp00T.c"
            partner = (icurrow + partner) - nprow;
          }
          }
# 347 "../HPL_pdlaswp00T.c"
          mem_74 = llen + iprow;
# 347 "../HPL_pdlaswp00T.c"
          mem_75 = llen + iprow;
# 347 "../HPL_pdlaswp00T.c"
          mem_76 = llen + partner;
          __CrestLoad(16117, (unsigned long )mem_75, (long long )*mem_75);
          __CrestLoad(16116, (unsigned long )mem_76, (long long )*mem_76);
          __CrestApply2(16115, 0, (long long )(*mem_75 + *mem_76));
          __CrestStore(16118, (unsigned long )mem_74);
# 347 "../HPL_pdlaswp00T.c"
          *mem_74 = *mem_75 + *mem_76;
# 348 "../HPL_pdlaswp00T.c"
          mem_77 = llen + partner;
# 348 "../HPL_pdlaswp00T.c"
          mem_78 = llen + iprow;
          __CrestLoad(16119, (unsigned long )mem_78, (long long )*mem_78);
          __CrestStore(16120, (unsigned long )mem_77);
# 348 "../HPL_pdlaswp00T.c"
          *mem_77 = *mem_78;
        } else {
          __CrestBranch(16097, 5934, 0);

        }
        }
        {
        __CrestLoad(16125, (unsigned long )(& iprow), (long long )iprow);
        __CrestLoad(16124, (unsigned long )0, (long long )1);
        __CrestApply2(16123, 0, (long long )(iprow + 1));
        __CrestLoad(16122, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16121, 16, (long long )(iprow + 1 < nprow));
# 350 "../HPL_pdlaswp00T.c"
        if (iprow + 1 < nprow) {
          __CrestBranch(16126, 5936, 1);
          __CrestLoad(16130, (unsigned long )(& iprow), (long long )iprow);
          __CrestLoad(16129, (unsigned long )0, (long long )1);
          __CrestApply2(16128, 0, (long long )(iprow + 1));
          __CrestStore(16131, (unsigned long )(& iprow));
# 350 "../HPL_pdlaswp00T.c"
          iprow ++;
        } else {
          __CrestBranch(16127, 5937, 0);
          __CrestLoad(16136, (unsigned long )(& iprow), (long long )iprow);
          __CrestLoad(16135, (unsigned long )0, (long long )1);
          __CrestApply2(16134, 0, (long long )(iprow + 1));
          __CrestLoad(16133, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16132, 1, (long long )((iprow + 1) - nprow));
          __CrestStore(16137, (unsigned long )(& iprow));
# 350 "../HPL_pdlaswp00T.c"
          iprow = (iprow + 1) - nprow;
        }
        }
        __CrestLoad(16140, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(16139, (unsigned long )0, (long long )1U);
        __CrestApply2(16138, 0, (long long )(ipdist + 1U));
        __CrestStore(16141, (unsigned long )(& ipdist));
# 350 "../HPL_pdlaswp00T.c"
        ipdist ++;
        {
        __CrestLoad(16144, (unsigned long )(& ipdist), (long long )ipdist);
        __CrestLoad(16143, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(16142, 17, (long long )(ipdist >= ip2));
# 342 "../HPL_pdlaswp00T.c"
        if (ipdist >= ip2) {
          __CrestBranch(16145, 5940, 1);
# 342 "../HPL_pdlaswp00T.c"
          goto while_break___2;
        } else {
          __CrestBranch(16146, 5941, 0);

        }
        }
      }
      while_break___2: ;
      }
      __CrestLoad(16149, (unsigned long )(& ipow), (long long )ipow);
      __CrestLoad(16148, (unsigned long )0, (long long )1);
      __CrestApply2(16147, 8, (long long )(ipow << 1));
      __CrestStore(16150, (unsigned long )(& ipow));
# 354 "../HPL_pdlaswp00T.c"
      ipow <<= 1;
      __CrestLoad(16153, (unsigned long )(& k), (long long )k);
      __CrestLoad(16152, (unsigned long )0, (long long )1);
      __CrestApply2(16151, 0, (long long )(k + 1));
      __CrestStore(16154, (unsigned long )(& k));
# 354 "../HPL_pdlaswp00T.c"
      k ++;
      {
      __CrestLoad(16157, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(16156, (unsigned long )0, (long long )2);
      __CrestApply2(16155, 12, (long long )(*IFLAG == 2));
# 358 "../HPL_pdlaswp00T.c"
      if (*IFLAG == 2) {
        __CrestBranch(16158, 5945, 1);
# 358 "../HPL_pdlaswp00T.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(16160);
      } else {
        __CrestBranch(16159, 5946, 0);

      }
      }
    }
    while_break___1: ;
    }
  } else {
    __CrestBranch(15991, 5948, 0);
    {
    __CrestLoad(16163, (unsigned long )(& size_), (long long )size_);
    __CrestLoad(16162, (unsigned long )0, (long long )1);
    __CrestApply2(16161, 14, (long long )(size_ > 1));
# 367 "../HPL_pdlaswp00T.c"
    if (size_ > 1) {
      __CrestBranch(16164, 5949, 1);
      __CrestLoad(16168, (unsigned long )(& size_), (long long )size_);
      __CrestLoad(16167, (unsigned long )0, (long long )1);
      __CrestApply2(16166, 1, (long long )(size_ - 1));
      __CrestStore(16169, (unsigned long )(& k));
# 369 "../HPL_pdlaswp00T.c"
      k = size_ - 1;
      {
# 370 "../HPL_pdlaswp00T.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(16172, (unsigned long )(& k), (long long )k);
        __CrestLoad(16171, (unsigned long )0, (long long )1);
        __CrestApply2(16170, 14, (long long )(k > 1));
# 370 "../HPL_pdlaswp00T.c"
        if (k > 1) {
          __CrestBranch(16173, 5954, 1);

        } else {
          __CrestBranch(16174, 5955, 0);
# 370 "../HPL_pdlaswp00T.c"
          goto while_break___3;
        }
        }
        __CrestLoad(16177, (unsigned long )(& k), (long long )k);
        __CrestLoad(16176, (unsigned long )0, (long long )1);
        __CrestApply2(16175, 9, (long long )(k >> 1));
        __CrestStore(16178, (unsigned long )(& k));
# 370 "../HPL_pdlaswp00T.c"
        k >>= 1;
        __CrestLoad(16181, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(16180, (unsigned long )0, (long long )1);
        __CrestApply2(16179, 8, (long long )(ip2_ << 1));
        __CrestStore(16182, (unsigned long )(& ip2_));
# 370 "../HPL_pdlaswp00T.c"
        ip2_ <<= 1;
        __CrestLoad(16185, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(16184, (unsigned long )0, (long long )1);
        __CrestApply2(16183, 8, (long long )(mask << 1));
        __CrestStore(16186, (unsigned long )(& mask));
# 370 "../HPL_pdlaswp00T.c"
        mask <<= 1;
        __CrestLoad(16189, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(16188, (unsigned long )0, (long long )1U);
        __CrestApply2(16187, 0, (long long )(mask + 1U));
        __CrestStore(16190, (unsigned long )(& mask));
# 370 "../HPL_pdlaswp00T.c"
        mask ++;
      }
      while_break___3: ;
      }
      {
      __CrestLoad(16195, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(16194, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(16193, 0, (long long )(icurrow + (int )ip2));
      __CrestLoad(16192, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(16191, 16, (long long )(icurrow + (int )ip2 < nprow));
# 371 "../HPL_pdlaswp00T.c"
      if (icurrow + (int )ip2 < nprow) {
        __CrestBranch(16196, 5959, 1);
        __CrestLoad(16200, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16199, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(16198, 0, (long long )(icurrow + (int )ip2));
        __CrestStore(16201, (unsigned long )(& root));
# 371 "../HPL_pdlaswp00T.c"
        root = icurrow + (int )ip2;
      } else {
        __CrestBranch(16197, 5960, 0);
        __CrestLoad(16206, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16205, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(16204, 0, (long long )(icurrow + (int )ip2));
        __CrestLoad(16203, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16202, 1, (long long )((icurrow + (int )ip2) - nprow));
        __CrestStore(16207, (unsigned long )(& root));
# 371 "../HPL_pdlaswp00T.c"
        root = (icurrow + (int )ip2) - nprow;
      }
      }
      {
      __CrestLoad(16210, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(16209, (unsigned long )(& root), (long long )root);
      __CrestApply2(16208, 16, (long long )(myrow < root));
# 372 "../HPL_pdlaswp00T.c"
      if (myrow < root) {
        __CrestBranch(16211, 5962, 1);
        __CrestLoad(16217, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(16216, (unsigned long )(& myrow), (long long )myrow);
        __CrestApply2(16215, 0, (long long )(nprow + myrow));
        __CrestLoad(16214, (unsigned long )(& root), (long long )root);
        __CrestApply2(16213, 1, (long long )((nprow + myrow) - root));
        __CrestStore(16218, (unsigned long )(& tmp___1));
# 372 "../HPL_pdlaswp00T.c"
        tmp___1 = (nprow + myrow) - root;
      } else {
        __CrestBranch(16212, 5963, 0);
        __CrestLoad(16221, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(16220, (unsigned long )(& root), (long long )root);
        __CrestApply2(16219, 1, (long long )(myrow - root));
        __CrestStore(16222, (unsigned long )(& tmp___1));
# 372 "../HPL_pdlaswp00T.c"
        tmp___1 = myrow - root;
      }
      }
      __CrestLoad(16223, (unsigned long )(& tmp___1), (long long )tmp___1);
      __CrestStore(16224, (unsigned long )(& mydis_));
# 372 "../HPL_pdlaswp00T.c"
      mydis_ = (unsigned int )tmp___1;
      {
# 374 "../HPL_pdlaswp00T.c"
      while (1) {
        while_continue___4: ;
        __CrestLoad(16227, (unsigned long )(& mask), (long long )mask);
        __CrestLoad(16226, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestApply2(16225, 7, (long long )(mask ^ ip2_));
        __CrestStore(16228, (unsigned long )(& mask));
# 376 "../HPL_pdlaswp00T.c"
        mask ^= ip2_;
        {
        __CrestLoad(16233, (unsigned long )(& mydis_), (long long )mydis_);
        __CrestLoad(16232, (unsigned long )(& mask), (long long )mask);
        __CrestApply2(16231, 5, (long long )(mydis_ & mask));
        __CrestLoad(16230, (unsigned long )0, (long long )0U);
        __CrestApply2(16229, 12, (long long )((mydis_ & mask) == 0U));
# 377 "../HPL_pdlaswp00T.c"
        if ((mydis_ & mask) == 0U) {
          __CrestBranch(16234, 5970, 1);
          __CrestLoad(16238, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(16237, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(16236, 7, (long long )(mydis_ ^ ip2_));
          __CrestStore(16239, (unsigned long )(& partner));
# 379 "../HPL_pdlaswp00T.c"
          partner = (int )(mydis_ ^ ip2_);
          {
          __CrestLoad(16244, (unsigned long )(& mydis_), (long long )mydis_);
          __CrestLoad(16243, (unsigned long )(& ip2_), (long long )ip2_);
          __CrestApply2(16242, 5, (long long )(mydis_ & ip2_));
          __CrestLoad(16241, (unsigned long )0, (long long )0U);
          __CrestApply2(16240, 13, (long long )((mydis_ & ip2_) != 0U));
# 380 "../HPL_pdlaswp00T.c"
          if ((mydis_ & ip2_) != 0U) {
            __CrestBranch(16245, 5972, 1);
            {
            __CrestLoad(16251, (unsigned long )(& root), (long long )root);
            __CrestLoad(16250, (unsigned long )(& partner), (long long )partner);
            __CrestApply2(16249, 0, (long long )(root + partner));
            __CrestLoad(16248, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16247, 16, (long long )(root + partner < nprow));
# 382 "../HPL_pdlaswp00T.c"
            if (root + partner < nprow) {
              __CrestBranch(16252, 5973, 1);
              __CrestLoad(16256, (unsigned long )(& root), (long long )root);
              __CrestLoad(16255, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(16254, 0, (long long )(root + partner));
              __CrestStore(16257, (unsigned long )(& tmp___2));
# 382 "../HPL_pdlaswp00T.c"
              tmp___2 = root + partner;
            } else {
              __CrestBranch(16253, 5974, 0);
              __CrestLoad(16262, (unsigned long )(& root), (long long )root);
              __CrestLoad(16261, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(16260, 0, (long long )(root + partner));
              __CrestLoad(16259, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(16258, 1, (long long )((root + partner) - nprow));
              __CrestStore(16263, (unsigned long )(& tmp___2));
# 382 "../HPL_pdlaswp00T.c"
              tmp___2 = (root + partner) - nprow;
            }
            }
            __CrestLoad(16264, (unsigned long )(& usize), (long long )usize);
            __CrestLoad(16265, (unsigned long )(& tmp___2), (long long )tmp___2);
            __CrestLoad(16266, (unsigned long )(& Cmsgid), (long long )Cmsgid);
            __CrestLoad(16267, (unsigned long )(& comm), (long long )comm);
# 382 "../HPL_pdlaswp00T.c"
            HPL_recv(U, usize, tmp___2, Cmsgid, comm);
            __CrestClearStack(16268);
          } else {
            __CrestBranch(16246, 5976, 0);
            {
            __CrestLoad(16271, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(16270, (unsigned long )(& size_), (long long )size_);
            __CrestApply2(16269, 16, (long long )(partner < size_));
# 386 "../HPL_pdlaswp00T.c"
            if (partner < size_) {
              __CrestBranch(16272, 5977, 1);
              {
              __CrestLoad(16278, (unsigned long )(& root), (long long )root);
              __CrestLoad(16277, (unsigned long )(& partner), (long long )partner);
              __CrestApply2(16276, 0, (long long )(root + partner));
              __CrestLoad(16275, (unsigned long )(& nprow), (long long )nprow);
              __CrestApply2(16274, 16, (long long )(root + partner < nprow));
# 388 "../HPL_pdlaswp00T.c"
              if (root + partner < nprow) {
                __CrestBranch(16279, 5978, 1);
                __CrestLoad(16283, (unsigned long )(& root), (long long )root);
                __CrestLoad(16282, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(16281, 0, (long long )(root + partner));
                __CrestStore(16284, (unsigned long )(& tmp___3));
# 388 "../HPL_pdlaswp00T.c"
                tmp___3 = root + partner;
              } else {
                __CrestBranch(16280, 5979, 0);
                __CrestLoad(16289, (unsigned long )(& root), (long long )root);
                __CrestLoad(16288, (unsigned long )(& partner), (long long )partner);
                __CrestApply2(16287, 0, (long long )(root + partner));
                __CrestLoad(16286, (unsigned long )(& nprow), (long long )nprow);
                __CrestApply2(16285, 1, (long long )((root + partner) - nprow));
                __CrestStore(16290, (unsigned long )(& tmp___3));
# 388 "../HPL_pdlaswp00T.c"
                tmp___3 = (root + partner) - nprow;
              }
              }
              __CrestLoad(16291, (unsigned long )(& usize), (long long )usize);
              __CrestLoad(16292, (unsigned long )(& tmp___3), (long long )tmp___3);
              __CrestLoad(16293, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(16294, (unsigned long )(& comm), (long long )comm);
# 388 "../HPL_pdlaswp00T.c"
              HPL_send(U, usize, tmp___3, Cmsgid, comm);
              __CrestClearStack(16295);
            } else {
              __CrestBranch(16273, 5981, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(16235, 5982, 0);

        }
        }
        __CrestLoad(16298, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(16297, (unsigned long )0, (long long )1);
        __CrestApply2(16296, 9, (long long )(ip2_ >> 1));
        __CrestStore(16299, (unsigned long )(& ip2_));
# 392 "../HPL_pdlaswp00T.c"
        ip2_ >>= 1;
        {
        __CrestLoad(16302, (unsigned long )IFLAG, (long long )*IFLAG);
        __CrestLoad(16301, (unsigned long )0, (long long )2);
        __CrestApply2(16300, 12, (long long )(*IFLAG == 2));
# 396 "../HPL_pdlaswp00T.c"
        if (*IFLAG == 2) {
          __CrestBranch(16303, 5985, 1);
# 396 "../HPL_pdlaswp00T.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(16305);
        } else {
          __CrestBranch(16304, 5986, 0);

        }
        }
        {
        __CrestLoad(16308, (unsigned long )(& ip2_), (long long )ip2_);
        __CrestLoad(16307, (unsigned long )0, (long long )0U);
        __CrestApply2(16306, 15, (long long )(ip2_ <= 0U));
# 374 "../HPL_pdlaswp00T.c"
        if (ip2_ <= 0U) {
          __CrestBranch(16309, 5988, 1);
# 374 "../HPL_pdlaswp00T.c"
          goto while_break___4;
        } else {
          __CrestBranch(16310, 5989, 0);

        }
        }
      }
      while_break___4: ;
      }
    } else {
      __CrestBranch(16165, 5991, 0);

    }
    }
    __CrestLoad(16311, (unsigned long )(& ipA), (long long )ipA);
    __CrestLoad(16312, (unsigned long )(& n), (long long )n);
    __CrestLoad(16313, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(16314, (unsigned long )(& n), (long long )n);
# 404 "../HPL_pdlaswp00T.c"
    HPL_dlaswp05T((int const )ipA, (int const )n, A, (int const )lda, (double const *)U,
                  (int const )n, (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(16315);
  }
  }
  {
  __CrestLoad(16318, (unsigned long )(& Np2), (long long )Np2);
  __CrestLoad(16317, (unsigned long )0, (long long )0);
  __CrestApply2(16316, 13, (long long )(Np2 != 0));
# 410 "../HPL_pdlaswp00T.c"
  if (Np2 != 0) {
    __CrestBranch(16319, 5994, 1);
    __CrestLoad(16323, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(16322, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(16321, 7, (long long )(mydist ^ ip2));
    __CrestStore(16324, (unsigned long )(& partner));
# 410 "../HPL_pdlaswp00T.c"
    partner = (int )(mydist ^ ip2);
    {
    __CrestLoad(16327, (unsigned long )(& partner), (long long )partner);
    __CrestLoad(16326, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(16325, 16, (long long )(partner < nprow));
# 410 "../HPL_pdlaswp00T.c"
    if (partner < nprow) {
      __CrestBranch(16328, 5996, 1);
      {
      __CrestLoad(16334, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestLoad(16333, (unsigned long )(& partner), (long long )partner);
      __CrestApply2(16332, 0, (long long )(icurrow + partner));
      __CrestLoad(16331, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(16330, 16, (long long )(icurrow + partner < nprow));
# 412 "../HPL_pdlaswp00T.c"
      if (icurrow + partner < nprow) {
        __CrestBranch(16335, 5997, 1);
        __CrestLoad(16339, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16338, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(16337, 0, (long long )(icurrow + partner));
        __CrestStore(16340, (unsigned long )(& partner));
# 412 "../HPL_pdlaswp00T.c"
        partner = icurrow + partner;
      } else {
        __CrestBranch(16336, 5998, 0);
        __CrestLoad(16345, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestLoad(16344, (unsigned long )(& partner), (long long )partner);
        __CrestApply2(16343, 0, (long long )(icurrow + partner));
        __CrestLoad(16342, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16341, 1, (long long )((icurrow + partner) - nprow));
        __CrestStore(16346, (unsigned long )(& partner));
# 412 "../HPL_pdlaswp00T.c"
        partner = (icurrow + partner) - nprow;
      }
      }
      {
      __CrestLoad(16351, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(16350, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(16349, 5, (long long )(mydist & ip2));
      __CrestLoad(16348, (unsigned long )0, (long long )0U);
      __CrestApply2(16347, 13, (long long )((mydist & ip2) != 0U));
# 413 "../HPL_pdlaswp00T.c"
      if ((mydist & ip2) != 0U) {
        __CrestBranch(16352, 6000, 1);
        __CrestLoad(16354, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(16355, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(16356, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(16357, (unsigned long )(& comm), (long long )comm);
# 414 "../HPL_pdlaswp00T.c"
        HPL_recv(U, usize, partner, Cmsgid, comm);
        __CrestClearStack(16358);
      } else {
        __CrestBranch(16353, 6001, 0);
        __CrestLoad(16359, (unsigned long )(& usize), (long long )usize);
        __CrestLoad(16360, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(16361, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(16362, (unsigned long )(& comm), (long long )comm);
# 416 "../HPL_pdlaswp00T.c"
        HPL_send(U, usize, partner, Cmsgid, comm);
        __CrestClearStack(16363);
      }
      }
    } else {
      __CrestBranch(16329, 6002, 0);

    }
    }
  } else {
    __CrestBranch(16320, 6003, 0);

  }
  }
  {
  __CrestLoad(16366, (unsigned long )(& vptr), (long long )((unsigned long )vptr));
  __CrestLoad(16365, (unsigned long )0, (long long )0);
  __CrestApply2(16364, 13, (long long )(vptr != 0));
# 419 "../HPL_pdlaswp00T.c"
  if (vptr != 0) {
    __CrestBranch(16367, 6005, 1);
# 419 "../HPL_pdlaswp00T.c"
    free(vptr);
    __CrestClearStack(16369);
  } else {
    __CrestBranch(16368, 6006, 0);

  }
  }
  {
  __CrestLoad(16372, (unsigned long )IFLAG, (long long )*IFLAG);
  __CrestLoad(16371, (unsigned long )0, (long long )2);
  __CrestApply2(16370, 12, (long long )(*IFLAG == 2));
# 423 "../HPL_pdlaswp00T.c"
  if (*IFLAG == 2) {
    __CrestBranch(16373, 6008, 1);
# 423 "../HPL_pdlaswp00T.c"
    HPL_bcast(PBCST, IFLAG);
    __CrestClearStack(16375);
  } else {
    __CrestBranch(16374, 6009, 0);

  }
  }

  return_label:
  {
  __CrestReturn(16376);
# 53 "../HPL_pdlaswp00T.c"
  return;
  }
}
}
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 164 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_perm(int const N , int *LINDXA , int *LINDXAU , int *IWORK ) ;
# 53 "../HPL_perm.c"
void HPL_perm(int const N , int *LINDXA , int *LINDXAU , int *IWORK )
{
  int i ;
  int j ;
  int k ;
  int fndd ;
  int *mem_9 ;
  int *mem_10 ;
  int *mem_11 ;
  int *mem_12 ;
  int *mem_13 ;
  int *mem_14 ;
  int *mem_15 ;
  int *mem_16 ;
  int *mem_17 ;
  int *mem_18 ;
  int *mem_19 ;
  int *mem_20 ;
  int *mem_21 ;

  {
  __CrestCall(16378, 98);
  __CrestStore(16377, (unsigned long )(& N));
  __CrestLoad(16379, (unsigned long )0, (long long )0);
  __CrestStore(16380, (unsigned long )(& i));
# 115 "../HPL_perm.c"
  i = 0;
  {
# 115 "../HPL_perm.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(16383, (unsigned long )(& i), (long long )i);
    __CrestLoad(16382, (unsigned long )(& N), (long long )N);
    __CrestApply2(16381, 16, (long long )(i < (int )N));
# 115 "../HPL_perm.c"
    if (i < (int )N) {
      __CrestBranch(16384, 6017, 1);

    } else {
      __CrestBranch(16385, 6018, 0);
# 115 "../HPL_perm.c"
      goto while_break;
    }
    }
# 115 "../HPL_perm.c"
    mem_9 = LINDXA + i;
# 115 "../HPL_perm.c"
    mem_10 = IWORK + *mem_9;
    __CrestLoad(16386, (unsigned long )(& i), (long long )i);
    __CrestStore(16387, (unsigned long )mem_10);
# 115 "../HPL_perm.c"
    *mem_10 = i;
    __CrestLoad(16390, (unsigned long )(& i), (long long )i);
    __CrestLoad(16389, (unsigned long )0, (long long )1);
    __CrestApply2(16388, 0, (long long )(i + 1));
    __CrestStore(16391, (unsigned long )(& i));
# 115 "../HPL_perm.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(16392, (unsigned long )0, (long long )0);
  __CrestStore(16393, (unsigned long )(& i));
# 116 "../HPL_perm.c"
  i = 0;
  {
# 116 "../HPL_perm.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(16396, (unsigned long )(& i), (long long )i);
    __CrestLoad(16395, (unsigned long )(& N), (long long )N);
    __CrestApply2(16394, 16, (long long )(i < (int )N));
# 116 "../HPL_perm.c"
    if (i < (int )N) {
      __CrestBranch(16397, 6026, 1);

    } else {
      __CrestBranch(16398, 6027, 0);
# 116 "../HPL_perm.c"
      goto while_break___0;
    }
    }
# 116 "../HPL_perm.c"
    mem_11 = LINDXA + i;
# 116 "../HPL_perm.c"
    mem_12 = IWORK + i;
# 116 "../HPL_perm.c"
    mem_13 = LINDXAU + *mem_12;
    __CrestLoad(16399, (unsigned long )mem_13, (long long )*mem_13);
    __CrestStore(16400, (unsigned long )mem_11);
# 116 "../HPL_perm.c"
    *mem_11 = *mem_13;
# 116 "../HPL_perm.c"
    mem_14 = IWORK + i;
    __CrestLoad(16401, (unsigned long )(& i), (long long )i);
    __CrestStore(16402, (unsigned long )mem_14);
# 116 "../HPL_perm.c"
    *mem_14 = i;
    __CrestLoad(16405, (unsigned long )(& i), (long long )i);
    __CrestLoad(16404, (unsigned long )0, (long long )1);
    __CrestApply2(16403, 0, (long long )(i + 1));
    __CrestStore(16406, (unsigned long )(& i));
# 116 "../HPL_perm.c"
    i ++;
  }
  while_break___0: ;
  }
  __CrestLoad(16407, (unsigned long )0, (long long )0);
  __CrestStore(16408, (unsigned long )(& i));
# 118 "../HPL_perm.c"
  i = 0;
  {
# 118 "../HPL_perm.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(16411, (unsigned long )(& i), (long long )i);
    __CrestLoad(16410, (unsigned long )(& N), (long long )N);
    __CrestApply2(16409, 16, (long long )(i < (int )N));
# 118 "../HPL_perm.c"
    if (i < (int )N) {
      __CrestBranch(16412, 6035, 1);

    } else {
      __CrestBranch(16413, 6036, 0);
# 118 "../HPL_perm.c"
      goto while_break___1;
    }
    }
    __CrestLoad(16414, (unsigned long )0, (long long )0);
    __CrestStore(16415, (unsigned long )(& j));
# 121 "../HPL_perm.c"
    j = 0;
    {
# 121 "../HPL_perm.c"
    while (1) {
      while_continue___2: ;
# 121 "../HPL_perm.c"
      mem_15 = LINDXA + j;
      __CrestLoad(16418, (unsigned long )mem_15, (long long )*mem_15);
      __CrestLoad(16417, (unsigned long )(& i), (long long )i);
      __CrestApply2(16416, 12, (long long )(*mem_15 == i));
      __CrestStore(16419, (unsigned long )(& fndd));
# 121 "../HPL_perm.c"
      fndd = *mem_15 == i;
      __CrestLoad(16422, (unsigned long )(& j), (long long )j);
      __CrestLoad(16421, (unsigned long )0, (long long )1);
      __CrestApply2(16420, 0, (long long )(j + 1));
      __CrestStore(16423, (unsigned long )(& j));
# 121 "../HPL_perm.c"
      j ++;
      {
      __CrestLoad(16426, (unsigned long )(& fndd), (long long )fndd);
      __CrestLoad(16425, (unsigned long )0, (long long )0);
      __CrestApply2(16424, 13, (long long )(fndd != 0));
# 121 "../HPL_perm.c"
      if (fndd != 0) {
        __CrestBranch(16427, 6043, 1);
# 121 "../HPL_perm.c"
        goto while_break___2;
      } else {
        __CrestBranch(16428, 6044, 0);

      }
      }
    }
    while_break___2: ;
    }
    __CrestLoad(16431, (unsigned long )(& j), (long long )j);
    __CrestLoad(16430, (unsigned long )0, (long long )1);
    __CrestApply2(16429, 1, (long long )(j - 1));
    __CrestStore(16432, (unsigned long )(& j));
# 121 "../HPL_perm.c"
    j --;
    __CrestLoad(16433, (unsigned long )0, (long long )0);
    __CrestStore(16434, (unsigned long )(& k));
# 123 "../HPL_perm.c"
    k = 0;
    {
# 123 "../HPL_perm.c"
    while (1) {
      while_continue___3: ;
# 123 "../HPL_perm.c"
      mem_16 = IWORK + k;
      __CrestLoad(16437, (unsigned long )mem_16, (long long )*mem_16);
      __CrestLoad(16436, (unsigned long )(& j), (long long )j);
      __CrestApply2(16435, 12, (long long )(*mem_16 == j));
      __CrestStore(16438, (unsigned long )(& fndd));
# 123 "../HPL_perm.c"
      fndd = *mem_16 == j;
      __CrestLoad(16441, (unsigned long )(& k), (long long )k);
      __CrestLoad(16440, (unsigned long )0, (long long )1);
      __CrestApply2(16439, 0, (long long )(k + 1));
      __CrestStore(16442, (unsigned long )(& k));
# 123 "../HPL_perm.c"
      k ++;
      {
      __CrestLoad(16445, (unsigned long )(& fndd), (long long )fndd);
      __CrestLoad(16444, (unsigned long )0, (long long )0);
      __CrestApply2(16443, 13, (long long )(fndd != 0));
# 123 "../HPL_perm.c"
      if (fndd != 0) {
        __CrestBranch(16446, 6052, 1);
# 123 "../HPL_perm.c"
        goto while_break___3;
      } else {
        __CrestBranch(16447, 6053, 0);

      }
      }
    }
    while_break___3: ;
    }
    __CrestLoad(16450, (unsigned long )(& k), (long long )k);
    __CrestLoad(16449, (unsigned long )0, (long long )1);
    __CrestApply2(16448, 1, (long long )(k - 1));
    __CrestStore(16451, (unsigned long )(& k));
# 123 "../HPL_perm.c"
    k --;
# 125 "../HPL_perm.c"
    mem_17 = IWORK + i;
    __CrestLoad(16452, (unsigned long )mem_17, (long long )*mem_17);
    __CrestStore(16453, (unsigned long )(& j));
# 125 "../HPL_perm.c"
    j = *mem_17;
# 125 "../HPL_perm.c"
    mem_18 = IWORK + i;
# 125 "../HPL_perm.c"
    mem_19 = IWORK + k;
    __CrestLoad(16454, (unsigned long )mem_19, (long long )*mem_19);
    __CrestStore(16455, (unsigned long )mem_18);
# 125 "../HPL_perm.c"
    *mem_18 = *mem_19;
# 125 "../HPL_perm.c"
    mem_20 = IWORK + k;
    __CrestLoad(16456, (unsigned long )(& j), (long long )j);
    __CrestStore(16457, (unsigned long )mem_20);
# 125 "../HPL_perm.c"
    *mem_20 = j;
# 126 "../HPL_perm.c"
    mem_21 = LINDXAU + i;
    __CrestLoad(16458, (unsigned long )(& k), (long long )k);
    __CrestStore(16459, (unsigned long )mem_21);
# 126 "../HPL_perm.c"
    *mem_21 = k;
    __CrestLoad(16462, (unsigned long )(& i), (long long )i);
    __CrestLoad(16461, (unsigned long )0, (long long )1);
    __CrestApply2(16460, 0, (long long )(i + 1));
    __CrestStore(16463, (unsigned long )(& i));
# 118 "../HPL_perm.c"
    i ++;
  }
  while_break___1: ;
  }

  {
  __CrestReturn(16464);
# 53 "../HPL_perm.c"
  return;
  }
}
}
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 171 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_logsort(int const NPROCS , int const ICURROC , int *IPLEN , int *IPMAP ,
                 int *IPMAPM1 ) ;
# 53 "../HPL_logsort.c"
void HPL_logsort(int const NPROCS , int const ICURROC , int *IPLEN , int *IPMAP ,
                 int *IPMAPM1 )
{
  int dist ;
  int i ;
  int ip ;
  int iplen_i ;
  int iplen_j ;
  int itmp ;
  int j ;
  int k ;
  int *mem_14 ;
  int *mem_15 ;
  int *mem_16 ;
  int *mem_17 ;
  int *mem_18 ;
  int *mem_19 ;
  int *mem_20 ;
  int *mem_21 ;
  int *mem_22 ;
  int *mem_23 ;
  int *mem_24 ;
  int *mem_25 ;
  int *mem_26 ;
  int *mem_27 ;
  int *mem_28 ;
  int *mem_29 ;
  int *mem_30 ;
  int *mem_31 ;
  int *mem_32 ;
  int *mem_33 ;
  int *mem_34 ;
  int *mem_35 ;
  int *mem_36 ;

  {
  __CrestCall(16467, 99);
  __CrestStore(16466, (unsigned long )(& ICURROC));
  __CrestStore(16465, (unsigned long )(& NPROCS));
  __CrestLoad(16468, (unsigned long )0, (long long )0);
  __CrestStore(16469, (unsigned long )(& j));
# 130 "../HPL_logsort.c"
  j = 0;
  __CrestLoad(16470, (unsigned long )0, (long long )0);
  __CrestStore(16471, (unsigned long )(& dist));
# 130 "../HPL_logsort.c"
  dist = 0;
  {
# 130 "../HPL_logsort.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(16474, (unsigned long )(& j), (long long )j);
    __CrestLoad(16473, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(16472, 16, (long long )(j < (int )NPROCS));
# 130 "../HPL_logsort.c"
    if (j < (int )NPROCS) {
      __CrestBranch(16475, 6064, 1);

    } else {
      __CrestBranch(16476, 6065, 0);
# 130 "../HPL_logsort.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(16481, (unsigned long )(& j), (long long )j);
    __CrestLoad(16480, (unsigned long )(& ICURROC), (long long )ICURROC);
    __CrestApply2(16479, 0, (long long )(j + (int )ICURROC));
    __CrestLoad(16478, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(16477, 16, (long long )(j + (int )ICURROC < (int )NPROCS));
# 132 "../HPL_logsort.c"
    if (j + (int )ICURROC < (int )NPROCS) {
      __CrestBranch(16482, 6067, 1);
# 132 "../HPL_logsort.c"
      mem_14 = IPMAP + j;
      __CrestLoad(16486, (unsigned long )(& j), (long long )j);
      __CrestLoad(16485, (unsigned long )(& ICURROC), (long long )ICURROC);
      __CrestApply2(16484, 0, (long long )(j + (int )ICURROC));
      __CrestStore(16487, (unsigned long )mem_14);
# 132 "../HPL_logsort.c"
      *mem_14 = j + (int )ICURROC;
    } else {
      __CrestBranch(16483, 6068, 0);
# 132 "../HPL_logsort.c"
      mem_15 = IPMAP + j;
      __CrestLoad(16492, (unsigned long )(& j), (long long )j);
      __CrestLoad(16491, (unsigned long )(& ICURROC), (long long )ICURROC);
      __CrestApply2(16490, 0, (long long )(j + (int )ICURROC));
      __CrestLoad(16489, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestApply2(16488, 1, (long long )((j + (int )ICURROC) - (int )NPROCS));
      __CrestStore(16493, (unsigned long )mem_15);
# 132 "../HPL_logsort.c"
      *mem_15 = (j + (int )ICURROC) - (int )NPROCS;
    }
    }
    __CrestLoad(16494, (unsigned long )(& j), (long long )j);
    __CrestStore(16495, (unsigned long )(& ip));
# 132 "../HPL_logsort.c"
    ip = j;
    __CrestLoad(16496, (unsigned long )0, (long long )0);
    __CrestStore(16497, (unsigned long )(& itmp));
# 132 "../HPL_logsort.c"
    itmp = 0;
    {
# 133 "../HPL_logsort.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(16502, (unsigned long )(& ip), (long long )ip);
      __CrestLoad(16501, (unsigned long )0, (long long )1);
      __CrestApply2(16500, 5, (long long )(ip & 1));
      __CrestLoad(16499, (unsigned long )0, (long long )0);
      __CrestApply2(16498, 13, (long long )((ip & 1) != 0));
# 133 "../HPL_logsort.c"
      if ((ip & 1) != 0) {
        __CrestBranch(16503, 6074, 1);
        __CrestLoad(16507, (unsigned long )(& itmp), (long long )itmp);
        __CrestLoad(16506, (unsigned long )0, (long long )1);
        __CrestApply2(16505, 0, (long long )(itmp + 1));
        __CrestStore(16508, (unsigned long )(& itmp));
# 133 "../HPL_logsort.c"
        itmp ++;
      } else {
        __CrestBranch(16504, 6075, 0);

      }
      }
      __CrestLoad(16511, (unsigned long )(& ip), (long long )ip);
      __CrestLoad(16510, (unsigned long )0, (long long )1);
      __CrestApply2(16509, 9, (long long )(ip >> 1));
      __CrestStore(16512, (unsigned long )(& ip));
# 133 "../HPL_logsort.c"
      ip >>= 1;
      {
      __CrestLoad(16515, (unsigned long )(& ip), (long long )ip);
      __CrestLoad(16514, (unsigned long )0, (long long )0);
      __CrestApply2(16513, 12, (long long )(ip == 0));
# 133 "../HPL_logsort.c"
      if (ip == 0) {
        __CrestBranch(16516, 6078, 1);
# 133 "../HPL_logsort.c"
        goto while_break___0;
      } else {
        __CrestBranch(16517, 6079, 0);

      }
      }
    }
    while_break___0: ;
    }
# 134 "../HPL_logsort.c"
    mem_16 = IPMAPM1 + j;
    __CrestLoad(16518, (unsigned long )(& itmp), (long long )itmp);
    __CrestStore(16519, (unsigned long )mem_16);
# 134 "../HPL_logsort.c"
    *mem_16 = itmp;
    {
    __CrestLoad(16522, (unsigned long )(& itmp), (long long )itmp);
    __CrestLoad(16521, (unsigned long )(& dist), (long long )dist);
    __CrestApply2(16520, 14, (long long )(itmp > dist));
# 134 "../HPL_logsort.c"
    if (itmp > dist) {
      __CrestBranch(16523, 6083, 1);
      __CrestLoad(16525, (unsigned long )(& itmp), (long long )itmp);
      __CrestStore(16526, (unsigned long )(& dist));
# 134 "../HPL_logsort.c"
      dist = itmp;
    } else {
      __CrestBranch(16524, 6084, 0);

    }
    }
    __CrestLoad(16529, (unsigned long )(& j), (long long )j);
    __CrestLoad(16528, (unsigned long )0, (long long )1);
    __CrestApply2(16527, 0, (long long )(j + 1));
    __CrestStore(16530, (unsigned long )(& j));
# 130 "../HPL_logsort.c"
    j ++;
  }
  while_break: ;
  }
  __CrestLoad(16531, (unsigned long )0, (long long )0);
  __CrestStore(16532, (unsigned long )(& j));
# 141 "../HPL_logsort.c"
  j = 0;
  {
# 141 "../HPL_logsort.c"
  while (1) {
    while_continue___1: ;
    {
    __CrestLoad(16535, (unsigned long )(& j), (long long )j);
    __CrestLoad(16534, (unsigned long )(& ICURROC), (long long )ICURROC);
    __CrestApply2(16533, 16, (long long )(j < (int )ICURROC));
# 141 "../HPL_logsort.c"
    if (j < (int )ICURROC) {
      __CrestBranch(16536, 6092, 1);

    } else {
      __CrestBranch(16537, 6093, 0);
# 141 "../HPL_logsort.c"
      goto while_break___1;
    }
    }
    __CrestLoad(16538, (unsigned long )0, (long long )2);
    __CrestStore(16539, (unsigned long )(& i));
# 143 "../HPL_logsort.c"
    i = 2;
# 143 "../HPL_logsort.c"
    mem_17 = IPLEN + 1;
    __CrestLoad(16540, (unsigned long )mem_17, (long long )*mem_17);
    __CrestStore(16541, (unsigned long )(& itmp));
# 143 "../HPL_logsort.c"
    itmp = *mem_17;
    {
# 143 "../HPL_logsort.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(16544, (unsigned long )(& i), (long long )i);
      __CrestLoad(16543, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestApply2(16542, 15, (long long )(i <= (int )NPROCS));
# 143 "../HPL_logsort.c"
      if (i <= (int )NPROCS) {
        __CrestBranch(16545, 6099, 1);

      } else {
        __CrestBranch(16546, 6100, 0);
# 143 "../HPL_logsort.c"
        goto while_break___2;
      }
      }
# 143 "../HPL_logsort.c"
      mem_18 = IPLEN + (i - 1);
# 143 "../HPL_logsort.c"
      mem_19 = IPLEN + i;
      __CrestLoad(16547, (unsigned long )mem_19, (long long )*mem_19);
      __CrestStore(16548, (unsigned long )mem_18);
# 143 "../HPL_logsort.c"
      *mem_18 = *mem_19;
      __CrestLoad(16551, (unsigned long )(& i), (long long )i);
      __CrestLoad(16550, (unsigned long )0, (long long )1);
      __CrestApply2(16549, 0, (long long )(i + 1));
      __CrestStore(16552, (unsigned long )(& i));
# 143 "../HPL_logsort.c"
      i ++;
    }
    while_break___2: ;
    }
# 144 "../HPL_logsort.c"
    mem_20 = IPLEN + NPROCS;
    __CrestLoad(16553, (unsigned long )(& itmp), (long long )itmp);
    __CrestStore(16554, (unsigned long )mem_20);
# 144 "../HPL_logsort.c"
    *mem_20 = itmp;
    __CrestLoad(16557, (unsigned long )(& j), (long long )j);
    __CrestLoad(16556, (unsigned long )0, (long long )1);
    __CrestApply2(16555, 0, (long long )(j + 1));
    __CrestStore(16558, (unsigned long )(& j));
# 141 "../HPL_logsort.c"
    j ++;
  }
  while_break___1: ;
  }
  __CrestLoad(16559, (unsigned long )0, (long long )1);
  __CrestStore(16560, (unsigned long )(& k));
# 149 "../HPL_logsort.c"
  k = 1;
  {
# 149 "../HPL_logsort.c"
  while (1) {
    while_continue___3: ;
    {
    __CrestLoad(16563, (unsigned long )(& k), (long long )k);
    __CrestLoad(16562, (unsigned long )(& dist), (long long )dist);
    __CrestApply2(16561, 15, (long long )(k <= dist));
# 149 "../HPL_logsort.c"
    if (k <= dist) {
      __CrestBranch(16564, 6110, 1);

    } else {
      __CrestBranch(16565, 6111, 0);
# 149 "../HPL_logsort.c"
      goto while_break___3;
    }
    }
    __CrestLoad(16566, (unsigned long )0, (long long )1);
    __CrestStore(16567, (unsigned long )(& j));
# 151 "../HPL_logsort.c"
    j = 1;
    {
# 151 "../HPL_logsort.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(16570, (unsigned long )(& j), (long long )j);
      __CrestLoad(16569, (unsigned long )(& NPROCS), (long long )NPROCS);
      __CrestApply2(16568, 16, (long long )(j < (int )NPROCS));
# 151 "../HPL_logsort.c"
      if (j < (int )NPROCS) {
        __CrestBranch(16571, 6117, 1);

      } else {
        __CrestBranch(16572, 6118, 0);
# 151 "../HPL_logsort.c"
        goto while_break___4;
      }
      }
      {
# 153 "../HPL_logsort.c"
      mem_21 = IPMAPM1 + j;
      {
      __CrestLoad(16575, (unsigned long )mem_21, (long long )*mem_21);
      __CrestLoad(16574, (unsigned long )(& k), (long long )k);
      __CrestApply2(16573, 12, (long long )(*mem_21 == k));
# 153 "../HPL_logsort.c"
      if (*mem_21 == k) {
        __CrestBranch(16576, 6122, 1);
        __CrestLoad(16578, (unsigned long )0, (long long )2);
        __CrestStore(16579, (unsigned long )(& i));
# 155 "../HPL_logsort.c"
        i = 2;
        {
# 155 "../HPL_logsort.c"
        while (1) {
          while_continue___5: ;
          {
          __CrestLoad(16582, (unsigned long )(& i), (long long )i);
          __CrestLoad(16581, (unsigned long )(& NPROCS), (long long )NPROCS);
          __CrestApply2(16580, 16, (long long )(i < (int )NPROCS));
# 155 "../HPL_logsort.c"
          if (i < (int )NPROCS) {
            __CrestBranch(16583, 6127, 1);

          } else {
            __CrestBranch(16584, 6128, 0);
# 155 "../HPL_logsort.c"
            goto while_break___5;
          }
          }
          {
# 157 "../HPL_logsort.c"
          mem_22 = IPMAPM1 + i;
          {
          __CrestLoad(16587, (unsigned long )(& k), (long long )k);
          __CrestLoad(16586, (unsigned long )mem_22, (long long )*mem_22);
          __CrestApply2(16585, 16, (long long )(k < *mem_22));
# 157 "../HPL_logsort.c"
          if (k < *mem_22) {
            __CrestBranch(16588, 6132, 1);
# 159 "../HPL_logsort.c"
            mem_23 = IPLEN + (i + 1);
            __CrestLoad(16590, (unsigned long )mem_23, (long long )*mem_23);
            __CrestStore(16591, (unsigned long )(& iplen_i));
# 159 "../HPL_logsort.c"
            iplen_i = *mem_23;
# 159 "../HPL_logsort.c"
            mem_24 = IPLEN + (j + 1);
            __CrestLoad(16592, (unsigned long )mem_24, (long long )*mem_24);
            __CrestStore(16593, (unsigned long )(& iplen_j));
# 159 "../HPL_logsort.c"
            iplen_j = *mem_24;
            {
            __CrestLoad(16596, (unsigned long )(& iplen_j), (long long )iplen_j);
            __CrestLoad(16595, (unsigned long )(& iplen_i), (long long )iplen_i);
            __CrestApply2(16594, 16, (long long )(iplen_j < iplen_i));
# 161 "../HPL_logsort.c"
            if (iplen_j < iplen_i) {
              __CrestBranch(16597, 6134, 1);
# 163 "../HPL_logsort.c"
              mem_25 = IPLEN + (j + 1);
              __CrestLoad(16599, (unsigned long )(& iplen_i), (long long )iplen_i);
              __CrestStore(16600, (unsigned long )mem_25);
# 163 "../HPL_logsort.c"
              *mem_25 = iplen_i;
# 163 "../HPL_logsort.c"
              mem_26 = IPLEN + (i + 1);
              __CrestLoad(16601, (unsigned long )(& iplen_j), (long long )iplen_j);
              __CrestStore(16602, (unsigned long )mem_26);
# 163 "../HPL_logsort.c"
              *mem_26 = iplen_j;
# 164 "../HPL_logsort.c"
              mem_27 = IPMAP + j;
              __CrestLoad(16603, (unsigned long )mem_27, (long long )*mem_27);
              __CrestStore(16604, (unsigned long )(& itmp));
# 164 "../HPL_logsort.c"
              itmp = *mem_27;
# 164 "../HPL_logsort.c"
              mem_28 = IPMAP + j;
# 164 "../HPL_logsort.c"
              mem_29 = IPMAP + i;
              __CrestLoad(16605, (unsigned long )mem_29, (long long )*mem_29);
              __CrestStore(16606, (unsigned long )mem_28);
# 164 "../HPL_logsort.c"
              *mem_28 = *mem_29;
# 165 "../HPL_logsort.c"
              mem_30 = IPMAP + i;
              __CrestLoad(16607, (unsigned long )(& itmp), (long long )itmp);
              __CrestStore(16608, (unsigned long )mem_30);
# 165 "../HPL_logsort.c"
              *mem_30 = itmp;
            } else {
              __CrestBranch(16598, 6135, 0);

            }
            }
          } else {
            __CrestBranch(16589, 6136, 0);

          }
          }
          }
          __CrestLoad(16611, (unsigned long )(& i), (long long )i);
          __CrestLoad(16610, (unsigned long )0, (long long )1);
          __CrestApply2(16609, 0, (long long )(i + 1));
          __CrestStore(16612, (unsigned long )(& i));
# 155 "../HPL_logsort.c"
          i ++;
        }
        while_break___5: ;
        }
      } else {
        __CrestBranch(16577, 6139, 0);

      }
      }
      }
      __CrestLoad(16615, (unsigned long )(& j), (long long )j);
      __CrestLoad(16614, (unsigned long )0, (long long )1);
      __CrestApply2(16613, 0, (long long )(j + 1));
      __CrestStore(16616, (unsigned long )(& j));
# 151 "../HPL_logsort.c"
      j ++;
    }
    while_break___4: ;
    }
    __CrestLoad(16619, (unsigned long )(& k), (long long )k);
    __CrestLoad(16618, (unsigned long )0, (long long )1);
    __CrestApply2(16617, 0, (long long )(k + 1));
    __CrestStore(16620, (unsigned long )(& k));
# 149 "../HPL_logsort.c"
    k ++;
  }
  while_break___3: ;
  }
# 175 "../HPL_logsort.c"
  mem_31 = IPLEN + 0;
  __CrestLoad(16621, (unsigned long )0, (long long )0);
  __CrestStore(16622, (unsigned long )mem_31);
# 175 "../HPL_logsort.c"
  *mem_31 = 0;
  __CrestLoad(16623, (unsigned long )0, (long long )0);
  __CrestStore(16624, (unsigned long )(& i));
# 177 "../HPL_logsort.c"
  i = 0;
  {
# 177 "../HPL_logsort.c"
  while (1) {
    while_continue___6: ;
    {
    __CrestLoad(16627, (unsigned long )(& i), (long long )i);
    __CrestLoad(16626, (unsigned long )(& NPROCS), (long long )NPROCS);
    __CrestApply2(16625, 16, (long long )(i < (int )NPROCS));
# 177 "../HPL_logsort.c"
    if (i < (int )NPROCS) {
      __CrestBranch(16628, 6149, 1);

    } else {
      __CrestBranch(16629, 6150, 0);
# 177 "../HPL_logsort.c"
      goto while_break___6;
    }
    }
# 179 "../HPL_logsort.c"
    mem_32 = IPMAP + i;
# 179 "../HPL_logsort.c"
    mem_33 = IPMAPM1 + *mem_32;
    __CrestLoad(16630, (unsigned long )(& i), (long long )i);
    __CrestStore(16631, (unsigned long )mem_33);
# 179 "../HPL_logsort.c"
    *mem_33 = i;
# 180 "../HPL_logsort.c"
    mem_34 = IPLEN + (i + 1);
# 180 "../HPL_logsort.c"
    mem_35 = IPLEN + (i + 1);
# 180 "../HPL_logsort.c"
    mem_36 = IPLEN + i;
    __CrestLoad(16634, (unsigned long )mem_35, (long long )*mem_35);
    __CrestLoad(16633, (unsigned long )mem_36, (long long )*mem_36);
    __CrestApply2(16632, 0, (long long )(*mem_35 + *mem_36));
    __CrestStore(16635, (unsigned long )mem_34);
# 180 "../HPL_logsort.c"
    *mem_34 = *mem_35 + *mem_36;
    __CrestLoad(16638, (unsigned long )(& i), (long long )i);
    __CrestLoad(16637, (unsigned long )0, (long long )1);
    __CrestApply2(16636, 0, (long long )(i + 1));
    __CrestStore(16639, (unsigned long )(& i));
# 177 "../HPL_logsort.c"
    i ++;
  }
  while_break___6: ;
  }

  {
  __CrestReturn(16640);
# 53 "../HPL_logsort.c"
  return;
  }
}
}
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 179 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx10(HPL_T_panel *PANEL , int const K , int const *IPID , int *IPLEN ,
                  int *IPMAP , int *IPMAPM1 ) ;
# 53 "../HPL_plindx10.c"
void HPL_plindx10(HPL_T_panel *PANEL , int const K , int const *IPID , int *IPLEN ,
                  int *IPMAP , int *IPMAPM1 )
{
  int dst ;
  int dstrow ;
  int i ;
  int ia ;
  int icurrow ;
  int jb ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;
  struct HPL_S_grid *mem_17 ;
  int *mem_18 ;
  int const *mem_19 ;
  int const *mem_20 ;
  int *mem_21 ;
  int *mem_22 ;
  int *mem_23 ;
  int *mem_24 ;

  {
  __CrestCall(16642, 100);
  __CrestStore(16641, (unsigned long )(& K));
# 130 "../HPL_plindx10.c"
  mem_17 = PANEL->grid;
  __CrestLoad(16643, (unsigned long )(& mem_17->nprow), (long long )mem_17->nprow);
  __CrestStore(16644, (unsigned long )(& nprow));
# 130 "../HPL_plindx10.c"
  nprow = mem_17->nprow;
  __CrestLoad(16645, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(16646, (unsigned long )(& jb));
# 130 "../HPL_plindx10.c"
  jb = PANEL->jb;
  __CrestLoad(16647, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(16648, (unsigned long )(& nb));
# 130 "../HPL_plindx10.c"
  nb = PANEL->nb;
  __CrestLoad(16649, (unsigned long )(& PANEL->ia), (long long )PANEL->ia);
  __CrestStore(16650, (unsigned long )(& ia));
# 131 "../HPL_plindx10.c"
  ia = PANEL->ia;
  __CrestLoad(16651, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(16652, (unsigned long )(& icurrow));
# 131 "../HPL_plindx10.c"
  icurrow = PANEL->prow;
  __CrestLoad(16653, (unsigned long )0, (long long )0);
  __CrestStore(16654, (unsigned long )(& i));
# 136 "../HPL_plindx10.c"
  i = 0;
  {
# 136 "../HPL_plindx10.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(16657, (unsigned long )(& i), (long long )i);
    __CrestLoad(16656, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(16655, 15, (long long )(i <= nprow));
# 136 "../HPL_plindx10.c"
    if (i <= nprow) {
      __CrestBranch(16658, 6160, 1);

    } else {
      __CrestBranch(16659, 6161, 0);
# 136 "../HPL_plindx10.c"
      goto while_break;
    }
    }
# 136 "../HPL_plindx10.c"
    mem_18 = IPLEN + i;
    __CrestLoad(16660, (unsigned long )0, (long long )0);
    __CrestStore(16661, (unsigned long )mem_18);
# 136 "../HPL_plindx10.c"
    *mem_18 = 0;
    __CrestLoad(16664, (unsigned long )(& i), (long long )i);
    __CrestLoad(16663, (unsigned long )0, (long long )1);
    __CrestApply2(16662, 0, (long long )(i + 1));
    __CrestStore(16665, (unsigned long )(& i));
# 136 "../HPL_plindx10.c"
    i ++;
  }
  while_break: ;
  }
  __CrestLoad(16666, (unsigned long )0, (long long )0);
  __CrestStore(16667, (unsigned long )(& i));
# 138 "../HPL_plindx10.c"
  i = 0;
  {
# 138 "../HPL_plindx10.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(16670, (unsigned long )(& i), (long long )i);
    __CrestLoad(16669, (unsigned long )(& K), (long long )K);
    __CrestApply2(16668, 16, (long long )(i < (int )K));
# 138 "../HPL_plindx10.c"
    if (i < (int )K) {
      __CrestBranch(16671, 6169, 1);

    } else {
      __CrestBranch(16672, 6170, 0);
# 138 "../HPL_plindx10.c"
      goto while_break___0;
    }
    }
# 140 "../HPL_plindx10.c"
    mem_19 = IPID + i;
    __CrestLoad(16673, (unsigned long )mem_19, (long long )*mem_19);
    __CrestStore(16674, (unsigned long )(& src));
# 140 "../HPL_plindx10.c"
    src = (int )*mem_19;
    {
    __CrestLoad(16677, (unsigned long )(& src), (long long )src);
    __CrestLoad(16676, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(16675, 17, (long long )(src >= nb));
# 140 "../HPL_plindx10.c"
    if (src >= nb) {
      __CrestBranch(16678, 6173, 1);
      {
      __CrestLoad(16682, (unsigned long )(& nprow), (long long )nprow);
      __CrestLoad(16681, (unsigned long )0, (long long )1);
      __CrestApply2(16680, 14, (long long )(nprow > 1));
# 140 "../HPL_plindx10.c"
      if (nprow > 1) {
        __CrestBranch(16683, 6174, 1);
        __CrestLoad(16691, (unsigned long )0, (long long )1);
        __CrestLoad(16690, (unsigned long )(& src), (long long )src);
        __CrestLoad(16689, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(16688, 1, (long long )(src - nb));
        __CrestLoad(16687, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(16686, 3, (long long )((src - nb) / nb));
        __CrestApply2(16685, 0, (long long )(1 + (src - nb) / nb));
        __CrestStore(16692, (unsigned long )(& srcrow));
# 140 "../HPL_plindx10.c"
        srcrow = 1 + (src - nb) / nb;
        __CrestLoad(16699, (unsigned long )(& srcrow), (long long )srcrow);
        __CrestLoad(16698, (unsigned long )(& srcrow), (long long )srcrow);
        __CrestLoad(16697, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16696, 3, (long long )(srcrow / nprow));
        __CrestLoad(16695, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(16694, 2, (long long )((srcrow / nprow) * nprow));
        __CrestApply2(16693, 1, (long long )(srcrow - (srcrow / nprow) * nprow));
        __CrestStore(16700, (unsigned long )(& srcrow));
# 140 "../HPL_plindx10.c"
        srcrow -= (srcrow / nprow) * nprow;
      } else {
        __CrestBranch(16684, 6175, 0);
        __CrestLoad(16701, (unsigned long )0, (long long )0);
        __CrestStore(16702, (unsigned long )(& srcrow));
# 140 "../HPL_plindx10.c"
        srcrow = 0;
      }
      }
    } else {
      __CrestBranch(16679, 6176, 0);
      __CrestLoad(16703, (unsigned long )0, (long long )0);
      __CrestStore(16704, (unsigned long )(& srcrow));
# 140 "../HPL_plindx10.c"
      srcrow = 0;
    }
    }
    {
    __CrestLoad(16707, (unsigned long )(& srcrow), (long long )srcrow);
    __CrestLoad(16706, (unsigned long )(& icurrow), (long long )icurrow);
    __CrestApply2(16705, 12, (long long )(srcrow == icurrow));
# 141 "../HPL_plindx10.c"
    if (srcrow == icurrow) {
      __CrestBranch(16708, 6178, 1);
# 143 "../HPL_plindx10.c"
      mem_20 = IPID + (i + 1);
      __CrestLoad(16710, (unsigned long )mem_20, (long long )*mem_20);
      __CrestStore(16711, (unsigned long )(& dst));
# 143 "../HPL_plindx10.c"
      dst = (int )*mem_20;
      {
      __CrestLoad(16714, (unsigned long )(& dst), (long long )dst);
      __CrestLoad(16713, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(16712, 17, (long long )(dst >= nb));
# 143 "../HPL_plindx10.c"
      if (dst >= nb) {
        __CrestBranch(16715, 6180, 1);
        {
        __CrestLoad(16719, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(16718, (unsigned long )0, (long long )1);
        __CrestApply2(16717, 14, (long long )(nprow > 1));
# 143 "../HPL_plindx10.c"
        if (nprow > 1) {
          __CrestBranch(16720, 6181, 1);
          __CrestLoad(16728, (unsigned long )0, (long long )1);
          __CrestLoad(16727, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(16726, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(16725, 1, (long long )(dst - nb));
          __CrestLoad(16724, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(16723, 3, (long long )((dst - nb) / nb));
          __CrestApply2(16722, 0, (long long )(1 + (dst - nb) / nb));
          __CrestStore(16729, (unsigned long )(& dstrow));
# 143 "../HPL_plindx10.c"
          dstrow = 1 + (dst - nb) / nb;
          __CrestLoad(16736, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(16735, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(16734, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16733, 3, (long long )(dstrow / nprow));
          __CrestLoad(16732, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16731, 2, (long long )((dstrow / nprow) * nprow));
          __CrestApply2(16730, 1, (long long )(dstrow - (dstrow / nprow) * nprow));
          __CrestStore(16737, (unsigned long )(& dstrow));
# 143 "../HPL_plindx10.c"
          dstrow -= (dstrow / nprow) * nprow;
        } else {
          __CrestBranch(16721, 6182, 0);
          __CrestLoad(16738, (unsigned long )0, (long long )0);
          __CrestStore(16739, (unsigned long )(& dstrow));
# 143 "../HPL_plindx10.c"
          dstrow = 0;
        }
        }
      } else {
        __CrestBranch(16716, 6183, 0);
        __CrestLoad(16740, (unsigned long )0, (long long )0);
        __CrestStore(16741, (unsigned long )(& dstrow));
# 143 "../HPL_plindx10.c"
        dstrow = 0;
      }
      }
      {
      __CrestLoad(16744, (unsigned long )(& dstrow), (long long )dstrow);
      __CrestLoad(16743, (unsigned long )(& srcrow), (long long )srcrow);
      __CrestApply2(16742, 13, (long long )(dstrow != srcrow));
# 144 "../HPL_plindx10.c"
      if (dstrow != srcrow) {
        __CrestBranch(16745, 6185, 1);
# 144 "../HPL_plindx10.c"
        mem_21 = IPLEN + (dstrow + 1);
# 144 "../HPL_plindx10.c"
        mem_22 = IPLEN + (dstrow + 1);
        __CrestLoad(16749, (unsigned long )mem_22, (long long )*mem_22);
        __CrestLoad(16748, (unsigned long )0, (long long )1);
        __CrestApply2(16747, 0, (long long )(*mem_22 + 1));
        __CrestStore(16750, (unsigned long )mem_21);
# 144 "../HPL_plindx10.c"
        *mem_21 = *mem_22 + 1;
      } else {
        __CrestBranch(16746, 6186, 0);
        {
        __CrestLoad(16755, (unsigned long )(& dst), (long long )dst);
        __CrestLoad(16754, (unsigned long )(& ia), (long long )ia);
        __CrestApply2(16753, 1, (long long )(dst - ia));
        __CrestLoad(16752, (unsigned long )(& jb), (long long )jb);
        __CrestApply2(16751, 16, (long long )(dst - ia < jb));
# 144 "../HPL_plindx10.c"
        if (dst - ia < jb) {
          __CrestBranch(16756, 6187, 1);
# 144 "../HPL_plindx10.c"
          mem_23 = IPLEN + (dstrow + 1);
# 144 "../HPL_plindx10.c"
          mem_24 = IPLEN + (dstrow + 1);
          __CrestLoad(16760, (unsigned long )mem_24, (long long )*mem_24);
          __CrestLoad(16759, (unsigned long )0, (long long )1);
          __CrestApply2(16758, 0, (long long )(*mem_24 + 1));
          __CrestStore(16761, (unsigned long )mem_23);
# 144 "../HPL_plindx10.c"
          *mem_23 = *mem_24 + 1;
        } else {
          __CrestBranch(16757, 6188, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(16709, 6189, 0);

    }
    }
    __CrestLoad(16764, (unsigned long )(& i), (long long )i);
    __CrestLoad(16763, (unsigned long )0, (long long )2);
    __CrestApply2(16762, 0, (long long )(i + 2));
    __CrestStore(16765, (unsigned long )(& i));
# 138 "../HPL_plindx10.c"
    i += 2;
  }
  while_break___0: ;
  }
  __CrestLoad(16766, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(16767, (unsigned long )(& icurrow), (long long )icurrow);
# 151 "../HPL_plindx10.c"
  HPL_logsort((int const )nprow, (int const )icurrow, IPLEN, IPMAP, IPMAPM1);
  __CrestClearStack(16768);

  {
  __CrestReturn(16769);
# 53 "../HPL_plindx10.c"
  return;
  }
}
}
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 188 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx1(HPL_T_panel *PANEL , int const K , int const *IPID , int *IPA ,
                 int *LINDXA , int *LINDXAU , int *IPLEN , int *IPMAP , int *IPMAPM1 ,
                 int *PERMU , int *IWORK ) ;
# 53 "../HPL_plindx1.c"
void HPL_plindx1(HPL_T_panel *PANEL , int const K , int const *IPID , int *IPA ,
                 int *LINDXA , int *LINDXAU , int *IPLEN , int *IPMAP , int *IPMAPM1 ,
                 int *PERMU , int *IWORK )
{
  int *iwork ;
  int dst ;
  int dstrow ;
  int fndd ;
  int i ;
  int ia ;
  int icurrow ;
  int il ;
  int ip ;
  int ipU ;
  int iroff ;
  int j ;
  int jb ;
  int myrow ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;
  int i__ ;
  int j__ ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int i_____0 ;
  int j_____0 ;
  int tmp___2 ;
  int i_____1 ;
  int j_____1 ;
  int tmp___3 ;
  struct HPL_S_grid *mem_41 ;
  struct HPL_S_grid *mem_42 ;
  int const *mem_43 ;
  int const *mem_44 ;
  int *mem_45 ;
  int *mem_46 ;
  int *mem_47 ;
  int *mem_48 ;
  int *mem_49 ;
  int *mem_50 ;
  int *mem_51 ;
  int *mem_52 ;
  int const *mem_53 ;
  int *mem_54 ;
  int const *mem_55 ;
  int *mem_56 ;
  int *mem_57 ;
  int *mem_58 ;
  int *mem_59 ;
  int *mem_60 ;
  int *mem_61 ;
  int *mem_62 ;
  int const *mem_63 ;
  int const *mem_64 ;
  int *mem_65 ;
  int *mem_66 ;
  int *mem_67 ;
  int *mem_68 ;
  int *mem_69 ;
  int *mem_70 ;
  int *mem_71 ;
  int const *mem_72 ;
  int *mem_73 ;
  int const *mem_74 ;
  int *mem_75 ;
  int *mem_76 ;
  int *mem_77 ;
  int *mem_78 ;
  int *mem_79 ;
  int *mem_80 ;
  int *mem_81 ;
  int *mem_82 ;

  {
  __CrestCall(16771, 101);
  __CrestStore(16770, (unsigned long )(& K));
  __CrestLoad(16772, (unsigned long )(& K), (long long )K);
# 173 "../HPL_plindx1.c"
  HPL_plindx10(PANEL, K, IPID, IPLEN, IPMAP, IPMAPM1);
  __CrestClearStack(16773);
# 180 "../HPL_plindx1.c"
  mem_41 = PANEL->grid;
  __CrestLoad(16774, (unsigned long )(& mem_41->myrow), (long long )mem_41->myrow);
  __CrestStore(16775, (unsigned long )(& myrow));
# 180 "../HPL_plindx1.c"
  myrow = mem_41->myrow;
# 180 "../HPL_plindx1.c"
  mem_42 = PANEL->grid;
  __CrestLoad(16776, (unsigned long )(& mem_42->nprow), (long long )mem_42->nprow);
  __CrestStore(16777, (unsigned long )(& nprow));
# 180 "../HPL_plindx1.c"
  nprow = mem_42->nprow;
  __CrestLoad(16778, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(16779, (unsigned long )(& jb));
# 181 "../HPL_plindx1.c"
  jb = PANEL->jb;
  __CrestLoad(16780, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(16781, (unsigned long )(& nb));
# 181 "../HPL_plindx1.c"
  nb = PANEL->nb;
  __CrestLoad(16782, (unsigned long )(& PANEL->ia), (long long )PANEL->ia);
  __CrestStore(16783, (unsigned long )(& ia));
# 181 "../HPL_plindx1.c"
  ia = PANEL->ia;
  __CrestLoad(16784, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
  __CrestStore(16785, (unsigned long )(& iroff));
# 182 "../HPL_plindx1.c"
  iroff = PANEL->ii;
  __CrestLoad(16786, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(16787, (unsigned long )(& icurrow));
# 182 "../HPL_plindx1.c"
  icurrow = PANEL->prow;
# 184 "../HPL_plindx1.c"
  iwork = IWORK + jb;
  {
  __CrestLoad(16790, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(16789, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(16788, 12, (long long )(myrow == icurrow));
# 186 "../HPL_plindx1.c"
  if (myrow == icurrow) {
    __CrestBranch(16791, 6197, 1);
    __CrestLoad(16793, (unsigned long )0, (long long )0);
    __CrestStore(16794, (unsigned long )(& i));
# 188 "../HPL_plindx1.c"
    i = 0;
    __CrestLoad(16795, (unsigned long )0, (long long )0);
    __CrestStore(16796, (unsigned long )(& ip));
# 188 "../HPL_plindx1.c"
    ip = 0;
    __CrestLoad(16797, (unsigned long )0, (long long )0);
    __CrestStore(16798, (unsigned long )(& ipU));
# 188 "../HPL_plindx1.c"
    ipU = 0;
    {
# 188 "../HPL_plindx1.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(16801, (unsigned long )(& i), (long long )i);
      __CrestLoad(16800, (unsigned long )(& K), (long long )K);
      __CrestApply2(16799, 16, (long long )(i < (int )K));
# 188 "../HPL_plindx1.c"
      if (i < (int )K) {
        __CrestBranch(16802, 6202, 1);

      } else {
        __CrestBranch(16803, 6203, 0);
# 188 "../HPL_plindx1.c"
        goto while_break;
      }
      }
# 190 "../HPL_plindx1.c"
      mem_43 = IPID + i;
      __CrestLoad(16804, (unsigned long )mem_43, (long long )*mem_43);
      __CrestStore(16805, (unsigned long )(& src));
# 190 "../HPL_plindx1.c"
      src = (int )*mem_43;
      {
      __CrestLoad(16808, (unsigned long )(& src), (long long )src);
      __CrestLoad(16807, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(16806, 17, (long long )(src >= nb));
# 190 "../HPL_plindx1.c"
      if (src >= nb) {
        __CrestBranch(16809, 6206, 1);
        {
        __CrestLoad(16813, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(16812, (unsigned long )0, (long long )1);
        __CrestApply2(16811, 14, (long long )(nprow > 1));
# 190 "../HPL_plindx1.c"
        if (nprow > 1) {
          __CrestBranch(16814, 6207, 1);
          __CrestLoad(16822, (unsigned long )0, (long long )1);
          __CrestLoad(16821, (unsigned long )(& src), (long long )src);
          __CrestLoad(16820, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(16819, 1, (long long )(src - nb));
          __CrestLoad(16818, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(16817, 3, (long long )((src - nb) / nb));
          __CrestApply2(16816, 0, (long long )(1 + (src - nb) / nb));
          __CrestStore(16823, (unsigned long )(& srcrow));
# 190 "../HPL_plindx1.c"
          srcrow = 1 + (src - nb) / nb;
          __CrestLoad(16830, (unsigned long )(& srcrow), (long long )srcrow);
          __CrestLoad(16829, (unsigned long )(& srcrow), (long long )srcrow);
          __CrestLoad(16828, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16827, 3, (long long )(srcrow / nprow));
          __CrestLoad(16826, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(16825, 2, (long long )((srcrow / nprow) * nprow));
          __CrestApply2(16824, 1, (long long )(srcrow - (srcrow / nprow) * nprow));
          __CrestStore(16831, (unsigned long )(& srcrow));
# 190 "../HPL_plindx1.c"
          srcrow -= (srcrow / nprow) * nprow;
        } else {
          __CrestBranch(16815, 6208, 0);
          __CrestLoad(16832, (unsigned long )0, (long long )0);
          __CrestStore(16833, (unsigned long )(& srcrow));
# 190 "../HPL_plindx1.c"
          srcrow = 0;
        }
        }
      } else {
        __CrestBranch(16810, 6209, 0);
        __CrestLoad(16834, (unsigned long )0, (long long )0);
        __CrestStore(16835, (unsigned long )(& srcrow));
# 190 "../HPL_plindx1.c"
        srcrow = 0;
      }
      }
      {
      __CrestLoad(16838, (unsigned long )(& srcrow), (long long )srcrow);
      __CrestLoad(16837, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestApply2(16836, 12, (long long )(srcrow == icurrow));
# 192 "../HPL_plindx1.c"
      if (srcrow == icurrow) {
        __CrestBranch(16839, 6211, 1);
# 194 "../HPL_plindx1.c"
        mem_44 = IPID + (i + 1);
        __CrestLoad(16841, (unsigned long )mem_44, (long long )*mem_44);
        __CrestStore(16842, (unsigned long )(& dst));
# 194 "../HPL_plindx1.c"
        dst = (int )*mem_44;
        {
        __CrestLoad(16845, (unsigned long )(& dst), (long long )dst);
        __CrestLoad(16844, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(16843, 17, (long long )(dst >= nb));
# 194 "../HPL_plindx1.c"
        if (dst >= nb) {
          __CrestBranch(16846, 6213, 1);
          {
          __CrestLoad(16850, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(16849, (unsigned long )0, (long long )1);
          __CrestApply2(16848, 14, (long long )(nprow > 1));
# 194 "../HPL_plindx1.c"
          if (nprow > 1) {
            __CrestBranch(16851, 6214, 1);
            __CrestLoad(16859, (unsigned long )0, (long long )1);
            __CrestLoad(16858, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(16857, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(16856, 1, (long long )(dst - nb));
            __CrestLoad(16855, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(16854, 3, (long long )((dst - nb) / nb));
            __CrestApply2(16853, 0, (long long )(1 + (dst - nb) / nb));
            __CrestStore(16860, (unsigned long )(& dstrow));
# 194 "../HPL_plindx1.c"
            dstrow = 1 + (dst - nb) / nb;
            __CrestLoad(16867, (unsigned long )(& dstrow), (long long )dstrow);
            __CrestLoad(16866, (unsigned long )(& dstrow), (long long )dstrow);
            __CrestLoad(16865, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16864, 3, (long long )(dstrow / nprow));
            __CrestLoad(16863, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16862, 2, (long long )((dstrow / nprow) * nprow));
            __CrestApply2(16861, 1, (long long )(dstrow - (dstrow / nprow) * nprow));
            __CrestStore(16868, (unsigned long )(& dstrow));
# 194 "../HPL_plindx1.c"
            dstrow -= (dstrow / nprow) * nprow;
          } else {
            __CrestBranch(16852, 6215, 0);
            __CrestLoad(16869, (unsigned long )0, (long long )0);
            __CrestStore(16870, (unsigned long )(& dstrow));
# 194 "../HPL_plindx1.c"
            dstrow = 0;
          }
          }
        } else {
          __CrestBranch(16847, 6216, 0);
          __CrestLoad(16871, (unsigned long )0, (long long )0);
          __CrestStore(16872, (unsigned long )(& dstrow));
# 194 "../HPL_plindx1.c"
          dstrow = 0;
        }
        }
        {
        __CrestLoad(16875, (unsigned long )(& src), (long long )src);
        __CrestLoad(16874, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(16873, 16, (long long )(src < nb));
# 196 "../HPL_plindx1.c"
        if (src < nb) {
          __CrestBranch(16876, 6218, 1);
          __CrestLoad(16878, (unsigned long )(& src), (long long )src);
          __CrestStore(16879, (unsigned long )(& il));
# 196 "../HPL_plindx1.c"
          il = src;
        } else {
          __CrestBranch(16877, 6219, 0);
          {
          __CrestLoad(16882, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(16881, (unsigned long )0, (long long )1);
          __CrestApply2(16880, 12, (long long )(nprow == 1));
# 196 "../HPL_plindx1.c"
          if (nprow == 1) {
            __CrestBranch(16883, 6220, 1);
            __CrestLoad(16885, (unsigned long )(& src), (long long )src);
            __CrestStore(16886, (unsigned long )(& il));
# 196 "../HPL_plindx1.c"
            il = src;
          } else {
            __CrestBranch(16884, 6221, 0);
            __CrestLoad(16891, (unsigned long )(& src), (long long )src);
            __CrestLoad(16890, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(16889, 1, (long long )(src - nb));
            __CrestLoad(16888, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(16887, 3, (long long )((src - nb) / nb));
            __CrestStore(16892, (unsigned long )(& i__));
# 196 "../HPL_plindx1.c"
            i__ = (src - nb) / nb;
            __CrestLoad(16895, (unsigned long )(& i__), (long long )i__);
            __CrestLoad(16894, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16893, 3, (long long )(i__ / nprow));
            __CrestStore(16896, (unsigned long )(& j__));
# 196 "../HPL_plindx1.c"
            j__ = i__ / nprow;
            {
            __CrestLoad(16907, (unsigned long )(& i__), (long long )i__);
            __CrestLoad(16906, (unsigned long )0, (long long )1);
            __CrestApply2(16905, 0, (long long )(i__ + 1));
            __CrestLoad(16904, (unsigned long )(& j__), (long long )j__);
            __CrestLoad(16903, (unsigned long )0, (long long )1);
            __CrestApply2(16902, 0, (long long )(j__ + 1));
            __CrestLoad(16901, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(16900, 2, (long long )((j__ + 1) * nprow));
            __CrestApply2(16899, 1, (long long )((i__ + 1) - (j__ + 1) * nprow));
            __CrestLoad(16898, (unsigned long )0, (long long )0);
            __CrestApply2(16897, 13, (long long )((i__ + 1) - (j__ + 1) * nprow != 0));
# 196 "../HPL_plindx1.c"
            if ((i__ + 1) - (j__ + 1) * nprow != 0) {
              __CrestBranch(16908, 6223, 1);
              __CrestLoad(16912, (unsigned long )(& src), (long long )src);
              __CrestLoad(16911, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(16910, 1, (long long )(src - nb));
              __CrestStore(16913, (unsigned long )(& tmp));
# 196 "../HPL_plindx1.c"
              tmp = src - nb;
            } else {
              __CrestBranch(16909, 6224, 0);
              __CrestLoad(16914, (unsigned long )(& src), (long long )src);
              __CrestStore(16915, (unsigned long )(& tmp));
# 196 "../HPL_plindx1.c"
              tmp = src;
            }
            }
            __CrestLoad(16922, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(16921, (unsigned long )(& j__), (long long )j__);
            __CrestLoad(16920, (unsigned long )(& i__), (long long )i__);
            __CrestApply2(16919, 1, (long long )(j__ - i__));
            __CrestApply2(16918, 2, (long long )(nb * (j__ - i__)));
            __CrestLoad(16917, (unsigned long )(& tmp), (long long )tmp);
            __CrestApply2(16916, 0, (long long )(nb * (j__ - i__) + tmp));
            __CrestStore(16923, (unsigned long )(& il));
# 196 "../HPL_plindx1.c"
            il = nb * (j__ - i__) + tmp;
          }
          }
        }
        }
# 197 "../HPL_plindx1.c"
        mem_45 = LINDXA + ip;
        __CrestLoad(16926, (unsigned long )(& il), (long long )il);
        __CrestLoad(16925, (unsigned long )(& iroff), (long long )iroff);
        __CrestApply2(16924, 1, (long long )(il - iroff));
        __CrestStore(16927, (unsigned long )mem_45);
# 197 "../HPL_plindx1.c"
        *mem_45 = il - iroff;
        {
        __CrestLoad(16930, (unsigned long )(& dstrow), (long long )dstrow);
        __CrestLoad(16929, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(16928, 12, (long long )(dstrow == icurrow));
# 199 "../HPL_plindx1.c"
        if (dstrow == icurrow) {
          __CrestBranch(16931, 6228, 1);
          {
          __CrestLoad(16937, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(16936, (unsigned long )(& ia), (long long )ia);
          __CrestApply2(16935, 1, (long long )(dst - ia));
          __CrestLoad(16934, (unsigned long )(& jb), (long long )jb);
          __CrestApply2(16933, 16, (long long )(dst - ia < jb));
# 199 "../HPL_plindx1.c"
          if (dst - ia < jb) {
            __CrestBranch(16938, 6229, 1);
# 201 "../HPL_plindx1.c"
            mem_46 = PERMU + ipU;
            __CrestLoad(16942, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(16941, (unsigned long )(& ia), (long long )ia);
            __CrestApply2(16940, 1, (long long )(dst - ia));
            __CrestStore(16943, (unsigned long )mem_46);
# 201 "../HPL_plindx1.c"
            *mem_46 = dst - ia;
# 201 "../HPL_plindx1.c"
            mem_47 = IPMAPM1 + dstrow;
            __CrestLoad(16944, (unsigned long )mem_47, (long long )*mem_47);
            __CrestStore(16945, (unsigned long )(& il));
# 201 "../HPL_plindx1.c"
            il = *mem_47;
# 202 "../HPL_plindx1.c"
            mem_48 = IPLEN + il;
            __CrestLoad(16946, (unsigned long )mem_48, (long long )*mem_48);
            __CrestStore(16947, (unsigned long )(& j));
# 202 "../HPL_plindx1.c"
            j = *mem_48;
            __CrestLoad(16948, (unsigned long )(& j), (long long )j);
            __CrestStore(16949, (unsigned long )(& tmp___0));
# 202 "../HPL_plindx1.c"
            tmp___0 = j;
# 202 "../HPL_plindx1.c"
            mem_49 = LINDXAU + ip;
            __CrestLoad(16950, (unsigned long )(& tmp___0), (long long )tmp___0);
            __CrestStore(16951, (unsigned long )mem_49);
# 202 "../HPL_plindx1.c"
            *mem_49 = tmp___0;
# 202 "../HPL_plindx1.c"
            mem_50 = iwork + ipU;
            __CrestLoad(16952, (unsigned long )(& tmp___0), (long long )tmp___0);
            __CrestStore(16953, (unsigned long )mem_50);
# 202 "../HPL_plindx1.c"
            *mem_50 = tmp___0;
# 203 "../HPL_plindx1.c"
            mem_51 = IPLEN + il;
# 203 "../HPL_plindx1.c"
            mem_52 = IPLEN + il;
            __CrestLoad(16956, (unsigned long )mem_52, (long long )*mem_52);
            __CrestLoad(16955, (unsigned long )0, (long long )1);
            __CrestApply2(16954, 0, (long long )(*mem_52 + 1));
            __CrestStore(16957, (unsigned long )mem_51);
# 203 "../HPL_plindx1.c"
            *mem_51 = *mem_52 + 1;
            __CrestLoad(16960, (unsigned long )(& ipU), (long long )ipU);
            __CrestLoad(16959, (unsigned long )0, (long long )1);
            __CrestApply2(16958, 0, (long long )(ipU + 1));
            __CrestStore(16961, (unsigned long )(& ipU));
# 203 "../HPL_plindx1.c"
            ipU ++;
          } else {
            __CrestBranch(16939, 6230, 0);
# 199 "../HPL_plindx1.c"
            goto _L;
          }
          }
        } else {
          __CrestBranch(16932, 6231, 0);
          _L:
          {
          __CrestLoad(16964, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(16963, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(16962, 13, (long long )(dstrow != icurrow));
# 205 "../HPL_plindx1.c"
          if (dstrow != icurrow) {
            __CrestBranch(16965, 6232, 1);
            __CrestLoad(16967, (unsigned long )0, (long long )0);
            __CrestStore(16968, (unsigned long )(& j));
# 207 "../HPL_plindx1.c"
            j = 0;
            {
# 208 "../HPL_plindx1.c"
            while (1) {
              while_continue___0: ;
# 208 "../HPL_plindx1.c"
              mem_53 = IPID + j;
              __CrestLoad(16971, (unsigned long )(& dst), (long long )dst);
              __CrestLoad(16970, (unsigned long )mem_53, (long long )*mem_53);
              __CrestApply2(16969, 12, (long long )(dst == (int )*mem_53));
              __CrestStore(16972, (unsigned long )(& fndd));
# 208 "../HPL_plindx1.c"
              fndd = dst == (int )*mem_53;
              __CrestLoad(16975, (unsigned long )(& j), (long long )j);
              __CrestLoad(16974, (unsigned long )0, (long long )2);
              __CrestApply2(16973, 0, (long long )(j + 2));
              __CrestStore(16976, (unsigned long )(& j));
# 208 "../HPL_plindx1.c"
              j += 2;
              {
              __CrestLoad(16979, (unsigned long )(& fndd), (long long )fndd);
              __CrestLoad(16978, (unsigned long )0, (long long )0);
              __CrestApply2(16977, 12, (long long )(fndd == 0));
# 208 "../HPL_plindx1.c"
              if (fndd == 0) {
                __CrestBranch(16980, 6238, 1);
                {
                __CrestLoad(16984, (unsigned long )(& j), (long long )j);
                __CrestLoad(16983, (unsigned long )(& K), (long long )K);
                __CrestApply2(16982, 17, (long long )(j >= (int )K));
# 208 "../HPL_plindx1.c"
                if (j >= (int )K) {
                  __CrestBranch(16985, 6239, 1);
# 208 "../HPL_plindx1.c"
                  goto while_break___0;
                } else {
                  __CrestBranch(16986, 6240, 0);

                }
                }
              } else {
                __CrestBranch(16981, 6241, 0);
# 208 "../HPL_plindx1.c"
                goto while_break___0;
              }
              }
            }
            while_break___0: ;
            }
# 211 "../HPL_plindx1.c"
            mem_54 = PERMU + ipU;
# 211 "../HPL_plindx1.c"
            mem_55 = IPID + (j - 1);
            __CrestLoad(16989, (unsigned long )mem_55, (long long )*mem_55);
            __CrestLoad(16988, (unsigned long )(& ia), (long long )ia);
            __CrestApply2(16987, 1, (long long )(*mem_55 - (int const )ia));
            __CrestStore(16990, (unsigned long )mem_54);
# 211 "../HPL_plindx1.c"
            *mem_54 = (int )(*mem_55 - (int const )ia);
# 211 "../HPL_plindx1.c"
            mem_56 = IPMAPM1 + dstrow;
            __CrestLoad(16991, (unsigned long )mem_56, (long long )*mem_56);
            __CrestStore(16992, (unsigned long )(& il));
# 211 "../HPL_plindx1.c"
            il = *mem_56;
# 212 "../HPL_plindx1.c"
            mem_57 = IPLEN + il;
            __CrestLoad(16993, (unsigned long )mem_57, (long long )*mem_57);
            __CrestStore(16994, (unsigned long )(& j));
# 212 "../HPL_plindx1.c"
            j = *mem_57;
            __CrestLoad(16995, (unsigned long )(& j), (long long )j);
            __CrestStore(16996, (unsigned long )(& tmp___1));
# 212 "../HPL_plindx1.c"
            tmp___1 = j;
# 212 "../HPL_plindx1.c"
            mem_58 = LINDXAU + ip;
            __CrestLoad(16997, (unsigned long )(& tmp___1), (long long )tmp___1);
            __CrestStore(16998, (unsigned long )mem_58);
# 212 "../HPL_plindx1.c"
            *mem_58 = tmp___1;
# 212 "../HPL_plindx1.c"
            mem_59 = iwork + ipU;
            __CrestLoad(16999, (unsigned long )(& tmp___1), (long long )tmp___1);
            __CrestStore(17000, (unsigned long )mem_59);
# 212 "../HPL_plindx1.c"
            *mem_59 = tmp___1;
# 213 "../HPL_plindx1.c"
            mem_60 = IPLEN + il;
# 213 "../HPL_plindx1.c"
            mem_61 = IPLEN + il;
            __CrestLoad(17003, (unsigned long )mem_61, (long long )*mem_61);
            __CrestLoad(17002, (unsigned long )0, (long long )1);
            __CrestApply2(17001, 0, (long long )(*mem_61 + 1));
            __CrestStore(17004, (unsigned long )mem_60);
# 213 "../HPL_plindx1.c"
            *mem_60 = *mem_61 + 1;
            __CrestLoad(17007, (unsigned long )(& ipU), (long long )ipU);
            __CrestLoad(17006, (unsigned long )0, (long long )1);
            __CrestApply2(17005, 0, (long long )(ipU + 1));
            __CrestStore(17008, (unsigned long )(& ipU));
# 213 "../HPL_plindx1.c"
            ipU ++;
          } else {
            __CrestBranch(16966, 6244, 0);
            {
            __CrestLoad(17011, (unsigned long )(& dstrow), (long long )dstrow);
            __CrestLoad(17010, (unsigned long )(& icurrow), (long long )icurrow);
            __CrestApply2(17009, 12, (long long )(dstrow == icurrow));
# 215 "../HPL_plindx1.c"
            if (dstrow == icurrow) {
              __CrestBranch(17012, 6245, 1);
              {
              __CrestLoad(17018, (unsigned long )(& dst), (long long )dst);
              __CrestLoad(17017, (unsigned long )(& ia), (long long )ia);
              __CrestApply2(17016, 1, (long long )(dst - ia));
              __CrestLoad(17015, (unsigned long )(& jb), (long long )jb);
              __CrestApply2(17014, 17, (long long )(dst - ia >= jb));
# 215 "../HPL_plindx1.c"
              if (dst - ia >= jb) {
                __CrestBranch(17019, 6246, 1);
                {
                __CrestLoad(17023, (unsigned long )(& dst), (long long )dst);
                __CrestLoad(17022, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(17021, 16, (long long )(dst < nb));
# 217 "../HPL_plindx1.c"
                if (dst < nb) {
                  __CrestBranch(17024, 6247, 1);
                  __CrestLoad(17026, (unsigned long )(& dst), (long long )dst);
                  __CrestStore(17027, (unsigned long )(& il));
# 217 "../HPL_plindx1.c"
                  il = dst;
                } else {
                  __CrestBranch(17025, 6248, 0);
                  {
                  __CrestLoad(17030, (unsigned long )(& nprow), (long long )nprow);
                  __CrestLoad(17029, (unsigned long )0, (long long )1);
                  __CrestApply2(17028, 12, (long long )(nprow == 1));
# 217 "../HPL_plindx1.c"
                  if (nprow == 1) {
                    __CrestBranch(17031, 6249, 1);
                    __CrestLoad(17033, (unsigned long )(& dst), (long long )dst);
                    __CrestStore(17034, (unsigned long )(& il));
# 217 "../HPL_plindx1.c"
                    il = dst;
                  } else {
                    __CrestBranch(17032, 6250, 0);
                    __CrestLoad(17039, (unsigned long )(& dst), (long long )dst);
                    __CrestLoad(17038, (unsigned long )(& nb), (long long )nb);
                    __CrestApply2(17037, 1, (long long )(dst - nb));
                    __CrestLoad(17036, (unsigned long )(& nb), (long long )nb);
                    __CrestApply2(17035, 3, (long long )((dst - nb) / nb));
                    __CrestStore(17040, (unsigned long )(& i_____0));
# 217 "../HPL_plindx1.c"
                    i_____0 = (dst - nb) / nb;
                    __CrestLoad(17043, (unsigned long )(& i_____0), (long long )i_____0);
                    __CrestLoad(17042, (unsigned long )(& nprow), (long long )nprow);
                    __CrestApply2(17041, 3, (long long )(i_____0 / nprow));
                    __CrestStore(17044, (unsigned long )(& j_____0));
# 217 "../HPL_plindx1.c"
                    j_____0 = i_____0 / nprow;
                    {
                    __CrestLoad(17055, (unsigned long )(& i_____0), (long long )i_____0);
                    __CrestLoad(17054, (unsigned long )0, (long long )1);
                    __CrestApply2(17053, 0, (long long )(i_____0 + 1));
                    __CrestLoad(17052, (unsigned long )(& j_____0), (long long )j_____0);
                    __CrestLoad(17051, (unsigned long )0, (long long )1);
                    __CrestApply2(17050, 0, (long long )(j_____0 + 1));
                    __CrestLoad(17049, (unsigned long )(& nprow), (long long )nprow);
                    __CrestApply2(17048, 2, (long long )((j_____0 + 1) * nprow));
                    __CrestApply2(17047, 1, (long long )((i_____0 + 1) - (j_____0 + 1) * nprow));
                    __CrestLoad(17046, (unsigned long )0, (long long )0);
                    __CrestApply2(17045, 13, (long long )((i_____0 + 1) - (j_____0 + 1) * nprow != 0));
# 217 "../HPL_plindx1.c"
                    if ((i_____0 + 1) - (j_____0 + 1) * nprow != 0) {
                      __CrestBranch(17056, 6252, 1);
                      __CrestLoad(17060, (unsigned long )(& dst), (long long )dst);
                      __CrestLoad(17059, (unsigned long )(& nb), (long long )nb);
                      __CrestApply2(17058, 1, (long long )(dst - nb));
                      __CrestStore(17061, (unsigned long )(& tmp___2));
# 217 "../HPL_plindx1.c"
                      tmp___2 = dst - nb;
                    } else {
                      __CrestBranch(17057, 6253, 0);
                      __CrestLoad(17062, (unsigned long )(& dst), (long long )dst);
                      __CrestStore(17063, (unsigned long )(& tmp___2));
# 217 "../HPL_plindx1.c"
                      tmp___2 = dst;
                    }
                    }
                    __CrestLoad(17070, (unsigned long )(& nb), (long long )nb);
                    __CrestLoad(17069, (unsigned long )(& j_____0), (long long )j_____0);
                    __CrestLoad(17068, (unsigned long )(& i_____0), (long long )i_____0);
                    __CrestApply2(17067, 1, (long long )(j_____0 - i_____0));
                    __CrestApply2(17066, 2, (long long )(nb * (j_____0 - i_____0)));
                    __CrestLoad(17065, (unsigned long )(& tmp___2), (long long )tmp___2);
                    __CrestApply2(17064, 0, (long long )(nb * (j_____0 - i_____0) + tmp___2));
                    __CrestStore(17071, (unsigned long )(& il));
# 217 "../HPL_plindx1.c"
                    il = nb * (j_____0 - i_____0) + tmp___2;
                  }
                  }
                }
                }
# 218 "../HPL_plindx1.c"
                mem_62 = LINDXAU + ip;
                __CrestLoad(17074, (unsigned long )(& iroff), (long long )iroff);
                __CrestLoad(17073, (unsigned long )(& il), (long long )il);
                __CrestApply2(17072, 1, (long long )(iroff - il));
                __CrestStore(17075, (unsigned long )mem_62);
# 218 "../HPL_plindx1.c"
                *mem_62 = iroff - il;
              } else {
                __CrestBranch(17020, 6256, 0);

              }
              }
            } else {
              __CrestBranch(17013, 6257, 0);

            }
            }
          }
          }
        }
        }
        __CrestLoad(17078, (unsigned long )(& ip), (long long )ip);
        __CrestLoad(17077, (unsigned long )0, (long long )1);
        __CrestApply2(17076, 0, (long long )(ip + 1));
        __CrestStore(17079, (unsigned long )(& ip));
# 220 "../HPL_plindx1.c"
        ip ++;
      } else {
        __CrestBranch(16840, 6259, 0);

      }
      }
      __CrestLoad(17082, (unsigned long )(& i), (long long )i);
      __CrestLoad(17081, (unsigned long )0, (long long )2);
      __CrestApply2(17080, 0, (long long )(i + 2));
      __CrestStore(17083, (unsigned long )(& i));
# 188 "../HPL_plindx1.c"
      i += 2;
    }
    while_break: ;
    }
    __CrestLoad(17084, (unsigned long )(& ip), (long long )ip);
    __CrestStore(17085, (unsigned long )IPA);
# 223 "../HPL_plindx1.c"
    *IPA = ip;
  } else {
    __CrestBranch(16792, 6263, 0);
    __CrestLoad(17086, (unsigned long )0, (long long )0);
    __CrestStore(17087, (unsigned long )(& i));
# 227 "../HPL_plindx1.c"
    i = 0;
    __CrestLoad(17088, (unsigned long )0, (long long )0);
    __CrestStore(17089, (unsigned long )(& ip));
# 227 "../HPL_plindx1.c"
    ip = 0;
    __CrestLoad(17090, (unsigned long )0, (long long )0);
    __CrestStore(17091, (unsigned long )(& ipU));
# 227 "../HPL_plindx1.c"
    ipU = 0;
    {
# 227 "../HPL_plindx1.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(17094, (unsigned long )(& i), (long long )i);
      __CrestLoad(17093, (unsigned long )(& K), (long long )K);
      __CrestApply2(17092, 16, (long long )(i < (int )K));
# 227 "../HPL_plindx1.c"
      if (i < (int )K) {
        __CrestBranch(17095, 6268, 1);

      } else {
        __CrestBranch(17096, 6269, 0);
# 227 "../HPL_plindx1.c"
        goto while_break___1;
      }
      }
# 229 "../HPL_plindx1.c"
      mem_63 = IPID + i;
      __CrestLoad(17097, (unsigned long )mem_63, (long long )*mem_63);
      __CrestStore(17098, (unsigned long )(& src));
# 229 "../HPL_plindx1.c"
      src = (int )*mem_63;
      {
      __CrestLoad(17101, (unsigned long )(& src), (long long )src);
      __CrestLoad(17100, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(17099, 17, (long long )(src >= nb));
# 229 "../HPL_plindx1.c"
      if (src >= nb) {
        __CrestBranch(17102, 6272, 1);
        {
        __CrestLoad(17106, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(17105, (unsigned long )0, (long long )1);
        __CrestApply2(17104, 14, (long long )(nprow > 1));
# 229 "../HPL_plindx1.c"
        if (nprow > 1) {
          __CrestBranch(17107, 6273, 1);
          __CrestLoad(17115, (unsigned long )0, (long long )1);
          __CrestLoad(17114, (unsigned long )(& src), (long long )src);
          __CrestLoad(17113, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(17112, 1, (long long )(src - nb));
          __CrestLoad(17111, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(17110, 3, (long long )((src - nb) / nb));
          __CrestApply2(17109, 0, (long long )(1 + (src - nb) / nb));
          __CrestStore(17116, (unsigned long )(& srcrow));
# 229 "../HPL_plindx1.c"
          srcrow = 1 + (src - nb) / nb;
          __CrestLoad(17123, (unsigned long )(& srcrow), (long long )srcrow);
          __CrestLoad(17122, (unsigned long )(& srcrow), (long long )srcrow);
          __CrestLoad(17121, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(17120, 3, (long long )(srcrow / nprow));
          __CrestLoad(17119, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(17118, 2, (long long )((srcrow / nprow) * nprow));
          __CrestApply2(17117, 1, (long long )(srcrow - (srcrow / nprow) * nprow));
          __CrestStore(17124, (unsigned long )(& srcrow));
# 229 "../HPL_plindx1.c"
          srcrow -= (srcrow / nprow) * nprow;
        } else {
          __CrestBranch(17108, 6274, 0);
          __CrestLoad(17125, (unsigned long )0, (long long )0);
          __CrestStore(17126, (unsigned long )(& srcrow));
# 229 "../HPL_plindx1.c"
          srcrow = 0;
        }
        }
      } else {
        __CrestBranch(17103, 6275, 0);
        __CrestLoad(17127, (unsigned long )0, (long long )0);
        __CrestStore(17128, (unsigned long )(& srcrow));
# 229 "../HPL_plindx1.c"
        srcrow = 0;
      }
      }
# 230 "../HPL_plindx1.c"
      mem_64 = IPID + (i + 1);
      __CrestLoad(17129, (unsigned long )mem_64, (long long )*mem_64);
      __CrestStore(17130, (unsigned long )(& dst));
# 230 "../HPL_plindx1.c"
      dst = (int )*mem_64;
      {
      __CrestLoad(17133, (unsigned long )(& dst), (long long )dst);
      __CrestLoad(17132, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(17131, 17, (long long )(dst >= nb));
# 230 "../HPL_plindx1.c"
      if (dst >= nb) {
        __CrestBranch(17134, 6278, 1);
        {
        __CrestLoad(17138, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(17137, (unsigned long )0, (long long )1);
        __CrestApply2(17136, 14, (long long )(nprow > 1));
# 230 "../HPL_plindx1.c"
        if (nprow > 1) {
          __CrestBranch(17139, 6279, 1);
          __CrestLoad(17147, (unsigned long )0, (long long )1);
          __CrestLoad(17146, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(17145, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(17144, 1, (long long )(dst - nb));
          __CrestLoad(17143, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(17142, 3, (long long )((dst - nb) / nb));
          __CrestApply2(17141, 0, (long long )(1 + (dst - nb) / nb));
          __CrestStore(17148, (unsigned long )(& dstrow));
# 230 "../HPL_plindx1.c"
          dstrow = 1 + (dst - nb) / nb;
          __CrestLoad(17155, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(17154, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(17153, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(17152, 3, (long long )(dstrow / nprow));
          __CrestLoad(17151, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(17150, 2, (long long )((dstrow / nprow) * nprow));
          __CrestApply2(17149, 1, (long long )(dstrow - (dstrow / nprow) * nprow));
          __CrestStore(17156, (unsigned long )(& dstrow));
# 230 "../HPL_plindx1.c"
          dstrow -= (dstrow / nprow) * nprow;
        } else {
          __CrestBranch(17140, 6280, 0);
          __CrestLoad(17157, (unsigned long )0, (long long )0);
          __CrestStore(17158, (unsigned long )(& dstrow));
# 230 "../HPL_plindx1.c"
          dstrow = 0;
        }
        }
      } else {
        __CrestBranch(17135, 6281, 0);
        __CrestLoad(17159, (unsigned long )0, (long long )0);
        __CrestStore(17160, (unsigned long )(& dstrow));
# 230 "../HPL_plindx1.c"
        dstrow = 0;
      }
      }
      {
      __CrestLoad(17163, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(17162, (unsigned long )(& dstrow), (long long )dstrow);
      __CrestApply2(17161, 12, (long long )(myrow == dstrow));
# 234 "../HPL_plindx1.c"
      if (myrow == dstrow) {
        __CrestBranch(17164, 6283, 1);
        {
        __CrestLoad(17168, (unsigned long )(& dst), (long long )dst);
        __CrestLoad(17167, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(17166, 16, (long long )(dst < nb));
# 236 "../HPL_plindx1.c"
        if (dst < nb) {
          __CrestBranch(17169, 6284, 1);
          __CrestLoad(17171, (unsigned long )(& dst), (long long )dst);
          __CrestStore(17172, (unsigned long )(& il));
# 236 "../HPL_plindx1.c"
          il = dst;
        } else {
          __CrestBranch(17170, 6285, 0);
          {
          __CrestLoad(17175, (unsigned long )(& nprow), (long long )nprow);
          __CrestLoad(17174, (unsigned long )0, (long long )1);
          __CrestApply2(17173, 12, (long long )(nprow == 1));
# 236 "../HPL_plindx1.c"
          if (nprow == 1) {
            __CrestBranch(17176, 6286, 1);
            __CrestLoad(17178, (unsigned long )(& dst), (long long )dst);
            __CrestStore(17179, (unsigned long )(& il));
# 236 "../HPL_plindx1.c"
            il = dst;
          } else {
            __CrestBranch(17177, 6287, 0);
            __CrestLoad(17184, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(17183, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(17182, 1, (long long )(dst - nb));
            __CrestLoad(17181, (unsigned long )(& nb), (long long )nb);
            __CrestApply2(17180, 3, (long long )((dst - nb) / nb));
            __CrestStore(17185, (unsigned long )(& i_____1));
# 236 "../HPL_plindx1.c"
            i_____1 = (dst - nb) / nb;
            __CrestLoad(17188, (unsigned long )(& i_____1), (long long )i_____1);
            __CrestLoad(17187, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(17186, 3, (long long )(i_____1 / nprow));
            __CrestStore(17189, (unsigned long )(& j_____1));
# 236 "../HPL_plindx1.c"
            j_____1 = i_____1 / nprow;
            {
            __CrestLoad(17200, (unsigned long )(& i_____1), (long long )i_____1);
            __CrestLoad(17199, (unsigned long )0, (long long )1);
            __CrestApply2(17198, 0, (long long )(i_____1 + 1));
            __CrestLoad(17197, (unsigned long )(& j_____1), (long long )j_____1);
            __CrestLoad(17196, (unsigned long )0, (long long )1);
            __CrestApply2(17195, 0, (long long )(j_____1 + 1));
            __CrestLoad(17194, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(17193, 2, (long long )((j_____1 + 1) * nprow));
            __CrestApply2(17192, 1, (long long )((i_____1 + 1) - (j_____1 + 1) * nprow));
            __CrestLoad(17191, (unsigned long )0, (long long )0);
            __CrestApply2(17190, 13, (long long )((i_____1 + 1) - (j_____1 + 1) * nprow != 0));
# 236 "../HPL_plindx1.c"
            if ((i_____1 + 1) - (j_____1 + 1) * nprow != 0) {
              __CrestBranch(17201, 6289, 1);
              __CrestLoad(17205, (unsigned long )(& dst), (long long )dst);
              __CrestLoad(17204, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(17203, 1, (long long )(dst - nb));
              __CrestStore(17206, (unsigned long )(& tmp___3));
# 236 "../HPL_plindx1.c"
              tmp___3 = dst - nb;
            } else {
              __CrestBranch(17202, 6290, 0);
              __CrestLoad(17207, (unsigned long )(& dst), (long long )dst);
              __CrestStore(17208, (unsigned long )(& tmp___3));
# 236 "../HPL_plindx1.c"
              tmp___3 = dst;
            }
            }
            __CrestLoad(17215, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(17214, (unsigned long )(& j_____1), (long long )j_____1);
            __CrestLoad(17213, (unsigned long )(& i_____1), (long long )i_____1);
            __CrestApply2(17212, 1, (long long )(j_____1 - i_____1));
            __CrestApply2(17211, 2, (long long )(nb * (j_____1 - i_____1)));
            __CrestLoad(17210, (unsigned long )(& tmp___3), (long long )tmp___3);
            __CrestApply2(17209, 0, (long long )(nb * (j_____1 - i_____1) + tmp___3));
            __CrestStore(17216, (unsigned long )(& il));
# 236 "../HPL_plindx1.c"
            il = nb * (j_____1 - i_____1) + tmp___3;
          }
          }
        }
        }
# 237 "../HPL_plindx1.c"
        mem_65 = LINDXA + ip;
        __CrestLoad(17219, (unsigned long )(& il), (long long )il);
        __CrestLoad(17218, (unsigned long )(& iroff), (long long )iroff);
        __CrestApply2(17217, 1, (long long )(il - iroff));
        __CrestStore(17220, (unsigned long )mem_65);
# 237 "../HPL_plindx1.c"
        *mem_65 = il - iroff;
        __CrestLoad(17223, (unsigned long )(& ip), (long long )ip);
        __CrestLoad(17222, (unsigned long )0, (long long )1);
        __CrestApply2(17221, 0, (long long )(ip + 1));
        __CrestStore(17224, (unsigned long )(& ip));
# 237 "../HPL_plindx1.c"
        ip ++;
      } else {
        __CrestBranch(17165, 6293, 0);

      }
      }
      {
      __CrestLoad(17227, (unsigned long )(& srcrow), (long long )srcrow);
      __CrestLoad(17226, (unsigned long )(& icurrow), (long long )icurrow);
      __CrestApply2(17225, 12, (long long )(srcrow == icurrow));
# 243 "../HPL_plindx1.c"
      if (srcrow == icurrow) {
        __CrestBranch(17228, 6295, 1);
        {
        __CrestLoad(17232, (unsigned long )(& dstrow), (long long )dstrow);
        __CrestLoad(17231, (unsigned long )(& icurrow), (long long )icurrow);
        __CrestApply2(17230, 12, (long long )(dstrow == icurrow));
# 245 "../HPL_plindx1.c"
        if (dstrow == icurrow) {
          __CrestBranch(17233, 6296, 1);
          {
          __CrestLoad(17239, (unsigned long )(& dst), (long long )dst);
          __CrestLoad(17238, (unsigned long )(& ia), (long long )ia);
          __CrestApply2(17237, 1, (long long )(dst - ia));
          __CrestLoad(17236, (unsigned long )(& jb), (long long )jb);
          __CrestApply2(17235, 16, (long long )(dst - ia < jb));
# 245 "../HPL_plindx1.c"
          if (dst - ia < jb) {
            __CrestBranch(17240, 6297, 1);
# 247 "../HPL_plindx1.c"
            mem_66 = PERMU + ipU;
            __CrestLoad(17244, (unsigned long )(& dst), (long long )dst);
            __CrestLoad(17243, (unsigned long )(& ia), (long long )ia);
            __CrestApply2(17242, 1, (long long )(dst - ia));
            __CrestStore(17245, (unsigned long )mem_66);
# 247 "../HPL_plindx1.c"
            *mem_66 = dst - ia;
# 247 "../HPL_plindx1.c"
            mem_67 = IPMAPM1 + dstrow;
            __CrestLoad(17246, (unsigned long )mem_67, (long long )*mem_67);
            __CrestStore(17247, (unsigned long )(& il));
# 247 "../HPL_plindx1.c"
            il = *mem_67;
# 248 "../HPL_plindx1.c"
            mem_68 = iwork + ipU;
# 248 "../HPL_plindx1.c"
            mem_69 = IPLEN + il;
            __CrestLoad(17248, (unsigned long )mem_69, (long long )*mem_69);
            __CrestStore(17249, (unsigned long )mem_68);
# 248 "../HPL_plindx1.c"
            *mem_68 = *mem_69;
# 248 "../HPL_plindx1.c"
            mem_70 = IPLEN + il;
# 248 "../HPL_plindx1.c"
            mem_71 = IPLEN + il;
            __CrestLoad(17252, (unsigned long )mem_71, (long long )*mem_71);
            __CrestLoad(17251, (unsigned long )0, (long long )1);
            __CrestApply2(17250, 0, (long long )(*mem_71 + 1));
            __CrestStore(17253, (unsigned long )mem_70);
# 248 "../HPL_plindx1.c"
            *mem_70 = *mem_71 + 1;
            __CrestLoad(17256, (unsigned long )(& ipU), (long long )ipU);
            __CrestLoad(17255, (unsigned long )0, (long long )1);
            __CrestApply2(17254, 0, (long long )(ipU + 1));
            __CrestStore(17257, (unsigned long )(& ipU));
# 248 "../HPL_plindx1.c"
            ipU ++;
          } else {
            __CrestBranch(17241, 6298, 0);
# 245 "../HPL_plindx1.c"
            goto _L___0;
          }
          }
        } else {
          __CrestBranch(17234, 6299, 0);
          _L___0:
          {
          __CrestLoad(17260, (unsigned long )(& dstrow), (long long )dstrow);
          __CrestLoad(17259, (unsigned long )(& icurrow), (long long )icurrow);
          __CrestApply2(17258, 13, (long long )(dstrow != icurrow));
# 250 "../HPL_plindx1.c"
          if (dstrow != icurrow) {
            __CrestBranch(17261, 6300, 1);
            __CrestLoad(17263, (unsigned long )0, (long long )0);
            __CrestStore(17264, (unsigned long )(& j));
# 252 "../HPL_plindx1.c"
            j = 0;
            {
# 253 "../HPL_plindx1.c"
            while (1) {
              while_continue___2: ;
# 253 "../HPL_plindx1.c"
              mem_72 = IPID + j;
              __CrestLoad(17267, (unsigned long )(& dst), (long long )dst);
              __CrestLoad(17266, (unsigned long )mem_72, (long long )*mem_72);
              __CrestApply2(17265, 12, (long long )(dst == (int )*mem_72));
              __CrestStore(17268, (unsigned long )(& fndd));
# 253 "../HPL_plindx1.c"
              fndd = dst == (int )*mem_72;
              __CrestLoad(17271, (unsigned long )(& j), (long long )j);
              __CrestLoad(17270, (unsigned long )0, (long long )2);
              __CrestApply2(17269, 0, (long long )(j + 2));
              __CrestStore(17272, (unsigned long )(& j));
# 253 "../HPL_plindx1.c"
              j += 2;
              {
              __CrestLoad(17275, (unsigned long )(& fndd), (long long )fndd);
              __CrestLoad(17274, (unsigned long )0, (long long )0);
              __CrestApply2(17273, 12, (long long )(fndd == 0));
# 253 "../HPL_plindx1.c"
              if (fndd == 0) {
                __CrestBranch(17276, 6306, 1);
                {
                __CrestLoad(17280, (unsigned long )(& j), (long long )j);
                __CrestLoad(17279, (unsigned long )(& K), (long long )K);
                __CrestApply2(17278, 17, (long long )(j >= (int )K));
# 253 "../HPL_plindx1.c"
                if (j >= (int )K) {
                  __CrestBranch(17281, 6307, 1);
# 253 "../HPL_plindx1.c"
                  goto while_break___2;
                } else {
                  __CrestBranch(17282, 6308, 0);

                }
                }
              } else {
                __CrestBranch(17277, 6309, 0);
# 253 "../HPL_plindx1.c"
                goto while_break___2;
              }
              }
            }
            while_break___2: ;
            }
# 255 "../HPL_plindx1.c"
            mem_73 = PERMU + ipU;
# 255 "../HPL_plindx1.c"
            mem_74 = IPID + (j - 1);
            __CrestLoad(17285, (unsigned long )mem_74, (long long )*mem_74);
            __CrestLoad(17284, (unsigned long )(& ia), (long long )ia);
            __CrestApply2(17283, 1, (long long )(*mem_74 - (int const )ia));
            __CrestStore(17286, (unsigned long )mem_73);
# 255 "../HPL_plindx1.c"
            *mem_73 = (int )(*mem_74 - (int const )ia);
# 255 "../HPL_plindx1.c"
            mem_75 = IPMAPM1 + dstrow;
            __CrestLoad(17287, (unsigned long )mem_75, (long long )*mem_75);
            __CrestStore(17288, (unsigned long )(& il));
# 255 "../HPL_plindx1.c"
            il = *mem_75;
# 256 "../HPL_plindx1.c"
            mem_76 = iwork + ipU;
# 256 "../HPL_plindx1.c"
            mem_77 = IPLEN + il;
            __CrestLoad(17289, (unsigned long )mem_77, (long long )*mem_77);
            __CrestStore(17290, (unsigned long )mem_76);
# 256 "../HPL_plindx1.c"
            *mem_76 = *mem_77;
# 256 "../HPL_plindx1.c"
            mem_78 = IPLEN + il;
# 256 "../HPL_plindx1.c"
            mem_79 = IPLEN + il;
            __CrestLoad(17293, (unsigned long )mem_79, (long long )*mem_79);
            __CrestLoad(17292, (unsigned long )0, (long long )1);
            __CrestApply2(17291, 0, (long long )(*mem_79 + 1));
            __CrestStore(17294, (unsigned long )mem_78);
# 256 "../HPL_plindx1.c"
            *mem_78 = *mem_79 + 1;
            __CrestLoad(17297, (unsigned long )(& ipU), (long long )ipU);
            __CrestLoad(17296, (unsigned long )0, (long long )1);
            __CrestApply2(17295, 0, (long long )(ipU + 1));
            __CrestStore(17298, (unsigned long )(& ipU));
# 256 "../HPL_plindx1.c"
            ipU ++;
          } else {
            __CrestBranch(17262, 6312, 0);

          }
          }
        }
        }
      } else {
        __CrestBranch(17229, 6313, 0);

      }
      }
      __CrestLoad(17301, (unsigned long )(& i), (long long )i);
      __CrestLoad(17300, (unsigned long )0, (long long )2);
      __CrestApply2(17299, 0, (long long )(i + 2));
      __CrestStore(17302, (unsigned long )(& i));
# 227 "../HPL_plindx1.c"
      i += 2;
    }
    while_break___1: ;
    }
    __CrestLoad(17303, (unsigned long )0, (long long )0);
    __CrestStore(17304, (unsigned long )IPA);
# 260 "../HPL_plindx1.c"
    *IPA = 0;
  }
  }
  __CrestLoad(17305, (unsigned long )(& jb), (long long )jb);
# 266 "../HPL_plindx1.c"
  HPL_perm((int const )jb, iwork, PERMU, IWORK);
  __CrestClearStack(17306);
  __CrestLoad(17307, (unsigned long )(& nprow), (long long )nprow);
  __CrestStore(17308, (unsigned long )(& i));
# 270 "../HPL_plindx1.c"
  i = nprow;
  {
# 270 "../HPL_plindx1.c"
  while (1) {
    while_continue___3: ;
    {
    __CrestLoad(17311, (unsigned long )(& i), (long long )i);
    __CrestLoad(17310, (unsigned long )0, (long long )0);
    __CrestApply2(17309, 14, (long long )(i > 0));
# 270 "../HPL_plindx1.c"
    if (i > 0) {
      __CrestBranch(17312, 6322, 1);

    } else {
      __CrestBranch(17313, 6323, 0);
# 270 "../HPL_plindx1.c"
      goto while_break___3;
    }
    }
# 270 "../HPL_plindx1.c"
    mem_80 = IPLEN + i;
# 270 "../HPL_plindx1.c"
    mem_81 = IPLEN + (i - 1);
    __CrestLoad(17314, (unsigned long )mem_81, (long long )*mem_81);
    __CrestStore(17315, (unsigned long )mem_80);
# 270 "../HPL_plindx1.c"
    *mem_80 = *mem_81;
    __CrestLoad(17318, (unsigned long )(& i), (long long )i);
    __CrestLoad(17317, (unsigned long )0, (long long )1);
    __CrestApply2(17316, 1, (long long )(i - 1));
    __CrestStore(17319, (unsigned long )(& i));
# 270 "../HPL_plindx1.c"
    i --;
  }
  while_break___3: ;
  }
# 271 "../HPL_plindx1.c"
  mem_82 = IPLEN + 0;
  __CrestLoad(17320, (unsigned long )0, (long long )0);
  __CrestStore(17321, (unsigned long )mem_82);
# 271 "../HPL_plindx1.c"
  *mem_82 = 0;

  {
  __CrestReturn(17322);
# 53 "../HPL_plindx1.c"
  return;
  }
}
}
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 902 "//usr/include/mpich/mpi.h"
extern int MPI_Type_vector(int count , int blocklength , int stride , MPI_Datatype oldtype ,
                           MPI_Datatype *newtype ) ;
# 202 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_spreadN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE const SIDE ,
                 int const N , double *U , int const LDU , int const SRCDIST ,
                 int const *IPLEN , int const *IPMAP , int const *IPMAPM1 ) ;
# 53 "../HPL_spreadN.c"
void HPL_spreadN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE const SIDE ,
                 int const N , double *U , int const LDU , int const SRCDIST ,
                 int const *IPLEN , int const *IPMAP , int const *IPMAPM1 )
{
  MPI_Datatype type ;
  MPI_Status status ;
  MPI_Comm comm ;
  unsigned int ip2 ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydist2 ;
  int Cmsgid ;
  int ibuf ;
  int ierr ;
  int il ;
  int k ;
  int lbuf ;
  int lgth ;
  int myrow ;
  int npm1 ;
  int nprow ;
  int partner ;
  int tmp ;
  int tmp___0 ;
  struct HPL_S_grid *mem_32 ;
  struct HPL_S_grid *mem_33 ;
  struct HPL_S_grid *mem_34 ;
  int const *mem_35 ;
  int const *mem_36 ;
  int const *mem_37 ;
  int const *mem_38 ;
  int const *mem_39 ;
  int const *mem_40 ;
  int const *mem_41 ;
  int const *mem_42 ;
  int const *mem_43 ;
  int const *mem_44 ;
  int const *mem_45 ;
  int const *mem_46 ;

  {
  __CrestCall(17327, 102);
  __CrestStore(17326, (unsigned long )(& SRCDIST));
  __CrestStore(17325, (unsigned long )(& LDU));
  __CrestStore(17324, (unsigned long )(& N));
  __CrestStore(17323, (unsigned long )(& SIDE));
  __CrestLoad(17328, (unsigned long )0, (long long )1U);
  __CrestStore(17329, (unsigned long )(& ip2));
# 159 "../HPL_spreadN.c"
  ip2 = 1U;
  __CrestLoad(17330, (unsigned long )0, (long long )1U);
  __CrestStore(17331, (unsigned long )(& mask));
# 159 "../HPL_spreadN.c"
  mask = 1U;
  __CrestLoad(17332, (unsigned long )0, (long long )1001);
  __CrestStore(17333, (unsigned long )(& Cmsgid));
# 160 "../HPL_spreadN.c"
  Cmsgid = 1001;
  __CrestLoad(17334, (unsigned long )0, (long long )0);
  __CrestStore(17335, (unsigned long )(& ierr));
# 160 "../HPL_spreadN.c"
  ierr = 0;
# 166 "../HPL_spreadN.c"
  mem_32 = PANEL->grid;
  __CrestLoad(17336, (unsigned long )(& mem_32->myrow), (long long )mem_32->myrow);
  __CrestStore(17337, (unsigned long )(& myrow));
# 166 "../HPL_spreadN.c"
  myrow = mem_32->myrow;
# 166 "../HPL_spreadN.c"
  mem_33 = PANEL->grid;
  __CrestLoad(17338, (unsigned long )(& mem_33->nprow), (long long )mem_33->nprow);
  __CrestStore(17339, (unsigned long )(& nprow));
# 166 "../HPL_spreadN.c"
  nprow = mem_33->nprow;
# 167 "../HPL_spreadN.c"
  mem_34 = PANEL->grid;
  __CrestLoad(17340, (unsigned long )(& mem_34->col_comm), (long long )mem_34->col_comm);
  __CrestStore(17341, (unsigned long )(& comm));
# 167 "../HPL_spreadN.c"
  comm = mem_34->col_comm;
  {
  __CrestLoad(17344, (unsigned long )(& SIDE), (long long )SIDE);
  __CrestLoad(17343, (unsigned long )0, (long long )141U);
  __CrestApply2(17342, 12, (long long )((unsigned int const )SIDE == 141U));
# 171 "../HPL_spreadN.c"
  if ((unsigned int const )SIDE == 141U) {
    __CrestBranch(17345, 6331, 1);
    __CrestLoad(17347, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestStore(17348, (unsigned long )(& npm1));
# 173 "../HPL_spreadN.c"
    npm1 = (int )SRCDIST;
    __CrestLoad(17351, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17350, (unsigned long )0, (long long )1);
    __CrestApply2(17349, 0, (long long )(npm1 + 1));
    __CrestStore(17352, (unsigned long )(& nprow));
# 173 "../HPL_spreadN.c"
    nprow = npm1 + 1;
# 174 "../HPL_spreadN.c"
    mem_35 = IPMAPM1 + myrow;
    __CrestLoad(17353, (unsigned long )mem_35, (long long )*mem_35);
    __CrestStore(17354, (unsigned long )(& mydist));
# 174 "../HPL_spreadN.c"
    mydist = (unsigned int )*mem_35;
    {
    __CrestLoad(17357, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(17356, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17355, 14, (long long )(mydist > (unsigned int )SRCDIST));
# 174 "../HPL_spreadN.c"
    if (mydist > (unsigned int )SRCDIST) {
      __CrestBranch(17358, 6333, 1);
# 175 "../HPL_spreadN.c"
      goto return_label;
    } else {
      __CrestBranch(17359, 6335, 0);
      {
      __CrestLoad(17362, (unsigned long )(& npm1), (long long )npm1);
      __CrestLoad(17361, (unsigned long )0, (long long )0);
      __CrestApply2(17360, 12, (long long )(npm1 == 0));
# 174 "../HPL_spreadN.c"
      if (npm1 == 0) {
        __CrestBranch(17363, 6336, 1);
# 175 "../HPL_spreadN.c"
        goto return_label;
      } else {
        __CrestBranch(17364, 6338, 0);

      }
      }
    }
    }
    __CrestLoad(17365, (unsigned long )(& npm1), (long long )npm1);
    __CrestStore(17366, (unsigned long )(& k));
# 177 "../HPL_spreadN.c"
    k = npm1;
    {
# 177 "../HPL_spreadN.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(17369, (unsigned long )(& k), (long long )k);
      __CrestLoad(17368, (unsigned long )0, (long long )1);
      __CrestApply2(17367, 14, (long long )(k > 1));
# 177 "../HPL_spreadN.c"
      if (k > 1) {
        __CrestBranch(17370, 6344, 1);

      } else {
        __CrestBranch(17371, 6345, 0);
# 177 "../HPL_spreadN.c"
        goto while_break;
      }
      }
      __CrestLoad(17374, (unsigned long )(& k), (long long )k);
      __CrestLoad(17373, (unsigned long )0, (long long )1);
      __CrestApply2(17372, 9, (long long )(k >> 1));
      __CrestStore(17375, (unsigned long )(& k));
# 177 "../HPL_spreadN.c"
      k >>= 1;
      __CrestLoad(17378, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17377, (unsigned long )0, (long long )1);
      __CrestApply2(17376, 8, (long long )(ip2 << 1));
      __CrestStore(17379, (unsigned long )(& ip2));
# 177 "../HPL_spreadN.c"
      ip2 <<= 1;
      __CrestLoad(17382, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17381, (unsigned long )0, (long long )1);
      __CrestApply2(17380, 8, (long long )(mask << 1));
      __CrestStore(17383, (unsigned long )(& mask));
# 177 "../HPL_spreadN.c"
      mask <<= 1;
      __CrestLoad(17386, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17385, (unsigned long )0, (long long )1U);
      __CrestApply2(17384, 0, (long long )(mask + 1U));
      __CrestStore(17387, (unsigned long )(& mask));
# 177 "../HPL_spreadN.c"
      mask ++;
    }
    while_break: ;
    }
    __CrestLoad(17390, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17389, (unsigned long )(& mydist), (long long )mydist);
    __CrestApply2(17388, 1, (long long )((unsigned int )npm1 - mydist));
    __CrestStore(17391, (unsigned long )(& mydist));
# 178 "../HPL_spreadN.c"
    mydist = (unsigned int )npm1 - mydist;
    __CrestLoad(17392, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(17393, (unsigned long )(& mydist2));
# 178 "../HPL_spreadN.c"
    mydist2 = mydist;
    __CrestLoad(17396, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17395, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(17394, 1, (long long )((unsigned int )npm1 - ip2));
    __CrestStore(17397, (unsigned long )(& il));
# 178 "../HPL_spreadN.c"
    il = (int )((unsigned int )npm1 - ip2);
# 179 "../HPL_spreadN.c"
    mem_36 = IPLEN + nprow;
    __CrestLoad(17398, (unsigned long )mem_36, (long long )*mem_36);
    __CrestStore(17399, (unsigned long )(& lgth));
# 179 "../HPL_spreadN.c"
    lgth = (int )*mem_36;
    {
# 181 "../HPL_spreadN.c"
    while (1) {
      while_continue___0: ;
      __CrestLoad(17402, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17401, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17400, 7, (long long )(mask ^ ip2));
      __CrestStore(17403, (unsigned long )(& mask));
# 183 "../HPL_spreadN.c"
      mask ^= ip2;
      {
      __CrestLoad(17408, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(17407, (unsigned long )(& mask), (long long )mask);
      __CrestApply2(17406, 5, (long long )(mydist & mask));
      __CrestLoad(17405, (unsigned long )0, (long long )0U);
      __CrestApply2(17404, 12, (long long )((mydist & mask) == 0U));
# 185 "../HPL_spreadN.c"
      if ((mydist & mask) == 0U) {
        __CrestBranch(17409, 6354, 1);
        {
        __CrestLoad(17413, (unsigned long )(& il), (long long )il);
        __CrestLoad(17412, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17411, 16, (long long )(il < (int )ip2));
# 187 "../HPL_spreadN.c"
        if (il < (int )ip2) {
          __CrestBranch(17414, 6355, 1);
          __CrestLoad(17416, (unsigned long )(& il), (long long )il);
          __CrestStore(17417, (unsigned long )(& tmp));
# 187 "../HPL_spreadN.c"
          tmp = il;
        } else {
          __CrestBranch(17415, 6356, 0);
          __CrestLoad(17418, (unsigned long )(& ip2), (long long )ip2);
          __CrestStore(17419, (unsigned long )(& tmp));
# 187 "../HPL_spreadN.c"
          tmp = (int )ip2;
        }
        }
# 187 "../HPL_spreadN.c"
        mem_37 = IPLEN + (il - tmp);
        __CrestLoad(17420, (unsigned long )mem_37, (long long )*mem_37);
        __CrestStore(17421, (unsigned long )(& ibuf));
# 187 "../HPL_spreadN.c"
        ibuf = (int )*mem_37;
# 187 "../HPL_spreadN.c"
        mem_38 = IPLEN + (il + 1);
        __CrestLoad(17424, (unsigned long )mem_38, (long long )*mem_38);
        __CrestLoad(17423, (unsigned long )(& ibuf), (long long )ibuf);
        __CrestApply2(17422, 1, (long long )(*mem_38 - (int const )ibuf));
        __CrestStore(17425, (unsigned long )(& lbuf));
# 187 "../HPL_spreadN.c"
        lbuf = (int )(*mem_38 - (int const )ibuf);
        {
        __CrestLoad(17428, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(17427, (unsigned long )0, (long long )0);
        __CrestApply2(17426, 14, (long long )(lbuf > 0));
# 189 "../HPL_spreadN.c"
        if (lbuf > 0) {
          __CrestBranch(17429, 6359, 1);
          __CrestLoad(17433, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17432, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17431, 7, (long long )(mydist ^ ip2));
          __CrestStore(17434, (unsigned long )(& partner));
# 191 "../HPL_spreadN.c"
          partner = (int )(mydist ^ ip2);
          {
          __CrestLoad(17439, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17438, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17437, 5, (long long )(mydist & ip2));
          __CrestLoad(17436, (unsigned long )0, (long long )0);
          __CrestApply2(17435, 13, (long long )((mydist & ip2) != 0));
# 193 "../HPL_spreadN.c"
          if ((mydist & ip2) != 0) {
            __CrestBranch(17440, 6361, 1);
            {
            __CrestLoad(17444, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17443, (unsigned long )0, (long long )0);
            __CrestApply2(17442, 12, (long long )(ierr == 0));
# 195 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17445, 6362, 1);
              __CrestLoad(17447, (unsigned long )(& N), (long long )N);
              __CrestLoad(17448, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(17449, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(17450, (unsigned long )0, (long long )1275070475);
# 196 "../HPL_spreadN.c"
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
              __CrestHandleReturn(17452, (long long )ierr);
              __CrestStore(17451, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17446, 6363, 0);

            }
            }
            {
            __CrestLoad(17455, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17454, (unsigned long )0, (long long )0);
            __CrestApply2(17453, 12, (long long )(ierr == 0));
# 198 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17456, 6365, 1);
# 199 "../HPL_spreadN.c"
              ierr = MPI_Type_commit(& type);
              __CrestHandleReturn(17459, (long long )ierr);
              __CrestStore(17458, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17457, 6366, 0);

            }
            }
            {
            __CrestLoad(17462, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17461, (unsigned long )0, (long long )0);
            __CrestApply2(17460, 12, (long long )(ierr == 0));
# 200 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17463, 6368, 1);
# 201 "../HPL_spreadN.c"
              mem_39 = IPMAP + (npm1 - partner);
              __CrestLoad(17465, (unsigned long )0, (long long )1);
              __CrestLoad(17466, (unsigned long )(& type), (long long )type);
              __CrestLoad(17467, (unsigned long )mem_39, (long long )*mem_39);
              __CrestLoad(17468, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(17469, (unsigned long )(& comm), (long long )comm);
# 201 "../HPL_spreadN.c"
              ierr = MPI_Recv((void *)((U + ibuf) + 0), 1, type, (int )*mem_39, Cmsgid,
                              comm, & status);
              __CrestHandleReturn(17471, (long long )ierr);
              __CrestStore(17470, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17464, 6369, 0);

            }
            }
            {
            __CrestLoad(17474, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17473, (unsigned long )0, (long long )0);
            __CrestApply2(17472, 12, (long long )(ierr == 0));
# 204 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17475, 6371, 1);
# 205 "../HPL_spreadN.c"
              ierr = MPI_Type_free(& type);
              __CrestHandleReturn(17478, (long long )ierr);
              __CrestStore(17477, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17476, 6372, 0);

            }
            }
          } else {
            __CrestBranch(17441, 6373, 0);
            {
            __CrestLoad(17481, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(17480, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(17479, 16, (long long )(partner < nprow));
# 207 "../HPL_spreadN.c"
            if (partner < nprow) {
              __CrestBranch(17482, 6374, 1);
              {
              __CrestLoad(17486, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17485, (unsigned long )0, (long long )0);
              __CrestApply2(17484, 12, (long long )(ierr == 0));
# 209 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17487, 6375, 1);
                __CrestLoad(17489, (unsigned long )(& N), (long long )N);
                __CrestLoad(17490, (unsigned long )(& lbuf), (long long )lbuf);
                __CrestLoad(17491, (unsigned long )(& LDU), (long long )LDU);
                __CrestLoad(17492, (unsigned long )0, (long long )1275070475);
# 210 "../HPL_spreadN.c"
                ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
                __CrestHandleReturn(17494, (long long )ierr);
                __CrestStore(17493, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17488, 6376, 0);

              }
              }
              {
              __CrestLoad(17497, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17496, (unsigned long )0, (long long )0);
              __CrestApply2(17495, 12, (long long )(ierr == 0));
# 212 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17498, 6378, 1);
# 213 "../HPL_spreadN.c"
                ierr = MPI_Type_commit(& type);
                __CrestHandleReturn(17501, (long long )ierr);
                __CrestStore(17500, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17499, 6379, 0);

              }
              }
              {
              __CrestLoad(17504, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17503, (unsigned long )0, (long long )0);
              __CrestApply2(17502, 12, (long long )(ierr == 0));
# 214 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17505, 6381, 1);
# 215 "../HPL_spreadN.c"
                mem_40 = IPMAP + (npm1 - partner);
                __CrestLoad(17507, (unsigned long )0, (long long )1);
                __CrestLoad(17508, (unsigned long )(& type), (long long )type);
                __CrestLoad(17509, (unsigned long )mem_40, (long long )*mem_40);
                __CrestLoad(17510, (unsigned long )(& Cmsgid), (long long )Cmsgid);
                __CrestLoad(17511, (unsigned long )(& comm), (long long )comm);
# 215 "../HPL_spreadN.c"
                ierr = MPI_Send((void const *)((U + ibuf) + 0), 1, type, (int )*mem_40,
                                Cmsgid, comm);
                __CrestHandleReturn(17513, (long long )ierr);
                __CrestStore(17512, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17506, 6382, 0);

              }
              }
              {
              __CrestLoad(17516, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17515, (unsigned long )0, (long long )0);
              __CrestApply2(17514, 12, (long long )(ierr == 0));
# 217 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17517, 6384, 1);
# 218 "../HPL_spreadN.c"
                ierr = MPI_Type_free(& type);
                __CrestHandleReturn(17520, (long long )ierr);
                __CrestStore(17519, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17518, 6385, 0);

              }
              }
            } else {
              __CrestBranch(17483, 6386, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(17430, 6387, 0);

        }
        }
      } else {
        __CrestBranch(17410, 6388, 0);

      }
      }
      {
      __CrestLoad(17523, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(17522, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17521, 16, (long long )(mydist2 < ip2));
# 223 "../HPL_spreadN.c"
      if (mydist2 < ip2) {
        __CrestBranch(17524, 6390, 1);
        __CrestLoad(17528, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17527, (unsigned long )0, (long long )1);
        __CrestApply2(17526, 9, (long long )(ip2 >> 1));
        __CrestStore(17529, (unsigned long )(& ip2));
# 223 "../HPL_spreadN.c"
        ip2 >>= 1;
        __CrestLoad(17532, (unsigned long )(& il), (long long )il);
        __CrestLoad(17531, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17530, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(17533, (unsigned long )(& il));
# 223 "../HPL_spreadN.c"
        il = (int )((unsigned int )il + ip2);
      } else {
        __CrestBranch(17525, 6391, 0);
        __CrestLoad(17536, (unsigned long )(& mydist2), (long long )mydist2);
        __CrestLoad(17535, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17534, 1, (long long )(mydist2 - ip2));
        __CrestStore(17537, (unsigned long )(& mydist2));
# 224 "../HPL_spreadN.c"
        mydist2 -= ip2;
        __CrestLoad(17540, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17539, (unsigned long )0, (long long )1);
        __CrestApply2(17538, 9, (long long )(ip2 >> 1));
        __CrestStore(17541, (unsigned long )(& ip2));
# 224 "../HPL_spreadN.c"
        ip2 >>= 1;
        __CrestLoad(17544, (unsigned long )(& il), (long long )il);
        __CrestLoad(17543, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17542, 1, (long long )((unsigned int )il - ip2));
        __CrestStore(17545, (unsigned long )(& il));
# 224 "../HPL_spreadN.c"
        il = (int )((unsigned int )il - ip2);
      }
      }
      {
      __CrestLoad(17548, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(17547, (unsigned long )0, (long long )2);
      __CrestApply2(17546, 12, (long long )(*IFLAG == 2));
# 228 "../HPL_spreadN.c"
      if (*IFLAG == 2) {
        __CrestBranch(17549, 6393, 1);
# 228 "../HPL_spreadN.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(17551);
      } else {
        __CrestBranch(17550, 6394, 0);

      }
      }
      {
      __CrestLoad(17554, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17553, (unsigned long )0, (long long )0U);
      __CrestApply2(17552, 15, (long long )(ip2 <= 0U));
# 181 "../HPL_spreadN.c"
      if (ip2 <= 0U) {
        __CrestBranch(17555, 6396, 1);
# 181 "../HPL_spreadN.c"
        goto while_break___0;
      } else {
        __CrestBranch(17556, 6397, 0);

      }
      }
    }
    while_break___0: ;
    }
  } else {
    __CrestBranch(17346, 6399, 0);
    __CrestLoad(17559, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(17558, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17557, 1, (long long )(nprow - (int )SRCDIST));
    __CrestStore(17560, (unsigned long )(& nprow));
# 234 "../HPL_spreadN.c"
    nprow -= (int )SRCDIST;
    __CrestLoad(17563, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(17562, (unsigned long )0, (long long )1);
    __CrestApply2(17561, 1, (long long )(nprow - 1));
    __CrestStore(17564, (unsigned long )(& npm1));
# 234 "../HPL_spreadN.c"
    npm1 = nprow - 1;
# 235 "../HPL_spreadN.c"
    mem_41 = IPMAPM1 + myrow;
    __CrestLoad(17565, (unsigned long )mem_41, (long long )*mem_41);
    __CrestStore(17566, (unsigned long )(& mydist));
# 235 "../HPL_spreadN.c"
    mydist = (unsigned int )*mem_41;
    {
    __CrestLoad(17569, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(17568, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17567, 16, (long long )(mydist < (unsigned int )SRCDIST));
# 235 "../HPL_spreadN.c"
    if (mydist < (unsigned int )SRCDIST) {
      __CrestBranch(17570, 6401, 1);
# 236 "../HPL_spreadN.c"
      goto return_label;
    } else {
      __CrestBranch(17571, 6403, 0);
      {
      __CrestLoad(17574, (unsigned long )(& npm1), (long long )npm1);
      __CrestLoad(17573, (unsigned long )0, (long long )0);
      __CrestApply2(17572, 12, (long long )(npm1 == 0));
# 235 "../HPL_spreadN.c"
      if (npm1 == 0) {
        __CrestBranch(17575, 6404, 1);
# 236 "../HPL_spreadN.c"
        goto return_label;
      } else {
        __CrestBranch(17576, 6406, 0);

      }
      }
    }
    }
    __CrestLoad(17577, (unsigned long )(& npm1), (long long )npm1);
    __CrestStore(17578, (unsigned long )(& k));
# 238 "../HPL_spreadN.c"
    k = npm1;
    {
# 238 "../HPL_spreadN.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(17581, (unsigned long )(& k), (long long )k);
      __CrestLoad(17580, (unsigned long )0, (long long )1);
      __CrestApply2(17579, 14, (long long )(k > 1));
# 238 "../HPL_spreadN.c"
      if (k > 1) {
        __CrestBranch(17582, 6412, 1);

      } else {
        __CrestBranch(17583, 6413, 0);
# 238 "../HPL_spreadN.c"
        goto while_break___1;
      }
      }
      __CrestLoad(17586, (unsigned long )(& k), (long long )k);
      __CrestLoad(17585, (unsigned long )0, (long long )1);
      __CrestApply2(17584, 9, (long long )(k >> 1));
      __CrestStore(17587, (unsigned long )(& k));
# 238 "../HPL_spreadN.c"
      k >>= 1;
      __CrestLoad(17590, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17589, (unsigned long )0, (long long )1);
      __CrestApply2(17588, 8, (long long )(ip2 << 1));
      __CrestStore(17591, (unsigned long )(& ip2));
# 238 "../HPL_spreadN.c"
      ip2 <<= 1;
      __CrestLoad(17594, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17593, (unsigned long )0, (long long )1);
      __CrestApply2(17592, 8, (long long )(mask << 1));
      __CrestStore(17595, (unsigned long )(& mask));
# 238 "../HPL_spreadN.c"
      mask <<= 1;
      __CrestLoad(17598, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17597, (unsigned long )0, (long long )1U);
      __CrestApply2(17596, 0, (long long )(mask + 1U));
      __CrestStore(17599, (unsigned long )(& mask));
# 238 "../HPL_spreadN.c"
      mask ++;
    }
    while_break___1: ;
    }
    __CrestLoad(17602, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(17601, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17600, 1, (long long )(mydist - (unsigned int )SRCDIST));
    __CrestStore(17603, (unsigned long )(& mydist));
# 239 "../HPL_spreadN.c"
    mydist -= (unsigned int )SRCDIST;
    __CrestLoad(17604, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(17605, (unsigned long )(& mydist2));
# 239 "../HPL_spreadN.c"
    mydist2 = mydist;
    __CrestLoad(17606, (unsigned long )(& ip2), (long long )ip2);
    __CrestStore(17607, (unsigned long )(& il));
# 239 "../HPL_spreadN.c"
    il = (int )ip2;
# 240 "../HPL_spreadN.c"
    mem_42 = IPLEN + (SRCDIST + (int const )nprow);
    __CrestLoad(17608, (unsigned long )mem_42, (long long )*mem_42);
    __CrestStore(17609, (unsigned long )(& lgth));
# 240 "../HPL_spreadN.c"
    lgth = (int )*mem_42;
    {
# 244 "../HPL_spreadN.c"
    while (1) {
      while_continue___2: ;
      __CrestLoad(17612, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17611, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17610, 7, (long long )(mask ^ ip2));
      __CrestStore(17613, (unsigned long )(& mask));
# 246 "../HPL_spreadN.c"
      mask ^= ip2;
      {
      __CrestLoad(17618, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(17617, (unsigned long )(& mask), (long long )mask);
      __CrestApply2(17616, 5, (long long )(mydist & mask));
      __CrestLoad(17615, (unsigned long )0, (long long )0U);
      __CrestApply2(17614, 12, (long long )((mydist & mask) == 0U));
# 248 "../HPL_spreadN.c"
      if ((mydist & mask) == 0U) {
        __CrestBranch(17619, 6422, 1);
        __CrestLoad(17623, (unsigned long )(& il), (long long )il);
        __CrestLoad(17622, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17621, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(17624, (unsigned long )(& k));
# 250 "../HPL_spreadN.c"
        k = (int )((unsigned int )il + ip2);
# 250 "../HPL_spreadN.c"
        mem_43 = IPLEN + (SRCDIST + (int const )il);
        __CrestLoad(17625, (unsigned long )mem_43, (long long )*mem_43);
        __CrestStore(17626, (unsigned long )(& ibuf));
# 250 "../HPL_spreadN.c"
        ibuf = (int )*mem_43;
        {
        __CrestLoad(17629, (unsigned long )(& k), (long long )k);
        __CrestLoad(17628, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(17627, 17, (long long )(k >= nprow));
# 251 "../HPL_spreadN.c"
        if (k >= nprow) {
          __CrestBranch(17630, 6424, 1);
          __CrestLoad(17632, (unsigned long )(& lgth), (long long )lgth);
          __CrestStore(17633, (unsigned long )(& tmp___0));
# 251 "../HPL_spreadN.c"
          tmp___0 = lgth;
        } else {
          __CrestBranch(17631, 6425, 0);
# 251 "../HPL_spreadN.c"
          mem_44 = IPLEN + (SRCDIST + (int const )k);
          __CrestLoad(17634, (unsigned long )mem_44, (long long )*mem_44);
          __CrestStore(17635, (unsigned long )(& tmp___0));
# 251 "../HPL_spreadN.c"
          tmp___0 = (int )*mem_44;
        }
        }
        __CrestLoad(17638, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestLoad(17637, (unsigned long )(& ibuf), (long long )ibuf);
        __CrestApply2(17636, 1, (long long )(tmp___0 - ibuf));
        __CrestStore(17639, (unsigned long )(& lbuf));
# 251 "../HPL_spreadN.c"
        lbuf = tmp___0 - ibuf;
        {
        __CrestLoad(17642, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(17641, (unsigned long )0, (long long )0);
        __CrestApply2(17640, 14, (long long )(lbuf > 0));
# 253 "../HPL_spreadN.c"
        if (lbuf > 0) {
          __CrestBranch(17643, 6428, 1);
          __CrestLoad(17647, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17646, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17645, 7, (long long )(mydist ^ ip2));
          __CrestStore(17648, (unsigned long )(& partner));
# 255 "../HPL_spreadN.c"
          partner = (int )(mydist ^ ip2);
          {
          __CrestLoad(17653, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17652, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17651, 5, (long long )(mydist & ip2));
          __CrestLoad(17650, (unsigned long )0, (long long )0);
          __CrestApply2(17649, 13, (long long )((mydist & ip2) != 0));
# 257 "../HPL_spreadN.c"
          if ((mydist & ip2) != 0) {
            __CrestBranch(17654, 6430, 1);
            {
            __CrestLoad(17658, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17657, (unsigned long )0, (long long )0);
            __CrestApply2(17656, 12, (long long )(ierr == 0));
# 259 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17659, 6431, 1);
              __CrestLoad(17661, (unsigned long )(& N), (long long )N);
              __CrestLoad(17662, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(17663, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(17664, (unsigned long )0, (long long )1275070475);
# 260 "../HPL_spreadN.c"
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
              __CrestHandleReturn(17666, (long long )ierr);
              __CrestStore(17665, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17660, 6432, 0);

            }
            }
            {
            __CrestLoad(17669, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17668, (unsigned long )0, (long long )0);
            __CrestApply2(17667, 12, (long long )(ierr == 0));
# 262 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17670, 6434, 1);
# 263 "../HPL_spreadN.c"
              ierr = MPI_Type_commit(& type);
              __CrestHandleReturn(17673, (long long )ierr);
              __CrestStore(17672, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17671, 6435, 0);

            }
            }
            {
            __CrestLoad(17676, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17675, (unsigned long )0, (long long )0);
            __CrestApply2(17674, 12, (long long )(ierr == 0));
# 264 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17677, 6437, 1);
# 265 "../HPL_spreadN.c"
              mem_45 = IPMAP + (SRCDIST + (int const )partner);
              __CrestLoad(17679, (unsigned long )0, (long long )1);
              __CrestLoad(17680, (unsigned long )(& type), (long long )type);
              __CrestLoad(17681, (unsigned long )mem_45, (long long )*mem_45);
              __CrestLoad(17682, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(17683, (unsigned long )(& comm), (long long )comm);
# 265 "../HPL_spreadN.c"
              ierr = MPI_Recv((void *)((U + ibuf) + 0), 1, type, (int )*mem_45, Cmsgid,
                              comm, & status);
              __CrestHandleReturn(17685, (long long )ierr);
              __CrestStore(17684, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17678, 6438, 0);

            }
            }
            {
            __CrestLoad(17688, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17687, (unsigned long )0, (long long )0);
            __CrestApply2(17686, 12, (long long )(ierr == 0));
# 268 "../HPL_spreadN.c"
            if (ierr == 0) {
              __CrestBranch(17689, 6440, 1);
# 269 "../HPL_spreadN.c"
              ierr = MPI_Type_free(& type);
              __CrestHandleReturn(17692, (long long )ierr);
              __CrestStore(17691, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17690, 6441, 0);

            }
            }
          } else {
            __CrestBranch(17655, 6442, 0);
            {
            __CrestLoad(17695, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(17694, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(17693, 16, (long long )(partner < nprow));
# 271 "../HPL_spreadN.c"
            if (partner < nprow) {
              __CrestBranch(17696, 6443, 1);
              {
              __CrestLoad(17700, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17699, (unsigned long )0, (long long )0);
              __CrestApply2(17698, 12, (long long )(ierr == 0));
# 273 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17701, 6444, 1);
                __CrestLoad(17703, (unsigned long )(& N), (long long )N);
                __CrestLoad(17704, (unsigned long )(& lbuf), (long long )lbuf);
                __CrestLoad(17705, (unsigned long )(& LDU), (long long )LDU);
                __CrestLoad(17706, (unsigned long )0, (long long )1275070475);
# 274 "../HPL_spreadN.c"
                ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
                __CrestHandleReturn(17708, (long long )ierr);
                __CrestStore(17707, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17702, 6445, 0);

              }
              }
              {
              __CrestLoad(17711, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17710, (unsigned long )0, (long long )0);
              __CrestApply2(17709, 12, (long long )(ierr == 0));
# 276 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17712, 6447, 1);
# 277 "../HPL_spreadN.c"
                ierr = MPI_Type_commit(& type);
                __CrestHandleReturn(17715, (long long )ierr);
                __CrestStore(17714, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17713, 6448, 0);

              }
              }
              {
              __CrestLoad(17718, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17717, (unsigned long )0, (long long )0);
              __CrestApply2(17716, 12, (long long )(ierr == 0));
# 278 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17719, 6450, 1);
# 279 "../HPL_spreadN.c"
                mem_46 = IPMAP + (SRCDIST + (int const )partner);
                __CrestLoad(17721, (unsigned long )0, (long long )1);
                __CrestLoad(17722, (unsigned long )(& type), (long long )type);
                __CrestLoad(17723, (unsigned long )mem_46, (long long )*mem_46);
                __CrestLoad(17724, (unsigned long )(& Cmsgid), (long long )Cmsgid);
                __CrestLoad(17725, (unsigned long )(& comm), (long long )comm);
# 279 "../HPL_spreadN.c"
                ierr = MPI_Send((void const *)((U + ibuf) + 0), 1, type, (int )*mem_46,
                                Cmsgid, comm);
                __CrestHandleReturn(17727, (long long )ierr);
                __CrestStore(17726, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17720, 6451, 0);

              }
              }
              {
              __CrestLoad(17730, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17729, (unsigned long )0, (long long )0);
              __CrestApply2(17728, 12, (long long )(ierr == 0));
# 282 "../HPL_spreadN.c"
              if (ierr == 0) {
                __CrestBranch(17731, 6453, 1);
# 283 "../HPL_spreadN.c"
                ierr = MPI_Type_free(& type);
                __CrestHandleReturn(17734, (long long )ierr);
                __CrestStore(17733, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17732, 6454, 0);

              }
              }
            } else {
              __CrestBranch(17697, 6455, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(17644, 6456, 0);

        }
        }
      } else {
        __CrestBranch(17620, 6457, 0);

      }
      }
      {
      __CrestLoad(17737, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(17736, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17735, 16, (long long )(mydist2 < ip2));
# 288 "../HPL_spreadN.c"
      if (mydist2 < ip2) {
        __CrestBranch(17738, 6459, 1);
        __CrestLoad(17742, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17741, (unsigned long )0, (long long )1);
        __CrestApply2(17740, 9, (long long )(ip2 >> 1));
        __CrestStore(17743, (unsigned long )(& ip2));
# 288 "../HPL_spreadN.c"
        ip2 >>= 1;
        __CrestLoad(17746, (unsigned long )(& il), (long long )il);
        __CrestLoad(17745, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17744, 1, (long long )((unsigned int )il - ip2));
        __CrestStore(17747, (unsigned long )(& il));
# 288 "../HPL_spreadN.c"
        il = (int )((unsigned int )il - ip2);
      } else {
        __CrestBranch(17739, 6460, 0);
        __CrestLoad(17750, (unsigned long )(& mydist2), (long long )mydist2);
        __CrestLoad(17749, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17748, 1, (long long )(mydist2 - ip2));
        __CrestStore(17751, (unsigned long )(& mydist2));
# 289 "../HPL_spreadN.c"
        mydist2 -= ip2;
        __CrestLoad(17754, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17753, (unsigned long )0, (long long )1);
        __CrestApply2(17752, 9, (long long )(ip2 >> 1));
        __CrestStore(17755, (unsigned long )(& ip2));
# 289 "../HPL_spreadN.c"
        ip2 >>= 1;
        __CrestLoad(17758, (unsigned long )(& il), (long long )il);
        __CrestLoad(17757, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17756, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(17759, (unsigned long )(& il));
# 289 "../HPL_spreadN.c"
        il = (int )((unsigned int )il + ip2);
      }
      }
      {
      __CrestLoad(17762, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(17761, (unsigned long )0, (long long )2);
      __CrestApply2(17760, 12, (long long )(*IFLAG == 2));
# 293 "../HPL_spreadN.c"
      if (*IFLAG == 2) {
        __CrestBranch(17763, 6462, 1);
# 293 "../HPL_spreadN.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(17765);
      } else {
        __CrestBranch(17764, 6463, 0);

      }
      }
      {
      __CrestLoad(17768, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17767, (unsigned long )0, (long long )0U);
      __CrestApply2(17766, 15, (long long )(ip2 <= 0U));
# 244 "../HPL_spreadN.c"
      if (ip2 <= 0U) {
        __CrestBranch(17769, 6465, 1);
# 244 "../HPL_spreadN.c"
        goto while_break___2;
      } else {
        __CrestBranch(17770, 6466, 0);

      }
      }
    }
    while_break___2: ;
    }
  }
  }
  {
  __CrestLoad(17773, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(17772, (unsigned long )0, (long long )0);
  __CrestApply2(17771, 13, (long long )(ierr != 0));
# 298 "../HPL_spreadN.c"
  if (ierr != 0) {
    __CrestBranch(17774, 6469, 1);
    __CrestLoad(17776, (unsigned long )0, (long long )299);
# 299 "../HPL_spreadN.c"
    HPL_pabort(299, "HPL_spreadN", "MPI call failed");
    __CrestClearStack(17777);
  } else {
    __CrestBranch(17775, 6470, 0);

  }
  }

  return_label:
  {
  __CrestReturn(17778);
# 53 "../HPL_spreadN.c"
  return;
  }
}
}
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 216 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_spreadT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE const SIDE ,
                 int const N , double *U , int const LDU , int const SRCDIST ,
                 int const *IPLEN , int const *IPMAP , int const *IPMAPM1 ) ;
# 53 "../HPL_spreadT.c"
void HPL_spreadT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE const SIDE ,
                 int const N , double *U , int const LDU , int const SRCDIST ,
                 int const *IPLEN , int const *IPMAP , int const *IPMAPM1 )
{
  MPI_Status status ;
  MPI_Comm comm ;
  unsigned int ip2 ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydist2 ;
  int Cmsgid ;
  int ibuf ;
  int ierr ;
  int il ;
  int k ;
  int lbuf ;
  int lgth ;
  int myrow ;
  int npm1 ;
  int nprow ;
  int partner ;
  int tmp ;
  int tmp___0 ;
  struct HPL_S_grid *mem_31 ;
  struct HPL_S_grid *mem_32 ;
  struct HPL_S_grid *mem_33 ;
  int const *mem_34 ;
  int const *mem_35 ;
  int const *mem_36 ;
  int const *mem_37 ;
  int const *mem_38 ;
  int const *mem_39 ;
  int const *mem_40 ;
  int const *mem_41 ;
  int const *mem_42 ;
  int const *mem_43 ;
  int const *mem_44 ;
  int const *mem_45 ;

  {
  __CrestCall(17783, 103);
  __CrestStore(17782, (unsigned long )(& SRCDIST));
  __CrestStore(17781, (unsigned long )(& LDU));
  __CrestStore(17780, (unsigned long )(& N));
  __CrestStore(17779, (unsigned long )(& SIDE));
  __CrestLoad(17784, (unsigned long )0, (long long )1U);
  __CrestStore(17785, (unsigned long )(& ip2));
# 161 "../HPL_spreadT.c"
  ip2 = 1U;
  __CrestLoad(17786, (unsigned long )0, (long long )1U);
  __CrestStore(17787, (unsigned long )(& mask));
# 161 "../HPL_spreadT.c"
  mask = 1U;
  __CrestLoad(17788, (unsigned long )0, (long long )1001);
  __CrestStore(17789, (unsigned long )(& Cmsgid));
# 162 "../HPL_spreadT.c"
  Cmsgid = 1001;
  __CrestLoad(17790, (unsigned long )0, (long long )0);
  __CrestStore(17791, (unsigned long )(& ierr));
# 162 "../HPL_spreadT.c"
  ierr = 0;
# 168 "../HPL_spreadT.c"
  mem_31 = PANEL->grid;
  __CrestLoad(17792, (unsigned long )(& mem_31->myrow), (long long )mem_31->myrow);
  __CrestStore(17793, (unsigned long )(& myrow));
# 168 "../HPL_spreadT.c"
  myrow = mem_31->myrow;
# 168 "../HPL_spreadT.c"
  mem_32 = PANEL->grid;
  __CrestLoad(17794, (unsigned long )(& mem_32->nprow), (long long )mem_32->nprow);
  __CrestStore(17795, (unsigned long )(& nprow));
# 168 "../HPL_spreadT.c"
  nprow = mem_32->nprow;
# 169 "../HPL_spreadT.c"
  mem_33 = PANEL->grid;
  __CrestLoad(17796, (unsigned long )(& mem_33->col_comm), (long long )mem_33->col_comm);
  __CrestStore(17797, (unsigned long )(& comm));
# 169 "../HPL_spreadT.c"
  comm = mem_33->col_comm;
  {
  __CrestLoad(17800, (unsigned long )(& SIDE), (long long )SIDE);
  __CrestLoad(17799, (unsigned long )0, (long long )141U);
  __CrestApply2(17798, 12, (long long )((unsigned int const )SIDE == 141U));
# 173 "../HPL_spreadT.c"
  if ((unsigned int const )SIDE == 141U) {
    __CrestBranch(17801, 6475, 1);
    __CrestLoad(17803, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestStore(17804, (unsigned long )(& npm1));
# 175 "../HPL_spreadT.c"
    npm1 = (int )SRCDIST;
    __CrestLoad(17807, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17806, (unsigned long )0, (long long )1);
    __CrestApply2(17805, 0, (long long )(npm1 + 1));
    __CrestStore(17808, (unsigned long )(& nprow));
# 175 "../HPL_spreadT.c"
    nprow = npm1 + 1;
# 176 "../HPL_spreadT.c"
    mem_34 = IPMAPM1 + myrow;
    __CrestLoad(17809, (unsigned long )mem_34, (long long )*mem_34);
    __CrestStore(17810, (unsigned long )(& mydist));
# 176 "../HPL_spreadT.c"
    mydist = (unsigned int )*mem_34;
    {
    __CrestLoad(17813, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(17812, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17811, 14, (long long )(mydist > (unsigned int )SRCDIST));
# 176 "../HPL_spreadT.c"
    if (mydist > (unsigned int )SRCDIST) {
      __CrestBranch(17814, 6477, 1);
# 177 "../HPL_spreadT.c"
      goto return_label;
    } else {
      __CrestBranch(17815, 6479, 0);
      {
      __CrestLoad(17818, (unsigned long )(& npm1), (long long )npm1);
      __CrestLoad(17817, (unsigned long )0, (long long )0);
      __CrestApply2(17816, 12, (long long )(npm1 == 0));
# 176 "../HPL_spreadT.c"
      if (npm1 == 0) {
        __CrestBranch(17819, 6480, 1);
# 177 "../HPL_spreadT.c"
        goto return_label;
      } else {
        __CrestBranch(17820, 6482, 0);

      }
      }
    }
    }
    __CrestLoad(17821, (unsigned long )(& npm1), (long long )npm1);
    __CrestStore(17822, (unsigned long )(& k));
# 179 "../HPL_spreadT.c"
    k = npm1;
    {
# 179 "../HPL_spreadT.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(17825, (unsigned long )(& k), (long long )k);
      __CrestLoad(17824, (unsigned long )0, (long long )1);
      __CrestApply2(17823, 14, (long long )(k > 1));
# 179 "../HPL_spreadT.c"
      if (k > 1) {
        __CrestBranch(17826, 6488, 1);

      } else {
        __CrestBranch(17827, 6489, 0);
# 179 "../HPL_spreadT.c"
        goto while_break;
      }
      }
      __CrestLoad(17830, (unsigned long )(& k), (long long )k);
      __CrestLoad(17829, (unsigned long )0, (long long )1);
      __CrestApply2(17828, 9, (long long )(k >> 1));
      __CrestStore(17831, (unsigned long )(& k));
# 179 "../HPL_spreadT.c"
      k >>= 1;
      __CrestLoad(17834, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17833, (unsigned long )0, (long long )1);
      __CrestApply2(17832, 8, (long long )(ip2 << 1));
      __CrestStore(17835, (unsigned long )(& ip2));
# 179 "../HPL_spreadT.c"
      ip2 <<= 1;
      __CrestLoad(17838, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17837, (unsigned long )0, (long long )1);
      __CrestApply2(17836, 8, (long long )(mask << 1));
      __CrestStore(17839, (unsigned long )(& mask));
# 179 "../HPL_spreadT.c"
      mask <<= 1;
      __CrestLoad(17842, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17841, (unsigned long )0, (long long )1U);
      __CrestApply2(17840, 0, (long long )(mask + 1U));
      __CrestStore(17843, (unsigned long )(& mask));
# 179 "../HPL_spreadT.c"
      mask ++;
    }
    while_break: ;
    }
    __CrestLoad(17846, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17845, (unsigned long )(& mydist), (long long )mydist);
    __CrestApply2(17844, 1, (long long )((unsigned int )npm1 - mydist));
    __CrestStore(17847, (unsigned long )(& mydist));
# 180 "../HPL_spreadT.c"
    mydist = (unsigned int )npm1 - mydist;
    __CrestLoad(17848, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(17849, (unsigned long )(& mydist2));
# 180 "../HPL_spreadT.c"
    mydist2 = mydist;
    __CrestLoad(17852, (unsigned long )(& npm1), (long long )npm1);
    __CrestLoad(17851, (unsigned long )(& ip2), (long long )ip2);
    __CrestApply2(17850, 1, (long long )((unsigned int )npm1 - ip2));
    __CrestStore(17853, (unsigned long )(& il));
# 180 "../HPL_spreadT.c"
    il = (int )((unsigned int )npm1 - ip2);
# 181 "../HPL_spreadT.c"
    mem_35 = IPLEN + nprow;
    __CrestLoad(17854, (unsigned long )mem_35, (long long )*mem_35);
    __CrestStore(17855, (unsigned long )(& lgth));
# 181 "../HPL_spreadT.c"
    lgth = (int )*mem_35;
    {
# 183 "../HPL_spreadT.c"
    while (1) {
      while_continue___0: ;
      __CrestLoad(17858, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(17857, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17856, 7, (long long )(mask ^ ip2));
      __CrestStore(17859, (unsigned long )(& mask));
# 185 "../HPL_spreadT.c"
      mask ^= ip2;
      {
      __CrestLoad(17864, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(17863, (unsigned long )(& mask), (long long )mask);
      __CrestApply2(17862, 5, (long long )(mydist & mask));
      __CrestLoad(17861, (unsigned long )0, (long long )0U);
      __CrestApply2(17860, 12, (long long )((mydist & mask) == 0U));
# 187 "../HPL_spreadT.c"
      if ((mydist & mask) == 0U) {
        __CrestBranch(17865, 6498, 1);
        {
        __CrestLoad(17869, (unsigned long )(& il), (long long )il);
        __CrestLoad(17868, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17867, 16, (long long )(il < (int )ip2));
# 189 "../HPL_spreadT.c"
        if (il < (int )ip2) {
          __CrestBranch(17870, 6499, 1);
          __CrestLoad(17872, (unsigned long )(& il), (long long )il);
          __CrestStore(17873, (unsigned long )(& tmp));
# 189 "../HPL_spreadT.c"
          tmp = il;
        } else {
          __CrestBranch(17871, 6500, 0);
          __CrestLoad(17874, (unsigned long )(& ip2), (long long )ip2);
          __CrestStore(17875, (unsigned long )(& tmp));
# 189 "../HPL_spreadT.c"
          tmp = (int )ip2;
        }
        }
# 189 "../HPL_spreadT.c"
        mem_36 = IPLEN + (il - tmp);
        __CrestLoad(17876, (unsigned long )mem_36, (long long )*mem_36);
        __CrestStore(17877, (unsigned long )(& ibuf));
# 189 "../HPL_spreadT.c"
        ibuf = (int )*mem_36;
# 189 "../HPL_spreadT.c"
        mem_37 = IPLEN + (il + 1);
        __CrestLoad(17880, (unsigned long )mem_37, (long long )*mem_37);
        __CrestLoad(17879, (unsigned long )(& ibuf), (long long )ibuf);
        __CrestApply2(17878, 1, (long long )(*mem_37 - (int const )ibuf));
        __CrestStore(17881, (unsigned long )(& lbuf));
# 189 "../HPL_spreadT.c"
        lbuf = (int )(*mem_37 - (int const )ibuf);
        {
        __CrestLoad(17884, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(17883, (unsigned long )0, (long long )0);
        __CrestApply2(17882, 14, (long long )(lbuf > 0));
# 191 "../HPL_spreadT.c"
        if (lbuf > 0) {
          __CrestBranch(17885, 6503, 1);
          __CrestLoad(17889, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17888, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17887, 7, (long long )(mydist ^ ip2));
          __CrestStore(17890, (unsigned long )(& partner));
# 193 "../HPL_spreadT.c"
          partner = (int )(mydist ^ ip2);
          {
          __CrestLoad(17895, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(17894, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(17893, 5, (long long )(mydist & ip2));
          __CrestLoad(17892, (unsigned long )0, (long long )0);
          __CrestApply2(17891, 13, (long long )((mydist & ip2) != 0));
# 195 "../HPL_spreadT.c"
          if ((mydist & ip2) != 0) {
            __CrestBranch(17896, 6505, 1);
            {
            __CrestLoad(17900, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(17899, (unsigned long )0, (long long )0);
            __CrestApply2(17898, 12, (long long )(ierr == 0));
# 219 "../HPL_spreadT.c"
            if (ierr == 0) {
              __CrestBranch(17901, 6506, 1);
# 220 "../HPL_spreadT.c"
              mem_38 = IPMAP + (npm1 - partner);
              __CrestLoad(17905, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(17904, (unsigned long )(& N), (long long )N);
              __CrestApply2(17903, 2, (long long )(lbuf * (int )N));
              __CrestLoad(17906, (unsigned long )0, (long long )1275070475);
              __CrestLoad(17907, (unsigned long )mem_38, (long long )*mem_38);
              __CrestLoad(17908, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(17909, (unsigned long )(& comm), (long long )comm);
# 220 "../HPL_spreadT.c"
              ierr = MPI_Recv((void *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*mem_38, Cmsgid, comm, & status);
              __CrestHandleReturn(17911, (long long )ierr);
              __CrestStore(17910, (unsigned long )(& ierr));
            } else {
              __CrestBranch(17902, 6507, 0);

            }
            }
          } else {
            __CrestBranch(17897, 6508, 0);
            {
            __CrestLoad(17914, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(17913, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(17912, 16, (long long )(partner < nprow));
# 225 "../HPL_spreadT.c"
            if (partner < nprow) {
              __CrestBranch(17915, 6509, 1);
              {
              __CrestLoad(17919, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(17918, (unsigned long )0, (long long )0);
              __CrestApply2(17917, 12, (long long )(ierr == 0));
# 248 "../HPL_spreadT.c"
              if (ierr == 0) {
                __CrestBranch(17920, 6510, 1);
# 249 "../HPL_spreadT.c"
                mem_39 = IPMAP + (npm1 - partner);
                __CrestLoad(17924, (unsigned long )(& lbuf), (long long )lbuf);
                __CrestLoad(17923, (unsigned long )(& N), (long long )N);
                __CrestApply2(17922, 2, (long long )(lbuf * (int )N));
                __CrestLoad(17925, (unsigned long )0, (long long )1275070475);
                __CrestLoad(17926, (unsigned long )mem_39, (long long )*mem_39);
                __CrestLoad(17927, (unsigned long )(& Cmsgid), (long long )Cmsgid);
                __CrestLoad(17928, (unsigned long )(& comm), (long long )comm);
# 249 "../HPL_spreadT.c"
                ierr = MPI_Send((void const *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                                1275070475, (int )*mem_39, Cmsgid, comm);
                __CrestHandleReturn(17930, (long long )ierr);
                __CrestStore(17929, (unsigned long )(& ierr));
              } else {
                __CrestBranch(17921, 6511, 0);

              }
              }
            } else {
              __CrestBranch(17916, 6512, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(17886, 6513, 0);

        }
        }
      } else {
        __CrestBranch(17866, 6514, 0);

      }
      }
      {
      __CrestLoad(17933, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(17932, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(17931, 16, (long long )(mydist2 < ip2));
# 257 "../HPL_spreadT.c"
      if (mydist2 < ip2) {
        __CrestBranch(17934, 6516, 1);
        __CrestLoad(17938, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17937, (unsigned long )0, (long long )1);
        __CrestApply2(17936, 9, (long long )(ip2 >> 1));
        __CrestStore(17939, (unsigned long )(& ip2));
# 257 "../HPL_spreadT.c"
        ip2 >>= 1;
        __CrestLoad(17942, (unsigned long )(& il), (long long )il);
        __CrestLoad(17941, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17940, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(17943, (unsigned long )(& il));
# 257 "../HPL_spreadT.c"
        il = (int )((unsigned int )il + ip2);
      } else {
        __CrestBranch(17935, 6517, 0);
        __CrestLoad(17946, (unsigned long )(& mydist2), (long long )mydist2);
        __CrestLoad(17945, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17944, 1, (long long )(mydist2 - ip2));
        __CrestStore(17947, (unsigned long )(& mydist2));
# 258 "../HPL_spreadT.c"
        mydist2 -= ip2;
        __CrestLoad(17950, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(17949, (unsigned long )0, (long long )1);
        __CrestApply2(17948, 9, (long long )(ip2 >> 1));
        __CrestStore(17951, (unsigned long )(& ip2));
# 258 "../HPL_spreadT.c"
        ip2 >>= 1;
        __CrestLoad(17954, (unsigned long )(& il), (long long )il);
        __CrestLoad(17953, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(17952, 1, (long long )((unsigned int )il - ip2));
        __CrestStore(17955, (unsigned long )(& il));
# 258 "../HPL_spreadT.c"
        il = (int )((unsigned int )il - ip2);
      }
      }
      {
      __CrestLoad(17958, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(17957, (unsigned long )0, (long long )2);
      __CrestApply2(17956, 12, (long long )(*IFLAG == 2));
# 262 "../HPL_spreadT.c"
      if (*IFLAG == 2) {
        __CrestBranch(17959, 6519, 1);
# 262 "../HPL_spreadT.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(17961);
      } else {
        __CrestBranch(17960, 6520, 0);

      }
      }
      {
      __CrestLoad(17964, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17963, (unsigned long )0, (long long )0U);
      __CrestApply2(17962, 15, (long long )(ip2 <= 0U));
# 183 "../HPL_spreadT.c"
      if (ip2 <= 0U) {
        __CrestBranch(17965, 6522, 1);
# 183 "../HPL_spreadT.c"
        goto while_break___0;
      } else {
        __CrestBranch(17966, 6523, 0);

      }
      }
    }
    while_break___0: ;
    }
  } else {
    __CrestBranch(17802, 6525, 0);
    __CrestLoad(17969, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(17968, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17967, 1, (long long )(nprow - (int )SRCDIST));
    __CrestStore(17970, (unsigned long )(& nprow));
# 268 "../HPL_spreadT.c"
    nprow -= (int )SRCDIST;
    __CrestLoad(17973, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(17972, (unsigned long )0, (long long )1);
    __CrestApply2(17971, 1, (long long )(nprow - 1));
    __CrestStore(17974, (unsigned long )(& npm1));
# 268 "../HPL_spreadT.c"
    npm1 = nprow - 1;
# 269 "../HPL_spreadT.c"
    mem_40 = IPMAPM1 + myrow;
    __CrestLoad(17975, (unsigned long )mem_40, (long long )*mem_40);
    __CrestStore(17976, (unsigned long )(& mydist));
# 269 "../HPL_spreadT.c"
    mydist = (unsigned int )*mem_40;
    {
    __CrestLoad(17979, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(17978, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(17977, 16, (long long )(mydist < (unsigned int )SRCDIST));
# 269 "../HPL_spreadT.c"
    if (mydist < (unsigned int )SRCDIST) {
      __CrestBranch(17980, 6527, 1);
# 270 "../HPL_spreadT.c"
      goto return_label;
    } else {
      __CrestBranch(17981, 6529, 0);
      {
      __CrestLoad(17984, (unsigned long )(& npm1), (long long )npm1);
      __CrestLoad(17983, (unsigned long )0, (long long )0);
      __CrestApply2(17982, 12, (long long )(npm1 == 0));
# 269 "../HPL_spreadT.c"
      if (npm1 == 0) {
        __CrestBranch(17985, 6530, 1);
# 270 "../HPL_spreadT.c"
        goto return_label;
      } else {
        __CrestBranch(17986, 6532, 0);

      }
      }
    }
    }
    __CrestLoad(17987, (unsigned long )(& npm1), (long long )npm1);
    __CrestStore(17988, (unsigned long )(& k));
# 272 "../HPL_spreadT.c"
    k = npm1;
    {
# 272 "../HPL_spreadT.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(17991, (unsigned long )(& k), (long long )k);
      __CrestLoad(17990, (unsigned long )0, (long long )1);
      __CrestApply2(17989, 14, (long long )(k > 1));
# 272 "../HPL_spreadT.c"
      if (k > 1) {
        __CrestBranch(17992, 6538, 1);

      } else {
        __CrestBranch(17993, 6539, 0);
# 272 "../HPL_spreadT.c"
        goto while_break___1;
      }
      }
      __CrestLoad(17996, (unsigned long )(& k), (long long )k);
      __CrestLoad(17995, (unsigned long )0, (long long )1);
      __CrestApply2(17994, 9, (long long )(k >> 1));
      __CrestStore(17997, (unsigned long )(& k));
# 272 "../HPL_spreadT.c"
      k >>= 1;
      __CrestLoad(18000, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(17999, (unsigned long )0, (long long )1);
      __CrestApply2(17998, 8, (long long )(ip2 << 1));
      __CrestStore(18001, (unsigned long )(& ip2));
# 272 "../HPL_spreadT.c"
      ip2 <<= 1;
      __CrestLoad(18004, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(18003, (unsigned long )0, (long long )1);
      __CrestApply2(18002, 8, (long long )(mask << 1));
      __CrestStore(18005, (unsigned long )(& mask));
# 272 "../HPL_spreadT.c"
      mask <<= 1;
      __CrestLoad(18008, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(18007, (unsigned long )0, (long long )1U);
      __CrestApply2(18006, 0, (long long )(mask + 1U));
      __CrestStore(18009, (unsigned long )(& mask));
# 272 "../HPL_spreadT.c"
      mask ++;
    }
    while_break___1: ;
    }
    __CrestLoad(18012, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18011, (unsigned long )(& SRCDIST), (long long )SRCDIST);
    __CrestApply2(18010, 1, (long long )(mydist - (unsigned int )SRCDIST));
    __CrestStore(18013, (unsigned long )(& mydist));
# 273 "../HPL_spreadT.c"
    mydist -= (unsigned int )SRCDIST;
    __CrestLoad(18014, (unsigned long )(& mydist), (long long )mydist);
    __CrestStore(18015, (unsigned long )(& mydist2));
# 273 "../HPL_spreadT.c"
    mydist2 = mydist;
    __CrestLoad(18016, (unsigned long )(& ip2), (long long )ip2);
    __CrestStore(18017, (unsigned long )(& il));
# 273 "../HPL_spreadT.c"
    il = (int )ip2;
# 277 "../HPL_spreadT.c"
    mem_41 = IPLEN + (SRCDIST + (int const )nprow);
    __CrestLoad(18018, (unsigned long )mem_41, (long long )*mem_41);
    __CrestStore(18019, (unsigned long )(& lgth));
# 277 "../HPL_spreadT.c"
    lgth = (int )*mem_41;
    {
# 281 "../HPL_spreadT.c"
    while (1) {
      while_continue___2: ;
      __CrestLoad(18022, (unsigned long )(& mask), (long long )mask);
      __CrestLoad(18021, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(18020, 7, (long long )(mask ^ ip2));
      __CrestStore(18023, (unsigned long )(& mask));
# 283 "../HPL_spreadT.c"
      mask ^= ip2;
      {
      __CrestLoad(18028, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18027, (unsigned long )(& mask), (long long )mask);
      __CrestApply2(18026, 5, (long long )(mydist & mask));
      __CrestLoad(18025, (unsigned long )0, (long long )0U);
      __CrestApply2(18024, 12, (long long )((mydist & mask) == 0U));
# 285 "../HPL_spreadT.c"
      if ((mydist & mask) == 0U) {
        __CrestBranch(18029, 6548, 1);
        __CrestLoad(18033, (unsigned long )(& il), (long long )il);
        __CrestLoad(18032, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(18031, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(18034, (unsigned long )(& k));
# 287 "../HPL_spreadT.c"
        k = (int )((unsigned int )il + ip2);
# 287 "../HPL_spreadT.c"
        mem_42 = IPLEN + (SRCDIST + (int const )il);
        __CrestLoad(18035, (unsigned long )mem_42, (long long )*mem_42);
        __CrestStore(18036, (unsigned long )(& ibuf));
# 287 "../HPL_spreadT.c"
        ibuf = (int )*mem_42;
        {
        __CrestLoad(18039, (unsigned long )(& k), (long long )k);
        __CrestLoad(18038, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(18037, 17, (long long )(k >= nprow));
# 288 "../HPL_spreadT.c"
        if (k >= nprow) {
          __CrestBranch(18040, 6550, 1);
          __CrestLoad(18042, (unsigned long )(& lgth), (long long )lgth);
          __CrestStore(18043, (unsigned long )(& tmp___0));
# 288 "../HPL_spreadT.c"
          tmp___0 = lgth;
        } else {
          __CrestBranch(18041, 6551, 0);
# 288 "../HPL_spreadT.c"
          mem_43 = IPLEN + (SRCDIST + (int const )k);
          __CrestLoad(18044, (unsigned long )mem_43, (long long )*mem_43);
          __CrestStore(18045, (unsigned long )(& tmp___0));
# 288 "../HPL_spreadT.c"
          tmp___0 = (int )*mem_43;
        }
        }
        __CrestLoad(18048, (unsigned long )(& tmp___0), (long long )tmp___0);
        __CrestLoad(18047, (unsigned long )(& ibuf), (long long )ibuf);
        __CrestApply2(18046, 1, (long long )(tmp___0 - ibuf));
        __CrestStore(18049, (unsigned long )(& lbuf));
# 288 "../HPL_spreadT.c"
        lbuf = tmp___0 - ibuf;
        {
        __CrestLoad(18052, (unsigned long )(& lbuf), (long long )lbuf);
        __CrestLoad(18051, (unsigned long )0, (long long )0);
        __CrestApply2(18050, 14, (long long )(lbuf > 0));
# 290 "../HPL_spreadT.c"
        if (lbuf > 0) {
          __CrestBranch(18053, 6554, 1);
          __CrestLoad(18057, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(18056, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(18055, 7, (long long )(mydist ^ ip2));
          __CrestStore(18058, (unsigned long )(& partner));
# 292 "../HPL_spreadT.c"
          partner = (int )(mydist ^ ip2);
          {
          __CrestLoad(18063, (unsigned long )(& mydist), (long long )mydist);
          __CrestLoad(18062, (unsigned long )(& ip2), (long long )ip2);
          __CrestApply2(18061, 5, (long long )(mydist & ip2));
          __CrestLoad(18060, (unsigned long )0, (long long )0);
          __CrestApply2(18059, 13, (long long )((mydist & ip2) != 0));
# 294 "../HPL_spreadT.c"
          if ((mydist & ip2) != 0) {
            __CrestBranch(18064, 6556, 1);
            {
            __CrestLoad(18068, (unsigned long )(& ierr), (long long )ierr);
            __CrestLoad(18067, (unsigned long )0, (long long )0);
            __CrestApply2(18066, 12, (long long )(ierr == 0));
# 318 "../HPL_spreadT.c"
            if (ierr == 0) {
              __CrestBranch(18069, 6557, 1);
# 319 "../HPL_spreadT.c"
              mem_44 = IPMAP + (SRCDIST + (int const )partner);
              __CrestLoad(18073, (unsigned long )(& lbuf), (long long )lbuf);
              __CrestLoad(18072, (unsigned long )(& N), (long long )N);
              __CrestApply2(18071, 2, (long long )(lbuf * (int )N));
              __CrestLoad(18074, (unsigned long )0, (long long )1275070475);
              __CrestLoad(18075, (unsigned long )mem_44, (long long )*mem_44);
              __CrestLoad(18076, (unsigned long )(& Cmsgid), (long long )Cmsgid);
              __CrestLoad(18077, (unsigned long )(& comm), (long long )comm);
# 319 "../HPL_spreadT.c"
              ierr = MPI_Recv((void *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*mem_44, Cmsgid, comm, & status);
              __CrestHandleReturn(18079, (long long )ierr);
              __CrestStore(18078, (unsigned long )(& ierr));
            } else {
              __CrestBranch(18070, 6558, 0);

            }
            }
          } else {
            __CrestBranch(18065, 6559, 0);
            {
            __CrestLoad(18082, (unsigned long )(& partner), (long long )partner);
            __CrestLoad(18081, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(18080, 16, (long long )(partner < nprow));
# 324 "../HPL_spreadT.c"
            if (partner < nprow) {
              __CrestBranch(18083, 6560, 1);
              {
              __CrestLoad(18087, (unsigned long )(& ierr), (long long )ierr);
              __CrestLoad(18086, (unsigned long )0, (long long )0);
              __CrestApply2(18085, 12, (long long )(ierr == 0));
# 348 "../HPL_spreadT.c"
              if (ierr == 0) {
                __CrestBranch(18088, 6561, 1);
# 349 "../HPL_spreadT.c"
                mem_45 = IPMAP + (SRCDIST + (int const )partner);
                __CrestLoad(18092, (unsigned long )(& lbuf), (long long )lbuf);
                __CrestLoad(18091, (unsigned long )(& N), (long long )N);
                __CrestApply2(18090, 2, (long long )(lbuf * (int )N));
                __CrestLoad(18093, (unsigned long )0, (long long )1275070475);
                __CrestLoad(18094, (unsigned long )mem_45, (long long )*mem_45);
                __CrestLoad(18095, (unsigned long )(& Cmsgid), (long long )Cmsgid);
                __CrestLoad(18096, (unsigned long )(& comm), (long long )comm);
# 349 "../HPL_spreadT.c"
                ierr = MPI_Send((void const *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                                1275070475, (int )*mem_45, Cmsgid, comm);
                __CrestHandleReturn(18098, (long long )ierr);
                __CrestStore(18097, (unsigned long )(& ierr));
              } else {
                __CrestBranch(18089, 6562, 0);

              }
              }
            } else {
              __CrestBranch(18084, 6563, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(18054, 6564, 0);

        }
        }
      } else {
        __CrestBranch(18030, 6565, 0);

      }
      }
      {
      __CrestLoad(18101, (unsigned long )(& mydist2), (long long )mydist2);
      __CrestLoad(18100, (unsigned long )(& ip2), (long long )ip2);
      __CrestApply2(18099, 16, (long long )(mydist2 < ip2));
# 357 "../HPL_spreadT.c"
      if (mydist2 < ip2) {
        __CrestBranch(18102, 6567, 1);
        __CrestLoad(18106, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(18105, (unsigned long )0, (long long )1);
        __CrestApply2(18104, 9, (long long )(ip2 >> 1));
        __CrestStore(18107, (unsigned long )(& ip2));
# 357 "../HPL_spreadT.c"
        ip2 >>= 1;
        __CrestLoad(18110, (unsigned long )(& il), (long long )il);
        __CrestLoad(18109, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(18108, 1, (long long )((unsigned int )il - ip2));
        __CrestStore(18111, (unsigned long )(& il));
# 357 "../HPL_spreadT.c"
        il = (int )((unsigned int )il - ip2);
      } else {
        __CrestBranch(18103, 6568, 0);
        __CrestLoad(18114, (unsigned long )(& mydist2), (long long )mydist2);
        __CrestLoad(18113, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(18112, 1, (long long )(mydist2 - ip2));
        __CrestStore(18115, (unsigned long )(& mydist2));
# 358 "../HPL_spreadT.c"
        mydist2 -= ip2;
        __CrestLoad(18118, (unsigned long )(& ip2), (long long )ip2);
        __CrestLoad(18117, (unsigned long )0, (long long )1);
        __CrestApply2(18116, 9, (long long )(ip2 >> 1));
        __CrestStore(18119, (unsigned long )(& ip2));
# 358 "../HPL_spreadT.c"
        ip2 >>= 1;
        __CrestLoad(18122, (unsigned long )(& il), (long long )il);
        __CrestLoad(18121, (unsigned long )(& ip2), (long long )ip2);
        __CrestApply2(18120, 0, (long long )((unsigned int )il + ip2));
        __CrestStore(18123, (unsigned long )(& il));
# 358 "../HPL_spreadT.c"
        il = (int )((unsigned int )il + ip2);
      }
      }
      {
      __CrestLoad(18126, (unsigned long )IFLAG, (long long )*IFLAG);
      __CrestLoad(18125, (unsigned long )0, (long long )2);
      __CrestApply2(18124, 12, (long long )(*IFLAG == 2));
# 362 "../HPL_spreadT.c"
      if (*IFLAG == 2) {
        __CrestBranch(18127, 6570, 1);
# 362 "../HPL_spreadT.c"
        HPL_bcast(PBCST, IFLAG);
        __CrestClearStack(18129);
      } else {
        __CrestBranch(18128, 6571, 0);

      }
      }
      {
      __CrestLoad(18132, (unsigned long )(& ip2), (long long )ip2);
      __CrestLoad(18131, (unsigned long )0, (long long )0U);
      __CrestApply2(18130, 15, (long long )(ip2 <= 0U));
# 281 "../HPL_spreadT.c"
      if (ip2 <= 0U) {
        __CrestBranch(18133, 6573, 1);
# 281 "../HPL_spreadT.c"
        goto while_break___2;
      } else {
        __CrestBranch(18134, 6574, 0);

      }
      }
    }
    while_break___2: ;
    }
  }
  }
  {
  __CrestLoad(18137, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(18136, (unsigned long )0, (long long )0);
  __CrestApply2(18135, 13, (long long )(ierr != 0));
# 367 "../HPL_spreadT.c"
  if (ierr != 0) {
    __CrestBranch(18138, 6577, 1);
    __CrestLoad(18140, (unsigned long )0, (long long )368);
# 368 "../HPL_spreadT.c"
    HPL_pabort(368, "HPL_spreadT", "MPI call failed");
    __CrestClearStack(18141);
  } else {
    __CrestBranch(18139, 6578, 0);

  }
  }

  return_label:
  {
  __CrestReturn(18142);
# 53 "../HPL_spreadT.c"
  return;
  }
}
}
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 244 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_rollN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const N ,
               double *U , int const LDU , int const *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 ) ;
# 56 "../HPL_rollN.c"
void HPL_rollN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const N ,
               double *U , int const LDU , int const *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 )
{
  MPI_Datatype type[2] ;
  MPI_Status status ;
  MPI_Request request ;
  MPI_Comm comm ;
  int Cmsgid ;
  int ibufR ;
  int ibufS ;
  int ierr ;
  int il ;
  int k ;
  int l ;
  int lengthR ;
  int lengthS ;
  int mydist ;
  int myrow ;
  int next ;
  int npm1 ;
  int nprow ;
  int partner ;
  int prev ;
  int tmp ;
  int tmp___0 ;
  struct HPL_S_grid *mem_32 ;
  struct HPL_S_grid *mem_33 ;
  struct HPL_S_grid *mem_34 ;
  int const *mem_35 ;
  int const *mem_36 ;
  int const *mem_37 ;
  int const *mem_38 ;
  int const *mem_39 ;
  int const *mem_40 ;
  int const *mem_41 ;
  int const *mem_42 ;
  int const *mem_43 ;
  int const *mem_44 ;
  int const *mem_45 ;

  {
  __CrestCall(18145, 104);
  __CrestStore(18144, (unsigned long )(& LDU));
  __CrestStore(18143, (unsigned long )(& N));
  __CrestLoad(18146, (unsigned long )0, (long long )1001);
  __CrestStore(18147, (unsigned long )(& Cmsgid));
# 144 "../HPL_rollN.c"
  Cmsgid = 1001;
  __CrestLoad(18148, (unsigned long )0, (long long )0);
  __CrestStore(18149, (unsigned long )(& ierr));
# 144 "../HPL_rollN.c"
  ierr = 0;
  {
  __CrestLoad(18152, (unsigned long )(& N), (long long )N);
  __CrestLoad(18151, (unsigned long )0, (long long )0);
  __CrestApply2(18150, 15, (long long )(N <= 0));
# 151 "../HPL_rollN.c"
  if (N <= 0) {
    __CrestBranch(18153, 6583, 1);
# 151 "../HPL_rollN.c"
    goto return_label;
  } else {
    __CrestBranch(18154, 6585, 0);

  }
  }
# 153 "../HPL_rollN.c"
  mem_32 = PANEL->grid;
  __CrestLoad(18155, (unsigned long )(& mem_32->nprow), (long long )mem_32->nprow);
  __CrestStore(18156, (unsigned long )(& nprow));
# 153 "../HPL_rollN.c"
  nprow = mem_32->nprow;
  __CrestLoad(18159, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18158, (unsigned long )0, (long long )1);
  __CrestApply2(18157, 1, (long long )(nprow - 1));
  __CrestStore(18160, (unsigned long )(& npm1));
# 153 "../HPL_rollN.c"
  npm1 = nprow - 1;
# 153 "../HPL_rollN.c"
  mem_33 = PANEL->grid;
  __CrestLoad(18161, (unsigned long )(& mem_33->myrow), (long long )mem_33->myrow);
  __CrestStore(18162, (unsigned long )(& myrow));
# 153 "../HPL_rollN.c"
  myrow = mem_33->myrow;
# 154 "../HPL_rollN.c"
  mem_34 = PANEL->grid;
  __CrestLoad(18163, (unsigned long )(& mem_34->col_comm), (long long )mem_34->col_comm);
  __CrestStore(18164, (unsigned long )(& comm));
# 154 "../HPL_rollN.c"
  comm = mem_34->col_comm;
# 158 "../HPL_rollN.c"
  mem_35 = IPMAPM1 + myrow;
  __CrestLoad(18165, (unsigned long )mem_35, (long long )*mem_35);
  __CrestStore(18166, (unsigned long )(& mydist));
# 158 "../HPL_rollN.c"
  mydist = (int )*mem_35;
  {
  __CrestLoad(18169, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(18168, (unsigned long )0, (long long )0);
  __CrestApply2(18167, 13, (long long )(mydist != 0));
# 159 "../HPL_rollN.c"
  if (mydist != 0) {
    __CrestBranch(18170, 6588, 1);
    __CrestLoad(18174, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18173, (unsigned long )0, (long long )1);
    __CrestApply2(18172, 1, (long long )(mydist - 1));
    __CrestStore(18175, (unsigned long )(& tmp));
# 159 "../HPL_rollN.c"
    tmp = mydist - 1;
  } else {
    __CrestBranch(18171, 6589, 0);
    __CrestLoad(18178, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(18177, (unsigned long )0, (long long )1);
    __CrestApply2(18176, 1, (long long )(nprow - 1));
    __CrestStore(18179, (unsigned long )(& tmp));
# 159 "../HPL_rollN.c"
    tmp = nprow - 1;
  }
  }
# 159 "../HPL_rollN.c"
  mem_36 = IPMAP + tmp;
  __CrestLoad(18180, (unsigned long )mem_36, (long long )*mem_36);
  __CrestStore(18181, (unsigned long )(& prev));
# 159 "../HPL_rollN.c"
  prev = (int )*mem_36;
  {
  __CrestLoad(18186, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(18185, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18184, (unsigned long )0, (long long )1);
  __CrestApply2(18183, 1, (long long )(nprow - 1));
  __CrestApply2(18182, 13, (long long )(mydist != nprow - 1));
# 160 "../HPL_rollN.c"
  if (mydist != nprow - 1) {
    __CrestBranch(18187, 6592, 1);
    __CrestLoad(18191, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18190, (unsigned long )0, (long long )1);
    __CrestApply2(18189, 0, (long long )(mydist + 1));
    __CrestStore(18192, (unsigned long )(& tmp___0));
# 160 "../HPL_rollN.c"
    tmp___0 = mydist + 1;
  } else {
    __CrestBranch(18188, 6593, 0);
    __CrestLoad(18193, (unsigned long )0, (long long )0);
    __CrestStore(18194, (unsigned long )(& tmp___0));
# 160 "../HPL_rollN.c"
    tmp___0 = 0;
  }
  }
# 160 "../HPL_rollN.c"
  mem_37 = IPMAP + tmp___0;
  __CrestLoad(18195, (unsigned long )mem_37, (long long )*mem_37);
  __CrestStore(18196, (unsigned long )(& next));
# 160 "../HPL_rollN.c"
  next = (int )*mem_37;
  __CrestLoad(18197, (unsigned long )0, (long long )0);
  __CrestStore(18198, (unsigned long )(& k));
# 162 "../HPL_rollN.c"
  k = 0;
  {
# 162 "../HPL_rollN.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(18201, (unsigned long )(& k), (long long )k);
    __CrestLoad(18200, (unsigned long )(& npm1), (long long )npm1);
    __CrestApply2(18199, 16, (long long )(k < npm1));
# 162 "../HPL_rollN.c"
    if (k < npm1) {
      __CrestBranch(18202, 6599, 1);

    } else {
      __CrestBranch(18203, 6600, 0);
# 162 "../HPL_rollN.c"
      goto while_break;
    }
    }
    __CrestLoad(18206, (unsigned long )(& k), (long long )k);
    __CrestLoad(18205, (unsigned long )0, (long long )1);
    __CrestApply2(18204, 9, (long long )((unsigned int )k >> 1));
    __CrestStore(18207, (unsigned long )(& l));
# 164 "../HPL_rollN.c"
    l = (int )((unsigned int )k >> 1);
    {
    __CrestLoad(18214, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18213, (unsigned long )(& k), (long long )k);
    __CrestApply2(18212, 0, (long long )(mydist + k));
    __CrestLoad(18211, (unsigned long )0, (long long )1);
    __CrestApply2(18210, 5, (long long )((mydist + k) & 1));
    __CrestLoad(18209, (unsigned long )0, (long long )0);
    __CrestApply2(18208, 13, (long long )(((mydist + k) & 1) != 0));
# 166 "../HPL_rollN.c"
    if (((mydist + k) & 1) != 0) {
      __CrestBranch(18215, 6603, 1);
      {
      __CrestLoad(18221, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18220, (unsigned long )(& l), (long long )l);
      __CrestApply2(18219, 0, (long long )(mydist + l));
      __CrestLoad(18218, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(18217, 16, (long long )(mydist + l < nprow));
# 168 "../HPL_rollN.c"
      if (mydist + l < nprow) {
        __CrestBranch(18222, 6604, 1);
        __CrestLoad(18226, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18225, (unsigned long )(& l), (long long )l);
        __CrestApply2(18224, 0, (long long )(mydist + l));
        __CrestStore(18227, (unsigned long )(& il));
# 168 "../HPL_rollN.c"
        il = mydist + l;
      } else {
        __CrestBranch(18223, 6605, 0);
        __CrestLoad(18232, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18231, (unsigned long )(& l), (long long )l);
        __CrestApply2(18230, 0, (long long )(mydist + l));
        __CrestLoad(18229, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(18228, 1, (long long )((mydist + l) - nprow));
        __CrestStore(18233, (unsigned long )(& il));
# 168 "../HPL_rollN.c"
        il = (mydist + l) - nprow;
      }
      }
# 169 "../HPL_rollN.c"
      mem_38 = IPLEN + il;
      __CrestLoad(18234, (unsigned long )mem_38, (long long )*mem_38);
      __CrestStore(18235, (unsigned long )(& ibufS));
# 169 "../HPL_rollN.c"
      ibufS = (int )*mem_38;
# 169 "../HPL_rollN.c"
      mem_39 = IPLEN + (il + 1);
      __CrestLoad(18238, (unsigned long )mem_39, (long long )*mem_39);
      __CrestLoad(18237, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(18236, 1, (long long )(*mem_39 - (int const )ibufS));
      __CrestStore(18239, (unsigned long )(& lengthS));
# 169 "../HPL_rollN.c"
      lengthS = (int )(*mem_39 - (int const )ibufS);
      {
      __CrestLoad(18244, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18243, (unsigned long )(& l), (long long )l);
      __CrestLoad(18242, (unsigned long )0, (long long )1);
      __CrestApply2(18241, 0, (long long )(l + 1));
      __CrestApply2(18240, 16, (long long )(mydist < l + 1));
# 170 "../HPL_rollN.c"
      if (mydist < l + 1) {
        __CrestBranch(18245, 6608, 1);
        __CrestLoad(18253, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(18252, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(18251, 0, (long long )(nprow + mydist));
        __CrestLoad(18250, (unsigned long )(& l), (long long )l);
        __CrestLoad(18249, (unsigned long )0, (long long )1);
        __CrestApply2(18248, 0, (long long )(l + 1));
        __CrestApply2(18247, 1, (long long )((nprow + mydist) - (l + 1)));
        __CrestStore(18254, (unsigned long )(& il));
# 170 "../HPL_rollN.c"
        il = (nprow + mydist) - (l + 1);
      } else {
        __CrestBranch(18246, 6609, 0);
        __CrestLoad(18259, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18258, (unsigned long )(& l), (long long )l);
        __CrestLoad(18257, (unsigned long )0, (long long )1);
        __CrestApply2(18256, 0, (long long )(l + 1));
        __CrestApply2(18255, 1, (long long )(mydist - (l + 1)));
        __CrestStore(18260, (unsigned long )(& il));
# 170 "../HPL_rollN.c"
        il = mydist - (l + 1);
      }
      }
# 171 "../HPL_rollN.c"
      mem_40 = IPLEN + il;
      __CrestLoad(18261, (unsigned long )mem_40, (long long )*mem_40);
      __CrestStore(18262, (unsigned long )(& ibufR));
# 171 "../HPL_rollN.c"
      ibufR = (int )*mem_40;
# 171 "../HPL_rollN.c"
      mem_41 = IPLEN + (il + 1);
      __CrestLoad(18265, (unsigned long )mem_41, (long long )*mem_41);
      __CrestLoad(18264, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(18263, 1, (long long )(*mem_41 - (int const )ibufR));
      __CrestStore(18266, (unsigned long )(& lengthR));
# 171 "../HPL_rollN.c"
      lengthR = (int )(*mem_41 - (int const )ibufR);
      __CrestLoad(18267, (unsigned long )(& prev), (long long )prev);
      __CrestStore(18268, (unsigned long )(& partner));
# 171 "../HPL_rollN.c"
      partner = prev;
    } else {
      __CrestBranch(18216, 6611, 0);
      {
      __CrestLoad(18271, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18270, (unsigned long )(& l), (long long )l);
      __CrestApply2(18269, 16, (long long )(mydist < l));
# 175 "../HPL_rollN.c"
      if (mydist < l) {
        __CrestBranch(18272, 6612, 1);
        __CrestLoad(18278, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(18277, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(18276, 0, (long long )(nprow + mydist));
        __CrestLoad(18275, (unsigned long )(& l), (long long )l);
        __CrestApply2(18274, 1, (long long )((nprow + mydist) - l));
        __CrestStore(18279, (unsigned long )(& il));
# 175 "../HPL_rollN.c"
        il = (nprow + mydist) - l;
      } else {
        __CrestBranch(18273, 6613, 0);
        __CrestLoad(18282, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18281, (unsigned long )(& l), (long long )l);
        __CrestApply2(18280, 1, (long long )(mydist - l));
        __CrestStore(18283, (unsigned long )(& il));
# 175 "../HPL_rollN.c"
        il = mydist - l;
      }
      }
# 176 "../HPL_rollN.c"
      mem_42 = IPLEN + il;
      __CrestLoad(18284, (unsigned long )mem_42, (long long )*mem_42);
      __CrestStore(18285, (unsigned long )(& ibufS));
# 176 "../HPL_rollN.c"
      ibufS = (int )*mem_42;
# 176 "../HPL_rollN.c"
      mem_43 = IPLEN + (il + 1);
      __CrestLoad(18288, (unsigned long )mem_43, (long long )*mem_43);
      __CrestLoad(18287, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(18286, 1, (long long )(*mem_43 - (int const )ibufS));
      __CrestStore(18289, (unsigned long )(& lengthS));
# 176 "../HPL_rollN.c"
      lengthS = (int )(*mem_43 - (int const )ibufS);
      {
      __CrestLoad(18296, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18295, (unsigned long )(& l), (long long )l);
      __CrestLoad(18294, (unsigned long )0, (long long )1);
      __CrestApply2(18293, 0, (long long )(l + 1));
      __CrestApply2(18292, 0, (long long )(mydist + (l + 1)));
      __CrestLoad(18291, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(18290, 16, (long long )(mydist + (l + 1) < nprow));
# 177 "../HPL_rollN.c"
      if (mydist + (l + 1) < nprow) {
        __CrestBranch(18297, 6616, 1);
        __CrestLoad(18303, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18302, (unsigned long )(& l), (long long )l);
        __CrestLoad(18301, (unsigned long )0, (long long )1);
        __CrestApply2(18300, 0, (long long )(l + 1));
        __CrestApply2(18299, 0, (long long )(mydist + (l + 1)));
        __CrestStore(18304, (unsigned long )(& il));
# 177 "../HPL_rollN.c"
        il = mydist + (l + 1);
      } else {
        __CrestBranch(18298, 6617, 0);
        __CrestLoad(18311, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18310, (unsigned long )(& l), (long long )l);
        __CrestLoad(18309, (unsigned long )0, (long long )1);
        __CrestApply2(18308, 0, (long long )(l + 1));
        __CrestApply2(18307, 0, (long long )(mydist + (l + 1)));
        __CrestLoad(18306, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(18305, 1, (long long )((mydist + (l + 1)) - nprow));
        __CrestStore(18312, (unsigned long )(& il));
# 177 "../HPL_rollN.c"
        il = (mydist + (l + 1)) - nprow;
      }
      }
# 178 "../HPL_rollN.c"
      mem_44 = IPLEN + il;
      __CrestLoad(18313, (unsigned long )mem_44, (long long )*mem_44);
      __CrestStore(18314, (unsigned long )(& ibufR));
# 178 "../HPL_rollN.c"
      ibufR = (int )*mem_44;
# 178 "../HPL_rollN.c"
      mem_45 = IPLEN + (il + 1);
      __CrestLoad(18317, (unsigned long )mem_45, (long long )*mem_45);
      __CrestLoad(18316, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(18315, 1, (long long )(*mem_45 - (int const )ibufR));
      __CrestStore(18318, (unsigned long )(& lengthR));
# 178 "../HPL_rollN.c"
      lengthR = (int )(*mem_45 - (int const )ibufR);
      __CrestLoad(18319, (unsigned long )(& next), (long long )next);
      __CrestStore(18320, (unsigned long )(& partner));
# 178 "../HPL_rollN.c"
      partner = next;
    }
    }
    {
    __CrestLoad(18323, (unsigned long )(& lengthR), (long long )lengthR);
    __CrestLoad(18322, (unsigned long )0, (long long )0);
    __CrestApply2(18321, 14, (long long )(lengthR > 0));
# 181 "../HPL_rollN.c"
    if (lengthR > 0) {
      __CrestBranch(18324, 6620, 1);
      {
      __CrestLoad(18328, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18327, (unsigned long )0, (long long )0);
      __CrestApply2(18326, 12, (long long )(ierr == 0));
# 183 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18329, 6621, 1);
        __CrestLoad(18331, (unsigned long )(& N), (long long )N);
        __CrestLoad(18332, (unsigned long )(& lengthR), (long long )lengthR);
        __CrestLoad(18333, (unsigned long )(& LDU), (long long )LDU);
        __CrestLoad(18334, (unsigned long )0, (long long )1275070475);
# 184 "../HPL_rollN.c"
        ierr = MPI_Type_vector((int )N, lengthR, (int )LDU, 1275070475, & type[1]);
        __CrestHandleReturn(18336, (long long )ierr);
        __CrestStore(18335, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18330, 6622, 0);

      }
      }
      {
      __CrestLoad(18339, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18338, (unsigned long )0, (long long )0);
      __CrestApply2(18337, 12, (long long )(ierr == 0));
# 186 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18340, 6624, 1);
# 187 "../HPL_rollN.c"
        ierr = MPI_Type_commit(& type[1]);
        __CrestHandleReturn(18343, (long long )ierr);
        __CrestStore(18342, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18341, 6625, 0);

      }
      }
      {
      __CrestLoad(18346, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18345, (unsigned long )0, (long long )0);
      __CrestApply2(18344, 12, (long long )(ierr == 0));
# 188 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18347, 6627, 1);
        __CrestLoad(18349, (unsigned long )0, (long long )1);
        __CrestLoad(18350, (unsigned long )(& type[1]), (long long )type[1]);
        __CrestLoad(18351, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(18352, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(18353, (unsigned long )(& comm), (long long )comm);
# 189 "../HPL_rollN.c"
        ierr = MPI_Irecv((void *)((U + ibufR) + 0), 1, type[1], partner, Cmsgid, comm,
                         & request);
        __CrestHandleReturn(18355, (long long )ierr);
        __CrestStore(18354, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18348, 6628, 0);

      }
      }
    } else {
      __CrestBranch(18325, 6629, 0);

    }
    }
    {
    __CrestLoad(18358, (unsigned long )(& lengthS), (long long )lengthS);
    __CrestLoad(18357, (unsigned long )0, (long long )0);
    __CrestApply2(18356, 14, (long long )(lengthS > 0));
# 193 "../HPL_rollN.c"
    if (lengthS > 0) {
      __CrestBranch(18359, 6631, 1);
      {
      __CrestLoad(18363, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18362, (unsigned long )0, (long long )0);
      __CrestApply2(18361, 12, (long long )(ierr == 0));
# 195 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18364, 6632, 1);
        __CrestLoad(18366, (unsigned long )(& N), (long long )N);
        __CrestLoad(18367, (unsigned long )(& lengthS), (long long )lengthS);
        __CrestLoad(18368, (unsigned long )(& LDU), (long long )LDU);
        __CrestLoad(18369, (unsigned long )0, (long long )1275070475);
# 196 "../HPL_rollN.c"
        ierr = MPI_Type_vector((int )N, lengthS, (int )LDU, 1275070475, & type[0]);
        __CrestHandleReturn(18371, (long long )ierr);
        __CrestStore(18370, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18365, 6633, 0);

      }
      }
      {
      __CrestLoad(18374, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18373, (unsigned long )0, (long long )0);
      __CrestApply2(18372, 12, (long long )(ierr == 0));
# 198 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18375, 6635, 1);
# 199 "../HPL_rollN.c"
        ierr = MPI_Type_commit(& type[0]);
        __CrestHandleReturn(18378, (long long )ierr);
        __CrestStore(18377, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18376, 6636, 0);

      }
      }
      {
      __CrestLoad(18381, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18380, (unsigned long )0, (long long )0);
      __CrestApply2(18379, 12, (long long )(ierr == 0));
# 200 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18382, 6638, 1);
        __CrestLoad(18384, (unsigned long )0, (long long )1);
        __CrestLoad(18385, (unsigned long )(& type[0]), (long long )type[0]);
        __CrestLoad(18386, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(18387, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(18388, (unsigned long )(& comm), (long long )comm);
# 201 "../HPL_rollN.c"
        ierr = MPI_Send((void const *)((U + ibufS) + 0), 1, type[0], partner, Cmsgid,
                        comm);
        __CrestHandleReturn(18390, (long long )ierr);
        __CrestStore(18389, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18383, 6639, 0);

      }
      }
      {
      __CrestLoad(18393, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18392, (unsigned long )0, (long long )0);
      __CrestApply2(18391, 12, (long long )(ierr == 0));
# 203 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18394, 6641, 1);
# 204 "../HPL_rollN.c"
        ierr = MPI_Type_free(& type[0]);
        __CrestHandleReturn(18397, (long long )ierr);
        __CrestStore(18396, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18395, 6642, 0);

      }
      }
    } else {
      __CrestBranch(18360, 6643, 0);

    }
    }
    {
    __CrestLoad(18400, (unsigned long )(& lengthR), (long long )lengthR);
    __CrestLoad(18399, (unsigned long )0, (long long )0);
    __CrestApply2(18398, 14, (long long )(lengthR > 0));
# 207 "../HPL_rollN.c"
    if (lengthR > 0) {
      __CrestBranch(18401, 6645, 1);
      {
      __CrestLoad(18405, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18404, (unsigned long )0, (long long )0);
      __CrestApply2(18403, 12, (long long )(ierr == 0));
# 209 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18406, 6646, 1);
# 210 "../HPL_rollN.c"
        ierr = MPI_Wait(& request, & status);
        __CrestHandleReturn(18409, (long long )ierr);
        __CrestStore(18408, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18407, 6647, 0);

      }
      }
      {
      __CrestLoad(18412, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18411, (unsigned long )0, (long long )0);
      __CrestApply2(18410, 12, (long long )(ierr == 0));
# 211 "../HPL_rollN.c"
      if (ierr == 0) {
        __CrestBranch(18413, 6649, 1);
# 212 "../HPL_rollN.c"
        ierr = MPI_Type_free(& type[1]);
        __CrestHandleReturn(18416, (long long )ierr);
        __CrestStore(18415, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18414, 6650, 0);

      }
      }
    } else {
      __CrestBranch(18402, 6651, 0);

    }
    }
    {
    __CrestLoad(18419, (unsigned long )IFLAG, (long long )*IFLAG);
    __CrestLoad(18418, (unsigned long )0, (long long )2);
    __CrestApply2(18417, 12, (long long )(*IFLAG == 2));
# 217 "../HPL_rollN.c"
    if (*IFLAG == 2) {
      __CrestBranch(18420, 6653, 1);
# 217 "../HPL_rollN.c"
      HPL_bcast(PBCST, IFLAG);
      __CrestClearStack(18422);
    } else {
      __CrestBranch(18421, 6654, 0);

    }
    }
    __CrestLoad(18425, (unsigned long )(& k), (long long )k);
    __CrestLoad(18424, (unsigned long )0, (long long )1);
    __CrestApply2(18423, 0, (long long )(k + 1));
    __CrestStore(18426, (unsigned long )(& k));
# 162 "../HPL_rollN.c"
    k ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(18429, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(18428, (unsigned long )0, (long long )0);
  __CrestApply2(18427, 13, (long long )(ierr != 0));
# 220 "../HPL_rollN.c"
  if (ierr != 0) {
    __CrestBranch(18430, 6658, 1);
    __CrestLoad(18432, (unsigned long )0, (long long )221);
# 221 "../HPL_rollN.c"
    HPL_pabort(221, "HPL_rollN", "MPI call failed");
    __CrestClearStack(18433);
  } else {
    __CrestBranch(18431, 6659, 0);

  }
  }

  return_label:
  {
  __CrestReturn(18434);
# 56 "../HPL_rollN.c"
  return;
  }
}
}
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 256 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_rollT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const N ,
               double *U , int const LDU , int const *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 ) ;
# 56 "../HPL_rollT.c"
void HPL_rollT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const N ,
               double *U , int const LDU , int const *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 )
{
  MPI_Status status ;
  MPI_Request request ;
  MPI_Comm comm ;
  int Cmsgid ;
  int ibufR ;
  int ibufS ;
  int ierr ;
  int il ;
  int k ;
  int l ;
  int lengthR ;
  int lengthS ;
  int mydist ;
  int myrow ;
  int next ;
  int npm1 ;
  int nprow ;
  int partner ;
  int prev ;
  int tmp ;
  int tmp___0 ;
  struct HPL_S_grid *mem_31 ;
  struct HPL_S_grid *mem_32 ;
  struct HPL_S_grid *mem_33 ;
  int const *mem_34 ;
  int const *mem_35 ;
  int const *mem_36 ;
  int const *mem_37 ;
  int const *mem_38 ;
  int const *mem_39 ;
  int const *mem_40 ;
  int const *mem_41 ;
  int const *mem_42 ;
  int const *mem_43 ;
  int const *mem_44 ;

  {
  __CrestCall(18437, 105);
  __CrestStore(18436, (unsigned long )(& LDU));
  __CrestStore(18435, (unsigned long )(& N));
  __CrestLoad(18438, (unsigned long )0, (long long )1001);
  __CrestStore(18439, (unsigned long )(& Cmsgid));
# 146 "../HPL_rollT.c"
  Cmsgid = 1001;
  __CrestLoad(18440, (unsigned long )0, (long long )0);
  __CrestStore(18441, (unsigned long )(& ierr));
# 146 "../HPL_rollT.c"
  ierr = 0;
  {
  __CrestLoad(18444, (unsigned long )(& N), (long long )N);
  __CrestLoad(18443, (unsigned long )0, (long long )0);
  __CrestApply2(18442, 15, (long long )(N <= 0));
# 153 "../HPL_rollT.c"
  if (N <= 0) {
    __CrestBranch(18445, 6664, 1);
# 153 "../HPL_rollT.c"
    goto return_label;
  } else {
    __CrestBranch(18446, 6666, 0);

  }
  }
# 155 "../HPL_rollT.c"
  mem_31 = PANEL->grid;
  __CrestLoad(18447, (unsigned long )(& mem_31->nprow), (long long )mem_31->nprow);
  __CrestStore(18448, (unsigned long )(& nprow));
# 155 "../HPL_rollT.c"
  nprow = mem_31->nprow;
  __CrestLoad(18451, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18450, (unsigned long )0, (long long )1);
  __CrestApply2(18449, 1, (long long )(nprow - 1));
  __CrestStore(18452, (unsigned long )(& npm1));
# 155 "../HPL_rollT.c"
  npm1 = nprow - 1;
# 155 "../HPL_rollT.c"
  mem_32 = PANEL->grid;
  __CrestLoad(18453, (unsigned long )(& mem_32->myrow), (long long )mem_32->myrow);
  __CrestStore(18454, (unsigned long )(& myrow));
# 155 "../HPL_rollT.c"
  myrow = mem_32->myrow;
# 156 "../HPL_rollT.c"
  mem_33 = PANEL->grid;
  __CrestLoad(18455, (unsigned long )(& mem_33->col_comm), (long long )mem_33->col_comm);
  __CrestStore(18456, (unsigned long )(& comm));
# 156 "../HPL_rollT.c"
  comm = mem_33->col_comm;
# 160 "../HPL_rollT.c"
  mem_34 = IPMAPM1 + myrow;
  __CrestLoad(18457, (unsigned long )mem_34, (long long )*mem_34);
  __CrestStore(18458, (unsigned long )(& mydist));
# 160 "../HPL_rollT.c"
  mydist = (int )*mem_34;
  {
  __CrestLoad(18461, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(18460, (unsigned long )0, (long long )0);
  __CrestApply2(18459, 13, (long long )(mydist != 0));
# 161 "../HPL_rollT.c"
  if (mydist != 0) {
    __CrestBranch(18462, 6669, 1);
    __CrestLoad(18466, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18465, (unsigned long )0, (long long )1);
    __CrestApply2(18464, 1, (long long )(mydist - 1));
    __CrestStore(18467, (unsigned long )(& tmp));
# 161 "../HPL_rollT.c"
    tmp = mydist - 1;
  } else {
    __CrestBranch(18463, 6670, 0);
    __CrestLoad(18470, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(18469, (unsigned long )0, (long long )1);
    __CrestApply2(18468, 1, (long long )(nprow - 1));
    __CrestStore(18471, (unsigned long )(& tmp));
# 161 "../HPL_rollT.c"
    tmp = nprow - 1;
  }
  }
# 161 "../HPL_rollT.c"
  mem_35 = IPMAP + tmp;
  __CrestLoad(18472, (unsigned long )mem_35, (long long )*mem_35);
  __CrestStore(18473, (unsigned long )(& prev));
# 161 "../HPL_rollT.c"
  prev = (int )*mem_35;
  {
  __CrestLoad(18478, (unsigned long )(& mydist), (long long )mydist);
  __CrestLoad(18477, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18476, (unsigned long )0, (long long )1);
  __CrestApply2(18475, 1, (long long )(nprow - 1));
  __CrestApply2(18474, 13, (long long )(mydist != nprow - 1));
# 162 "../HPL_rollT.c"
  if (mydist != nprow - 1) {
    __CrestBranch(18479, 6673, 1);
    __CrestLoad(18483, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18482, (unsigned long )0, (long long )1);
    __CrestApply2(18481, 0, (long long )(mydist + 1));
    __CrestStore(18484, (unsigned long )(& tmp___0));
# 162 "../HPL_rollT.c"
    tmp___0 = mydist + 1;
  } else {
    __CrestBranch(18480, 6674, 0);
    __CrestLoad(18485, (unsigned long )0, (long long )0);
    __CrestStore(18486, (unsigned long )(& tmp___0));
# 162 "../HPL_rollT.c"
    tmp___0 = 0;
  }
  }
# 162 "../HPL_rollT.c"
  mem_36 = IPMAP + tmp___0;
  __CrestLoad(18487, (unsigned long )mem_36, (long long )*mem_36);
  __CrestStore(18488, (unsigned long )(& next));
# 162 "../HPL_rollT.c"
  next = (int )*mem_36;
  __CrestLoad(18489, (unsigned long )0, (long long )0);
  __CrestStore(18490, (unsigned long )(& k));
# 164 "../HPL_rollT.c"
  k = 0;
  {
# 164 "../HPL_rollT.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(18493, (unsigned long )(& k), (long long )k);
    __CrestLoad(18492, (unsigned long )(& npm1), (long long )npm1);
    __CrestApply2(18491, 16, (long long )(k < npm1));
# 164 "../HPL_rollT.c"
    if (k < npm1) {
      __CrestBranch(18494, 6680, 1);

    } else {
      __CrestBranch(18495, 6681, 0);
# 164 "../HPL_rollT.c"
      goto while_break;
    }
    }
    __CrestLoad(18498, (unsigned long )(& k), (long long )k);
    __CrestLoad(18497, (unsigned long )0, (long long )1);
    __CrestApply2(18496, 9, (long long )((unsigned int )k >> 1));
    __CrestStore(18499, (unsigned long )(& l));
# 166 "../HPL_rollT.c"
    l = (int )((unsigned int )k >> 1);
    {
    __CrestLoad(18506, (unsigned long )(& mydist), (long long )mydist);
    __CrestLoad(18505, (unsigned long )(& k), (long long )k);
    __CrestApply2(18504, 0, (long long )(mydist + k));
    __CrestLoad(18503, (unsigned long )0, (long long )1);
    __CrestApply2(18502, 5, (long long )((mydist + k) & 1));
    __CrestLoad(18501, (unsigned long )0, (long long )0);
    __CrestApply2(18500, 13, (long long )(((mydist + k) & 1) != 0));
# 168 "../HPL_rollT.c"
    if (((mydist + k) & 1) != 0) {
      __CrestBranch(18507, 6684, 1);
      {
      __CrestLoad(18513, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18512, (unsigned long )(& l), (long long )l);
      __CrestApply2(18511, 0, (long long )(mydist + l));
      __CrestLoad(18510, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(18509, 16, (long long )(mydist + l < nprow));
# 170 "../HPL_rollT.c"
      if (mydist + l < nprow) {
        __CrestBranch(18514, 6685, 1);
        __CrestLoad(18518, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18517, (unsigned long )(& l), (long long )l);
        __CrestApply2(18516, 0, (long long )(mydist + l));
        __CrestStore(18519, (unsigned long )(& il));
# 170 "../HPL_rollT.c"
        il = mydist + l;
      } else {
        __CrestBranch(18515, 6686, 0);
        __CrestLoad(18524, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18523, (unsigned long )(& l), (long long )l);
        __CrestApply2(18522, 0, (long long )(mydist + l));
        __CrestLoad(18521, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(18520, 1, (long long )((mydist + l) - nprow));
        __CrestStore(18525, (unsigned long )(& il));
# 170 "../HPL_rollT.c"
        il = (mydist + l) - nprow;
      }
      }
# 171 "../HPL_rollT.c"
      mem_37 = IPLEN + il;
      __CrestLoad(18526, (unsigned long )mem_37, (long long )*mem_37);
      __CrestStore(18527, (unsigned long )(& ibufS));
# 171 "../HPL_rollT.c"
      ibufS = (int )*mem_37;
# 171 "../HPL_rollT.c"
      mem_38 = IPLEN + (il + 1);
      __CrestLoad(18530, (unsigned long )mem_38, (long long )*mem_38);
      __CrestLoad(18529, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(18528, 1, (long long )(*mem_38 - (int const )ibufS));
      __CrestStore(18531, (unsigned long )(& lengthS));
# 171 "../HPL_rollT.c"
      lengthS = (int )(*mem_38 - (int const )ibufS);
      {
      __CrestLoad(18536, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18535, (unsigned long )(& l), (long long )l);
      __CrestLoad(18534, (unsigned long )0, (long long )1);
      __CrestApply2(18533, 0, (long long )(l + 1));
      __CrestApply2(18532, 16, (long long )(mydist < l + 1));
# 172 "../HPL_rollT.c"
      if (mydist < l + 1) {
        __CrestBranch(18537, 6689, 1);
        __CrestLoad(18545, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(18544, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(18543, 0, (long long )(nprow + mydist));
        __CrestLoad(18542, (unsigned long )(& l), (long long )l);
        __CrestLoad(18541, (unsigned long )0, (long long )1);
        __CrestApply2(18540, 0, (long long )(l + 1));
        __CrestApply2(18539, 1, (long long )((nprow + mydist) - (l + 1)));
        __CrestStore(18546, (unsigned long )(& il));
# 172 "../HPL_rollT.c"
        il = (nprow + mydist) - (l + 1);
      } else {
        __CrestBranch(18538, 6690, 0);
        __CrestLoad(18551, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18550, (unsigned long )(& l), (long long )l);
        __CrestLoad(18549, (unsigned long )0, (long long )1);
        __CrestApply2(18548, 0, (long long )(l + 1));
        __CrestApply2(18547, 1, (long long )(mydist - (l + 1)));
        __CrestStore(18552, (unsigned long )(& il));
# 172 "../HPL_rollT.c"
        il = mydist - (l + 1);
      }
      }
# 173 "../HPL_rollT.c"
      mem_39 = IPLEN + il;
      __CrestLoad(18553, (unsigned long )mem_39, (long long )*mem_39);
      __CrestStore(18554, (unsigned long )(& ibufR));
# 173 "../HPL_rollT.c"
      ibufR = (int )*mem_39;
# 173 "../HPL_rollT.c"
      mem_40 = IPLEN + (il + 1);
      __CrestLoad(18557, (unsigned long )mem_40, (long long )*mem_40);
      __CrestLoad(18556, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(18555, 1, (long long )(*mem_40 - (int const )ibufR));
      __CrestStore(18558, (unsigned long )(& lengthR));
# 173 "../HPL_rollT.c"
      lengthR = (int )(*mem_40 - (int const )ibufR);
      __CrestLoad(18559, (unsigned long )(& prev), (long long )prev);
      __CrestStore(18560, (unsigned long )(& partner));
# 173 "../HPL_rollT.c"
      partner = prev;
    } else {
      __CrestBranch(18508, 6692, 0);
      {
      __CrestLoad(18563, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18562, (unsigned long )(& l), (long long )l);
      __CrestApply2(18561, 16, (long long )(mydist < l));
# 177 "../HPL_rollT.c"
      if (mydist < l) {
        __CrestBranch(18564, 6693, 1);
        __CrestLoad(18570, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(18569, (unsigned long )(& mydist), (long long )mydist);
        __CrestApply2(18568, 0, (long long )(nprow + mydist));
        __CrestLoad(18567, (unsigned long )(& l), (long long )l);
        __CrestApply2(18566, 1, (long long )((nprow + mydist) - l));
        __CrestStore(18571, (unsigned long )(& il));
# 177 "../HPL_rollT.c"
        il = (nprow + mydist) - l;
      } else {
        __CrestBranch(18565, 6694, 0);
        __CrestLoad(18574, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18573, (unsigned long )(& l), (long long )l);
        __CrestApply2(18572, 1, (long long )(mydist - l));
        __CrestStore(18575, (unsigned long )(& il));
# 177 "../HPL_rollT.c"
        il = mydist - l;
      }
      }
# 178 "../HPL_rollT.c"
      mem_41 = IPLEN + il;
      __CrestLoad(18576, (unsigned long )mem_41, (long long )*mem_41);
      __CrestStore(18577, (unsigned long )(& ibufS));
# 178 "../HPL_rollT.c"
      ibufS = (int )*mem_41;
# 178 "../HPL_rollT.c"
      mem_42 = IPLEN + (il + 1);
      __CrestLoad(18580, (unsigned long )mem_42, (long long )*mem_42);
      __CrestLoad(18579, (unsigned long )(& ibufS), (long long )ibufS);
      __CrestApply2(18578, 1, (long long )(*mem_42 - (int const )ibufS));
      __CrestStore(18581, (unsigned long )(& lengthS));
# 178 "../HPL_rollT.c"
      lengthS = (int )(*mem_42 - (int const )ibufS);
      {
      __CrestLoad(18588, (unsigned long )(& mydist), (long long )mydist);
      __CrestLoad(18587, (unsigned long )(& l), (long long )l);
      __CrestLoad(18586, (unsigned long )0, (long long )1);
      __CrestApply2(18585, 0, (long long )(l + 1));
      __CrestApply2(18584, 0, (long long )(mydist + (l + 1)));
      __CrestLoad(18583, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(18582, 16, (long long )(mydist + (l + 1) < nprow));
# 179 "../HPL_rollT.c"
      if (mydist + (l + 1) < nprow) {
        __CrestBranch(18589, 6697, 1);
        __CrestLoad(18595, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18594, (unsigned long )(& l), (long long )l);
        __CrestLoad(18593, (unsigned long )0, (long long )1);
        __CrestApply2(18592, 0, (long long )(l + 1));
        __CrestApply2(18591, 0, (long long )(mydist + (l + 1)));
        __CrestStore(18596, (unsigned long )(& il));
# 179 "../HPL_rollT.c"
        il = mydist + (l + 1);
      } else {
        __CrestBranch(18590, 6698, 0);
        __CrestLoad(18603, (unsigned long )(& mydist), (long long )mydist);
        __CrestLoad(18602, (unsigned long )(& l), (long long )l);
        __CrestLoad(18601, (unsigned long )0, (long long )1);
        __CrestApply2(18600, 0, (long long )(l + 1));
        __CrestApply2(18599, 0, (long long )(mydist + (l + 1)));
        __CrestLoad(18598, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(18597, 1, (long long )((mydist + (l + 1)) - nprow));
        __CrestStore(18604, (unsigned long )(& il));
# 179 "../HPL_rollT.c"
        il = (mydist + (l + 1)) - nprow;
      }
      }
# 180 "../HPL_rollT.c"
      mem_43 = IPLEN + il;
      __CrestLoad(18605, (unsigned long )mem_43, (long long )*mem_43);
      __CrestStore(18606, (unsigned long )(& ibufR));
# 180 "../HPL_rollT.c"
      ibufR = (int )*mem_43;
# 180 "../HPL_rollT.c"
      mem_44 = IPLEN + (il + 1);
      __CrestLoad(18609, (unsigned long )mem_44, (long long )*mem_44);
      __CrestLoad(18608, (unsigned long )(& ibufR), (long long )ibufR);
      __CrestApply2(18607, 1, (long long )(*mem_44 - (int const )ibufR));
      __CrestStore(18610, (unsigned long )(& lengthR));
# 180 "../HPL_rollT.c"
      lengthR = (int )(*mem_44 - (int const )ibufR);
      __CrestLoad(18611, (unsigned long )(& next), (long long )next);
      __CrestStore(18612, (unsigned long )(& partner));
# 180 "../HPL_rollT.c"
      partner = next;
    }
    }
    {
    __CrestLoad(18615, (unsigned long )(& lengthR), (long long )lengthR);
    __CrestLoad(18614, (unsigned long )0, (long long )0);
    __CrestApply2(18613, 14, (long long )(lengthR > 0));
# 183 "../HPL_rollT.c"
    if (lengthR > 0) {
      __CrestBranch(18616, 6701, 1);
      {
      __CrestLoad(18620, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18619, (unsigned long )0, (long long )0);
      __CrestApply2(18618, 12, (long long )(ierr == 0));
# 204 "../HPL_rollT.c"
      if (ierr == 0) {
        __CrestBranch(18621, 6702, 1);
        __CrestLoad(18625, (unsigned long )(& lengthR), (long long )lengthR);
        __CrestLoad(18624, (unsigned long )(& LDU), (long long )LDU);
        __CrestApply2(18623, 2, (long long )(lengthR * (int )LDU));
        __CrestLoad(18626, (unsigned long )0, (long long )1275070475);
        __CrestLoad(18627, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(18628, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(18629, (unsigned long )(& comm), (long long )comm);
# 205 "../HPL_rollT.c"
        ierr = MPI_Irecv((void *)((U + 0) + ibufR * (int )LDU), lengthR * (int )LDU,
                         1275070475, partner, Cmsgid, comm, & request);
        __CrestHandleReturn(18631, (long long )ierr);
        __CrestStore(18630, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18622, 6703, 0);

      }
      }
    } else {
      __CrestBranch(18617, 6704, 0);

    }
    }
    {
    __CrestLoad(18634, (unsigned long )(& lengthS), (long long )lengthS);
    __CrestLoad(18633, (unsigned long )0, (long long )0);
    __CrestApply2(18632, 14, (long long )(lengthS > 0));
# 210 "../HPL_rollT.c"
    if (lengthS > 0) {
      __CrestBranch(18635, 6706, 1);
      {
      __CrestLoad(18639, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18638, (unsigned long )0, (long long )0);
      __CrestApply2(18637, 12, (long long )(ierr == 0));
# 233 "../HPL_rollT.c"
      if (ierr == 0) {
        __CrestBranch(18640, 6707, 1);
        __CrestLoad(18644, (unsigned long )(& lengthS), (long long )lengthS);
        __CrestLoad(18643, (unsigned long )(& LDU), (long long )LDU);
        __CrestApply2(18642, 2, (long long )(lengthS * (int )LDU));
        __CrestLoad(18645, (unsigned long )0, (long long )1275070475);
        __CrestLoad(18646, (unsigned long )(& partner), (long long )partner);
        __CrestLoad(18647, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(18648, (unsigned long )(& comm), (long long )comm);
# 234 "../HPL_rollT.c"
        ierr = MPI_Send((void const *)((U + 0) + ibufS * (int )LDU), lengthS * (int )LDU,
                        1275070475, partner, Cmsgid, comm);
        __CrestHandleReturn(18650, (long long )ierr);
        __CrestStore(18649, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18641, 6708, 0);

      }
      }
    } else {
      __CrestBranch(18636, 6709, 0);

    }
    }
    {
    __CrestLoad(18653, (unsigned long )(& lengthR), (long long )lengthR);
    __CrestLoad(18652, (unsigned long )0, (long long )0);
    __CrestApply2(18651, 14, (long long )(lengthR > 0));
# 239 "../HPL_rollT.c"
    if (lengthR > 0) {
      __CrestBranch(18654, 6711, 1);
      {
      __CrestLoad(18658, (unsigned long )(& ierr), (long long )ierr);
      __CrestLoad(18657, (unsigned long )0, (long long )0);
      __CrestApply2(18656, 12, (long long )(ierr == 0));
# 241 "../HPL_rollT.c"
      if (ierr == 0) {
        __CrestBranch(18659, 6712, 1);
# 242 "../HPL_rollT.c"
        ierr = MPI_Wait(& request, & status);
        __CrestHandleReturn(18662, (long long )ierr);
        __CrestStore(18661, (unsigned long )(& ierr));
      } else {
        __CrestBranch(18660, 6713, 0);

      }
      }
    } else {
      __CrestBranch(18655, 6714, 0);

    }
    }
    {
    __CrestLoad(18665, (unsigned long )IFLAG, (long long )*IFLAG);
    __CrestLoad(18664, (unsigned long )0, (long long )2);
    __CrestApply2(18663, 12, (long long )(*IFLAG == 2));
# 251 "../HPL_rollT.c"
    if (*IFLAG == 2) {
      __CrestBranch(18666, 6716, 1);
# 251 "../HPL_rollT.c"
      HPL_bcast(PBCST, IFLAG);
      __CrestClearStack(18668);
    } else {
      __CrestBranch(18667, 6717, 0);

    }
    }
    __CrestLoad(18671, (unsigned long )(& k), (long long )k);
    __CrestLoad(18670, (unsigned long )0, (long long )1);
    __CrestApply2(18669, 0, (long long )(k + 1));
    __CrestStore(18672, (unsigned long )(& k));
# 164 "../HPL_rollT.c"
    k ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(18675, (unsigned long )(& ierr), (long long )ierr);
  __CrestLoad(18674, (unsigned long )0, (long long )0);
  __CrestApply2(18673, 13, (long long )(ierr != 0));
# 254 "../HPL_rollT.c"
  if (ierr != 0) {
    __CrestBranch(18676, 6721, 1);
    __CrestLoad(18678, (unsigned long )0, (long long )255);
# 255 "../HPL_rollT.c"
    HPL_pabort(255, "HPL_rollT", "MPI call failed");
    __CrestClearStack(18679);
  } else {
    __CrestBranch(18677, 6722, 0);

  }
  }

  return_label:
  {
  __CrestReturn(18680);
# 56 "../HPL_rollT.c"
  return;
  }
}
}
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 230 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_equil(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_TRANS const TRANS ,
               int const N , double *U , int const LDU , int *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 , int *IWORK ) ;
# 53 "../HPL_equil.c"
void HPL_equil(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_TRANS const TRANS ,
               int const N , double *U , int const LDU , int *IPLEN , int const *IPMAP ,
               int const *IPMAPM1 , int *IWORK )
{
  int i ;
  int ip ;
  int ipU ;
  int ipcur ;
  int iprow ;
  int iptgt ;
  int lastrow ;
  int left ;
  int npm1 ;
  int nprow ;
  int ll ;
  int llU ;
  int llcur ;
  int lltgt ;
  int right ;
  int slen ;
  int smax ;
  int smin ;
  struct HPL_S_grid *mem_30 ;
  int *mem_31 ;
  int *mem_32 ;
  int *mem_33 ;
  int *mem_34 ;
  int *mem_35 ;
  int *mem_36 ;
  int *mem_37 ;
  int *mem_38 ;
  int *mem_39 ;
  int *mem_40 ;

  {
  __CrestCall(18684, 106);
  __CrestStore(18683, (unsigned long )(& LDU));
  __CrestStore(18682, (unsigned long )(& N));
  __CrestStore(18681, (unsigned long )(& TRANS));
# 156 "../HPL_equil.c"
  mem_30 = PANEL->grid;
  __CrestLoad(18685, (unsigned long )(& mem_30->nprow), (long long )mem_30->nprow);
  __CrestStore(18686, (unsigned long )(& nprow));
# 156 "../HPL_equil.c"
  nprow = mem_30->nprow;
  __CrestLoad(18689, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18688, (unsigned long )0, (long long )1);
  __CrestApply2(18687, 1, (long long )(nprow - 1));
  __CrestStore(18690, (unsigned long )(& npm1));
# 156 "../HPL_equil.c"
  npm1 = nprow - 1;
  {
  __CrestLoad(18693, (unsigned long )(& npm1), (long long )npm1);
  __CrestLoad(18692, (unsigned long )0, (long long )1);
  __CrestApply2(18691, 15, (long long )(npm1 <= 1));
# 156 "../HPL_equil.c"
  if (npm1 <= 1) {
    __CrestBranch(18694, 6727, 1);
# 156 "../HPL_equil.c"
    goto return_label;
  } else {
    __CrestBranch(18695, 6729, 0);

  }
  }
# 164 "../HPL_equil.c"
  mem_31 = IPLEN + nprow;
  __CrestLoad(18696, (unsigned long )mem_31, (long long )*mem_31);
  __CrestStore(18697, (unsigned long )(& slen));
# 164 "../HPL_equil.c"
  slen = *mem_31;
  __CrestLoad(18702, (unsigned long )(& slen), (long long )slen);
  __CrestLoad(18701, (unsigned long )(& npm1), (long long )npm1);
  __CrestApply2(18700, 0, (long long )(slen + npm1));
  __CrestLoad(18699, (unsigned long )(& nprow), (long long )nprow);
  __CrestApply2(18698, 3, (long long )((slen + npm1) / nprow));
  __CrestStore(18703, (unsigned long )(& smax));
# 164 "../HPL_equil.c"
  smax = (slen + npm1) / nprow;
  __CrestLoad(18706, (unsigned long )(& slen), (long long )slen);
  __CrestLoad(18705, (unsigned long )(& nprow), (long long )nprow);
  __CrestApply2(18704, 3, (long long )(slen / nprow));
  __CrestStore(18707, (unsigned long )(& smin));
# 165 "../HPL_equil.c"
  smin = slen / nprow;
  __CrestLoad(18712, (unsigned long )(& slen), (long long )slen);
  __CrestLoad(18711, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(18710, (unsigned long )(& smin), (long long )smin);
  __CrestApply2(18709, 2, (long long )(nprow * smin));
  __CrestApply2(18708, 1, (long long )(slen - nprow * smin));
  __CrestStore(18713, (unsigned long )(& ip));
# 165 "../HPL_equil.c"
  ip = slen - nprow * smin;
  __CrestLoad(18714, (unsigned long )0, (long long )0);
  __CrestStore(18715, (unsigned long )(& iprow));
# 167 "../HPL_equil.c"
  iprow = 0;
  {
# 168 "../HPL_equil.c"
  while (1) {
    while_continue: ;
# 170 "../HPL_equil.c"
    mem_32 = IPLEN + (iprow + 1);
# 170 "../HPL_equil.c"
    mem_33 = IPLEN + iprow;
    __CrestLoad(18718, (unsigned long )mem_32, (long long )*mem_32);
    __CrestLoad(18717, (unsigned long )mem_33, (long long )*mem_33);
    __CrestApply2(18716, 1, (long long )(*mem_32 - *mem_33));
    __CrestStore(18719, (unsigned long )(& ll));
# 170 "../HPL_equil.c"
    ll = *mem_32 - *mem_33;
    __CrestLoad(18722, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(18721, (unsigned long )0, (long long )1);
    __CrestApply2(18720, 0, (long long )(iprow + 1));
    __CrestStore(18723, (unsigned long )(& iprow));
# 170 "../HPL_equil.c"
    iprow ++;
    {
    __CrestLoad(18726, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(18725, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(18724, 16, (long long )(iprow < nprow));
# 168 "../HPL_equil.c"
    if (iprow < nprow) {
      __CrestBranch(18727, 6736, 1);
      {
      __CrestLoad(18731, (unsigned long )(& ll), (long long )ll);
      __CrestLoad(18730, (unsigned long )(& smin), (long long )smin);
      __CrestApply2(18729, 13, (long long )(ll != smin));
# 168 "../HPL_equil.c"
      if (ll != smin) {
        __CrestBranch(18732, 6737, 1);
        {
        __CrestLoad(18736, (unsigned long )(& ll), (long long )ll);
        __CrestLoad(18735, (unsigned long )(& smax), (long long )smax);
        __CrestApply2(18734, 13, (long long )(ll != smax));
# 168 "../HPL_equil.c"
        if (ll != smax) {
          __CrestBranch(18737, 6738, 1);
# 168 "../HPL_equil.c"
          goto while_break;
        } else {
          __CrestBranch(18738, 6739, 0);

        }
        }
      } else {
        __CrestBranch(18733, 6740, 0);

      }
      }
    } else {
      __CrestBranch(18728, 6741, 0);
# 168 "../HPL_equil.c"
      goto while_break;
    }
    }
  }
  while_break: ;
  }
  {
  __CrestLoad(18741, (unsigned long )(& iprow), (long long )iprow);
  __CrestLoad(18740, (unsigned long )(& nprow), (long long )nprow);
  __CrestApply2(18739, 12, (long long )(iprow == nprow));
# 173 "../HPL_equil.c"
  if (iprow == nprow) {
    __CrestBranch(18742, 6744, 1);
# 173 "../HPL_equil.c"
    goto return_label;
  } else {
    __CrestBranch(18743, 6746, 0);

  }
  }
# 183 "../HPL_equil.c"
  mem_34 = IWORK + nprow;
  __CrestLoad(18744, (unsigned long )(& slen), (long long )slen);
  __CrestStore(18745, (unsigned long )mem_34);
# 183 "../HPL_equil.c"
  *mem_34 = slen;
  __CrestLoad(18746, (unsigned long )0, (long long )0);
  __CrestStore(18747, (unsigned long )(& iprow));
# 185 "../HPL_equil.c"
  iprow = 0;
  {
# 185 "../HPL_equil.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(18750, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(18749, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(18748, 16, (long long )(iprow < nprow));
# 185 "../HPL_equil.c"
    if (iprow < nprow) {
      __CrestBranch(18751, 6752, 1);

    } else {
      __CrestBranch(18752, 6753, 0);
# 185 "../HPL_equil.c"
      goto while_break___0;
    }
    }
# 187 "../HPL_equil.c"
    mem_35 = IPLEN + iprow;
    __CrestLoad(18753, (unsigned long )mem_35, (long long )*mem_35);
    __CrestStore(18754, (unsigned long )(& ipU));
# 187 "../HPL_equil.c"
    ipU = *mem_35;
# 187 "../HPL_equil.c"
    mem_36 = IPLEN + (iprow + 1);
    __CrestLoad(18757, (unsigned long )mem_36, (long long )*mem_36);
    __CrestLoad(18756, (unsigned long )(& ipU), (long long )ipU);
    __CrestApply2(18755, 1, (long long )(*mem_36 - ipU));
    __CrestStore(18758, (unsigned long )(& llU));
# 187 "../HPL_equil.c"
    llU = *mem_36 - ipU;
    {
    __CrestLoad(18761, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(18760, (unsigned long )(& ip), (long long )ip);
    __CrestApply2(18759, 16, (long long )(iprow < ip));
# 188 "../HPL_equil.c"
    if (iprow < ip) {
      __CrestBranch(18762, 6756, 1);
      __CrestLoad(18764, (unsigned long )(& smax), (long long )smax);
      __CrestStore(18765, (unsigned long )(& lltgt));
# 188 "../HPL_equil.c"
      lltgt = smax;
      __CrestLoad(18768, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(18767, (unsigned long )(& smax), (long long )smax);
      __CrestApply2(18766, 2, (long long )(iprow * smax));
      __CrestStore(18769, (unsigned long )(& iptgt));
# 188 "../HPL_equil.c"
      iptgt = iprow * smax;
    } else {
      __CrestBranch(18763, 6757, 0);
      __CrestLoad(18770, (unsigned long )(& smin), (long long )smin);
      __CrestStore(18771, (unsigned long )(& lltgt));
# 189 "../HPL_equil.c"
      lltgt = smin;
      __CrestLoad(18776, (unsigned long )(& iprow), (long long )iprow);
      __CrestLoad(18775, (unsigned long )(& smin), (long long )smin);
      __CrestApply2(18774, 2, (long long )(iprow * smin));
      __CrestLoad(18773, (unsigned long )(& ip), (long long )ip);
      __CrestApply2(18772, 0, (long long )(iprow * smin + ip));
      __CrestStore(18777, (unsigned long )(& iptgt));
# 189 "../HPL_equil.c"
      iptgt = iprow * smin + ip;
    }
    }
    __CrestLoad(18780, (unsigned long )(& ipU), (long long )ipU);
    __CrestLoad(18779, (unsigned long )(& iptgt), (long long )iptgt);
    __CrestApply2(18778, 16, (long long )(ipU < iptgt));
    __CrestStore(18781, (unsigned long )(& left));
# 191 "../HPL_equil.c"
    left = ipU < iptgt;
    __CrestLoad(18788, (unsigned long )(& iptgt), (long long )iptgt);
    __CrestLoad(18787, (unsigned long )(& lltgt), (long long )lltgt);
    __CrestApply2(18786, 0, (long long )(iptgt + lltgt));
    __CrestLoad(18785, (unsigned long )(& ipU), (long long )ipU);
    __CrestLoad(18784, (unsigned long )(& llU), (long long )llU);
    __CrestApply2(18783, 0, (long long )(ipU + llU));
    __CrestApply2(18782, 16, (long long )(iptgt + lltgt < ipU + llU));
    __CrestStore(18789, (unsigned long )(& right));
# 191 "../HPL_equil.c"
    right = iptgt + lltgt < ipU + llU;
    {
    __CrestLoad(18792, (unsigned long )(& llU), (long long )llU);
    __CrestLoad(18791, (unsigned long )0, (long long )0);
    __CrestApply2(18790, 14, (long long )(llU > 0));
# 195 "../HPL_equil.c"
    if (llU > 0) {
      __CrestBranch(18793, 6760, 1);
      {
      __CrestLoad(18797, (unsigned long )(& left), (long long )left);
      __CrestLoad(18796, (unsigned long )0, (long long )0);
      __CrestApply2(18795, 13, (long long )(left != 0));
# 195 "../HPL_equil.c"
      if (left != 0) {
        __CrestBranch(18798, 6761, 1);
# 195 "../HPL_equil.c"
        goto _L;
      } else {
        __CrestBranch(18799, 6762, 0);
        {
        __CrestLoad(18802, (unsigned long )(& right), (long long )right);
        __CrestLoad(18801, (unsigned long )0, (long long )0);
        __CrestApply2(18800, 13, (long long )(right != 0));
# 195 "../HPL_equil.c"
        if (right != 0) {
          __CrestBranch(18803, 6763, 1);
          _L:
          __CrestLoad(18805, (unsigned long )(& ipU), (long long )ipU);
          __CrestStore(18806, (unsigned long )(& ipcur));
# 198 "../HPL_equil.c"
          ipcur = ipU;
          __CrestLoad(18807, (unsigned long )(& llU), (long long )llU);
          __CrestStore(18808, (unsigned long )(& llcur));
# 198 "../HPL_equil.c"
          llcur = llU;
          __CrestLoad(18809, (unsigned long )0, (long long )0);
          __CrestStore(18810, (unsigned long )(& i));
# 200 "../HPL_equil.c"
          i = 0;
          {
# 200 "../HPL_equil.c"
          while (1) {
            while_continue___1: ;
            {
            __CrestLoad(18813, (unsigned long )(& i), (long long )i);
            __CrestLoad(18812, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(18811, 16, (long long )(i < nprow));
# 200 "../HPL_equil.c"
            if (i < nprow) {
              __CrestBranch(18814, 6768, 1);

            } else {
              __CrestBranch(18815, 6769, 0);
# 200 "../HPL_equil.c"
              goto while_break___1;
            }
            }
            {
            __CrestLoad(18818, (unsigned long )(& i), (long long )i);
            __CrestLoad(18817, (unsigned long )(& ip), (long long )ip);
            __CrestApply2(18816, 16, (long long )(i < ip));
# 202 "../HPL_equil.c"
            if (i < ip) {
              __CrestBranch(18819, 6771, 1);
              __CrestLoad(18821, (unsigned long )(& smax), (long long )smax);
              __CrestStore(18822, (unsigned long )(& lltgt));
# 202 "../HPL_equil.c"
              lltgt = smax;
              __CrestLoad(18825, (unsigned long )(& i), (long long )i);
              __CrestLoad(18824, (unsigned long )(& smax), (long long )smax);
              __CrestApply2(18823, 2, (long long )(i * smax));
              __CrestStore(18826, (unsigned long )(& iptgt));
# 202 "../HPL_equil.c"
              iptgt = i * smax;
            } else {
              __CrestBranch(18820, 6772, 0);
              __CrestLoad(18827, (unsigned long )(& smin), (long long )smin);
              __CrestStore(18828, (unsigned long )(& lltgt));
# 203 "../HPL_equil.c"
              lltgt = smin;
              __CrestLoad(18833, (unsigned long )(& i), (long long )i);
              __CrestLoad(18832, (unsigned long )(& smin), (long long )smin);
              __CrestApply2(18831, 2, (long long )(i * smin));
              __CrestLoad(18830, (unsigned long )(& ip), (long long )ip);
              __CrestApply2(18829, 0, (long long )(i * smin + ip));
              __CrestStore(18834, (unsigned long )(& iptgt));
# 203 "../HPL_equil.c"
              iptgt = i * smin + ip;
            }
            }
            __CrestLoad(18839, (unsigned long )(& iptgt), (long long )iptgt);
            __CrestLoad(18838, (unsigned long )(& lltgt), (long long )lltgt);
            __CrestApply2(18837, 0, (long long )(iptgt + lltgt));
            __CrestLoad(18836, (unsigned long )0, (long long )1);
            __CrestApply2(18835, 1, (long long )((iptgt + lltgt) - 1));
            __CrestStore(18840, (unsigned long )(& lastrow));
# 204 "../HPL_equil.c"
            lastrow = (iptgt + lltgt) - 1;
            {
            __CrestLoad(18843, (unsigned long )(& lastrow), (long long )lastrow);
            __CrestLoad(18842, (unsigned long )(& ipcur), (long long )ipcur);
            __CrestApply2(18841, 17, (long long )(lastrow >= ipcur));
# 206 "../HPL_equil.c"
            if (lastrow >= ipcur) {
              __CrestBranch(18844, 6775, 1);
              {
              __CrestLoad(18848, (unsigned long )(& llcur), (long long )llcur);
              __CrestLoad(18847, (unsigned long )0, (long long )0);
              __CrestApply2(18846, 14, (long long )(llcur > 0));
# 206 "../HPL_equil.c"
              if (llcur > 0) {
                __CrestBranch(18849, 6776, 1);
                __CrestLoad(18855, (unsigned long )(& lastrow), (long long )lastrow);
                __CrestLoad(18854, (unsigned long )(& ipcur), (long long )ipcur);
                __CrestApply2(18853, 1, (long long )(lastrow - ipcur));
                __CrestLoad(18852, (unsigned long )0, (long long )1);
                __CrestApply2(18851, 0, (long long )((lastrow - ipcur) + 1));
                __CrestStore(18856, (unsigned long )(& ll));
# 207 "../HPL_equil.c"
                ll = (lastrow - ipcur) + 1;
                {
                __CrestLoad(18859, (unsigned long )(& ll), (long long )ll);
                __CrestLoad(18858, (unsigned long )(& llcur), (long long )llcur);
                __CrestApply2(18857, 16, (long long )(ll < llcur));
# 207 "../HPL_equil.c"
                if (ll < llcur) {
                  __CrestBranch(18860, 6778, 1);
                  __CrestLoad(18862, (unsigned long )(& ll), (long long )ll);
                  __CrestStore(18863, (unsigned long )(& ll));
# 207 "../HPL_equil.c"
                  ll = ll;
                } else {
                  __CrestBranch(18861, 6779, 0);
                  __CrestLoad(18864, (unsigned long )(& llcur), (long long )llcur);
                  __CrestStore(18865, (unsigned long )(& ll));
# 207 "../HPL_equil.c"
                  ll = llcur;
                }
                }
                __CrestLoad(18868, (unsigned long )(& llcur), (long long )llcur);
                __CrestLoad(18867, (unsigned long )(& ll), (long long )ll);
                __CrestApply2(18866, 1, (long long )(llcur - ll));
                __CrestStore(18869, (unsigned long )(& llcur));
# 207 "../HPL_equil.c"
                llcur -= ll;
              } else {
                __CrestBranch(18850, 6781, 0);
                __CrestLoad(18870, (unsigned long )0, (long long )0);
                __CrestStore(18871, (unsigned long )(& ll));
# 208 "../HPL_equil.c"
                ll = 0;
              }
              }
            } else {
              __CrestBranch(18845, 6782, 0);
              __CrestLoad(18872, (unsigned long )0, (long long )0);
              __CrestStore(18873, (unsigned long )(& ll));
# 208 "../HPL_equil.c"
              ll = 0;
            }
            }
# 210 "../HPL_equil.c"
            mem_37 = IWORK + i;
            __CrestLoad(18874, (unsigned long )(& ipcur), (long long )ipcur);
            __CrestStore(18875, (unsigned long )mem_37);
# 210 "../HPL_equil.c"
            *mem_37 = ipcur;
            __CrestLoad(18878, (unsigned long )(& ipcur), (long long )ipcur);
            __CrestLoad(18877, (unsigned long )(& ll), (long long )ll);
            __CrestApply2(18876, 0, (long long )(ipcur + ll));
            __CrestStore(18879, (unsigned long )(& ipcur));
# 210 "../HPL_equil.c"
            ipcur += ll;
# 210 "../HPL_equil.c"
            mem_38 = IWORK + (i + 1);
            __CrestLoad(18880, (unsigned long )(& ipcur), (long long )ipcur);
            __CrestStore(18881, (unsigned long )mem_38);
# 210 "../HPL_equil.c"
            *mem_38 = ipcur;
            __CrestLoad(18884, (unsigned long )(& i), (long long )i);
            __CrestLoad(18883, (unsigned long )0, (long long )1);
            __CrestApply2(18882, 0, (long long )(i + 1));
            __CrestStore(18885, (unsigned long )(& i));
# 200 "../HPL_equil.c"
            i ++;
          }
          while_break___1: ;
          }
          {
          __CrestLoad(18888, (unsigned long )(& TRANS), (long long )TRANS);
          __CrestLoad(18887, (unsigned long )0, (long long )111U);
          __CrestApply2(18886, 12, (long long )((unsigned int const )TRANS == 111U));
# 215 "../HPL_equil.c"
          if ((unsigned int const )TRANS == 111U) {
            __CrestBranch(18889, 6786, 1);
            {
            __CrestLoad(18893, (unsigned long )(& left), (long long )left);
            __CrestLoad(18892, (unsigned long )0, (long long )0);
            __CrestApply2(18891, 13, (long long )(left != 0));
# 217 "../HPL_equil.c"
            if (left != 0) {
              __CrestBranch(18894, 6787, 1);
              __CrestLoad(18896, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
              __CrestLoad(18897, (unsigned long )(& N), (long long )N);
              __CrestLoad(18898, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(18899, (unsigned long )(& iprow), (long long )iprow);
# 219 "../HPL_equil.c"
              HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )141, N, U,
                          LDU, (int const )iprow, (int const *)IWORK, IPMAP, IPMAPM1);
              __CrestClearStack(18900);
            } else {
              __CrestBranch(18895, 6788, 0);

            }
            }
            {
            __CrestLoad(18903, (unsigned long )(& right), (long long )right);
            __CrestLoad(18902, (unsigned long )0, (long long )0);
            __CrestApply2(18901, 13, (long long )(right != 0));
# 223 "../HPL_equil.c"
            if (right != 0) {
              __CrestBranch(18904, 6790, 1);
              __CrestLoad(18906, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
              __CrestLoad(18907, (unsigned long )(& N), (long long )N);
              __CrestLoad(18908, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(18909, (unsigned long )(& iprow), (long long )iprow);
# 225 "../HPL_equil.c"
              HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )142, N, U,
                          LDU, (int const )iprow, (int const *)IWORK, IPMAP, IPMAPM1);
              __CrestClearStack(18910);
            } else {
              __CrestBranch(18905, 6791, 0);

            }
            }
          } else {
            __CrestBranch(18890, 6792, 0);
            {
            __CrestLoad(18913, (unsigned long )(& left), (long long )left);
            __CrestLoad(18912, (unsigned long )0, (long long )0);
            __CrestApply2(18911, 13, (long long )(left != 0));
# 231 "../HPL_equil.c"
            if (left != 0) {
              __CrestBranch(18914, 6793, 1);
              __CrestLoad(18916, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
              __CrestLoad(18917, (unsigned long )(& N), (long long )N);
              __CrestLoad(18918, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(18919, (unsigned long )(& iprow), (long long )iprow);
# 233 "../HPL_equil.c"
              HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )141, N, U,
                          LDU, (int const )iprow, (int const *)IWORK, IPMAP, IPMAPM1);
              __CrestClearStack(18920);
            } else {
              __CrestBranch(18915, 6794, 0);

            }
            }
            {
            __CrestLoad(18923, (unsigned long )(& right), (long long )right);
            __CrestLoad(18922, (unsigned long )0, (long long )0);
            __CrestApply2(18921, 13, (long long )(right != 0));
# 237 "../HPL_equil.c"
            if (right != 0) {
              __CrestBranch(18924, 6796, 1);
              __CrestLoad(18926, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
              __CrestLoad(18927, (unsigned long )(& N), (long long )N);
              __CrestLoad(18928, (unsigned long )(& LDU), (long long )LDU);
              __CrestLoad(18929, (unsigned long )(& iprow), (long long )iprow);
# 239 "../HPL_equil.c"
              HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )142, N, U,
                          LDU, (int const )iprow, (int const *)IWORK, IPMAP, IPMAPM1);
              __CrestClearStack(18930);
            } else {
              __CrestBranch(18925, 6797, 0);

            }
            }
          }
          }
        } else {
          __CrestBranch(18804, 6798, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(18794, 6799, 0);

    }
    }
    __CrestLoad(18933, (unsigned long )(& iprow), (long long )iprow);
    __CrestLoad(18932, (unsigned long )0, (long long )1);
    __CrestApply2(18931, 0, (long long )(iprow + 1));
    __CrestStore(18934, (unsigned long )(& iprow));
# 185 "../HPL_equil.c"
    iprow ++;
  }
  while_break___0: ;
  }
  __CrestLoad(18935, (unsigned long )0, (long long )0);
  __CrestStore(18936, (unsigned long )(& i));
# 249 "../HPL_equil.c"
  i = 0;
  {
# 249 "../HPL_equil.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(18939, (unsigned long )(& i), (long long )i);
    __CrestLoad(18938, (unsigned long )(& nprow), (long long )nprow);
    __CrestApply2(18937, 16, (long long )(i < nprow));
# 249 "../HPL_equil.c"
    if (i < nprow) {
      __CrestBranch(18940, 6807, 1);

    } else {
      __CrestBranch(18941, 6808, 0);
# 249 "../HPL_equil.c"
      goto while_break___2;
    }
    }
    {
    __CrestLoad(18944, (unsigned long )(& i), (long long )i);
    __CrestLoad(18943, (unsigned long )(& ip), (long long )ip);
    __CrestApply2(18942, 16, (long long )(i < ip));
# 249 "../HPL_equil.c"
    if (i < ip) {
      __CrestBranch(18945, 6810, 1);
# 249 "../HPL_equil.c"
      mem_39 = IPLEN + i;
      __CrestLoad(18949, (unsigned long )(& i), (long long )i);
      __CrestLoad(18948, (unsigned long )(& smax), (long long )smax);
      __CrestApply2(18947, 2, (long long )(i * smax));
      __CrestStore(18950, (unsigned long )mem_39);
# 249 "../HPL_equil.c"
      *mem_39 = i * smax;
    } else {
      __CrestBranch(18946, 6811, 0);
# 249 "../HPL_equil.c"
      mem_40 = IPLEN + i;
      __CrestLoad(18955, (unsigned long )(& i), (long long )i);
      __CrestLoad(18954, (unsigned long )(& smin), (long long )smin);
      __CrestApply2(18953, 2, (long long )(i * smin));
      __CrestLoad(18952, (unsigned long )(& ip), (long long )ip);
      __CrestApply2(18951, 0, (long long )(i * smin + ip));
      __CrestStore(18956, (unsigned long )mem_40);
# 249 "../HPL_equil.c"
      *mem_40 = i * smin + ip;
    }
    }
    __CrestLoad(18959, (unsigned long )(& i), (long long )i);
    __CrestLoad(18958, (unsigned long )0, (long long )1);
    __CrestApply2(18957, 0, (long long )(i + 1));
    __CrestStore(18960, (unsigned long )(& i));
# 249 "../HPL_equil.c"
    i ++;
  }
  while_break___2: ;
  }

  return_label:
  {
  __CrestReturn(18961);
# 53 "../HPL_equil.c"
  return;
  }
}
}
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 268 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp01N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 121 "../HPL_pdlaswp01N.c"
static int equil = -1;
# 53 "../HPL_pdlaswp01N.c"
void HPL_pdlaswp01N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *A ;
  double *U ;
  int *ipID ;
  int *iplen ;
  int *ipmap ;
  int *ipmapm1 ;
  int *iwork ;
  int *lindxA ;
  int *lindxAU ;
  int *permU ;
  int icurrow ;
  int *iflag ;
  int *ipA ;
  int *ipl ;
  int jb ;
  int k ;
  int lda ;
  int myrow ;
  int n ;
  int nprow ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;
  struct HPL_S_grid *mem_27 ;
  int *mem_28 ;
  int *mem_29 ;
  int *mem_30 ;
  int *mem_31 ;

  {
  __CrestCall(18963, 107);
  __CrestStore(18962, (unsigned long )(& NN));
# 118 "../HPL_pdlaswp01N.c"
  lindxA = (int *)((void *)0);
  __CrestLoad(18964, (unsigned long )(& PANEL->n), (long long )PANEL->n);
  __CrestStore(18965, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01N.c"
  n = PANEL->n;
  {
  __CrestLoad(18968, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(18967, (unsigned long )(& n), (long long )n);
  __CrestApply2(18966, 16, (long long )(NN < (int const )n));
# 128 "../HPL_pdlaswp01N.c"
  if (NN < (int const )n) {
    __CrestBranch(18969, 6818, 1);
    __CrestLoad(18971, (unsigned long )(& NN), (long long )NN);
    __CrestStore(18972, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01N.c"
    n = (int )NN;
  } else {
    __CrestBranch(18970, 6819, 0);
    __CrestLoad(18973, (unsigned long )(& n), (long long )n);
    __CrestStore(18974, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01N.c"
    n = n;
  }
  }
  __CrestLoad(18975, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(18976, (unsigned long )(& jb));
# 128 "../HPL_pdlaswp01N.c"
  jb = PANEL->jb;
  {
  __CrestLoad(18979, (unsigned long )(& n), (long long )n);
  __CrestLoad(18978, (unsigned long )0, (long long )0);
  __CrestApply2(18977, 15, (long long )(n <= 0));
# 132 "../HPL_pdlaswp01N.c"
  if (n <= 0) {
    __CrestBranch(18980, 6822, 1);
# 132 "../HPL_pdlaswp01N.c"
    goto return_label;
  } else {
    __CrestBranch(18981, 6824, 0);
    {
    __CrestLoad(18984, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(18983, (unsigned long )0, (long long )0);
    __CrestApply2(18982, 15, (long long )(jb <= 0));
# 132 "../HPL_pdlaswp01N.c"
    if (jb <= 0) {
      __CrestBranch(18985, 6825, 1);
# 132 "../HPL_pdlaswp01N.c"
      goto return_label;
    } else {
      __CrestBranch(18986, 6827, 0);

    }
    }
  }
  }
  {
  __CrestLoad(18989, (unsigned long )(& equil), (long long )equil);
  __CrestLoad(18988, (unsigned long )0, (long long )-1);
  __CrestApply2(18987, 12, (long long )(equil == -1));
# 139 "../HPL_pdlaswp01N.c"
  if (equil == -1) {
    __CrestBranch(18990, 6829, 1);
# 139 "../HPL_pdlaswp01N.c"
    mem_25 = PANEL->algo;
    __CrestLoad(18992, (unsigned long )(& mem_25->equil), (long long )mem_25->equil);
    __CrestStore(18993, (unsigned long )(& equil));
# 139 "../HPL_pdlaswp01N.c"
    equil = mem_25->equil;
  } else {
    __CrestBranch(18991, 6830, 0);

  }
  }
# 143 "../HPL_pdlaswp01N.c"
  mem_26 = PANEL->grid;
  __CrestLoad(18994, (unsigned long )(& mem_26->nprow), (long long )mem_26->nprow);
  __CrestStore(18995, (unsigned long )(& nprow));
# 143 "../HPL_pdlaswp01N.c"
  nprow = mem_26->nprow;
# 143 "../HPL_pdlaswp01N.c"
  mem_27 = PANEL->grid;
  __CrestLoad(18996, (unsigned long )(& mem_27->myrow), (long long )mem_27->myrow);
  __CrestStore(18997, (unsigned long )(& myrow));
# 143 "../HPL_pdlaswp01N.c"
  myrow = mem_27->myrow;
# 144 "../HPL_pdlaswp01N.c"
  A = PANEL->A;
# 144 "../HPL_pdlaswp01N.c"
  U = PANEL->U;
# 144 "../HPL_pdlaswp01N.c"
  iflag = PANEL->IWORK;
  __CrestLoad(18998, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(18999, (unsigned long )(& lda));
# 145 "../HPL_pdlaswp01N.c"
  lda = PANEL->lda;
  __CrestLoad(19000, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(19001, (unsigned long )(& icurrow));
# 145 "../HPL_pdlaswp01N.c"
  icurrow = PANEL->prow;
  __CrestLoad(19004, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(19003, (unsigned long )0, (long long )1);
  __CrestApply2(19002, 8, (long long )((unsigned int )jb << 1));
  __CrestStore(19005, (unsigned long )(& k));
# 154 "../HPL_pdlaswp01N.c"
  k = (int )((unsigned int )jb << 1);
# 154 "../HPL_pdlaswp01N.c"
  ipl = iflag + 1;
# 154 "../HPL_pdlaswp01N.c"
  ipID = ipl + 1;
# 155 "../HPL_pdlaswp01N.c"
  ipA = ipID + ((unsigned int )k << 1);
# 155 "../HPL_pdlaswp01N.c"
  lindxA = ipA + 1;
# 156 "../HPL_pdlaswp01N.c"
  lindxAU = lindxA + k;
# 156 "../HPL_pdlaswp01N.c"
  iplen = lindxAU + k;
# 156 "../HPL_pdlaswp01N.c"
  ipmap = (iplen + nprow) + 1;
# 157 "../HPL_pdlaswp01N.c"
  ipmapm1 = ipmap + nprow;
# 157 "../HPL_pdlaswp01N.c"
  permU = ipmapm1 + nprow;
# 157 "../HPL_pdlaswp01N.c"
  iwork = permU + jb;
  {
  __CrestLoad(19008, (unsigned long )iflag, (long long )*iflag);
  __CrestLoad(19007, (unsigned long )0, (long long )-1);
  __CrestApply2(19006, 12, (long long )(*iflag == -1));
# 159 "../HPL_pdlaswp01N.c"
  if (*iflag == -1) {
    __CrestBranch(19009, 6833, 1);
# 161 "../HPL_pdlaswp01N.c"
    HPL_pipid(PANEL, ipl, ipID);
    __CrestClearStack(19011);
    __CrestLoad(19012, (unsigned long )ipl, (long long )*ipl);
# 162 "../HPL_pdlaswp01N.c"
    HPL_plindx1(PANEL, (int const )*ipl, (int const *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
    __CrestClearStack(19013);
    __CrestLoad(19014, (unsigned long )0, (long long )1);
    __CrestStore(19015, (unsigned long )iflag);
# 164 "../HPL_pdlaswp01N.c"
    *iflag = 1;
  } else {
    __CrestBranch(19010, 6834, 0);
    {
    __CrestLoad(19018, (unsigned long )iflag, (long long )*iflag);
    __CrestLoad(19017, (unsigned long )0, (long long )0);
    __CrestApply2(19016, 12, (long long )(*iflag == 0));
# 166 "../HPL_pdlaswp01N.c"
    if (*iflag == 0) {
      __CrestBranch(19019, 6835, 1);
      __CrestLoad(19021, (unsigned long )ipl, (long long )*ipl);
# 168 "../HPL_pdlaswp01N.c"
      HPL_plindx1(PANEL, (int const )*ipl, (int const *)ipID, ipA, lindxA, lindxAU,
                  iplen, ipmap, ipmapm1, permU, iwork);
      __CrestClearStack(19022);
      __CrestLoad(19023, (unsigned long )0, (long long )1);
      __CrestStore(19024, (unsigned long )iflag);
# 170 "../HPL_pdlaswp01N.c"
      *iflag = 1;
    } else {
      __CrestBranch(19020, 6836, 0);
      {
      __CrestLoad(19027, (unsigned long )iflag, (long long )*iflag);
      __CrestLoad(19026, (unsigned long )0, (long long )1);
      __CrestApply2(19025, 12, (long long )(*iflag == 1));
# 172 "../HPL_pdlaswp01N.c"
      if (*iflag == 1) {
        __CrestBranch(19028, 6837, 1);
        {
        __CrestLoad(19032, (unsigned long )(& equil), (long long )equil);
        __CrestLoad(19031, (unsigned long )0, (long long )0);
        __CrestApply2(19030, 13, (long long )(equil != 0));
# 172 "../HPL_pdlaswp01N.c"
        if (equil != 0) {
          __CrestBranch(19033, 6838, 1);
          __CrestLoad(19035, (unsigned long )ipl, (long long )*ipl);
# 174 "../HPL_pdlaswp01N.c"
          HPL_plindx10(PANEL, (int const )*ipl, (int const *)ipID, iplen, ipmap,
                       ipmapm1);
          __CrestClearStack(19036);
          __CrestLoad(19037, (unsigned long )0, (long long )1);
          __CrestStore(19038, (unsigned long )iflag);
# 175 "../HPL_pdlaswp01N.c"
          *iflag = 1;
        } else {
          __CrestBranch(19034, 6839, 0);

        }
        }
      } else {
        __CrestBranch(19029, 6840, 0);

      }
      }
    }
    }
  }
  }
  {
  __CrestLoad(19041, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(19040, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(19039, 12, (long long )(myrow == icurrow));
# 180 "../HPL_pdlaswp01N.c"
  if (myrow == icurrow) {
    __CrestBranch(19042, 6842, 1);
    __CrestLoad(19044, (unsigned long )ipA, (long long )*ipA);
    __CrestLoad(19045, (unsigned long )(& n), (long long )n);
    __CrestLoad(19046, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(19047, (unsigned long )(& jb), (long long )jb);
# 181 "../HPL_pdlaswp01N.c"
    HPL_dlaswp01N((int const )*ipA, (int const )n, A, (int const )lda, U, (int const )jb,
                  (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(19048);
  } else {
    __CrestBranch(19043, 6843, 0);

  }
  }
  __CrestLoad(19049, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
  __CrestLoad(19050, (unsigned long )(& n), (long long )n);
  __CrestLoad(19051, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(19052, (unsigned long )0, (long long )((int const )0));
# 185 "../HPL_pdlaswp01N.c"
  HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )142, (int const )n, U,
              (int const )jb, (int const )0, (int const *)iplen, (int const *)ipmap,
              (int const *)ipmapm1);
  __CrestClearStack(19053);
  {
  __CrestLoad(19056, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(19055, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(19054, 13, (long long )(myrow != icurrow));
# 190 "../HPL_pdlaswp01N.c"
  if (myrow != icurrow) {
    __CrestBranch(19057, 6846, 1);
# 192 "../HPL_pdlaswp01N.c"
    mem_28 = ipmapm1 + myrow;
    __CrestLoad(19059, (unsigned long )mem_28, (long long )*mem_28);
    __CrestStore(19060, (unsigned long )(& k));
# 192 "../HPL_pdlaswp01N.c"
    k = *mem_28;
# 193 "../HPL_pdlaswp01N.c"
    mem_29 = iplen + (k + 1);
# 193 "../HPL_pdlaswp01N.c"
    mem_30 = iplen + k;
# 193 "../HPL_pdlaswp01N.c"
    mem_31 = iplen + k;
    __CrestLoad(19063, (unsigned long )mem_29, (long long )*mem_29);
    __CrestLoad(19062, (unsigned long )mem_30, (long long )*mem_30);
    __CrestApply2(19061, 1, (long long )(*mem_29 - *mem_30));
    __CrestLoad(19064, (unsigned long )(& n), (long long )n);
    __CrestLoad(19065, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(19066, (unsigned long )(& jb), (long long )jb);
# 193 "../HPL_pdlaswp01N.c"
    HPL_dlaswp06N((int const )(*mem_29 - *mem_30), (int const )n, A, (int const )lda,
                  (U + *mem_31) + 0, (int const )jb, (int const *)lindxA);
    __CrestClearStack(19067);
  } else {
    __CrestBranch(19058, 6847, 0);

  }
  }
  {
  __CrestLoad(19070, (unsigned long )(& equil), (long long )equil);
  __CrestLoad(19069, (unsigned long )0, (long long )0);
  __CrestApply2(19068, 13, (long long )(equil != 0));
# 199 "../HPL_pdlaswp01N.c"
  if (equil != 0) {
    __CrestBranch(19071, 6849, 1);
    __CrestLoad(19073, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
    __CrestLoad(19074, (unsigned long )(& n), (long long )n);
    __CrestLoad(19075, (unsigned long )(& jb), (long long )jb);
# 200 "../HPL_pdlaswp01N.c"
    HPL_equil(PBCST, IFLAG, PANEL, (enum HPL_TRANS const )111, (int const )n,
              U, (int const )jb, iplen, (int const *)ipmap, (int const *)ipmapm1,
              iwork);
    __CrestClearStack(19076);
  } else {
    __CrestBranch(19072, 6850, 0);

  }
  }
  __CrestLoad(19077, (unsigned long )(& n), (long long )n);
  __CrestLoad(19078, (unsigned long )(& jb), (long long )jb);
# 205 "../HPL_pdlaswp01N.c"
  HPL_rollN(PBCST, IFLAG, PANEL, (int const )n, U, (int const )jb, (int const *)iplen,
            (int const *)ipmap, (int const *)ipmapm1);
  __CrestClearStack(19079);
  __CrestLoad(19080, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(19081, (unsigned long )(& n), (long long )n);
  __CrestLoad(19082, (unsigned long )(& jb), (long long )jb);
# 209 "../HPL_pdlaswp01N.c"
  HPL_dlaswp00N((int const )jb, (int const )n, U, (int const )jb, (int const *)permU);
  __CrestClearStack(19083);

  return_label:
  {
  __CrestReturn(19084);
# 53 "../HPL_pdlaswp01N.c"
  return;
  }
}
}
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 275 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp01T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN ) ;
# 121 "../HPL_pdlaswp01T.c"
static int equil___0 = -1;
# 53 "../HPL_pdlaswp01T.c"
void HPL_pdlaswp01T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *A ;
  double *U ;
  int *ipID ;
  int *iplen ;
  int *ipmap ;
  int *ipmapm1 ;
  int *iwork ;
  int *lindxA ;
  int *lindxAU ;
  int *permU ;
  int icurrow ;
  int *iflag ;
  int *ipA ;
  int *ipl ;
  int jb ;
  int k ;
  int lda ;
  int myrow ;
  int n ;
  int nprow ;
  struct HPL_S_palg *mem_25 ;
  struct HPL_S_grid *mem_26 ;
  struct HPL_S_grid *mem_27 ;
  int *mem_28 ;
  int *mem_29 ;
  int *mem_30 ;
  int *mem_31 ;

  {
  __CrestCall(19086, 108);
  __CrestStore(19085, (unsigned long )(& NN));
# 118 "../HPL_pdlaswp01T.c"
  lindxA = (int *)((void *)0);
  __CrestLoad(19087, (unsigned long )(& PANEL->n), (long long )PANEL->n);
  __CrestStore(19088, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01T.c"
  n = PANEL->n;
  {
  __CrestLoad(19091, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(19090, (unsigned long )(& n), (long long )n);
  __CrestApply2(19089, 16, (long long )(NN < (int const )n));
# 128 "../HPL_pdlaswp01T.c"
  if (NN < (int const )n) {
    __CrestBranch(19092, 6856, 1);
    __CrestLoad(19094, (unsigned long )(& NN), (long long )NN);
    __CrestStore(19095, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01T.c"
    n = (int )NN;
  } else {
    __CrestBranch(19093, 6857, 0);
    __CrestLoad(19096, (unsigned long )(& n), (long long )n);
    __CrestStore(19097, (unsigned long )(& n));
# 128 "../HPL_pdlaswp01T.c"
    n = n;
  }
  }
  __CrestLoad(19098, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(19099, (unsigned long )(& jb));
# 128 "../HPL_pdlaswp01T.c"
  jb = PANEL->jb;
  {
  __CrestLoad(19102, (unsigned long )(& n), (long long )n);
  __CrestLoad(19101, (unsigned long )0, (long long )0);
  __CrestApply2(19100, 15, (long long )(n <= 0));
# 132 "../HPL_pdlaswp01T.c"
  if (n <= 0) {
    __CrestBranch(19103, 6860, 1);
# 132 "../HPL_pdlaswp01T.c"
    goto return_label;
  } else {
    __CrestBranch(19104, 6862, 0);
    {
    __CrestLoad(19107, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(19106, (unsigned long )0, (long long )0);
    __CrestApply2(19105, 15, (long long )(jb <= 0));
# 132 "../HPL_pdlaswp01T.c"
    if (jb <= 0) {
      __CrestBranch(19108, 6863, 1);
# 132 "../HPL_pdlaswp01T.c"
      goto return_label;
    } else {
      __CrestBranch(19109, 6865, 0);

    }
    }
  }
  }
  {
  __CrestLoad(19112, (unsigned long )(& equil___0), (long long )equil___0);
  __CrestLoad(19111, (unsigned long )0, (long long )-1);
  __CrestApply2(19110, 12, (long long )(equil___0 == -1));
# 139 "../HPL_pdlaswp01T.c"
  if (equil___0 == -1) {
    __CrestBranch(19113, 6867, 1);
# 139 "../HPL_pdlaswp01T.c"
    mem_25 = PANEL->algo;
    __CrestLoad(19115, (unsigned long )(& mem_25->equil), (long long )mem_25->equil);
    __CrestStore(19116, (unsigned long )(& equil___0));
# 139 "../HPL_pdlaswp01T.c"
    equil___0 = mem_25->equil;
  } else {
    __CrestBranch(19114, 6868, 0);

  }
  }
# 143 "../HPL_pdlaswp01T.c"
  mem_26 = PANEL->grid;
  __CrestLoad(19117, (unsigned long )(& mem_26->nprow), (long long )mem_26->nprow);
  __CrestStore(19118, (unsigned long )(& nprow));
# 143 "../HPL_pdlaswp01T.c"
  nprow = mem_26->nprow;
# 143 "../HPL_pdlaswp01T.c"
  mem_27 = PANEL->grid;
  __CrestLoad(19119, (unsigned long )(& mem_27->myrow), (long long )mem_27->myrow);
  __CrestStore(19120, (unsigned long )(& myrow));
# 143 "../HPL_pdlaswp01T.c"
  myrow = mem_27->myrow;
# 144 "../HPL_pdlaswp01T.c"
  A = PANEL->A;
# 144 "../HPL_pdlaswp01T.c"
  U = PANEL->U;
# 144 "../HPL_pdlaswp01T.c"
  iflag = PANEL->IWORK;
  __CrestLoad(19121, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(19122, (unsigned long )(& lda));
# 145 "../HPL_pdlaswp01T.c"
  lda = PANEL->lda;
  __CrestLoad(19123, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
  __CrestStore(19124, (unsigned long )(& icurrow));
# 145 "../HPL_pdlaswp01T.c"
  icurrow = PANEL->prow;
  __CrestLoad(19127, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(19126, (unsigned long )0, (long long )1);
  __CrestApply2(19125, 8, (long long )((unsigned int )jb << 1));
  __CrestStore(19128, (unsigned long )(& k));
# 154 "../HPL_pdlaswp01T.c"
  k = (int )((unsigned int )jb << 1);
# 154 "../HPL_pdlaswp01T.c"
  ipl = iflag + 1;
# 154 "../HPL_pdlaswp01T.c"
  ipID = ipl + 1;
# 155 "../HPL_pdlaswp01T.c"
  ipA = ipID + ((unsigned int )k << 1);
# 155 "../HPL_pdlaswp01T.c"
  lindxA = ipA + 1;
# 156 "../HPL_pdlaswp01T.c"
  lindxAU = lindxA + k;
# 156 "../HPL_pdlaswp01T.c"
  iplen = lindxAU + k;
# 156 "../HPL_pdlaswp01T.c"
  ipmap = (iplen + nprow) + 1;
# 157 "../HPL_pdlaswp01T.c"
  ipmapm1 = ipmap + nprow;
# 157 "../HPL_pdlaswp01T.c"
  permU = ipmapm1 + nprow;
# 157 "../HPL_pdlaswp01T.c"
  iwork = permU + jb;
  {
  __CrestLoad(19131, (unsigned long )iflag, (long long )*iflag);
  __CrestLoad(19130, (unsigned long )0, (long long )-1);
  __CrestApply2(19129, 12, (long long )(*iflag == -1));
# 159 "../HPL_pdlaswp01T.c"
  if (*iflag == -1) {
    __CrestBranch(19132, 6871, 1);
# 161 "../HPL_pdlaswp01T.c"
    HPL_pipid(PANEL, ipl, ipID);
    __CrestClearStack(19134);
    __CrestLoad(19135, (unsigned long )ipl, (long long )*ipl);
# 162 "../HPL_pdlaswp01T.c"
    HPL_plindx1(PANEL, (int const )*ipl, (int const *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
    __CrestClearStack(19136);
    __CrestLoad(19137, (unsigned long )0, (long long )1);
    __CrestStore(19138, (unsigned long )iflag);
# 164 "../HPL_pdlaswp01T.c"
    *iflag = 1;
  } else {
    __CrestBranch(19133, 6872, 0);
    {
    __CrestLoad(19141, (unsigned long )iflag, (long long )*iflag);
    __CrestLoad(19140, (unsigned long )0, (long long )0);
    __CrestApply2(19139, 12, (long long )(*iflag == 0));
# 166 "../HPL_pdlaswp01T.c"
    if (*iflag == 0) {
      __CrestBranch(19142, 6873, 1);
      __CrestLoad(19144, (unsigned long )ipl, (long long )*ipl);
# 168 "../HPL_pdlaswp01T.c"
      HPL_plindx1(PANEL, (int const )*ipl, (int const *)ipID, ipA, lindxA, lindxAU,
                  iplen, ipmap, ipmapm1, permU, iwork);
      __CrestClearStack(19145);
      __CrestLoad(19146, (unsigned long )0, (long long )1);
      __CrestStore(19147, (unsigned long )iflag);
# 170 "../HPL_pdlaswp01T.c"
      *iflag = 1;
    } else {
      __CrestBranch(19143, 6874, 0);
      {
      __CrestLoad(19150, (unsigned long )iflag, (long long )*iflag);
      __CrestLoad(19149, (unsigned long )0, (long long )1);
      __CrestApply2(19148, 12, (long long )(*iflag == 1));
# 172 "../HPL_pdlaswp01T.c"
      if (*iflag == 1) {
        __CrestBranch(19151, 6875, 1);
        {
        __CrestLoad(19155, (unsigned long )(& equil___0), (long long )equil___0);
        __CrestLoad(19154, (unsigned long )0, (long long )0);
        __CrestApply2(19153, 13, (long long )(equil___0 != 0));
# 172 "../HPL_pdlaswp01T.c"
        if (equil___0 != 0) {
          __CrestBranch(19156, 6876, 1);
          __CrestLoad(19158, (unsigned long )ipl, (long long )*ipl);
# 174 "../HPL_pdlaswp01T.c"
          HPL_plindx10(PANEL, (int const )*ipl, (int const *)ipID, iplen, ipmap,
                       ipmapm1);
          __CrestClearStack(19159);
          __CrestLoad(19160, (unsigned long )0, (long long )1);
          __CrestStore(19161, (unsigned long )iflag);
# 175 "../HPL_pdlaswp01T.c"
          *iflag = 1;
        } else {
          __CrestBranch(19157, 6877, 0);

        }
        }
      } else {
        __CrestBranch(19152, 6878, 0);

      }
      }
    }
    }
  }
  }
  {
  __CrestLoad(19164, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(19163, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(19162, 12, (long long )(myrow == icurrow));
# 180 "../HPL_pdlaswp01T.c"
  if (myrow == icurrow) {
    __CrestBranch(19165, 6880, 1);
    __CrestLoad(19167, (unsigned long )ipA, (long long )*ipA);
    __CrestLoad(19168, (unsigned long )(& n), (long long )n);
    __CrestLoad(19169, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(19170, (unsigned long )(& n), (long long )n);
# 181 "../HPL_pdlaswp01T.c"
    HPL_dlaswp01T((int const )*ipA, (int const )n, A, (int const )lda, U, (int const )n,
                  (int const *)lindxA, (int const *)lindxAU);
    __CrestClearStack(19171);
  } else {
    __CrestBranch(19166, 6881, 0);

  }
  }
  __CrestLoad(19172, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
  __CrestLoad(19173, (unsigned long )(& n), (long long )n);
  __CrestLoad(19174, (unsigned long )(& n), (long long )n);
  __CrestLoad(19175, (unsigned long )0, (long long )((int const )0));
# 185 "../HPL_pdlaswp01T.c"
  HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE const )142, (int const )n, U,
              (int const )n, (int const )0, (int const *)iplen, (int const *)ipmap,
              (int const *)ipmapm1);
  __CrestClearStack(19176);
  {
  __CrestLoad(19179, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(19178, (unsigned long )(& icurrow), (long long )icurrow);
  __CrestApply2(19177, 13, (long long )(myrow != icurrow));
# 190 "../HPL_pdlaswp01T.c"
  if (myrow != icurrow) {
    __CrestBranch(19180, 6884, 1);
# 192 "../HPL_pdlaswp01T.c"
    mem_28 = ipmapm1 + myrow;
    __CrestLoad(19182, (unsigned long )mem_28, (long long )*mem_28);
    __CrestStore(19183, (unsigned long )(& k));
# 192 "../HPL_pdlaswp01T.c"
    k = *mem_28;
# 193 "../HPL_pdlaswp01T.c"
    mem_29 = iplen + (k + 1);
# 193 "../HPL_pdlaswp01T.c"
    mem_30 = iplen + k;
# 193 "../HPL_pdlaswp01T.c"
    mem_31 = iplen + k;
    __CrestLoad(19186, (unsigned long )mem_29, (long long )*mem_29);
    __CrestLoad(19185, (unsigned long )mem_30, (long long )*mem_30);
    __CrestApply2(19184, 1, (long long )(*mem_29 - *mem_30));
    __CrestLoad(19187, (unsigned long )(& n), (long long )n);
    __CrestLoad(19188, (unsigned long )(& lda), (long long )lda);
    __CrestLoad(19189, (unsigned long )(& n), (long long )n);
# 193 "../HPL_pdlaswp01T.c"
    HPL_dlaswp06T((int const )(*mem_29 - *mem_30), (int const )n, A, (int const )lda,
                  (U + 0) + *mem_31 * n, (int const )n, (int const *)lindxA);
    __CrestClearStack(19190);
  } else {
    __CrestBranch(19181, 6885, 0);

  }
  }
  {
  __CrestLoad(19193, (unsigned long )(& equil___0), (long long )equil___0);
  __CrestLoad(19192, (unsigned long )0, (long long )0);
  __CrestApply2(19191, 13, (long long )(equil___0 != 0));
# 199 "../HPL_pdlaswp01T.c"
  if (equil___0 != 0) {
    __CrestBranch(19194, 6887, 1);
    __CrestLoad(19196, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
    __CrestLoad(19197, (unsigned long )(& n), (long long )n);
    __CrestLoad(19198, (unsigned long )(& n), (long long )n);
# 200 "../HPL_pdlaswp01T.c"
    HPL_equil(PBCST, IFLAG, PANEL, (enum HPL_TRANS const )112, (int const )n,
              U, (int const )n, iplen, (int const *)ipmap, (int const *)ipmapm1,
              iwork);
    __CrestClearStack(19199);
  } else {
    __CrestBranch(19195, 6888, 0);

  }
  }
  __CrestLoad(19200, (unsigned long )(& n), (long long )n);
  __CrestLoad(19201, (unsigned long )(& n), (long long )n);
# 205 "../HPL_pdlaswp01T.c"
  HPL_rollT(PBCST, IFLAG, PANEL, (int const )n, U, (int const )n, (int const *)iplen,
            (int const *)ipmap, (int const *)ipmapm1);
  __CrestClearStack(19202);
  __CrestLoad(19203, (unsigned long )(& n), (long long )n);
  __CrestLoad(19204, (unsigned long )(& jb), (long long )jb);
  __CrestLoad(19205, (unsigned long )(& n), (long long )n);
# 209 "../HPL_pdlaswp01T.c"
  HPL_dlaswp10N((int const )n, (int const )jb, U, (int const )n, (int const *)permU);
  __CrestClearStack(19206);

  return_label:
  {
  __CrestReturn(19207);
# 53 "../HPL_pdlaswp01T.c"
  return;
  }
}
}
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 110 "../HPL_pdupdateNN.c"
static int tswap = 0;
# 111 "../HPL_pdupdateNN.c"
static HPL_T_SWAP fswap = (HPL_T_SWAP )499;
# 53 "../HPL_pdupdateNN.c"
void HPL_pdupdateNN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;
  struct HPL_S_grid *mem_24 ;
  int *mem_25 ;
  double *mem_26 ;
  struct HPL_S_palg *mem_27 ;
  struct HPL_S_palg *mem_28 ;
  struct HPL_S_grid *mem_29 ;

  {
  __CrestCall(19209, 109);
  __CrestStore(19208, (unsigned long )(& NN));
  __CrestLoad(19210, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(19211, (unsigned long )(& nb));
# 119 "../HPL_pdupdateNN.c"
  nb = PANEL->nb;
  __CrestLoad(19212, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(19213, (unsigned long )(& jb));
# 119 "../HPL_pdupdateNN.c"
  jb = PANEL->jb;
  __CrestLoad(19214, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestStore(19215, (unsigned long )(& n));
# 119 "../HPL_pdupdateNN.c"
  n = PANEL->nq;
  __CrestLoad(19216, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(19217, (unsigned long )(& lda));
# 119 "../HPL_pdupdateNN.c"
  lda = PANEL->lda;
  {
  __CrestLoad(19220, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(19219, (unsigned long )0, (long long )0);
  __CrestApply2(19218, 17, (long long )(NN >= 0));
# 120 "../HPL_pdupdateNN.c"
  if (NN >= 0) {
    __CrestBranch(19221, 6894, 1);
    {
    __CrestLoad(19225, (unsigned long )(& NN), (long long )NN);
    __CrestLoad(19224, (unsigned long )(& n), (long long )n);
    __CrestApply2(19223, 16, (long long )(NN < (int const )n));
# 120 "../HPL_pdupdateNN.c"
    if (NN < (int const )n) {
      __CrestBranch(19226, 6895, 1);
      __CrestLoad(19228, (unsigned long )(& NN), (long long )NN);
      __CrestStore(19229, (unsigned long )(& n));
# 120 "../HPL_pdupdateNN.c"
      n = (int )NN;
    } else {
      __CrestBranch(19227, 6896, 0);
      __CrestLoad(19230, (unsigned long )(& n), (long long )n);
      __CrestStore(19231, (unsigned long )(& n));
# 120 "../HPL_pdupdateNN.c"
      n = n;
    }
    }
  } else {
    __CrestBranch(19222, 6897, 0);

  }
  }
  {
  __CrestLoad(19234, (unsigned long )(& n), (long long )n);
  __CrestLoad(19233, (unsigned long )0, (long long )0);
  __CrestApply2(19232, 15, (long long )(n <= 0));
# 124 "../HPL_pdupdateNN.c"
  if (n <= 0) {
    __CrestBranch(19235, 6899, 1);
# 124 "../HPL_pdupdateNN.c"
    goto _L;
  } else {
    __CrestBranch(19236, 6900, 0);
    {
    __CrestLoad(19239, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(19238, (unsigned long )0, (long long )0);
    __CrestApply2(19237, 15, (long long )(jb <= 0));
# 124 "../HPL_pdupdateNN.c"
    if (jb <= 0) {
      __CrestBranch(19240, 6901, 1);
      _L:
      {
      __CrestLoad(19244, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
      __CrestLoad(19243, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(19242, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 126 "../HPL_pdupdateNN.c"
      if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
        __CrestBranch(19245, 6902, 1);
        {
# 128 "../HPL_pdupdateNN.c"
        while (1) {
          while_continue: ;
# 128 "../HPL_pdupdateNN.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(19247);
          {
          __CrestLoad(19250, (unsigned long )IFLAG, (long long )*IFLAG);
          __CrestLoad(19249, (unsigned long )0, (long long )1);
          __CrestApply2(19248, 12, (long long )(*IFLAG == 1));
# 128 "../HPL_pdupdateNN.c"
          if (*IFLAG == 1) {
            __CrestBranch(19251, 6907, 1);
# 128 "../HPL_pdupdateNN.c"
            goto while_break;
          } else {
            __CrestBranch(19252, 6908, 0);

          }
          }
        }
        while_break: ;
        }
      } else {
        __CrestBranch(19246, 6910, 0);

      }
      }
# 134 "../HPL_pdupdateNN.c"
      goto return_label;
    } else {
      __CrestBranch(19241, 6913, 0);

    }
    }
  }
  }
# 139 "../HPL_pdupdateNN.c"
  HPL_bcast(PBCST, & test);
  __CrestClearStack(19253);
  {
# 143 "../HPL_pdupdateNN.c"
  mem_24 = PANEL->grid;
  {
  __CrestLoad(19256, (unsigned long )(& mem_24->nprow), (long long )mem_24->nprow);
  __CrestLoad(19255, (unsigned long )0, (long long )1);
  __CrestApply2(19254, 12, (long long )(mem_24->nprow == 1));
# 143 "../HPL_pdupdateNN.c"
  if (mem_24->nprow == 1) {
    __CrestBranch(19257, 6918, 1);
# 145 "../HPL_pdupdateNN.c"
    Aptr = PANEL->A;
# 145 "../HPL_pdupdateNN.c"
    L2ptr = PANEL->L2;
# 145 "../HPL_pdupdateNN.c"
    L1ptr = PANEL->L1;
    __CrestLoad(19259, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(19260, (unsigned long )(& ldl2));
# 146 "../HPL_pdupdateNN.c"
    ldl2 = PANEL->ldl2;
# 146 "../HPL_pdupdateNN.c"
    dpiv = PANEL->DPIV;
# 146 "../HPL_pdupdateNN.c"
    ipiv = PANEL->IWORK;
    __CrestLoad(19263, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(19262, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(19261, 1, (long long )(PANEL->mp - jb));
    __CrestStore(19264, (unsigned long )(& mp));
# 147 "../HPL_pdupdateNN.c"
    mp = PANEL->mp - jb;
    __CrestLoad(19265, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
    __CrestStore(19266, (unsigned long )(& iroff));
# 147 "../HPL_pdupdateNN.c"
    iroff = PANEL->ii;
    __CrestLoad(19267, (unsigned long )0, (long long )0);
    __CrestStore(19268, (unsigned long )(& nq0));
# 147 "../HPL_pdupdateNN.c"
    nq0 = 0;
    __CrestLoad(19269, (unsigned long )0, (long long )0);
    __CrestStore(19270, (unsigned long )(& i));
# 164 "../HPL_pdupdateNN.c"
    i = 0;
    {
# 164 "../HPL_pdupdateNN.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(19273, (unsigned long )(& i), (long long )i);
      __CrestLoad(19272, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(19271, 16, (long long )(i < jb));
# 164 "../HPL_pdupdateNN.c"
      if (i < jb) {
        __CrestBranch(19274, 6923, 1);

      } else {
        __CrestBranch(19275, 6924, 0);
# 164 "../HPL_pdupdateNN.c"
        goto while_break___0;
      }
      }
# 164 "../HPL_pdupdateNN.c"
      mem_25 = ipiv + i;
# 164 "../HPL_pdupdateNN.c"
      mem_26 = dpiv + i;
      __CrestLoad(19278, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(19277, (unsigned long )(& iroff), (long long )iroff);
      __CrestApply2(19276, 1, (long long )((int )*mem_26 - iroff));
      __CrestStore(19279, (unsigned long )mem_25);
# 164 "../HPL_pdupdateNN.c"
      *mem_25 = (int )*mem_26 - iroff;
      __CrestLoad(19282, (unsigned long )(& i), (long long )i);
      __CrestLoad(19281, (unsigned long )0, (long long )1);
      __CrestApply2(19280, 0, (long long )(i + 1));
      __CrestStore(19283, (unsigned long )(& i));
# 164 "../HPL_pdupdateNN.c"
      i ++;
    }
    while_break___0: ;
    }
    {
# 170 "../HPL_pdupdateNN.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(19286, (unsigned long )(& test), (long long )test);
      __CrestLoad(19285, (unsigned long )0, (long long )2);
      __CrestApply2(19284, 12, (long long )(test == 2));
# 170 "../HPL_pdupdateNN.c"
      if (test == 2) {
        __CrestBranch(19287, 6931, 1);

      } else {
        __CrestBranch(19288, 6932, 0);
# 170 "../HPL_pdupdateNN.c"
        goto while_break___1;
      }
      }
      __CrestLoad(19291, (unsigned long )(& n), (long long )n);
      __CrestLoad(19290, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(19289, 1, (long long )(n - nq0));
      __CrestStore(19292, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNN.c"
      nn = n - nq0;
      {
      __CrestLoad(19295, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(19294, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19293, 16, (long long )(nb < nn));
# 172 "../HPL_pdupdateNN.c"
      if (nb < nn) {
        __CrestBranch(19296, 6935, 1);
        __CrestLoad(19298, (unsigned long )(& nb), (long long )nb);
        __CrestStore(19299, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNN.c"
        nn = nb;
      } else {
        __CrestBranch(19297, 6936, 0);
        __CrestLoad(19300, (unsigned long )(& nn), (long long )nn);
        __CrestStore(19301, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNN.c"
        nn = nn;
      }
      }
      __CrestLoad(19302, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19303, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19304, (unsigned long )(& lda), (long long )lda);
# 181 "../HPL_pdupdateNN.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(19305);
      __CrestLoad(19306, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19307, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19308, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19309, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19310, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19311, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19312, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19313, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19314, (unsigned long )(& lda), (long long )lda);
# 183 "../HPL_pdupdateNN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(19315);
      __CrestLoad(19316, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19317, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19318, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19319, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(19320, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19321, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19322, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(19323, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(19324, (unsigned long )(& lda), (long long )lda);
# 200 "../HPL_pdupdateNN.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(19325);
# 204 "../HPL_pdupdateNN.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(19328, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(19327, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19326, 0, (long long )(nq0 + nn));
      __CrestStore(19329, (unsigned long )(& nq0));
# 204 "../HPL_pdupdateNN.c"
      nq0 += nn;
# 206 "../HPL_pdupdateNN.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(19330);
    }
    while_break___1: ;
    }
    __CrestLoad(19333, (unsigned long )(& n), (long long )n);
    __CrestLoad(19332, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(19331, 1, (long long )(n - nq0));
    __CrestStore(19334, (unsigned long )(& nn));
# 211 "../HPL_pdupdateNN.c"
    nn = n - nq0;
    {
    __CrestLoad(19337, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(19336, (unsigned long )0, (long long )0);
    __CrestApply2(19335, 14, (long long )(nn > 0));
# 211 "../HPL_pdupdateNN.c"
    if (nn > 0) {
      __CrestBranch(19338, 6941, 1);
      __CrestLoad(19340, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19341, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19342, (unsigned long )(& lda), (long long )lda);
# 218 "../HPL_pdupdateNN.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(19343);
      __CrestLoad(19344, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19345, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19346, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19347, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19348, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19349, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19350, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19351, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19352, (unsigned long )(& lda), (long long )lda);
# 220 "../HPL_pdupdateNN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(19353);
      __CrestLoad(19354, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19355, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19356, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19357, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(19358, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19359, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19360, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(19361, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(19362, (unsigned long )(& lda), (long long )lda);
# 237 "../HPL_pdupdateNN.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(19363);
    } else {
      __CrestBranch(19339, 6942, 0);

    }
    }
  } else {
    __CrestBranch(19258, 6943, 0);
    {
    __CrestLoad(19366, (unsigned long )(& fswap), (long long )fswap);
    __CrestLoad(19365, (unsigned long )0, (long long )499U);
    __CrestApply2(19364, 12, (long long )((unsigned int )fswap == 499U));
# 264 "../HPL_pdupdateNN.c"
    if ((unsigned int )fswap == 499U) {
      __CrestBranch(19367, 6944, 1);
# 265 "../HPL_pdupdateNN.c"
      mem_27 = PANEL->algo;
      __CrestLoad(19369, (unsigned long )(& mem_27->fswap), (long long )mem_27->fswap);
      __CrestStore(19370, (unsigned long )(& fswap));
# 265 "../HPL_pdupdateNN.c"
      fswap = mem_27->fswap;
# 265 "../HPL_pdupdateNN.c"
      mem_28 = PANEL->algo;
      __CrestLoad(19371, (unsigned long )(& mem_28->fsthr), (long long )mem_28->fsthr);
      __CrestStore(19372, (unsigned long )(& tswap));
# 265 "../HPL_pdupdateNN.c"
      tswap = mem_28->fsthr;
    } else {
      __CrestBranch(19368, 6945, 0);

    }
    }
    {
    __CrestLoad(19375, (unsigned long )(& fswap), (long long )fswap);
    __CrestLoad(19374, (unsigned long )0, (long long )452U);
    __CrestApply2(19373, 12, (long long )((unsigned int )fswap == 452U));
# 267 "../HPL_pdupdateNN.c"
    if ((unsigned int )fswap == 452U) {
      __CrestBranch(19376, 6947, 1);
      __CrestLoad(19378, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateNN.c"
      HPL_pdlaswp01N(PBCST, & test, PANEL, (int const )n);
      __CrestClearStack(19379);
    } else {
      __CrestBranch(19377, 6948, 0);
      {
      __CrestLoad(19382, (unsigned long )(& fswap), (long long )fswap);
      __CrestLoad(19381, (unsigned long )0, (long long )453U);
      __CrestApply2(19380, 12, (long long )((unsigned int )fswap == 453U));
# 267 "../HPL_pdupdateNN.c"
      if ((unsigned int )fswap == 453U) {
        __CrestBranch(19383, 6949, 1);
        {
        __CrestLoad(19387, (unsigned long )(& n), (long long )n);
        __CrestLoad(19386, (unsigned long )(& tswap), (long long )tswap);
        __CrestApply2(19385, 14, (long long )(n > tswap));
# 267 "../HPL_pdupdateNN.c"
        if (n > tswap) {
          __CrestBranch(19388, 6950, 1);
          __CrestLoad(19390, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateNN.c"
          HPL_pdlaswp01N(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(19391);
        } else {
          __CrestBranch(19389, 6951, 0);
          __CrestLoad(19392, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateNN.c"
          HPL_pdlaswp00N(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(19393);
        }
        }
      } else {
        __CrestBranch(19384, 6952, 0);
        __CrestLoad(19394, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateNN.c"
        HPL_pdlaswp00N(PBCST, & test, PANEL, (int const )n);
        __CrestClearStack(19395);
      }
      }
    }
    }
    __CrestLoad(19396, (unsigned long )0, (long long )0);
    __CrestStore(19397, (unsigned long )(& nq0));
# 275 "../HPL_pdupdateNN.c"
    nq0 = 0;
    {
# 275 "../HPL_pdupdateNN.c"
    mem_29 = PANEL->grid;
    {
    __CrestLoad(19400, (unsigned long )(& mem_29->myrow), (long long )mem_29->myrow);
    __CrestLoad(19399, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(19398, 12, (long long )(mem_29->myrow == PANEL->prow));
# 275 "../HPL_pdupdateNN.c"
    if (mem_29->myrow == PANEL->prow) {
      __CrestBranch(19401, 6957, 1);
      __CrestLoad(19403, (unsigned long )0, (long long )1);
      __CrestStore(19404, (unsigned long )(& curr));
# 275 "../HPL_pdupdateNN.c"
      curr = 1;
    } else {
      __CrestBranch(19402, 6958, 0);
      __CrestLoad(19405, (unsigned long )0, (long long )0);
      __CrestStore(19406, (unsigned long )(& curr));
# 275 "../HPL_pdupdateNN.c"
      curr = 0;
    }
    }
    }
# 276 "../HPL_pdupdateNN.c"
    Aptr = PANEL->A;
# 276 "../HPL_pdupdateNN.c"
    L2ptr = PANEL->L2;
# 276 "../HPL_pdupdateNN.c"
    L1ptr = PANEL->L1;
# 277 "../HPL_pdupdateNN.c"
    Uptr = PANEL->U;
    __CrestLoad(19407, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(19408, (unsigned long )(& ldl2));
# 277 "../HPL_pdupdateNN.c"
    ldl2 = PANEL->ldl2;
    {
    __CrestLoad(19411, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(19410, (unsigned long )0, (long long )0);
    __CrestApply2(19409, 13, (long long )(curr != 0));
# 278 "../HPL_pdupdateNN.c"
    if (curr != 0) {
      __CrestBranch(19412, 6961, 1);
      __CrestLoad(19414, (unsigned long )(& jb), (long long )jb);
      __CrestStore(19415, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateNN.c"
      tmp = jb;
    } else {
      __CrestBranch(19413, 6962, 0);
      __CrestLoad(19416, (unsigned long )0, (long long )0);
      __CrestStore(19417, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateNN.c"
      tmp = 0;
    }
    }
    __CrestLoad(19420, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(19419, (unsigned long )(& tmp), (long long )tmp);
    __CrestApply2(19418, 1, (long long )(PANEL->mp - tmp));
    __CrestStore(19421, (unsigned long )(& mp));
# 278 "../HPL_pdupdateNN.c"
    mp = PANEL->mp - tmp;
    {
# 300 "../HPL_pdupdateNN.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(19424, (unsigned long )(& test), (long long )test);
      __CrestLoad(19423, (unsigned long )0, (long long )2);
      __CrestApply2(19422, 12, (long long )(test == 2));
# 300 "../HPL_pdupdateNN.c"
      if (test == 2) {
        __CrestBranch(19425, 6968, 1);

      } else {
        __CrestBranch(19426, 6969, 0);
# 300 "../HPL_pdupdateNN.c"
        goto while_break___2;
      }
      }
      __CrestLoad(19429, (unsigned long )(& n), (long long )n);
      __CrestLoad(19428, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(19427, 1, (long long )(n - nq0));
      __CrestStore(19430, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNN.c"
      nn = n - nq0;
      {
      __CrestLoad(19433, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(19432, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19431, 16, (long long )(nb < nn));
# 302 "../HPL_pdupdateNN.c"
      if (nb < nn) {
        __CrestBranch(19434, 6972, 1);
        __CrestLoad(19436, (unsigned long )(& nb), (long long )nb);
        __CrestStore(19437, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNN.c"
        nn = nb;
      } else {
        __CrestBranch(19435, 6973, 0);
        __CrestLoad(19438, (unsigned long )(& nn), (long long )nn);
        __CrestStore(19439, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNN.c"
        nn = nn;
      }
      }
      __CrestLoad(19440, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19441, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19442, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19443, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19444, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19445, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19446, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19447, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19448, (unsigned long )(& jb), (long long )jb);
# 304 "../HPL_pdupdateNN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )jb);
      __CrestClearStack(19449);
      {
      __CrestLoad(19452, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(19451, (unsigned long )0, (long long )0);
      __CrestApply2(19450, 13, (long long )(curr != 0));
# 306 "../HPL_pdupdateNN.c"
      if (curr != 0) {
        __CrestBranch(19453, 6976, 1);
        __CrestLoad(19455, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19456, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19457, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19458, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19459, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19460, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19461, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19462, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19463, (unsigned long )(& lda), (long long )lda);
# 323 "../HPL_pdupdateNN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(19464);
        __CrestLoad(19465, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19466, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19467, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19468, (unsigned long )(& lda), (long long )lda);
# 327 "../HPL_pdupdateNN.c"
        HPL_dlacpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )jb,
                   Aptr, (int const )lda);
        __CrestClearStack(19469);
      } else {
        __CrestBranch(19454, 6977, 0);
        __CrestLoad(19470, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19471, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19472, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19473, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19474, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19475, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19476, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19477, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19478, (unsigned long )(& lda), (long long )lda);
# 346 "../HPL_pdupdateNN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(19479);
      }
      }
# 351 "../HPL_pdupdateNN.c"
      Uptr = (Uptr + 0) + nn * jb;
# 352 "../HPL_pdupdateNN.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(19482, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(19481, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19480, 0, (long long )(nq0 + nn));
      __CrestStore(19483, (unsigned long )(& nq0));
# 352 "../HPL_pdupdateNN.c"
      nq0 += nn;
# 354 "../HPL_pdupdateNN.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(19484);
    }
    while_break___2: ;
    }
    __CrestLoad(19487, (unsigned long )(& n), (long long )n);
    __CrestLoad(19486, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(19485, 1, (long long )(n - nq0));
    __CrestStore(19488, (unsigned long )(& nn));
# 359 "../HPL_pdupdateNN.c"
    nn = n - nq0;
    {
    __CrestLoad(19491, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(19490, (unsigned long )0, (long long )0);
    __CrestApply2(19489, 14, (long long )(nn > 0));
# 359 "../HPL_pdupdateNN.c"
    if (nn > 0) {
      __CrestBranch(19492, 6982, 1);
      __CrestLoad(19494, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19495, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19496, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19497, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19498, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19499, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19500, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19501, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19502, (unsigned long )(& jb), (long long )jb);
# 361 "../HPL_pdupdateNN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )jb);
      __CrestClearStack(19503);
      {
      __CrestLoad(19506, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(19505, (unsigned long )0, (long long )0);
      __CrestApply2(19504, 13, (long long )(curr != 0));
# 364 "../HPL_pdupdateNN.c"
      if (curr != 0) {
        __CrestBranch(19507, 6984, 1);
        __CrestLoad(19509, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19510, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19511, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19512, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19513, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19514, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19515, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19516, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19517, (unsigned long )(& lda), (long long )lda);
# 381 "../HPL_pdupdateNN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(19518);
        __CrestLoad(19519, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19520, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19521, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19522, (unsigned long )(& lda), (long long )lda);
# 385 "../HPL_pdupdateNN.c"
        HPL_dlacpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )jb,
                   Aptr, (int const )lda);
        __CrestClearStack(19523);
      } else {
        __CrestBranch(19508, 6985, 0);
        __CrestLoad(19524, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19525, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19526, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19527, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19528, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19529, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19530, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19531, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19532, (unsigned long )(& lda), (long long )lda);
# 404 "../HPL_pdupdateNN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(19533);
      }
      }
    } else {
      __CrestBranch(19493, 6986, 0);

    }
    }
  }
  }
  }
# 430 "../HPL_pdupdateNN.c"
  PANEL->A = (PANEL->A + 0) + n * lda;
  __CrestLoad(19536, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestLoad(19535, (unsigned long )(& n), (long long )n);
  __CrestApply2(19534, 1, (long long )(PANEL->nq - n));
  __CrestStore(19537, (unsigned long )(& PANEL->nq));
# 430 "../HPL_pdupdateNN.c"
  PANEL->nq -= n;
  __CrestLoad(19540, (unsigned long )(& PANEL->jj), (long long )PANEL->jj);
  __CrestLoad(19539, (unsigned long )(& n), (long long )n);
  __CrestApply2(19538, 0, (long long )(PANEL->jj + n));
  __CrestStore(19541, (unsigned long )(& PANEL->jj));
# 430 "../HPL_pdupdateNN.c"
  PANEL->jj += n;
  {
  __CrestLoad(19544, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
  __CrestLoad(19543, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(19542, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 435 "../HPL_pdupdateNN.c"
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
    __CrestBranch(19545, 6989, 1);
    __CrestLoad(19547, (unsigned long )(& test), (long long )test);
    __CrestStore(19548, (unsigned long )IFLAG);
# 435 "../HPL_pdupdateNN.c"
    *IFLAG = test;
  } else {
    __CrestBranch(19546, 6990, 0);

  }
  }

  return_label:
  {
  __CrestReturn(19549);
# 53 "../HPL_pdupdateNN.c"
  return;
  }
}
}
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 110 "../HPL_pdupdateNT.c"
static int tswap___0 = 0;
# 111 "../HPL_pdupdateNT.c"
static HPL_T_SWAP fswap___0 = (HPL_T_SWAP )499;
# 53 "../HPL_pdupdateNT.c"
void HPL_pdupdateNT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;
  struct HPL_S_grid *mem_24 ;
  int *mem_25 ;
  double *mem_26 ;
  struct HPL_S_palg *mem_27 ;
  struct HPL_S_palg *mem_28 ;
  struct HPL_S_grid *mem_29 ;

  {
  __CrestCall(19551, 110);
  __CrestStore(19550, (unsigned long )(& NN));
  __CrestLoad(19552, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(19553, (unsigned long )(& nb));
# 119 "../HPL_pdupdateNT.c"
  nb = PANEL->nb;
  __CrestLoad(19554, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(19555, (unsigned long )(& jb));
# 119 "../HPL_pdupdateNT.c"
  jb = PANEL->jb;
  __CrestLoad(19556, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestStore(19557, (unsigned long )(& n));
# 119 "../HPL_pdupdateNT.c"
  n = PANEL->nq;
  __CrestLoad(19558, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(19559, (unsigned long )(& lda));
# 119 "../HPL_pdupdateNT.c"
  lda = PANEL->lda;
  {
  __CrestLoad(19562, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(19561, (unsigned long )0, (long long )0);
  __CrestApply2(19560, 17, (long long )(NN >= 0));
# 120 "../HPL_pdupdateNT.c"
  if (NN >= 0) {
    __CrestBranch(19563, 6995, 1);
    {
    __CrestLoad(19567, (unsigned long )(& NN), (long long )NN);
    __CrestLoad(19566, (unsigned long )(& n), (long long )n);
    __CrestApply2(19565, 16, (long long )(NN < (int const )n));
# 120 "../HPL_pdupdateNT.c"
    if (NN < (int const )n) {
      __CrestBranch(19568, 6996, 1);
      __CrestLoad(19570, (unsigned long )(& NN), (long long )NN);
      __CrestStore(19571, (unsigned long )(& n));
# 120 "../HPL_pdupdateNT.c"
      n = (int )NN;
    } else {
      __CrestBranch(19569, 6997, 0);
      __CrestLoad(19572, (unsigned long )(& n), (long long )n);
      __CrestStore(19573, (unsigned long )(& n));
# 120 "../HPL_pdupdateNT.c"
      n = n;
    }
    }
  } else {
    __CrestBranch(19564, 6998, 0);

  }
  }
  {
  __CrestLoad(19576, (unsigned long )(& n), (long long )n);
  __CrestLoad(19575, (unsigned long )0, (long long )0);
  __CrestApply2(19574, 15, (long long )(n <= 0));
# 124 "../HPL_pdupdateNT.c"
  if (n <= 0) {
    __CrestBranch(19577, 7000, 1);
# 124 "../HPL_pdupdateNT.c"
    goto _L;
  } else {
    __CrestBranch(19578, 7001, 0);
    {
    __CrestLoad(19581, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(19580, (unsigned long )0, (long long )0);
    __CrestApply2(19579, 15, (long long )(jb <= 0));
# 124 "../HPL_pdupdateNT.c"
    if (jb <= 0) {
      __CrestBranch(19582, 7002, 1);
      _L:
      {
      __CrestLoad(19586, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
      __CrestLoad(19585, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(19584, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 126 "../HPL_pdupdateNT.c"
      if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
        __CrestBranch(19587, 7003, 1);
        {
# 128 "../HPL_pdupdateNT.c"
        while (1) {
          while_continue: ;
# 128 "../HPL_pdupdateNT.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(19589);
          {
          __CrestLoad(19592, (unsigned long )IFLAG, (long long )*IFLAG);
          __CrestLoad(19591, (unsigned long )0, (long long )1);
          __CrestApply2(19590, 12, (long long )(*IFLAG == 1));
# 128 "../HPL_pdupdateNT.c"
          if (*IFLAG == 1) {
            __CrestBranch(19593, 7008, 1);
# 128 "../HPL_pdupdateNT.c"
            goto while_break;
          } else {
            __CrestBranch(19594, 7009, 0);

          }
          }
        }
        while_break: ;
        }
      } else {
        __CrestBranch(19588, 7011, 0);

      }
      }
# 134 "../HPL_pdupdateNT.c"
      goto return_label;
    } else {
      __CrestBranch(19583, 7014, 0);

    }
    }
  }
  }
# 139 "../HPL_pdupdateNT.c"
  HPL_bcast(PBCST, & test);
  __CrestClearStack(19595);
  {
# 143 "../HPL_pdupdateNT.c"
  mem_24 = PANEL->grid;
  {
  __CrestLoad(19598, (unsigned long )(& mem_24->nprow), (long long )mem_24->nprow);
  __CrestLoad(19597, (unsigned long )0, (long long )1);
  __CrestApply2(19596, 12, (long long )(mem_24->nprow == 1));
# 143 "../HPL_pdupdateNT.c"
  if (mem_24->nprow == 1) {
    __CrestBranch(19599, 7019, 1);
# 145 "../HPL_pdupdateNT.c"
    Aptr = PANEL->A;
# 145 "../HPL_pdupdateNT.c"
    L2ptr = PANEL->L2;
# 145 "../HPL_pdupdateNT.c"
    L1ptr = PANEL->L1;
    __CrestLoad(19601, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(19602, (unsigned long )(& ldl2));
# 146 "../HPL_pdupdateNT.c"
    ldl2 = PANEL->ldl2;
# 146 "../HPL_pdupdateNT.c"
    dpiv = PANEL->DPIV;
# 146 "../HPL_pdupdateNT.c"
    ipiv = PANEL->IWORK;
    __CrestLoad(19605, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(19604, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(19603, 1, (long long )(PANEL->mp - jb));
    __CrestStore(19606, (unsigned long )(& mp));
# 147 "../HPL_pdupdateNT.c"
    mp = PANEL->mp - jb;
    __CrestLoad(19607, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
    __CrestStore(19608, (unsigned long )(& iroff));
# 147 "../HPL_pdupdateNT.c"
    iroff = PANEL->ii;
    __CrestLoad(19609, (unsigned long )0, (long long )0);
    __CrestStore(19610, (unsigned long )(& nq0));
# 147 "../HPL_pdupdateNT.c"
    nq0 = 0;
    __CrestLoad(19611, (unsigned long )0, (long long )0);
    __CrestStore(19612, (unsigned long )(& i));
# 164 "../HPL_pdupdateNT.c"
    i = 0;
    {
# 164 "../HPL_pdupdateNT.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(19615, (unsigned long )(& i), (long long )i);
      __CrestLoad(19614, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(19613, 16, (long long )(i < jb));
# 164 "../HPL_pdupdateNT.c"
      if (i < jb) {
        __CrestBranch(19616, 7024, 1);

      } else {
        __CrestBranch(19617, 7025, 0);
# 164 "../HPL_pdupdateNT.c"
        goto while_break___0;
      }
      }
# 164 "../HPL_pdupdateNT.c"
      mem_25 = ipiv + i;
# 164 "../HPL_pdupdateNT.c"
      mem_26 = dpiv + i;
      __CrestLoad(19620, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(19619, (unsigned long )(& iroff), (long long )iroff);
      __CrestApply2(19618, 1, (long long )((int )*mem_26 - iroff));
      __CrestStore(19621, (unsigned long )mem_25);
# 164 "../HPL_pdupdateNT.c"
      *mem_25 = (int )*mem_26 - iroff;
      __CrestLoad(19624, (unsigned long )(& i), (long long )i);
      __CrestLoad(19623, (unsigned long )0, (long long )1);
      __CrestApply2(19622, 0, (long long )(i + 1));
      __CrestStore(19625, (unsigned long )(& i));
# 164 "../HPL_pdupdateNT.c"
      i ++;
    }
    while_break___0: ;
    }
    {
# 170 "../HPL_pdupdateNT.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(19628, (unsigned long )(& test), (long long )test);
      __CrestLoad(19627, (unsigned long )0, (long long )2);
      __CrestApply2(19626, 12, (long long )(test == 2));
# 170 "../HPL_pdupdateNT.c"
      if (test == 2) {
        __CrestBranch(19629, 7032, 1);

      } else {
        __CrestBranch(19630, 7033, 0);
# 170 "../HPL_pdupdateNT.c"
        goto while_break___1;
      }
      }
      __CrestLoad(19633, (unsigned long )(& n), (long long )n);
      __CrestLoad(19632, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(19631, 1, (long long )(n - nq0));
      __CrestStore(19634, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNT.c"
      nn = n - nq0;
      {
      __CrestLoad(19637, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(19636, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19635, 16, (long long )(nb < nn));
# 172 "../HPL_pdupdateNT.c"
      if (nb < nn) {
        __CrestBranch(19638, 7036, 1);
        __CrestLoad(19640, (unsigned long )(& nb), (long long )nb);
        __CrestStore(19641, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNT.c"
        nn = nb;
      } else {
        __CrestBranch(19639, 7037, 0);
        __CrestLoad(19642, (unsigned long )(& nn), (long long )nn);
        __CrestStore(19643, (unsigned long )(& nn));
# 172 "../HPL_pdupdateNT.c"
        nn = nn;
      }
      }
      __CrestLoad(19644, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19645, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19646, (unsigned long )(& lda), (long long )lda);
# 181 "../HPL_pdupdateNT.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(19647);
      __CrestLoad(19648, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19649, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19650, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19651, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19652, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19653, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19654, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19655, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19656, (unsigned long )(& lda), (long long )lda);
# 183 "../HPL_pdupdateNT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(19657);
      __CrestLoad(19658, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19659, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19660, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19661, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(19662, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19663, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19664, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(19665, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(19666, (unsigned long )(& lda), (long long )lda);
# 200 "../HPL_pdupdateNT.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(19667);
# 204 "../HPL_pdupdateNT.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(19670, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(19669, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19668, 0, (long long )(nq0 + nn));
      __CrestStore(19671, (unsigned long )(& nq0));
# 204 "../HPL_pdupdateNT.c"
      nq0 += nn;
# 206 "../HPL_pdupdateNT.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(19672);
    }
    while_break___1: ;
    }
    __CrestLoad(19675, (unsigned long )(& n), (long long )n);
    __CrestLoad(19674, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(19673, 1, (long long )(n - nq0));
    __CrestStore(19676, (unsigned long )(& nn));
# 211 "../HPL_pdupdateNT.c"
    nn = n - nq0;
    {
    __CrestLoad(19679, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(19678, (unsigned long )0, (long long )0);
    __CrestApply2(19677, 14, (long long )(nn > 0));
# 211 "../HPL_pdupdateNT.c"
    if (nn > 0) {
      __CrestBranch(19680, 7042, 1);
      __CrestLoad(19682, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19683, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19684, (unsigned long )(& lda), (long long )lda);
# 218 "../HPL_pdupdateNT.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(19685);
      __CrestLoad(19686, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19687, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19688, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19689, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19690, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19691, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19692, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19693, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19694, (unsigned long )(& lda), (long long )lda);
# 220 "../HPL_pdupdateNT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(19695);
      __CrestLoad(19696, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19697, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19698, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(19699, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(19700, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19701, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19702, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(19703, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(19704, (unsigned long )(& lda), (long long )lda);
# 237 "../HPL_pdupdateNT.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(19705);
    } else {
      __CrestBranch(19681, 7043, 0);

    }
    }
  } else {
    __CrestBranch(19600, 7044, 0);
    {
    __CrestLoad(19708, (unsigned long )(& fswap___0), (long long )fswap___0);
    __CrestLoad(19707, (unsigned long )0, (long long )499U);
    __CrestApply2(19706, 12, (long long )((unsigned int )fswap___0 == 499U));
# 264 "../HPL_pdupdateNT.c"
    if ((unsigned int )fswap___0 == 499U) {
      __CrestBranch(19709, 7045, 1);
# 265 "../HPL_pdupdateNT.c"
      mem_27 = PANEL->algo;
      __CrestLoad(19711, (unsigned long )(& mem_27->fswap), (long long )mem_27->fswap);
      __CrestStore(19712, (unsigned long )(& fswap___0));
# 265 "../HPL_pdupdateNT.c"
      fswap___0 = mem_27->fswap;
# 265 "../HPL_pdupdateNT.c"
      mem_28 = PANEL->algo;
      __CrestLoad(19713, (unsigned long )(& mem_28->fsthr), (long long )mem_28->fsthr);
      __CrestStore(19714, (unsigned long )(& tswap___0));
# 265 "../HPL_pdupdateNT.c"
      tswap___0 = mem_28->fsthr;
    } else {
      __CrestBranch(19710, 7046, 0);

    }
    }
    {
    __CrestLoad(19717, (unsigned long )(& fswap___0), (long long )fswap___0);
    __CrestLoad(19716, (unsigned long )0, (long long )452U);
    __CrestApply2(19715, 12, (long long )((unsigned int )fswap___0 == 452U));
# 267 "../HPL_pdupdateNT.c"
    if ((unsigned int )fswap___0 == 452U) {
      __CrestBranch(19718, 7048, 1);
      __CrestLoad(19720, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateNT.c"
      HPL_pdlaswp01T(PBCST, & test, PANEL, (int const )n);
      __CrestClearStack(19721);
    } else {
      __CrestBranch(19719, 7049, 0);
      {
      __CrestLoad(19724, (unsigned long )(& fswap___0), (long long )fswap___0);
      __CrestLoad(19723, (unsigned long )0, (long long )453U);
      __CrestApply2(19722, 12, (long long )((unsigned int )fswap___0 == 453U));
# 267 "../HPL_pdupdateNT.c"
      if ((unsigned int )fswap___0 == 453U) {
        __CrestBranch(19725, 7050, 1);
        {
        __CrestLoad(19729, (unsigned long )(& n), (long long )n);
        __CrestLoad(19728, (unsigned long )(& tswap___0), (long long )tswap___0);
        __CrestApply2(19727, 14, (long long )(n > tswap___0));
# 267 "../HPL_pdupdateNT.c"
        if (n > tswap___0) {
          __CrestBranch(19730, 7051, 1);
          __CrestLoad(19732, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateNT.c"
          HPL_pdlaswp01T(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(19733);
        } else {
          __CrestBranch(19731, 7052, 0);
          __CrestLoad(19734, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateNT.c"
          HPL_pdlaswp00T(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(19735);
        }
        }
      } else {
        __CrestBranch(19726, 7053, 0);
        __CrestLoad(19736, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateNT.c"
        HPL_pdlaswp00T(PBCST, & test, PANEL, (int const )n);
        __CrestClearStack(19737);
      }
      }
    }
    }
    __CrestLoad(19738, (unsigned long )0, (long long )0);
    __CrestStore(19739, (unsigned long )(& nq0));
# 275 "../HPL_pdupdateNT.c"
    nq0 = 0;
    {
# 275 "../HPL_pdupdateNT.c"
    mem_29 = PANEL->grid;
    {
    __CrestLoad(19742, (unsigned long )(& mem_29->myrow), (long long )mem_29->myrow);
    __CrestLoad(19741, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(19740, 12, (long long )(mem_29->myrow == PANEL->prow));
# 275 "../HPL_pdupdateNT.c"
    if (mem_29->myrow == PANEL->prow) {
      __CrestBranch(19743, 7058, 1);
      __CrestLoad(19745, (unsigned long )0, (long long )1);
      __CrestStore(19746, (unsigned long )(& curr));
# 275 "../HPL_pdupdateNT.c"
      curr = 1;
    } else {
      __CrestBranch(19744, 7059, 0);
      __CrestLoad(19747, (unsigned long )0, (long long )0);
      __CrestStore(19748, (unsigned long )(& curr));
# 275 "../HPL_pdupdateNT.c"
      curr = 0;
    }
    }
    }
# 276 "../HPL_pdupdateNT.c"
    Aptr = PANEL->A;
# 276 "../HPL_pdupdateNT.c"
    L2ptr = PANEL->L2;
# 276 "../HPL_pdupdateNT.c"
    L1ptr = PANEL->L1;
# 277 "../HPL_pdupdateNT.c"
    Uptr = PANEL->U;
    __CrestLoad(19749, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(19750, (unsigned long )(& ldl2));
# 277 "../HPL_pdupdateNT.c"
    ldl2 = PANEL->ldl2;
    {
    __CrestLoad(19753, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(19752, (unsigned long )0, (long long )0);
    __CrestApply2(19751, 13, (long long )(curr != 0));
# 278 "../HPL_pdupdateNT.c"
    if (curr != 0) {
      __CrestBranch(19754, 7062, 1);
      __CrestLoad(19756, (unsigned long )(& jb), (long long )jb);
      __CrestStore(19757, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateNT.c"
      tmp = jb;
    } else {
      __CrestBranch(19755, 7063, 0);
      __CrestLoad(19758, (unsigned long )0, (long long )0);
      __CrestStore(19759, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateNT.c"
      tmp = 0;
    }
    }
    __CrestLoad(19762, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(19761, (unsigned long )(& tmp), (long long )tmp);
    __CrestApply2(19760, 1, (long long )(PANEL->mp - tmp));
    __CrestStore(19763, (unsigned long )(& mp));
# 278 "../HPL_pdupdateNT.c"
    mp = PANEL->mp - tmp;
    {
# 300 "../HPL_pdupdateNT.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(19766, (unsigned long )(& test), (long long )test);
      __CrestLoad(19765, (unsigned long )0, (long long )2);
      __CrestApply2(19764, 12, (long long )(test == 2));
# 300 "../HPL_pdupdateNT.c"
      if (test == 2) {
        __CrestBranch(19767, 7069, 1);

      } else {
        __CrestBranch(19768, 7070, 0);
# 300 "../HPL_pdupdateNT.c"
        goto while_break___2;
      }
      }
      __CrestLoad(19771, (unsigned long )(& n), (long long )n);
      __CrestLoad(19770, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(19769, 1, (long long )(n - nq0));
      __CrestStore(19772, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNT.c"
      nn = n - nq0;
      {
      __CrestLoad(19775, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(19774, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19773, 16, (long long )(nb < nn));
# 302 "../HPL_pdupdateNT.c"
      if (nb < nn) {
        __CrestBranch(19776, 7073, 1);
        __CrestLoad(19778, (unsigned long )(& nb), (long long )nb);
        __CrestStore(19779, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNT.c"
        nn = nb;
      } else {
        __CrestBranch(19777, 7074, 0);
        __CrestLoad(19780, (unsigned long )(& nn), (long long )nn);
        __CrestStore(19781, (unsigned long )(& nn));
# 302 "../HPL_pdupdateNT.c"
        nn = nn;
      }
      }
      __CrestLoad(19782, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19783, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
      __CrestLoad(19784, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19785, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(19786, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19787, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19788, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19789, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19790, (unsigned long )(& n), (long long )n);
# 304 "../HPL_pdupdateNT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )nn,
                  (int const )jb, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )n);
      __CrestClearStack(19791);
      {
      __CrestLoad(19794, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(19793, (unsigned long )0, (long long )0);
      __CrestApply2(19792, 13, (long long )(curr != 0));
# 307 "../HPL_pdupdateNT.c"
      if (curr != 0) {
        __CrestBranch(19795, 7077, 1);
        __CrestLoad(19797, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19798, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19799, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(19800, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19801, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19802, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19803, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19804, (unsigned long )(& n), (long long )n);
        __CrestLoad(19805, (unsigned long )(& lda), (long long )lda);
# 324 "../HPL_pdupdateNT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(19806);
        __CrestLoad(19807, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19808, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19809, (unsigned long )(& n), (long long )n);
        __CrestLoad(19810, (unsigned long )(& lda), (long long )lda);
# 328 "../HPL_pdupdateNT.c"
        HPL_dlatcpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )n,
                    Aptr, (int const )lda);
        __CrestClearStack(19811);
      } else {
        __CrestBranch(19796, 7078, 0);
        __CrestLoad(19812, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19813, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19814, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(19815, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19816, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19817, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19818, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19819, (unsigned long )(& n), (long long )n);
        __CrestLoad(19820, (unsigned long )(& lda), (long long )lda);
# 347 "../HPL_pdupdateNT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(19821);
      }
      }
# 352 "../HPL_pdupdateNT.c"
      Uptr = (Uptr + nn) + 0;
# 353 "../HPL_pdupdateNT.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(19824, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(19823, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19822, 0, (long long )(nq0 + nn));
      __CrestStore(19825, (unsigned long )(& nq0));
# 353 "../HPL_pdupdateNT.c"
      nq0 += nn;
# 355 "../HPL_pdupdateNT.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(19826);
    }
    while_break___2: ;
    }
    __CrestLoad(19829, (unsigned long )(& n), (long long )n);
    __CrestLoad(19828, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(19827, 1, (long long )(n - nq0));
    __CrestStore(19830, (unsigned long )(& nn));
# 360 "../HPL_pdupdateNT.c"
    nn = n - nq0;
    {
    __CrestLoad(19833, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(19832, (unsigned long )0, (long long )0);
    __CrestApply2(19831, 14, (long long )(nn > 0));
# 360 "../HPL_pdupdateNT.c"
    if (nn > 0) {
      __CrestBranch(19834, 7083, 1);
      __CrestLoad(19836, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19837, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
      __CrestLoad(19838, (unsigned long )0, (long long )((enum HPL_UPLO const )122));
      __CrestLoad(19839, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(19840, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19841, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19842, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19843, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19844, (unsigned long )(& n), (long long )n);
# 362 "../HPL_pdupdateNT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )122,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )nn,
                  (int const )jb, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )n);
      __CrestClearStack(19845);
      {
      __CrestLoad(19848, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(19847, (unsigned long )0, (long long )0);
      __CrestApply2(19846, 13, (long long )(curr != 0));
# 365 "../HPL_pdupdateNT.c"
      if (curr != 0) {
        __CrestBranch(19849, 7085, 1);
        __CrestLoad(19851, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19852, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19853, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(19854, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19855, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19856, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19857, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19858, (unsigned long )(& n), (long long )n);
        __CrestLoad(19859, (unsigned long )(& lda), (long long )lda);
# 382 "../HPL_pdupdateNT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(19860);
        __CrestLoad(19861, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19862, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19863, (unsigned long )(& n), (long long )n);
        __CrestLoad(19864, (unsigned long )(& lda), (long long )lda);
# 386 "../HPL_pdupdateNT.c"
        HPL_dlatcpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )n,
                    Aptr, (int const )lda);
        __CrestClearStack(19865);
      } else {
        __CrestBranch(19850, 7086, 0);
        __CrestLoad(19866, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(19867, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(19868, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(19869, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(19870, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(19871, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(19872, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(19873, (unsigned long )(& n), (long long )n);
        __CrestLoad(19874, (unsigned long )(& lda), (long long )lda);
# 405 "../HPL_pdupdateNT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(19875);
      }
      }
    } else {
      __CrestBranch(19835, 7087, 0);

    }
    }
  }
  }
  }
# 431 "../HPL_pdupdateNT.c"
  PANEL->A = (PANEL->A + 0) + n * lda;
  __CrestLoad(19878, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestLoad(19877, (unsigned long )(& n), (long long )n);
  __CrestApply2(19876, 1, (long long )(PANEL->nq - n));
  __CrestStore(19879, (unsigned long )(& PANEL->nq));
# 431 "../HPL_pdupdateNT.c"
  PANEL->nq -= n;
  __CrestLoad(19882, (unsigned long )(& PANEL->jj), (long long )PANEL->jj);
  __CrestLoad(19881, (unsigned long )(& n), (long long )n);
  __CrestApply2(19880, 0, (long long )(PANEL->jj + n));
  __CrestStore(19883, (unsigned long )(& PANEL->jj));
# 431 "../HPL_pdupdateNT.c"
  PANEL->jj += n;
  {
  __CrestLoad(19886, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
  __CrestLoad(19885, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(19884, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 436 "../HPL_pdupdateNT.c"
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
    __CrestBranch(19887, 7090, 1);
    __CrestLoad(19889, (unsigned long )(& test), (long long )test);
    __CrestStore(19890, (unsigned long )IFLAG);
# 436 "../HPL_pdupdateNT.c"
    *IFLAG = test;
  } else {
    __CrestBranch(19888, 7091, 0);

  }
  }

  return_label:
  {
  __CrestReturn(19891);
# 53 "../HPL_pdupdateNT.c"
  return;
  }
}
}
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 110 "../HPL_pdupdateTN.c"
static int tswap___1 = 0;
# 111 "../HPL_pdupdateTN.c"
static HPL_T_SWAP fswap___1 = (HPL_T_SWAP )499;
# 53 "../HPL_pdupdateTN.c"
void HPL_pdupdateTN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;
  struct HPL_S_grid *mem_24 ;
  int *mem_25 ;
  double *mem_26 ;
  struct HPL_S_palg *mem_27 ;
  struct HPL_S_palg *mem_28 ;
  struct HPL_S_grid *mem_29 ;

  {
  __CrestCall(19893, 111);
  __CrestStore(19892, (unsigned long )(& NN));
  __CrestLoad(19894, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(19895, (unsigned long )(& nb));
# 119 "../HPL_pdupdateTN.c"
  nb = PANEL->nb;
  __CrestLoad(19896, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(19897, (unsigned long )(& jb));
# 119 "../HPL_pdupdateTN.c"
  jb = PANEL->jb;
  __CrestLoad(19898, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestStore(19899, (unsigned long )(& n));
# 119 "../HPL_pdupdateTN.c"
  n = PANEL->nq;
  __CrestLoad(19900, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(19901, (unsigned long )(& lda));
# 119 "../HPL_pdupdateTN.c"
  lda = PANEL->lda;
  {
  __CrestLoad(19904, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(19903, (unsigned long )0, (long long )0);
  __CrestApply2(19902, 17, (long long )(NN >= 0));
# 120 "../HPL_pdupdateTN.c"
  if (NN >= 0) {
    __CrestBranch(19905, 7096, 1);
    {
    __CrestLoad(19909, (unsigned long )(& NN), (long long )NN);
    __CrestLoad(19908, (unsigned long )(& n), (long long )n);
    __CrestApply2(19907, 16, (long long )(NN < (int const )n));
# 120 "../HPL_pdupdateTN.c"
    if (NN < (int const )n) {
      __CrestBranch(19910, 7097, 1);
      __CrestLoad(19912, (unsigned long )(& NN), (long long )NN);
      __CrestStore(19913, (unsigned long )(& n));
# 120 "../HPL_pdupdateTN.c"
      n = (int )NN;
    } else {
      __CrestBranch(19911, 7098, 0);
      __CrestLoad(19914, (unsigned long )(& n), (long long )n);
      __CrestStore(19915, (unsigned long )(& n));
# 120 "../HPL_pdupdateTN.c"
      n = n;
    }
    }
  } else {
    __CrestBranch(19906, 7099, 0);

  }
  }
  {
  __CrestLoad(19918, (unsigned long )(& n), (long long )n);
  __CrestLoad(19917, (unsigned long )0, (long long )0);
  __CrestApply2(19916, 15, (long long )(n <= 0));
# 124 "../HPL_pdupdateTN.c"
  if (n <= 0) {
    __CrestBranch(19919, 7101, 1);
# 124 "../HPL_pdupdateTN.c"
    goto _L;
  } else {
    __CrestBranch(19920, 7102, 0);
    {
    __CrestLoad(19923, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(19922, (unsigned long )0, (long long )0);
    __CrestApply2(19921, 15, (long long )(jb <= 0));
# 124 "../HPL_pdupdateTN.c"
    if (jb <= 0) {
      __CrestBranch(19924, 7103, 1);
      _L:
      {
      __CrestLoad(19928, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
      __CrestLoad(19927, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(19926, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 126 "../HPL_pdupdateTN.c"
      if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
        __CrestBranch(19929, 7104, 1);
        {
# 128 "../HPL_pdupdateTN.c"
        while (1) {
          while_continue: ;
# 128 "../HPL_pdupdateTN.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(19931);
          {
          __CrestLoad(19934, (unsigned long )IFLAG, (long long )*IFLAG);
          __CrestLoad(19933, (unsigned long )0, (long long )1);
          __CrestApply2(19932, 12, (long long )(*IFLAG == 1));
# 128 "../HPL_pdupdateTN.c"
          if (*IFLAG == 1) {
            __CrestBranch(19935, 7109, 1);
# 128 "../HPL_pdupdateTN.c"
            goto while_break;
          } else {
            __CrestBranch(19936, 7110, 0);

          }
          }
        }
        while_break: ;
        }
      } else {
        __CrestBranch(19930, 7112, 0);

      }
      }
# 134 "../HPL_pdupdateTN.c"
      goto return_label;
    } else {
      __CrestBranch(19925, 7115, 0);

    }
    }
  }
  }
# 139 "../HPL_pdupdateTN.c"
  HPL_bcast(PBCST, & test);
  __CrestClearStack(19937);
  {
# 143 "../HPL_pdupdateTN.c"
  mem_24 = PANEL->grid;
  {
  __CrestLoad(19940, (unsigned long )(& mem_24->nprow), (long long )mem_24->nprow);
  __CrestLoad(19939, (unsigned long )0, (long long )1);
  __CrestApply2(19938, 12, (long long )(mem_24->nprow == 1));
# 143 "../HPL_pdupdateTN.c"
  if (mem_24->nprow == 1) {
    __CrestBranch(19941, 7120, 1);
# 145 "../HPL_pdupdateTN.c"
    Aptr = PANEL->A;
# 145 "../HPL_pdupdateTN.c"
    L2ptr = PANEL->L2;
# 145 "../HPL_pdupdateTN.c"
    L1ptr = PANEL->L1;
    __CrestLoad(19943, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(19944, (unsigned long )(& ldl2));
# 146 "../HPL_pdupdateTN.c"
    ldl2 = PANEL->ldl2;
# 146 "../HPL_pdupdateTN.c"
    dpiv = PANEL->DPIV;
# 146 "../HPL_pdupdateTN.c"
    ipiv = PANEL->IWORK;
    __CrestLoad(19947, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(19946, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(19945, 1, (long long )(PANEL->mp - jb));
    __CrestStore(19948, (unsigned long )(& mp));
# 147 "../HPL_pdupdateTN.c"
    mp = PANEL->mp - jb;
    __CrestLoad(19949, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
    __CrestStore(19950, (unsigned long )(& iroff));
# 147 "../HPL_pdupdateTN.c"
    iroff = PANEL->ii;
    __CrestLoad(19951, (unsigned long )0, (long long )0);
    __CrestStore(19952, (unsigned long )(& nq0));
# 147 "../HPL_pdupdateTN.c"
    nq0 = 0;
    __CrestLoad(19953, (unsigned long )0, (long long )0);
    __CrestStore(19954, (unsigned long )(& i));
# 164 "../HPL_pdupdateTN.c"
    i = 0;
    {
# 164 "../HPL_pdupdateTN.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(19957, (unsigned long )(& i), (long long )i);
      __CrestLoad(19956, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(19955, 16, (long long )(i < jb));
# 164 "../HPL_pdupdateTN.c"
      if (i < jb) {
        __CrestBranch(19958, 7125, 1);

      } else {
        __CrestBranch(19959, 7126, 0);
# 164 "../HPL_pdupdateTN.c"
        goto while_break___0;
      }
      }
# 164 "../HPL_pdupdateTN.c"
      mem_25 = ipiv + i;
# 164 "../HPL_pdupdateTN.c"
      mem_26 = dpiv + i;
      __CrestLoad(19962, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(19961, (unsigned long )(& iroff), (long long )iroff);
      __CrestApply2(19960, 1, (long long )((int )*mem_26 - iroff));
      __CrestStore(19963, (unsigned long )mem_25);
# 164 "../HPL_pdupdateTN.c"
      *mem_25 = (int )*mem_26 - iroff;
      __CrestLoad(19966, (unsigned long )(& i), (long long )i);
      __CrestLoad(19965, (unsigned long )0, (long long )1);
      __CrestApply2(19964, 0, (long long )(i + 1));
      __CrestStore(19967, (unsigned long )(& i));
# 164 "../HPL_pdupdateTN.c"
      i ++;
    }
    while_break___0: ;
    }
    {
# 170 "../HPL_pdupdateTN.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(19970, (unsigned long )(& test), (long long )test);
      __CrestLoad(19969, (unsigned long )0, (long long )2);
      __CrestApply2(19968, 12, (long long )(test == 2));
# 170 "../HPL_pdupdateTN.c"
      if (test == 2) {
        __CrestBranch(19971, 7133, 1);

      } else {
        __CrestBranch(19972, 7134, 0);
# 170 "../HPL_pdupdateTN.c"
        goto while_break___1;
      }
      }
      __CrestLoad(19975, (unsigned long )(& n), (long long )n);
      __CrestLoad(19974, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(19973, 1, (long long )(n - nq0));
      __CrestStore(19976, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTN.c"
      nn = n - nq0;
      {
      __CrestLoad(19979, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(19978, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(19977, 16, (long long )(nb < nn));
# 172 "../HPL_pdupdateTN.c"
      if (nb < nn) {
        __CrestBranch(19980, 7137, 1);
        __CrestLoad(19982, (unsigned long )(& nb), (long long )nb);
        __CrestStore(19983, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTN.c"
        nn = nb;
      } else {
        __CrestBranch(19981, 7138, 0);
        __CrestLoad(19984, (unsigned long )(& nn), (long long )nn);
        __CrestStore(19985, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTN.c"
        nn = nn;
      }
      }
      __CrestLoad(19986, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19987, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19988, (unsigned long )(& lda), (long long )lda);
# 181 "../HPL_pdupdateTN.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(19989);
      __CrestLoad(19990, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(19991, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(19992, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(19993, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(19994, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(19995, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19996, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(19997, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(19998, (unsigned long )(& lda), (long long )lda);
# 183 "../HPL_pdupdateTN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(19999);
      __CrestLoad(20000, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20001, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20002, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20003, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(20004, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20005, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20006, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(20007, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(20008, (unsigned long )(& lda), (long long )lda);
# 200 "../HPL_pdupdateTN.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(20009);
# 204 "../HPL_pdupdateTN.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(20012, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(20011, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20010, 0, (long long )(nq0 + nn));
      __CrestStore(20013, (unsigned long )(& nq0));
# 204 "../HPL_pdupdateTN.c"
      nq0 += nn;
# 206 "../HPL_pdupdateTN.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(20014);
    }
    while_break___1: ;
    }
    __CrestLoad(20017, (unsigned long )(& n), (long long )n);
    __CrestLoad(20016, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(20015, 1, (long long )(n - nq0));
    __CrestStore(20018, (unsigned long )(& nn));
# 211 "../HPL_pdupdateTN.c"
    nn = n - nq0;
    {
    __CrestLoad(20021, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(20020, (unsigned long )0, (long long )0);
    __CrestApply2(20019, 14, (long long )(nn > 0));
# 211 "../HPL_pdupdateTN.c"
    if (nn > 0) {
      __CrestBranch(20022, 7143, 1);
      __CrestLoad(20024, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20025, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20026, (unsigned long )(& lda), (long long )lda);
# 218 "../HPL_pdupdateTN.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(20027);
      __CrestLoad(20028, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20029, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(20030, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20031, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(20032, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20033, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20034, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20035, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20036, (unsigned long )(& lda), (long long )lda);
# 220 "../HPL_pdupdateTN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(20037);
      __CrestLoad(20038, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20039, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20040, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20041, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(20042, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20043, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20044, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(20045, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(20046, (unsigned long )(& lda), (long long )lda);
# 237 "../HPL_pdupdateTN.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(20047);
    } else {
      __CrestBranch(20023, 7144, 0);

    }
    }
  } else {
    __CrestBranch(19942, 7145, 0);
    {
    __CrestLoad(20050, (unsigned long )(& fswap___1), (long long )fswap___1);
    __CrestLoad(20049, (unsigned long )0, (long long )499U);
    __CrestApply2(20048, 12, (long long )((unsigned int )fswap___1 == 499U));
# 264 "../HPL_pdupdateTN.c"
    if ((unsigned int )fswap___1 == 499U) {
      __CrestBranch(20051, 7146, 1);
# 265 "../HPL_pdupdateTN.c"
      mem_27 = PANEL->algo;
      __CrestLoad(20053, (unsigned long )(& mem_27->fswap), (long long )mem_27->fswap);
      __CrestStore(20054, (unsigned long )(& fswap___1));
# 265 "../HPL_pdupdateTN.c"
      fswap___1 = mem_27->fswap;
# 265 "../HPL_pdupdateTN.c"
      mem_28 = PANEL->algo;
      __CrestLoad(20055, (unsigned long )(& mem_28->fsthr), (long long )mem_28->fsthr);
      __CrestStore(20056, (unsigned long )(& tswap___1));
# 265 "../HPL_pdupdateTN.c"
      tswap___1 = mem_28->fsthr;
    } else {
      __CrestBranch(20052, 7147, 0);

    }
    }
    {
    __CrestLoad(20059, (unsigned long )(& fswap___1), (long long )fswap___1);
    __CrestLoad(20058, (unsigned long )0, (long long )452U);
    __CrestApply2(20057, 12, (long long )((unsigned int )fswap___1 == 452U));
# 267 "../HPL_pdupdateTN.c"
    if ((unsigned int )fswap___1 == 452U) {
      __CrestBranch(20060, 7149, 1);
      __CrestLoad(20062, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateTN.c"
      HPL_pdlaswp01N(PBCST, & test, PANEL, (int const )n);
      __CrestClearStack(20063);
    } else {
      __CrestBranch(20061, 7150, 0);
      {
      __CrestLoad(20066, (unsigned long )(& fswap___1), (long long )fswap___1);
      __CrestLoad(20065, (unsigned long )0, (long long )453U);
      __CrestApply2(20064, 12, (long long )((unsigned int )fswap___1 == 453U));
# 267 "../HPL_pdupdateTN.c"
      if ((unsigned int )fswap___1 == 453U) {
        __CrestBranch(20067, 7151, 1);
        {
        __CrestLoad(20071, (unsigned long )(& n), (long long )n);
        __CrestLoad(20070, (unsigned long )(& tswap___1), (long long )tswap___1);
        __CrestApply2(20069, 14, (long long )(n > tswap___1));
# 267 "../HPL_pdupdateTN.c"
        if (n > tswap___1) {
          __CrestBranch(20072, 7152, 1);
          __CrestLoad(20074, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateTN.c"
          HPL_pdlaswp01N(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(20075);
        } else {
          __CrestBranch(20073, 7153, 0);
          __CrestLoad(20076, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateTN.c"
          HPL_pdlaswp00N(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(20077);
        }
        }
      } else {
        __CrestBranch(20068, 7154, 0);
        __CrestLoad(20078, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateTN.c"
        HPL_pdlaswp00N(PBCST, & test, PANEL, (int const )n);
        __CrestClearStack(20079);
      }
      }
    }
    }
    __CrestLoad(20080, (unsigned long )0, (long long )0);
    __CrestStore(20081, (unsigned long )(& nq0));
# 275 "../HPL_pdupdateTN.c"
    nq0 = 0;
    {
# 275 "../HPL_pdupdateTN.c"
    mem_29 = PANEL->grid;
    {
    __CrestLoad(20084, (unsigned long )(& mem_29->myrow), (long long )mem_29->myrow);
    __CrestLoad(20083, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(20082, 12, (long long )(mem_29->myrow == PANEL->prow));
# 275 "../HPL_pdupdateTN.c"
    if (mem_29->myrow == PANEL->prow) {
      __CrestBranch(20085, 7159, 1);
      __CrestLoad(20087, (unsigned long )0, (long long )1);
      __CrestStore(20088, (unsigned long )(& curr));
# 275 "../HPL_pdupdateTN.c"
      curr = 1;
    } else {
      __CrestBranch(20086, 7160, 0);
      __CrestLoad(20089, (unsigned long )0, (long long )0);
      __CrestStore(20090, (unsigned long )(& curr));
# 275 "../HPL_pdupdateTN.c"
      curr = 0;
    }
    }
    }
# 276 "../HPL_pdupdateTN.c"
    Aptr = PANEL->A;
# 276 "../HPL_pdupdateTN.c"
    L2ptr = PANEL->L2;
# 276 "../HPL_pdupdateTN.c"
    L1ptr = PANEL->L1;
# 277 "../HPL_pdupdateTN.c"
    Uptr = PANEL->U;
    __CrestLoad(20091, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(20092, (unsigned long )(& ldl2));
# 277 "../HPL_pdupdateTN.c"
    ldl2 = PANEL->ldl2;
    {
    __CrestLoad(20095, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(20094, (unsigned long )0, (long long )0);
    __CrestApply2(20093, 13, (long long )(curr != 0));
# 278 "../HPL_pdupdateTN.c"
    if (curr != 0) {
      __CrestBranch(20096, 7163, 1);
      __CrestLoad(20098, (unsigned long )(& jb), (long long )jb);
      __CrestStore(20099, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateTN.c"
      tmp = jb;
    } else {
      __CrestBranch(20097, 7164, 0);
      __CrestLoad(20100, (unsigned long )0, (long long )0);
      __CrestStore(20101, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateTN.c"
      tmp = 0;
    }
    }
    __CrestLoad(20104, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(20103, (unsigned long )(& tmp), (long long )tmp);
    __CrestApply2(20102, 1, (long long )(PANEL->mp - tmp));
    __CrestStore(20105, (unsigned long )(& mp));
# 278 "../HPL_pdupdateTN.c"
    mp = PANEL->mp - tmp;
    {
# 300 "../HPL_pdupdateTN.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(20108, (unsigned long )(& test), (long long )test);
      __CrestLoad(20107, (unsigned long )0, (long long )2);
      __CrestApply2(20106, 12, (long long )(test == 2));
# 300 "../HPL_pdupdateTN.c"
      if (test == 2) {
        __CrestBranch(20109, 7170, 1);

      } else {
        __CrestBranch(20110, 7171, 0);
# 300 "../HPL_pdupdateTN.c"
        goto while_break___2;
      }
      }
      __CrestLoad(20113, (unsigned long )(& n), (long long )n);
      __CrestLoad(20112, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(20111, 1, (long long )(n - nq0));
      __CrestStore(20114, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTN.c"
      nn = n - nq0;
      {
      __CrestLoad(20117, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(20116, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20115, 16, (long long )(nb < nn));
# 302 "../HPL_pdupdateTN.c"
      if (nb < nn) {
        __CrestBranch(20118, 7174, 1);
        __CrestLoad(20120, (unsigned long )(& nb), (long long )nb);
        __CrestStore(20121, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTN.c"
        nn = nb;
      } else {
        __CrestBranch(20119, 7175, 0);
        __CrestLoad(20122, (unsigned long )(& nn), (long long )nn);
        __CrestStore(20123, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTN.c"
        nn = nn;
      }
      }
      __CrestLoad(20124, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20125, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(20126, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20127, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(20128, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20129, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20130, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20131, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20132, (unsigned long )(& jb), (long long )jb);
# 304 "../HPL_pdupdateTN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )jb);
      __CrestClearStack(20133);
      {
      __CrestLoad(20136, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(20135, (unsigned long )0, (long long )0);
      __CrestApply2(20134, 13, (long long )(curr != 0));
# 307 "../HPL_pdupdateTN.c"
      if (curr != 0) {
        __CrestBranch(20137, 7178, 1);
        __CrestLoad(20139, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20140, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20141, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20142, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20143, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20144, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20145, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20146, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20147, (unsigned long )(& lda), (long long )lda);
# 324 "../HPL_pdupdateTN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(20148);
        __CrestLoad(20149, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20150, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20151, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20152, (unsigned long )(& lda), (long long )lda);
# 328 "../HPL_pdupdateTN.c"
        HPL_dlacpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )jb,
                   Aptr, (int const )lda);
        __CrestClearStack(20153);
      } else {
        __CrestBranch(20138, 7179, 0);
        __CrestLoad(20154, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20155, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20156, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20157, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20158, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20159, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20160, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20161, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20162, (unsigned long )(& lda), (long long )lda);
# 347 "../HPL_pdupdateTN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(20163);
      }
      }
# 352 "../HPL_pdupdateTN.c"
      Uptr = (Uptr + 0) + nn * jb;
# 353 "../HPL_pdupdateTN.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(20166, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(20165, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20164, 0, (long long )(nq0 + nn));
      __CrestStore(20167, (unsigned long )(& nq0));
# 353 "../HPL_pdupdateTN.c"
      nq0 += nn;
# 355 "../HPL_pdupdateTN.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(20168);
    }
    while_break___2: ;
    }
    __CrestLoad(20171, (unsigned long )(& n), (long long )n);
    __CrestLoad(20170, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(20169, 1, (long long )(n - nq0));
    __CrestStore(20172, (unsigned long )(& nn));
# 360 "../HPL_pdupdateTN.c"
    nn = n - nq0;
    {
    __CrestLoad(20175, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(20174, (unsigned long )0, (long long )0);
    __CrestApply2(20173, 14, (long long )(nn > 0));
# 360 "../HPL_pdupdateTN.c"
    if (nn > 0) {
      __CrestBranch(20176, 7184, 1);
      __CrestLoad(20178, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20179, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(20180, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20181, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(20182, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20183, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20184, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20185, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20186, (unsigned long )(& jb), (long long )jb);
# 362 "../HPL_pdupdateTN.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )jb);
      __CrestClearStack(20187);
      {
      __CrestLoad(20190, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(20189, (unsigned long )0, (long long )0);
      __CrestApply2(20188, 13, (long long )(curr != 0));
# 365 "../HPL_pdupdateTN.c"
      if (curr != 0) {
        __CrestBranch(20191, 7186, 1);
        __CrestLoad(20193, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20194, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20195, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20196, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20197, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20198, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20199, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20200, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20201, (unsigned long )(& lda), (long long )lda);
# 382 "../HPL_pdupdateTN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(20202);
        __CrestLoad(20203, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20204, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20205, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20206, (unsigned long )(& lda), (long long )lda);
# 386 "../HPL_pdupdateTN.c"
        HPL_dlacpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )jb,
                   Aptr, (int const )lda);
        __CrestClearStack(20207);
      } else {
        __CrestBranch(20192, 7187, 0);
        __CrestLoad(20208, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20209, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20210, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20211, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20212, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20213, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20214, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20215, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20216, (unsigned long )(& lda), (long long )lda);
# 405 "../HPL_pdupdateTN.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )jb, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(20217);
      }
      }
    } else {
      __CrestBranch(20177, 7188, 0);

    }
    }
  }
  }
  }
# 431 "../HPL_pdupdateTN.c"
  PANEL->A = (PANEL->A + 0) + n * lda;
  __CrestLoad(20220, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestLoad(20219, (unsigned long )(& n), (long long )n);
  __CrestApply2(20218, 1, (long long )(PANEL->nq - n));
  __CrestStore(20221, (unsigned long )(& PANEL->nq));
# 431 "../HPL_pdupdateTN.c"
  PANEL->nq -= n;
  __CrestLoad(20224, (unsigned long )(& PANEL->jj), (long long )PANEL->jj);
  __CrestLoad(20223, (unsigned long )(& n), (long long )n);
  __CrestApply2(20222, 0, (long long )(PANEL->jj + n));
  __CrestStore(20225, (unsigned long )(& PANEL->jj));
# 431 "../HPL_pdupdateTN.c"
  PANEL->jj += n;
  {
  __CrestLoad(20228, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
  __CrestLoad(20227, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(20226, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 436 "../HPL_pdupdateTN.c"
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
    __CrestBranch(20229, 7191, 1);
    __CrestLoad(20231, (unsigned long )(& test), (long long )test);
    __CrestStore(20232, (unsigned long )IFLAG);
# 436 "../HPL_pdupdateTN.c"
    *IFLAG = test;
  } else {
    __CrestBranch(20230, 7192, 0);

  }
  }

  return_label:
  {
  __CrestReturn(20233);
# 53 "../HPL_pdupdateTN.c"
  return;
  }
}
}
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 110 "../HPL_pdupdateTT.c"
static int tswap___2 = 0;
# 111 "../HPL_pdupdateTT.c"
static HPL_T_SWAP fswap___2 = (HPL_T_SWAP )499;
# 53 "../HPL_pdupdateTT.c"
void HPL_pdupdateTT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const NN )
{
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;
  struct HPL_S_grid *mem_24 ;
  int *mem_25 ;
  double *mem_26 ;
  struct HPL_S_palg *mem_27 ;
  struct HPL_S_palg *mem_28 ;
  struct HPL_S_grid *mem_29 ;

  {
  __CrestCall(20235, 112);
  __CrestStore(20234, (unsigned long )(& NN));
  __CrestLoad(20236, (unsigned long )(& PANEL->nb), (long long )PANEL->nb);
  __CrestStore(20237, (unsigned long )(& nb));
# 119 "../HPL_pdupdateTT.c"
  nb = PANEL->nb;
  __CrestLoad(20238, (unsigned long )(& PANEL->jb), (long long )PANEL->jb);
  __CrestStore(20239, (unsigned long )(& jb));
# 119 "../HPL_pdupdateTT.c"
  jb = PANEL->jb;
  __CrestLoad(20240, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestStore(20241, (unsigned long )(& n));
# 119 "../HPL_pdupdateTT.c"
  n = PANEL->nq;
  __CrestLoad(20242, (unsigned long )(& PANEL->lda), (long long )PANEL->lda);
  __CrestStore(20243, (unsigned long )(& lda));
# 119 "../HPL_pdupdateTT.c"
  lda = PANEL->lda;
  {
  __CrestLoad(20246, (unsigned long )(& NN), (long long )NN);
  __CrestLoad(20245, (unsigned long )0, (long long )0);
  __CrestApply2(20244, 17, (long long )(NN >= 0));
# 120 "../HPL_pdupdateTT.c"
  if (NN >= 0) {
    __CrestBranch(20247, 7197, 1);
    {
    __CrestLoad(20251, (unsigned long )(& NN), (long long )NN);
    __CrestLoad(20250, (unsigned long )(& n), (long long )n);
    __CrestApply2(20249, 16, (long long )(NN < (int const )n));
# 120 "../HPL_pdupdateTT.c"
    if (NN < (int const )n) {
      __CrestBranch(20252, 7198, 1);
      __CrestLoad(20254, (unsigned long )(& NN), (long long )NN);
      __CrestStore(20255, (unsigned long )(& n));
# 120 "../HPL_pdupdateTT.c"
      n = (int )NN;
    } else {
      __CrestBranch(20253, 7199, 0);
      __CrestLoad(20256, (unsigned long )(& n), (long long )n);
      __CrestStore(20257, (unsigned long )(& n));
# 120 "../HPL_pdupdateTT.c"
      n = n;
    }
    }
  } else {
    __CrestBranch(20248, 7200, 0);

  }
  }
  {
  __CrestLoad(20260, (unsigned long )(& n), (long long )n);
  __CrestLoad(20259, (unsigned long )0, (long long )0);
  __CrestApply2(20258, 15, (long long )(n <= 0));
# 124 "../HPL_pdupdateTT.c"
  if (n <= 0) {
    __CrestBranch(20261, 7202, 1);
# 124 "../HPL_pdupdateTT.c"
    goto _L;
  } else {
    __CrestBranch(20262, 7203, 0);
    {
    __CrestLoad(20265, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(20264, (unsigned long )0, (long long )0);
    __CrestApply2(20263, 15, (long long )(jb <= 0));
# 124 "../HPL_pdupdateTT.c"
    if (jb <= 0) {
      __CrestBranch(20266, 7204, 1);
      _L:
      {
      __CrestLoad(20270, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
      __CrestLoad(20269, (unsigned long )0, (long long )((unsigned long )((void *)0)));
      __CrestApply2(20268, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 126 "../HPL_pdupdateTT.c"
      if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
        __CrestBranch(20271, 7205, 1);
        {
# 128 "../HPL_pdupdateTT.c"
        while (1) {
          while_continue: ;
# 128 "../HPL_pdupdateTT.c"
          HPL_bcast(PBCST, IFLAG);
          __CrestClearStack(20273);
          {
          __CrestLoad(20276, (unsigned long )IFLAG, (long long )*IFLAG);
          __CrestLoad(20275, (unsigned long )0, (long long )1);
          __CrestApply2(20274, 12, (long long )(*IFLAG == 1));
# 128 "../HPL_pdupdateTT.c"
          if (*IFLAG == 1) {
            __CrestBranch(20277, 7210, 1);
# 128 "../HPL_pdupdateTT.c"
            goto while_break;
          } else {
            __CrestBranch(20278, 7211, 0);

          }
          }
        }
        while_break: ;
        }
      } else {
        __CrestBranch(20272, 7213, 0);

      }
      }
# 134 "../HPL_pdupdateTT.c"
      goto return_label;
    } else {
      __CrestBranch(20267, 7216, 0);

    }
    }
  }
  }
# 139 "../HPL_pdupdateTT.c"
  HPL_bcast(PBCST, & test);
  __CrestClearStack(20279);
  {
# 143 "../HPL_pdupdateTT.c"
  mem_24 = PANEL->grid;
  {
  __CrestLoad(20282, (unsigned long )(& mem_24->nprow), (long long )mem_24->nprow);
  __CrestLoad(20281, (unsigned long )0, (long long )1);
  __CrestApply2(20280, 12, (long long )(mem_24->nprow == 1));
# 143 "../HPL_pdupdateTT.c"
  if (mem_24->nprow == 1) {
    __CrestBranch(20283, 7221, 1);
# 145 "../HPL_pdupdateTT.c"
    Aptr = PANEL->A;
# 145 "../HPL_pdupdateTT.c"
    L2ptr = PANEL->L2;
# 145 "../HPL_pdupdateTT.c"
    L1ptr = PANEL->L1;
    __CrestLoad(20285, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(20286, (unsigned long )(& ldl2));
# 146 "../HPL_pdupdateTT.c"
    ldl2 = PANEL->ldl2;
# 146 "../HPL_pdupdateTT.c"
    dpiv = PANEL->DPIV;
# 146 "../HPL_pdupdateTT.c"
    ipiv = PANEL->IWORK;
    __CrestLoad(20289, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(20288, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(20287, 1, (long long )(PANEL->mp - jb));
    __CrestStore(20290, (unsigned long )(& mp));
# 147 "../HPL_pdupdateTT.c"
    mp = PANEL->mp - jb;
    __CrestLoad(20291, (unsigned long )(& PANEL->ii), (long long )PANEL->ii);
    __CrestStore(20292, (unsigned long )(& iroff));
# 147 "../HPL_pdupdateTT.c"
    iroff = PANEL->ii;
    __CrestLoad(20293, (unsigned long )0, (long long )0);
    __CrestStore(20294, (unsigned long )(& nq0));
# 147 "../HPL_pdupdateTT.c"
    nq0 = 0;
    __CrestLoad(20295, (unsigned long )0, (long long )0);
    __CrestStore(20296, (unsigned long )(& i));
# 164 "../HPL_pdupdateTT.c"
    i = 0;
    {
# 164 "../HPL_pdupdateTT.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(20299, (unsigned long )(& i), (long long )i);
      __CrestLoad(20298, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(20297, 16, (long long )(i < jb));
# 164 "../HPL_pdupdateTT.c"
      if (i < jb) {
        __CrestBranch(20300, 7226, 1);

      } else {
        __CrestBranch(20301, 7227, 0);
# 164 "../HPL_pdupdateTT.c"
        goto while_break___0;
      }
      }
# 164 "../HPL_pdupdateTT.c"
      mem_25 = ipiv + i;
# 164 "../HPL_pdupdateTT.c"
      mem_26 = dpiv + i;
      __CrestLoad(20304, (unsigned long )mem_26, (long long )*mem_26);
      __CrestLoad(20303, (unsigned long )(& iroff), (long long )iroff);
      __CrestApply2(20302, 1, (long long )((int )*mem_26 - iroff));
      __CrestStore(20305, (unsigned long )mem_25);
# 164 "../HPL_pdupdateTT.c"
      *mem_25 = (int )*mem_26 - iroff;
      __CrestLoad(20308, (unsigned long )(& i), (long long )i);
      __CrestLoad(20307, (unsigned long )0, (long long )1);
      __CrestApply2(20306, 0, (long long )(i + 1));
      __CrestStore(20309, (unsigned long )(& i));
# 164 "../HPL_pdupdateTT.c"
      i ++;
    }
    while_break___0: ;
    }
    {
# 170 "../HPL_pdupdateTT.c"
    while (1) {
      while_continue___1: ;
      {
      __CrestLoad(20312, (unsigned long )(& test), (long long )test);
      __CrestLoad(20311, (unsigned long )0, (long long )2);
      __CrestApply2(20310, 12, (long long )(test == 2));
# 170 "../HPL_pdupdateTT.c"
      if (test == 2) {
        __CrestBranch(20313, 7234, 1);

      } else {
        __CrestBranch(20314, 7235, 0);
# 170 "../HPL_pdupdateTT.c"
        goto while_break___1;
      }
      }
      __CrestLoad(20317, (unsigned long )(& n), (long long )n);
      __CrestLoad(20316, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(20315, 1, (long long )(n - nq0));
      __CrestStore(20318, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTT.c"
      nn = n - nq0;
      {
      __CrestLoad(20321, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(20320, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20319, 16, (long long )(nb < nn));
# 172 "../HPL_pdupdateTT.c"
      if (nb < nn) {
        __CrestBranch(20322, 7238, 1);
        __CrestLoad(20324, (unsigned long )(& nb), (long long )nb);
        __CrestStore(20325, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTT.c"
        nn = nb;
      } else {
        __CrestBranch(20323, 7239, 0);
        __CrestLoad(20326, (unsigned long )(& nn), (long long )nn);
        __CrestStore(20327, (unsigned long )(& nn));
# 172 "../HPL_pdupdateTT.c"
        nn = nn;
      }
      }
      __CrestLoad(20328, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20329, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20330, (unsigned long )(& lda), (long long )lda);
# 181 "../HPL_pdupdateTT.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(20331);
      __CrestLoad(20332, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20333, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(20334, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20335, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(20336, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20337, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20338, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20339, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20340, (unsigned long )(& lda), (long long )lda);
# 183 "../HPL_pdupdateTT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(20341);
      __CrestLoad(20342, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20343, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20344, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20345, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(20346, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20347, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20348, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(20349, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(20350, (unsigned long )(& lda), (long long )lda);
# 200 "../HPL_pdupdateTT.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(20351);
# 204 "../HPL_pdupdateTT.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(20354, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(20353, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20352, 0, (long long )(nq0 + nn));
      __CrestStore(20355, (unsigned long )(& nq0));
# 204 "../HPL_pdupdateTT.c"
      nq0 += nn;
# 206 "../HPL_pdupdateTT.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(20356);
    }
    while_break___1: ;
    }
    __CrestLoad(20359, (unsigned long )(& n), (long long )n);
    __CrestLoad(20358, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(20357, 1, (long long )(n - nq0));
    __CrestStore(20360, (unsigned long )(& nn));
# 211 "../HPL_pdupdateTT.c"
    nn = n - nq0;
    {
    __CrestLoad(20363, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(20362, (unsigned long )0, (long long )0);
    __CrestApply2(20361, 14, (long long )(nn > 0));
# 211 "../HPL_pdupdateTT.c"
    if (nn > 0) {
      __CrestBranch(20364, 7244, 1);
      __CrestLoad(20366, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20367, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20368, (unsigned long )(& lda), (long long )lda);
# 218 "../HPL_pdupdateTT.c"
      HPL_dlaswp00N((int const )jb, (int const )nn, Aptr, (int const )lda, (int const *)ipiv);
      __CrestClearStack(20369);
      __CrestLoad(20370, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20371, (unsigned long )0, (long long )((enum HPL_SIDE const )141));
      __CrestLoad(20372, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20373, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
      __CrestLoad(20374, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20375, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20376, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20377, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20378, (unsigned long )(& lda), (long long )lda);
# 220 "../HPL_pdupdateTT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )141, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )112, (enum HPL_DIAG const )132, (int const )jb,
                  (int const )nn, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Aptr, (int const )lda);
      __CrestClearStack(20379);
      __CrestLoad(20380, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20381, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20382, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20383, (unsigned long )(& mp), (long long )mp);
      __CrestLoad(20384, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20385, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20386, (unsigned long )(& ldl2), (long long )ldl2);
      __CrestLoad(20387, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(20388, (unsigned long )(& lda), (long long )lda);
# 237 "../HPL_pdupdateTT.c"
      cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )111,
                  (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                  (double const *)L2ptr, (int const )ldl2, (double const *)Aptr,
                  (int const )lda, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
      __CrestClearStack(20389);
    } else {
      __CrestBranch(20365, 7245, 0);

    }
    }
  } else {
    __CrestBranch(20284, 7246, 0);
    {
    __CrestLoad(20392, (unsigned long )(& fswap___2), (long long )fswap___2);
    __CrestLoad(20391, (unsigned long )0, (long long )499U);
    __CrestApply2(20390, 12, (long long )((unsigned int )fswap___2 == 499U));
# 264 "../HPL_pdupdateTT.c"
    if ((unsigned int )fswap___2 == 499U) {
      __CrestBranch(20393, 7247, 1);
# 265 "../HPL_pdupdateTT.c"
      mem_27 = PANEL->algo;
      __CrestLoad(20395, (unsigned long )(& mem_27->fswap), (long long )mem_27->fswap);
      __CrestStore(20396, (unsigned long )(& fswap___2));
# 265 "../HPL_pdupdateTT.c"
      fswap___2 = mem_27->fswap;
# 265 "../HPL_pdupdateTT.c"
      mem_28 = PANEL->algo;
      __CrestLoad(20397, (unsigned long )(& mem_28->fsthr), (long long )mem_28->fsthr);
      __CrestStore(20398, (unsigned long )(& tswap___2));
# 265 "../HPL_pdupdateTT.c"
      tswap___2 = mem_28->fsthr;
    } else {
      __CrestBranch(20394, 7248, 0);

    }
    }
    {
    __CrestLoad(20401, (unsigned long )(& fswap___2), (long long )fswap___2);
    __CrestLoad(20400, (unsigned long )0, (long long )452U);
    __CrestApply2(20399, 12, (long long )((unsigned int )fswap___2 == 452U));
# 267 "../HPL_pdupdateTT.c"
    if ((unsigned int )fswap___2 == 452U) {
      __CrestBranch(20402, 7250, 1);
      __CrestLoad(20404, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateTT.c"
      HPL_pdlaswp01T(PBCST, & test, PANEL, (int const )n);
      __CrestClearStack(20405);
    } else {
      __CrestBranch(20403, 7251, 0);
      {
      __CrestLoad(20408, (unsigned long )(& fswap___2), (long long )fswap___2);
      __CrestLoad(20407, (unsigned long )0, (long long )453U);
      __CrestApply2(20406, 12, (long long )((unsigned int )fswap___2 == 453U));
# 267 "../HPL_pdupdateTT.c"
      if ((unsigned int )fswap___2 == 453U) {
        __CrestBranch(20409, 7252, 1);
        {
        __CrestLoad(20413, (unsigned long )(& n), (long long )n);
        __CrestLoad(20412, (unsigned long )(& tswap___2), (long long )tswap___2);
        __CrestApply2(20411, 14, (long long )(n > tswap___2));
# 267 "../HPL_pdupdateTT.c"
        if (n > tswap___2) {
          __CrestBranch(20414, 7253, 1);
          __CrestLoad(20416, (unsigned long )(& n), (long long )n);
# 269 "../HPL_pdupdateTT.c"
          HPL_pdlaswp01T(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(20417);
        } else {
          __CrestBranch(20415, 7254, 0);
          __CrestLoad(20418, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateTT.c"
          HPL_pdlaswp00T(PBCST, & test, PANEL, (int const )n);
          __CrestClearStack(20419);
        }
        }
      } else {
        __CrestBranch(20410, 7255, 0);
        __CrestLoad(20420, (unsigned long )(& n), (long long )n);
# 271 "../HPL_pdupdateTT.c"
        HPL_pdlaswp00T(PBCST, & test, PANEL, (int const )n);
        __CrestClearStack(20421);
      }
      }
    }
    }
    __CrestLoad(20422, (unsigned long )0, (long long )0);
    __CrestStore(20423, (unsigned long )(& nq0));
# 275 "../HPL_pdupdateTT.c"
    nq0 = 0;
    {
# 275 "../HPL_pdupdateTT.c"
    mem_29 = PANEL->grid;
    {
    __CrestLoad(20426, (unsigned long )(& mem_29->myrow), (long long )mem_29->myrow);
    __CrestLoad(20425, (unsigned long )(& PANEL->prow), (long long )PANEL->prow);
    __CrestApply2(20424, 12, (long long )(mem_29->myrow == PANEL->prow));
# 275 "../HPL_pdupdateTT.c"
    if (mem_29->myrow == PANEL->prow) {
      __CrestBranch(20427, 7260, 1);
      __CrestLoad(20429, (unsigned long )0, (long long )1);
      __CrestStore(20430, (unsigned long )(& curr));
# 275 "../HPL_pdupdateTT.c"
      curr = 1;
    } else {
      __CrestBranch(20428, 7261, 0);
      __CrestLoad(20431, (unsigned long )0, (long long )0);
      __CrestStore(20432, (unsigned long )(& curr));
# 275 "../HPL_pdupdateTT.c"
      curr = 0;
    }
    }
    }
# 276 "../HPL_pdupdateTT.c"
    Aptr = PANEL->A;
# 276 "../HPL_pdupdateTT.c"
    L2ptr = PANEL->L2;
# 276 "../HPL_pdupdateTT.c"
    L1ptr = PANEL->L1;
# 277 "../HPL_pdupdateTT.c"
    Uptr = PANEL->U;
    __CrestLoad(20433, (unsigned long )(& PANEL->ldl2), (long long )PANEL->ldl2);
    __CrestStore(20434, (unsigned long )(& ldl2));
# 277 "../HPL_pdupdateTT.c"
    ldl2 = PANEL->ldl2;
    {
    __CrestLoad(20437, (unsigned long )(& curr), (long long )curr);
    __CrestLoad(20436, (unsigned long )0, (long long )0);
    __CrestApply2(20435, 13, (long long )(curr != 0));
# 278 "../HPL_pdupdateTT.c"
    if (curr != 0) {
      __CrestBranch(20438, 7264, 1);
      __CrestLoad(20440, (unsigned long )(& jb), (long long )jb);
      __CrestStore(20441, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateTT.c"
      tmp = jb;
    } else {
      __CrestBranch(20439, 7265, 0);
      __CrestLoad(20442, (unsigned long )0, (long long )0);
      __CrestStore(20443, (unsigned long )(& tmp));
# 278 "../HPL_pdupdateTT.c"
      tmp = 0;
    }
    }
    __CrestLoad(20446, (unsigned long )(& PANEL->mp), (long long )PANEL->mp);
    __CrestLoad(20445, (unsigned long )(& tmp), (long long )tmp);
    __CrestApply2(20444, 1, (long long )(PANEL->mp - tmp));
    __CrestStore(20447, (unsigned long )(& mp));
# 278 "../HPL_pdupdateTT.c"
    mp = PANEL->mp - tmp;
    {
# 300 "../HPL_pdupdateTT.c"
    while (1) {
      while_continue___2: ;
      {
      __CrestLoad(20450, (unsigned long )(& test), (long long )test);
      __CrestLoad(20449, (unsigned long )0, (long long )2);
      __CrestApply2(20448, 12, (long long )(test == 2));
# 300 "../HPL_pdupdateTT.c"
      if (test == 2) {
        __CrestBranch(20451, 7271, 1);

      } else {
        __CrestBranch(20452, 7272, 0);
# 300 "../HPL_pdupdateTT.c"
        goto while_break___2;
      }
      }
      __CrestLoad(20455, (unsigned long )(& n), (long long )n);
      __CrestLoad(20454, (unsigned long )(& nq0), (long long )nq0);
      __CrestApply2(20453, 1, (long long )(n - nq0));
      __CrestStore(20456, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTT.c"
      nn = n - nq0;
      {
      __CrestLoad(20459, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(20458, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20457, 16, (long long )(nb < nn));
# 302 "../HPL_pdupdateTT.c"
      if (nb < nn) {
        __CrestBranch(20460, 7275, 1);
        __CrestLoad(20462, (unsigned long )(& nb), (long long )nb);
        __CrestStore(20463, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTT.c"
        nn = nb;
      } else {
        __CrestBranch(20461, 7276, 0);
        __CrestLoad(20464, (unsigned long )(& nn), (long long )nn);
        __CrestStore(20465, (unsigned long )(& nn));
# 302 "../HPL_pdupdateTT.c"
        nn = nn;
      }
      }
      __CrestLoad(20466, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20467, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
      __CrestLoad(20468, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20469, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20470, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20471, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20472, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20473, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20474, (unsigned long )(& n), (long long )n);
# 304 "../HPL_pdupdateTT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )nn,
                  (int const )jb, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )n);
      __CrestClearStack(20475);
      {
      __CrestLoad(20478, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(20477, (unsigned long )0, (long long )0);
      __CrestApply2(20476, 13, (long long )(curr != 0));
# 307 "../HPL_pdupdateTT.c"
      if (curr != 0) {
        __CrestBranch(20479, 7279, 1);
        __CrestLoad(20481, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20482, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20483, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(20484, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20485, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20486, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20487, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20488, (unsigned long )(& n), (long long )n);
        __CrestLoad(20489, (unsigned long )(& lda), (long long )lda);
# 324 "../HPL_pdupdateTT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(20490);
        __CrestLoad(20491, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20492, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20493, (unsigned long )(& n), (long long )n);
        __CrestLoad(20494, (unsigned long )(& lda), (long long )lda);
# 328 "../HPL_pdupdateTT.c"
        HPL_dlatcpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )n,
                    Aptr, (int const )lda);
        __CrestClearStack(20495);
      } else {
        __CrestBranch(20480, 7280, 0);
        __CrestLoad(20496, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20497, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20498, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(20499, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20500, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20501, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20502, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20503, (unsigned long )(& n), (long long )n);
        __CrestLoad(20504, (unsigned long )(& lda), (long long )lda);
# 347 "../HPL_pdupdateTT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(20505);
      }
      }
# 352 "../HPL_pdupdateTT.c"
      Uptr = (Uptr + nn) + 0;
# 353 "../HPL_pdupdateTT.c"
      Aptr = (Aptr + 0) + nn * lda;
      __CrestLoad(20508, (unsigned long )(& nq0), (long long )nq0);
      __CrestLoad(20507, (unsigned long )(& nn), (long long )nn);
      __CrestApply2(20506, 0, (long long )(nq0 + nn));
      __CrestStore(20509, (unsigned long )(& nq0));
# 353 "../HPL_pdupdateTT.c"
      nq0 += nn;
# 355 "../HPL_pdupdateTT.c"
      HPL_bcast(PBCST, & test);
      __CrestClearStack(20510);
    }
    while_break___2: ;
    }
    __CrestLoad(20513, (unsigned long )(& n), (long long )n);
    __CrestLoad(20512, (unsigned long )(& nq0), (long long )nq0);
    __CrestApply2(20511, 1, (long long )(n - nq0));
    __CrestStore(20514, (unsigned long )(& nn));
# 360 "../HPL_pdupdateTT.c"
    nn = n - nq0;
    {
    __CrestLoad(20517, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(20516, (unsigned long )0, (long long )0);
    __CrestApply2(20515, 14, (long long )(nn > 0));
# 360 "../HPL_pdupdateTT.c"
    if (nn > 0) {
      __CrestBranch(20518, 7285, 1);
      __CrestLoad(20520, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(20521, (unsigned long )0, (long long )((enum HPL_SIDE const )142));
      __CrestLoad(20522, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(20523, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(20524, (unsigned long )0, (long long )((enum HPL_DIAG const )132));
      __CrestLoad(20525, (unsigned long )(& nn), (long long )nn);
      __CrestLoad(20526, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20527, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(20528, (unsigned long )(& n), (long long )n);
# 362 "../HPL_pdupdateTT.c"
      cblas_dtrsm((enum HPL_ORDER const )102, (enum HPL_SIDE const )142, (enum HPL_UPLO const )121,
                  (enum HPL_TRANS const )111, (enum HPL_DIAG const )132, (int const )nn,
                  (int const )jb, (double const )1.0, (double const *)L1ptr,
                  (int const )jb, Uptr, (int const )n);
      __CrestClearStack(20529);
      {
      __CrestLoad(20532, (unsigned long )(& curr), (long long )curr);
      __CrestLoad(20531, (unsigned long )0, (long long )0);
      __CrestApply2(20530, 13, (long long )(curr != 0));
# 365 "../HPL_pdupdateTT.c"
      if (curr != 0) {
        __CrestBranch(20533, 7287, 1);
        __CrestLoad(20535, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20536, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20537, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(20538, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20539, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20540, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20541, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20542, (unsigned long )(& n), (long long )n);
        __CrestLoad(20543, (unsigned long )(& lda), (long long )lda);
# 382 "../HPL_pdupdateTT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, (Aptr + jb) + 0, (int const )lda);
        __CrestClearStack(20544);
        __CrestLoad(20545, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20546, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20547, (unsigned long )(& n), (long long )n);
        __CrestLoad(20548, (unsigned long )(& lda), (long long )lda);
# 386 "../HPL_pdupdateTT.c"
        HPL_dlatcpy((int const )jb, (int const )nn, (double const *)Uptr, (int const )n,
                    Aptr, (int const )lda);
        __CrestClearStack(20549);
      } else {
        __CrestBranch(20534, 7288, 0);
        __CrestLoad(20550, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(20551, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(20552, (unsigned long )0, (long long )((enum HPL_TRANS const )112));
        __CrestLoad(20553, (unsigned long )(& mp), (long long )mp);
        __CrestLoad(20554, (unsigned long )(& nn), (long long )nn);
        __CrestLoad(20555, (unsigned long )(& jb), (long long )jb);
        __CrestLoad(20556, (unsigned long )(& ldl2), (long long )ldl2);
        __CrestLoad(20557, (unsigned long )(& n), (long long )n);
        __CrestLoad(20558, (unsigned long )(& lda), (long long )lda);
# 405 "../HPL_pdupdateTT.c"
        cblas_dgemm((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (enum HPL_TRANS const )112,
                    (int const )mp, (int const )nn, (int const )jb, (double const )(- 1.0),
                    (double const *)L2ptr, (int const )ldl2, (double const *)Uptr,
                    (int const )n, (double const )1.0, Aptr, (int const )lda);
        __CrestClearStack(20559);
      }
      }
    } else {
      __CrestBranch(20519, 7289, 0);

    }
    }
  }
  }
  }
# 431 "../HPL_pdupdateTT.c"
  PANEL->A = (PANEL->A + 0) + n * lda;
  __CrestLoad(20562, (unsigned long )(& PANEL->nq), (long long )PANEL->nq);
  __CrestLoad(20561, (unsigned long )(& n), (long long )n);
  __CrestApply2(20560, 1, (long long )(PANEL->nq - n));
  __CrestStore(20563, (unsigned long )(& PANEL->nq));
# 431 "../HPL_pdupdateTT.c"
  PANEL->nq -= n;
  __CrestLoad(20566, (unsigned long )(& PANEL->jj), (long long )PANEL->jj);
  __CrestLoad(20565, (unsigned long )(& n), (long long )n);
  __CrestApply2(20564, 0, (long long )(PANEL->jj + n));
  __CrestStore(20567, (unsigned long )(& PANEL->jj));
# 431 "../HPL_pdupdateTT.c"
  PANEL->jj += n;
  {
  __CrestLoad(20570, (unsigned long )(& PBCST), (long long )((unsigned long )PBCST));
  __CrestLoad(20569, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(20568, 13, (long long )((unsigned long )PBCST != (unsigned long )((void *)0)));
# 436 "../HPL_pdupdateTT.c"
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
    __CrestBranch(20571, 7292, 1);
    __CrestLoad(20573, (unsigned long )(& test), (long long )test);
    __CrestStore(20574, (unsigned long )IFLAG);
# 436 "../HPL_pdupdateTT.c"
    *IFLAG = test;
  } else {
    __CrestBranch(20572, 7293, 0);

  }
  }

  return_label:
  {
  __CrestReturn(20575);
# 53 "../HPL_pdupdateTT.c"
  return;
  }
}
}
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 337 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdtrsv(HPL_T_grid *GRID , HPL_T_pmat *AMAT ) ;
# 53 "../HPL_pdtrsv.c"
void HPL_pdtrsv(HPL_T_grid *GRID , HPL_T_pmat *AMAT )
{
  MPI_Comm Ccomm ;
  MPI_Comm Rcomm ;
  double *A ;
  double *Aprev ;
  double *Aptr ;
  double *XC ;
  double *XR ;
  double *Xd ;
  double *Xdprev ;
  double *W ;
  int Alcol ;
  int Alrow ;
  int Anpprev ;
  int Anp ;
  int Anq ;
  int Bcol ;
  int Cmsgid ;
  int GridIsNotPx1 ;
  int GridIsNot1xQ ;
  int Rmsgid ;
  int Wfr ;
  int colprev ;
  int kb ;
  int kbprev ;
  int lda ;
  int mycol ;
  int myrow ;
  int n ;
  int n1 ;
  int n1p ;
  int n1pprev ;
  int nb ;
  int npcol ;
  int nprow ;
  int rowprev ;
  int tmp1 ;
  int tmp2 ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;
  int tmp ;
  void *tmp___0 ;
  int inb_____1 ;
  int mydist_____1 ;
  int n_____1 ;
  int nblk_____1 ;
  int quot_____1 ;
  int src_____1 ;
  int tmp___1 ;
  int inb_____2 ;
  int mydist_____2 ;
  int n_____2 ;
  int nblk_____2 ;
  int quot_____2 ;
  int src_____2 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int inb_____3 ;
  int mydist_____3 ;
  int n_____3 ;
  int nblk_____3 ;
  int quot_____3 ;
  int src_____3 ;
  int tmp___7 ;
  double *mem_79 ;

  {
  __CrestCall(20576, 113);
# 110 "../HPL_pdtrsv.c"
  A = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  Aprev = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  XC = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  XR = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  Xd = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  Xdprev = (double *)((void *)0);
# 110 "../HPL_pdtrsv.c"
  W = (double *)((void *)0);
  __CrestLoad(20577, (unsigned long )0, (long long )0);
  __CrestStore(20578, (unsigned long )(& Wfr));
# 113 "../HPL_pdtrsv.c"
  Wfr = 0;
  __CrestLoad(20579, (unsigned long )0, (long long )0);
  __CrestStore(20580, (unsigned long )(& n1pprev));
# 113 "../HPL_pdtrsv.c"
  n1pprev = 0;
  __CrestLoad(20581, (unsigned long )(& AMAT->n), (long long )AMAT->n);
  __CrestStore(20582, (unsigned long )(& n));
# 124 "../HPL_pdtrsv.c"
  n = AMAT->n;
  {
  __CrestLoad(20585, (unsigned long )(& n), (long long )n);
  __CrestLoad(20584, (unsigned long )0, (long long )0);
  __CrestApply2(20583, 15, (long long )(n <= 0));
# 124 "../HPL_pdtrsv.c"
  if (n <= 0) {
    __CrestBranch(20586, 7298, 1);
# 124 "../HPL_pdtrsv.c"
    goto return_label;
  } else {
    __CrestBranch(20587, 7300, 0);

  }
  }
  __CrestLoad(20588, (unsigned long )(& AMAT->nb), (long long )AMAT->nb);
  __CrestStore(20589, (unsigned long )(& nb));
# 125 "../HPL_pdtrsv.c"
  nb = AMAT->nb;
  __CrestLoad(20590, (unsigned long )(& AMAT->ld), (long long )AMAT->ld);
  __CrestStore(20591, (unsigned long )(& lda));
# 125 "../HPL_pdtrsv.c"
  lda = AMAT->ld;
# 125 "../HPL_pdtrsv.c"
  A = AMAT->A;
# 125 "../HPL_pdtrsv.c"
  XR = AMAT->X;
# 127 "../HPL_pdtrsv.c"
  HPL_grid_info((HPL_T_grid const *)GRID, & nprow, & npcol, & myrow, & mycol);
  __CrestClearStack(20592);
  __CrestLoad(20593, (unsigned long )(& GRID->row_comm), (long long )GRID->row_comm);
  __CrestStore(20594, (unsigned long )(& Rcomm));
# 128 "../HPL_pdtrsv.c"
  Rcomm = GRID->row_comm;
  __CrestLoad(20595, (unsigned long )0, (long long )3001);
  __CrestStore(20596, (unsigned long )(& Rmsgid));
# 128 "../HPL_pdtrsv.c"
  Rmsgid = 3001;
  __CrestLoad(20597, (unsigned long )(& GRID->col_comm), (long long )GRID->col_comm);
  __CrestStore(20598, (unsigned long )(& Ccomm));
# 129 "../HPL_pdtrsv.c"
  Ccomm = GRID->col_comm;
  __CrestLoad(20599, (unsigned long )0, (long long )3002);
  __CrestStore(20600, (unsigned long )(& Cmsgid));
# 129 "../HPL_pdtrsv.c"
  Cmsgid = 3002;
  __CrestLoad(20603, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(20602, (unsigned long )0, (long long )1);
  __CrestApply2(20601, 14, (long long )(nprow > 1));
  __CrestStore(20604, (unsigned long )(& GridIsNot1xQ));
# 130 "../HPL_pdtrsv.c"
  GridIsNot1xQ = nprow > 1;
  __CrestLoad(20607, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(20606, (unsigned long )0, (long long )1);
  __CrestApply2(20605, 14, (long long )(npcol > 1));
  __CrestStore(20608, (unsigned long )(& GridIsNotPx1));
# 130 "../HPL_pdtrsv.c"
  GridIsNotPx1 = npcol > 1;
  {
  __CrestLoad(20611, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(20610, (unsigned long )0, (long long )1);
  __CrestApply2(20609, 14, (long long )(nprow > 1));
# 134 "../HPL_pdtrsv.c"
  if (nprow > 1) {
    __CrestBranch(20612, 7303, 1);
    __CrestLoad(20614, (unsigned long )(& nb), (long long )nb);
    __CrestStore(20615, (unsigned long )(& inb__));
# 134 "../HPL_pdtrsv.c"
    inb__ = nb;
    {
    __CrestLoad(20618, (unsigned long )(& inb__), (long long )inb__);
    __CrestLoad(20617, (unsigned long )0, (long long )0);
    __CrestApply2(20616, 15, (long long )(inb__ <= 0));
# 134 "../HPL_pdtrsv.c"
    if (inb__ <= 0) {
      __CrestBranch(20619, 7305, 1);
      __CrestLoad(20626, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply1(20625, 19, (long long )(- inb__));
      __CrestLoad(20624, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(20623, 3, (long long )(- inb__ / nb));
      __CrestLoad(20622, (unsigned long )0, (long long )1);
      __CrestApply2(20621, 0, (long long )(- inb__ / nb + 1));
      __CrestStore(20627, (unsigned long )(& nblk__));
# 134 "../HPL_pdtrsv.c"
      nblk__ = - inb__ / nb + 1;
      __CrestLoad(20628, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestStore(20629, (unsigned long )(& src__));
# 134 "../HPL_pdtrsv.c"
      src__ = nblk__;
      __CrestLoad(20636, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(20635, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(20634, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(20633, 3, (long long )(src__ / nprow));
      __CrestLoad(20632, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(20631, 2, (long long )((src__ / nprow) * nprow));
      __CrestApply2(20630, 1, (long long )(src__ - (src__ / nprow) * nprow));
      __CrestStore(20637, (unsigned long )(& src__));
# 134 "../HPL_pdtrsv.c"
      src__ -= (src__ / nprow) * nprow;
      __CrestLoad(20642, (unsigned long )(& inb__), (long long )inb__);
      __CrestLoad(20641, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestLoad(20640, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(20639, 2, (long long )(nblk__ * nb));
      __CrestApply2(20638, 0, (long long )(inb__ + nblk__ * nb));
      __CrestStore(20643, (unsigned long )(& inb__));
# 134 "../HPL_pdtrsv.c"
      inb__ += nblk__ * nb;
      __CrestLoad(20646, (unsigned long )(& n), (long long )n);
      __CrestLoad(20645, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(20644, 1, (long long )(n - inb__));
      __CrestStore(20647, (unsigned long )(& n__));
# 134 "../HPL_pdtrsv.c"
      n__ = n - inb__;
      {
      __CrestLoad(20650, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(20649, (unsigned long )0, (long long )0);
      __CrestApply2(20648, 15, (long long )(n__ <= 0));
# 134 "../HPL_pdtrsv.c"
      if (n__ <= 0) {
        __CrestBranch(20651, 7307, 1);
        {
        __CrestLoad(20655, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(20654, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(20653, 12, (long long )(myrow == src__));
# 134 "../HPL_pdtrsv.c"
        if (myrow == src__) {
          __CrestBranch(20656, 7308, 1);
          __CrestLoad(20658, (unsigned long )(& n), (long long )n);
          __CrestStore(20659, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
          Anp = n;
        } else {
          __CrestBranch(20657, 7309, 0);
          __CrestLoad(20660, (unsigned long )0, (long long )0);
          __CrestStore(20661, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
          Anp = 0;
        }
        }
      } else {
        __CrestBranch(20652, 7310, 0);
        __CrestLoad(20664, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(20663, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(20662, 1, (long long )(myrow - src__));
        __CrestStore(20665, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
        mydist__ = myrow - src__;
        {
        __CrestLoad(20668, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20667, (unsigned long )0, (long long )0);
        __CrestApply2(20666, 16, (long long )(mydist__ < 0));
# 134 "../HPL_pdtrsv.c"
        if (mydist__ < 0) {
          __CrestBranch(20669, 7312, 1);
          __CrestLoad(20673, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(20672, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(20671, 0, (long long )(mydist__ + nprow));
          __CrestStore(20674, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(20670, 7313, 0);

        }
        }
        __CrestLoad(20679, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(20678, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(20677, 3, (long long )(n__ / nb));
        __CrestLoad(20676, (unsigned long )0, (long long )1);
        __CrestApply2(20675, 0, (long long )(n__ / nb + 1));
        __CrestStore(20680, (unsigned long )(& nblk__));
# 134 "../HPL_pdtrsv.c"
        nblk__ = n__ / nb + 1;
        __CrestLoad(20683, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(20682, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(20681, 3, (long long )(nblk__ / nprow));
        __CrestStore(20684, (unsigned long )(& quot__));
# 134 "../HPL_pdtrsv.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(20691, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20690, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(20689, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(20688, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(20687, 2, (long long )(quot__ * nprow));
        __CrestApply2(20686, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(20685, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(20692, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(20695, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20694, (unsigned long )0, (long long )0);
        __CrestApply2(20693, 16, (long long )(mydist__ < 0));
# 134 "../HPL_pdtrsv.c"
        if (mydist__ < 0) {
          __CrestBranch(20696, 7316, 1);
          {
          __CrestLoad(20700, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(20699, (unsigned long )(& src__), (long long )src__);
          __CrestApply2(20698, 13, (long long )(myrow != src__));
# 134 "../HPL_pdtrsv.c"
          if (myrow != src__) {
            __CrestBranch(20701, 7317, 1);
            __CrestLoad(20707, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20706, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20705, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20704, 2, (long long )(nb * quot__));
            __CrestApply2(20703, 0, (long long )(nb + nb * quot__));
            __CrestStore(20708, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = nb + nb * quot__;
          } else {
            __CrestBranch(20702, 7318, 0);
            __CrestLoad(20713, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(20712, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20711, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20710, 2, (long long )(nb * quot__));
            __CrestApply2(20709, 0, (long long )(inb__ + nb * quot__));
            __CrestStore(20714, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = inb__ + nb * quot__;
          }
          }
        } else {
          __CrestBranch(20697, 7319, 0);
          {
          __CrestLoad(20717, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(20716, (unsigned long )0, (long long )0);
          __CrestApply2(20715, 14, (long long )(mydist__ > 0));
# 134 "../HPL_pdtrsv.c"
          if (mydist__ > 0) {
            __CrestBranch(20718, 7320, 1);
            __CrestLoad(20722, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20721, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20720, 2, (long long )(nb * quot__));
            __CrestStore(20723, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = nb * quot__;
          } else {
            __CrestBranch(20719, 7321, 0);
            {
            __CrestLoad(20726, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(20725, (unsigned long )(& src__), (long long )src__);
            __CrestApply2(20724, 13, (long long )(myrow != src__));
# 134 "../HPL_pdtrsv.c"
            if (myrow != src__) {
              __CrestBranch(20727, 7322, 1);
              __CrestLoad(20737, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(20736, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(20735, 0, (long long )(n__ + nb));
              __CrestLoad(20734, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20733, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(20732, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(20731, 1, (long long )(quot__ - nblk__));
              __CrestApply2(20730, 2, (long long )(nb * (quot__ - nblk__)));
              __CrestApply2(20729, 0, (long long )((n__ + nb) + nb * (quot__ - nblk__)));
              __CrestStore(20738, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
              Anp = (n__ + nb) + nb * (quot__ - nblk__);
            } else {
              __CrestBranch(20728, 7323, 0);
              __CrestLoad(20745, (unsigned long )(& n), (long long )n);
              __CrestLoad(20744, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20743, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(20742, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(20741, 1, (long long )(quot__ - nblk__));
              __CrestApply2(20740, 2, (long long )(nb * (quot__ - nblk__)));
              __CrestApply2(20739, 0, (long long )(n + nb * (quot__ - nblk__)));
              __CrestStore(20746, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
              Anp = n + nb * (quot__ - nblk__);
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(20620, 7324, 0);
      __CrestLoad(20749, (unsigned long )(& n), (long long )n);
      __CrestLoad(20748, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(20747, 1, (long long )(n - inb__));
      __CrestStore(20750, (unsigned long )(& n__));
# 134 "../HPL_pdtrsv.c"
      n__ = n - inb__;
      {
      __CrestLoad(20753, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(20752, (unsigned long )0, (long long )0);
      __CrestApply2(20751, 15, (long long )(n__ <= 0));
# 134 "../HPL_pdtrsv.c"
      if (n__ <= 0) {
        __CrestBranch(20754, 7326, 1);
        {
        __CrestLoad(20758, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(20757, (unsigned long )0, (long long )0);
        __CrestApply2(20756, 12, (long long )(myrow == 0));
# 134 "../HPL_pdtrsv.c"
        if (myrow == 0) {
          __CrestBranch(20759, 7327, 1);
          __CrestLoad(20761, (unsigned long )(& n), (long long )n);
          __CrestStore(20762, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
          Anp = n;
        } else {
          __CrestBranch(20760, 7328, 0);
          __CrestLoad(20763, (unsigned long )0, (long long )0);
          __CrestStore(20764, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
          Anp = 0;
        }
        }
      } else {
        __CrestBranch(20755, 7329, 0);
        __CrestLoad(20765, (unsigned long )(& myrow), (long long )myrow);
        __CrestStore(20766, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
        mydist__ = myrow;
        {
        __CrestLoad(20769, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20768, (unsigned long )0, (long long )0);
        __CrestApply2(20767, 16, (long long )(mydist__ < 0));
# 134 "../HPL_pdtrsv.c"
        if (mydist__ < 0) {
          __CrestBranch(20770, 7331, 1);
          __CrestLoad(20774, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(20773, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(20772, 0, (long long )(mydist__ + nprow));
          __CrestStore(20775, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(20771, 7332, 0);

        }
        }
        __CrestLoad(20780, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(20779, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(20778, 3, (long long )(n__ / nb));
        __CrestLoad(20777, (unsigned long )0, (long long )1);
        __CrestApply2(20776, 0, (long long )(n__ / nb + 1));
        __CrestStore(20781, (unsigned long )(& nblk__));
# 134 "../HPL_pdtrsv.c"
        nblk__ = n__ / nb + 1;
        __CrestLoad(20784, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(20783, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(20782, 3, (long long )(nblk__ / nprow));
        __CrestStore(20785, (unsigned long )(& quot__));
# 134 "../HPL_pdtrsv.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(20792, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20791, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(20790, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(20789, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(20788, 2, (long long )(quot__ * nprow));
        __CrestApply2(20787, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(20786, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(20793, (unsigned long )(& mydist__));
# 134 "../HPL_pdtrsv.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(20796, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(20795, (unsigned long )0, (long long )0);
        __CrestApply2(20794, 16, (long long )(mydist__ < 0));
# 134 "../HPL_pdtrsv.c"
        if (mydist__ < 0) {
          __CrestBranch(20797, 7335, 1);
          {
          __CrestLoad(20801, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(20800, (unsigned long )0, (long long )0);
          __CrestApply2(20799, 13, (long long )(myrow != 0));
# 134 "../HPL_pdtrsv.c"
          if (myrow != 0) {
            __CrestBranch(20802, 7336, 1);
            __CrestLoad(20808, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20807, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20806, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20805, 2, (long long )(nb * quot__));
            __CrestApply2(20804, 0, (long long )(nb + nb * quot__));
            __CrestStore(20809, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = nb + nb * quot__;
          } else {
            __CrestBranch(20803, 7337, 0);
            __CrestLoad(20814, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(20813, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20812, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20811, 2, (long long )(nb * quot__));
            __CrestApply2(20810, 0, (long long )(inb__ + nb * quot__));
            __CrestStore(20815, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = inb__ + nb * quot__;
          }
          }
        } else {
          __CrestBranch(20798, 7338, 0);
          {
          __CrestLoad(20818, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(20817, (unsigned long )0, (long long )0);
          __CrestApply2(20816, 14, (long long )(mydist__ > 0));
# 134 "../HPL_pdtrsv.c"
          if (mydist__ > 0) {
            __CrestBranch(20819, 7339, 1);
            __CrestLoad(20823, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20822, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(20821, 2, (long long )(nb * quot__));
            __CrestStore(20824, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
            Anp = nb * quot__;
          } else {
            __CrestBranch(20820, 7340, 0);
            {
            __CrestLoad(20827, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(20826, (unsigned long )0, (long long )0);
            __CrestApply2(20825, 13, (long long )(myrow != 0));
# 134 "../HPL_pdtrsv.c"
            if (myrow != 0) {
              __CrestBranch(20828, 7341, 1);
              __CrestLoad(20838, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(20837, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(20836, 0, (long long )(n__ + nb));
              __CrestLoad(20835, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20834, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(20833, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(20832, 1, (long long )(quot__ - nblk__));
              __CrestApply2(20831, 2, (long long )(nb * (quot__ - nblk__)));
              __CrestApply2(20830, 0, (long long )((n__ + nb) + nb * (quot__ - nblk__)));
              __CrestStore(20839, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
              Anp = (n__ + nb) + nb * (quot__ - nblk__);
            } else {
              __CrestBranch(20829, 7342, 0);
              __CrestLoad(20846, (unsigned long )(& n), (long long )n);
              __CrestLoad(20845, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20844, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(20843, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(20842, 1, (long long )(quot__ - nblk__));
              __CrestApply2(20841, 2, (long long )(nb * (quot__ - nblk__)));
              __CrestApply2(20840, 0, (long long )(n + nb * (quot__ - nblk__)));
              __CrestStore(20847, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
              Anp = n + nb * (quot__ - nblk__);
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(20613, 7343, 0);
    __CrestLoad(20848, (unsigned long )(& n), (long long )n);
    __CrestStore(20849, (unsigned long )(& Anp));
# 134 "../HPL_pdtrsv.c"
    Anp = n;
  }
  }
  {
  __CrestLoad(20852, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(20851, (unsigned long )0, (long long )1);
  __CrestApply2(20850, 14, (long long )(npcol > 1));
# 135 "../HPL_pdtrsv.c"
  if (npcol > 1) {
    __CrestBranch(20853, 7345, 1);
    __CrestLoad(20855, (unsigned long )(& nb), (long long )nb);
    __CrestStore(20856, (unsigned long )(& inb_____0));
# 135 "../HPL_pdtrsv.c"
    inb_____0 = nb;
    {
    __CrestLoad(20859, (unsigned long )(& inb_____0), (long long )inb_____0);
    __CrestLoad(20858, (unsigned long )0, (long long )0);
    __CrestApply2(20857, 15, (long long )(inb_____0 <= 0));
# 135 "../HPL_pdtrsv.c"
    if (inb_____0 <= 0) {
      __CrestBranch(20860, 7347, 1);
      __CrestLoad(20867, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply1(20866, 19, (long long )(- inb_____0));
      __CrestLoad(20865, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(20864, 3, (long long )(- inb_____0 / nb));
      __CrestLoad(20863, (unsigned long )0, (long long )1);
      __CrestApply2(20862, 0, (long long )(- inb_____0 / nb + 1));
      __CrestStore(20868, (unsigned long )(& nblk_____0));
# 135 "../HPL_pdtrsv.c"
      nblk_____0 = - inb_____0 / nb + 1;
      __CrestLoad(20869, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestStore(20870, (unsigned long )(& src_____0));
# 135 "../HPL_pdtrsv.c"
      src_____0 = nblk_____0;
      __CrestLoad(20877, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(20876, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(20875, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(20874, 3, (long long )(src_____0 / npcol));
      __CrestLoad(20873, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(20872, 2, (long long )((src_____0 / npcol) * npcol));
      __CrestApply2(20871, 1, (long long )(src_____0 - (src_____0 / npcol) * npcol));
      __CrestStore(20878, (unsigned long )(& src_____0));
# 135 "../HPL_pdtrsv.c"
      src_____0 -= (src_____0 / npcol) * npcol;
      __CrestLoad(20883, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestLoad(20882, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestLoad(20881, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(20880, 2, (long long )(nblk_____0 * nb));
      __CrestApply2(20879, 0, (long long )(inb_____0 + nblk_____0 * nb));
      __CrestStore(20884, (unsigned long )(& inb_____0));
# 135 "../HPL_pdtrsv.c"
      inb_____0 += nblk_____0 * nb;
      __CrestLoad(20887, (unsigned long )(& n), (long long )n);
      __CrestLoad(20886, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(20885, 1, (long long )(n - inb_____0));
      __CrestStore(20888, (unsigned long )(& n_____0));
# 135 "../HPL_pdtrsv.c"
      n_____0 = n - inb_____0;
      {
      __CrestLoad(20891, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(20890, (unsigned long )0, (long long )0);
      __CrestApply2(20889, 15, (long long )(n_____0 <= 0));
# 135 "../HPL_pdtrsv.c"
      if (n_____0 <= 0) {
        __CrestBranch(20892, 7349, 1);
        {
        __CrestLoad(20896, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(20895, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(20894, 12, (long long )(mycol == src_____0));
# 135 "../HPL_pdtrsv.c"
        if (mycol == src_____0) {
          __CrestBranch(20897, 7350, 1);
          __CrestLoad(20899, (unsigned long )(& n), (long long )n);
          __CrestStore(20900, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
          Anq = n;
        } else {
          __CrestBranch(20898, 7351, 0);
          __CrestLoad(20901, (unsigned long )0, (long long )0);
          __CrestStore(20902, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
          Anq = 0;
        }
        }
      } else {
        __CrestBranch(20893, 7352, 0);
        __CrestLoad(20905, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(20904, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(20903, 1, (long long )(mycol - src_____0));
        __CrestStore(20906, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
        mydist_____0 = mycol - src_____0;
        {
        __CrestLoad(20909, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(20908, (unsigned long )0, (long long )0);
        __CrestApply2(20907, 16, (long long )(mydist_____0 < 0));
# 135 "../HPL_pdtrsv.c"
        if (mydist_____0 < 0) {
          __CrestBranch(20910, 7354, 1);
          __CrestLoad(20914, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(20913, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(20912, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(20915, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(20911, 7355, 0);

        }
        }
        __CrestLoad(20920, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(20919, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(20918, 3, (long long )(n_____0 / nb));
        __CrestLoad(20917, (unsigned long )0, (long long )1);
        __CrestApply2(20916, 0, (long long )(n_____0 / nb + 1));
        __CrestStore(20921, (unsigned long )(& nblk_____0));
# 135 "../HPL_pdtrsv.c"
        nblk_____0 = n_____0 / nb + 1;
        __CrestLoad(20924, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(20923, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(20922, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(20925, (unsigned long )(& quot_____0));
# 135 "../HPL_pdtrsv.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(20932, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(20931, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(20930, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(20929, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(20928, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(20927, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(20926, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(20933, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(20936, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(20935, (unsigned long )0, (long long )0);
        __CrestApply2(20934, 16, (long long )(mydist_____0 < 0));
# 135 "../HPL_pdtrsv.c"
        if (mydist_____0 < 0) {
          __CrestBranch(20937, 7358, 1);
          {
          __CrestLoad(20941, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(20940, (unsigned long )(& src_____0), (long long )src_____0);
          __CrestApply2(20939, 13, (long long )(mycol != src_____0));
# 135 "../HPL_pdtrsv.c"
          if (mycol != src_____0) {
            __CrestBranch(20942, 7359, 1);
            __CrestLoad(20948, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20947, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20946, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(20945, 2, (long long )(nb * quot_____0));
            __CrestApply2(20944, 0, (long long )(nb + nb * quot_____0));
            __CrestStore(20949, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = nb + nb * quot_____0;
          } else {
            __CrestBranch(20943, 7360, 0);
            __CrestLoad(20954, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(20953, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20952, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(20951, 2, (long long )(nb * quot_____0));
            __CrestApply2(20950, 0, (long long )(inb_____0 + nb * quot_____0));
            __CrestStore(20955, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = inb_____0 + nb * quot_____0;
          }
          }
        } else {
          __CrestBranch(20938, 7361, 0);
          {
          __CrestLoad(20958, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(20957, (unsigned long )0, (long long )0);
          __CrestApply2(20956, 14, (long long )(mydist_____0 > 0));
# 135 "../HPL_pdtrsv.c"
          if (mydist_____0 > 0) {
            __CrestBranch(20959, 7362, 1);
            __CrestLoad(20963, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(20962, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(20961, 2, (long long )(nb * quot_____0));
            __CrestStore(20964, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = nb * quot_____0;
          } else {
            __CrestBranch(20960, 7363, 0);
            {
            __CrestLoad(20967, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(20966, (unsigned long )(& src_____0), (long long )src_____0);
            __CrestApply2(20965, 13, (long long )(mycol != src_____0));
# 135 "../HPL_pdtrsv.c"
            if (mycol != src_____0) {
              __CrestBranch(20968, 7364, 1);
              __CrestLoad(20978, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(20977, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(20976, 0, (long long )(n_____0 + nb));
              __CrestLoad(20975, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20974, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(20973, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(20972, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(20971, 2, (long long )(nb * (quot_____0 - nblk_____0)));
              __CrestApply2(20970, 0, (long long )((n_____0 + nb) + nb * (quot_____0 - nblk_____0)));
              __CrestStore(20979, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
              Anq = (n_____0 + nb) + nb * (quot_____0 - nblk_____0);
            } else {
              __CrestBranch(20969, 7365, 0);
              __CrestLoad(20986, (unsigned long )(& n), (long long )n);
              __CrestLoad(20985, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(20984, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(20983, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(20982, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(20981, 2, (long long )(nb * (quot_____0 - nblk_____0)));
              __CrestApply2(20980, 0, (long long )(n + nb * (quot_____0 - nblk_____0)));
              __CrestStore(20987, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
              Anq = n + nb * (quot_____0 - nblk_____0);
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(20861, 7366, 0);
      __CrestLoad(20990, (unsigned long )(& n), (long long )n);
      __CrestLoad(20989, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(20988, 1, (long long )(n - inb_____0));
      __CrestStore(20991, (unsigned long )(& n_____0));
# 135 "../HPL_pdtrsv.c"
      n_____0 = n - inb_____0;
      {
      __CrestLoad(20994, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(20993, (unsigned long )0, (long long )0);
      __CrestApply2(20992, 15, (long long )(n_____0 <= 0));
# 135 "../HPL_pdtrsv.c"
      if (n_____0 <= 0) {
        __CrestBranch(20995, 7368, 1);
        {
        __CrestLoad(20999, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(20998, (unsigned long )0, (long long )0);
        __CrestApply2(20997, 12, (long long )(mycol == 0));
# 135 "../HPL_pdtrsv.c"
        if (mycol == 0) {
          __CrestBranch(21000, 7369, 1);
          __CrestLoad(21002, (unsigned long )(& n), (long long )n);
          __CrestStore(21003, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
          Anq = n;
        } else {
          __CrestBranch(21001, 7370, 0);
          __CrestLoad(21004, (unsigned long )0, (long long )0);
          __CrestStore(21005, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
          Anq = 0;
        }
        }
      } else {
        __CrestBranch(20996, 7371, 0);
        __CrestLoad(21006, (unsigned long )(& mycol), (long long )mycol);
        __CrestStore(21007, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
        mydist_____0 = mycol;
        {
        __CrestLoad(21010, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(21009, (unsigned long )0, (long long )0);
        __CrestApply2(21008, 16, (long long )(mydist_____0 < 0));
# 135 "../HPL_pdtrsv.c"
        if (mydist_____0 < 0) {
          __CrestBranch(21011, 7373, 1);
          __CrestLoad(21015, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(21014, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(21013, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(21016, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(21012, 7374, 0);

        }
        }
        __CrestLoad(21021, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(21020, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(21019, 3, (long long )(n_____0 / nb));
        __CrestLoad(21018, (unsigned long )0, (long long )1);
        __CrestApply2(21017, 0, (long long )(n_____0 / nb + 1));
        __CrestStore(21022, (unsigned long )(& nblk_____0));
# 135 "../HPL_pdtrsv.c"
        nblk_____0 = n_____0 / nb + 1;
        __CrestLoad(21025, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(21024, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(21023, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(21026, (unsigned long )(& quot_____0));
# 135 "../HPL_pdtrsv.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(21033, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(21032, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(21031, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(21030, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(21029, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(21028, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(21027, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(21034, (unsigned long )(& mydist_____0));
# 135 "../HPL_pdtrsv.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(21037, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(21036, (unsigned long )0, (long long )0);
        __CrestApply2(21035, 16, (long long )(mydist_____0 < 0));
# 135 "../HPL_pdtrsv.c"
        if (mydist_____0 < 0) {
          __CrestBranch(21038, 7377, 1);
          {
          __CrestLoad(21042, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(21041, (unsigned long )0, (long long )0);
          __CrestApply2(21040, 13, (long long )(mycol != 0));
# 135 "../HPL_pdtrsv.c"
          if (mycol != 0) {
            __CrestBranch(21043, 7378, 1);
            __CrestLoad(21049, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21048, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21047, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(21046, 2, (long long )(nb * quot_____0));
            __CrestApply2(21045, 0, (long long )(nb + nb * quot_____0));
            __CrestStore(21050, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = nb + nb * quot_____0;
          } else {
            __CrestBranch(21044, 7379, 0);
            __CrestLoad(21055, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(21054, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21053, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(21052, 2, (long long )(nb * quot_____0));
            __CrestApply2(21051, 0, (long long )(inb_____0 + nb * quot_____0));
            __CrestStore(21056, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = inb_____0 + nb * quot_____0;
          }
          }
        } else {
          __CrestBranch(21039, 7380, 0);
          {
          __CrestLoad(21059, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(21058, (unsigned long )0, (long long )0);
          __CrestApply2(21057, 14, (long long )(mydist_____0 > 0));
# 135 "../HPL_pdtrsv.c"
          if (mydist_____0 > 0) {
            __CrestBranch(21060, 7381, 1);
            __CrestLoad(21064, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21063, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(21062, 2, (long long )(nb * quot_____0));
            __CrestStore(21065, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
            Anq = nb * quot_____0;
          } else {
            __CrestBranch(21061, 7382, 0);
            {
            __CrestLoad(21068, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(21067, (unsigned long )0, (long long )0);
            __CrestApply2(21066, 13, (long long )(mycol != 0));
# 135 "../HPL_pdtrsv.c"
            if (mycol != 0) {
              __CrestBranch(21069, 7383, 1);
              __CrestLoad(21079, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(21078, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(21077, 0, (long long )(n_____0 + nb));
              __CrestLoad(21076, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21075, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(21074, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(21073, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(21072, 2, (long long )(nb * (quot_____0 - nblk_____0)));
              __CrestApply2(21071, 0, (long long )((n_____0 + nb) + nb * (quot_____0 - nblk_____0)));
              __CrestStore(21080, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
              Anq = (n_____0 + nb) + nb * (quot_____0 - nblk_____0);
            } else {
              __CrestBranch(21070, 7384, 0);
              __CrestLoad(21087, (unsigned long )(& n), (long long )n);
              __CrestLoad(21086, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21085, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(21084, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(21083, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(21082, 2, (long long )(nb * (quot_____0 - nblk_____0)));
              __CrestApply2(21081, 0, (long long )(n + nb * (quot_____0 - nblk_____0)));
              __CrestStore(21088, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
              Anq = n + nb * (quot_____0 - nblk_____0);
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(20854, 7385, 0);
    __CrestLoad(21089, (unsigned long )(& n), (long long )n);
    __CrestStore(21090, (unsigned long )(& Anq));
# 135 "../HPL_pdtrsv.c"
    Anq = n;
  }
  }
  __CrestLoad(21095, (unsigned long )(& n), (long long )n);
  __CrestLoad(21094, (unsigned long )0, (long long )1);
  __CrestApply2(21093, 1, (long long )(n - 1));
  __CrestLoad(21092, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(21091, 3, (long long )((n - 1) / nb));
  __CrestStore(21096, (unsigned long )(& tmp1));
# 137 "../HPL_pdtrsv.c"
  tmp1 = (n - 1) / nb;
  __CrestLoad(21103, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21102, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21101, (unsigned long )(& nprow), (long long )nprow);
  __CrestApply2(21100, 3, (long long )(tmp1 / nprow));
  __CrestLoad(21099, (unsigned long )(& nprow), (long long )nprow);
  __CrestApply2(21098, 2, (long long )((tmp1 / nprow) * nprow));
  __CrestApply2(21097, 1, (long long )(tmp1 - (tmp1 / nprow) * nprow));
  __CrestStore(21104, (unsigned long )(& Alrow));
# 138 "../HPL_pdtrsv.c"
  Alrow = tmp1 - (tmp1 / nprow) * nprow;
  __CrestLoad(21111, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21110, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21109, (unsigned long )(& npcol), (long long )npcol);
  __CrestApply2(21108, 3, (long long )(tmp1 / npcol));
  __CrestLoad(21107, (unsigned long )(& npcol), (long long )npcol);
  __CrestApply2(21106, 2, (long long )((tmp1 / npcol) * npcol));
  __CrestApply2(21105, 1, (long long )(tmp1 - (tmp1 / npcol) * npcol));
  __CrestStore(21112, (unsigned long )(& Alcol));
# 139 "../HPL_pdtrsv.c"
  Alcol = tmp1 - (tmp1 / npcol) * npcol;
  __CrestLoad(21117, (unsigned long )(& n), (long long )n);
  __CrestLoad(21116, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21115, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(21114, 2, (long long )(tmp1 * nb));
  __CrestApply2(21113, 1, (long long )(n - tmp1 * nb));
  __CrestStore(21118, (unsigned long )(& kb));
# 140 "../HPL_pdtrsv.c"
  kb = n - tmp1 * nb;
# 142 "../HPL_pdtrsv.c"
  Aptr = A;
# 142 "../HPL_pdtrsv.c"
  XC = (Aptr + 0) + Anq * lda;
  {
  __CrestLoad(21121, (unsigned long )(& n), (long long )n);
  __CrestLoad(21120, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(21119, 17, (long long )(n >= nb));
# 143 "../HPL_pdtrsv.c"
  if (n >= nb) {
    __CrestBranch(21122, 7388, 1);
    {
    __CrestLoad(21126, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(21125, (unsigned long )0, (long long )1);
    __CrestApply2(21124, 14, (long long )(npcol > 1));
# 143 "../HPL_pdtrsv.c"
    if (npcol > 1) {
      __CrestBranch(21127, 7389, 1);
      __CrestLoad(21135, (unsigned long )0, (long long )1);
      __CrestLoad(21134, (unsigned long )(& n), (long long )n);
      __CrestLoad(21133, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21132, 1, (long long )(n - nb));
      __CrestLoad(21131, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21130, 3, (long long )((n - nb) / nb));
      __CrestApply2(21129, 0, (long long )(1 + (n - nb) / nb));
      __CrestStore(21136, (unsigned long )(& Bcol));
# 143 "../HPL_pdtrsv.c"
      Bcol = 1 + (n - nb) / nb;
      __CrestLoad(21143, (unsigned long )(& Bcol), (long long )Bcol);
      __CrestLoad(21142, (unsigned long )(& Bcol), (long long )Bcol);
      __CrestLoad(21141, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(21140, 3, (long long )(Bcol / npcol));
      __CrestLoad(21139, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(21138, 2, (long long )((Bcol / npcol) * npcol));
      __CrestApply2(21137, 1, (long long )(Bcol - (Bcol / npcol) * npcol));
      __CrestStore(21144, (unsigned long )(& Bcol));
# 143 "../HPL_pdtrsv.c"
      Bcol -= (Bcol / npcol) * npcol;
    } else {
      __CrestBranch(21128, 7390, 0);
      __CrestLoad(21145, (unsigned long )0, (long long )0);
      __CrestStore(21146, (unsigned long )(& Bcol));
# 143 "../HPL_pdtrsv.c"
      Bcol = 0;
    }
    }
  } else {
    __CrestBranch(21123, 7391, 0);
    __CrestLoad(21147, (unsigned long )0, (long long )0);
    __CrestStore(21148, (unsigned long )(& Bcol));
# 143 "../HPL_pdtrsv.c"
    Bcol = 0;
  }
  }
  {
  __CrestLoad(21151, (unsigned long )(& Anp), (long long )Anp);
  __CrestLoad(21150, (unsigned long )0, (long long )0);
  __CrestApply2(21149, 14, (long long )(Anp > 0));
# 145 "../HPL_pdtrsv.c"
  if (Anp > 0) {
    __CrestBranch(21152, 7393, 1);
    {
    __CrestLoad(21156, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestLoad(21155, (unsigned long )(& Bcol), (long long )Bcol);
    __CrestApply2(21154, 13, (long long )(Alcol != Bcol));
# 145 "../HPL_pdtrsv.c"
    if (Alcol != Bcol) {
      __CrestBranch(21157, 7394, 1);
      {
      __CrestLoad(21161, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(21160, (unsigned long )(& Bcol), (long long )Bcol);
      __CrestApply2(21159, 12, (long long )(mycol == Bcol));
# 147 "../HPL_pdtrsv.c"
      if (mycol == Bcol) {
        __CrestBranch(21162, 7395, 1);
        __CrestLoad(21164, (unsigned long )(& Anp), (long long )Anp);
        __CrestLoad(21165, (unsigned long )(& Alcol), (long long )Alcol);
        __CrestLoad(21166, (unsigned long )(& Rmsgid), (long long )Rmsgid);
        __CrestLoad(21167, (unsigned long )(& Rcomm), (long long )Rcomm);
# 148 "../HPL_pdtrsv.c"
        HPL_send(XC, Anp, Alcol, Rmsgid, Rcomm);
        __CrestClearStack(21168);
      } else {
        __CrestBranch(21163, 7396, 0);
        {
        __CrestLoad(21171, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(21170, (unsigned long )(& Alcol), (long long )Alcol);
        __CrestApply2(21169, 12, (long long )(mycol == Alcol));
# 149 "../HPL_pdtrsv.c"
        if (mycol == Alcol) {
          __CrestBranch(21172, 7397, 1);
          __CrestLoad(21174, (unsigned long )(& Anp), (long long )Anp);
          __CrestLoad(21175, (unsigned long )(& Bcol), (long long )Bcol);
          __CrestLoad(21176, (unsigned long )(& Rmsgid), (long long )Rmsgid);
          __CrestLoad(21177, (unsigned long )(& Rcomm), (long long )Rcomm);
# 150 "../HPL_pdtrsv.c"
          HPL_recv(XC, Anp, Bcol, Rmsgid, Rcomm);
          __CrestClearStack(21178);
        } else {
          __CrestBranch(21173, 7398, 0);

        }
        }
      }
      }
    } else {
      __CrestBranch(21158, 7399, 0);

    }
    }
  } else {
    __CrestBranch(21153, 7400, 0);

  }
  }
  {
  __CrestLoad(21183, (unsigned long )(& Rmsgid), (long long )Rmsgid);
  __CrestLoad(21182, (unsigned long )0, (long long )2);
  __CrestApply2(21181, 0, (long long )(Rmsgid + 2));
  __CrestLoad(21180, (unsigned long )0, (long long )4000);
  __CrestApply2(21179, 14, (long long )(Rmsgid + 2 > 4000));
# 152 "../HPL_pdtrsv.c"
  if (Rmsgid + 2 > 4000) {
    __CrestBranch(21184, 7402, 1);
    __CrestLoad(21186, (unsigned long )0, (long long )3001);
    __CrestStore(21187, (unsigned long )(& Rmsgid));
# 152 "../HPL_pdtrsv.c"
    Rmsgid = 3001;
  } else {
    __CrestBranch(21185, 7403, 0);
    __CrestLoad(21190, (unsigned long )(& Rmsgid), (long long )Rmsgid);
    __CrestLoad(21189, (unsigned long )0, (long long )2);
    __CrestApply2(21188, 0, (long long )(Rmsgid + 2));
    __CrestStore(21191, (unsigned long )(& Rmsgid));
# 152 "../HPL_pdtrsv.c"
    Rmsgid += 2;
  }
  }
  {
  __CrestLoad(21194, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(21193, (unsigned long )(& Alcol), (long long )Alcol);
  __CrestApply2(21192, 13, (long long )(mycol != Alcol));
# 154 "../HPL_pdtrsv.c"
  if (mycol != Alcol) {
    __CrestBranch(21195, 7405, 1);
    __CrestLoad(21197, (unsigned long )0, (long long )0);
    __CrestStore(21198, (unsigned long )(& tmp1));
# 155 "../HPL_pdtrsv.c"
    tmp1 = 0;
    {
# 155 "../HPL_pdtrsv.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(21201, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestLoad(21200, (unsigned long )(& Anp), (long long )Anp);
      __CrestApply2(21199, 16, (long long )(tmp1 < Anp));
# 155 "../HPL_pdtrsv.c"
      if (tmp1 < Anp) {
        __CrestBranch(21202, 7410, 1);

      } else {
        __CrestBranch(21203, 7411, 0);
# 155 "../HPL_pdtrsv.c"
        goto while_break;
      }
      }
# 155 "../HPL_pdtrsv.c"
      mem_79 = XC + tmp1;
# 155 "../HPL_pdtrsv.c"
      *mem_79 = 0.0;
      __CrestLoad(21206, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestLoad(21205, (unsigned long )0, (long long )1);
      __CrestApply2(21204, 0, (long long )(tmp1 + 1));
      __CrestStore(21207, (unsigned long )(& tmp1));
# 155 "../HPL_pdtrsv.c"
      tmp1 ++;
    }
    while_break: ;
    }
  } else {
    __CrestBranch(21196, 7414, 0);

  }
  }
  __CrestLoad(21212, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(21211, (unsigned long )0, (long long )1);
  __CrestApply2(21210, 1, (long long )(npcol - 1));
  __CrestLoad(21209, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(21208, 2, (long long )((npcol - 1) * nb));
  __CrestStore(21213, (unsigned long )(& n1));
# 159 "../HPL_pdtrsv.c"
  n1 = (npcol - 1) * nb;
  {
  __CrestLoad(21216, (unsigned long )(& n1), (long long )n1);
  __CrestLoad(21215, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(21214, 14, (long long )(n1 > nb));
# 159 "../HPL_pdtrsv.c"
  if (n1 > nb) {
    __CrestBranch(21217, 7417, 1);
    __CrestLoad(21219, (unsigned long )(& n1), (long long )n1);
    __CrestStore(21220, (unsigned long )(& n1));
# 159 "../HPL_pdtrsv.c"
    n1 = n1;
  } else {
    __CrestBranch(21218, 7418, 0);
    __CrestLoad(21221, (unsigned long )(& nb), (long long )nb);
    __CrestStore(21222, (unsigned long )(& n1));
# 159 "../HPL_pdtrsv.c"
    n1 = nb;
  }
  }
  {
  __CrestLoad(21225, (unsigned long )(& Anp), (long long )Anp);
  __CrestLoad(21224, (unsigned long )0, (long long )0);
  __CrestApply2(21223, 14, (long long )(Anp > 0));
# 160 "../HPL_pdtrsv.c"
  if (Anp > 0) {
    __CrestBranch(21226, 7420, 1);
    {
    __CrestLoad(21230, (unsigned long )(& n1), (long long )n1);
    __CrestLoad(21229, (unsigned long )(& Anp), (long long )Anp);
    __CrestApply2(21228, 16, (long long )(n1 < Anp));
# 162 "../HPL_pdtrsv.c"
    if (n1 < Anp) {
      __CrestBranch(21231, 7421, 1);
      __CrestLoad(21233, (unsigned long )(& n1), (long long )n1);
      __CrestStore(21234, (unsigned long )(& tmp));
# 162 "../HPL_pdtrsv.c"
      tmp = n1;
    } else {
      __CrestBranch(21232, 7422, 0);
      __CrestLoad(21235, (unsigned long )(& Anp), (long long )Anp);
      __CrestStore(21236, (unsigned long )(& tmp));
# 162 "../HPL_pdtrsv.c"
      tmp = Anp;
    }
    }
    __CrestLoad(21239, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(21238, (unsigned long )0, (long long )sizeof(double ));
    __CrestApply2(21237, 2, (long long )((unsigned long )tmp * sizeof(double )));
# 162 "../HPL_pdtrsv.c"
    tmp___0 = malloc((unsigned long )tmp * sizeof(double ));
    __CrestClearStack(21240);
# 162 "../HPL_pdtrsv.c"
    W = (double *)tmp___0;
    {
    __CrestLoad(21243, (unsigned long )(& W), (long long )((unsigned long )W));
    __CrestLoad(21242, (unsigned long )0, (long long )((unsigned long )((void *)0)));
    __CrestApply2(21241, 12, (long long )((unsigned long )W == (unsigned long )((void *)0)));
# 163 "../HPL_pdtrsv.c"
    if ((unsigned long )W == (unsigned long )((void *)0)) {
      __CrestBranch(21244, 7425, 1);
      __CrestLoad(21246, (unsigned long )0, (long long )164);
# 164 "../HPL_pdtrsv.c"
      HPL_pabort(164, "HPL_pdtrsv", "Memory allocation failed");
      __CrestClearStack(21247);
    } else {
      __CrestBranch(21245, 7426, 0);

    }
    }
    __CrestLoad(21248, (unsigned long )0, (long long )1);
    __CrestStore(21249, (unsigned long )(& Wfr));
# 165 "../HPL_pdtrsv.c"
    Wfr = 1;
  } else {
    __CrestBranch(21227, 7428, 0);

  }
  }
  __CrestLoad(21250, (unsigned long )(& Anp), (long long )Anp);
  __CrestStore(21251, (unsigned long )(& Anpprev));
# 168 "../HPL_pdtrsv.c"
  Anpprev = Anp;
# 168 "../HPL_pdtrsv.c"
  Xdprev = XR;
# 168 "../HPL_pdtrsv.c"
  Aptr = (Aptr + 0) + Anq * lda;
# 168 "../HPL_pdtrsv.c"
  Aprev = Aptr;
  __CrestLoad(21254, (unsigned long )(& n), (long long )n);
  __CrestLoad(21253, (unsigned long )(& kb), (long long )kb);
  __CrestApply2(21252, 1, (long long )(n - kb));
  __CrestStore(21255, (unsigned long )(& tmp1));
# 169 "../HPL_pdtrsv.c"
  tmp1 = n - kb;
  {
  __CrestLoad(21258, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21257, (unsigned long )(& n1), (long long )n1);
  __CrestApply2(21256, 16, (long long )(tmp1 < n1));
# 169 "../HPL_pdtrsv.c"
  if (tmp1 < n1) {
    __CrestBranch(21259, 7431, 1);
    __CrestLoad(21261, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestStore(21262, (unsigned long )(& tmp2));
# 169 "../HPL_pdtrsv.c"
    tmp2 = tmp1;
  } else {
    __CrestBranch(21260, 7432, 0);
    __CrestLoad(21263, (unsigned long )(& n1), (long long )n1);
    __CrestStore(21264, (unsigned long )(& tmp2));
# 169 "../HPL_pdtrsv.c"
    tmp2 = n1;
  }
  }
  __CrestLoad(21267, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21266, (unsigned long )(& tmp2), (long long )tmp2);
  __CrestApply2(21265, 1, (long long )(tmp1 - tmp2));
  __CrestStore(21268, (unsigned long )(& tmp1));
# 169 "../HPL_pdtrsv.c"
  tmp1 -= tmp2;
  {
  __CrestLoad(21271, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(21270, (unsigned long )0, (long long )1);
  __CrestApply2(21269, 14, (long long )(nprow > 1));
# 170 "../HPL_pdtrsv.c"
  if (nprow > 1) {
    __CrestBranch(21272, 7435, 1);
    {
    __CrestLoad(21276, (unsigned long )0, (long long )0);
    __CrestLoad(21275, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestApply2(21274, 14, (long long )(0 > tmp1));
# 170 "../HPL_pdtrsv.c"
    if (0 > tmp1) {
      __CrestBranch(21277, 7436, 1);
      __CrestLoad(21279, (unsigned long )0, (long long )0);
      __CrestStore(21280, (unsigned long )(& tmp___1));
# 170 "../HPL_pdtrsv.c"
      tmp___1 = 0;
    } else {
      __CrestBranch(21278, 7437, 0);
      __CrestLoad(21281, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestStore(21282, (unsigned long )(& tmp___1));
# 170 "../HPL_pdtrsv.c"
      tmp___1 = tmp1;
    }
    }
    __CrestLoad(21285, (unsigned long )(& nb), (long long )nb);
    __CrestLoad(21284, (unsigned long )(& tmp___1), (long long )tmp___1);
    __CrestApply2(21283, 1, (long long )(nb - tmp___1));
    __CrestStore(21286, (unsigned long )(& inb_____1));
# 170 "../HPL_pdtrsv.c"
    inb_____1 = nb - tmp___1;
    {
    __CrestLoad(21289, (unsigned long )(& inb_____1), (long long )inb_____1);
    __CrestLoad(21288, (unsigned long )0, (long long )0);
    __CrestApply2(21287, 15, (long long )(inb_____1 <= 0));
# 170 "../HPL_pdtrsv.c"
    if (inb_____1 <= 0) {
      __CrestBranch(21290, 7440, 1);
      __CrestLoad(21297, (unsigned long )(& inb_____1), (long long )inb_____1);
      __CrestApply1(21296, 19, (long long )(- inb_____1));
      __CrestLoad(21295, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21294, 3, (long long )(- inb_____1 / nb));
      __CrestLoad(21293, (unsigned long )0, (long long )1);
      __CrestApply2(21292, 0, (long long )(- inb_____1 / nb + 1));
      __CrestStore(21298, (unsigned long )(& nblk_____1));
# 170 "../HPL_pdtrsv.c"
      nblk_____1 = - inb_____1 / nb + 1;
      __CrestLoad(21299, (unsigned long )(& nblk_____1), (long long )nblk_____1);
      __CrestStore(21300, (unsigned long )(& src_____1));
# 170 "../HPL_pdtrsv.c"
      src_____1 = nblk_____1;
      __CrestLoad(21307, (unsigned long )(& src_____1), (long long )src_____1);
      __CrestLoad(21306, (unsigned long )(& src_____1), (long long )src_____1);
      __CrestLoad(21305, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(21304, 3, (long long )(src_____1 / nprow));
      __CrestLoad(21303, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(21302, 2, (long long )((src_____1 / nprow) * nprow));
      __CrestApply2(21301, 1, (long long )(src_____1 - (src_____1 / nprow) * nprow));
      __CrestStore(21308, (unsigned long )(& src_____1));
# 170 "../HPL_pdtrsv.c"
      src_____1 -= (src_____1 / nprow) * nprow;
      __CrestLoad(21313, (unsigned long )(& inb_____1), (long long )inb_____1);
      __CrestLoad(21312, (unsigned long )(& nblk_____1), (long long )nblk_____1);
      __CrestLoad(21311, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21310, 2, (long long )(nblk_____1 * nb));
      __CrestApply2(21309, 0, (long long )(inb_____1 + nblk_____1 * nb));
      __CrestStore(21314, (unsigned long )(& inb_____1));
# 170 "../HPL_pdtrsv.c"
      inb_____1 += nblk_____1 * nb;
      __CrestLoad(21317, (unsigned long )(& tmp2), (long long )tmp2);
      __CrestLoad(21316, (unsigned long )(& inb_____1), (long long )inb_____1);
      __CrestApply2(21315, 1, (long long )(tmp2 - inb_____1));
      __CrestStore(21318, (unsigned long )(& n_____1));
# 170 "../HPL_pdtrsv.c"
      n_____1 = tmp2 - inb_____1;
      {
      __CrestLoad(21321, (unsigned long )(& n_____1), (long long )n_____1);
      __CrestLoad(21320, (unsigned long )0, (long long )0);
      __CrestApply2(21319, 15, (long long )(n_____1 <= 0));
# 170 "../HPL_pdtrsv.c"
      if (n_____1 <= 0) {
        __CrestBranch(21322, 7442, 1);
        {
        __CrestLoad(21326, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21325, (unsigned long )(& src_____1), (long long )src_____1);
        __CrestApply2(21324, 12, (long long )(myrow == src_____1));
# 170 "../HPL_pdtrsv.c"
        if (myrow == src_____1) {
          __CrestBranch(21327, 7443, 1);
          __CrestLoad(21329, (unsigned long )(& tmp2), (long long )tmp2);
          __CrestStore(21330, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
          n1pprev = tmp2;
        } else {
          __CrestBranch(21328, 7444, 0);
          __CrestLoad(21331, (unsigned long )0, (long long )0);
          __CrestStore(21332, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
          n1pprev = 0;
        }
        }
      } else {
        __CrestBranch(21323, 7445, 0);
        __CrestLoad(21335, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21334, (unsigned long )(& src_____1), (long long )src_____1);
        __CrestApply2(21333, 1, (long long )(myrow - src_____1));
        __CrestStore(21336, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
        mydist_____1 = myrow - src_____1;
        {
        __CrestLoad(21339, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21338, (unsigned long )0, (long long )0);
        __CrestApply2(21337, 16, (long long )(mydist_____1 < 0));
# 170 "../HPL_pdtrsv.c"
        if (mydist_____1 < 0) {
          __CrestBranch(21340, 7447, 1);
          __CrestLoad(21344, (unsigned long )(& mydist_____1), (long long )mydist_____1);
          __CrestLoad(21343, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(21342, 0, (long long )(mydist_____1 + nprow));
          __CrestStore(21345, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
          mydist_____1 += nprow;
        } else {
          __CrestBranch(21341, 7448, 0);

        }
        }
        __CrestLoad(21350, (unsigned long )(& n_____1), (long long )n_____1);
        __CrestLoad(21349, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(21348, 3, (long long )(n_____1 / nb));
        __CrestLoad(21347, (unsigned long )0, (long long )1);
        __CrestApply2(21346, 0, (long long )(n_____1 / nb + 1));
        __CrestStore(21351, (unsigned long )(& nblk_____1));
# 170 "../HPL_pdtrsv.c"
        nblk_____1 = n_____1 / nb + 1;
        __CrestLoad(21354, (unsigned long )(& nblk_____1), (long long )nblk_____1);
        __CrestLoad(21353, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21352, 3, (long long )(nblk_____1 / nprow));
        __CrestStore(21355, (unsigned long )(& quot_____1));
# 170 "../HPL_pdtrsv.c"
        quot_____1 = nblk_____1 / nprow;
        __CrestLoad(21362, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21361, (unsigned long )(& nblk_____1), (long long )nblk_____1);
        __CrestLoad(21360, (unsigned long )(& quot_____1), (long long )quot_____1);
        __CrestLoad(21359, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21358, 2, (long long )(quot_____1 * nprow));
        __CrestApply2(21357, 1, (long long )(nblk_____1 - quot_____1 * nprow));
        __CrestApply2(21356, 1, (long long )(mydist_____1 - (nblk_____1 - quot_____1 * nprow)));
        __CrestStore(21363, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
        mydist_____1 -= nblk_____1 - quot_____1 * nprow;
        {
        __CrestLoad(21366, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21365, (unsigned long )0, (long long )0);
        __CrestApply2(21364, 16, (long long )(mydist_____1 < 0));
# 170 "../HPL_pdtrsv.c"
        if (mydist_____1 < 0) {
          __CrestBranch(21367, 7451, 1);
          {
          __CrestLoad(21371, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21370, (unsigned long )(& src_____1), (long long )src_____1);
          __CrestApply2(21369, 13, (long long )(myrow != src_____1));
# 170 "../HPL_pdtrsv.c"
          if (myrow != src_____1) {
            __CrestBranch(21372, 7452, 1);
            __CrestLoad(21378, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21377, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21376, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21375, 2, (long long )(nb * quot_____1));
            __CrestApply2(21374, 0, (long long )(nb + nb * quot_____1));
            __CrestStore(21379, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = nb + nb * quot_____1;
          } else {
            __CrestBranch(21373, 7453, 0);
            __CrestLoad(21384, (unsigned long )(& inb_____1), (long long )inb_____1);
            __CrestLoad(21383, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21382, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21381, 2, (long long )(nb * quot_____1));
            __CrestApply2(21380, 0, (long long )(inb_____1 + nb * quot_____1));
            __CrestStore(21385, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = inb_____1 + nb * quot_____1;
          }
          }
        } else {
          __CrestBranch(21368, 7454, 0);
          {
          __CrestLoad(21388, (unsigned long )(& mydist_____1), (long long )mydist_____1);
          __CrestLoad(21387, (unsigned long )0, (long long )0);
          __CrestApply2(21386, 14, (long long )(mydist_____1 > 0));
# 170 "../HPL_pdtrsv.c"
          if (mydist_____1 > 0) {
            __CrestBranch(21389, 7455, 1);
            __CrestLoad(21393, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21392, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21391, 2, (long long )(nb * quot_____1));
            __CrestStore(21394, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = nb * quot_____1;
          } else {
            __CrestBranch(21390, 7456, 0);
            {
            __CrestLoad(21397, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21396, (unsigned long )(& src_____1), (long long )src_____1);
            __CrestApply2(21395, 13, (long long )(myrow != src_____1));
# 170 "../HPL_pdtrsv.c"
            if (myrow != src_____1) {
              __CrestBranch(21398, 7457, 1);
              __CrestLoad(21408, (unsigned long )(& n_____1), (long long )n_____1);
              __CrestLoad(21407, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(21406, 0, (long long )(n_____1 + nb));
              __CrestLoad(21405, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21404, (unsigned long )(& quot_____1), (long long )quot_____1);
              __CrestLoad(21403, (unsigned long )(& nblk_____1), (long long )nblk_____1);
              __CrestApply2(21402, 1, (long long )(quot_____1 - nblk_____1));
              __CrestApply2(21401, 2, (long long )(nb * (quot_____1 - nblk_____1)));
              __CrestApply2(21400, 0, (long long )((n_____1 + nb) + nb * (quot_____1 - nblk_____1)));
              __CrestStore(21409, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
              n1pprev = (n_____1 + nb) + nb * (quot_____1 - nblk_____1);
            } else {
              __CrestBranch(21399, 7458, 0);
              __CrestLoad(21416, (unsigned long )(& tmp2), (long long )tmp2);
              __CrestLoad(21415, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21414, (unsigned long )(& quot_____1), (long long )quot_____1);
              __CrestLoad(21413, (unsigned long )(& nblk_____1), (long long )nblk_____1);
              __CrestApply2(21412, 1, (long long )(quot_____1 - nblk_____1));
              __CrestApply2(21411, 2, (long long )(nb * (quot_____1 - nblk_____1)));
              __CrestApply2(21410, 0, (long long )(tmp2 + nb * (quot_____1 - nblk_____1)));
              __CrestStore(21417, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
              n1pprev = tmp2 + nb * (quot_____1 - nblk_____1);
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(21291, 7459, 0);
      __CrestLoad(21420, (unsigned long )(& tmp2), (long long )tmp2);
      __CrestLoad(21419, (unsigned long )(& inb_____1), (long long )inb_____1);
      __CrestApply2(21418, 1, (long long )(tmp2 - inb_____1));
      __CrestStore(21421, (unsigned long )(& n_____1));
# 170 "../HPL_pdtrsv.c"
      n_____1 = tmp2 - inb_____1;
      {
      __CrestLoad(21424, (unsigned long )(& n_____1), (long long )n_____1);
      __CrestLoad(21423, (unsigned long )0, (long long )0);
      __CrestApply2(21422, 15, (long long )(n_____1 <= 0));
# 170 "../HPL_pdtrsv.c"
      if (n_____1 <= 0) {
        __CrestBranch(21425, 7461, 1);
        {
        __CrestLoad(21429, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21428, (unsigned long )0, (long long )0);
        __CrestApply2(21427, 12, (long long )(myrow == 0));
# 170 "../HPL_pdtrsv.c"
        if (myrow == 0) {
          __CrestBranch(21430, 7462, 1);
          __CrestLoad(21432, (unsigned long )(& tmp2), (long long )tmp2);
          __CrestStore(21433, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
          n1pprev = tmp2;
        } else {
          __CrestBranch(21431, 7463, 0);
          __CrestLoad(21434, (unsigned long )0, (long long )0);
          __CrestStore(21435, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
          n1pprev = 0;
        }
        }
      } else {
        __CrestBranch(21426, 7464, 0);
        __CrestLoad(21436, (unsigned long )(& myrow), (long long )myrow);
        __CrestStore(21437, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
        mydist_____1 = myrow;
        {
        __CrestLoad(21440, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21439, (unsigned long )0, (long long )0);
        __CrestApply2(21438, 16, (long long )(mydist_____1 < 0));
# 170 "../HPL_pdtrsv.c"
        if (mydist_____1 < 0) {
          __CrestBranch(21441, 7466, 1);
          __CrestLoad(21445, (unsigned long )(& mydist_____1), (long long )mydist_____1);
          __CrestLoad(21444, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(21443, 0, (long long )(mydist_____1 + nprow));
          __CrestStore(21446, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
          mydist_____1 += nprow;
        } else {
          __CrestBranch(21442, 7467, 0);

        }
        }
        __CrestLoad(21451, (unsigned long )(& n_____1), (long long )n_____1);
        __CrestLoad(21450, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(21449, 3, (long long )(n_____1 / nb));
        __CrestLoad(21448, (unsigned long )0, (long long )1);
        __CrestApply2(21447, 0, (long long )(n_____1 / nb + 1));
        __CrestStore(21452, (unsigned long )(& nblk_____1));
# 170 "../HPL_pdtrsv.c"
        nblk_____1 = n_____1 / nb + 1;
        __CrestLoad(21455, (unsigned long )(& nblk_____1), (long long )nblk_____1);
        __CrestLoad(21454, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21453, 3, (long long )(nblk_____1 / nprow));
        __CrestStore(21456, (unsigned long )(& quot_____1));
# 170 "../HPL_pdtrsv.c"
        quot_____1 = nblk_____1 / nprow;
        __CrestLoad(21463, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21462, (unsigned long )(& nblk_____1), (long long )nblk_____1);
        __CrestLoad(21461, (unsigned long )(& quot_____1), (long long )quot_____1);
        __CrestLoad(21460, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21459, 2, (long long )(quot_____1 * nprow));
        __CrestApply2(21458, 1, (long long )(nblk_____1 - quot_____1 * nprow));
        __CrestApply2(21457, 1, (long long )(mydist_____1 - (nblk_____1 - quot_____1 * nprow)));
        __CrestStore(21464, (unsigned long )(& mydist_____1));
# 170 "../HPL_pdtrsv.c"
        mydist_____1 -= nblk_____1 - quot_____1 * nprow;
        {
        __CrestLoad(21467, (unsigned long )(& mydist_____1), (long long )mydist_____1);
        __CrestLoad(21466, (unsigned long )0, (long long )0);
        __CrestApply2(21465, 16, (long long )(mydist_____1 < 0));
# 170 "../HPL_pdtrsv.c"
        if (mydist_____1 < 0) {
          __CrestBranch(21468, 7470, 1);
          {
          __CrestLoad(21472, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21471, (unsigned long )0, (long long )0);
          __CrestApply2(21470, 13, (long long )(myrow != 0));
# 170 "../HPL_pdtrsv.c"
          if (myrow != 0) {
            __CrestBranch(21473, 7471, 1);
            __CrestLoad(21479, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21478, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21477, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21476, 2, (long long )(nb * quot_____1));
            __CrestApply2(21475, 0, (long long )(nb + nb * quot_____1));
            __CrestStore(21480, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = nb + nb * quot_____1;
          } else {
            __CrestBranch(21474, 7472, 0);
            __CrestLoad(21485, (unsigned long )(& inb_____1), (long long )inb_____1);
            __CrestLoad(21484, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21483, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21482, 2, (long long )(nb * quot_____1));
            __CrestApply2(21481, 0, (long long )(inb_____1 + nb * quot_____1));
            __CrestStore(21486, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = inb_____1 + nb * quot_____1;
          }
          }
        } else {
          __CrestBranch(21469, 7473, 0);
          {
          __CrestLoad(21489, (unsigned long )(& mydist_____1), (long long )mydist_____1);
          __CrestLoad(21488, (unsigned long )0, (long long )0);
          __CrestApply2(21487, 14, (long long )(mydist_____1 > 0));
# 170 "../HPL_pdtrsv.c"
          if (mydist_____1 > 0) {
            __CrestBranch(21490, 7474, 1);
            __CrestLoad(21494, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21493, (unsigned long )(& quot_____1), (long long )quot_____1);
            __CrestApply2(21492, 2, (long long )(nb * quot_____1));
            __CrestStore(21495, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
            n1pprev = nb * quot_____1;
          } else {
            __CrestBranch(21491, 7475, 0);
            {
            __CrestLoad(21498, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21497, (unsigned long )0, (long long )0);
            __CrestApply2(21496, 13, (long long )(myrow != 0));
# 170 "../HPL_pdtrsv.c"
            if (myrow != 0) {
              __CrestBranch(21499, 7476, 1);
              __CrestLoad(21509, (unsigned long )(& n_____1), (long long )n_____1);
              __CrestLoad(21508, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(21507, 0, (long long )(n_____1 + nb));
              __CrestLoad(21506, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21505, (unsigned long )(& quot_____1), (long long )quot_____1);
              __CrestLoad(21504, (unsigned long )(& nblk_____1), (long long )nblk_____1);
              __CrestApply2(21503, 1, (long long )(quot_____1 - nblk_____1));
              __CrestApply2(21502, 2, (long long )(nb * (quot_____1 - nblk_____1)));
              __CrestApply2(21501, 0, (long long )((n_____1 + nb) + nb * (quot_____1 - nblk_____1)));
              __CrestStore(21510, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
              n1pprev = (n_____1 + nb) + nb * (quot_____1 - nblk_____1);
            } else {
              __CrestBranch(21500, 7477, 0);
              __CrestLoad(21517, (unsigned long )(& tmp2), (long long )tmp2);
              __CrestLoad(21516, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21515, (unsigned long )(& quot_____1), (long long )quot_____1);
              __CrestLoad(21514, (unsigned long )(& nblk_____1), (long long )nblk_____1);
              __CrestApply2(21513, 1, (long long )(quot_____1 - nblk_____1));
              __CrestApply2(21512, 2, (long long )(nb * (quot_____1 - nblk_____1)));
              __CrestApply2(21511, 0, (long long )(tmp2 + nb * (quot_____1 - nblk_____1)));
              __CrestStore(21518, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
              n1pprev = tmp2 + nb * (quot_____1 - nblk_____1);
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(21273, 7478, 0);
    __CrestLoad(21519, (unsigned long )(& tmp2), (long long )tmp2);
    __CrestStore(21520, (unsigned long )(& n1pprev));
# 170 "../HPL_pdtrsv.c"
    n1pprev = tmp2;
  }
  }
  {
  __CrestLoad(21523, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(21522, (unsigned long )(& Alrow), (long long )Alrow);
  __CrestApply2(21521, 12, (long long )(myrow == Alrow));
# 172 "../HPL_pdtrsv.c"
  if (myrow == Alrow) {
    __CrestBranch(21524, 7480, 1);
    __CrestLoad(21528, (unsigned long )(& Anp), (long long )Anp);
    __CrestLoad(21527, (unsigned long )(& kb), (long long )kb);
    __CrestApply2(21526, 1, (long long )(Anp - kb));
    __CrestStore(21529, (unsigned long )(& Anp));
# 172 "../HPL_pdtrsv.c"
    Anp -= kb;
    __CrestLoad(21530, (unsigned long )(& Anp), (long long )Anp);
    __CrestStore(21531, (unsigned long )(& Anpprev));
# 172 "../HPL_pdtrsv.c"
    Anpprev = Anp;
  } else {
    __CrestBranch(21525, 7481, 0);

  }
  }
  {
  __CrestLoad(21534, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(21533, (unsigned long )(& Alcol), (long long )Alcol);
  __CrestApply2(21532, 12, (long long )(mycol == Alcol));
# 173 "../HPL_pdtrsv.c"
  if (mycol == Alcol) {
    __CrestBranch(21535, 7483, 1);
# 175 "../HPL_pdtrsv.c"
    Aptr -= lda * kb;
# 175 "../HPL_pdtrsv.c"
    Aprev = Aptr;
    __CrestLoad(21539, (unsigned long )(& Anq), (long long )Anq);
    __CrestLoad(21538, (unsigned long )(& kb), (long long )kb);
    __CrestApply2(21537, 1, (long long )(Anq - kb));
    __CrestStore(21540, (unsigned long )(& Anq));
# 175 "../HPL_pdtrsv.c"
    Anq -= kb;
# 175 "../HPL_pdtrsv.c"
    Xd = XR + Anq;
# 175 "../HPL_pdtrsv.c"
    Xdprev = Xd;
    {
    __CrestLoad(21543, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(21542, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestApply2(21541, 12, (long long )(myrow == Alrow));
# 176 "../HPL_pdtrsv.c"
    if (myrow == Alrow) {
      __CrestBranch(21544, 7485, 1);
      __CrestLoad(21546, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
      __CrestLoad(21547, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
      __CrestLoad(21548, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
      __CrestLoad(21549, (unsigned long )0, (long long )((enum HPL_DIAG const )131));
      __CrestLoad(21550, (unsigned long )(& kb), (long long )kb);
      __CrestLoad(21551, (unsigned long )(& lda), (long long )lda);
      __CrestLoad(21552, (unsigned long )0, (long long )((int const )1));
# 178 "../HPL_pdtrsv.c"
      cblas_dtrsv((enum HPL_ORDER const )102, (enum HPL_UPLO const )121, (enum HPL_TRANS const )111,
                  (enum HPL_DIAG const )131, (int const )kb, (double const *)(Aptr + Anp),
                  (int const )lda, XC + Anp, (int const )1);
      __CrestClearStack(21553);
      __CrestLoad(21554, (unsigned long )(& kb), (long long )kb);
      __CrestLoad(21555, (unsigned long )0, (long long )((int const )1));
      __CrestLoad(21556, (unsigned long )0, (long long )((int const )1));
# 180 "../HPL_pdtrsv.c"
      cblas_dcopy((int const )kb, (double const *)(XC + Anp), (int const )1,
                  Xd, (int const )1);
      __CrestClearStack(21557);
    } else {
      __CrestBranch(21545, 7486, 0);

    }
    }
  } else {
    __CrestBranch(21536, 7487, 0);

  }
  }
  __CrestLoad(21558, (unsigned long )(& Alrow), (long long )Alrow);
  __CrestStore(21559, (unsigned long )(& rowprev));
# 184 "../HPL_pdtrsv.c"
  rowprev = Alrow;
  {
  __CrestLoad(21562, (unsigned long )(& Alrow), (long long )Alrow);
  __CrestLoad(21561, (unsigned long )0, (long long )0);
  __CrestApply2(21560, 13, (long long )(Alrow != 0));
# 184 "../HPL_pdtrsv.c"
  if (Alrow != 0) {
    __CrestBranch(21563, 7490, 1);
    __CrestLoad(21567, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestLoad(21566, (unsigned long )0, (long long )1);
    __CrestApply2(21565, 1, (long long )(Alrow - 1));
    __CrestStore(21568, (unsigned long )(& Alrow));
# 184 "../HPL_pdtrsv.c"
    Alrow --;
  } else {
    __CrestBranch(21564, 7491, 0);
    __CrestLoad(21571, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(21570, (unsigned long )0, (long long )1);
    __CrestApply2(21569, 1, (long long )(nprow - 1));
    __CrestStore(21572, (unsigned long )(& Alrow));
# 184 "../HPL_pdtrsv.c"
    Alrow = nprow - 1;
  }
  }
  __CrestLoad(21573, (unsigned long )(& Alcol), (long long )Alcol);
  __CrestStore(21574, (unsigned long )(& colprev));
# 185 "../HPL_pdtrsv.c"
  colprev = Alcol;
  {
  __CrestLoad(21577, (unsigned long )(& Alcol), (long long )Alcol);
  __CrestLoad(21576, (unsigned long )0, (long long )0);
  __CrestApply2(21575, 13, (long long )(Alcol != 0));
# 185 "../HPL_pdtrsv.c"
  if (Alcol != 0) {
    __CrestBranch(21578, 7494, 1);
    __CrestLoad(21582, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestLoad(21581, (unsigned long )0, (long long )1);
    __CrestApply2(21580, 1, (long long )(Alcol - 1));
    __CrestStore(21583, (unsigned long )(& Alcol));
# 185 "../HPL_pdtrsv.c"
    Alcol --;
  } else {
    __CrestBranch(21579, 7495, 0);
    __CrestLoad(21586, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(21585, (unsigned long )0, (long long )1);
    __CrestApply2(21584, 1, (long long )(npcol - 1));
    __CrestStore(21587, (unsigned long )(& Alcol));
# 185 "../HPL_pdtrsv.c"
    Alcol = npcol - 1;
  }
  }
  __CrestLoad(21588, (unsigned long )(& kb), (long long )kb);
  __CrestStore(21589, (unsigned long )(& kbprev));
# 186 "../HPL_pdtrsv.c"
  kbprev = kb;
  __CrestLoad(21592, (unsigned long )(& n), (long long )n);
  __CrestLoad(21591, (unsigned long )(& kb), (long long )kb);
  __CrestApply2(21590, 1, (long long )(n - kb));
  __CrestStore(21593, (unsigned long )(& n));
# 186 "../HPL_pdtrsv.c"
  n -= kb;
  __CrestLoad(21594, (unsigned long )(& nb), (long long )nb);
  __CrestStore(21595, (unsigned long )(& kb));
# 187 "../HPL_pdtrsv.c"
  kb = nb;
  __CrestLoad(21598, (unsigned long )(& n), (long long )n);
  __CrestLoad(21597, (unsigned long )(& kb), (long long )kb);
  __CrestApply2(21596, 1, (long long )(n - kb));
  __CrestStore(21599, (unsigned long )(& tmp1));
# 187 "../HPL_pdtrsv.c"
  tmp1 = n - kb;
  {
  __CrestLoad(21602, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21601, (unsigned long )(& n1), (long long )n1);
  __CrestApply2(21600, 16, (long long )(tmp1 < n1));
# 187 "../HPL_pdtrsv.c"
  if (tmp1 < n1) {
    __CrestBranch(21603, 7498, 1);
    __CrestLoad(21605, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestStore(21606, (unsigned long )(& tmp2));
# 187 "../HPL_pdtrsv.c"
    tmp2 = tmp1;
  } else {
    __CrestBranch(21604, 7499, 0);
    __CrestLoad(21607, (unsigned long )(& n1), (long long )n1);
    __CrestStore(21608, (unsigned long )(& tmp2));
# 187 "../HPL_pdtrsv.c"
    tmp2 = n1;
  }
  }
  __CrestLoad(21611, (unsigned long )(& tmp1), (long long )tmp1);
  __CrestLoad(21610, (unsigned long )(& tmp2), (long long )tmp2);
  __CrestApply2(21609, 1, (long long )(tmp1 - tmp2));
  __CrestStore(21612, (unsigned long )(& tmp1));
# 187 "../HPL_pdtrsv.c"
  tmp1 -= tmp2;
  {
  __CrestLoad(21615, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(21614, (unsigned long )0, (long long )1);
  __CrestApply2(21613, 14, (long long )(nprow > 1));
# 188 "../HPL_pdtrsv.c"
  if (nprow > 1) {
    __CrestBranch(21616, 7502, 1);
    {
    __CrestLoad(21620, (unsigned long )0, (long long )0);
    __CrestLoad(21619, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestApply2(21618, 14, (long long )(0 > tmp1));
# 188 "../HPL_pdtrsv.c"
    if (0 > tmp1) {
      __CrestBranch(21621, 7503, 1);
      __CrestLoad(21623, (unsigned long )0, (long long )0);
      __CrestStore(21624, (unsigned long )(& tmp___2));
# 188 "../HPL_pdtrsv.c"
      tmp___2 = 0;
    } else {
      __CrestBranch(21622, 7504, 0);
      __CrestLoad(21625, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestStore(21626, (unsigned long )(& tmp___2));
# 188 "../HPL_pdtrsv.c"
      tmp___2 = tmp1;
    }
    }
    __CrestLoad(21629, (unsigned long )(& nb), (long long )nb);
    __CrestLoad(21628, (unsigned long )(& tmp___2), (long long )tmp___2);
    __CrestApply2(21627, 1, (long long )(nb - tmp___2));
    __CrestStore(21630, (unsigned long )(& inb_____2));
# 188 "../HPL_pdtrsv.c"
    inb_____2 = nb - tmp___2;
    {
    __CrestLoad(21633, (unsigned long )(& inb_____2), (long long )inb_____2);
    __CrestLoad(21632, (unsigned long )0, (long long )0);
    __CrestApply2(21631, 15, (long long )(inb_____2 <= 0));
# 188 "../HPL_pdtrsv.c"
    if (inb_____2 <= 0) {
      __CrestBranch(21634, 7507, 1);
      __CrestLoad(21641, (unsigned long )(& inb_____2), (long long )inb_____2);
      __CrestApply1(21640, 19, (long long )(- inb_____2));
      __CrestLoad(21639, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21638, 3, (long long )(- inb_____2 / nb));
      __CrestLoad(21637, (unsigned long )0, (long long )1);
      __CrestApply2(21636, 0, (long long )(- inb_____2 / nb + 1));
      __CrestStore(21642, (unsigned long )(& nblk_____2));
# 188 "../HPL_pdtrsv.c"
      nblk_____2 = - inb_____2 / nb + 1;
      __CrestLoad(21643, (unsigned long )(& nblk_____2), (long long )nblk_____2);
      __CrestStore(21644, (unsigned long )(& src_____2));
# 188 "../HPL_pdtrsv.c"
      src_____2 = nblk_____2;
      __CrestLoad(21651, (unsigned long )(& src_____2), (long long )src_____2);
      __CrestLoad(21650, (unsigned long )(& src_____2), (long long )src_____2);
      __CrestLoad(21649, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(21648, 3, (long long )(src_____2 / nprow));
      __CrestLoad(21647, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(21646, 2, (long long )((src_____2 / nprow) * nprow));
      __CrestApply2(21645, 1, (long long )(src_____2 - (src_____2 / nprow) * nprow));
      __CrestStore(21652, (unsigned long )(& src_____2));
# 188 "../HPL_pdtrsv.c"
      src_____2 -= (src_____2 / nprow) * nprow;
      __CrestLoad(21657, (unsigned long )(& inb_____2), (long long )inb_____2);
      __CrestLoad(21656, (unsigned long )(& nblk_____2), (long long )nblk_____2);
      __CrestLoad(21655, (unsigned long )(& nb), (long long )nb);
      __CrestApply2(21654, 2, (long long )(nblk_____2 * nb));
      __CrestApply2(21653, 0, (long long )(inb_____2 + nblk_____2 * nb));
      __CrestStore(21658, (unsigned long )(& inb_____2));
# 188 "../HPL_pdtrsv.c"
      inb_____2 += nblk_____2 * nb;
      __CrestLoad(21661, (unsigned long )(& tmp2), (long long )tmp2);
      __CrestLoad(21660, (unsigned long )(& inb_____2), (long long )inb_____2);
      __CrestApply2(21659, 1, (long long )(tmp2 - inb_____2));
      __CrestStore(21662, (unsigned long )(& n_____2));
# 188 "../HPL_pdtrsv.c"
      n_____2 = tmp2 - inb_____2;
      {
      __CrestLoad(21665, (unsigned long )(& n_____2), (long long )n_____2);
      __CrestLoad(21664, (unsigned long )0, (long long )0);
      __CrestApply2(21663, 15, (long long )(n_____2 <= 0));
# 188 "../HPL_pdtrsv.c"
      if (n_____2 <= 0) {
        __CrestBranch(21666, 7509, 1);
        {
        __CrestLoad(21670, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21669, (unsigned long )(& src_____2), (long long )src_____2);
        __CrestApply2(21668, 12, (long long )(myrow == src_____2));
# 188 "../HPL_pdtrsv.c"
        if (myrow == src_____2) {
          __CrestBranch(21671, 7510, 1);
          __CrestLoad(21673, (unsigned long )(& tmp2), (long long )tmp2);
          __CrestStore(21674, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
          n1p = tmp2;
        } else {
          __CrestBranch(21672, 7511, 0);
          __CrestLoad(21675, (unsigned long )0, (long long )0);
          __CrestStore(21676, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
          n1p = 0;
        }
        }
      } else {
        __CrestBranch(21667, 7512, 0);
        __CrestLoad(21679, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21678, (unsigned long )(& src_____2), (long long )src_____2);
        __CrestApply2(21677, 1, (long long )(myrow - src_____2));
        __CrestStore(21680, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
        mydist_____2 = myrow - src_____2;
        {
        __CrestLoad(21683, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21682, (unsigned long )0, (long long )0);
        __CrestApply2(21681, 16, (long long )(mydist_____2 < 0));
# 188 "../HPL_pdtrsv.c"
        if (mydist_____2 < 0) {
          __CrestBranch(21684, 7514, 1);
          __CrestLoad(21688, (unsigned long )(& mydist_____2), (long long )mydist_____2);
          __CrestLoad(21687, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(21686, 0, (long long )(mydist_____2 + nprow));
          __CrestStore(21689, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
          mydist_____2 += nprow;
        } else {
          __CrestBranch(21685, 7515, 0);

        }
        }
        __CrestLoad(21694, (unsigned long )(& n_____2), (long long )n_____2);
        __CrestLoad(21693, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(21692, 3, (long long )(n_____2 / nb));
        __CrestLoad(21691, (unsigned long )0, (long long )1);
        __CrestApply2(21690, 0, (long long )(n_____2 / nb + 1));
        __CrestStore(21695, (unsigned long )(& nblk_____2));
# 188 "../HPL_pdtrsv.c"
        nblk_____2 = n_____2 / nb + 1;
        __CrestLoad(21698, (unsigned long )(& nblk_____2), (long long )nblk_____2);
        __CrestLoad(21697, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21696, 3, (long long )(nblk_____2 / nprow));
        __CrestStore(21699, (unsigned long )(& quot_____2));
# 188 "../HPL_pdtrsv.c"
        quot_____2 = nblk_____2 / nprow;
        __CrestLoad(21706, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21705, (unsigned long )(& nblk_____2), (long long )nblk_____2);
        __CrestLoad(21704, (unsigned long )(& quot_____2), (long long )quot_____2);
        __CrestLoad(21703, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21702, 2, (long long )(quot_____2 * nprow));
        __CrestApply2(21701, 1, (long long )(nblk_____2 - quot_____2 * nprow));
        __CrestApply2(21700, 1, (long long )(mydist_____2 - (nblk_____2 - quot_____2 * nprow)));
        __CrestStore(21707, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
        mydist_____2 -= nblk_____2 - quot_____2 * nprow;
        {
        __CrestLoad(21710, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21709, (unsigned long )0, (long long )0);
        __CrestApply2(21708, 16, (long long )(mydist_____2 < 0));
# 188 "../HPL_pdtrsv.c"
        if (mydist_____2 < 0) {
          __CrestBranch(21711, 7518, 1);
          {
          __CrestLoad(21715, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21714, (unsigned long )(& src_____2), (long long )src_____2);
          __CrestApply2(21713, 13, (long long )(myrow != src_____2));
# 188 "../HPL_pdtrsv.c"
          if (myrow != src_____2) {
            __CrestBranch(21716, 7519, 1);
            __CrestLoad(21722, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21721, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21720, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21719, 2, (long long )(nb * quot_____2));
            __CrestApply2(21718, 0, (long long )(nb + nb * quot_____2));
            __CrestStore(21723, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = nb + nb * quot_____2;
          } else {
            __CrestBranch(21717, 7520, 0);
            __CrestLoad(21728, (unsigned long )(& inb_____2), (long long )inb_____2);
            __CrestLoad(21727, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21726, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21725, 2, (long long )(nb * quot_____2));
            __CrestApply2(21724, 0, (long long )(inb_____2 + nb * quot_____2));
            __CrestStore(21729, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = inb_____2 + nb * quot_____2;
          }
          }
        } else {
          __CrestBranch(21712, 7521, 0);
          {
          __CrestLoad(21732, (unsigned long )(& mydist_____2), (long long )mydist_____2);
          __CrestLoad(21731, (unsigned long )0, (long long )0);
          __CrestApply2(21730, 14, (long long )(mydist_____2 > 0));
# 188 "../HPL_pdtrsv.c"
          if (mydist_____2 > 0) {
            __CrestBranch(21733, 7522, 1);
            __CrestLoad(21737, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21736, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21735, 2, (long long )(nb * quot_____2));
            __CrestStore(21738, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = nb * quot_____2;
          } else {
            __CrestBranch(21734, 7523, 0);
            {
            __CrestLoad(21741, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21740, (unsigned long )(& src_____2), (long long )src_____2);
            __CrestApply2(21739, 13, (long long )(myrow != src_____2));
# 188 "../HPL_pdtrsv.c"
            if (myrow != src_____2) {
              __CrestBranch(21742, 7524, 1);
              __CrestLoad(21752, (unsigned long )(& n_____2), (long long )n_____2);
              __CrestLoad(21751, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(21750, 0, (long long )(n_____2 + nb));
              __CrestLoad(21749, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21748, (unsigned long )(& quot_____2), (long long )quot_____2);
              __CrestLoad(21747, (unsigned long )(& nblk_____2), (long long )nblk_____2);
              __CrestApply2(21746, 1, (long long )(quot_____2 - nblk_____2));
              __CrestApply2(21745, 2, (long long )(nb * (quot_____2 - nblk_____2)));
              __CrestApply2(21744, 0, (long long )((n_____2 + nb) + nb * (quot_____2 - nblk_____2)));
              __CrestStore(21753, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
              n1p = (n_____2 + nb) + nb * (quot_____2 - nblk_____2);
            } else {
              __CrestBranch(21743, 7525, 0);
              __CrestLoad(21760, (unsigned long )(& tmp2), (long long )tmp2);
              __CrestLoad(21759, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21758, (unsigned long )(& quot_____2), (long long )quot_____2);
              __CrestLoad(21757, (unsigned long )(& nblk_____2), (long long )nblk_____2);
              __CrestApply2(21756, 1, (long long )(quot_____2 - nblk_____2));
              __CrestApply2(21755, 2, (long long )(nb * (quot_____2 - nblk_____2)));
              __CrestApply2(21754, 0, (long long )(tmp2 + nb * (quot_____2 - nblk_____2)));
              __CrestStore(21761, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
              n1p = tmp2 + nb * (quot_____2 - nblk_____2);
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(21635, 7526, 0);
      __CrestLoad(21764, (unsigned long )(& tmp2), (long long )tmp2);
      __CrestLoad(21763, (unsigned long )(& inb_____2), (long long )inb_____2);
      __CrestApply2(21762, 1, (long long )(tmp2 - inb_____2));
      __CrestStore(21765, (unsigned long )(& n_____2));
# 188 "../HPL_pdtrsv.c"
      n_____2 = tmp2 - inb_____2;
      {
      __CrestLoad(21768, (unsigned long )(& n_____2), (long long )n_____2);
      __CrestLoad(21767, (unsigned long )0, (long long )0);
      __CrestApply2(21766, 15, (long long )(n_____2 <= 0));
# 188 "../HPL_pdtrsv.c"
      if (n_____2 <= 0) {
        __CrestBranch(21769, 7528, 1);
        {
        __CrestLoad(21773, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21772, (unsigned long )0, (long long )0);
        __CrestApply2(21771, 12, (long long )(myrow == 0));
# 188 "../HPL_pdtrsv.c"
        if (myrow == 0) {
          __CrestBranch(21774, 7529, 1);
          __CrestLoad(21776, (unsigned long )(& tmp2), (long long )tmp2);
          __CrestStore(21777, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
          n1p = tmp2;
        } else {
          __CrestBranch(21775, 7530, 0);
          __CrestLoad(21778, (unsigned long )0, (long long )0);
          __CrestStore(21779, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
          n1p = 0;
        }
        }
      } else {
        __CrestBranch(21770, 7531, 0);
        __CrestLoad(21780, (unsigned long )(& myrow), (long long )myrow);
        __CrestStore(21781, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
        mydist_____2 = myrow;
        {
        __CrestLoad(21784, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21783, (unsigned long )0, (long long )0);
        __CrestApply2(21782, 16, (long long )(mydist_____2 < 0));
# 188 "../HPL_pdtrsv.c"
        if (mydist_____2 < 0) {
          __CrestBranch(21785, 7533, 1);
          __CrestLoad(21789, (unsigned long )(& mydist_____2), (long long )mydist_____2);
          __CrestLoad(21788, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(21787, 0, (long long )(mydist_____2 + nprow));
          __CrestStore(21790, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
          mydist_____2 += nprow;
        } else {
          __CrestBranch(21786, 7534, 0);

        }
        }
        __CrestLoad(21795, (unsigned long )(& n_____2), (long long )n_____2);
        __CrestLoad(21794, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(21793, 3, (long long )(n_____2 / nb));
        __CrestLoad(21792, (unsigned long )0, (long long )1);
        __CrestApply2(21791, 0, (long long )(n_____2 / nb + 1));
        __CrestStore(21796, (unsigned long )(& nblk_____2));
# 188 "../HPL_pdtrsv.c"
        nblk_____2 = n_____2 / nb + 1;
        __CrestLoad(21799, (unsigned long )(& nblk_____2), (long long )nblk_____2);
        __CrestLoad(21798, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21797, 3, (long long )(nblk_____2 / nprow));
        __CrestStore(21800, (unsigned long )(& quot_____2));
# 188 "../HPL_pdtrsv.c"
        quot_____2 = nblk_____2 / nprow;
        __CrestLoad(21807, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21806, (unsigned long )(& nblk_____2), (long long )nblk_____2);
        __CrestLoad(21805, (unsigned long )(& quot_____2), (long long )quot_____2);
        __CrestLoad(21804, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(21803, 2, (long long )(quot_____2 * nprow));
        __CrestApply2(21802, 1, (long long )(nblk_____2 - quot_____2 * nprow));
        __CrestApply2(21801, 1, (long long )(mydist_____2 - (nblk_____2 - quot_____2 * nprow)));
        __CrestStore(21808, (unsigned long )(& mydist_____2));
# 188 "../HPL_pdtrsv.c"
        mydist_____2 -= nblk_____2 - quot_____2 * nprow;
        {
        __CrestLoad(21811, (unsigned long )(& mydist_____2), (long long )mydist_____2);
        __CrestLoad(21810, (unsigned long )0, (long long )0);
        __CrestApply2(21809, 16, (long long )(mydist_____2 < 0));
# 188 "../HPL_pdtrsv.c"
        if (mydist_____2 < 0) {
          __CrestBranch(21812, 7537, 1);
          {
          __CrestLoad(21816, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21815, (unsigned long )0, (long long )0);
          __CrestApply2(21814, 13, (long long )(myrow != 0));
# 188 "../HPL_pdtrsv.c"
          if (myrow != 0) {
            __CrestBranch(21817, 7538, 1);
            __CrestLoad(21823, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21822, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21821, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21820, 2, (long long )(nb * quot_____2));
            __CrestApply2(21819, 0, (long long )(nb + nb * quot_____2));
            __CrestStore(21824, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = nb + nb * quot_____2;
          } else {
            __CrestBranch(21818, 7539, 0);
            __CrestLoad(21829, (unsigned long )(& inb_____2), (long long )inb_____2);
            __CrestLoad(21828, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21827, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21826, 2, (long long )(nb * quot_____2));
            __CrestApply2(21825, 0, (long long )(inb_____2 + nb * quot_____2));
            __CrestStore(21830, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = inb_____2 + nb * quot_____2;
          }
          }
        } else {
          __CrestBranch(21813, 7540, 0);
          {
          __CrestLoad(21833, (unsigned long )(& mydist_____2), (long long )mydist_____2);
          __CrestLoad(21832, (unsigned long )0, (long long )0);
          __CrestApply2(21831, 14, (long long )(mydist_____2 > 0));
# 188 "../HPL_pdtrsv.c"
          if (mydist_____2 > 0) {
            __CrestBranch(21834, 7541, 1);
            __CrestLoad(21838, (unsigned long )(& nb), (long long )nb);
            __CrestLoad(21837, (unsigned long )(& quot_____2), (long long )quot_____2);
            __CrestApply2(21836, 2, (long long )(nb * quot_____2));
            __CrestStore(21839, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
            n1p = nb * quot_____2;
          } else {
            __CrestBranch(21835, 7542, 0);
            {
            __CrestLoad(21842, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21841, (unsigned long )0, (long long )0);
            __CrestApply2(21840, 13, (long long )(myrow != 0));
# 188 "../HPL_pdtrsv.c"
            if (myrow != 0) {
              __CrestBranch(21843, 7543, 1);
              __CrestLoad(21853, (unsigned long )(& n_____2), (long long )n_____2);
              __CrestLoad(21852, (unsigned long )(& nb), (long long )nb);
              __CrestApply2(21851, 0, (long long )(n_____2 + nb));
              __CrestLoad(21850, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21849, (unsigned long )(& quot_____2), (long long )quot_____2);
              __CrestLoad(21848, (unsigned long )(& nblk_____2), (long long )nblk_____2);
              __CrestApply2(21847, 1, (long long )(quot_____2 - nblk_____2));
              __CrestApply2(21846, 2, (long long )(nb * (quot_____2 - nblk_____2)));
              __CrestApply2(21845, 0, (long long )((n_____2 + nb) + nb * (quot_____2 - nblk_____2)));
              __CrestStore(21854, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
              n1p = (n_____2 + nb) + nb * (quot_____2 - nblk_____2);
            } else {
              __CrestBranch(21844, 7544, 0);
              __CrestLoad(21861, (unsigned long )(& tmp2), (long long )tmp2);
              __CrestLoad(21860, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(21859, (unsigned long )(& quot_____2), (long long )quot_____2);
              __CrestLoad(21858, (unsigned long )(& nblk_____2), (long long )nblk_____2);
              __CrestApply2(21857, 1, (long long )(quot_____2 - nblk_____2));
              __CrestApply2(21856, 2, (long long )(nb * (quot_____2 - nblk_____2)));
              __CrestApply2(21855, 0, (long long )(tmp2 + nb * (quot_____2 - nblk_____2)));
              __CrestStore(21862, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
              n1p = tmp2 + nb * (quot_____2 - nblk_____2);
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(21617, 7545, 0);
    __CrestLoad(21863, (unsigned long )(& tmp2), (long long )tmp2);
    __CrestStore(21864, (unsigned long )(& n1p));
# 188 "../HPL_pdtrsv.c"
    n1p = tmp2;
  }
  }
  {
# 192 "../HPL_pdtrsv.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(21867, (unsigned long )(& n), (long long )n);
    __CrestLoad(21866, (unsigned long )0, (long long )0);
    __CrestApply2(21865, 14, (long long )(n > 0));
# 192 "../HPL_pdtrsv.c"
    if (n > 0) {
      __CrestBranch(21868, 7550, 1);

    } else {
      __CrestBranch(21869, 7551, 0);
# 192 "../HPL_pdtrsv.c"
      goto while_break___0;
    }
    }
    {
    __CrestLoad(21872, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(21871, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestApply2(21870, 12, (long long )(mycol == Alcol));
# 194 "../HPL_pdtrsv.c"
    if (mycol == Alcol) {
      __CrestBranch(21873, 7553, 1);
# 194 "../HPL_pdtrsv.c"
      Aptr -= lda * kb;
      __CrestLoad(21877, (unsigned long )(& Anq), (long long )Anq);
      __CrestLoad(21876, (unsigned long )(& kb), (long long )kb);
      __CrestApply2(21875, 1, (long long )(Anq - kb));
      __CrestStore(21878, (unsigned long )(& Anq));
# 194 "../HPL_pdtrsv.c"
      Anq -= kb;
# 194 "../HPL_pdtrsv.c"
      Xd = XR + Anq;
    } else {
      __CrestBranch(21874, 7554, 0);

    }
    }
    {
    __CrestLoad(21881, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(21880, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestApply2(21879, 12, (long long )(myrow == Alrow));
# 195 "../HPL_pdtrsv.c"
    if (myrow == Alrow) {
      __CrestBranch(21882, 7556, 1);
      __CrestLoad(21886, (unsigned long )(& Anp), (long long )Anp);
      __CrestLoad(21885, (unsigned long )(& kb), (long long )kb);
      __CrestApply2(21884, 1, (long long )(Anp - kb));
      __CrestStore(21887, (unsigned long )(& Anp));
# 195 "../HPL_pdtrsv.c"
      Anp -= kb;
    } else {
      __CrestBranch(21883, 7557, 0);

    }
    }
    {
    __CrestLoad(21890, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(21889, (unsigned long )(& colprev), (long long )colprev);
    __CrestApply2(21888, 12, (long long )(mycol == colprev));
# 201 "../HPL_pdtrsv.c"
    if (mycol == colprev) {
      __CrestBranch(21891, 7559, 1);
      {
      __CrestLoad(21895, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(21894, (unsigned long )(& rowprev), (long long )rowprev);
      __CrestApply2(21893, 12, (long long )(myrow == rowprev));
# 206 "../HPL_pdtrsv.c"
      if (myrow == rowprev) {
        __CrestBranch(21896, 7560, 1);
        {
        __CrestLoad(21900, (unsigned long )(& GridIsNot1xQ), (long long )GridIsNot1xQ);
        __CrestLoad(21899, (unsigned long )0, (long long )0);
        __CrestApply2(21898, 13, (long long )(GridIsNot1xQ != 0));
# 208 "../HPL_pdtrsv.c"
        if (GridIsNot1xQ != 0) {
          __CrestBranch(21901, 7561, 1);
          {
          __CrestLoad(21905, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21904, (unsigned long )0, (long long )0);
          __CrestApply2(21903, 13, (long long )(myrow != 0));
# 209 "../HPL_pdtrsv.c"
          if (myrow != 0) {
            __CrestBranch(21906, 7562, 1);
            __CrestLoad(21910, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21909, (unsigned long )0, (long long )1);
            __CrestApply2(21908, 1, (long long )(myrow - 1));
            __CrestStore(21911, (unsigned long )(& tmp___3));
# 209 "../HPL_pdtrsv.c"
            tmp___3 = myrow - 1;
          } else {
            __CrestBranch(21907, 7563, 0);
            __CrestLoad(21914, (unsigned long )(& nprow), (long long )nprow);
            __CrestLoad(21913, (unsigned long )0, (long long )1);
            __CrestApply2(21912, 1, (long long )(nprow - 1));
            __CrestStore(21915, (unsigned long )(& tmp___3));
# 209 "../HPL_pdtrsv.c"
            tmp___3 = nprow - 1;
          }
          }
          __CrestLoad(21916, (unsigned long )(& kbprev), (long long )kbprev);
          __CrestLoad(21917, (unsigned long )(& tmp___3), (long long )tmp___3);
          __CrestLoad(21918, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(21919, (unsigned long )(& Ccomm), (long long )Ccomm);
# 209 "../HPL_pdtrsv.c"
          HPL_send(Xdprev, kbprev, tmp___3, Cmsgid, Ccomm);
          __CrestClearStack(21920);
        } else {
          __CrestBranch(21902, 7565, 0);

        }
        }
      } else {
        __CrestBranch(21897, 7566, 0);
        {
        __CrestLoad(21925, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21924, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(21923, (unsigned long )0, (long long )1);
        __CrestApply2(21922, 1, (long long )(nprow - 1));
        __CrestApply2(21921, 13, (long long )(myrow != nprow - 1));
# 214 "../HPL_pdtrsv.c"
        if (myrow != nprow - 1) {
          __CrestBranch(21926, 7567, 1);
          __CrestLoad(21930, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21929, (unsigned long )0, (long long )1);
          __CrestApply2(21928, 0, (long long )(myrow + 1));
          __CrestStore(21931, (unsigned long )(& tmp___4));
# 214 "../HPL_pdtrsv.c"
          tmp___4 = myrow + 1;
        } else {
          __CrestBranch(21927, 7568, 0);
          __CrestLoad(21932, (unsigned long )0, (long long )0);
          __CrestStore(21933, (unsigned long )(& tmp___4));
# 214 "../HPL_pdtrsv.c"
          tmp___4 = 0;
        }
        }
        __CrestLoad(21934, (unsigned long )(& kbprev), (long long )kbprev);
        __CrestLoad(21935, (unsigned long )(& tmp___4), (long long )tmp___4);
        __CrestLoad(21936, (unsigned long )(& Cmsgid), (long long )Cmsgid);
        __CrestLoad(21937, (unsigned long )(& Ccomm), (long long )Ccomm);
# 214 "../HPL_pdtrsv.c"
        HPL_recv(Xdprev, kbprev, tmp___4, Cmsgid, Ccomm);
        __CrestClearStack(21938);
      }
      }
      {
      __CrestLoad(21941, (unsigned long )(& n1pprev), (long long )n1pprev);
      __CrestLoad(21940, (unsigned long )0, (long long )0);
      __CrestApply2(21939, 14, (long long )(n1pprev > 0));
# 221 "../HPL_pdtrsv.c"
      if (n1pprev > 0) {
        __CrestBranch(21942, 7571, 1);
        __CrestLoad(21946, (unsigned long )(& Anpprev), (long long )Anpprev);
        __CrestLoad(21945, (unsigned long )(& n1pprev), (long long )n1pprev);
        __CrestApply2(21944, 1, (long long )(Anpprev - n1pprev));
        __CrestStore(21947, (unsigned long )(& tmp1));
# 223 "../HPL_pdtrsv.c"
        tmp1 = Anpprev - n1pprev;
        __CrestLoad(21948, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(21949, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(21950, (unsigned long )(& n1pprev), (long long )n1pprev);
        __CrestLoad(21951, (unsigned long )(& kbprev), (long long )kbprev);
        __CrestLoad(21952, (unsigned long )(& lda), (long long )lda);
        __CrestLoad(21953, (unsigned long )0, (long long )((int const )1));
        __CrestLoad(21954, (unsigned long )0, (long long )((int const )1));
# 224 "../HPL_pdtrsv.c"
        cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )n1pprev,
                    (int const )kbprev, (double const )(- 1.0), (double const *)(Aprev + tmp1),
                    (int const )lda, (double const *)Xdprev, (int const )1,
                    (double const )1.0, XC + tmp1, (int const )1);
        __CrestClearStack(21955);
        {
        __CrestLoad(21958, (unsigned long )(& GridIsNotPx1), (long long )GridIsNotPx1);
        __CrestLoad(21957, (unsigned long )0, (long long )0);
        __CrestApply2(21956, 13, (long long )(GridIsNotPx1 != 0));
# 227 "../HPL_pdtrsv.c"
        if (GridIsNotPx1 != 0) {
          __CrestBranch(21959, 7573, 1);
          __CrestLoad(21961, (unsigned long )(& n1pprev), (long long )n1pprev);
          __CrestLoad(21962, (unsigned long )(& Alcol), (long long )Alcol);
          __CrestLoad(21963, (unsigned long )(& Rmsgid), (long long )Rmsgid);
          __CrestLoad(21964, (unsigned long )(& Rcomm), (long long )Rcomm);
# 228 "../HPL_pdtrsv.c"
          HPL_send(XC + tmp1, n1pprev, Alcol, Rmsgid, Rcomm);
          __CrestClearStack(21965);
        } else {
          __CrestBranch(21960, 7574, 0);

        }
        }
      } else {
        __CrestBranch(21943, 7575, 0);

      }
      }
      {
      __CrestLoad(21968, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(21967, (unsigned long )(& rowprev), (long long )rowprev);
      __CrestApply2(21966, 13, (long long )(myrow != rowprev));
# 234 "../HPL_pdtrsv.c"
      if (myrow != rowprev) {
        __CrestBranch(21969, 7577, 1);
        {
        __CrestLoad(21975, (unsigned long )(& rowprev), (long long )rowprev);
        __CrestLoad(21974, (unsigned long )(& nprow), (long long )nprow);
        __CrestLoad(21973, (unsigned long )0, (long long )1);
        __CrestApply2(21972, 1, (long long )(nprow - 1));
        __CrestApply2(21971, 13, (long long )(rowprev != nprow - 1));
# 234 "../HPL_pdtrsv.c"
        if (rowprev != nprow - 1) {
          __CrestBranch(21976, 7578, 1);
          __CrestLoad(21980, (unsigned long )(& rowprev), (long long )rowprev);
          __CrestLoad(21979, (unsigned long )0, (long long )1);
          __CrestApply2(21978, 0, (long long )(rowprev + 1));
          __CrestStore(21981, (unsigned long )(& tmp___6));
# 234 "../HPL_pdtrsv.c"
          tmp___6 = rowprev + 1;
        } else {
          __CrestBranch(21977, 7579, 0);
          __CrestLoad(21982, (unsigned long )0, (long long )0);
          __CrestStore(21983, (unsigned long )(& tmp___6));
# 234 "../HPL_pdtrsv.c"
          tmp___6 = 0;
        }
        }
        {
        __CrestLoad(21986, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(21985, (unsigned long )(& tmp___6), (long long )tmp___6);
        __CrestApply2(21984, 13, (long long )(myrow != tmp___6));
# 234 "../HPL_pdtrsv.c"
        if (myrow != tmp___6) {
          __CrestBranch(21987, 7581, 1);
          {
          __CrestLoad(21991, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(21990, (unsigned long )0, (long long )0);
          __CrestApply2(21989, 13, (long long )(myrow != 0));
# 236 "../HPL_pdtrsv.c"
          if (myrow != 0) {
            __CrestBranch(21992, 7582, 1);
            __CrestLoad(21996, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(21995, (unsigned long )0, (long long )1);
            __CrestApply2(21994, 1, (long long )(myrow - 1));
            __CrestStore(21997, (unsigned long )(& tmp___5));
# 236 "../HPL_pdtrsv.c"
            tmp___5 = myrow - 1;
          } else {
            __CrestBranch(21993, 7583, 0);
            __CrestLoad(22000, (unsigned long )(& nprow), (long long )nprow);
            __CrestLoad(21999, (unsigned long )0, (long long )1);
            __CrestApply2(21998, 1, (long long )(nprow - 1));
            __CrestStore(22001, (unsigned long )(& tmp___5));
# 236 "../HPL_pdtrsv.c"
            tmp___5 = nprow - 1;
          }
          }
          __CrestLoad(22002, (unsigned long )(& kbprev), (long long )kbprev);
          __CrestLoad(22003, (unsigned long )(& tmp___5), (long long )tmp___5);
          __CrestLoad(22004, (unsigned long )(& Cmsgid), (long long )Cmsgid);
          __CrestLoad(22005, (unsigned long )(& Ccomm), (long long )Ccomm);
# 236 "../HPL_pdtrsv.c"
          HPL_send(Xdprev, kbprev, tmp___5, Cmsgid, Ccomm);
          __CrestClearStack(22006);
        } else {
          __CrestBranch(21988, 7585, 0);

        }
        }
      } else {
        __CrestBranch(21970, 7586, 0);

      }
      }
    } else {
      __CrestBranch(21892, 7587, 0);
      {
      __CrestLoad(22009, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(22008, (unsigned long )(& Alcol), (long long )Alcol);
      __CrestApply2(22007, 12, (long long )(mycol == Alcol));
# 239 "../HPL_pdtrsv.c"
      if (mycol == Alcol) {
        __CrestBranch(22010, 7588, 1);
        {
        __CrestLoad(22014, (unsigned long )(& n1pprev), (long long )n1pprev);
        __CrestLoad(22013, (unsigned long )0, (long long )0);
        __CrestApply2(22012, 14, (long long )(n1pprev > 0));
# 245 "../HPL_pdtrsv.c"
        if (n1pprev > 0) {
          __CrestBranch(22015, 7589, 1);
          __CrestLoad(22017, (unsigned long )(& n1pprev), (long long )n1pprev);
          __CrestLoad(22018, (unsigned long )(& colprev), (long long )colprev);
          __CrestLoad(22019, (unsigned long )(& Rmsgid), (long long )Rmsgid);
          __CrestLoad(22020, (unsigned long )(& Rcomm), (long long )Rcomm);
# 247 "../HPL_pdtrsv.c"
          HPL_recv(W, n1pprev, colprev, Rmsgid, Rcomm);
          __CrestClearStack(22021);
          __CrestLoad(22022, (unsigned long )(& n1pprev), (long long )n1pprev);
          __CrestLoad(22023, (unsigned long )0, (long long )((int const )1));
          __CrestLoad(22024, (unsigned long )0, (long long )((int const )1));
# 248 "../HPL_pdtrsv.c"
          cblas_daxpy((int const )n1pprev, (double const )1.0, (double const *)W,
                      (int const )1, (XC + Anpprev) - n1pprev, (int const )1);
          __CrestClearStack(22025);
        } else {
          __CrestBranch(22016, 7590, 0);

        }
        }
      } else {
        __CrestBranch(22011, 7591, 0);

      }
      }
    }
    }
    {
    __CrestLoad(22028, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22027, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestApply2(22026, 12, (long long )(mycol == Alcol));
# 254 "../HPL_pdtrsv.c"
    if (mycol == Alcol) {
      __CrestBranch(22029, 7593, 1);
      {
      __CrestLoad(22033, (unsigned long )(& myrow), (long long )myrow);
      __CrestLoad(22032, (unsigned long )(& Alrow), (long long )Alrow);
      __CrestApply2(22031, 12, (long long )(myrow == Alrow));
# 254 "../HPL_pdtrsv.c"
      if (myrow == Alrow) {
        __CrestBranch(22034, 7594, 1);
        __CrestLoad(22036, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(22037, (unsigned long )0, (long long )((enum HPL_UPLO const )121));
        __CrestLoad(22038, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(22039, (unsigned long )0, (long long )((enum HPL_DIAG const )131));
        __CrestLoad(22040, (unsigned long )(& kb), (long long )kb);
        __CrestLoad(22041, (unsigned long )(& lda), (long long )lda);
        __CrestLoad(22042, (unsigned long )0, (long long )((int const )1));
# 256 "../HPL_pdtrsv.c"
        cblas_dtrsv((enum HPL_ORDER const )102, (enum HPL_UPLO const )121, (enum HPL_TRANS const )111,
                    (enum HPL_DIAG const )131, (int const )kb, (double const *)(Aptr + Anp),
                    (int const )lda, XC + Anp, (int const )1);
        __CrestClearStack(22043);
        __CrestLoad(22044, (unsigned long )(& kb), (long long )kb);
        __CrestLoad(22045, (unsigned long )0, (long long )((int const )1));
        __CrestLoad(22046, (unsigned long )0, (long long )((int const )1));
# 258 "../HPL_pdtrsv.c"
        cblas_dcopy((int const )kb, (double const *)(XC + Anp), (int const )1,
                    XR + Anq, (int const )1);
        __CrestClearStack(22047);
      } else {
        __CrestBranch(22035, 7595, 0);

      }
      }
    } else {
      __CrestBranch(22030, 7596, 0);

    }
    }
    {
    __CrestLoad(22050, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22049, (unsigned long )(& colprev), (long long )colprev);
    __CrestApply2(22048, 12, (long long )(mycol == colprev));
# 263 "../HPL_pdtrsv.c"
    if (mycol == colprev) {
      __CrestBranch(22051, 7598, 1);
      __CrestLoad(22055, (unsigned long )(& Anpprev), (long long )Anpprev);
      __CrestLoad(22054, (unsigned long )(& n1pprev), (long long )n1pprev);
      __CrestApply2(22053, 1, (long long )(Anpprev - n1pprev));
      __CrestStore(22056, (unsigned long )(& tmp1));
# 263 "../HPL_pdtrsv.c"
      tmp1 = Anpprev - n1pprev;
      {
      __CrestLoad(22059, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestLoad(22058, (unsigned long )0, (long long )0);
      __CrestApply2(22057, 14, (long long )(tmp1 > 0));
# 263 "../HPL_pdtrsv.c"
      if (tmp1 > 0) {
        __CrestBranch(22060, 7600, 1);
        __CrestLoad(22062, (unsigned long )0, (long long )((enum HPL_ORDER const )102));
        __CrestLoad(22063, (unsigned long )0, (long long )((enum HPL_TRANS const )111));
        __CrestLoad(22064, (unsigned long )(& tmp1), (long long )tmp1);
        __CrestLoad(22065, (unsigned long )(& kbprev), (long long )kbprev);
        __CrestLoad(22066, (unsigned long )(& lda), (long long )lda);
        __CrestLoad(22067, (unsigned long )0, (long long )((int const )1));
        __CrestLoad(22068, (unsigned long )0, (long long )((int const )1));
# 264 "../HPL_pdtrsv.c"
        cblas_dgemv((enum HPL_ORDER const )102, (enum HPL_TRANS const )111, (int const )tmp1,
                    (int const )kbprev, (double const )(- 1.0), (double const *)Aprev,
                    (int const )lda, (double const *)Xdprev, (int const )1,
                    (double const )1.0, XC, (int const )1);
        __CrestClearStack(22069);
      } else {
        __CrestBranch(22061, 7601, 0);

      }
      }
    } else {
      __CrestBranch(22052, 7602, 0);

    }
    }
    {
    __CrestLoad(22072, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22071, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestApply2(22070, 12, (long long )(mycol == Alcol));
# 269 "../HPL_pdtrsv.c"
    if (mycol == Alcol) {
      __CrestBranch(22073, 7604, 1);
# 269 "../HPL_pdtrsv.c"
      Xdprev = Xd;
# 269 "../HPL_pdtrsv.c"
      Aprev = Aptr;
    } else {
      __CrestBranch(22074, 7605, 0);

    }
    }
    {
    __CrestLoad(22077, (unsigned long )(& myrow), (long long )myrow);
    __CrestLoad(22076, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestApply2(22075, 12, (long long )(myrow == Alrow));
# 270 "../HPL_pdtrsv.c"
    if (myrow == Alrow) {
      __CrestBranch(22078, 7607, 1);
      __CrestLoad(22082, (unsigned long )(& Anpprev), (long long )Anpprev);
      __CrestLoad(22081, (unsigned long )(& kb), (long long )kb);
      __CrestApply2(22080, 1, (long long )(Anpprev - kb));
      __CrestStore(22083, (unsigned long )(& Anpprev));
# 270 "../HPL_pdtrsv.c"
      Anpprev -= kb;
    } else {
      __CrestBranch(22079, 7608, 0);

    }
    }
    __CrestLoad(22084, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestStore(22085, (unsigned long )(& rowprev));
# 271 "../HPL_pdtrsv.c"
    rowprev = Alrow;
    __CrestLoad(22086, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestStore(22087, (unsigned long )(& colprev));
# 271 "../HPL_pdtrsv.c"
    colprev = Alcol;
    __CrestLoad(22088, (unsigned long )(& n1p), (long long )n1p);
    __CrestStore(22089, (unsigned long )(& n1pprev));
# 272 "../HPL_pdtrsv.c"
    n1pprev = n1p;
    __CrestLoad(22090, (unsigned long )(& kb), (long long )kb);
    __CrestStore(22091, (unsigned long )(& kbprev));
# 272 "../HPL_pdtrsv.c"
    kbprev = kb;
    __CrestLoad(22094, (unsigned long )(& n), (long long )n);
    __CrestLoad(22093, (unsigned long )(& kb), (long long )kb);
    __CrestApply2(22092, 1, (long long )(n - kb));
    __CrestStore(22095, (unsigned long )(& n));
# 272 "../HPL_pdtrsv.c"
    n -= kb;
    {
    __CrestLoad(22098, (unsigned long )(& Alrow), (long long )Alrow);
    __CrestLoad(22097, (unsigned long )0, (long long )0);
    __CrestApply2(22096, 13, (long long )(Alrow != 0));
# 273 "../HPL_pdtrsv.c"
    if (Alrow != 0) {
      __CrestBranch(22099, 7611, 1);
      __CrestLoad(22103, (unsigned long )(& Alrow), (long long )Alrow);
      __CrestLoad(22102, (unsigned long )0, (long long )1);
      __CrestApply2(22101, 1, (long long )(Alrow - 1));
      __CrestStore(22104, (unsigned long )(& Alrow));
# 273 "../HPL_pdtrsv.c"
      Alrow --;
    } else {
      __CrestBranch(22100, 7612, 0);
      __CrestLoad(22107, (unsigned long )(& nprow), (long long )nprow);
      __CrestLoad(22106, (unsigned long )0, (long long )1);
      __CrestApply2(22105, 1, (long long )(nprow - 1));
      __CrestStore(22108, (unsigned long )(& Alrow));
# 273 "../HPL_pdtrsv.c"
      Alrow = nprow - 1;
    }
    }
    {
    __CrestLoad(22111, (unsigned long )(& Alcol), (long long )Alcol);
    __CrestLoad(22110, (unsigned long )0, (long long )0);
    __CrestApply2(22109, 13, (long long )(Alcol != 0));
# 273 "../HPL_pdtrsv.c"
    if (Alcol != 0) {
      __CrestBranch(22112, 7614, 1);
      __CrestLoad(22116, (unsigned long )(& Alcol), (long long )Alcol);
      __CrestLoad(22115, (unsigned long )0, (long long )1);
      __CrestApply2(22114, 1, (long long )(Alcol - 1));
      __CrestStore(22117, (unsigned long )(& Alcol));
# 273 "../HPL_pdtrsv.c"
      Alcol --;
    } else {
      __CrestBranch(22113, 7615, 0);
      __CrestLoad(22120, (unsigned long )(& npcol), (long long )npcol);
      __CrestLoad(22119, (unsigned long )0, (long long )1);
      __CrestApply2(22118, 1, (long long )(npcol - 1));
      __CrestStore(22121, (unsigned long )(& Alcol));
# 273 "../HPL_pdtrsv.c"
      Alcol = npcol - 1;
    }
    }
    __CrestLoad(22122, (unsigned long )(& nb), (long long )nb);
    __CrestStore(22123, (unsigned long )(& kb));
# 274 "../HPL_pdtrsv.c"
    kb = nb;
    __CrestLoad(22126, (unsigned long )(& n), (long long )n);
    __CrestLoad(22125, (unsigned long )(& kb), (long long )kb);
    __CrestApply2(22124, 1, (long long )(n - kb));
    __CrestStore(22127, (unsigned long )(& tmp1));
# 274 "../HPL_pdtrsv.c"
    tmp1 = n - kb;
    {
    __CrestLoad(22130, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestLoad(22129, (unsigned long )(& n1), (long long )n1);
    __CrestApply2(22128, 16, (long long )(tmp1 < n1));
# 274 "../HPL_pdtrsv.c"
    if (tmp1 < n1) {
      __CrestBranch(22131, 7618, 1);
      __CrestLoad(22133, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestStore(22134, (unsigned long )(& tmp2));
# 274 "../HPL_pdtrsv.c"
      tmp2 = tmp1;
    } else {
      __CrestBranch(22132, 7619, 0);
      __CrestLoad(22135, (unsigned long )(& n1), (long long )n1);
      __CrestStore(22136, (unsigned long )(& tmp2));
# 274 "../HPL_pdtrsv.c"
      tmp2 = n1;
    }
    }
    __CrestLoad(22139, (unsigned long )(& tmp1), (long long )tmp1);
    __CrestLoad(22138, (unsigned long )(& tmp2), (long long )tmp2);
    __CrestApply2(22137, 1, (long long )(tmp1 - tmp2));
    __CrestStore(22140, (unsigned long )(& tmp1));
# 274 "../HPL_pdtrsv.c"
    tmp1 -= tmp2;
    {
    __CrestLoad(22143, (unsigned long )(& nprow), (long long )nprow);
    __CrestLoad(22142, (unsigned long )0, (long long )1);
    __CrestApply2(22141, 14, (long long )(nprow > 1));
# 275 "../HPL_pdtrsv.c"
    if (nprow > 1) {
      __CrestBranch(22144, 7622, 1);
      {
      __CrestLoad(22148, (unsigned long )0, (long long )0);
      __CrestLoad(22147, (unsigned long )(& tmp1), (long long )tmp1);
      __CrestApply2(22146, 14, (long long )(0 > tmp1));
# 275 "../HPL_pdtrsv.c"
      if (0 > tmp1) {
        __CrestBranch(22149, 7623, 1);
        __CrestLoad(22151, (unsigned long )0, (long long )0);
        __CrestStore(22152, (unsigned long )(& tmp___7));
# 275 "../HPL_pdtrsv.c"
        tmp___7 = 0;
      } else {
        __CrestBranch(22150, 7624, 0);
        __CrestLoad(22153, (unsigned long )(& tmp1), (long long )tmp1);
        __CrestStore(22154, (unsigned long )(& tmp___7));
# 275 "../HPL_pdtrsv.c"
        tmp___7 = tmp1;
      }
      }
      __CrestLoad(22157, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(22156, (unsigned long )(& tmp___7), (long long )tmp___7);
      __CrestApply2(22155, 1, (long long )(nb - tmp___7));
      __CrestStore(22158, (unsigned long )(& inb_____3));
# 275 "../HPL_pdtrsv.c"
      inb_____3 = nb - tmp___7;
      {
      __CrestLoad(22161, (unsigned long )(& inb_____3), (long long )inb_____3);
      __CrestLoad(22160, (unsigned long )0, (long long )0);
      __CrestApply2(22159, 15, (long long )(inb_____3 <= 0));
# 275 "../HPL_pdtrsv.c"
      if (inb_____3 <= 0) {
        __CrestBranch(22162, 7627, 1);
        __CrestLoad(22169, (unsigned long )(& inb_____3), (long long )inb_____3);
        __CrestApply1(22168, 19, (long long )(- inb_____3));
        __CrestLoad(22167, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(22166, 3, (long long )(- inb_____3 / nb));
        __CrestLoad(22165, (unsigned long )0, (long long )1);
        __CrestApply2(22164, 0, (long long )(- inb_____3 / nb + 1));
        __CrestStore(22170, (unsigned long )(& nblk_____3));
# 275 "../HPL_pdtrsv.c"
        nblk_____3 = - inb_____3 / nb + 1;
        __CrestLoad(22171, (unsigned long )(& nblk_____3), (long long )nblk_____3);
        __CrestStore(22172, (unsigned long )(& src_____3));
# 275 "../HPL_pdtrsv.c"
        src_____3 = nblk_____3;
        __CrestLoad(22179, (unsigned long )(& src_____3), (long long )src_____3);
        __CrestLoad(22178, (unsigned long )(& src_____3), (long long )src_____3);
        __CrestLoad(22177, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(22176, 3, (long long )(src_____3 / nprow));
        __CrestLoad(22175, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(22174, 2, (long long )((src_____3 / nprow) * nprow));
        __CrestApply2(22173, 1, (long long )(src_____3 - (src_____3 / nprow) * nprow));
        __CrestStore(22180, (unsigned long )(& src_____3));
# 275 "../HPL_pdtrsv.c"
        src_____3 -= (src_____3 / nprow) * nprow;
        __CrestLoad(22185, (unsigned long )(& inb_____3), (long long )inb_____3);
        __CrestLoad(22184, (unsigned long )(& nblk_____3), (long long )nblk_____3);
        __CrestLoad(22183, (unsigned long )(& nb), (long long )nb);
        __CrestApply2(22182, 2, (long long )(nblk_____3 * nb));
        __CrestApply2(22181, 0, (long long )(inb_____3 + nblk_____3 * nb));
        __CrestStore(22186, (unsigned long )(& inb_____3));
# 275 "../HPL_pdtrsv.c"
        inb_____3 += nblk_____3 * nb;
        __CrestLoad(22189, (unsigned long )(& tmp2), (long long )tmp2);
        __CrestLoad(22188, (unsigned long )(& inb_____3), (long long )inb_____3);
        __CrestApply2(22187, 1, (long long )(tmp2 - inb_____3));
        __CrestStore(22190, (unsigned long )(& n_____3));
# 275 "../HPL_pdtrsv.c"
        n_____3 = tmp2 - inb_____3;
        {
        __CrestLoad(22193, (unsigned long )(& n_____3), (long long )n_____3);
        __CrestLoad(22192, (unsigned long )0, (long long )0);
        __CrestApply2(22191, 15, (long long )(n_____3 <= 0));
# 275 "../HPL_pdtrsv.c"
        if (n_____3 <= 0) {
          __CrestBranch(22194, 7629, 1);
          {
          __CrestLoad(22198, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(22197, (unsigned long )(& src_____3), (long long )src_____3);
          __CrestApply2(22196, 12, (long long )(myrow == src_____3));
# 275 "../HPL_pdtrsv.c"
          if (myrow == src_____3) {
            __CrestBranch(22199, 7630, 1);
            __CrestLoad(22201, (unsigned long )(& tmp2), (long long )tmp2);
            __CrestStore(22202, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
            n1p = tmp2;
          } else {
            __CrestBranch(22200, 7631, 0);
            __CrestLoad(22203, (unsigned long )0, (long long )0);
            __CrestStore(22204, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
            n1p = 0;
          }
          }
        } else {
          __CrestBranch(22195, 7632, 0);
          __CrestLoad(22207, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(22206, (unsigned long )(& src_____3), (long long )src_____3);
          __CrestApply2(22205, 1, (long long )(myrow - src_____3));
          __CrestStore(22208, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
          mydist_____3 = myrow - src_____3;
          {
          __CrestLoad(22211, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22210, (unsigned long )0, (long long )0);
          __CrestApply2(22209, 16, (long long )(mydist_____3 < 0));
# 275 "../HPL_pdtrsv.c"
          if (mydist_____3 < 0) {
            __CrestBranch(22212, 7634, 1);
            __CrestLoad(22216, (unsigned long )(& mydist_____3), (long long )mydist_____3);
            __CrestLoad(22215, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(22214, 0, (long long )(mydist_____3 + nprow));
            __CrestStore(22217, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
            mydist_____3 += nprow;
          } else {
            __CrestBranch(22213, 7635, 0);

          }
          }
          __CrestLoad(22222, (unsigned long )(& n_____3), (long long )n_____3);
          __CrestLoad(22221, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(22220, 3, (long long )(n_____3 / nb));
          __CrestLoad(22219, (unsigned long )0, (long long )1);
          __CrestApply2(22218, 0, (long long )(n_____3 / nb + 1));
          __CrestStore(22223, (unsigned long )(& nblk_____3));
# 275 "../HPL_pdtrsv.c"
          nblk_____3 = n_____3 / nb + 1;
          __CrestLoad(22226, (unsigned long )(& nblk_____3), (long long )nblk_____3);
          __CrestLoad(22225, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(22224, 3, (long long )(nblk_____3 / nprow));
          __CrestStore(22227, (unsigned long )(& quot_____3));
# 275 "../HPL_pdtrsv.c"
          quot_____3 = nblk_____3 / nprow;
          __CrestLoad(22234, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22233, (unsigned long )(& nblk_____3), (long long )nblk_____3);
          __CrestLoad(22232, (unsigned long )(& quot_____3), (long long )quot_____3);
          __CrestLoad(22231, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(22230, 2, (long long )(quot_____3 * nprow));
          __CrestApply2(22229, 1, (long long )(nblk_____3 - quot_____3 * nprow));
          __CrestApply2(22228, 1, (long long )(mydist_____3 - (nblk_____3 - quot_____3 * nprow)));
          __CrestStore(22235, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
          mydist_____3 -= nblk_____3 - quot_____3 * nprow;
          {
          __CrestLoad(22238, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22237, (unsigned long )0, (long long )0);
          __CrestApply2(22236, 16, (long long )(mydist_____3 < 0));
# 275 "../HPL_pdtrsv.c"
          if (mydist_____3 < 0) {
            __CrestBranch(22239, 7638, 1);
            {
            __CrestLoad(22243, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(22242, (unsigned long )(& src_____3), (long long )src_____3);
            __CrestApply2(22241, 13, (long long )(myrow != src_____3));
# 275 "../HPL_pdtrsv.c"
            if (myrow != src_____3) {
              __CrestBranch(22244, 7639, 1);
              __CrestLoad(22250, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22249, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22248, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22247, 2, (long long )(nb * quot_____3));
              __CrestApply2(22246, 0, (long long )(nb + nb * quot_____3));
              __CrestStore(22251, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = nb + nb * quot_____3;
            } else {
              __CrestBranch(22245, 7640, 0);
              __CrestLoad(22256, (unsigned long )(& inb_____3), (long long )inb_____3);
              __CrestLoad(22255, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22254, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22253, 2, (long long )(nb * quot_____3));
              __CrestApply2(22252, 0, (long long )(inb_____3 + nb * quot_____3));
              __CrestStore(22257, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = inb_____3 + nb * quot_____3;
            }
            }
          } else {
            __CrestBranch(22240, 7641, 0);
            {
            __CrestLoad(22260, (unsigned long )(& mydist_____3), (long long )mydist_____3);
            __CrestLoad(22259, (unsigned long )0, (long long )0);
            __CrestApply2(22258, 14, (long long )(mydist_____3 > 0));
# 275 "../HPL_pdtrsv.c"
            if (mydist_____3 > 0) {
              __CrestBranch(22261, 7642, 1);
              __CrestLoad(22265, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22264, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22263, 2, (long long )(nb * quot_____3));
              __CrestStore(22266, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = nb * quot_____3;
            } else {
              __CrestBranch(22262, 7643, 0);
              {
              __CrestLoad(22269, (unsigned long )(& myrow), (long long )myrow);
              __CrestLoad(22268, (unsigned long )(& src_____3), (long long )src_____3);
              __CrestApply2(22267, 13, (long long )(myrow != src_____3));
# 275 "../HPL_pdtrsv.c"
              if (myrow != src_____3) {
                __CrestBranch(22270, 7644, 1);
                __CrestLoad(22280, (unsigned long )(& n_____3), (long long )n_____3);
                __CrestLoad(22279, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(22278, 0, (long long )(n_____3 + nb));
                __CrestLoad(22277, (unsigned long )(& nb), (long long )nb);
                __CrestLoad(22276, (unsigned long )(& quot_____3), (long long )quot_____3);
                __CrestLoad(22275, (unsigned long )(& nblk_____3), (long long )nblk_____3);
                __CrestApply2(22274, 1, (long long )(quot_____3 - nblk_____3));
                __CrestApply2(22273, 2, (long long )(nb * (quot_____3 - nblk_____3)));
                __CrestApply2(22272, 0, (long long )((n_____3 + nb) + nb * (quot_____3 - nblk_____3)));
                __CrestStore(22281, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
                n1p = (n_____3 + nb) + nb * (quot_____3 - nblk_____3);
              } else {
                __CrestBranch(22271, 7645, 0);
                __CrestLoad(22288, (unsigned long )(& tmp2), (long long )tmp2);
                __CrestLoad(22287, (unsigned long )(& nb), (long long )nb);
                __CrestLoad(22286, (unsigned long )(& quot_____3), (long long )quot_____3);
                __CrestLoad(22285, (unsigned long )(& nblk_____3), (long long )nblk_____3);
                __CrestApply2(22284, 1, (long long )(quot_____3 - nblk_____3));
                __CrestApply2(22283, 2, (long long )(nb * (quot_____3 - nblk_____3)));
                __CrestApply2(22282, 0, (long long )(tmp2 + nb * (quot_____3 - nblk_____3)));
                __CrestStore(22289, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
                n1p = tmp2 + nb * (quot_____3 - nblk_____3);
              }
              }
            }
            }
          }
          }
        }
        }
      } else {
        __CrestBranch(22163, 7646, 0);
        __CrestLoad(22292, (unsigned long )(& tmp2), (long long )tmp2);
        __CrestLoad(22291, (unsigned long )(& inb_____3), (long long )inb_____3);
        __CrestApply2(22290, 1, (long long )(tmp2 - inb_____3));
        __CrestStore(22293, (unsigned long )(& n_____3));
# 275 "../HPL_pdtrsv.c"
        n_____3 = tmp2 - inb_____3;
        {
        __CrestLoad(22296, (unsigned long )(& n_____3), (long long )n_____3);
        __CrestLoad(22295, (unsigned long )0, (long long )0);
        __CrestApply2(22294, 15, (long long )(n_____3 <= 0));
# 275 "../HPL_pdtrsv.c"
        if (n_____3 <= 0) {
          __CrestBranch(22297, 7648, 1);
          {
          __CrestLoad(22301, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(22300, (unsigned long )0, (long long )0);
          __CrestApply2(22299, 12, (long long )(myrow == 0));
# 275 "../HPL_pdtrsv.c"
          if (myrow == 0) {
            __CrestBranch(22302, 7649, 1);
            __CrestLoad(22304, (unsigned long )(& tmp2), (long long )tmp2);
            __CrestStore(22305, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
            n1p = tmp2;
          } else {
            __CrestBranch(22303, 7650, 0);
            __CrestLoad(22306, (unsigned long )0, (long long )0);
            __CrestStore(22307, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
            n1p = 0;
          }
          }
        } else {
          __CrestBranch(22298, 7651, 0);
          __CrestLoad(22308, (unsigned long )(& myrow), (long long )myrow);
          __CrestStore(22309, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
          mydist_____3 = myrow;
          {
          __CrestLoad(22312, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22311, (unsigned long )0, (long long )0);
          __CrestApply2(22310, 16, (long long )(mydist_____3 < 0));
# 275 "../HPL_pdtrsv.c"
          if (mydist_____3 < 0) {
            __CrestBranch(22313, 7653, 1);
            __CrestLoad(22317, (unsigned long )(& mydist_____3), (long long )mydist_____3);
            __CrestLoad(22316, (unsigned long )(& nprow), (long long )nprow);
            __CrestApply2(22315, 0, (long long )(mydist_____3 + nprow));
            __CrestStore(22318, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
            mydist_____3 += nprow;
          } else {
            __CrestBranch(22314, 7654, 0);

          }
          }
          __CrestLoad(22323, (unsigned long )(& n_____3), (long long )n_____3);
          __CrestLoad(22322, (unsigned long )(& nb), (long long )nb);
          __CrestApply2(22321, 3, (long long )(n_____3 / nb));
          __CrestLoad(22320, (unsigned long )0, (long long )1);
          __CrestApply2(22319, 0, (long long )(n_____3 / nb + 1));
          __CrestStore(22324, (unsigned long )(& nblk_____3));
# 275 "../HPL_pdtrsv.c"
          nblk_____3 = n_____3 / nb + 1;
          __CrestLoad(22327, (unsigned long )(& nblk_____3), (long long )nblk_____3);
          __CrestLoad(22326, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(22325, 3, (long long )(nblk_____3 / nprow));
          __CrestStore(22328, (unsigned long )(& quot_____3));
# 275 "../HPL_pdtrsv.c"
          quot_____3 = nblk_____3 / nprow;
          __CrestLoad(22335, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22334, (unsigned long )(& nblk_____3), (long long )nblk_____3);
          __CrestLoad(22333, (unsigned long )(& quot_____3), (long long )quot_____3);
          __CrestLoad(22332, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(22331, 2, (long long )(quot_____3 * nprow));
          __CrestApply2(22330, 1, (long long )(nblk_____3 - quot_____3 * nprow));
          __CrestApply2(22329, 1, (long long )(mydist_____3 - (nblk_____3 - quot_____3 * nprow)));
          __CrestStore(22336, (unsigned long )(& mydist_____3));
# 275 "../HPL_pdtrsv.c"
          mydist_____3 -= nblk_____3 - quot_____3 * nprow;
          {
          __CrestLoad(22339, (unsigned long )(& mydist_____3), (long long )mydist_____3);
          __CrestLoad(22338, (unsigned long )0, (long long )0);
          __CrestApply2(22337, 16, (long long )(mydist_____3 < 0));
# 275 "../HPL_pdtrsv.c"
          if (mydist_____3 < 0) {
            __CrestBranch(22340, 7657, 1);
            {
            __CrestLoad(22344, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(22343, (unsigned long )0, (long long )0);
            __CrestApply2(22342, 13, (long long )(myrow != 0));
# 275 "../HPL_pdtrsv.c"
            if (myrow != 0) {
              __CrestBranch(22345, 7658, 1);
              __CrestLoad(22351, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22350, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22349, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22348, 2, (long long )(nb * quot_____3));
              __CrestApply2(22347, 0, (long long )(nb + nb * quot_____3));
              __CrestStore(22352, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = nb + nb * quot_____3;
            } else {
              __CrestBranch(22346, 7659, 0);
              __CrestLoad(22357, (unsigned long )(& inb_____3), (long long )inb_____3);
              __CrestLoad(22356, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22355, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22354, 2, (long long )(nb * quot_____3));
              __CrestApply2(22353, 0, (long long )(inb_____3 + nb * quot_____3));
              __CrestStore(22358, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = inb_____3 + nb * quot_____3;
            }
            }
          } else {
            __CrestBranch(22341, 7660, 0);
            {
            __CrestLoad(22361, (unsigned long )(& mydist_____3), (long long )mydist_____3);
            __CrestLoad(22360, (unsigned long )0, (long long )0);
            __CrestApply2(22359, 14, (long long )(mydist_____3 > 0));
# 275 "../HPL_pdtrsv.c"
            if (mydist_____3 > 0) {
              __CrestBranch(22362, 7661, 1);
              __CrestLoad(22366, (unsigned long )(& nb), (long long )nb);
              __CrestLoad(22365, (unsigned long )(& quot_____3), (long long )quot_____3);
              __CrestApply2(22364, 2, (long long )(nb * quot_____3));
              __CrestStore(22367, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
              n1p = nb * quot_____3;
            } else {
              __CrestBranch(22363, 7662, 0);
              {
              __CrestLoad(22370, (unsigned long )(& myrow), (long long )myrow);
              __CrestLoad(22369, (unsigned long )0, (long long )0);
              __CrestApply2(22368, 13, (long long )(myrow != 0));
# 275 "../HPL_pdtrsv.c"
              if (myrow != 0) {
                __CrestBranch(22371, 7663, 1);
                __CrestLoad(22381, (unsigned long )(& n_____3), (long long )n_____3);
                __CrestLoad(22380, (unsigned long )(& nb), (long long )nb);
                __CrestApply2(22379, 0, (long long )(n_____3 + nb));
                __CrestLoad(22378, (unsigned long )(& nb), (long long )nb);
                __CrestLoad(22377, (unsigned long )(& quot_____3), (long long )quot_____3);
                __CrestLoad(22376, (unsigned long )(& nblk_____3), (long long )nblk_____3);
                __CrestApply2(22375, 1, (long long )(quot_____3 - nblk_____3));
                __CrestApply2(22374, 2, (long long )(nb * (quot_____3 - nblk_____3)));
                __CrestApply2(22373, 0, (long long )((n_____3 + nb) + nb * (quot_____3 - nblk_____3)));
                __CrestStore(22382, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
                n1p = (n_____3 + nb) + nb * (quot_____3 - nblk_____3);
              } else {
                __CrestBranch(22372, 7664, 0);
                __CrestLoad(22389, (unsigned long )(& tmp2), (long long )tmp2);
                __CrestLoad(22388, (unsigned long )(& nb), (long long )nb);
                __CrestLoad(22387, (unsigned long )(& quot_____3), (long long )quot_____3);
                __CrestLoad(22386, (unsigned long )(& nblk_____3), (long long )nblk_____3);
                __CrestApply2(22385, 1, (long long )(quot_____3 - nblk_____3));
                __CrestApply2(22384, 2, (long long )(nb * (quot_____3 - nblk_____3)));
                __CrestApply2(22383, 0, (long long )(tmp2 + nb * (quot_____3 - nblk_____3)));
                __CrestStore(22390, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
                n1p = tmp2 + nb * (quot_____3 - nblk_____3);
              }
              }
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(22145, 7665, 0);
      __CrestLoad(22391, (unsigned long )(& tmp2), (long long )tmp2);
      __CrestStore(22392, (unsigned long )(& n1p));
# 275 "../HPL_pdtrsv.c"
      n1p = tmp2;
    }
    }
    {
    __CrestLoad(22397, (unsigned long )(& Rmsgid), (long long )Rmsgid);
    __CrestLoad(22396, (unsigned long )0, (long long )2);
    __CrestApply2(22395, 0, (long long )(Rmsgid + 2));
    __CrestLoad(22394, (unsigned long )0, (long long )4000);
    __CrestApply2(22393, 14, (long long )(Rmsgid + 2 > 4000));
# 277 "../HPL_pdtrsv.c"
    if (Rmsgid + 2 > 4000) {
      __CrestBranch(22398, 7667, 1);
      __CrestLoad(22400, (unsigned long )0, (long long )3001);
      __CrestStore(22401, (unsigned long )(& Rmsgid));
# 277 "../HPL_pdtrsv.c"
      Rmsgid = 3001;
    } else {
      __CrestBranch(22399, 7668, 0);
      __CrestLoad(22404, (unsigned long )(& Rmsgid), (long long )Rmsgid);
      __CrestLoad(22403, (unsigned long )0, (long long )2);
      __CrestApply2(22402, 0, (long long )(Rmsgid + 2));
      __CrestStore(22405, (unsigned long )(& Rmsgid));
# 277 "../HPL_pdtrsv.c"
      Rmsgid += 2;
    }
    }
    {
    __CrestLoad(22410, (unsigned long )(& Cmsgid), (long long )Cmsgid);
    __CrestLoad(22409, (unsigned long )0, (long long )2);
    __CrestApply2(22408, 0, (long long )(Cmsgid + 2));
    __CrestLoad(22407, (unsigned long )0, (long long )4000);
    __CrestApply2(22406, 14, (long long )(Cmsgid + 2 > 4000));
# 279 "../HPL_pdtrsv.c"
    if (Cmsgid + 2 > 4000) {
      __CrestBranch(22411, 7670, 1);
      __CrestLoad(22413, (unsigned long )0, (long long )3002);
      __CrestStore(22414, (unsigned long )(& Cmsgid));
# 279 "../HPL_pdtrsv.c"
      Cmsgid = 3002;
    } else {
      __CrestBranch(22412, 7671, 0);
      __CrestLoad(22417, (unsigned long )(& Cmsgid), (long long )Cmsgid);
      __CrestLoad(22416, (unsigned long )0, (long long )2);
      __CrestApply2(22415, 0, (long long )(Cmsgid + 2));
      __CrestStore(22418, (unsigned long )(& Cmsgid));
# 279 "../HPL_pdtrsv.c"
      Cmsgid += 2;
    }
    }
  }
  while_break___0: ;
  }
  {
  __CrestLoad(22421, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(22420, (unsigned long )(& colprev), (long long )colprev);
  __CrestApply2(22419, 12, (long long )(mycol == colprev));
# 285 "../HPL_pdtrsv.c"
  if (mycol == colprev) {
    __CrestBranch(22422, 7674, 1);
    __CrestLoad(22424, (unsigned long )(& kbprev), (long long )kbprev);
    __CrestLoad(22425, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
    __CrestLoad(22426, (unsigned long )(& rowprev), (long long )rowprev);
    __CrestLoad(22427, (unsigned long )(& Ccomm), (long long )Ccomm);
# 286 "../HPL_pdtrsv.c"
    HPL_broadcast((void *)XR, (int const )kbprev, (HPL_T_TYPE const )101, (int const )rowprev,
                  Ccomm);
    __CrestClearStack(22428);
  } else {
    __CrestBranch(22423, 7675, 0);

  }
  }
  {
  __CrestLoad(22431, (unsigned long )(& Wfr), (long long )Wfr);
  __CrestLoad(22430, (unsigned long )0, (long long )0);
  __CrestApply2(22429, 13, (long long )(Wfr != 0));
# 289 "../HPL_pdtrsv.c"
  if (Wfr != 0) {
    __CrestBranch(22432, 7677, 1);
# 289 "../HPL_pdtrsv.c"
    free((void *)W);
    __CrestClearStack(22434);
  } else {
    __CrestBranch(22433, 7678, 0);

  }
  }

  return_label:
  {
  __CrestReturn(22435);
# 53 "../HPL_pdtrsv.c"
  return;
  }
}
}
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 312 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesv0(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
# 53 "../HPL_pdgesv0.c"
void HPL_pdgesv0(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A )
{
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const ) ;
  int N ;
  int j ;
  int jb ;
  int n ;
  int nb ;
  int tag ;
  int test ;
  void *tmp ;
  int tmp___0 ;
  HPL_T_panel **mem_15 ;
  HPL_T_panel **mem_16 ;
  HPL_T_panel **mem_17 ;
  HPL_T_panel **mem_18 ;
  HPL_T_panel **mem_19 ;
  HPL_T_panel **mem_20 ;
  HPL_T_panel **mem_21 ;

  {
  __CrestCall(22436, 114);
# 97 "../HPL_pdgesv0.c"
  panel = (HPL_T_panel **)((void *)0);
  __CrestLoad(22437, (unsigned long )0, (long long )2001);
  __CrestStore(22438, (unsigned long )(& tag));
# 99 "../HPL_pdgesv0.c"
  tag = 2001;
  __CrestLoad(22439, (unsigned long )0, (long long )2);
  __CrestStore(22440, (unsigned long )(& test));
# 99 "../HPL_pdgesv0.c"
  test = 2;
  __CrestLoad(22441, (unsigned long )(& A->n), (long long )A->n);
  __CrestStore(22442, (unsigned long )(& N));
# 104 "../HPL_pdgesv0.c"
  N = A->n;
  {
  __CrestLoad(22445, (unsigned long )(& N), (long long )N);
  __CrestLoad(22444, (unsigned long )0, (long long )0);
  __CrestApply2(22443, 15, (long long )(N <= 0));
# 104 "../HPL_pdgesv0.c"
  if (N <= 0) {
    __CrestBranch(22446, 7683, 1);
# 104 "../HPL_pdgesv0.c"
    goto return_label;
  } else {
    __CrestBranch(22447, 7685, 0);

  }
  }
# 106 "../HPL_pdgesv0.c"
  HPL_pdupdate = ALGO->upfun;
  __CrestLoad(22448, (unsigned long )(& A->nb), (long long )A->nb);
  __CrestStore(22449, (unsigned long )(& nb));
# 106 "../HPL_pdgesv0.c"
  nb = A->nb;
  __CrestLoad(22450, (unsigned long )0, (long long )sizeof(HPL_T_panel *));
# 110 "../HPL_pdgesv0.c"
  tmp = malloc(sizeof(HPL_T_panel *));
  __CrestClearStack(22451);
# 110 "../HPL_pdgesv0.c"
  panel = (HPL_T_panel **)tmp;
  {
  __CrestLoad(22454, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(22453, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(22452, 12, (long long )((unsigned long )panel == (unsigned long )((void *)0)));
# 111 "../HPL_pdgesv0.c"
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
    __CrestBranch(22455, 7688, 1);
    __CrestLoad(22457, (unsigned long )0, (long long )112);
# 112 "../HPL_pdgesv0.c"
    HPL_pabort(112, "HPL_pdgesv0", "Memory allocation failed");
    __CrestClearStack(22458);
  } else {
    __CrestBranch(22456, 7689, 0);

  }
  }
  {
  __CrestLoad(22461, (unsigned long )(& N), (long long )N);
  __CrestLoad(22460, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(22459, 16, (long long )(N < nb));
# 114 "../HPL_pdgesv0.c"
  if (N < nb) {
    __CrestBranch(22462, 7691, 1);
    __CrestLoad(22464, (unsigned long )(& N), (long long )N);
    __CrestStore(22465, (unsigned long )(& tmp___0));
# 114 "../HPL_pdgesv0.c"
    tmp___0 = N;
  } else {
    __CrestBranch(22463, 7692, 0);
    __CrestLoad(22466, (unsigned long )(& nb), (long long )nb);
    __CrestStore(22467, (unsigned long )(& tmp___0));
# 114 "../HPL_pdgesv0.c"
    tmp___0 = nb;
  }
  }
  __CrestLoad(22468, (unsigned long )(& N), (long long )N);
  __CrestLoad(22471, (unsigned long )(& N), (long long )N);
  __CrestLoad(22470, (unsigned long )0, (long long )1);
  __CrestApply2(22469, 0, (long long )(N + 1));
  __CrestLoad(22472, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(22473, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(22474, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(22475, (unsigned long )(& tag), (long long )tag);
# 114 "../HPL_pdgesv0.c"
  HPL_pdpanel_new(GRID, ALGO, (int const )N, (int const )(N + 1), (int const )tmp___0,
                  A, (int const )0, (int const )0, (int const )tag, panel + 0);
  __CrestClearStack(22476);
  __CrestLoad(22477, (unsigned long )0, (long long )0);
  __CrestStore(22478, (unsigned long )(& j));
# 119 "../HPL_pdgesv0.c"
  j = 0;
  {
# 119 "../HPL_pdgesv0.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(22481, (unsigned long )(& j), (long long )j);
    __CrestLoad(22480, (unsigned long )(& N), (long long )N);
    __CrestApply2(22479, 16, (long long )(j < N));
# 119 "../HPL_pdgesv0.c"
    if (j < N) {
      __CrestBranch(22482, 7698, 1);

    } else {
      __CrestBranch(22483, 7699, 0);
# 119 "../HPL_pdgesv0.c"
      goto while_break;
    }
    }
    __CrestLoad(22486, (unsigned long )(& N), (long long )N);
    __CrestLoad(22485, (unsigned long )(& j), (long long )j);
    __CrestApply2(22484, 1, (long long )(N - j));
    __CrestStore(22487, (unsigned long )(& n));
# 121 "../HPL_pdgesv0.c"
    n = N - j;
    {
    __CrestLoad(22490, (unsigned long )(& n), (long long )n);
    __CrestLoad(22489, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22488, 16, (long long )(n < nb));
# 121 "../HPL_pdgesv0.c"
    if (n < nb) {
      __CrestBranch(22491, 7702, 1);
      __CrestLoad(22493, (unsigned long )(& n), (long long )n);
      __CrestStore(22494, (unsigned long )(& jb));
# 121 "../HPL_pdgesv0.c"
      jb = n;
    } else {
      __CrestBranch(22492, 7703, 0);
      __CrestLoad(22495, (unsigned long )(& nb), (long long )nb);
      __CrestStore(22496, (unsigned long )(& jb));
# 121 "../HPL_pdgesv0.c"
      jb = nb;
    }
    }
# 125 "../HPL_pdgesv0.c"
    mem_15 = panel + 0;
# 125 "../HPL_pdgesv0.c"
    HPL_pdpanel_free(*mem_15);
    __CrestClearStack(22497);
# 126 "../HPL_pdgesv0.c"
    mem_16 = panel + 0;
    __CrestLoad(22498, (unsigned long )(& n), (long long )n);
    __CrestLoad(22501, (unsigned long )(& n), (long long )n);
    __CrestLoad(22500, (unsigned long )0, (long long )1);
    __CrestApply2(22499, 0, (long long )(n + 1));
    __CrestLoad(22502, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(22503, (unsigned long )(& j), (long long )j);
    __CrestLoad(22504, (unsigned long )(& j), (long long )j);
    __CrestLoad(22505, (unsigned long )(& tag), (long long )tag);
# 126 "../HPL_pdgesv0.c"
    HPL_pdpanel_init(GRID, ALGO, (int const )n, (int const )(n + 1), (int const )jb,
                     A, (int const )j, (int const )j, (int const )tag, *mem_16);
    __CrestClearStack(22506);
# 130 "../HPL_pdgesv0.c"
    mem_17 = panel + 0;
# 130 "../HPL_pdgesv0.c"
    HPL_pdfact(*mem_17);
    __CrestClearStack(22507);
# 131 "../HPL_pdgesv0.c"
    mem_18 = panel + 0;
# 131 "../HPL_pdgesv0.c"
    HPL_binit(*mem_18);
    __CrestClearStack(22508);
    {
# 132 "../HPL_pdgesv0.c"
    while (1) {
      while_continue___0: ;
# 133 "../HPL_pdgesv0.c"
      mem_19 = panel + 0;
# 133 "../HPL_pdgesv0.c"
      HPL_bcast(*mem_19, & test);
      __CrestClearStack(22509);
      {
      __CrestLoad(22512, (unsigned long )(& test), (long long )test);
      __CrestLoad(22511, (unsigned long )0, (long long )1);
      __CrestApply2(22510, 12, (long long )(test == 1));
# 132 "../HPL_pdgesv0.c"
      if (test == 1) {
        __CrestBranch(22513, 7710, 1);
# 132 "../HPL_pdgesv0.c"
        goto while_break___0;
      } else {
        __CrestBranch(22514, 7711, 0);

      }
      }
    }
    while_break___0: ;
    }
# 135 "../HPL_pdgesv0.c"
    mem_20 = panel + 0;
# 135 "../HPL_pdgesv0.c"
    HPL_bwait(*mem_20);
    __CrestClearStack(22515);
# 136 "../HPL_pdgesv0.c"
    mem_21 = panel + 0;
    __CrestLoad(22516, (unsigned long )0, (long long )((int const )-1));
# 136 "../HPL_pdgesv0.c"
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_21, (int const )-1);
    __CrestClearStack(22517);
    {
    __CrestLoad(22522, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(22521, (unsigned long )0, (long long )1);
    __CrestApply2(22520, 0, (long long )(tag + 1));
    __CrestLoad(22519, (unsigned long )0, (long long )3000);
    __CrestApply2(22518, 14, (long long )(tag + 1 > 3000));
# 140 "../HPL_pdgesv0.c"
    if (tag + 1 > 3000) {
      __CrestBranch(22523, 7715, 1);
      __CrestLoad(22525, (unsigned long )0, (long long )2001);
      __CrestStore(22526, (unsigned long )(& tag));
# 140 "../HPL_pdgesv0.c"
      tag = 2001;
    } else {
      __CrestBranch(22524, 7716, 0);
      __CrestLoad(22529, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(22528, (unsigned long )0, (long long )1);
      __CrestApply2(22527, 0, (long long )(tag + 1));
      __CrestStore(22530, (unsigned long )(& tag));
# 140 "../HPL_pdgesv0.c"
      tag ++;
    }
    }
    __CrestLoad(22533, (unsigned long )(& j), (long long )j);
    __CrestLoad(22532, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22531, 0, (long long )(j + nb));
    __CrestStore(22534, (unsigned long )(& j));
# 119 "../HPL_pdgesv0.c"
    j += nb;
  }
  while_break: ;
  }
# 145 "../HPL_pdgesv0.c"
  HPL_pdpanel_disp(panel + 0);
  __CrestClearStack(22535);
  {
  __CrestLoad(22538, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(22537, (unsigned long )0, (long long )0);
  __CrestApply2(22536, 13, (long long )(panel != 0));
# 147 "../HPL_pdgesv0.c"
  if (panel != 0) {
    __CrestBranch(22539, 7721, 1);
# 147 "../HPL_pdgesv0.c"
    free((void *)panel);
    __CrestClearStack(22541);
  } else {
    __CrestBranch(22540, 7722, 0);

  }
  }

  return_label:
  {
  __CrestReturn(22542);
# 53 "../HPL_pdgesv0.c"
  return;
  }
}
}
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 318 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesvK1(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
# 53 "../HPL_pdgesvK1.c"
void HPL_pdgesvK1(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A )
{
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const ) ;
  int N ;
  int depth ;
  int icurcol ;
  int j ;
  int jb ;
  int jj ;
  int jstart ;
  int k ;
  int mycol ;
  int n ;
  int nb ;
  int nn ;
  int npcol ;
  int nq ;
  int tag ;
  int test ;
  void *tmp ;
  HPL_T_panel **mem_23 ;
  HPL_T_panel **mem_24 ;
  HPL_T_panel **mem_25 ;
  HPL_T_panel **mem_26 ;
  HPL_T_panel **mem_27 ;
  HPL_T_panel **mem_28 ;
  HPL_T_panel **mem_29 ;
  HPL_T_panel **mem_30 ;
  HPL_T_panel **mem_31 ;
  HPL_T_panel **mem_32 ;
  HPL_T_panel **mem_33 ;
  HPL_T_panel **mem_34 ;
  HPL_T_panel **mem_35 ;
  HPL_T_panel **mem_36 ;

  {
  __CrestCall(22543, 115);
# 97 "../HPL_pdgesvK1.c"
  panel = (HPL_T_panel **)((void *)0);
  __CrestLoad(22544, (unsigned long )0, (long long )0);
  __CrestStore(22545, (unsigned long )(& icurcol));
# 99 "../HPL_pdgesvK1.c"
  icurcol = 0;
  __CrestLoad(22546, (unsigned long )0, (long long )0);
  __CrestStore(22547, (unsigned long )(& jj));
# 99 "../HPL_pdgesvK1.c"
  jj = 0;
  __CrestLoad(22548, (unsigned long )0, (long long )2001);
  __CrestStore(22549, (unsigned long )(& tag));
# 99 "../HPL_pdgesvK1.c"
  tag = 2001;
  __CrestLoad(22550, (unsigned long )0, (long long )2);
  __CrestStore(22551, (unsigned long )(& test));
# 99 "../HPL_pdgesvK1.c"
  test = 2;
  __CrestLoad(22552, (unsigned long )(& GRID->mycol), (long long )GRID->mycol);
  __CrestStore(22553, (unsigned long )(& mycol));
# 105 "../HPL_pdgesvK1.c"
  mycol = GRID->mycol;
  __CrestLoad(22554, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
  __CrestStore(22555, (unsigned long )(& npcol));
# 105 "../HPL_pdgesvK1.c"
  npcol = GRID->npcol;
  __CrestLoad(22556, (unsigned long )(& ALGO->depth), (long long )ALGO->depth);
  __CrestStore(22557, (unsigned long )(& depth));
# 106 "../HPL_pdgesvK1.c"
  depth = ALGO->depth;
# 106 "../HPL_pdgesvK1.c"
  HPL_pdupdate = ALGO->upfun;
  __CrestLoad(22558, (unsigned long )(& A->n), (long long )A->n);
  __CrestStore(22559, (unsigned long )(& N));
# 107 "../HPL_pdgesvK1.c"
  N = A->n;
  __CrestLoad(22560, (unsigned long )(& A->nb), (long long )A->nb);
  __CrestStore(22561, (unsigned long )(& nb));
# 107 "../HPL_pdgesvK1.c"
  nb = A->nb;
  {
  __CrestLoad(22564, (unsigned long )(& N), (long long )N);
  __CrestLoad(22563, (unsigned long )0, (long long )0);
  __CrestApply2(22562, 15, (long long )(N <= 0));
# 109 "../HPL_pdgesvK1.c"
  if (N <= 0) {
    __CrestBranch(22565, 7727, 1);
# 109 "../HPL_pdgesvK1.c"
    goto return_label;
  } else {
    __CrestBranch(22566, 7729, 0);

  }
  }
  __CrestLoad(22571, (unsigned long )(& depth), (long long )depth);
  __CrestLoad(22570, (unsigned long )0, (long long )1);
  __CrestApply2(22569, 0, (long long )(depth + 1));
  __CrestLoad(22568, (unsigned long )0, (long long )sizeof(HPL_T_panel *));
  __CrestApply2(22567, 2, (long long )((unsigned long )(depth + 1) * sizeof(HPL_T_panel *)));
# 113 "../HPL_pdgesvK1.c"
  tmp = malloc((unsigned long )(depth + 1) * sizeof(HPL_T_panel *));
  __CrestClearStack(22572);
# 113 "../HPL_pdgesvK1.c"
  panel = (HPL_T_panel **)tmp;
  {
  __CrestLoad(22575, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(22574, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(22573, 12, (long long )((unsigned long )panel == (unsigned long )((void *)0)));
# 114 "../HPL_pdgesvK1.c"
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
    __CrestBranch(22576, 7732, 1);
    __CrestLoad(22578, (unsigned long )0, (long long )115);
# 115 "../HPL_pdgesvK1.c"
    HPL_pabort(115, "HPL_pdgesvK1", "Memory allocation failed");
    __CrestClearStack(22579);
  } else {
    __CrestBranch(22577, 7733, 0);

  }
  }
  __CrestLoad(22582, (unsigned long )(& N), (long long )N);
  __CrestLoad(22581, (unsigned long )0, (long long )1);
  __CrestApply2(22580, 0, (long long )(N + 1));
  __CrestLoad(22583, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22584, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22585, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(22586, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(22587, (unsigned long )(& npcol), (long long )npcol);
# 119 "../HPL_pdgesvK1.c"
  nq = HPL_numroc((int const )(N + 1), (int const )nb, (int const )nb, (int const )mycol,
                  (int const )0, (int const )npcol);
  __CrestHandleReturn(22589, (long long )nq);
  __CrestStore(22588, (unsigned long )(& nq));
  __CrestLoad(22590, (unsigned long )(& N), (long long )N);
  __CrestStore(22591, (unsigned long )(& nn));
# 119 "../HPL_pdgesvK1.c"
  nn = N;
  __CrestLoad(22592, (unsigned long )0, (long long )0);
  __CrestStore(22593, (unsigned long )(& jstart));
# 119 "../HPL_pdgesvK1.c"
  jstart = 0;
  __CrestLoad(22594, (unsigned long )0, (long long )0);
  __CrestStore(22595, (unsigned long )(& k));
# 121 "../HPL_pdgesvK1.c"
  k = 0;
  {
# 121 "../HPL_pdgesvK1.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(22598, (unsigned long )(& k), (long long )k);
    __CrestLoad(22597, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(22596, 16, (long long )(k < depth));
# 121 "../HPL_pdgesvK1.c"
    if (k < depth) {
      __CrestBranch(22599, 7739, 1);

    } else {
      __CrestBranch(22600, 7740, 0);
# 121 "../HPL_pdgesvK1.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(22603, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22602, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22601, 16, (long long )(nn < nb));
# 123 "../HPL_pdgesvK1.c"
    if (nn < nb) {
      __CrestBranch(22604, 7742, 1);
      __CrestLoad(22606, (unsigned long )(& nn), (long long )nn);
      __CrestStore(22607, (unsigned long )(& jb));
# 123 "../HPL_pdgesvK1.c"
      jb = nn;
    } else {
      __CrestBranch(22605, 7743, 0);
      __CrestLoad(22608, (unsigned long )(& nb), (long long )nb);
      __CrestStore(22609, (unsigned long )(& jb));
# 123 "../HPL_pdgesvK1.c"
      jb = nb;
    }
    }
    __CrestLoad(22610, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22613, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22612, (unsigned long )0, (long long )1);
    __CrestApply2(22611, 0, (long long )(nn + 1));
    __CrestLoad(22614, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(22615, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22616, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22617, (unsigned long )(& tag), (long long )tag);
# 124 "../HPL_pdgesvK1.c"
    HPL_pdpanel_new(GRID, ALGO, (int const )nn, (int const )(nn + 1), (int const )jb,
                    A, (int const )jstart, (int const )jstart, (int const )tag,
                    panel + k);
    __CrestClearStack(22618);
    __CrestLoad(22621, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22620, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(22619, 1, (long long )(nn - jb));
    __CrestStore(22622, (unsigned long )(& nn));
# 126 "../HPL_pdgesvK1.c"
    nn -= jb;
    __CrestLoad(22625, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22624, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(22623, 0, (long long )(jstart + jb));
    __CrestStore(22626, (unsigned long )(& jstart));
# 126 "../HPL_pdgesvK1.c"
    jstart += jb;
    {
    __CrestLoad(22629, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22628, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(22627, 12, (long long )(mycol == icurcol));
# 127 "../HPL_pdgesvK1.c"
    if (mycol == icurcol) {
      __CrestBranch(22630, 7746, 1);
      __CrestLoad(22634, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(22633, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22632, 0, (long long )(jj + jb));
      __CrestStore(22635, (unsigned long )(& jj));
# 127 "../HPL_pdgesvK1.c"
      jj += jb;
      __CrestLoad(22638, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(22637, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22636, 1, (long long )(nq - jb));
      __CrestStore(22639, (unsigned long )(& nq));
# 127 "../HPL_pdgesvK1.c"
      nq -= jb;
    } else {
      __CrestBranch(22631, 7747, 0);

    }
    }
    {
    __CrestLoad(22644, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestLoad(22643, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(22642, (unsigned long )0, (long long )1);
    __CrestApply2(22641, 1, (long long )(npcol - 1));
    __CrestApply2(22640, 13, (long long )(icurcol != npcol - 1));
# 128 "../HPL_pdgesvK1.c"
    if (icurcol != npcol - 1) {
      __CrestBranch(22645, 7749, 1);
      __CrestLoad(22649, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestLoad(22648, (unsigned long )0, (long long )1);
      __CrestApply2(22647, 0, (long long )(icurcol + 1));
      __CrestStore(22650, (unsigned long )(& icurcol));
# 128 "../HPL_pdgesvK1.c"
      icurcol ++;
    } else {
      __CrestBranch(22646, 7750, 0);
      __CrestLoad(22651, (unsigned long )0, (long long )0);
      __CrestStore(22652, (unsigned long )(& icurcol));
# 128 "../HPL_pdgesvK1.c"
      icurcol = 0;
    }
    }
    {
    __CrestLoad(22657, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(22656, (unsigned long )0, (long long )1);
    __CrestApply2(22655, 0, (long long )(tag + 1));
    __CrestLoad(22654, (unsigned long )0, (long long )3000);
    __CrestApply2(22653, 14, (long long )(tag + 1 > 3000));
# 129 "../HPL_pdgesvK1.c"
    if (tag + 1 > 3000) {
      __CrestBranch(22658, 7752, 1);
      __CrestLoad(22660, (unsigned long )0, (long long )2001);
      __CrestStore(22661, (unsigned long )(& tag));
# 129 "../HPL_pdgesvK1.c"
      tag = 2001;
    } else {
      __CrestBranch(22659, 7753, 0);
      __CrestLoad(22664, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(22663, (unsigned long )0, (long long )1);
      __CrestApply2(22662, 0, (long long )(tag + 1));
      __CrestStore(22665, (unsigned long )(& tag));
# 129 "../HPL_pdgesvK1.c"
      tag ++;
    }
    }
    __CrestLoad(22668, (unsigned long )(& k), (long long )k);
    __CrestLoad(22667, (unsigned long )0, (long long )1);
    __CrestApply2(22666, 0, (long long )(k + 1));
    __CrestStore(22669, (unsigned long )(& k));
# 121 "../HPL_pdgesvK1.c"
    k ++;
  }
  while_break: ;
  }
  __CrestLoad(22670, (unsigned long )0, (long long )0);
  __CrestStore(22671, (unsigned long )(& k));
# 134 "../HPL_pdgesvK1.c"
  k = 0;
  __CrestLoad(22672, (unsigned long )0, (long long )0);
  __CrestStore(22673, (unsigned long )(& j));
# 134 "../HPL_pdgesvK1.c"
  j = 0;
  {
# 134 "../HPL_pdgesvK1.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(22676, (unsigned long )(& k), (long long )k);
    __CrestLoad(22675, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(22674, 16, (long long )(k < depth));
# 134 "../HPL_pdgesvK1.c"
    if (k < depth) {
      __CrestBranch(22677, 7761, 1);

    } else {
      __CrestBranch(22678, 7762, 0);
# 134 "../HPL_pdgesvK1.c"
      goto while_break___0;
    }
    }
    __CrestLoad(22681, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22680, (unsigned long )(& j), (long long )j);
    __CrestApply2(22679, 1, (long long )(jstart - j));
    __CrestStore(22682, (unsigned long )(& jb));
# 136 "../HPL_pdgesvK1.c"
    jb = jstart - j;
    {
    __CrestLoad(22685, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(22684, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22683, 16, (long long )(jb < nb));
# 136 "../HPL_pdgesvK1.c"
    if (jb < nb) {
      __CrestBranch(22686, 7765, 1);
      __CrestLoad(22688, (unsigned long )(& jb), (long long )jb);
      __CrestStore(22689, (unsigned long )(& jb));
# 136 "../HPL_pdgesvK1.c"
      jb = jb;
    } else {
      __CrestBranch(22687, 7766, 0);
      __CrestLoad(22690, (unsigned long )(& nb), (long long )nb);
      __CrestStore(22691, (unsigned long )(& jb));
# 136 "../HPL_pdgesvK1.c"
      jb = nb;
    }
    }
    __CrestLoad(22694, (unsigned long )(& j), (long long )j);
    __CrestLoad(22693, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(22692, 0, (long long )(j + jb));
    __CrestStore(22695, (unsigned long )(& j));
# 136 "../HPL_pdgesvK1.c"
    j += jb;
# 140 "../HPL_pdgesvK1.c"
    mem_23 = panel + k;
# 140 "../HPL_pdgesvK1.c"
    HPL_pdfact(*mem_23);
    __CrestClearStack(22696);
# 141 "../HPL_pdgesvK1.c"
    mem_24 = panel + k;
# 141 "../HPL_pdgesvK1.c"
    HPL_binit(*mem_24);
    __CrestClearStack(22697);
    {
# 142 "../HPL_pdgesvK1.c"
    while (1) {
      while_continue___1: ;
# 143 "../HPL_pdgesvK1.c"
      mem_25 = panel + k;
# 143 "../HPL_pdgesvK1.c"
      HPL_bcast(*mem_25, & test);
      __CrestClearStack(22698);
      {
      __CrestLoad(22701, (unsigned long )(& test), (long long )test);
      __CrestLoad(22700, (unsigned long )0, (long long )1);
      __CrestApply2(22699, 12, (long long )(test == 1));
# 142 "../HPL_pdgesvK1.c"
      if (test == 1) {
        __CrestBranch(22702, 7773, 1);
# 142 "../HPL_pdgesvK1.c"
        goto while_break___1;
      } else {
        __CrestBranch(22703, 7774, 0);

      }
      }
    }
    while_break___1: ;
    }
# 145 "../HPL_pdgesvK1.c"
    mem_26 = panel + k;
# 145 "../HPL_pdgesvK1.c"
    HPL_bwait(*mem_26);
    __CrestClearStack(22704);
    {
    __CrestLoad(22709, (unsigned long )(& k), (long long )k);
    __CrestLoad(22708, (unsigned long )(& depth), (long long )depth);
    __CrestLoad(22707, (unsigned long )0, (long long )1);
    __CrestApply2(22706, 1, (long long )(depth - 1));
    __CrestApply2(22705, 16, (long long )(k < depth - 1));
# 149 "../HPL_pdgesvK1.c"
    if (k < depth - 1) {
      __CrestBranch(22710, 7778, 1);
      __CrestLoad(22714, (unsigned long )(& jstart), (long long )jstart);
      __CrestLoad(22713, (unsigned long )(& j), (long long )j);
      __CrestApply2(22712, 1, (long long )(jstart - j));
      __CrestLoad(22715, (unsigned long )(& j), (long long )j);
      __CrestLoad(22716, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(22717, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(22718, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(22719, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(22720, (unsigned long )(& npcol), (long long )npcol);
# 151 "../HPL_pdgesvK1.c"
      nn = HPL_numrocI((int const )(jstart - j), (int const )j, (int const )nb,
                       (int const )nb, (int const )mycol, (int const )0, (int const )npcol);
      __CrestHandleReturn(22722, (long long )nn);
      __CrestStore(22721, (unsigned long )(& nn));
# 152 "../HPL_pdgesvK1.c"
      mem_27 = panel + k;
      __CrestLoad(22723, (unsigned long )(& nn), (long long )nn);
# 152 "../HPL_pdgesvK1.c"
      (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_27, (int const )nn);
      __CrestClearStack(22724);
    } else {
      __CrestBranch(22711, 7779, 0);

    }
    }
    __CrestLoad(22727, (unsigned long )(& k), (long long )k);
    __CrestLoad(22726, (unsigned long )0, (long long )1);
    __CrestApply2(22725, 0, (long long )(k + 1));
    __CrestStore(22728, (unsigned long )(& k));
# 134 "../HPL_pdgesvK1.c"
    k ++;
  }
  while_break___0: ;
  }
  __CrestLoad(22729, (unsigned long )(& jstart), (long long )jstart);
  __CrestStore(22730, (unsigned long )(& j));
# 158 "../HPL_pdgesvK1.c"
  j = jstart;
  {
# 158 "../HPL_pdgesvK1.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(22733, (unsigned long )(& j), (long long )j);
    __CrestLoad(22732, (unsigned long )(& N), (long long )N);
    __CrestApply2(22731, 16, (long long )(j < N));
# 158 "../HPL_pdgesvK1.c"
    if (j < N) {
      __CrestBranch(22734, 7787, 1);

    } else {
      __CrestBranch(22735, 7788, 0);
# 158 "../HPL_pdgesvK1.c"
      goto while_break___2;
    }
    }
    __CrestLoad(22738, (unsigned long )(& N), (long long )N);
    __CrestLoad(22737, (unsigned long )(& j), (long long )j);
    __CrestApply2(22736, 1, (long long )(N - j));
    __CrestStore(22739, (unsigned long )(& n));
# 160 "../HPL_pdgesvK1.c"
    n = N - j;
    {
    __CrestLoad(22742, (unsigned long )(& n), (long long )n);
    __CrestLoad(22741, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22740, 16, (long long )(n < nb));
# 160 "../HPL_pdgesvK1.c"
    if (n < nb) {
      __CrestBranch(22743, 7791, 1);
      __CrestLoad(22745, (unsigned long )(& n), (long long )n);
      __CrestStore(22746, (unsigned long )(& jb));
# 160 "../HPL_pdgesvK1.c"
      jb = n;
    } else {
      __CrestBranch(22744, 7792, 0);
      __CrestLoad(22747, (unsigned long )(& nb), (long long )nb);
      __CrestStore(22748, (unsigned long )(& jb));
# 160 "../HPL_pdgesvK1.c"
      jb = nb;
    }
    }
    __CrestLoad(22749, (unsigned long )(& n), (long long )n);
    __CrestLoad(22752, (unsigned long )(& n), (long long )n);
    __CrestLoad(22751, (unsigned long )0, (long long )1);
    __CrestApply2(22750, 0, (long long )(n + 1));
    __CrestLoad(22753, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(22754, (unsigned long )(& j), (long long )j);
    __CrestLoad(22755, (unsigned long )(& j), (long long )j);
    __CrestLoad(22756, (unsigned long )(& tag), (long long )tag);
# 165 "../HPL_pdgesvK1.c"
    HPL_pdpanel_new(GRID, ALGO, (int const )n, (int const )(n + 1), (int const )jb,
                    A, (int const )j, (int const )j, (int const )tag, panel + depth);
    __CrestClearStack(22757);
    {
    __CrestLoad(22760, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22759, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(22758, 12, (long long )(mycol == icurcol));
# 167 "../HPL_pdgesvK1.c"
    if (mycol == icurcol) {
      __CrestBranch(22761, 7795, 1);
      __CrestLoad(22763, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(22764, (unsigned long )(& j), (long long )j);
      __CrestLoad(22765, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(22766, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(22767, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(22768, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(22769, (unsigned long )(& npcol), (long long )npcol);
# 169 "../HPL_pdgesvK1.c"
      nn = HPL_numrocI((int const )jb, (int const )j, (int const )nb, (int const )nb,
                       (int const )mycol, (int const )0, (int const )npcol);
      __CrestHandleReturn(22771, (long long )nn);
      __CrestStore(22770, (unsigned long )(& nn));
      __CrestLoad(22772, (unsigned long )0, (long long )0);
      __CrestStore(22773, (unsigned long )(& k));
# 170 "../HPL_pdgesvK1.c"
      k = 0;
      {
# 170 "../HPL_pdgesvK1.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(22776, (unsigned long )(& k), (long long )k);
        __CrestLoad(22775, (unsigned long )(& depth), (long long )depth);
        __CrestApply2(22774, 16, (long long )(k < depth));
# 170 "../HPL_pdgesvK1.c"
        if (k < depth) {
          __CrestBranch(22777, 7800, 1);

        } else {
          __CrestBranch(22778, 7801, 0);
# 170 "../HPL_pdgesvK1.c"
          goto while_break___3;
        }
        }
# 171 "../HPL_pdgesvK1.c"
        mem_28 = panel + k;
        __CrestLoad(22779, (unsigned long )(& nn), (long long )nn);
# 171 "../HPL_pdgesvK1.c"
        (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_28, (int const )nn);
        __CrestClearStack(22780);
        __CrestLoad(22783, (unsigned long )(& k), (long long )k);
        __CrestLoad(22782, (unsigned long )0, (long long )1);
        __CrestApply2(22781, 0, (long long )(k + 1));
        __CrestStore(22784, (unsigned long )(& k));
# 170 "../HPL_pdgesvK1.c"
        k ++;
      }
      while_break___3: ;
      }
# 172 "../HPL_pdgesvK1.c"
      mem_29 = panel + depth;
# 172 "../HPL_pdgesvK1.c"
      HPL_pdfact(*mem_29);
      __CrestClearStack(22785);
    } else {
      __CrestBranch(22762, 7805, 0);
      __CrestLoad(22786, (unsigned long )0, (long long )0);
      __CrestStore(22787, (unsigned long )(& nn));
# 174 "../HPL_pdgesvK1.c"
      nn = 0;
    }
    }
# 176 "../HPL_pdgesvK1.c"
    mem_30 = panel + depth;
# 176 "../HPL_pdgesvK1.c"
    HPL_binit(*mem_30);
    __CrestClearStack(22788);
# 177 "../HPL_pdgesvK1.c"
    mem_31 = panel + depth;
# 177 "../HPL_pdgesvK1.c"
    mem_32 = panel + 0;
    __CrestLoad(22791, (unsigned long )(& nq), (long long )nq);
    __CrestLoad(22790, (unsigned long )(& nn), (long long )nn);
    __CrestApply2(22789, 1, (long long )(nq - nn));
# 177 "../HPL_pdgesvK1.c"
    (*HPL_pdupdate)(*mem_31, & test, *mem_32, (int const )(nq - nn));
    __CrestClearStack(22792);
# 178 "../HPL_pdgesvK1.c"
    mem_33 = panel + depth;
# 178 "../HPL_pdgesvK1.c"
    HPL_bwait(*mem_33);
    __CrestClearStack(22793);
# 184 "../HPL_pdgesvK1.c"
    HPL_pdpanel_disp(panel + 0);
    __CrestClearStack(22794);
    __CrestLoad(22795, (unsigned long )0, (long long )0);
    __CrestStore(22796, (unsigned long )(& k));
# 185 "../HPL_pdgesvK1.c"
    k = 0;
    {
# 185 "../HPL_pdgesvK1.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(22799, (unsigned long )(& k), (long long )k);
      __CrestLoad(22798, (unsigned long )(& depth), (long long )depth);
      __CrestApply2(22797, 16, (long long )(k < depth));
# 185 "../HPL_pdgesvK1.c"
      if (k < depth) {
        __CrestBranch(22800, 7811, 1);

      } else {
        __CrestBranch(22801, 7812, 0);
# 185 "../HPL_pdgesvK1.c"
        goto while_break___4;
      }
      }
# 185 "../HPL_pdgesvK1.c"
      mem_34 = panel + k;
# 185 "../HPL_pdgesvK1.c"
      mem_35 = panel + (k + 1);
# 185 "../HPL_pdgesvK1.c"
      *mem_34 = *mem_35;
      __CrestLoad(22804, (unsigned long )(& k), (long long )k);
      __CrestLoad(22803, (unsigned long )0, (long long )1);
      __CrestApply2(22802, 0, (long long )(k + 1));
      __CrestStore(22805, (unsigned long )(& k));
# 185 "../HPL_pdgesvK1.c"
      k ++;
    }
    while_break___4: ;
    }
    {
    __CrestLoad(22808, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22807, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(22806, 12, (long long )(mycol == icurcol));
# 187 "../HPL_pdgesvK1.c"
    if (mycol == icurcol) {
      __CrestBranch(22809, 7816, 1);
      __CrestLoad(22813, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(22812, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22811, 0, (long long )(jj + jb));
      __CrestStore(22814, (unsigned long )(& jj));
# 187 "../HPL_pdgesvK1.c"
      jj += jb;
      __CrestLoad(22817, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(22816, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22815, 1, (long long )(nq - jb));
      __CrestStore(22818, (unsigned long )(& nq));
# 187 "../HPL_pdgesvK1.c"
      nq -= jb;
    } else {
      __CrestBranch(22810, 7817, 0);

    }
    }
    {
    __CrestLoad(22823, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestLoad(22822, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(22821, (unsigned long )0, (long long )1);
    __CrestApply2(22820, 1, (long long )(npcol - 1));
    __CrestApply2(22819, 13, (long long )(icurcol != npcol - 1));
# 188 "../HPL_pdgesvK1.c"
    if (icurcol != npcol - 1) {
      __CrestBranch(22824, 7819, 1);
      __CrestLoad(22828, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestLoad(22827, (unsigned long )0, (long long )1);
      __CrestApply2(22826, 0, (long long )(icurcol + 1));
      __CrestStore(22829, (unsigned long )(& icurcol));
# 188 "../HPL_pdgesvK1.c"
      icurcol ++;
    } else {
      __CrestBranch(22825, 7820, 0);
      __CrestLoad(22830, (unsigned long )0, (long long )0);
      __CrestStore(22831, (unsigned long )(& icurcol));
# 188 "../HPL_pdgesvK1.c"
      icurcol = 0;
    }
    }
    {
    __CrestLoad(22836, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(22835, (unsigned long )0, (long long )1);
    __CrestApply2(22834, 0, (long long )(tag + 1));
    __CrestLoad(22833, (unsigned long )0, (long long )3000);
    __CrestApply2(22832, 14, (long long )(tag + 1 > 3000));
# 189 "../HPL_pdgesvK1.c"
    if (tag + 1 > 3000) {
      __CrestBranch(22837, 7822, 1);
      __CrestLoad(22839, (unsigned long )0, (long long )2001);
      __CrestStore(22840, (unsigned long )(& tag));
# 189 "../HPL_pdgesvK1.c"
      tag = 2001;
    } else {
      __CrestBranch(22838, 7823, 0);
      __CrestLoad(22843, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(22842, (unsigned long )0, (long long )1);
      __CrestApply2(22841, 0, (long long )(tag + 1));
      __CrestStore(22844, (unsigned long )(& tag));
# 189 "../HPL_pdgesvK1.c"
      tag ++;
    }
    }
    __CrestLoad(22847, (unsigned long )(& j), (long long )j);
    __CrestLoad(22846, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22845, 0, (long long )(j + nb));
    __CrestStore(22848, (unsigned long )(& j));
# 158 "../HPL_pdgesvK1.c"
    j += nb;
  }
  while_break___2: ;
  }
  __CrestLoad(22849, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(22850, (unsigned long )(& N), (long long )N);
  __CrestLoad(22851, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22852, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22853, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(22854, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(22855, (unsigned long )(& npcol), (long long )npcol);
# 194 "../HPL_pdgesvK1.c"
  nn = HPL_numrocI((int const )1, (int const )N, (int const )nb, (int const )nb,
                   (int const )mycol, (int const )0, (int const )npcol);
  __CrestHandleReturn(22857, (long long )nn);
  __CrestStore(22856, (unsigned long )(& nn));
  __CrestLoad(22858, (unsigned long )0, (long long )0);
  __CrestStore(22859, (unsigned long )(& k));
# 195 "../HPL_pdgesvK1.c"
  k = 0;
  {
# 195 "../HPL_pdgesvK1.c"
  while (1) {
    while_continue___5: ;
    {
    __CrestLoad(22862, (unsigned long )(& k), (long long )k);
    __CrestLoad(22861, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(22860, 16, (long long )(k < depth));
# 195 "../HPL_pdgesvK1.c"
    if (k < depth) {
      __CrestBranch(22863, 7831, 1);

    } else {
      __CrestBranch(22864, 7832, 0);
# 195 "../HPL_pdgesvK1.c"
      goto while_break___5;
    }
    }
# 197 "../HPL_pdgesvK1.c"
    mem_36 = panel + k;
    __CrestLoad(22865, (unsigned long )(& nn), (long long )nn);
# 197 "../HPL_pdgesvK1.c"
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_36, (int const )nn);
    __CrestClearStack(22866);
# 198 "../HPL_pdgesvK1.c"
    HPL_pdpanel_disp(panel + k);
    __CrestClearStack(22867);
    __CrestLoad(22870, (unsigned long )(& k), (long long )k);
    __CrestLoad(22869, (unsigned long )0, (long long )1);
    __CrestApply2(22868, 0, (long long )(k + 1));
    __CrestStore(22871, (unsigned long )(& k));
# 195 "../HPL_pdgesvK1.c"
    k ++;
  }
  while_break___5: ;
  }
  {
  __CrestLoad(22874, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(22873, (unsigned long )0, (long long )0);
  __CrestApply2(22872, 13, (long long )(panel != 0));
# 201 "../HPL_pdgesvK1.c"
  if (panel != 0) {
    __CrestBranch(22875, 7836, 1);
# 201 "../HPL_pdgesvK1.c"
    free((void *)panel);
    __CrestClearStack(22877);
  } else {
    __CrestBranch(22876, 7837, 0);

  }
  }

  return_label:
  {
  __CrestReturn(22878);
# 53 "../HPL_pdgesvK1.c"
  return;
  }
}
}
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 324 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesvK2(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
# 53 "../HPL_pdgesvK2.c"
void HPL_pdgesvK2(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A )
{
  HPL_T_panel *p ;
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const ) ;
  int N ;
  int depth ;
  int icurcol ;
  int j ;
  int jb ;
  int jj ;
  int jstart ;
  int k ;
  int mycol ;
  int n ;
  int nb ;
  int nn ;
  int npcol ;
  int nq ;
  int tag ;
  int test ;
  void *tmp ;
  int tmp___0 ;
  HPL_T_panel **mem_25 ;
  HPL_T_panel **mem_26 ;
  HPL_T_panel **mem_27 ;
  HPL_T_panel **mem_28 ;
  HPL_T_panel **mem_29 ;
  HPL_T_panel **mem_30 ;
  HPL_T_panel **mem_31 ;
  HPL_T_panel **mem_32 ;
  HPL_T_panel **mem_33 ;
  HPL_T_panel **mem_34 ;
  HPL_T_panel **mem_35 ;
  HPL_T_panel **mem_36 ;
  HPL_T_panel **mem_37 ;
  HPL_T_panel **mem_38 ;
  HPL_T_panel **mem_39 ;
  HPL_T_panel **mem_40 ;
  HPL_T_panel **mem_41 ;
  HPL_T_panel **mem_42 ;

  {
  __CrestCall(22879, 116);
# 97 "../HPL_pdgesvK2.c"
  panel = (HPL_T_panel **)((void *)0);
  __CrestLoad(22880, (unsigned long )0, (long long )0);
  __CrestStore(22881, (unsigned long )(& icurcol));
# 99 "../HPL_pdgesvK2.c"
  icurcol = 0;
  __CrestLoad(22882, (unsigned long )0, (long long )0);
  __CrestStore(22883, (unsigned long )(& jj));
# 99 "../HPL_pdgesvK2.c"
  jj = 0;
  __CrestLoad(22884, (unsigned long )0, (long long )2001);
  __CrestStore(22885, (unsigned long )(& tag));
# 99 "../HPL_pdgesvK2.c"
  tag = 2001;
  __CrestLoad(22886, (unsigned long )0, (long long )2);
  __CrestStore(22887, (unsigned long )(& test));
# 99 "../HPL_pdgesvK2.c"
  test = 2;
  __CrestLoad(22888, (unsigned long )(& GRID->mycol), (long long )GRID->mycol);
  __CrestStore(22889, (unsigned long )(& mycol));
# 105 "../HPL_pdgesvK2.c"
  mycol = GRID->mycol;
  __CrestLoad(22890, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
  __CrestStore(22891, (unsigned long )(& npcol));
# 105 "../HPL_pdgesvK2.c"
  npcol = GRID->npcol;
  __CrestLoad(22892, (unsigned long )(& ALGO->depth), (long long )ALGO->depth);
  __CrestStore(22893, (unsigned long )(& depth));
# 106 "../HPL_pdgesvK2.c"
  depth = ALGO->depth;
# 106 "../HPL_pdgesvK2.c"
  HPL_pdupdate = ALGO->upfun;
  __CrestLoad(22894, (unsigned long )(& A->n), (long long )A->n);
  __CrestStore(22895, (unsigned long )(& N));
# 107 "../HPL_pdgesvK2.c"
  N = A->n;
  __CrestLoad(22896, (unsigned long )(& A->nb), (long long )A->nb);
  __CrestStore(22897, (unsigned long )(& nb));
# 107 "../HPL_pdgesvK2.c"
  nb = A->nb;
  {
  __CrestLoad(22900, (unsigned long )(& N), (long long )N);
  __CrestLoad(22899, (unsigned long )0, (long long )0);
  __CrestApply2(22898, 15, (long long )(N <= 0));
# 109 "../HPL_pdgesvK2.c"
  if (N <= 0) {
    __CrestBranch(22901, 7842, 1);
# 109 "../HPL_pdgesvK2.c"
    goto return_label;
  } else {
    __CrestBranch(22902, 7844, 0);

  }
  }
  __CrestLoad(22907, (unsigned long )(& depth), (long long )depth);
  __CrestLoad(22906, (unsigned long )0, (long long )1);
  __CrestApply2(22905, 0, (long long )(depth + 1));
  __CrestLoad(22904, (unsigned long )0, (long long )sizeof(HPL_T_panel *));
  __CrestApply2(22903, 2, (long long )((unsigned long )(depth + 1) * sizeof(HPL_T_panel *)));
# 113 "../HPL_pdgesvK2.c"
  tmp = malloc((unsigned long )(depth + 1) * sizeof(HPL_T_panel *));
  __CrestClearStack(22908);
# 113 "../HPL_pdgesvK2.c"
  panel = (HPL_T_panel **)tmp;
  {
  __CrestLoad(22911, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(22910, (unsigned long )0, (long long )((unsigned long )((void *)0)));
  __CrestApply2(22909, 12, (long long )((unsigned long )panel == (unsigned long )((void *)0)));
# 114 "../HPL_pdgesvK2.c"
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
    __CrestBranch(22912, 7847, 1);
    __CrestLoad(22914, (unsigned long )0, (long long )115);
# 115 "../HPL_pdgesvK2.c"
    HPL_pabort(115, "HPL_pdgesvK2", "Memory allocation failed");
    __CrestClearStack(22915);
  } else {
    __CrestBranch(22913, 7848, 0);

  }
  }
  __CrestLoad(22918, (unsigned long )(& N), (long long )N);
  __CrestLoad(22917, (unsigned long )0, (long long )1);
  __CrestApply2(22916, 0, (long long )(N + 1));
  __CrestLoad(22919, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22920, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(22921, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(22922, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(22923, (unsigned long )(& npcol), (long long )npcol);
# 119 "../HPL_pdgesvK2.c"
  nq = HPL_numroc((int const )(N + 1), (int const )nb, (int const )nb, (int const )mycol,
                  (int const )0, (int const )npcol);
  __CrestHandleReturn(22925, (long long )nq);
  __CrestStore(22924, (unsigned long )(& nq));
  __CrestLoad(22926, (unsigned long )(& N), (long long )N);
  __CrestStore(22927, (unsigned long )(& nn));
# 119 "../HPL_pdgesvK2.c"
  nn = N;
  __CrestLoad(22928, (unsigned long )0, (long long )0);
  __CrestStore(22929, (unsigned long )(& jstart));
# 119 "../HPL_pdgesvK2.c"
  jstart = 0;
  __CrestLoad(22930, (unsigned long )0, (long long )0);
  __CrestStore(22931, (unsigned long )(& k));
# 121 "../HPL_pdgesvK2.c"
  k = 0;
  {
# 121 "../HPL_pdgesvK2.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(22934, (unsigned long )(& k), (long long )k);
    __CrestLoad(22933, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(22932, 16, (long long )(k < depth));
# 121 "../HPL_pdgesvK2.c"
    if (k < depth) {
      __CrestBranch(22935, 7854, 1);

    } else {
      __CrestBranch(22936, 7855, 0);
# 121 "../HPL_pdgesvK2.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(22939, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22938, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(22937, 16, (long long )(nn < nb));
# 123 "../HPL_pdgesvK2.c"
    if (nn < nb) {
      __CrestBranch(22940, 7857, 1);
      __CrestLoad(22942, (unsigned long )(& nn), (long long )nn);
      __CrestStore(22943, (unsigned long )(& jb));
# 123 "../HPL_pdgesvK2.c"
      jb = nn;
    } else {
      __CrestBranch(22941, 7858, 0);
      __CrestLoad(22944, (unsigned long )(& nb), (long long )nb);
      __CrestStore(22945, (unsigned long )(& jb));
# 123 "../HPL_pdgesvK2.c"
      jb = nb;
    }
    }
    __CrestLoad(22946, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22949, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22948, (unsigned long )0, (long long )1);
    __CrestApply2(22947, 0, (long long )(nn + 1));
    __CrestLoad(22950, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(22951, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22952, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22953, (unsigned long )(& tag), (long long )tag);
# 124 "../HPL_pdgesvK2.c"
    HPL_pdpanel_new(GRID, ALGO, (int const )nn, (int const )(nn + 1), (int const )jb,
                    A, (int const )jstart, (int const )jstart, (int const )tag,
                    panel + k);
    __CrestClearStack(22954);
    __CrestLoad(22957, (unsigned long )(& nn), (long long )nn);
    __CrestLoad(22956, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(22955, 1, (long long )(nn - jb));
    __CrestStore(22958, (unsigned long )(& nn));
# 126 "../HPL_pdgesvK2.c"
    nn -= jb;
    __CrestLoad(22961, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(22960, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(22959, 0, (long long )(jstart + jb));
    __CrestStore(22962, (unsigned long )(& jstart));
# 126 "../HPL_pdgesvK2.c"
    jstart += jb;
    {
    __CrestLoad(22965, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(22964, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(22963, 12, (long long )(mycol == icurcol));
# 127 "../HPL_pdgesvK2.c"
    if (mycol == icurcol) {
      __CrestBranch(22966, 7861, 1);
      __CrestLoad(22970, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(22969, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22968, 0, (long long )(jj + jb));
      __CrestStore(22971, (unsigned long )(& jj));
# 127 "../HPL_pdgesvK2.c"
      jj += jb;
      __CrestLoad(22974, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(22973, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(22972, 1, (long long )(nq - jb));
      __CrestStore(22975, (unsigned long )(& nq));
# 127 "../HPL_pdgesvK2.c"
      nq -= jb;
    } else {
      __CrestBranch(22967, 7862, 0);

    }
    }
    {
    __CrestLoad(22980, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestLoad(22979, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(22978, (unsigned long )0, (long long )1);
    __CrestApply2(22977, 1, (long long )(npcol - 1));
    __CrestApply2(22976, 13, (long long )(icurcol != npcol - 1));
# 128 "../HPL_pdgesvK2.c"
    if (icurcol != npcol - 1) {
      __CrestBranch(22981, 7864, 1);
      __CrestLoad(22985, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestLoad(22984, (unsigned long )0, (long long )1);
      __CrestApply2(22983, 0, (long long )(icurcol + 1));
      __CrestStore(22986, (unsigned long )(& icurcol));
# 128 "../HPL_pdgesvK2.c"
      icurcol ++;
    } else {
      __CrestBranch(22982, 7865, 0);
      __CrestLoad(22987, (unsigned long )0, (long long )0);
      __CrestStore(22988, (unsigned long )(& icurcol));
# 128 "../HPL_pdgesvK2.c"
      icurcol = 0;
    }
    }
    {
    __CrestLoad(22993, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(22992, (unsigned long )0, (long long )1);
    __CrestApply2(22991, 0, (long long )(tag + 1));
    __CrestLoad(22990, (unsigned long )0, (long long )3000);
    __CrestApply2(22989, 14, (long long )(tag + 1 > 3000));
# 129 "../HPL_pdgesvK2.c"
    if (tag + 1 > 3000) {
      __CrestBranch(22994, 7867, 1);
      __CrestLoad(22996, (unsigned long )0, (long long )2001);
      __CrestStore(22997, (unsigned long )(& tag));
# 129 "../HPL_pdgesvK2.c"
      tag = 2001;
    } else {
      __CrestBranch(22995, 7868, 0);
      __CrestLoad(23000, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(22999, (unsigned long )0, (long long )1);
      __CrestApply2(22998, 0, (long long )(tag + 1));
      __CrestStore(23001, (unsigned long )(& tag));
# 129 "../HPL_pdgesvK2.c"
      tag ++;
    }
    }
    __CrestLoad(23004, (unsigned long )(& k), (long long )k);
    __CrestLoad(23003, (unsigned long )0, (long long )1);
    __CrestApply2(23002, 0, (long long )(k + 1));
    __CrestStore(23005, (unsigned long )(& k));
# 121 "../HPL_pdgesvK2.c"
    k ++;
  }
  while_break: ;
  }
  {
  __CrestLoad(23008, (unsigned long )(& nn), (long long )nn);
  __CrestLoad(23007, (unsigned long )(& nb), (long long )nb);
  __CrestApply2(23006, 16, (long long )(nn < nb));
# 134 "../HPL_pdgesvK2.c"
  if (nn < nb) {
    __CrestBranch(23009, 7872, 1);
    __CrestLoad(23011, (unsigned long )(& nn), (long long )nn);
    __CrestStore(23012, (unsigned long )(& tmp___0));
# 134 "../HPL_pdgesvK2.c"
    tmp___0 = nn;
  } else {
    __CrestBranch(23010, 7873, 0);
    __CrestLoad(23013, (unsigned long )(& nb), (long long )nb);
    __CrestStore(23014, (unsigned long )(& tmp___0));
# 134 "../HPL_pdgesvK2.c"
    tmp___0 = nb;
  }
  }
  __CrestLoad(23015, (unsigned long )(& nn), (long long )nn);
  __CrestLoad(23018, (unsigned long )(& nn), (long long )nn);
  __CrestLoad(23017, (unsigned long )0, (long long )1);
  __CrestApply2(23016, 0, (long long )(nn + 1));
  __CrestLoad(23019, (unsigned long )(& tmp___0), (long long )tmp___0);
  __CrestLoad(23020, (unsigned long )(& jstart), (long long )jstart);
  __CrestLoad(23021, (unsigned long )(& jstart), (long long )jstart);
  __CrestLoad(23022, (unsigned long )(& tag), (long long )tag);
# 134 "../HPL_pdgesvK2.c"
  HPL_pdpanel_new(GRID, ALGO, (int const )nn, (int const )(nn + 1), (int const )tmp___0,
                  A, (int const )jstart, (int const )jstart, (int const )tag,
                  panel + depth);
  __CrestClearStack(23023);
  {
  __CrestLoad(23028, (unsigned long )(& tag), (long long )tag);
  __CrestLoad(23027, (unsigned long )0, (long long )1);
  __CrestApply2(23026, 0, (long long )(tag + 1));
  __CrestLoad(23025, (unsigned long )0, (long long )3000);
  __CrestApply2(23024, 14, (long long )(tag + 1 > 3000));
# 136 "../HPL_pdgesvK2.c"
  if (tag + 1 > 3000) {
    __CrestBranch(23029, 7876, 1);
    __CrestLoad(23031, (unsigned long )0, (long long )2001);
    __CrestStore(23032, (unsigned long )(& tag));
# 136 "../HPL_pdgesvK2.c"
    tag = 2001;
  } else {
    __CrestBranch(23030, 7877, 0);
    __CrestLoad(23035, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(23034, (unsigned long )0, (long long )1);
    __CrestApply2(23033, 0, (long long )(tag + 1));
    __CrestStore(23036, (unsigned long )(& tag));
# 136 "../HPL_pdgesvK2.c"
    tag ++;
  }
  }
  __CrestLoad(23037, (unsigned long )0, (long long )0);
  __CrestStore(23038, (unsigned long )(& k));
# 140 "../HPL_pdgesvK2.c"
  k = 0;
  __CrestLoad(23039, (unsigned long )0, (long long )0);
  __CrestStore(23040, (unsigned long )(& j));
# 140 "../HPL_pdgesvK2.c"
  j = 0;
  {
# 140 "../HPL_pdgesvK2.c"
  while (1) {
    while_continue___0: ;
    {
    __CrestLoad(23043, (unsigned long )(& k), (long long )k);
    __CrestLoad(23042, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(23041, 16, (long long )(k < depth));
# 140 "../HPL_pdgesvK2.c"
    if (k < depth) {
      __CrestBranch(23044, 7883, 1);

    } else {
      __CrestBranch(23045, 7884, 0);
# 140 "../HPL_pdgesvK2.c"
      goto while_break___0;
    }
    }
    __CrestLoad(23048, (unsigned long )(& jstart), (long long )jstart);
    __CrestLoad(23047, (unsigned long )(& j), (long long )j);
    __CrestApply2(23046, 1, (long long )(jstart - j));
    __CrestStore(23049, (unsigned long )(& jb));
# 142 "../HPL_pdgesvK2.c"
    jb = jstart - j;
    {
    __CrestLoad(23052, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(23051, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(23050, 16, (long long )(jb < nb));
# 142 "../HPL_pdgesvK2.c"
    if (jb < nb) {
      __CrestBranch(23053, 7887, 1);
      __CrestLoad(23055, (unsigned long )(& jb), (long long )jb);
      __CrestStore(23056, (unsigned long )(& jb));
# 142 "../HPL_pdgesvK2.c"
      jb = jb;
    } else {
      __CrestBranch(23054, 7888, 0);
      __CrestLoad(23057, (unsigned long )(& nb), (long long )nb);
      __CrestStore(23058, (unsigned long )(& jb));
# 142 "../HPL_pdgesvK2.c"
      jb = nb;
    }
    }
    __CrestLoad(23061, (unsigned long )(& j), (long long )j);
    __CrestLoad(23060, (unsigned long )(& jb), (long long )jb);
    __CrestApply2(23059, 0, (long long )(j + jb));
    __CrestStore(23062, (unsigned long )(& j));
# 142 "../HPL_pdgesvK2.c"
    j += jb;
# 146 "../HPL_pdgesvK2.c"
    mem_25 = panel + k;
# 146 "../HPL_pdgesvK2.c"
    HPL_pdfact(*mem_25);
    __CrestClearStack(23063);
# 147 "../HPL_pdgesvK2.c"
    mem_26 = panel + k;
# 147 "../HPL_pdgesvK2.c"
    HPL_binit(*mem_26);
    __CrestClearStack(23064);
    {
# 148 "../HPL_pdgesvK2.c"
    while (1) {
      while_continue___1: ;
# 149 "../HPL_pdgesvK2.c"
      mem_27 = panel + k;
# 149 "../HPL_pdgesvK2.c"
      HPL_bcast(*mem_27, & test);
      __CrestClearStack(23065);
      {
      __CrestLoad(23068, (unsigned long )(& test), (long long )test);
      __CrestLoad(23067, (unsigned long )0, (long long )1);
      __CrestApply2(23066, 12, (long long )(test == 1));
# 148 "../HPL_pdgesvK2.c"
      if (test == 1) {
        __CrestBranch(23069, 7895, 1);
# 148 "../HPL_pdgesvK2.c"
        goto while_break___1;
      } else {
        __CrestBranch(23070, 7896, 0);

      }
      }
    }
    while_break___1: ;
    }
# 151 "../HPL_pdgesvK2.c"
    mem_28 = panel + k;
# 151 "../HPL_pdgesvK2.c"
    HPL_bwait(*mem_28);
    __CrestClearStack(23071);
    {
    __CrestLoad(23076, (unsigned long )(& k), (long long )k);
    __CrestLoad(23075, (unsigned long )(& depth), (long long )depth);
    __CrestLoad(23074, (unsigned long )0, (long long )1);
    __CrestApply2(23073, 1, (long long )(depth - 1));
    __CrestApply2(23072, 16, (long long )(k < depth - 1));
# 155 "../HPL_pdgesvK2.c"
    if (k < depth - 1) {
      __CrestBranch(23077, 7900, 1);
      __CrestLoad(23081, (unsigned long )(& jstart), (long long )jstart);
      __CrestLoad(23080, (unsigned long )(& j), (long long )j);
      __CrestApply2(23079, 1, (long long )(jstart - j));
      __CrestLoad(23082, (unsigned long )(& j), (long long )j);
      __CrestLoad(23083, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(23084, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(23085, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(23086, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(23087, (unsigned long )(& npcol), (long long )npcol);
# 157 "../HPL_pdgesvK2.c"
      nn = HPL_numrocI((int const )(jstart - j), (int const )j, (int const )nb,
                       (int const )nb, (int const )mycol, (int const )0, (int const )npcol);
      __CrestHandleReturn(23089, (long long )nn);
      __CrestStore(23088, (unsigned long )(& nn));
# 158 "../HPL_pdgesvK2.c"
      mem_29 = panel + k;
      __CrestLoad(23090, (unsigned long )(& nn), (long long )nn);
# 158 "../HPL_pdgesvK2.c"
      (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_29, (int const )nn);
      __CrestClearStack(23091);
    } else {
      __CrestBranch(23078, 7901, 0);

    }
    }
    __CrestLoad(23094, (unsigned long )(& k), (long long )k);
    __CrestLoad(23093, (unsigned long )0, (long long )1);
    __CrestApply2(23092, 0, (long long )(k + 1));
    __CrestStore(23095, (unsigned long )(& k));
# 140 "../HPL_pdgesvK2.c"
    k ++;
  }
  while_break___0: ;
  }
  __CrestLoad(23096, (unsigned long )(& jstart), (long long )jstart);
  __CrestStore(23097, (unsigned long )(& j));
# 164 "../HPL_pdgesvK2.c"
  j = jstart;
  {
# 164 "../HPL_pdgesvK2.c"
  while (1) {
    while_continue___2: ;
    {
    __CrestLoad(23100, (unsigned long )(& j), (long long )j);
    __CrestLoad(23099, (unsigned long )(& N), (long long )N);
    __CrestApply2(23098, 16, (long long )(j < N));
# 164 "../HPL_pdgesvK2.c"
    if (j < N) {
      __CrestBranch(23101, 7909, 1);

    } else {
      __CrestBranch(23102, 7910, 0);
# 164 "../HPL_pdgesvK2.c"
      goto while_break___2;
    }
    }
    __CrestLoad(23105, (unsigned long )(& N), (long long )N);
    __CrestLoad(23104, (unsigned long )(& j), (long long )j);
    __CrestApply2(23103, 1, (long long )(N - j));
    __CrestStore(23106, (unsigned long )(& n));
# 166 "../HPL_pdgesvK2.c"
    n = N - j;
    {
    __CrestLoad(23109, (unsigned long )(& n), (long long )n);
    __CrestLoad(23108, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(23107, 16, (long long )(n < nb));
# 166 "../HPL_pdgesvK2.c"
    if (n < nb) {
      __CrestBranch(23110, 7913, 1);
      __CrestLoad(23112, (unsigned long )(& n), (long long )n);
      __CrestStore(23113, (unsigned long )(& jb));
# 166 "../HPL_pdgesvK2.c"
      jb = n;
    } else {
      __CrestBranch(23111, 7914, 0);
      __CrestLoad(23114, (unsigned long )(& nb), (long long )nb);
      __CrestStore(23115, (unsigned long )(& jb));
# 166 "../HPL_pdgesvK2.c"
      jb = nb;
    }
    }
# 171 "../HPL_pdgesvK2.c"
    mem_30 = panel + depth;
# 171 "../HPL_pdgesvK2.c"
    HPL_pdpanel_free(*mem_30);
    __CrestClearStack(23116);
# 172 "../HPL_pdgesvK2.c"
    mem_31 = panel + depth;
    __CrestLoad(23117, (unsigned long )(& n), (long long )n);
    __CrestLoad(23120, (unsigned long )(& n), (long long )n);
    __CrestLoad(23119, (unsigned long )0, (long long )1);
    __CrestApply2(23118, 0, (long long )(n + 1));
    __CrestLoad(23121, (unsigned long )(& jb), (long long )jb);
    __CrestLoad(23122, (unsigned long )(& j), (long long )j);
    __CrestLoad(23123, (unsigned long )(& j), (long long )j);
    __CrestLoad(23124, (unsigned long )(& tag), (long long )tag);
# 172 "../HPL_pdgesvK2.c"
    HPL_pdpanel_init(GRID, ALGO, (int const )n, (int const )(n + 1), (int const )jb,
                     A, (int const )j, (int const )j, (int const )tag, *mem_31);
    __CrestClearStack(23125);
    {
    __CrestLoad(23128, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(23127, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(23126, 12, (long long )(mycol == icurcol));
# 174 "../HPL_pdgesvK2.c"
    if (mycol == icurcol) {
      __CrestBranch(23129, 7917, 1);
      __CrestLoad(23131, (unsigned long )(& jb), (long long )jb);
      __CrestLoad(23132, (unsigned long )(& j), (long long )j);
      __CrestLoad(23133, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(23134, (unsigned long )(& nb), (long long )nb);
      __CrestLoad(23135, (unsigned long )(& mycol), (long long )mycol);
      __CrestLoad(23136, (unsigned long )0, (long long )((int const )0));
      __CrestLoad(23137, (unsigned long )(& npcol), (long long )npcol);
# 176 "../HPL_pdgesvK2.c"
      nn = HPL_numrocI((int const )jb, (int const )j, (int const )nb, (int const )nb,
                       (int const )mycol, (int const )0, (int const )npcol);
      __CrestHandleReturn(23139, (long long )nn);
      __CrestStore(23138, (unsigned long )(& nn));
      __CrestLoad(23140, (unsigned long )0, (long long )0);
      __CrestStore(23141, (unsigned long )(& k));
# 177 "../HPL_pdgesvK2.c"
      k = 0;
      {
# 177 "../HPL_pdgesvK2.c"
      while (1) {
        while_continue___3: ;
        {
        __CrestLoad(23144, (unsigned long )(& k), (long long )k);
        __CrestLoad(23143, (unsigned long )(& depth), (long long )depth);
        __CrestApply2(23142, 16, (long long )(k < depth));
# 177 "../HPL_pdgesvK2.c"
        if (k < depth) {
          __CrestBranch(23145, 7922, 1);

        } else {
          __CrestBranch(23146, 7923, 0);
# 177 "../HPL_pdgesvK2.c"
          goto while_break___3;
        }
        }
# 178 "../HPL_pdgesvK2.c"
        mem_32 = panel + k;
        __CrestLoad(23147, (unsigned long )(& nn), (long long )nn);
# 178 "../HPL_pdgesvK2.c"
        (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_32, (int const )nn);
        __CrestClearStack(23148);
        __CrestLoad(23151, (unsigned long )(& k), (long long )k);
        __CrestLoad(23150, (unsigned long )0, (long long )1);
        __CrestApply2(23149, 0, (long long )(k + 1));
        __CrestStore(23152, (unsigned long )(& k));
# 177 "../HPL_pdgesvK2.c"
        k ++;
      }
      while_break___3: ;
      }
# 179 "../HPL_pdgesvK2.c"
      mem_33 = panel + depth;
# 179 "../HPL_pdgesvK2.c"
      HPL_pdfact(*mem_33);
      __CrestClearStack(23153);
    } else {
      __CrestBranch(23130, 7927, 0);
      __CrestLoad(23154, (unsigned long )0, (long long )0);
      __CrestStore(23155, (unsigned long )(& nn));
# 181 "../HPL_pdgesvK2.c"
      nn = 0;
    }
    }
# 183 "../HPL_pdgesvK2.c"
    mem_34 = panel + depth;
# 183 "../HPL_pdgesvK2.c"
    HPL_binit(*mem_34);
    __CrestClearStack(23156);
# 184 "../HPL_pdgesvK2.c"
    mem_35 = panel + depth;
# 184 "../HPL_pdgesvK2.c"
    mem_36 = panel + 0;
    __CrestLoad(23159, (unsigned long )(& nq), (long long )nq);
    __CrestLoad(23158, (unsigned long )(& nn), (long long )nn);
    __CrestApply2(23157, 1, (long long )(nq - nn));
# 184 "../HPL_pdgesvK2.c"
    (*HPL_pdupdate)(*mem_35, & test, *mem_36, (int const )(nq - nn));
    __CrestClearStack(23160);
# 185 "../HPL_pdgesvK2.c"
    mem_37 = panel + depth;
# 185 "../HPL_pdgesvK2.c"
    HPL_bwait(*mem_37);
    __CrestClearStack(23161);
# 192 "../HPL_pdgesvK2.c"
    mem_38 = panel + 0;
# 192 "../HPL_pdgesvK2.c"
    p = *mem_38;
    __CrestLoad(23162, (unsigned long )0, (long long )0);
    __CrestStore(23163, (unsigned long )(& k));
# 192 "../HPL_pdgesvK2.c"
    k = 0;
    {
# 192 "../HPL_pdgesvK2.c"
    while (1) {
      while_continue___4: ;
      {
      __CrestLoad(23166, (unsigned long )(& k), (long long )k);
      __CrestLoad(23165, (unsigned long )(& depth), (long long )depth);
      __CrestApply2(23164, 16, (long long )(k < depth));
# 192 "../HPL_pdgesvK2.c"
      if (k < depth) {
        __CrestBranch(23167, 7933, 1);

      } else {
        __CrestBranch(23168, 7934, 0);
# 192 "../HPL_pdgesvK2.c"
        goto while_break___4;
      }
      }
# 192 "../HPL_pdgesvK2.c"
      mem_39 = panel + k;
# 192 "../HPL_pdgesvK2.c"
      mem_40 = panel + (k + 1);
# 192 "../HPL_pdgesvK2.c"
      *mem_39 = *mem_40;
      __CrestLoad(23171, (unsigned long )(& k), (long long )k);
      __CrestLoad(23170, (unsigned long )0, (long long )1);
      __CrestApply2(23169, 0, (long long )(k + 1));
      __CrestStore(23172, (unsigned long )(& k));
# 192 "../HPL_pdgesvK2.c"
      k ++;
    }
    while_break___4: ;
    }
# 193 "../HPL_pdgesvK2.c"
    mem_41 = panel + depth;
# 193 "../HPL_pdgesvK2.c"
    *mem_41 = p;
    {
    __CrestLoad(23175, (unsigned long )(& mycol), (long long )mycol);
    __CrestLoad(23174, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestApply2(23173, 12, (long long )(mycol == icurcol));
# 195 "../HPL_pdgesvK2.c"
    if (mycol == icurcol) {
      __CrestBranch(23176, 7939, 1);
      __CrestLoad(23180, (unsigned long )(& jj), (long long )jj);
      __CrestLoad(23179, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(23178, 0, (long long )(jj + jb));
      __CrestStore(23181, (unsigned long )(& jj));
# 195 "../HPL_pdgesvK2.c"
      jj += jb;
      __CrestLoad(23184, (unsigned long )(& nq), (long long )nq);
      __CrestLoad(23183, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(23182, 1, (long long )(nq - jb));
      __CrestStore(23185, (unsigned long )(& nq));
# 195 "../HPL_pdgesvK2.c"
      nq -= jb;
    } else {
      __CrestBranch(23177, 7940, 0);

    }
    }
    {
    __CrestLoad(23190, (unsigned long )(& icurcol), (long long )icurcol);
    __CrestLoad(23189, (unsigned long )(& npcol), (long long )npcol);
    __CrestLoad(23188, (unsigned long )0, (long long )1);
    __CrestApply2(23187, 1, (long long )(npcol - 1));
    __CrestApply2(23186, 13, (long long )(icurcol != npcol - 1));
# 196 "../HPL_pdgesvK2.c"
    if (icurcol != npcol - 1) {
      __CrestBranch(23191, 7942, 1);
      __CrestLoad(23195, (unsigned long )(& icurcol), (long long )icurcol);
      __CrestLoad(23194, (unsigned long )0, (long long )1);
      __CrestApply2(23193, 0, (long long )(icurcol + 1));
      __CrestStore(23196, (unsigned long )(& icurcol));
# 196 "../HPL_pdgesvK2.c"
      icurcol ++;
    } else {
      __CrestBranch(23192, 7943, 0);
      __CrestLoad(23197, (unsigned long )0, (long long )0);
      __CrestStore(23198, (unsigned long )(& icurcol));
# 196 "../HPL_pdgesvK2.c"
      icurcol = 0;
    }
    }
    {
    __CrestLoad(23203, (unsigned long )(& tag), (long long )tag);
    __CrestLoad(23202, (unsigned long )0, (long long )1);
    __CrestApply2(23201, 0, (long long )(tag + 1));
    __CrestLoad(23200, (unsigned long )0, (long long )3000);
    __CrestApply2(23199, 14, (long long )(tag + 1 > 3000));
# 197 "../HPL_pdgesvK2.c"
    if (tag + 1 > 3000) {
      __CrestBranch(23204, 7945, 1);
      __CrestLoad(23206, (unsigned long )0, (long long )2001);
      __CrestStore(23207, (unsigned long )(& tag));
# 197 "../HPL_pdgesvK2.c"
      tag = 2001;
    } else {
      __CrestBranch(23205, 7946, 0);
      __CrestLoad(23210, (unsigned long )(& tag), (long long )tag);
      __CrestLoad(23209, (unsigned long )0, (long long )1);
      __CrestApply2(23208, 0, (long long )(tag + 1));
      __CrestStore(23211, (unsigned long )(& tag));
# 197 "../HPL_pdgesvK2.c"
      tag ++;
    }
    }
    __CrestLoad(23214, (unsigned long )(& j), (long long )j);
    __CrestLoad(23213, (unsigned long )(& nb), (long long )nb);
    __CrestApply2(23212, 0, (long long )(j + nb));
    __CrestStore(23215, (unsigned long )(& j));
# 164 "../HPL_pdgesvK2.c"
    j += nb;
  }
  while_break___2: ;
  }
  __CrestLoad(23216, (unsigned long )0, (long long )((int const )1));
  __CrestLoad(23217, (unsigned long )(& N), (long long )N);
  __CrestLoad(23218, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(23219, (unsigned long )(& nb), (long long )nb);
  __CrestLoad(23220, (unsigned long )(& mycol), (long long )mycol);
  __CrestLoad(23221, (unsigned long )0, (long long )((int const )0));
  __CrestLoad(23222, (unsigned long )(& npcol), (long long )npcol);
# 202 "../HPL_pdgesvK2.c"
  nn = HPL_numrocI((int const )1, (int const )N, (int const )nb, (int const )nb,
                   (int const )mycol, (int const )0, (int const )npcol);
  __CrestHandleReturn(23224, (long long )nn);
  __CrestStore(23223, (unsigned long )(& nn));
  __CrestLoad(23225, (unsigned long )0, (long long )0);
  __CrestStore(23226, (unsigned long )(& k));
# 203 "../HPL_pdgesvK2.c"
  k = 0;
  {
# 203 "../HPL_pdgesvK2.c"
  while (1) {
    while_continue___5: ;
    {
    __CrestLoad(23229, (unsigned long )(& k), (long long )k);
    __CrestLoad(23228, (unsigned long )(& depth), (long long )depth);
    __CrestApply2(23227, 16, (long long )(k < depth));
# 203 "../HPL_pdgesvK2.c"
    if (k < depth) {
      __CrestBranch(23230, 7954, 1);

    } else {
      __CrestBranch(23231, 7955, 0);
# 203 "../HPL_pdgesvK2.c"
      goto while_break___5;
    }
    }
# 205 "../HPL_pdgesvK2.c"
    mem_42 = panel + k;
    __CrestLoad(23232, (unsigned long )(& nn), (long long )nn);
# 205 "../HPL_pdgesvK2.c"
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *mem_42, (int const )nn);
    __CrestClearStack(23233);
# 206 "../HPL_pdgesvK2.c"
    HPL_pdpanel_disp(panel + k);
    __CrestClearStack(23234);
    __CrestLoad(23237, (unsigned long )(& k), (long long )k);
    __CrestLoad(23236, (unsigned long )0, (long long )1);
    __CrestApply2(23235, 0, (long long )(k + 1));
    __CrestStore(23238, (unsigned long )(& k));
# 203 "../HPL_pdgesvK2.c"
    k ++;
  }
  while_break___5: ;
  }
# 208 "../HPL_pdgesvK2.c"
  HPL_pdpanel_disp(panel + depth);
  __CrestClearStack(23239);
  {
  __CrestLoad(23242, (unsigned long )(& panel), (long long )((unsigned long )panel));
  __CrestLoad(23241, (unsigned long )0, (long long )0);
  __CrestApply2(23240, 13, (long long )(panel != 0));
# 210 "../HPL_pdgesvK2.c"
  if (panel != 0) {
    __CrestBranch(23243, 7960, 1);
# 210 "../HPL_pdgesvK2.c"
    free((void *)panel);
    __CrestClearStack(23245);
  } else {
    __CrestBranch(23244, 7961, 0);

  }
  }

  return_label:
  {
  __CrestReturn(23246);
# 53 "../HPL_pdgesvK2.c"
  return;
  }
}
}
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdgesv.c"
void HPL_pdgesv(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A )
{


  {
  __CrestCall(23247, 117);

  {
  __CrestLoad(23250, (unsigned long )(& A->n), (long long )A->n);
  __CrestLoad(23249, (unsigned long )0, (long long )0);
  __CrestApply2(23248, 15, (long long )(A->n <= 0));
# 97 "../HPL_pdgesv.c"
  if (A->n <= 0) {
    __CrestBranch(23251, 7965, 1);
# 97 "../HPL_pdgesv.c"
    goto return_label;
  } else {
    __CrestBranch(23252, 7967, 0);

  }
  }
  __CrestLoad(23253, (unsigned long )0, (long long )0);
  __CrestStore(23254, (unsigned long )(& A->info));
# 99 "../HPL_pdgesv.c"
  A->info = 0;
  {
  __CrestLoad(23257, (unsigned long )(& ALGO->depth), (long long )ALGO->depth);
  __CrestLoad(23256, (unsigned long )0, (long long )0);
  __CrestApply2(23255, 12, (long long )(ALGO->depth == 0));
# 101 "../HPL_pdgesv.c"
  if (ALGO->depth == 0) {
    __CrestBranch(23258, 7970, 1);
# 103 "../HPL_pdgesv.c"
    HPL_pdgesv0(GRID, ALGO, A);
    __CrestClearStack(23260);
  } else {
    __CrestBranch(23259, 7971, 0);
    {
    __CrestLoad(23263, (unsigned long )(& GRID->npcol), (long long )GRID->npcol);
    __CrestLoad(23262, (unsigned long )0, (long long )1);
    __CrestApply2(23261, 12, (long long )(GRID->npcol == 1));
# 101 "../HPL_pdgesv.c"
    if (GRID->npcol == 1) {
      __CrestBranch(23264, 7972, 1);
# 103 "../HPL_pdgesv.c"
      HPL_pdgesv0(GRID, ALGO, A);
      __CrestClearStack(23266);
    } else {
      __CrestBranch(23265, 7973, 0);
# 107 "../HPL_pdgesv.c"
      HPL_pdgesvK2(GRID, ALGO, A);
      __CrestClearStack(23267);
    }
    }
  }
  }
  {
  __CrestLoad(23270, (unsigned long )(& A->info), (long long )A->info);
  __CrestLoad(23269, (unsigned long )0, (long long )0);
  __CrestApply2(23268, 12, (long long )(A->info == 0));
# 112 "../HPL_pdgesv.c"
  if (A->info == 0) {
    __CrestBranch(23271, 7975, 1);
# 112 "../HPL_pdgesv.c"
    HPL_pdtrsv(GRID, A);
    __CrestClearStack(23273);
  } else {
    __CrestBranch(23272, 7976, 0);

  }
  }

  return_label:
  {
  __CrestReturn(23274);
# 53 "../HPL_pdgesv.c"
  return;
  }
}
}
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 73 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_dmatgen(int const M , int const N , double *A , int const LDA , int const ISEED ) ;
# 93 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_xjumpm(int const JUMPM , int *MULT , int *IADD , int *IRANN , int *IRANM ,
                int *IAM , int *ICM ) ;
# 103 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_setran(int const OPTION , int *IRAN ) ;
# 115 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
double HPL_rand(void) ;
# 53 "../HPL_dmatgen.c"
void HPL_dmatgen(int const M , int const N , double *A , int const LDA , int const ISEED )
{
  int iadd[2] ;
  int ia1[2] ;
  int ic1[2] ;
  int iran1[2] ;
  int jseed[2] ;
  int mult[2] ;
  int i ;
  int incA ;
  int j ;

  {
  __CrestCall(23279, 118);
  __CrestStore(23278, (unsigned long )(& ISEED));
  __CrestStore(23277, (unsigned long )(& LDA));
  __CrestStore(23276, (unsigned long )(& N));
  __CrestStore(23275, (unsigned long )(& M));
  __CrestLoad(23282, (unsigned long )(& LDA), (long long )LDA);
  __CrestLoad(23281, (unsigned long )(& M), (long long )M);
  __CrestApply2(23280, 1, (long long )(LDA - M));
  __CrestStore(23283, (unsigned long )(& incA));
# 112 "../HPL_dmatgen.c"
  incA = (int )(LDA - M);
  {
  __CrestLoad(23286, (unsigned long )(& M), (long long )M);
  __CrestLoad(23285, (unsigned long )0, (long long )0);
  __CrestApply2(23284, 15, (long long )(M <= 0));
# 116 "../HPL_dmatgen.c"
  if (M <= 0) {
    __CrestBranch(23287, 7981, 1);
# 116 "../HPL_dmatgen.c"
    goto return_label;
  } else {
    __CrestBranch(23288, 7983, 0);
    {
    __CrestLoad(23291, (unsigned long )(& N), (long long )N);
    __CrestLoad(23290, (unsigned long )0, (long long )0);
    __CrestApply2(23289, 15, (long long )(N <= 0));
# 116 "../HPL_dmatgen.c"
    if (N <= 0) {
      __CrestBranch(23292, 7984, 1);
# 116 "../HPL_dmatgen.c"
      goto return_label;
    } else {
      __CrestBranch(23293, 7986, 0);

    }
    }
  }
  }
  __CrestLoad(23294, (unsigned long )0, (long long )20077);
  __CrestStore(23295, (unsigned long )(& mult[0]));
# 120 "../HPL_dmatgen.c"
  mult[0] = 20077;
  __CrestLoad(23296, (unsigned long )0, (long long )16838);
  __CrestStore(23297, (unsigned long )(& mult[1]));
# 120 "../HPL_dmatgen.c"
  mult[1] = 16838;
  __CrestLoad(23298, (unsigned long )0, (long long )12345);
  __CrestStore(23299, (unsigned long )(& iadd[0]));
# 121 "../HPL_dmatgen.c"
  iadd[0] = 12345;
  __CrestLoad(23300, (unsigned long )0, (long long )0);
  __CrestStore(23301, (unsigned long )(& iadd[1]));
# 121 "../HPL_dmatgen.c"
  iadd[1] = 0;
  __CrestLoad(23302, (unsigned long )(& ISEED), (long long )ISEED);
  __CrestStore(23303, (unsigned long )(& jseed[0]));
# 122 "../HPL_dmatgen.c"
  jseed[0] = (int )ISEED;
  __CrestLoad(23304, (unsigned long )0, (long long )0);
  __CrestStore(23305, (unsigned long )(& jseed[1]));
# 122 "../HPL_dmatgen.c"
  jseed[1] = 0;
  __CrestLoad(23306, (unsigned long )0, (long long )((int const )1));
# 124 "../HPL_dmatgen.c"
  HPL_xjumpm((int const )1, mult, iadd, jseed, iran1, ia1, ic1);
  __CrestClearStack(23307);
  __CrestLoad(23308, (unsigned long )0, (long long )((int const )0));
# 125 "../HPL_dmatgen.c"
  HPL_setran((int const )0, iran1);
  __CrestClearStack(23309);
  __CrestLoad(23310, (unsigned long )0, (long long )((int const )1));
# 125 "../HPL_dmatgen.c"
  HPL_setran((int const )1, ia1);
  __CrestClearStack(23311);
  __CrestLoad(23312, (unsigned long )0, (long long )((int const )2));
# 125 "../HPL_dmatgen.c"
  HPL_setran((int const )2, ic1);
  __CrestClearStack(23313);
  __CrestLoad(23314, (unsigned long )0, (long long )0);
  __CrestStore(23315, (unsigned long )(& j));
# 129 "../HPL_dmatgen.c"
  j = 0;
  {
# 129 "../HPL_dmatgen.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(23318, (unsigned long )(& j), (long long )j);
    __CrestLoad(23317, (unsigned long )(& N), (long long )N);
    __CrestApply2(23316, 16, (long long )(j < (int )N));
# 129 "../HPL_dmatgen.c"
    if (j < (int )N) {
      __CrestBranch(23319, 7992, 1);

    } else {
      __CrestBranch(23320, 7993, 0);
# 129 "../HPL_dmatgen.c"
      goto while_break;
    }
    }
    __CrestLoad(23321, (unsigned long )0, (long long )0);
    __CrestStore(23322, (unsigned long )(& i));
# 130 "../HPL_dmatgen.c"
    i = 0;
    {
# 130 "../HPL_dmatgen.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(23325, (unsigned long )(& i), (long long )i);
      __CrestLoad(23324, (unsigned long )(& M), (long long )M);
      __CrestApply2(23323, 16, (long long )(i < (int )M));
# 130 "../HPL_dmatgen.c"
      if (i < (int )M) {
        __CrestBranch(23326, 7999, 1);

      } else {
        __CrestBranch(23327, 8000, 0);
# 130 "../HPL_dmatgen.c"
        goto while_break___0;
      }
      }
# 130 "../HPL_dmatgen.c"
      *A = HPL_rand();
      __CrestClearStack(23328);
# 130 "../HPL_dmatgen.c"
      A ++;
      __CrestLoad(23331, (unsigned long )(& i), (long long )i);
      __CrestLoad(23330, (unsigned long )0, (long long )1);
      __CrestApply2(23329, 0, (long long )(i + 1));
      __CrestStore(23332, (unsigned long )(& i));
# 130 "../HPL_dmatgen.c"
      i ++;
    }
    while_break___0: ;
    }
# 129 "../HPL_dmatgen.c"
    A += incA;
    __CrestLoad(23335, (unsigned long )(& j), (long long )j);
    __CrestLoad(23334, (unsigned long )0, (long long )1);
    __CrestApply2(23333, 0, (long long )(j + 1));
    __CrestStore(23336, (unsigned long )(& j));
# 129 "../HPL_dmatgen.c"
    j ++;
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(23337);
# 53 "../HPL_dmatgen.c"
  return;
  }
}
}
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 87 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_ladd(int *J , int *K , int *I ) ;
# 53 "../HPL_ladd.c"
void HPL_ladd(int *J , int *K , int *I )
{
  int itmp0 ;
  int itmp1 ;
  int *mem_6 ;
  int *mem_7 ;
  int *mem_8 ;
  int *mem_9 ;
  int *mem_10 ;
  int *mem_11 ;

  {
  __CrestCall(23338, 119);
# 97 "../HPL_ladd.c"
  mem_6 = K + 0;
# 97 "../HPL_ladd.c"
  mem_7 = J + 0;
  __CrestLoad(23341, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(23340, (unsigned long )mem_7, (long long )*mem_7);
  __CrestApply2(23339, 0, (long long )(*mem_6 + *mem_7));
  __CrestStore(23342, (unsigned long )(& itmp0));
# 97 "../HPL_ladd.c"
  itmp0 = *mem_6 + *mem_7;
  __CrestLoad(23345, (unsigned long )(& itmp0), (long long )itmp0);
  __CrestLoad(23344, (unsigned long )0, (long long )16);
  __CrestApply2(23343, 9, (long long )(itmp0 >> 16));
  __CrestStore(23346, (unsigned long )(& itmp1));
# 111 "../HPL_ladd.c"
  itmp1 = itmp0 >> 16;
# 111 "../HPL_ladd.c"
  mem_8 = I + 0;
  __CrestLoad(23351, (unsigned long )(& itmp0), (long long )itmp0);
  __CrestLoad(23350, (unsigned long )(& itmp1), (long long )itmp1);
  __CrestLoad(23349, (unsigned long )0, (long long )16);
  __CrestApply2(23348, 8, (long long )(itmp1 << 16));
  __CrestApply2(23347, 1, (long long )(itmp0 - (itmp1 << 16)));
  __CrestStore(23352, (unsigned long )mem_8);
# 111 "../HPL_ladd.c"
  *mem_8 = itmp0 - (itmp1 << 16);
# 112 "../HPL_ladd.c"
  mem_9 = K + 1;
# 112 "../HPL_ladd.c"
  mem_10 = J + 1;
  __CrestLoad(23357, (unsigned long )(& itmp1), (long long )itmp1);
  __CrestLoad(23356, (unsigned long )mem_9, (long long )*mem_9);
  __CrestApply2(23355, 0, (long long )(itmp1 + *mem_9));
  __CrestLoad(23354, (unsigned long )mem_10, (long long )*mem_10);
  __CrestApply2(23353, 0, (long long )((itmp1 + *mem_9) + *mem_10));
  __CrestStore(23358, (unsigned long )(& itmp0));
# 112 "../HPL_ladd.c"
  itmp0 = (itmp1 + *mem_9) + *mem_10;
# 112 "../HPL_ladd.c"
  mem_11 = I + 1;
  __CrestLoad(23365, (unsigned long )(& itmp0), (long long )itmp0);
  __CrestLoad(23364, (unsigned long )(& itmp0), (long long )itmp0);
  __CrestLoad(23363, (unsigned long )0, (long long )15);
  __CrestApply2(23362, 9, (long long )(itmp0 >> 15));
  __CrestLoad(23361, (unsigned long )0, (long long )15);
  __CrestApply2(23360, 8, (long long )((itmp0 >> 15) << 15));
  __CrestApply2(23359, 1, (long long )(itmp0 - ((itmp0 >> 15) << 15)));
  __CrestStore(23366, (unsigned long )mem_11);
# 112 "../HPL_ladd.c"
  *mem_11 = itmp0 - ((itmp0 >> 15) << 15);

  {
  __CrestReturn(23367);
# 53 "../HPL_ladd.c"
  return;
  }
}
}
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 81 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_lmul(int *K , int *J , int *I ) ;
# 98 "../HPL_lmul.c"
static int ipow30 = 1 << 30;
# 53 "../HPL_lmul.c"
void HPL_lmul(int *K , int *J , int *I )
{
  int kt ;
  int lt ;
  int *mem_6 ;
  int *mem_7 ;
  int *mem_8 ;
  int *mem_9 ;
  int *mem_10 ;
  int *mem_11 ;
  int *mem_12 ;
  int *mem_13 ;

  {
  __CrestCall(23368, 120);
# 114 "../HPL_lmul.c"
  mem_6 = K + 0;
# 114 "../HPL_lmul.c"
  mem_7 = J + 0;
  __CrestLoad(23371, (unsigned long )mem_6, (long long )*mem_6);
  __CrestLoad(23370, (unsigned long )mem_7, (long long )*mem_7);
  __CrestApply2(23369, 2, (long long )(*mem_6 * *mem_7));
  __CrestStore(23372, (unsigned long )(& kt));
# 114 "../HPL_lmul.c"
  kt = *mem_6 * *mem_7;
  {
  __CrestLoad(23375, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23374, (unsigned long )0, (long long )0);
  __CrestApply2(23373, 16, (long long )(kt < 0));
# 114 "../HPL_lmul.c"
  if (kt < 0) {
    __CrestBranch(23376, 8012, 1);
    __CrestLoad(23382, (unsigned long )(& kt), (long long )kt);
    __CrestLoad(23381, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23380, 0, (long long )(kt + ipow30));
    __CrestLoad(23379, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23378, 0, (long long )((kt + ipow30) + ipow30));
    __CrestStore(23383, (unsigned long )(& kt));
# 114 "../HPL_lmul.c"
    kt = (kt + ipow30) + ipow30;
  } else {
    __CrestBranch(23377, 8013, 0);

  }
  }
# 115 "../HPL_lmul.c"
  mem_8 = I + 0;
  __CrestLoad(23390, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23389, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23388, (unsigned long )0, (long long )16);
  __CrestApply2(23387, 9, (long long )(kt >> 16));
  __CrestLoad(23386, (unsigned long )0, (long long )16);
  __CrestApply2(23385, 8, (long long )((kt >> 16) << 16));
  __CrestApply2(23384, 1, (long long )(kt - ((kt >> 16) << 16)));
  __CrestStore(23391, (unsigned long )mem_8);
# 115 "../HPL_lmul.c"
  *mem_8 = kt - ((kt >> 16) << 16);
# 116 "../HPL_lmul.c"
  mem_9 = K + 0;
# 116 "../HPL_lmul.c"
  mem_10 = J + 1;
# 116 "../HPL_lmul.c"
  mem_11 = K + 1;
# 116 "../HPL_lmul.c"
  mem_12 = J + 0;
  __CrestLoad(23398, (unsigned long )mem_9, (long long )*mem_9);
  __CrestLoad(23397, (unsigned long )mem_10, (long long )*mem_10);
  __CrestApply2(23396, 2, (long long )(*mem_9 * *mem_10));
  __CrestLoad(23395, (unsigned long )mem_11, (long long )*mem_11);
  __CrestLoad(23394, (unsigned long )mem_12, (long long )*mem_12);
  __CrestApply2(23393, 2, (long long )(*mem_11 * *mem_12));
  __CrestApply2(23392, 0, (long long )(*mem_9 * *mem_10 + *mem_11 * *mem_12));
  __CrestStore(23399, (unsigned long )(& lt));
# 116 "../HPL_lmul.c"
  lt = *mem_9 * *mem_10 + *mem_11 * *mem_12;
  {
  __CrestLoad(23402, (unsigned long )(& lt), (long long )lt);
  __CrestLoad(23401, (unsigned long )0, (long long )0);
  __CrestApply2(23400, 16, (long long )(lt < 0));
# 117 "../HPL_lmul.c"
  if (lt < 0) {
    __CrestBranch(23403, 8016, 1);
    __CrestLoad(23409, (unsigned long )(& lt), (long long )lt);
    __CrestLoad(23408, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23407, 0, (long long )(lt + ipow30));
    __CrestLoad(23406, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23405, 0, (long long )((lt + ipow30) + ipow30));
    __CrestStore(23410, (unsigned long )(& lt));
# 117 "../HPL_lmul.c"
    lt = (lt + ipow30) + ipow30;
  } else {
    __CrestBranch(23404, 8017, 0);

  }
  }
  __CrestLoad(23415, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23414, (unsigned long )0, (long long )16);
  __CrestApply2(23413, 9, (long long )(kt >> 16));
  __CrestLoad(23412, (unsigned long )(& lt), (long long )lt);
  __CrestApply2(23411, 0, (long long )((kt >> 16) + lt));
  __CrestStore(23416, (unsigned long )(& kt));
# 118 "../HPL_lmul.c"
  kt = (kt >> 16) + lt;
  {
  __CrestLoad(23419, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23418, (unsigned long )0, (long long )0);
  __CrestApply2(23417, 16, (long long )(kt < 0));
# 119 "../HPL_lmul.c"
  if (kt < 0) {
    __CrestBranch(23420, 8020, 1);
    __CrestLoad(23426, (unsigned long )(& kt), (long long )kt);
    __CrestLoad(23425, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23424, 0, (long long )(kt + ipow30));
    __CrestLoad(23423, (unsigned long )(& ipow30), (long long )ipow30);
    __CrestApply2(23422, 0, (long long )((kt + ipow30) + ipow30));
    __CrestStore(23427, (unsigned long )(& kt));
# 119 "../HPL_lmul.c"
    kt = (kt + ipow30) + ipow30;
  } else {
    __CrestBranch(23421, 8021, 0);

  }
  }
# 120 "../HPL_lmul.c"
  mem_13 = I + 1;
  __CrestLoad(23434, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23433, (unsigned long )(& kt), (long long )kt);
  __CrestLoad(23432, (unsigned long )0, (long long )15);
  __CrestApply2(23431, 9, (long long )(kt >> 15));
  __CrestLoad(23430, (unsigned long )0, (long long )15);
  __CrestApply2(23429, 8, (long long )((kt >> 15) << 15));
  __CrestApply2(23428, 1, (long long )(kt - ((kt >> 15) << 15)));
  __CrestStore(23435, (unsigned long )mem_13);
# 120 "../HPL_lmul.c"
  *mem_13 = kt - ((kt >> 15) << 15);

  {
  __CrestReturn(23436);
# 53 "../HPL_lmul.c"
  return;
  }
}
}
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_xjumpm.c"
void HPL_xjumpm(int const JUMPM , int *MULT , int *IADD , int *IRANN , int *IRANM ,
                int *IAM , int *ICM )
{
  int j[2] ;
  int k ;
  int *mem_10 ;
  int *mem_11 ;
  int *mem_12 ;
  int *mem_13 ;
  int *mem_14 ;
  int *mem_15 ;
  int *mem_16 ;
  int *mem_17 ;
  int *mem_18 ;
  int *mem_19 ;
  int *mem_20 ;
  int *mem_21 ;
  int *mem_22 ;
  int *mem_23 ;

  {
  __CrestCall(23438, 121);
  __CrestStore(23437, (unsigned long )(& JUMPM));
  {
  __CrestLoad(23441, (unsigned long )(& JUMPM), (long long )JUMPM);
  __CrestLoad(23440, (unsigned long )0, (long long )0);
  __CrestApply2(23439, 14, (long long )(JUMPM > 0));
# 137 "../HPL_xjumpm.c"
  if (JUMPM > 0) {
    __CrestBranch(23442, 8026, 1);
# 139 "../HPL_xjumpm.c"
    mem_10 = IAM + 0;
# 139 "../HPL_xjumpm.c"
    mem_11 = MULT + 0;
    __CrestLoad(23444, (unsigned long )mem_11, (long long )*mem_11);
    __CrestStore(23445, (unsigned long )mem_10);
# 139 "../HPL_xjumpm.c"
    *mem_10 = *mem_11;
# 139 "../HPL_xjumpm.c"
    mem_12 = IAM + 1;
# 139 "../HPL_xjumpm.c"
    mem_13 = MULT + 1;
    __CrestLoad(23446, (unsigned long )mem_13, (long long )*mem_13);
    __CrestStore(23447, (unsigned long )mem_12);
# 139 "../HPL_xjumpm.c"
    *mem_12 = *mem_13;
# 140 "../HPL_xjumpm.c"
    mem_14 = ICM + 0;
# 140 "../HPL_xjumpm.c"
    mem_15 = IADD + 0;
    __CrestLoad(23448, (unsigned long )mem_15, (long long )*mem_15);
    __CrestStore(23449, (unsigned long )mem_14);
# 140 "../HPL_xjumpm.c"
    *mem_14 = *mem_15;
# 140 "../HPL_xjumpm.c"
    mem_16 = ICM + 1;
# 140 "../HPL_xjumpm.c"
    mem_17 = IADD + 1;
    __CrestLoad(23450, (unsigned long )mem_17, (long long )*mem_17);
    __CrestStore(23451, (unsigned long )mem_16);
# 140 "../HPL_xjumpm.c"
    *mem_16 = *mem_17;
    __CrestLoad(23452, (unsigned long )0, (long long )1);
    __CrestStore(23453, (unsigned long )(& k));
# 141 "../HPL_xjumpm.c"
    k = 1;
    {
# 141 "../HPL_xjumpm.c"
    while (1) {
      while_continue: ;
      {
      __CrestLoad(23458, (unsigned long )(& k), (long long )k);
      __CrestLoad(23457, (unsigned long )(& JUMPM), (long long )JUMPM);
      __CrestLoad(23456, (unsigned long )0, (long long )1);
      __CrestApply2(23455, 1, (long long )(JUMPM - 1));
      __CrestApply2(23454, 15, (long long )(k <= (int )(JUMPM - 1)));
# 141 "../HPL_xjumpm.c"
      if (k <= (int )(JUMPM - 1)) {
        __CrestBranch(23459, 8031, 1);

      } else {
        __CrestBranch(23460, 8032, 0);
# 141 "../HPL_xjumpm.c"
        goto while_break;
      }
      }
# 143 "../HPL_xjumpm.c"
      HPL_lmul(IAM, MULT, j);
      __CrestClearStack(23461);
# 144 "../HPL_xjumpm.c"
      mem_18 = IAM + 0;
      __CrestLoad(23462, (unsigned long )(& j[0]), (long long )j[0]);
      __CrestStore(23463, (unsigned long )mem_18);
# 144 "../HPL_xjumpm.c"
      *mem_18 = j[0];
# 144 "../HPL_xjumpm.c"
      mem_19 = IAM + 1;
      __CrestLoad(23464, (unsigned long )(& j[1]), (long long )j[1]);
      __CrestStore(23465, (unsigned long )mem_19);
# 144 "../HPL_xjumpm.c"
      *mem_19 = j[1];
# 145 "../HPL_xjumpm.c"
      HPL_lmul(ICM, MULT, j);
      __CrestClearStack(23466);
# 146 "../HPL_xjumpm.c"
      HPL_ladd(IADD, j, ICM);
      __CrestClearStack(23467);
      __CrestLoad(23470, (unsigned long )(& k), (long long )k);
      __CrestLoad(23469, (unsigned long )0, (long long )1);
      __CrestApply2(23468, 0, (long long )(k + 1));
      __CrestStore(23471, (unsigned long )(& k));
# 141 "../HPL_xjumpm.c"
      k ++;
    }
    while_break: ;
    }
# 148 "../HPL_xjumpm.c"
    HPL_lmul(IRANN, IAM, j);
    __CrestClearStack(23472);
# 149 "../HPL_xjumpm.c"
    HPL_ladd(j, ICM, IRANM);
    __CrestClearStack(23473);
  } else {
    __CrestBranch(23443, 8036, 0);
# 153 "../HPL_xjumpm.c"
    mem_20 = IRANM + 0;
# 153 "../HPL_xjumpm.c"
    mem_21 = IRANN + 0;
    __CrestLoad(23474, (unsigned long )mem_21, (long long )*mem_21);
    __CrestStore(23475, (unsigned long )mem_20);
# 153 "../HPL_xjumpm.c"
    *mem_20 = *mem_21;
# 153 "../HPL_xjumpm.c"
    mem_22 = IRANM + 1;
# 153 "../HPL_xjumpm.c"
    mem_23 = IRANN + 1;
    __CrestLoad(23476, (unsigned long )mem_23, (long long )*mem_23);
    __CrestStore(23477, (unsigned long )mem_22);
# 153 "../HPL_xjumpm.c"
    *mem_22 = *mem_23;
  }
  }

  {
  __CrestReturn(23478);
# 53 "../HPL_xjumpm.c"
  return;
  }
}
}
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 108 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_jumpit(int *MULT , int *IADD , int *IRANN , int *IRANM ) ;
# 53 "../HPL_jumpit.c"
void HPL_jumpit(int *MULT , int *IADD , int *IRANN , int *IRANM )
{
  int j[2] ;

  {
  __CrestCall(23479, 122);
# 108 "../HPL_jumpit.c"
  HPL_lmul(IRANN, MULT, j);
  __CrestClearStack(23480);
# 109 "../HPL_jumpit.c"
  HPL_ladd(j, IADD, IRANM);
  __CrestClearStack(23481);
  __CrestLoad(23482, (unsigned long )0, (long long )((int const )0));
# 110 "../HPL_jumpit.c"
  HPL_setran((int const )0, IRANM);
  __CrestClearStack(23483);

  {
  __CrestReturn(23484);
# 53 "../HPL_jumpit.c"
  return;
  }
}
}
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_rand.c"
double HPL_rand(void)
{
  int j[2] ;
  double __retres2 ;

  {
  __CrestCall(23485, 123);

  __CrestLoad(23486, (unsigned long )0, (long long )((int const )3));
# 84 "../HPL_rand.c"
  HPL_setran((int const )3, j);
  __CrestClearStack(23487);
# 88 "../HPL_rand.c"
  __retres2 = 0.5 - ((double )j[0] + 65536.0 * (double )j[1]) / 2147483648.0;
  {
  __CrestReturn(23488);
# 53 "../HPL_rand.c"
  return (__retres2);
  }
}
}
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 56 "../HPL_setran.c"
static int ias[2] ;
# 56 "../HPL_setran.c"
static int ics[2] ;
# 56 "../HPL_setran.c"
static int irand[2] ;
# 59 "../HPL_setran.c"
void HPL_setran(int const OPTION , int *IRAN )
{
  int j[2] ;
  int *mem_4 ;
  int *mem_5 ;
  int *mem_6 ;
  int *mem_7 ;
  int *mem_8 ;
  int *mem_9 ;
  int *mem_10 ;
  int *mem_11 ;

  {
  __CrestCall(23490, 124);
  __CrestStore(23489, (unsigned long )(& OPTION));
  {
  __CrestLoad(23493, (unsigned long )(& OPTION), (long long )OPTION);
  __CrestLoad(23492, (unsigned long )0, (long long )3);
  __CrestApply2(23491, 12, (long long )(OPTION == 3));
# 103 "../HPL_setran.c"
  if (OPTION == 3) {
    __CrestBranch(23494, 8046, 1);
# 105 "../HPL_setran.c"
    mem_4 = IRAN + 0;
    __CrestLoad(23496, (unsigned long )(& irand[0]), (long long )irand[0]);
    __CrestStore(23497, (unsigned long )mem_4);
# 105 "../HPL_setran.c"
    *mem_4 = irand[0];
# 105 "../HPL_setran.c"
    mem_5 = IRAN + 1;
    __CrestLoad(23498, (unsigned long )(& irand[1]), (long long )irand[1]);
    __CrestStore(23499, (unsigned long )mem_5);
# 105 "../HPL_setran.c"
    *mem_5 = irand[1];
# 106 "../HPL_setran.c"
    HPL_lmul(irand, ias, j);
    __CrestClearStack(23500);
# 107 "../HPL_setran.c"
    HPL_ladd(j, ics, irand);
    __CrestClearStack(23501);
  } else {
    __CrestBranch(23495, 8047, 0);
    {
    __CrestLoad(23504, (unsigned long )(& OPTION), (long long )OPTION);
    __CrestLoad(23503, (unsigned long )0, (long long )0);
    __CrestApply2(23502, 12, (long long )(OPTION == 0));
# 109 "../HPL_setran.c"
    if (OPTION == 0) {
      __CrestBranch(23505, 8048, 1);
# 109 "../HPL_setran.c"
      mem_6 = IRAN + 0;
      __CrestLoad(23507, (unsigned long )mem_6, (long long )*mem_6);
      __CrestStore(23508, (unsigned long )(& irand[0]));
# 109 "../HPL_setran.c"
      irand[0] = *mem_6;
# 109 "../HPL_setran.c"
      mem_7 = IRAN + 1;
      __CrestLoad(23509, (unsigned long )mem_7, (long long )*mem_7);
      __CrestStore(23510, (unsigned long )(& irand[1]));
# 109 "../HPL_setran.c"
      irand[1] = *mem_7;
    } else {
      __CrestBranch(23506, 8049, 0);
      {
      __CrestLoad(23513, (unsigned long )(& OPTION), (long long )OPTION);
      __CrestLoad(23512, (unsigned long )0, (long long )1);
      __CrestApply2(23511, 12, (long long )(OPTION == 1));
# 110 "../HPL_setran.c"
      if (OPTION == 1) {
        __CrestBranch(23514, 8050, 1);
# 110 "../HPL_setran.c"
        mem_8 = IRAN + 0;
        __CrestLoad(23516, (unsigned long )mem_8, (long long )*mem_8);
        __CrestStore(23517, (unsigned long )(& ias[0]));
# 110 "../HPL_setran.c"
        ias[0] = *mem_8;
# 110 "../HPL_setran.c"
        mem_9 = IRAN + 1;
        __CrestLoad(23518, (unsigned long )mem_9, (long long )*mem_9);
        __CrestStore(23519, (unsigned long )(& ias[1]));
# 110 "../HPL_setran.c"
        ias[1] = *mem_9;
      } else {
        __CrestBranch(23515, 8051, 0);
        {
        __CrestLoad(23522, (unsigned long )(& OPTION), (long long )OPTION);
        __CrestLoad(23521, (unsigned long )0, (long long )2);
        __CrestApply2(23520, 12, (long long )(OPTION == 2));
# 111 "../HPL_setran.c"
        if (OPTION == 2) {
          __CrestBranch(23523, 8052, 1);
# 111 "../HPL_setran.c"
          mem_10 = IRAN + 0;
          __CrestLoad(23525, (unsigned long )mem_10, (long long )*mem_10);
          __CrestStore(23526, (unsigned long )(& ics[0]));
# 111 "../HPL_setran.c"
          ics[0] = *mem_10;
# 111 "../HPL_setran.c"
          mem_11 = IRAN + 1;
          __CrestLoad(23527, (unsigned long )mem_11, (long long )*mem_11);
          __CrestStore(23528, (unsigned long )(& ics[1]));
# 111 "../HPL_setran.c"
          ics[1] = *mem_11;
        } else {
          __CrestBranch(23524, 8053, 0);

        }
        }
      }
      }
    }
    }
  }
  }

  {
  __CrestReturn(23529);
# 59 "../HPL_setran.c"
  return;
  }
}
}
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 74 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
double HPL_timer_cputime(void) ;
# 75 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
double HPL_timer_walltime(void) ;
# 77 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
void HPL_timer(int const I ) ;
# 78 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
void HPL_timer_boot(void) ;
# 79 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
void HPL_timer_enable(void) ;
# 80 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
void HPL_timer_disable(void) ;
# 81 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
double HPL_timer_inquire(HPL_T_TIME const TMTYPE , int const I ) ;
# 56 "../HPL_timer.c"
static int HPL_timer_disabled ;
# 57 "../HPL_timer.c"
static double HPL_timer_cpusec[64] ;
# 57 "../HPL_timer.c"
static double HPL_timer_cpustart[64] ;
# 57 "../HPL_timer.c"
static double HPL_timer_wallsec[64] ;
# 57 "../HPL_timer.c"
static double HPL_timer_wallstart[64] ;
# 67 "../HPL_timer.c"
void HPL_timer_boot(void)
{
  int i ;
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(23530, 125);

  __CrestLoad(23531, (unsigned long )0, (long long )0);
  __CrestStore(23532, (unsigned long )(& HPL_timer_disabled));
# 82 "../HPL_timer.c"
  HPL_timer_disabled = 0;
  __CrestLoad(23533, (unsigned long )0, (long long )0);
  __CrestStore(23534, (unsigned long )(& i));
# 84 "../HPL_timer.c"
  i = 0;
  {
# 84 "../HPL_timer.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(23537, (unsigned long )(& i), (long long )i);
    __CrestLoad(23536, (unsigned long )0, (long long )64);
    __CrestApply2(23535, 16, (long long )(i < 64));
# 84 "../HPL_timer.c"
    if (i < 64) {
      __CrestBranch(23538, 8061, 1);

    } else {
      __CrestBranch(23539, 8062, 0);
# 84 "../HPL_timer.c"
      goto while_break;
    }
    }
# 86 "../HPL_timer.c"
    tmp = 0.0;
# 86 "../HPL_timer.c"
    HPL_timer_wallsec[i] = tmp;
# 86 "../HPL_timer.c"
    HPL_timer_cpusec[i] = tmp;
# 87 "../HPL_timer.c"
    tmp___0 = 5.0;
# 87 "../HPL_timer.c"
    HPL_timer_wallstart[i] = tmp___0;
# 87 "../HPL_timer.c"
    HPL_timer_cpustart[i] = tmp___0;
    __CrestLoad(23542, (unsigned long )(& i), (long long )i);
    __CrestLoad(23541, (unsigned long )0, (long long )1);
    __CrestApply2(23540, 0, (long long )(i + 1));
    __CrestStore(23543, (unsigned long )(& i));
# 84 "../HPL_timer.c"
    i ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(23544);
# 67 "../HPL_timer.c"
  return;
  }
}
}
# 95 "../HPL_timer.c"
void HPL_timer(int const I )
{
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(23546, 126);
  __CrestStore(23545, (unsigned long )(& I));
  {
  __CrestLoad(23549, (unsigned long )(& HPL_timer_disabled), (long long )HPL_timer_disabled);
  __CrestLoad(23548, (unsigned long )0, (long long )0);
  __CrestApply2(23547, 13, (long long )(HPL_timer_disabled != 0));
# 132 "../HPL_timer.c"
  if (HPL_timer_disabled != 0) {
    __CrestBranch(23550, 8068, 1);
# 132 "../HPL_timer.c"
    goto return_label;
  } else {
    __CrestBranch(23551, 8070, 0);

  }
  }
  {
  __CrestLoad(23554, (unsigned long )(& HPL_timer_wallstart[I]), (long long )HPL_timer_wallstart[I]);
  __CrestLoad(23553, (unsigned long )0, (long long )5.0);
  __CrestApply2(23552, 12, (long long )(HPL_timer_wallstart[I] == 5.0));
# 137 "../HPL_timer.c"
  if (HPL_timer_wallstart[I] == 5.0) {
    __CrestBranch(23555, 8072, 1);
# 139 "../HPL_timer.c"
    HPL_timer_wallstart[I] = HPL_timer_walltime();
    __CrestClearStack(23557);
# 140 "../HPL_timer.c"
    HPL_timer_cpustart[I] = HPL_timer_cputime();
    __CrestClearStack(23558);
  } else {
    __CrestBranch(23556, 8073, 0);
# 144 "../HPL_timer.c"
    tmp = HPL_timer_cputime();
    __CrestClearStack(23559);
# 144 "../HPL_timer.c"
    HPL_timer_cpusec[I] += tmp - HPL_timer_cpustart[I];
# 145 "../HPL_timer.c"
    tmp___0 = HPL_timer_walltime();
    __CrestClearStack(23560);
# 145 "../HPL_timer.c"
    HPL_timer_wallsec[I] += tmp___0 - HPL_timer_wallstart[I];
# 146 "../HPL_timer.c"
    HPL_timer_wallstart[I] = 5.0;
  }
  }

  return_label:
  {
  __CrestReturn(23561);
# 95 "../HPL_timer.c"
  return;
  }
}
}
# 154 "../HPL_timer.c"
void HPL_timer_enable(void)
{


  {
  __CrestCall(23562, 127);

  __CrestLoad(23563, (unsigned long )0, (long long )0);
  __CrestStore(23564, (unsigned long )(& HPL_timer_disabled));
# 165 "../HPL_timer.c"
  HPL_timer_disabled = 0;

  {
  __CrestReturn(23565);
# 154 "../HPL_timer.c"
  return;
  }
}
}
# 173 "../HPL_timer.c"
void HPL_timer_disable(void)
{


  {
  __CrestCall(23566, 128);

  __CrestLoad(23567, (unsigned long )0, (long long )1);
  __CrestStore(23568, (unsigned long )(& HPL_timer_disabled));
# 184 "../HPL_timer.c"
  HPL_timer_disabled = 1;

  {
  __CrestReturn(23569);
# 173 "../HPL_timer.c"
  return;
  }
}
}
# 192 "../HPL_timer.c"
double HPL_timer_inquire(HPL_T_TIME const TMTYPE , int const I )
{
  double time ;
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(23572, 129);
  __CrestStore(23571, (unsigned long )(& I));
  __CrestStore(23570, (unsigned long )(& TMTYPE));
  {
  __CrestLoad(23575, (unsigned long )(& TMTYPE), (long long )TMTYPE);
  __CrestLoad(23574, (unsigned long )0, (long long )101U);
  __CrestApply2(23573, 12, (long long )((unsigned int const )TMTYPE == 101U));
# 235 "../HPL_timer.c"
  if ((unsigned int const )TMTYPE == 101U) {
    __CrestBranch(23576, 8083, 1);
# 237 "../HPL_timer.c"
    tmp = HPL_timer_walltime();
    __CrestClearStack(23578);
    {
    __CrestLoad(23581, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(23580, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(23579, 12, (long long )(tmp == - 1.0));
# 237 "../HPL_timer.c"
    if (tmp == - 1.0) {
      __CrestBranch(23582, 8085, 1);
# 238 "../HPL_timer.c"
      time = - 1.0;
    } else {
      __CrestBranch(23583, 8086, 0);
# 240 "../HPL_timer.c"
      time = HPL_timer_wallsec[I];
    }
    }
  } else {
    __CrestBranch(23577, 8087, 0);
# 244 "../HPL_timer.c"
    tmp___0 = HPL_timer_cputime();
    __CrestClearStack(23584);
    {
    __CrestLoad(23587, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(23586, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(23585, 12, (long long )(tmp___0 == - 1.0));
# 244 "../HPL_timer.c"
    if (tmp___0 == - 1.0) {
      __CrestBranch(23588, 8089, 1);
# 245 "../HPL_timer.c"
      time = - 1.0;
    } else {
      __CrestBranch(23589, 8090, 0);
# 247 "../HPL_timer.c"
      time = HPL_timer_cpusec[I];
    }
    }
  }
  }
  {
  __CrestReturn(23590);
# 249 "../HPL_timer.c"
  return (time);
  }
}
}
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 87 "/usr/include/x86_64-linux-gnu/sys/resource.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) getrusage)(__rusage_who_t __who ,
                                                                                struct rusage *__usage ) ;
# 118 "../HPL_timer_cputime.c"
double HPL_timer_cputime(void)
{
  struct rusage ruse ;
  double __retres2 ;

  {
  __CrestCall(23591, 130);

  __CrestLoad(23592, (unsigned long )0, (long long )0);
# 124 "../HPL_timer_cputime.c"
  getrusage(0, & ruse);
  __CrestClearStack(23593);
# 125 "../HPL_timer_cputime.c"
  __retres2 = (double )ruse.ru_utime.tv_sec + (double )ruse.ru_utime.tv_usec / 1000000.0;
  {
  __CrestReturn(23594);
# 118 "../HPL_timer_cputime.c"
  return (__retres2);
  }
}
}
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 71 "/usr/include/x86_64-linux-gnu/sys/time.h"
extern __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) gettimeofday)(struct timeval * __restrict __tv ,
                                                                                                   __timezone_ptr_t __tz ) ;
# 72 "../HPL_timer_walltime.c"
static long start = 0L;
# 72 "../HPL_timer_walltime.c"
static long startu ;
# 66 "../HPL_timer_walltime.c"
double HPL_timer_walltime(void)
{
  struct timeval tp ;
  double __retres2 ;

  {
  __CrestCall(23595, 131);

  {
  __CrestLoad(23598, (unsigned long )(& start), (long long )start);
  __CrestLoad(23597, (unsigned long )0, (long long )0);
  __CrestApply2(23596, 12, (long long )(start == 0));
# 74 "../HPL_timer_walltime.c"
  if (start == 0) {
    __CrestBranch(23599, 8096, 1);
# 76 "../HPL_timer_walltime.c"
    gettimeofday((struct timeval * __restrict )(& tp), (__timezone_ptr_t )((void *)0));
    __CrestClearStack(23601);
    __CrestLoad(23602, (unsigned long )(& tp.tv_sec), (long long )tp.tv_sec);
    __CrestStore(23603, (unsigned long )(& start));
# 77 "../HPL_timer_walltime.c"
    start = tp.tv_sec;
    __CrestLoad(23604, (unsigned long )(& tp.tv_usec), (long long )tp.tv_usec);
    __CrestStore(23605, (unsigned long )(& startu));
# 78 "../HPL_timer_walltime.c"
    startu = tp.tv_usec;
# 79 "../HPL_timer_walltime.c"
    __retres2 = 0.0;
# 79 "../HPL_timer_walltime.c"
    goto return_label;
  } else {
    __CrestBranch(23600, 8099, 0);

  }
  }
# 81 "../HPL_timer_walltime.c"
  gettimeofday((struct timeval * __restrict )(& tp), (__timezone_ptr_t )((void *)0));
  __CrestClearStack(23606);
# 83 "../HPL_timer_walltime.c"
  __retres2 = (double )(tp.tv_sec - start) + (double )(tp.tv_usec - startu) / 1000000.0;
  return_label:
  {
  __CrestReturn(23607);
# 66 "../HPL_timer_walltime.c"
  return (__retres2);
  }
}
}
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 53 "../HPL_pdmatgen.c"
void HPL_pdmatgen(HPL_T_grid const *GRID , int const M , int const N , int const NB ,
                  double *A , int const LDA , int const ISEED )
{
  int iadd[2] ;
  int ia1[2] ;
  int ia2[2] ;
  int ia3[2] ;
  int ia4[2] ;
  int ia5[2] ;
  int ib1[2] ;
  int ib2[2] ;
  int ib3[2] ;
  int ic1[2] ;
  int ic2[2] ;
  int ic3[2] ;
  int ic4[2] ;
  int ic5[2] ;
  int iran1[2] ;
  int iran2[2] ;
  int iran3[2] ;
  int iran4[2] ;
  int itmp1[2] ;
  int itmp2[2] ;
  int itmp3[2] ;
  int jseed[2] ;
  int mult[2] ;
  int ib ;
  int iblk ;
  int ik ;
  int jb ;
  int jblk ;
  int jk ;
  int jump1 ;
  int jump2 ;
  int jump3 ;
  int jump4 ;
  int jump5 ;
  int jump6 ;
  int jump7 ;
  int lmb ;
  int lnb ;
  int mblks ;
  int mp ;
  int mycol ;
  int myrow ;
  int nblks ;
  int npcol ;
  int nprow ;
  int nq ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;

  {
  __CrestCall(23613, 132);
  __CrestStore(23612, (unsigned long )(& ISEED));
  __CrestStore(23611, (unsigned long )(& LDA));
  __CrestStore(23610, (unsigned long )(& NB));
  __CrestStore(23609, (unsigned long )(& N));
  __CrestStore(23608, (unsigned long )(& M));
# 135 "../HPL_pdmatgen.c"
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
  __CrestClearStack(23614);
  __CrestLoad(23615, (unsigned long )0, (long long )20077);
  __CrestStore(23616, (unsigned long )(& mult[0]));
# 137 "../HPL_pdmatgen.c"
  mult[0] = 20077;
  __CrestLoad(23617, (unsigned long )0, (long long )16838);
  __CrestStore(23618, (unsigned long )(& mult[1]));
# 137 "../HPL_pdmatgen.c"
  mult[1] = 16838;
  __CrestLoad(23619, (unsigned long )0, (long long )12345);
  __CrestStore(23620, (unsigned long )(& iadd[0]));
# 138 "../HPL_pdmatgen.c"
  iadd[0] = 12345;
  __CrestLoad(23621, (unsigned long )0, (long long )0);
  __CrestStore(23622, (unsigned long )(& iadd[1]));
# 138 "../HPL_pdmatgen.c"
  iadd[1] = 0;
  __CrestLoad(23623, (unsigned long )(& ISEED), (long long )ISEED);
  __CrestStore(23624, (unsigned long )(& jseed[0]));
# 139 "../HPL_pdmatgen.c"
  jseed[0] = (int )ISEED;
  __CrestLoad(23625, (unsigned long )0, (long long )0);
  __CrestStore(23626, (unsigned long )(& jseed[1]));
# 139 "../HPL_pdmatgen.c"
  jseed[1] = 0;
  {
  __CrestLoad(23629, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(23628, (unsigned long )0, (long long )1);
  __CrestApply2(23627, 14, (long long )(nprow > 1));
# 143 "../HPL_pdmatgen.c"
  if (nprow > 1) {
    __CrestBranch(23630, 8105, 1);
    __CrestLoad(23632, (unsigned long )(& NB), (long long )NB);
    __CrestStore(23633, (unsigned long )(& inb__));
# 143 "../HPL_pdmatgen.c"
    inb__ = (int )NB;
    {
    __CrestLoad(23636, (unsigned long )(& inb__), (long long )inb__);
    __CrestLoad(23635, (unsigned long )0, (long long )0);
    __CrestApply2(23634, 15, (long long )(inb__ <= 0));
# 143 "../HPL_pdmatgen.c"
    if (inb__ <= 0) {
      __CrestBranch(23637, 8107, 1);
      __CrestLoad(23644, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply1(23643, 19, (long long )(- inb__));
      __CrestLoad(23642, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(23641, 3, (long long )(- inb__ / (int )NB));
      __CrestLoad(23640, (unsigned long )0, (long long )1);
      __CrestApply2(23639, 0, (long long )(- inb__ / (int )NB + 1));
      __CrestStore(23645, (unsigned long )(& nblk__));
# 143 "../HPL_pdmatgen.c"
      nblk__ = - inb__ / (int )NB + 1;
      __CrestLoad(23646, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestStore(23647, (unsigned long )(& src__));
# 143 "../HPL_pdmatgen.c"
      src__ = nblk__;
      __CrestLoad(23654, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(23653, (unsigned long )(& src__), (long long )src__);
      __CrestLoad(23652, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(23651, 3, (long long )(src__ / nprow));
      __CrestLoad(23650, (unsigned long )(& nprow), (long long )nprow);
      __CrestApply2(23649, 2, (long long )((src__ / nprow) * nprow));
      __CrestApply2(23648, 1, (long long )(src__ - (src__ / nprow) * nprow));
      __CrestStore(23655, (unsigned long )(& src__));
# 143 "../HPL_pdmatgen.c"
      src__ -= (src__ / nprow) * nprow;
      __CrestLoad(23660, (unsigned long )(& inb__), (long long )inb__);
      __CrestLoad(23659, (unsigned long )(& nblk__), (long long )nblk__);
      __CrestLoad(23658, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(23657, 2, (long long )(nblk__ * (int )NB));
      __CrestApply2(23656, 0, (long long )(inb__ + nblk__ * (int )NB));
      __CrestStore(23661, (unsigned long )(& inb__));
# 143 "../HPL_pdmatgen.c"
      inb__ += nblk__ * (int )NB;
      __CrestLoad(23664, (unsigned long )(& M), (long long )M);
      __CrestLoad(23663, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(23662, 1, (long long )(M - (int const )inb__));
      __CrestStore(23665, (unsigned long )(& n__));
# 143 "../HPL_pdmatgen.c"
      n__ = (int )(M - (int const )inb__);
      {
      __CrestLoad(23668, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(23667, (unsigned long )0, (long long )0);
      __CrestApply2(23666, 15, (long long )(n__ <= 0));
# 143 "../HPL_pdmatgen.c"
      if (n__ <= 0) {
        __CrestBranch(23669, 8109, 1);
        {
        __CrestLoad(23673, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(23672, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(23671, 12, (long long )(myrow == src__));
# 143 "../HPL_pdmatgen.c"
        if (myrow == src__) {
          __CrestBranch(23674, 8110, 1);
          __CrestLoad(23676, (unsigned long )(& M), (long long )M);
          __CrestStore(23677, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
          mp = (int )M;
        } else {
          __CrestBranch(23675, 8111, 0);
          __CrestLoad(23678, (unsigned long )0, (long long )0);
          __CrestStore(23679, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
          mp = 0;
        }
        }
      } else {
        __CrestBranch(23670, 8112, 0);
        __CrestLoad(23682, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(23681, (unsigned long )(& src__), (long long )src__);
        __CrestApply2(23680, 1, (long long )(myrow - src__));
        __CrestStore(23683, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
        mydist__ = myrow - src__;
        {
        __CrestLoad(23686, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23685, (unsigned long )0, (long long )0);
        __CrestApply2(23684, 16, (long long )(mydist__ < 0));
# 143 "../HPL_pdmatgen.c"
        if (mydist__ < 0) {
          __CrestBranch(23687, 8114, 1);
          __CrestLoad(23691, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(23690, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(23689, 0, (long long )(mydist__ + nprow));
          __CrestStore(23692, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(23688, 8115, 0);

        }
        }
        __CrestLoad(23697, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(23696, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(23695, 3, (long long )(n__ / (int )NB));
        __CrestLoad(23694, (unsigned long )0, (long long )1);
        __CrestApply2(23693, 0, (long long )(n__ / (int )NB + 1));
        __CrestStore(23698, (unsigned long )(& nblk__));
# 143 "../HPL_pdmatgen.c"
        nblk__ = n__ / (int )NB + 1;
        __CrestLoad(23701, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(23700, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(23699, 3, (long long )(nblk__ / nprow));
        __CrestStore(23702, (unsigned long )(& quot__));
# 143 "../HPL_pdmatgen.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(23709, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23708, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(23707, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(23706, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(23705, 2, (long long )(quot__ * nprow));
        __CrestApply2(23704, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(23703, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(23710, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(23713, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23712, (unsigned long )0, (long long )0);
        __CrestApply2(23711, 16, (long long )(mydist__ < 0));
# 143 "../HPL_pdmatgen.c"
        if (mydist__ < 0) {
          __CrestBranch(23714, 8118, 1);
          {
          __CrestLoad(23718, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(23717, (unsigned long )(& src__), (long long )src__);
          __CrestApply2(23716, 13, (long long )(myrow != src__));
# 143 "../HPL_pdmatgen.c"
          if (myrow != src__) {
            __CrestBranch(23719, 8119, 1);
            __CrestLoad(23725, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23724, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23723, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23722, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(23721, 0, (long long )(NB + NB * (int const )quot__));
            __CrestStore(23726, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = (int )(NB + NB * (int const )quot__);
          } else {
            __CrestBranch(23720, 8120, 0);
            __CrestLoad(23731, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(23730, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23729, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23728, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(23727, 0, (long long )(inb__ + (int )(NB * (int const )quot__)));
            __CrestStore(23732, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = inb__ + (int )(NB * (int const )quot__);
          }
          }
        } else {
          __CrestBranch(23715, 8121, 0);
          {
          __CrestLoad(23735, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(23734, (unsigned long )0, (long long )0);
          __CrestApply2(23733, 14, (long long )(mydist__ > 0));
# 143 "../HPL_pdmatgen.c"
          if (mydist__ > 0) {
            __CrestBranch(23736, 8122, 1);
            __CrestLoad(23740, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23739, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23738, 2, (long long )(NB * (int const )quot__));
            __CrestStore(23741, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = (int )(NB * (int const )quot__);
          } else {
            __CrestBranch(23737, 8123, 0);
            {
            __CrestLoad(23744, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(23743, (unsigned long )(& src__), (long long )src__);
            __CrestApply2(23742, 13, (long long )(myrow != src__));
# 143 "../HPL_pdmatgen.c"
            if (myrow != src__) {
              __CrestBranch(23745, 8124, 1);
              __CrestLoad(23755, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(23754, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(23753, 0, (long long )(n__ + (int )NB));
              __CrestLoad(23752, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(23751, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(23750, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(23749, 1, (long long )(quot__ - nblk__));
              __CrestApply2(23748, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(23747, 0, (long long )((n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__))));
              __CrestStore(23756, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
              mp = (n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__));
            } else {
              __CrestBranch(23746, 8125, 0);
              __CrestLoad(23763, (unsigned long )(& M), (long long )M);
              __CrestLoad(23762, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(23761, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(23760, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(23759, 1, (long long )(quot__ - nblk__));
              __CrestApply2(23758, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(23757, 0, (long long )(M + NB * (int const )(quot__ - nblk__)));
              __CrestStore(23764, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
              mp = (int )(M + NB * (int const )(quot__ - nblk__));
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(23638, 8126, 0);
      __CrestLoad(23767, (unsigned long )(& M), (long long )M);
      __CrestLoad(23766, (unsigned long )(& inb__), (long long )inb__);
      __CrestApply2(23765, 1, (long long )(M - (int const )inb__));
      __CrestStore(23768, (unsigned long )(& n__));
# 143 "../HPL_pdmatgen.c"
      n__ = (int )(M - (int const )inb__);
      {
      __CrestLoad(23771, (unsigned long )(& n__), (long long )n__);
      __CrestLoad(23770, (unsigned long )0, (long long )0);
      __CrestApply2(23769, 15, (long long )(n__ <= 0));
# 143 "../HPL_pdmatgen.c"
      if (n__ <= 0) {
        __CrestBranch(23772, 8128, 1);
        {
        __CrestLoad(23776, (unsigned long )(& myrow), (long long )myrow);
        __CrestLoad(23775, (unsigned long )0, (long long )0);
        __CrestApply2(23774, 12, (long long )(myrow == 0));
# 143 "../HPL_pdmatgen.c"
        if (myrow == 0) {
          __CrestBranch(23777, 8129, 1);
          __CrestLoad(23779, (unsigned long )(& M), (long long )M);
          __CrestStore(23780, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
          mp = (int )M;
        } else {
          __CrestBranch(23778, 8130, 0);
          __CrestLoad(23781, (unsigned long )0, (long long )0);
          __CrestStore(23782, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
          mp = 0;
        }
        }
      } else {
        __CrestBranch(23773, 8131, 0);
        __CrestLoad(23783, (unsigned long )(& myrow), (long long )myrow);
        __CrestStore(23784, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
        mydist__ = myrow;
        {
        __CrestLoad(23787, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23786, (unsigned long )0, (long long )0);
        __CrestApply2(23785, 16, (long long )(mydist__ < 0));
# 143 "../HPL_pdmatgen.c"
        if (mydist__ < 0) {
          __CrestBranch(23788, 8133, 1);
          __CrestLoad(23792, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(23791, (unsigned long )(& nprow), (long long )nprow);
          __CrestApply2(23790, 0, (long long )(mydist__ + nprow));
          __CrestStore(23793, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
          mydist__ += nprow;
        } else {
          __CrestBranch(23789, 8134, 0);

        }
        }
        __CrestLoad(23798, (unsigned long )(& n__), (long long )n__);
        __CrestLoad(23797, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(23796, 3, (long long )(n__ / (int )NB));
        __CrestLoad(23795, (unsigned long )0, (long long )1);
        __CrestApply2(23794, 0, (long long )(n__ / (int )NB + 1));
        __CrestStore(23799, (unsigned long )(& nblk__));
# 143 "../HPL_pdmatgen.c"
        nblk__ = n__ / (int )NB + 1;
        __CrestLoad(23802, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(23801, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(23800, 3, (long long )(nblk__ / nprow));
        __CrestStore(23803, (unsigned long )(& quot__));
# 143 "../HPL_pdmatgen.c"
        quot__ = nblk__ / nprow;
        __CrestLoad(23810, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23809, (unsigned long )(& nblk__), (long long )nblk__);
        __CrestLoad(23808, (unsigned long )(& quot__), (long long )quot__);
        __CrestLoad(23807, (unsigned long )(& nprow), (long long )nprow);
        __CrestApply2(23806, 2, (long long )(quot__ * nprow));
        __CrestApply2(23805, 1, (long long )(nblk__ - quot__ * nprow));
        __CrestApply2(23804, 1, (long long )(mydist__ - (nblk__ - quot__ * nprow)));
        __CrestStore(23811, (unsigned long )(& mydist__));
# 143 "../HPL_pdmatgen.c"
        mydist__ -= nblk__ - quot__ * nprow;
        {
        __CrestLoad(23814, (unsigned long )(& mydist__), (long long )mydist__);
        __CrestLoad(23813, (unsigned long )0, (long long )0);
        __CrestApply2(23812, 16, (long long )(mydist__ < 0));
# 143 "../HPL_pdmatgen.c"
        if (mydist__ < 0) {
          __CrestBranch(23815, 8137, 1);
          {
          __CrestLoad(23819, (unsigned long )(& myrow), (long long )myrow);
          __CrestLoad(23818, (unsigned long )0, (long long )0);
          __CrestApply2(23817, 13, (long long )(myrow != 0));
# 143 "../HPL_pdmatgen.c"
          if (myrow != 0) {
            __CrestBranch(23820, 8138, 1);
            __CrestLoad(23826, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23825, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23824, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23823, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(23822, 0, (long long )(NB + NB * (int const )quot__));
            __CrestStore(23827, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = (int )(NB + NB * (int const )quot__);
          } else {
            __CrestBranch(23821, 8139, 0);
            __CrestLoad(23832, (unsigned long )(& inb__), (long long )inb__);
            __CrestLoad(23831, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23830, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23829, 2, (long long )(NB * (int const )quot__));
            __CrestApply2(23828, 0, (long long )(inb__ + (int )(NB * (int const )quot__)));
            __CrestStore(23833, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = inb__ + (int )(NB * (int const )quot__);
          }
          }
        } else {
          __CrestBranch(23816, 8140, 0);
          {
          __CrestLoad(23836, (unsigned long )(& mydist__), (long long )mydist__);
          __CrestLoad(23835, (unsigned long )0, (long long )0);
          __CrestApply2(23834, 14, (long long )(mydist__ > 0));
# 143 "../HPL_pdmatgen.c"
          if (mydist__ > 0) {
            __CrestBranch(23837, 8141, 1);
            __CrestLoad(23841, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23840, (unsigned long )(& quot__), (long long )quot__);
            __CrestApply2(23839, 2, (long long )(NB * (int const )quot__));
            __CrestStore(23842, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
            mp = (int )(NB * (int const )quot__);
          } else {
            __CrestBranch(23838, 8142, 0);
            {
            __CrestLoad(23845, (unsigned long )(& myrow), (long long )myrow);
            __CrestLoad(23844, (unsigned long )0, (long long )0);
            __CrestApply2(23843, 13, (long long )(myrow != 0));
# 143 "../HPL_pdmatgen.c"
            if (myrow != 0) {
              __CrestBranch(23846, 8143, 1);
              __CrestLoad(23856, (unsigned long )(& n__), (long long )n__);
              __CrestLoad(23855, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(23854, 0, (long long )(n__ + (int )NB));
              __CrestLoad(23853, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(23852, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(23851, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(23850, 1, (long long )(quot__ - nblk__));
              __CrestApply2(23849, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(23848, 0, (long long )((n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__))));
              __CrestStore(23857, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
              mp = (n__ + (int )NB) + (int )(NB * (int const )(quot__ - nblk__));
            } else {
              __CrestBranch(23847, 8144, 0);
              __CrestLoad(23864, (unsigned long )(& M), (long long )M);
              __CrestLoad(23863, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(23862, (unsigned long )(& quot__), (long long )quot__);
              __CrestLoad(23861, (unsigned long )(& nblk__), (long long )nblk__);
              __CrestApply2(23860, 1, (long long )(quot__ - nblk__));
              __CrestApply2(23859, 2, (long long )(NB * (int const )(quot__ - nblk__)));
              __CrestApply2(23858, 0, (long long )(M + NB * (int const )(quot__ - nblk__)));
              __CrestStore(23865, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
              mp = (int )(M + NB * (int const )(quot__ - nblk__));
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(23631, 8145, 0);
    __CrestLoad(23866, (unsigned long )(& M), (long long )M);
    __CrestStore(23867, (unsigned long )(& mp));
# 143 "../HPL_pdmatgen.c"
    mp = (int )M;
  }
  }
  {
  __CrestLoad(23870, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(23869, (unsigned long )0, (long long )1);
  __CrestApply2(23868, 14, (long long )(npcol > 1));
# 144 "../HPL_pdmatgen.c"
  if (npcol > 1) {
    __CrestBranch(23871, 8147, 1);
    __CrestLoad(23873, (unsigned long )(& NB), (long long )NB);
    __CrestStore(23874, (unsigned long )(& inb_____0));
# 144 "../HPL_pdmatgen.c"
    inb_____0 = (int )NB;
    {
    __CrestLoad(23877, (unsigned long )(& inb_____0), (long long )inb_____0);
    __CrestLoad(23876, (unsigned long )0, (long long )0);
    __CrestApply2(23875, 15, (long long )(inb_____0 <= 0));
# 144 "../HPL_pdmatgen.c"
    if (inb_____0 <= 0) {
      __CrestBranch(23878, 8149, 1);
      __CrestLoad(23885, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply1(23884, 19, (long long )(- inb_____0));
      __CrestLoad(23883, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(23882, 3, (long long )(- inb_____0 / (int )NB));
      __CrestLoad(23881, (unsigned long )0, (long long )1);
      __CrestApply2(23880, 0, (long long )(- inb_____0 / (int )NB + 1));
      __CrestStore(23886, (unsigned long )(& nblk_____0));
# 144 "../HPL_pdmatgen.c"
      nblk_____0 = - inb_____0 / (int )NB + 1;
      __CrestLoad(23887, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestStore(23888, (unsigned long )(& src_____0));
# 144 "../HPL_pdmatgen.c"
      src_____0 = nblk_____0;
      __CrestLoad(23895, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(23894, (unsigned long )(& src_____0), (long long )src_____0);
      __CrestLoad(23893, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(23892, 3, (long long )(src_____0 / npcol));
      __CrestLoad(23891, (unsigned long )(& npcol), (long long )npcol);
      __CrestApply2(23890, 2, (long long )((src_____0 / npcol) * npcol));
      __CrestApply2(23889, 1, (long long )(src_____0 - (src_____0 / npcol) * npcol));
      __CrestStore(23896, (unsigned long )(& src_____0));
# 144 "../HPL_pdmatgen.c"
      src_____0 -= (src_____0 / npcol) * npcol;
      __CrestLoad(23901, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestLoad(23900, (unsigned long )(& nblk_____0), (long long )nblk_____0);
      __CrestLoad(23899, (unsigned long )(& NB), (long long )NB);
      __CrestApply2(23898, 2, (long long )(nblk_____0 * (int )NB));
      __CrestApply2(23897, 0, (long long )(inb_____0 + nblk_____0 * (int )NB));
      __CrestStore(23902, (unsigned long )(& inb_____0));
# 144 "../HPL_pdmatgen.c"
      inb_____0 += nblk_____0 * (int )NB;
      __CrestLoad(23905, (unsigned long )(& N), (long long )N);
      __CrestLoad(23904, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(23903, 1, (long long )(N - (int const )inb_____0));
      __CrestStore(23906, (unsigned long )(& n_____0));
# 144 "../HPL_pdmatgen.c"
      n_____0 = (int )(N - (int const )inb_____0);
      {
      __CrestLoad(23909, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(23908, (unsigned long )0, (long long )0);
      __CrestApply2(23907, 15, (long long )(n_____0 <= 0));
# 144 "../HPL_pdmatgen.c"
      if (n_____0 <= 0) {
        __CrestBranch(23910, 8151, 1);
        {
        __CrestLoad(23914, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(23913, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(23912, 12, (long long )(mycol == src_____0));
# 144 "../HPL_pdmatgen.c"
        if (mycol == src_____0) {
          __CrestBranch(23915, 8152, 1);
          __CrestLoad(23917, (unsigned long )(& N), (long long )N);
          __CrestStore(23918, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
          nq = (int )N;
        } else {
          __CrestBranch(23916, 8153, 0);
          __CrestLoad(23919, (unsigned long )0, (long long )0);
          __CrestStore(23920, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
          nq = 0;
        }
        }
      } else {
        __CrestBranch(23911, 8154, 0);
        __CrestLoad(23923, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(23922, (unsigned long )(& src_____0), (long long )src_____0);
        __CrestApply2(23921, 1, (long long )(mycol - src_____0));
        __CrestStore(23924, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
        mydist_____0 = mycol - src_____0;
        {
        __CrestLoad(23927, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(23926, (unsigned long )0, (long long )0);
        __CrestApply2(23925, 16, (long long )(mydist_____0 < 0));
# 144 "../HPL_pdmatgen.c"
        if (mydist_____0 < 0) {
          __CrestBranch(23928, 8156, 1);
          __CrestLoad(23932, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(23931, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(23930, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(23933, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(23929, 8157, 0);

        }
        }
        __CrestLoad(23938, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(23937, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(23936, 3, (long long )(n_____0 / (int )NB));
        __CrestLoad(23935, (unsigned long )0, (long long )1);
        __CrestApply2(23934, 0, (long long )(n_____0 / (int )NB + 1));
        __CrestStore(23939, (unsigned long )(& nblk_____0));
# 144 "../HPL_pdmatgen.c"
        nblk_____0 = n_____0 / (int )NB + 1;
        __CrestLoad(23942, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(23941, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(23940, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(23943, (unsigned long )(& quot_____0));
# 144 "../HPL_pdmatgen.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(23950, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(23949, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(23948, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(23947, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(23946, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(23945, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(23944, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(23951, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(23954, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(23953, (unsigned long )0, (long long )0);
        __CrestApply2(23952, 16, (long long )(mydist_____0 < 0));
# 144 "../HPL_pdmatgen.c"
        if (mydist_____0 < 0) {
          __CrestBranch(23955, 8160, 1);
          {
          __CrestLoad(23959, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(23958, (unsigned long )(& src_____0), (long long )src_____0);
          __CrestApply2(23957, 13, (long long )(mycol != src_____0));
# 144 "../HPL_pdmatgen.c"
          if (mycol != src_____0) {
            __CrestBranch(23960, 8161, 1);
            __CrestLoad(23966, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23965, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23964, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(23963, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(23962, 0, (long long )(NB + NB * (int const )quot_____0));
            __CrestStore(23967, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = (int )(NB + NB * (int const )quot_____0);
          } else {
            __CrestBranch(23961, 8162, 0);
            __CrestLoad(23972, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(23971, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23970, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(23969, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(23968, 0, (long long )(inb_____0 + (int )(NB * (int const )quot_____0)));
            __CrestStore(23973, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = inb_____0 + (int )(NB * (int const )quot_____0);
          }
          }
        } else {
          __CrestBranch(23956, 8163, 0);
          {
          __CrestLoad(23976, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(23975, (unsigned long )0, (long long )0);
          __CrestApply2(23974, 14, (long long )(mydist_____0 > 0));
# 144 "../HPL_pdmatgen.c"
          if (mydist_____0 > 0) {
            __CrestBranch(23977, 8164, 1);
            __CrestLoad(23981, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(23980, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(23979, 2, (long long )(NB * (int const )quot_____0));
            __CrestStore(23982, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = (int )(NB * (int const )quot_____0);
          } else {
            __CrestBranch(23978, 8165, 0);
            {
            __CrestLoad(23985, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(23984, (unsigned long )(& src_____0), (long long )src_____0);
            __CrestApply2(23983, 13, (long long )(mycol != src_____0));
# 144 "../HPL_pdmatgen.c"
            if (mycol != src_____0) {
              __CrestBranch(23986, 8166, 1);
              __CrestLoad(23996, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(23995, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(23994, 0, (long long )(n_____0 + (int )NB));
              __CrestLoad(23993, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(23992, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(23991, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(23990, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(23989, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(23988, 0, (long long )((n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0))));
              __CrestStore(23997, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
              nq = (n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0));
            } else {
              __CrestBranch(23987, 8167, 0);
              __CrestLoad(24004, (unsigned long )(& N), (long long )N);
              __CrestLoad(24003, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(24002, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(24001, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(24000, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(23999, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(23998, 0, (long long )(N + NB * (int const )(quot_____0 - nblk_____0)));
              __CrestStore(24005, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
              nq = (int )(N + NB * (int const )(quot_____0 - nblk_____0));
            }
            }
          }
          }
        }
        }
      }
      }
    } else {
      __CrestBranch(23879, 8168, 0);
      __CrestLoad(24008, (unsigned long )(& N), (long long )N);
      __CrestLoad(24007, (unsigned long )(& inb_____0), (long long )inb_____0);
      __CrestApply2(24006, 1, (long long )(N - (int const )inb_____0));
      __CrestStore(24009, (unsigned long )(& n_____0));
# 144 "../HPL_pdmatgen.c"
      n_____0 = (int )(N - (int const )inb_____0);
      {
      __CrestLoad(24012, (unsigned long )(& n_____0), (long long )n_____0);
      __CrestLoad(24011, (unsigned long )0, (long long )0);
      __CrestApply2(24010, 15, (long long )(n_____0 <= 0));
# 144 "../HPL_pdmatgen.c"
      if (n_____0 <= 0) {
        __CrestBranch(24013, 8170, 1);
        {
        __CrestLoad(24017, (unsigned long )(& mycol), (long long )mycol);
        __CrestLoad(24016, (unsigned long )0, (long long )0);
        __CrestApply2(24015, 12, (long long )(mycol == 0));
# 144 "../HPL_pdmatgen.c"
        if (mycol == 0) {
          __CrestBranch(24018, 8171, 1);
          __CrestLoad(24020, (unsigned long )(& N), (long long )N);
          __CrestStore(24021, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
          nq = (int )N;
        } else {
          __CrestBranch(24019, 8172, 0);
          __CrestLoad(24022, (unsigned long )0, (long long )0);
          __CrestStore(24023, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
          nq = 0;
        }
        }
      } else {
        __CrestBranch(24014, 8173, 0);
        __CrestLoad(24024, (unsigned long )(& mycol), (long long )mycol);
        __CrestStore(24025, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
        mydist_____0 = mycol;
        {
        __CrestLoad(24028, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(24027, (unsigned long )0, (long long )0);
        __CrestApply2(24026, 16, (long long )(mydist_____0 < 0));
# 144 "../HPL_pdmatgen.c"
        if (mydist_____0 < 0) {
          __CrestBranch(24029, 8175, 1);
          __CrestLoad(24033, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(24032, (unsigned long )(& npcol), (long long )npcol);
          __CrestApply2(24031, 0, (long long )(mydist_____0 + npcol));
          __CrestStore(24034, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
          mydist_____0 += npcol;
        } else {
          __CrestBranch(24030, 8176, 0);

        }
        }
        __CrestLoad(24039, (unsigned long )(& n_____0), (long long )n_____0);
        __CrestLoad(24038, (unsigned long )(& NB), (long long )NB);
        __CrestApply2(24037, 3, (long long )(n_____0 / (int )NB));
        __CrestLoad(24036, (unsigned long )0, (long long )1);
        __CrestApply2(24035, 0, (long long )(n_____0 / (int )NB + 1));
        __CrestStore(24040, (unsigned long )(& nblk_____0));
# 144 "../HPL_pdmatgen.c"
        nblk_____0 = n_____0 / (int )NB + 1;
        __CrestLoad(24043, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(24042, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(24041, 3, (long long )(nblk_____0 / npcol));
        __CrestStore(24044, (unsigned long )(& quot_____0));
# 144 "../HPL_pdmatgen.c"
        quot_____0 = nblk_____0 / npcol;
        __CrestLoad(24051, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(24050, (unsigned long )(& nblk_____0), (long long )nblk_____0);
        __CrestLoad(24049, (unsigned long )(& quot_____0), (long long )quot_____0);
        __CrestLoad(24048, (unsigned long )(& npcol), (long long )npcol);
        __CrestApply2(24047, 2, (long long )(quot_____0 * npcol));
        __CrestApply2(24046, 1, (long long )(nblk_____0 - quot_____0 * npcol));
        __CrestApply2(24045, 1, (long long )(mydist_____0 - (nblk_____0 - quot_____0 * npcol)));
        __CrestStore(24052, (unsigned long )(& mydist_____0));
# 144 "../HPL_pdmatgen.c"
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
        {
        __CrestLoad(24055, (unsigned long )(& mydist_____0), (long long )mydist_____0);
        __CrestLoad(24054, (unsigned long )0, (long long )0);
        __CrestApply2(24053, 16, (long long )(mydist_____0 < 0));
# 144 "../HPL_pdmatgen.c"
        if (mydist_____0 < 0) {
          __CrestBranch(24056, 8179, 1);
          {
          __CrestLoad(24060, (unsigned long )(& mycol), (long long )mycol);
          __CrestLoad(24059, (unsigned long )0, (long long )0);
          __CrestApply2(24058, 13, (long long )(mycol != 0));
# 144 "../HPL_pdmatgen.c"
          if (mycol != 0) {
            __CrestBranch(24061, 8180, 1);
            __CrestLoad(24067, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(24066, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(24065, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(24064, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(24063, 0, (long long )(NB + NB * (int const )quot_____0));
            __CrestStore(24068, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = (int )(NB + NB * (int const )quot_____0);
          } else {
            __CrestBranch(24062, 8181, 0);
            __CrestLoad(24073, (unsigned long )(& inb_____0), (long long )inb_____0);
            __CrestLoad(24072, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(24071, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(24070, 2, (long long )(NB * (int const )quot_____0));
            __CrestApply2(24069, 0, (long long )(inb_____0 + (int )(NB * (int const )quot_____0)));
            __CrestStore(24074, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = inb_____0 + (int )(NB * (int const )quot_____0);
          }
          }
        } else {
          __CrestBranch(24057, 8182, 0);
          {
          __CrestLoad(24077, (unsigned long )(& mydist_____0), (long long )mydist_____0);
          __CrestLoad(24076, (unsigned long )0, (long long )0);
          __CrestApply2(24075, 14, (long long )(mydist_____0 > 0));
# 144 "../HPL_pdmatgen.c"
          if (mydist_____0 > 0) {
            __CrestBranch(24078, 8183, 1);
            __CrestLoad(24082, (unsigned long )(& NB), (long long )NB);
            __CrestLoad(24081, (unsigned long )(& quot_____0), (long long )quot_____0);
            __CrestApply2(24080, 2, (long long )(NB * (int const )quot_____0));
            __CrestStore(24083, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
            nq = (int )(NB * (int const )quot_____0);
          } else {
            __CrestBranch(24079, 8184, 0);
            {
            __CrestLoad(24086, (unsigned long )(& mycol), (long long )mycol);
            __CrestLoad(24085, (unsigned long )0, (long long )0);
            __CrestApply2(24084, 13, (long long )(mycol != 0));
# 144 "../HPL_pdmatgen.c"
            if (mycol != 0) {
              __CrestBranch(24087, 8185, 1);
              __CrestLoad(24097, (unsigned long )(& n_____0), (long long )n_____0);
              __CrestLoad(24096, (unsigned long )(& NB), (long long )NB);
              __CrestApply2(24095, 0, (long long )(n_____0 + (int )NB));
              __CrestLoad(24094, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(24093, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(24092, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(24091, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(24090, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(24089, 0, (long long )((n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0))));
              __CrestStore(24098, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
              nq = (n_____0 + (int )NB) + (int )(NB * (int const )(quot_____0 - nblk_____0));
            } else {
              __CrestBranch(24088, 8186, 0);
              __CrestLoad(24105, (unsigned long )(& N), (long long )N);
              __CrestLoad(24104, (unsigned long )(& NB), (long long )NB);
              __CrestLoad(24103, (unsigned long )(& quot_____0), (long long )quot_____0);
              __CrestLoad(24102, (unsigned long )(& nblk_____0), (long long )nblk_____0);
              __CrestApply2(24101, 1, (long long )(quot_____0 - nblk_____0));
              __CrestApply2(24100, 2, (long long )(NB * (int const )(quot_____0 - nblk_____0)));
              __CrestApply2(24099, 0, (long long )(N + NB * (int const )(quot_____0 - nblk_____0)));
              __CrestStore(24106, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
              nq = (int )(N + NB * (int const )(quot_____0 - nblk_____0));
            }
            }
          }
          }
        }
        }
      }
      }
    }
    }
  } else {
    __CrestBranch(23872, 8187, 0);
    __CrestLoad(24107, (unsigned long )(& N), (long long )N);
    __CrestStore(24108, (unsigned long )(& nq));
# 144 "../HPL_pdmatgen.c"
    nq = (int )N;
  }
  }
  {
  __CrestLoad(24111, (unsigned long )(& mp), (long long )mp);
  __CrestLoad(24110, (unsigned long )0, (long long )0);
  __CrestApply2(24109, 15, (long long )(mp <= 0));
# 146 "../HPL_pdmatgen.c"
  if (mp <= 0) {
    __CrestBranch(24112, 8189, 1);
# 146 "../HPL_pdmatgen.c"
    goto return_label;
  } else {
    __CrestBranch(24113, 8191, 0);
    {
    __CrestLoad(24116, (unsigned long )(& nq), (long long )nq);
    __CrestLoad(24115, (unsigned long )0, (long long )0);
    __CrestApply2(24114, 15, (long long )(nq <= 0));
# 146 "../HPL_pdmatgen.c"
    if (nq <= 0) {
      __CrestBranch(24117, 8192, 1);
# 146 "../HPL_pdmatgen.c"
      goto return_label;
    } else {
      __CrestBranch(24118, 8194, 0);

    }
    }
  }
  }
  __CrestLoad(24125, (unsigned long )(& mp), (long long )mp);
  __CrestLoad(24124, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24123, 0, (long long )(mp + (int )NB));
  __CrestLoad(24122, (unsigned long )0, (long long )1);
  __CrestApply2(24121, 1, (long long )((mp + (int )NB) - 1));
  __CrestLoad(24120, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24119, 3, (long long )(((mp + (int )NB) - 1) / (int )NB));
  __CrestStore(24126, (unsigned long )(& mblks));
# 150 "../HPL_pdmatgen.c"
  mblks = ((mp + (int )NB) - 1) / (int )NB;
  __CrestLoad(24135, (unsigned long )(& mp), (long long )mp);
  __CrestLoad(24134, (unsigned long )(& mp), (long long )mp);
  __CrestLoad(24133, (unsigned long )0, (long long )1);
  __CrestApply2(24132, 1, (long long )(mp - 1));
  __CrestLoad(24131, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24130, 3, (long long )((mp - 1) / (int )NB));
  __CrestLoad(24129, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24128, 2, (long long )(((mp - 1) / (int )NB) * (int )NB));
  __CrestApply2(24127, 1, (long long )(mp - ((mp - 1) / (int )NB) * (int )NB));
  __CrestStore(24136, (unsigned long )(& lmb));
# 150 "../HPL_pdmatgen.c"
  lmb = mp - ((mp - 1) / (int )NB) * (int )NB;
  __CrestLoad(24143, (unsigned long )(& nq), (long long )nq);
  __CrestLoad(24142, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24141, 0, (long long )(nq + (int )NB));
  __CrestLoad(24140, (unsigned long )0, (long long )1);
  __CrestApply2(24139, 1, (long long )((nq + (int )NB) - 1));
  __CrestLoad(24138, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24137, 3, (long long )(((nq + (int )NB) - 1) / (int )NB));
  __CrestStore(24144, (unsigned long )(& nblks));
# 151 "../HPL_pdmatgen.c"
  nblks = ((nq + (int )NB) - 1) / (int )NB;
  __CrestLoad(24153, (unsigned long )(& nq), (long long )nq);
  __CrestLoad(24152, (unsigned long )(& nq), (long long )nq);
  __CrestLoad(24151, (unsigned long )0, (long long )1);
  __CrestApply2(24150, 1, (long long )(nq - 1));
  __CrestLoad(24149, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24148, 3, (long long )((nq - 1) / (int )NB));
  __CrestLoad(24147, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24146, 2, (long long )(((nq - 1) / (int )NB) * (int )NB));
  __CrestApply2(24145, 1, (long long )(nq - ((nq - 1) / (int )NB) * (int )NB));
  __CrestStore(24154, (unsigned long )(& lnb));
# 151 "../HPL_pdmatgen.c"
  lnb = nq - ((nq - 1) / (int )NB) * (int )NB;
  __CrestLoad(24155, (unsigned long )0, (long long )1);
  __CrestStore(24156, (unsigned long )(& jump1));
# 155 "../HPL_pdmatgen.c"
  jump1 = 1;
  __CrestLoad(24159, (unsigned long )(& nprow), (long long )nprow);
  __CrestLoad(24158, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24157, 2, (long long )(nprow * (int )NB));
  __CrestStore(24160, (unsigned long )(& jump2));
# 155 "../HPL_pdmatgen.c"
  jump2 = nprow * (int )NB;
  __CrestLoad(24161, (unsigned long )(& M), (long long )M);
  __CrestStore(24162, (unsigned long )(& jump3));
# 155 "../HPL_pdmatgen.c"
  jump3 = (int )M;
  __CrestLoad(24165, (unsigned long )(& npcol), (long long )npcol);
  __CrestLoad(24164, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24163, 2, (long long )(npcol * (int )NB));
  __CrestStore(24166, (unsigned long )(& jump4));
# 155 "../HPL_pdmatgen.c"
  jump4 = npcol * (int )NB;
  __CrestLoad(24167, (unsigned long )(& NB), (long long )NB);
  __CrestStore(24168, (unsigned long )(& jump5));
# 156 "../HPL_pdmatgen.c"
  jump5 = (int )NB;
  __CrestLoad(24169, (unsigned long )(& mycol), (long long )mycol);
  __CrestStore(24170, (unsigned long )(& jump6));
# 156 "../HPL_pdmatgen.c"
  jump6 = mycol;
  __CrestLoad(24173, (unsigned long )(& myrow), (long long )myrow);
  __CrestLoad(24172, (unsigned long )(& NB), (long long )NB);
  __CrestApply2(24171, 2, (long long )(myrow * (int )NB));
  __CrestStore(24174, (unsigned long )(& jump7));
# 156 "../HPL_pdmatgen.c"
  jump7 = myrow * (int )NB;
  __CrestLoad(24175, (unsigned long )(& jump1), (long long )jump1);
# 158 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump1, mult, iadd, jseed, iran1, ia1, ic1);
  __CrestClearStack(24176);
  __CrestLoad(24177, (unsigned long )(& jump2), (long long )jump2);
# 159 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump2, mult, iadd, iran1, itmp1, ia2, ic2);
  __CrestClearStack(24178);
  __CrestLoad(24179, (unsigned long )(& jump3), (long long )jump3);
# 160 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump3, mult, iadd, iran1, itmp1, ia3, ic3);
  __CrestClearStack(24180);
  __CrestLoad(24181, (unsigned long )(& jump4), (long long )jump4);
# 161 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump4, ia3, ic3, iran1, itmp1, ia4, ic4);
  __CrestClearStack(24182);
  __CrestLoad(24183, (unsigned long )(& jump5), (long long )jump5);
# 162 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump5, ia3, ic3, iran1, itmp1, ia5, ic5);
  __CrestClearStack(24184);
  __CrestLoad(24185, (unsigned long )(& jump6), (long long )jump6);
# 163 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump6, ia5, ic5, iran1, itmp3, itmp1, itmp2);
  __CrestClearStack(24186);
  __CrestLoad(24187, (unsigned long )(& jump7), (long long )jump7);
# 164 "../HPL_pdmatgen.c"
  HPL_xjumpm((int const )jump7, mult, iadd, itmp3, iran1, itmp1, itmp2);
  __CrestClearStack(24188);
  __CrestLoad(24189, (unsigned long )0, (long long )((int const )0));
# 165 "../HPL_pdmatgen.c"
  HPL_setran((int const )0, iran1);
  __CrestClearStack(24190);
  __CrestLoad(24191, (unsigned long )0, (long long )((int const )1));
# 165 "../HPL_pdmatgen.c"
  HPL_setran((int const )1, ia1);
  __CrestClearStack(24192);
  __CrestLoad(24193, (unsigned long )0, (long long )((int const )2));
# 165 "../HPL_pdmatgen.c"
  HPL_setran((int const )2, ic1);
  __CrestClearStack(24194);
  __CrestLoad(24195, (unsigned long )(& iran1[0]), (long long )iran1[0]);
  __CrestStore(24196, (unsigned long )(& ib1[0]));
# 169 "../HPL_pdmatgen.c"
  ib1[0] = iran1[0];
  __CrestLoad(24197, (unsigned long )(& iran1[1]), (long long )iran1[1]);
  __CrestStore(24198, (unsigned long )(& ib1[1]));
# 169 "../HPL_pdmatgen.c"
  ib1[1] = iran1[1];
  __CrestLoad(24199, (unsigned long )(& iran1[0]), (long long )iran1[0]);
  __CrestStore(24200, (unsigned long )(& ib2[0]));
# 170 "../HPL_pdmatgen.c"
  ib2[0] = iran1[0];
  __CrestLoad(24201, (unsigned long )(& iran1[1]), (long long )iran1[1]);
  __CrestStore(24202, (unsigned long )(& ib2[1]));
# 170 "../HPL_pdmatgen.c"
  ib2[1] = iran1[1];
  __CrestLoad(24203, (unsigned long )(& iran1[0]), (long long )iran1[0]);
  __CrestStore(24204, (unsigned long )(& ib3[0]));
# 171 "../HPL_pdmatgen.c"
  ib3[0] = iran1[0];
  __CrestLoad(24205, (unsigned long )(& iran1[1]), (long long )iran1[1]);
  __CrestStore(24206, (unsigned long )(& ib3[1]));
# 171 "../HPL_pdmatgen.c"
  ib3[1] = iran1[1];
  __CrestLoad(24207, (unsigned long )0, (long long )0);
  __CrestStore(24208, (unsigned long )(& jblk));
# 173 "../HPL_pdmatgen.c"
  jblk = 0;
  {
# 173 "../HPL_pdmatgen.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(24211, (unsigned long )(& jblk), (long long )jblk);
    __CrestLoad(24210, (unsigned long )(& nblks), (long long )nblks);
    __CrestApply2(24209, 16, (long long )(jblk < nblks));
# 173 "../HPL_pdmatgen.c"
    if (jblk < nblks) {
      __CrestBranch(24212, 8200, 1);

    } else {
      __CrestBranch(24213, 8201, 0);
# 173 "../HPL_pdmatgen.c"
      goto while_break;
    }
    }
    {
    __CrestLoad(24218, (unsigned long )(& jblk), (long long )jblk);
    __CrestLoad(24217, (unsigned long )(& nblks), (long long )nblks);
    __CrestLoad(24216, (unsigned long )0, (long long )1);
    __CrestApply2(24215, 1, (long long )(nblks - 1));
    __CrestApply2(24214, 12, (long long )(jblk == nblks - 1));
# 175 "../HPL_pdmatgen.c"
    if (jblk == nblks - 1) {
      __CrestBranch(24219, 8203, 1);
      __CrestLoad(24221, (unsigned long )(& lnb), (long long )lnb);
      __CrestStore(24222, (unsigned long )(& jb));
# 175 "../HPL_pdmatgen.c"
      jb = lnb;
    } else {
      __CrestBranch(24220, 8204, 0);
      __CrestLoad(24223, (unsigned long )(& NB), (long long )NB);
      __CrestStore(24224, (unsigned long )(& jb));
# 175 "../HPL_pdmatgen.c"
      jb = (int )NB;
    }
    }
    __CrestLoad(24225, (unsigned long )0, (long long )0);
    __CrestStore(24226, (unsigned long )(& jk));
# 176 "../HPL_pdmatgen.c"
    jk = 0;
    {
# 176 "../HPL_pdmatgen.c"
    while (1) {
      while_continue___0: ;
      {
      __CrestLoad(24229, (unsigned long )(& jk), (long long )jk);
      __CrestLoad(24228, (unsigned long )(& jb), (long long )jb);
      __CrestApply2(24227, 16, (long long )(jk < jb));
# 176 "../HPL_pdmatgen.c"
      if (jk < jb) {
        __CrestBranch(24230, 8210, 1);

      } else {
        __CrestBranch(24231, 8211, 0);
# 176 "../HPL_pdmatgen.c"
        goto while_break___0;
      }
      }
      __CrestLoad(24232, (unsigned long )0, (long long )0);
      __CrestStore(24233, (unsigned long )(& iblk));
# 178 "../HPL_pdmatgen.c"
      iblk = 0;
      {
# 178 "../HPL_pdmatgen.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(24236, (unsigned long )(& iblk), (long long )iblk);
        __CrestLoad(24235, (unsigned long )(& mblks), (long long )mblks);
        __CrestApply2(24234, 16, (long long )(iblk < mblks));
# 178 "../HPL_pdmatgen.c"
        if (iblk < mblks) {
          __CrestBranch(24237, 8217, 1);

        } else {
          __CrestBranch(24238, 8218, 0);
# 178 "../HPL_pdmatgen.c"
          goto while_break___1;
        }
        }
        {
        __CrestLoad(24243, (unsigned long )(& iblk), (long long )iblk);
        __CrestLoad(24242, (unsigned long )(& mblks), (long long )mblks);
        __CrestLoad(24241, (unsigned long )0, (long long )1);
        __CrestApply2(24240, 1, (long long )(mblks - 1));
        __CrestApply2(24239, 12, (long long )(iblk == mblks - 1));
# 180 "../HPL_pdmatgen.c"
        if (iblk == mblks - 1) {
          __CrestBranch(24244, 8220, 1);
          __CrestLoad(24246, (unsigned long )(& lmb), (long long )lmb);
          __CrestStore(24247, (unsigned long )(& ib));
# 180 "../HPL_pdmatgen.c"
          ib = lmb;
        } else {
          __CrestBranch(24245, 8221, 0);
          __CrestLoad(24248, (unsigned long )(& NB), (long long )NB);
          __CrestStore(24249, (unsigned long )(& ib));
# 180 "../HPL_pdmatgen.c"
          ib = (int )NB;
        }
        }
        __CrestLoad(24250, (unsigned long )0, (long long )0);
        __CrestStore(24251, (unsigned long )(& ik));
# 181 "../HPL_pdmatgen.c"
        ik = 0;
        {
# 181 "../HPL_pdmatgen.c"
        while (1) {
          while_continue___2: ;
          {
          __CrestLoad(24254, (unsigned long )(& ik), (long long )ik);
          __CrestLoad(24253, (unsigned long )(& ib), (long long )ib);
          __CrestApply2(24252, 16, (long long )(ik < ib));
# 181 "../HPL_pdmatgen.c"
          if (ik < ib) {
            __CrestBranch(24255, 8227, 1);

          } else {
            __CrestBranch(24256, 8228, 0);
# 181 "../HPL_pdmatgen.c"
            goto while_break___2;
          }
          }
# 181 "../HPL_pdmatgen.c"
          *A = HPL_rand();
          __CrestClearStack(24257);
# 181 "../HPL_pdmatgen.c"
          A ++;
          __CrestLoad(24260, (unsigned long )(& ik), (long long )ik);
          __CrestLoad(24259, (unsigned long )0, (long long )1);
          __CrestApply2(24258, 0, (long long )(ik + 1));
          __CrestStore(24261, (unsigned long )(& ik));
# 181 "../HPL_pdmatgen.c"
          ik ++;
        }
        while_break___2: ;
        }
# 182 "../HPL_pdmatgen.c"
        HPL_jumpit(ia2, ic2, ib1, iran2);
        __CrestClearStack(24262);
        __CrestLoad(24263, (unsigned long )(& iran2[0]), (long long )iran2[0]);
        __CrestStore(24264, (unsigned long )(& ib1[0]));
# 183 "../HPL_pdmatgen.c"
        ib1[0] = iran2[0];
        __CrestLoad(24265, (unsigned long )(& iran2[1]), (long long )iran2[1]);
        __CrestStore(24266, (unsigned long )(& ib1[1]));
# 183 "../HPL_pdmatgen.c"
        ib1[1] = iran2[1];
        __CrestLoad(24269, (unsigned long )(& iblk), (long long )iblk);
        __CrestLoad(24268, (unsigned long )0, (long long )1);
        __CrestApply2(24267, 0, (long long )(iblk + 1));
        __CrestStore(24270, (unsigned long )(& iblk));
# 178 "../HPL_pdmatgen.c"
        iblk ++;
      }
      while_break___1: ;
      }
# 185 "../HPL_pdmatgen.c"
      A += LDA - (int const )mp;
# 186 "../HPL_pdmatgen.c"
      HPL_jumpit(ia3, ic3, ib2, iran3);
      __CrestClearStack(24271);
      __CrestLoad(24272, (unsigned long )(& iran3[0]), (long long )iran3[0]);
      __CrestStore(24273, (unsigned long )(& ib1[0]));
# 187 "../HPL_pdmatgen.c"
      ib1[0] = iran3[0];
      __CrestLoad(24274, (unsigned long )(& iran3[1]), (long long )iran3[1]);
      __CrestStore(24275, (unsigned long )(& ib1[1]));
# 187 "../HPL_pdmatgen.c"
      ib1[1] = iran3[1];
      __CrestLoad(24276, (unsigned long )(& iran3[0]), (long long )iran3[0]);
      __CrestStore(24277, (unsigned long )(& ib2[0]));
# 188 "../HPL_pdmatgen.c"
      ib2[0] = iran3[0];
      __CrestLoad(24278, (unsigned long )(& iran3[1]), (long long )iran3[1]);
      __CrestStore(24279, (unsigned long )(& ib2[1]));
# 188 "../HPL_pdmatgen.c"
      ib2[1] = iran3[1];
      __CrestLoad(24282, (unsigned long )(& jk), (long long )jk);
      __CrestLoad(24281, (unsigned long )0, (long long )1);
      __CrestApply2(24280, 0, (long long )(jk + 1));
      __CrestStore(24283, (unsigned long )(& jk));
# 176 "../HPL_pdmatgen.c"
      jk ++;
    }
    while_break___0: ;
    }
# 190 "../HPL_pdmatgen.c"
    HPL_jumpit(ia4, ic4, ib3, iran4);
    __CrestClearStack(24284);
    __CrestLoad(24285, (unsigned long )(& iran4[0]), (long long )iran4[0]);
    __CrestStore(24286, (unsigned long )(& ib1[0]));
# 191 "../HPL_pdmatgen.c"
    ib1[0] = iran4[0];
    __CrestLoad(24287, (unsigned long )(& iran4[1]), (long long )iran4[1]);
    __CrestStore(24288, (unsigned long )(& ib1[1]));
# 191 "../HPL_pdmatgen.c"
    ib1[1] = iran4[1];
    __CrestLoad(24289, (unsigned long )(& iran4[0]), (long long )iran4[0]);
    __CrestStore(24290, (unsigned long )(& ib2[0]));
# 192 "../HPL_pdmatgen.c"
    ib2[0] = iran4[0];
    __CrestLoad(24291, (unsigned long )(& iran4[1]), (long long )iran4[1]);
    __CrestStore(24292, (unsigned long )(& ib2[1]));
# 192 "../HPL_pdmatgen.c"
    ib2[1] = iran4[1];
    __CrestLoad(24293, (unsigned long )(& iran4[0]), (long long )iran4[0]);
    __CrestStore(24294, (unsigned long )(& ib3[0]));
# 193 "../HPL_pdmatgen.c"
    ib3[0] = iran4[0];
    __CrestLoad(24295, (unsigned long )(& iran4[1]), (long long )iran4[1]);
    __CrestStore(24296, (unsigned long )(& ib3[1]));
# 193 "../HPL_pdmatgen.c"
    ib3[1] = iran4[1];
    __CrestLoad(24299, (unsigned long )(& jblk), (long long )jblk);
    __CrestLoad(24298, (unsigned long )0, (long long )1);
    __CrestApply2(24297, 0, (long long )(jblk + 1));
    __CrestStore(24300, (unsigned long )(& jblk));
# 173 "../HPL_pdmatgen.c"
    jblk ++;
  }
  while_break: ;
  }

  return_label:
  {
  __CrestReturn(24301);
# 53 "../HPL_pdmatgen.c"
  return;
  }
}
}
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 78 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
double HPL_ptimer_cputime(void) ;
# 79 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
double HPL_ptimer_walltime(void) ;
# 87 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
void HPL_ptimer_disable(void) ;
# 88 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
void HPL_ptimer_enable(void) ;
# 89 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
double HPL_ptimer_inquire(HPL_T_PTIME const TMTYPE , int const I ) ;
# 56 "../HPL_ptimer.c"
static int HPL_ptimer_disabled ;
# 57 "../HPL_ptimer.c"
static double HPL_ptimer_cpusec[64] ;
# 57 "../HPL_ptimer.c"
static double HPL_ptimer_cpustart[64] ;
# 57 "../HPL_ptimer.c"
static double HPL_ptimer_wallsec[64] ;
# 57 "../HPL_ptimer.c"
static double HPL_ptimer_wallstart[64] ;
# 67 "../HPL_ptimer.c"
void HPL_ptimer_boot(void)
{
  int i ;
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(24302, 133);

  __CrestLoad(24303, (unsigned long )0, (long long )0);
  __CrestStore(24304, (unsigned long )(& HPL_ptimer_disabled));
# 82 "../HPL_ptimer.c"
  HPL_ptimer_disabled = 0;
  __CrestLoad(24305, (unsigned long )0, (long long )0);
  __CrestStore(24306, (unsigned long )(& i));
# 84 "../HPL_ptimer.c"
  i = 0;
  {
# 84 "../HPL_ptimer.c"
  while (1) {
    while_continue: ;
    {
    __CrestLoad(24309, (unsigned long )(& i), (long long )i);
    __CrestLoad(24308, (unsigned long )0, (long long )64);
    __CrestApply2(24307, 16, (long long )(i < 64));
# 84 "../HPL_ptimer.c"
    if (i < 64) {
      __CrestBranch(24310, 8244, 1);

    } else {
      __CrestBranch(24311, 8245, 0);
# 84 "../HPL_ptimer.c"
      goto while_break;
    }
    }
# 86 "../HPL_ptimer.c"
    tmp = 0.0;
# 86 "../HPL_ptimer.c"
    HPL_ptimer_wallsec[i] = tmp;
# 86 "../HPL_ptimer.c"
    HPL_ptimer_cpusec[i] = tmp;
# 87 "../HPL_ptimer.c"
    tmp___0 = 5.0;
# 87 "../HPL_ptimer.c"
    HPL_ptimer_wallstart[i] = tmp___0;
# 87 "../HPL_ptimer.c"
    HPL_ptimer_cpustart[i] = tmp___0;
    __CrestLoad(24314, (unsigned long )(& i), (long long )i);
    __CrestLoad(24313, (unsigned long )0, (long long )1);
    __CrestApply2(24312, 0, (long long )(i + 1));
    __CrestStore(24315, (unsigned long )(& i));
# 84 "../HPL_ptimer.c"
    i ++;
  }
  while_break: ;
  }

  {
  __CrestReturn(24316);
# 67 "../HPL_ptimer.c"
  return;
  }
}
}
# 95 "../HPL_ptimer.c"
void HPL_ptimer(int const I )
{
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(24318, 134);
  __CrestStore(24317, (unsigned long )(& I));
  {
  __CrestLoad(24321, (unsigned long )(& HPL_ptimer_disabled), (long long )HPL_ptimer_disabled);
  __CrestLoad(24320, (unsigned long )0, (long long )0);
  __CrestApply2(24319, 13, (long long )(HPL_ptimer_disabled != 0));
# 132 "../HPL_ptimer.c"
  if (HPL_ptimer_disabled != 0) {
    __CrestBranch(24322, 8251, 1);
# 132 "../HPL_ptimer.c"
    goto return_label;
  } else {
    __CrestBranch(24323, 8253, 0);

  }
  }
  {
  __CrestLoad(24326, (unsigned long )(& HPL_ptimer_wallstart[I]), (long long )HPL_ptimer_wallstart[I]);
  __CrestLoad(24325, (unsigned long )0, (long long )5.0);
  __CrestApply2(24324, 12, (long long )(HPL_ptimer_wallstart[I] == 5.0));
# 137 "../HPL_ptimer.c"
  if (HPL_ptimer_wallstart[I] == 5.0) {
    __CrestBranch(24327, 8255, 1);
# 139 "../HPL_ptimer.c"
    HPL_ptimer_wallstart[I] = HPL_ptimer_walltime();
    __CrestClearStack(24329);
# 140 "../HPL_ptimer.c"
    HPL_ptimer_cpustart[I] = HPL_ptimer_cputime();
    __CrestClearStack(24330);
  } else {
    __CrestBranch(24328, 8256, 0);
# 144 "../HPL_ptimer.c"
    tmp = HPL_ptimer_cputime();
    __CrestClearStack(24331);
# 144 "../HPL_ptimer.c"
    HPL_ptimer_cpusec[I] += tmp - HPL_ptimer_cpustart[I];
# 145 "../HPL_ptimer.c"
    tmp___0 = HPL_ptimer_walltime();
    __CrestClearStack(24332);
# 145 "../HPL_ptimer.c"
    HPL_ptimer_wallsec[I] += tmp___0 - HPL_ptimer_wallstart[I];
# 146 "../HPL_ptimer.c"
    HPL_ptimer_wallstart[I] = 5.0;
  }
  }

  return_label:
  {
  __CrestReturn(24333);
# 95 "../HPL_ptimer.c"
  return;
  }
}
}
# 154 "../HPL_ptimer.c"
void HPL_ptimer_enable(void)
{


  {
  __CrestCall(24334, 135);

  __CrestLoad(24335, (unsigned long )0, (long long )0);
  __CrestStore(24336, (unsigned long )(& HPL_ptimer_disabled));
# 165 "../HPL_ptimer.c"
  HPL_ptimer_disabled = 0;

  {
  __CrestReturn(24337);
# 154 "../HPL_ptimer.c"
  return;
  }
}
}
# 173 "../HPL_ptimer.c"
void HPL_ptimer_disable(void)
{


  {
  __CrestCall(24338, 136);

  __CrestLoad(24339, (unsigned long )0, (long long )1);
  __CrestStore(24340, (unsigned long )(& HPL_ptimer_disabled));
# 184 "../HPL_ptimer.c"
  HPL_ptimer_disabled = 1;

  {
  __CrestReturn(24341);
# 173 "../HPL_ptimer.c"
  return;
  }
}
}
# 192 "../HPL_ptimer.c"
double HPL_ptimer_inquire(HPL_T_PTIME const TMTYPE , int const I )
{
  double time ;
  double tmp ;
  double tmp___0 ;

  {
  __CrestCall(24344, 137);
  __CrestStore(24343, (unsigned long )(& I));
  __CrestStore(24342, (unsigned long )(& TMTYPE));
  {
  __CrestLoad(24347, (unsigned long )(& TMTYPE), (long long )TMTYPE);
  __CrestLoad(24346, (unsigned long )0, (long long )101U);
  __CrestApply2(24345, 12, (long long )((unsigned int const )TMTYPE == 101U));
# 235 "../HPL_ptimer.c"
  if ((unsigned int const )TMTYPE == 101U) {
    __CrestBranch(24348, 8266, 1);
# 237 "../HPL_ptimer.c"
    tmp = HPL_ptimer_walltime();
    __CrestClearStack(24350);
    {
    __CrestLoad(24353, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(24352, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(24351, 12, (long long )(tmp == - 1.0));
# 237 "../HPL_ptimer.c"
    if (tmp == - 1.0) {
      __CrestBranch(24354, 8268, 1);
# 238 "../HPL_ptimer.c"
      time = - 1.0;
    } else {
      __CrestBranch(24355, 8269, 0);
# 240 "../HPL_ptimer.c"
      time = HPL_ptimer_wallsec[I];
    }
    }
  } else {
    __CrestBranch(24349, 8270, 0);
# 244 "../HPL_ptimer.c"
    tmp___0 = HPL_ptimer_cputime();
    __CrestClearStack(24356);
    {
    __CrestLoad(24359, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(24358, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(24357, 12, (long long )(tmp___0 == - 1.0));
# 244 "../HPL_ptimer.c"
    if (tmp___0 == - 1.0) {
      __CrestBranch(24360, 8272, 1);
# 245 "../HPL_ptimer.c"
      time = - 1.0;
    } else {
      __CrestBranch(24361, 8273, 0);
# 247 "../HPL_ptimer.c"
      time = HPL_ptimer_cpusec[I];
    }
    }
  }
  }
  {
  __CrestReturn(24362);
# 249 "../HPL_ptimer.c"
  return (time);
  }
}
}
# 256 "../HPL_ptimer.c"
void HPL_ptimer_combine(MPI_Comm COMM , HPL_T_PTIME_OP const OPE , HPL_T_PTIME const TMTYPE ,
                        int const N , int const IBEG , double *TIMES )
{
  int i ;
  int tmpdis ;
  double tmp ;
  double tmp___0 ;
  double *mem_11 ;
  double *mem_12 ;
  double *mem_13 ;
  double *mem_14 ;
  double *mem_15 ;
  double *mem_16 ;
  double *mem_17 ;
  double *mem_18 ;

  {
  __CrestCall(24368, 138);
  __CrestStore(24367, (unsigned long )(& IBEG));
  __CrestStore(24366, (unsigned long )(& N));
  __CrestStore(24365, (unsigned long )(& TMTYPE));
  __CrestStore(24364, (unsigned long )(& OPE));
  __CrestStore(24363, (unsigned long )(& COMM));
  __CrestLoad(24369, (unsigned long )(& HPL_ptimer_disabled), (long long )HPL_ptimer_disabled);
  __CrestStore(24370, (unsigned long )(& tmpdis));
# 320 "../HPL_ptimer.c"
  tmpdis = HPL_ptimer_disabled;
  __CrestLoad(24371, (unsigned long )0, (long long )1);
  __CrestStore(24372, (unsigned long )(& HPL_ptimer_disabled));
# 320 "../HPL_ptimer.c"
  HPL_ptimer_disabled = 1;
  {
  __CrestLoad(24375, (unsigned long )(& TMTYPE), (long long )TMTYPE);
  __CrestLoad(24374, (unsigned long )0, (long long )101U);
  __CrestApply2(24373, 12, (long long )((unsigned int const )TMTYPE == 101U));
# 326 "../HPL_ptimer.c"
  if ((unsigned int const )TMTYPE == 101U) {
    __CrestBranch(24376, 8277, 1);
# 328 "../HPL_ptimer.c"
    tmp = HPL_ptimer_walltime();
    __CrestClearStack(24378);
    {
    __CrestLoad(24381, (unsigned long )(& tmp), (long long )tmp);
    __CrestLoad(24380, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(24379, 12, (long long )(tmp == - 1.0));
# 328 "../HPL_ptimer.c"
    if (tmp == - 1.0) {
      __CrestBranch(24382, 8279, 1);
      __CrestLoad(24384, (unsigned long )0, (long long )0);
      __CrestStore(24385, (unsigned long )(& i));
# 329 "../HPL_ptimer.c"
      i = 0;
      {
# 329 "../HPL_ptimer.c"
      while (1) {
        while_continue: ;
        {
        __CrestLoad(24388, (unsigned long )(& i), (long long )i);
        __CrestLoad(24387, (unsigned long )(& N), (long long )N);
        __CrestApply2(24386, 16, (long long )(i < (int )N));
# 329 "../HPL_ptimer.c"
        if (i < (int )N) {
          __CrestBranch(24389, 8284, 1);

        } else {
          __CrestBranch(24390, 8285, 0);
# 329 "../HPL_ptimer.c"
          goto while_break;
        }
        }
# 329 "../HPL_ptimer.c"
        mem_11 = TIMES + i;
# 329 "../HPL_ptimer.c"
        *mem_11 = - 1.0;
        __CrestLoad(24393, (unsigned long )(& i), (long long )i);
        __CrestLoad(24392, (unsigned long )0, (long long )1);
        __CrestApply2(24391, 0, (long long )(i + 1));
        __CrestStore(24394, (unsigned long )(& i));
# 329 "../HPL_ptimer.c"
        i ++;
      }
      while_break: ;
      }
# 329 "../HPL_ptimer.c"
      goto return_label;
    } else {
      __CrestBranch(24383, 8290, 0);
      __CrestLoad(24395, (unsigned long )0, (long long )0);
      __CrestStore(24396, (unsigned long )(& i));
# 331 "../HPL_ptimer.c"
      i = 0;
      {
# 331 "../HPL_ptimer.c"
      while (1) {
        while_continue___0: ;
        {
        __CrestLoad(24399, (unsigned long )(& i), (long long )i);
        __CrestLoad(24398, (unsigned long )(& N), (long long )N);
        __CrestApply2(24397, 16, (long long )(i < (int )N));
# 331 "../HPL_ptimer.c"
        if (i < (int )N) {
          __CrestBranch(24400, 8295, 1);

        } else {
          __CrestBranch(24401, 8296, 0);
# 331 "../HPL_ptimer.c"
          goto while_break___0;
        }
        }
# 331 "../HPL_ptimer.c"
        mem_12 = TIMES + i;
# 331 "../HPL_ptimer.c"
        *mem_12 = HPL_ptimer_wallsec[IBEG + (int const )i];
        __CrestLoad(24404, (unsigned long )(& i), (long long )i);
        __CrestLoad(24403, (unsigned long )0, (long long )1);
        __CrestApply2(24402, 0, (long long )(i + 1));
        __CrestStore(24405, (unsigned long )(& i));
# 331 "../HPL_ptimer.c"
        i ++;
      }
      while_break___0: ;
      }
    }
    }
  } else {
    __CrestBranch(24377, 8299, 0);
# 335 "../HPL_ptimer.c"
    tmp___0 = HPL_ptimer_cputime();
    __CrestClearStack(24406);
    {
    __CrestLoad(24409, (unsigned long )(& tmp___0), (long long )tmp___0);
    __CrestLoad(24408, (unsigned long )0, (long long )(- 1.0));
    __CrestApply2(24407, 12, (long long )(tmp___0 == - 1.0));
# 335 "../HPL_ptimer.c"
    if (tmp___0 == - 1.0) {
      __CrestBranch(24410, 8301, 1);
      __CrestLoad(24412, (unsigned long )0, (long long )0);
      __CrestStore(24413, (unsigned long )(& i));
# 336 "../HPL_ptimer.c"
      i = 0;
      {
# 336 "../HPL_ptimer.c"
      while (1) {
        while_continue___1: ;
        {
        __CrestLoad(24416, (unsigned long )(& i), (long long )i);
        __CrestLoad(24415, (unsigned long )(& N), (long long )N);
        __CrestApply2(24414, 16, (long long )(i < (int )N));
# 336 "../HPL_ptimer.c"
        if (i < (int )N) {
          __CrestBranch(24417, 8306, 1);

        } else {
          __CrestBranch(24418, 8307, 0);
# 336 "../HPL_ptimer.c"
          goto while_break___1;
        }
        }
# 336 "../HPL_ptimer.c"
        mem_13 = TIMES + i;
# 336 "../HPL_ptimer.c"
        *mem_13 = - 1.0;
        __CrestLoad(24421, (unsigned long )(& i), (long long )i);
        __CrestLoad(24420, (unsigned long )0, (long long )1);
        __CrestApply2(24419, 0, (long long )(i + 1));
        __CrestStore(24422, (unsigned long )(& i));
# 336 "../HPL_ptimer.c"
        i ++;
      }
      while_break___1: ;
      }
# 336 "../HPL_ptimer.c"
      goto return_label;
    } else {
      __CrestBranch(24411, 8312, 0);
      __CrestLoad(24423, (unsigned long )0, (long long )0);
      __CrestStore(24424, (unsigned long )(& i));
# 338 "../HPL_ptimer.c"
      i = 0;
      {
# 338 "../HPL_ptimer.c"
      while (1) {
        while_continue___2: ;
        {
        __CrestLoad(24427, (unsigned long )(& i), (long long )i);
        __CrestLoad(24426, (unsigned long )(& N), (long long )N);
        __CrestApply2(24425, 16, (long long )(i < (int )N));
# 338 "../HPL_ptimer.c"
        if (i < (int )N) {
          __CrestBranch(24428, 8317, 1);

        } else {
          __CrestBranch(24429, 8318, 0);
# 338 "../HPL_ptimer.c"
          goto while_break___2;
        }
        }
# 338 "../HPL_ptimer.c"
        mem_14 = TIMES + i;
# 338 "../HPL_ptimer.c"
        *mem_14 = HPL_ptimer_cpusec[IBEG + (int const )i];
        __CrestLoad(24432, (unsigned long )(& i), (long long )i);
        __CrestLoad(24431, (unsigned long )0, (long long )1);
        __CrestApply2(24430, 0, (long long )(i + 1));
        __CrestStore(24433, (unsigned long )(& i));
# 338 "../HPL_ptimer.c"
        i ++;
      }
      while_break___2: ;
      }
    }
    }
  }
  }
  __CrestLoad(24434, (unsigned long )0, (long long )0);
  __CrestStore(24435, (unsigned long )(& i));
# 343 "../HPL_ptimer.c"
  i = 0;
  {
# 343 "../HPL_ptimer.c"
  while (1) {
    while_continue___3: ;
    {
    __CrestLoad(24438, (unsigned long )(& i), (long long )i);
    __CrestLoad(24437, (unsigned long )(& N), (long long )N);
    __CrestApply2(24436, 16, (long long )(i < (int )N));
# 343 "../HPL_ptimer.c"
    if (i < (int )N) {
      __CrestBranch(24439, 8326, 1);

    } else {
      __CrestBranch(24440, 8327, 0);
# 343 "../HPL_ptimer.c"
      goto while_break___3;
    }
    }
    {
# 343 "../HPL_ptimer.c"
    mem_15 = TIMES + i;
    {
    __CrestLoad(24443, (unsigned long )0, (long long )0.0);
    __CrestLoad(24442, (unsigned long )mem_15, (long long )*mem_15);
    __CrestApply2(24441, 14, (long long )(0.0 > *mem_15));
# 343 "../HPL_ptimer.c"
    if (0.0 > *mem_15) {
      __CrestBranch(24444, 8331, 1);
# 343 "../HPL_ptimer.c"
      mem_16 = TIMES + i;
# 343 "../HPL_ptimer.c"
      *mem_16 = 0.0;
    } else {
      __CrestBranch(24445, 8332, 0);
# 343 "../HPL_ptimer.c"
      mem_17 = TIMES + i;
# 343 "../HPL_ptimer.c"
      mem_18 = TIMES + i;
# 343 "../HPL_ptimer.c"
      *mem_17 = *mem_18;
    }
    }
    }
    __CrestLoad(24448, (unsigned long )(& i), (long long )i);
    __CrestLoad(24447, (unsigned long )0, (long long )1);
    __CrestApply2(24446, 0, (long long )(i + 1));
    __CrestStore(24449, (unsigned long )(& i));
# 343 "../HPL_ptimer.c"
    i ++;
  }
  while_break___3: ;
  }
  {
  __CrestLoad(24452, (unsigned long )(& OPE), (long long )OPE);
  __CrestLoad(24451, (unsigned long )0, (long long )201U);
  __CrestApply2(24450, 12, (long long )((unsigned int const )OPE == 201U));
# 345 "../HPL_ptimer.c"
  if ((unsigned int const )OPE == 201U) {
    __CrestBranch(24453, 8336, 1);
    __CrestLoad(24455, (unsigned long )(& N), (long long )N);
    __CrestLoad(24456, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
    __CrestLoad(24457, (unsigned long )(& COMM), (long long )COMM);
# 346 "../HPL_ptimer.c"
    HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                 void const * ,
                                                                                 void * ,
                                                                                 HPL_T_TYPE const ))(& HPL_max),
                   COMM);
    __CrestClearStack(24458);
  } else {
    __CrestBranch(24454, 8337, 0);
    {
    __CrestLoad(24461, (unsigned long )(& OPE), (long long )OPE);
    __CrestLoad(24460, (unsigned long )0, (long long )202U);
    __CrestApply2(24459, 12, (long long )((unsigned int const )OPE == 202U));
# 347 "../HPL_ptimer.c"
    if ((unsigned int const )OPE == 202U) {
      __CrestBranch(24462, 8338, 1);
      __CrestLoad(24464, (unsigned long )(& N), (long long )N);
      __CrestLoad(24465, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
      __CrestLoad(24466, (unsigned long )(& COMM), (long long )COMM);
# 348 "../HPL_ptimer.c"
      HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                   void const * ,
                                                                                   void * ,
                                                                                   HPL_T_TYPE const ))(& HPL_min),
                     COMM);
      __CrestClearStack(24467);
    } else {
      __CrestBranch(24463, 8339, 0);
      {
      __CrestLoad(24470, (unsigned long )(& OPE), (long long )OPE);
      __CrestLoad(24469, (unsigned long )0, (long long )203U);
      __CrestApply2(24468, 12, (long long )((unsigned int const )OPE == 203U));
# 349 "../HPL_ptimer.c"
      if ((unsigned int const )OPE == 203U) {
        __CrestBranch(24471, 8340, 1);
        __CrestLoad(24473, (unsigned long )(& N), (long long )N);
        __CrestLoad(24474, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
        __CrestLoad(24475, (unsigned long )(& COMM), (long long )COMM);
# 350 "../HPL_ptimer.c"
        HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                     void const * ,
                                                                                     void * ,
                                                                                     HPL_T_TYPE const ))(& HPL_sum),
                       COMM);
        __CrestClearStack(24476);
      } else {
        __CrestBranch(24472, 8341, 0);
        __CrestLoad(24477, (unsigned long )(& N), (long long )N);
        __CrestLoad(24478, (unsigned long )0, (long long )((HPL_T_TYPE const )101));
        __CrestLoad(24479, (unsigned long )(& COMM), (long long )COMM);
# 352 "../HPL_ptimer.c"
        HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const )101, (void (* const )(int const ,
                                                                                     void const * ,
                                                                                     void * ,
                                                                                     HPL_T_TYPE const ))(& HPL_max),
                       COMM);
        __CrestClearStack(24480);
      }
      }
    }
    }
  }
  }
  __CrestLoad(24481, (unsigned long )(& tmpdis), (long long )tmpdis);
  __CrestStore(24482, (unsigned long )(& HPL_ptimer_disabled));
# 354 "../HPL_ptimer.c"
  HPL_ptimer_disabled = tmpdis;

  return_label:
  {
  __CrestReturn(24483);
# 256 "../HPL_ptimer.c"
  return;
  }
}
}
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 118 "../HPL_ptimer_cputime.c"
double HPL_ptimer_cputime(void)
{
  struct rusage ruse ;
  double __retres2 ;

  {
  __CrestCall(24484, 139);

  __CrestLoad(24485, (unsigned long )0, (long long )0);
# 125 "../HPL_ptimer_cputime.c"
  getrusage(0, & ruse);
  __CrestClearStack(24486);
# 126 "../HPL_ptimer_cputime.c"
  __retres2 = (double )ruse.ru_utime.tv_sec + (double )ruse.ru_utime.tv_usec / 1000000.0;
  {
  __CrestReturn(24487);
# 118 "../HPL_ptimer_cputime.c"
  return (__retres2);
  }
}
}
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1039 "//usr/include/mpich/mpi.h"
extern double MPI_Wtime(void) ;
# 92 "../HPL_ptimer_walltime.c"
double HPL_ptimer_walltime(void)
{
  double tmp ;

  {
  __CrestCall(24488, 140);
# 97 "../HPL_ptimer_walltime.c"
  tmp = MPI_Wtime();
  __CrestClearStack(24489);
  {
  __CrestReturn(24490);
# 97 "../HPL_ptimer_walltime.c"
  return (tmp);
  }
}
}
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
# 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
void __globinit_stdout(void)
{


  {
  __CrestInit();
}
}
