/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is true */

#line 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
typedef unsigned long size_t;
#line 131 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off_t;
#line 132 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __off64_t;
#line 44 "/usr/include/stdio.h"
struct _IO_FILE;
#line 48 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 154 "/usr/include/libio.h"
typedef void _IO_lock_t;
#line 160 "/usr/include/libio.h"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
#line 245 "/usr/include/libio.h"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
};
#line 79 "/usr/include/stdio.h"
typedef __gnuc_va_list va_list;
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
enum __anonenum_HPL_T_NORM_25 {
    HPL_NORM_A = 800,
    HPL_NORM_1 = 801,
    HPL_NORM_I = 802
} ;
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
typedef enum __anonenum_HPL_T_NORM_25 HPL_T_NORM;
#line 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_gesv.h"
enum __anonenum_HPL_T_FACT_27 {
    HPL_LEFT_LOOKING = 301,
    HPL_CROUT = 302,
    HPL_RIGHT_LOOKING = 303
} ;
#line 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_gesv.h"
typedef enum __anonenum_HPL_T_FACT_27 HPL_T_FACT;
#line 96 "//usr/include/mpich/mpi.h"
typedef int MPI_Datatype;
#line 265 "//usr/include/mpich/mpi.h"
typedef int MPI_Comm;
#line 429 "//usr/include/mpich/mpi.h"
typedef int MPI_Request;
#line 535 "//usr/include/mpich/mpi.h"
typedef long long MPI_Count;
#line 559 "//usr/include/mpich/mpi.h"
struct MPI_Status {
   int MPI_SOURCE ;
   int MPI_TAG ;
   int MPI_ERROR ;
   MPI_Count count ;
   int cancelled ;
   int abi_slush_fund[2] ;
};
#line 559 "//usr/include/mpich/mpi.h"
typedef struct MPI_Status MPI_Status;
#line 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
enum __anonenum_HPL_T_ORDER_29 {
    HPL_ROW_MAJOR = 201,
    HPL_COLUMN_MAJOR = 202
} ;
#line 61 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef enum __anonenum_HPL_T_ORDER_29 HPL_T_ORDER;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
struct HPL_S_grid {
   MPI_Comm all_comm ;
   MPI_Comm row_comm ;
   MPI_Comm col_comm ;
   HPL_T_ORDER order ;
   int iam ;
   int myrow ;
   int mycol ;
   int nprow ;
   int npcol ;
   int nprocs ;
   int row_ip2 ;
   int row_hdim ;
   int row_ip2m1 ;
   int row_mask ;
   int col_ip2 ;
   int col_hdim ;
   int col_ip2m1 ;
   int col_mask ;
};
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
struct HPL_S_palg;
#line 60
struct HPL_S_pmat;
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
struct HPL_S_panel {
   struct HPL_S_grid *grid ;
   struct HPL_S_palg *algo ;
   struct HPL_S_pmat *pmat ;
   double *A ;
   double *WORK ;
   double *L2 ;
   double *L1 ;
   double *DPIV ;
   double *DINFO ;
   double *U ;
   int *IWORK ;
   void ***buffers[2] ;
   int counts[2] ;
   MPI_Datatype dtypes[2] ;
   MPI_Request request[1] ;
   MPI_Status status[1] ;
   int nb ;
   int jb ;
   int m ;
   int n ;
   int ia ;
   int ja ;
   int mp ;
   int nq ;
   int ii ;
   int jj ;
   int lda ;
   int prow ;
   int pcol ;
   int msgid ;
   int ldl2 ;
   int len ;
};
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
typedef struct HPL_S_panel HPL_T_panel;
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
enum __anonenum_HPL_T_TOP_30 {
    HPL_1RING = 401,
    HPL_1RING_M = 402,
    HPL_2RING = 403,
    HPL_2RING_M = 404,
    HPL_BLONG = 405,
    HPL_BLONG_M = 406
} ;
#line 60 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
typedef enum __anonenum_HPL_T_TOP_30 HPL_T_TOP;
#line 68 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
enum __anonenum_HPL_T_SWAP_31 {
    HPL_SWAP00 = 451,
    HPL_SWAP01 = 452,
    HPL_SW_MIX = 453,
    HPL_NO_SWP = 499
} ;
#line 68 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef enum __anonenum_HPL_T_SWAP_31 HPL_T_SWAP;
#line 77 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
struct HPL_S_palg {
   HPL_T_TOP btopo ;
   int depth ;
   int nbdiv ;
   int nbmin ;
   HPL_T_FACT pfact ;
   HPL_T_FACT rfact ;
   void (*pffun)(HPL_T_panel * , int const    , int const    , int const    , double * ) ;
   void (*rffun)(HPL_T_panel * , int const    , int const    , int const    , double * ) ;
   void (*upfun)(HPL_T_panel * , int * , HPL_T_panel * , int const    ) ;
   HPL_T_SWAP fswap ;
   int fsthr ;
   int equil ;
   int align ;
};
#line 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
struct HPL_S_pmat {
   double *A ;
   double *X ;
   int n ;
   int nb ;
   int ld ;
   int mp ;
   int nq ;
   int info ;
};
#line 533 "//usr/include/mpich/mpi.h"
typedef long MPI_Aint;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef struct HPL_S_grid HPL_T_grid;
#line 59
enum __anonenum_HPL_T_TYPE_28 {
    HPL_INT = 100,
    HPL_DOUBLE = 101
} ;
#line 59 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
typedef enum __anonenum_HPL_T_TYPE_28 HPL_T_TYPE;
#line 77 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef struct HPL_S_palg HPL_T_palg;
#line 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
typedef struct HPL_S_pmat HPL_T_pmat;
#line 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
enum __anonenum_HPL_T_MACH_26 {
    HPL_MACH_EPS = 900,
    HPL_MACH_SFMIN = 901,
    HPL_MACH_BASE = 902,
    HPL_MACH_PREC = 903,
    HPL_MACH_MLEN = 904,
    HPL_MACH_RND = 905,
    HPL_MACH_EMIN = 906,
    HPL_MACH_RMIN = 907,
    HPL_MACH_EMAX = 908,
    HPL_MACH_RMAX = 909
} ;
#line 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
typedef enum __anonenum_HPL_T_MACH_26 HPL_T_MACH;
#line 59 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
enum HPL_ORDER {
    HplRowMajor = 101,
    HplColumnMajor = 102
} ;
#line 61
enum HPL_TRANS {
    HplNoTrans = 111,
    HplTrans = 112,
    HplConjTrans = 113
} ;
#line 63
enum HPL_UPLO {
    HplUpper = 121,
    HplLower = 122
} ;
#line 65
enum HPL_DIAG {
    HplNonUnit = 131,
    HplUnit = 132
} ;
#line 67
enum HPL_SIDE {
    HplLeft = 141,
    HplRight = 142
} ;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
enum __anonenum_HPL_T_TIME_32 {
    HPL_WALL_TIME = 101,
    HPL_CPU_TIME = 102
} ;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
typedef enum __anonenum_HPL_T_TIME_32 HPL_T_TIME;
#line 139 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __time_t;
#line 141 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __suseconds_t;
#line 175 "/usr/include/x86_64-linux-gnu/bits/types.h"
typedef long __syscall_slong_t;
#line 30 "/usr/include/x86_64-linux-gnu/bits/time.h"
struct timeval {
   __time_t tv_sec ;
   __suseconds_t tv_usec ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_35 {
   long ru_maxrss ;
   __syscall_slong_t __ru_maxrss_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_36 {
   long ru_ixrss ;
   __syscall_slong_t __ru_ixrss_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_37 {
   long ru_idrss ;
   __syscall_slong_t __ru_idrss_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_38 {
   long ru_isrss ;
   __syscall_slong_t __ru_isrss_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_39 {
   long ru_minflt ;
   __syscall_slong_t __ru_minflt_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_40 {
   long ru_majflt ;
   __syscall_slong_t __ru_majflt_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_41 {
   long ru_nswap ;
   __syscall_slong_t __ru_nswap_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_42 {
   long ru_inblock ;
   __syscall_slong_t __ru_inblock_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_43 {
   long ru_oublock ;
   __syscall_slong_t __ru_oublock_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_44 {
   long ru_msgsnd ;
   __syscall_slong_t __ru_msgsnd_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_45 {
   long ru_msgrcv ;
   __syscall_slong_t __ru_msgrcv_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_46 {
   long ru_nsignals ;
   __syscall_slong_t __ru_nsignals_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_47 {
   long ru_nvcsw ;
   __syscall_slong_t __ru_nvcsw_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
union __anonunion____missing_field_name_48 {
   long ru_nivcsw ;
   __syscall_slong_t __ru_nivcsw_word ;
};
#line 187 "/usr/include/x86_64-linux-gnu/bits/resource.h"
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   union __anonunion____missing_field_name_35 __annonCompField1 ;
   union __anonunion____missing_field_name_36 __annonCompField2 ;
   union __anonunion____missing_field_name_37 __annonCompField3 ;
   union __anonunion____missing_field_name_38 __annonCompField4 ;
   union __anonunion____missing_field_name_39 __annonCompField5 ;
   union __anonunion____missing_field_name_40 __annonCompField6 ;
   union __anonunion____missing_field_name_41 __annonCompField7 ;
   union __anonunion____missing_field_name_42 __annonCompField8 ;
   union __anonunion____missing_field_name_43 __annonCompField9 ;
   union __anonunion____missing_field_name_44 __annonCompField10 ;
   union __anonunion____missing_field_name_45 __annonCompField11 ;
   union __anonunion____missing_field_name_46 __annonCompField12 ;
   union __anonunion____missing_field_name_47 __annonCompField13 ;
   union __anonunion____missing_field_name_48 __annonCompField14 ;
};
#line 43 "/usr/include/x86_64-linux-gnu/sys/resource.h"
typedef int __rusage_who_t;
#line 55 "/usr/include/x86_64-linux-gnu/sys/time.h"
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
#line 61 "/usr/include/x86_64-linux-gnu/sys/time.h"
typedef struct timezone * __restrict  __timezone_ptr_t;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
enum __anonenum_HPL_T_PTIME_33 {
    HPL_WALL_PTIME = 101,
    HPL_CPU_PTIME = 102
} ;
#line 67 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
typedef enum __anonenum_HPL_T_PTIME_33 HPL_T_PTIME;
#line 70
enum __anonenum_HPL_T_PTIME_OP_34 {
    HPL_AMAX_PTIME = 201,
    HPL_AMIN_PTIME = 202,
    HPL_SUM_PTIME = 203
} ;
#line 70 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
typedef enum __anonenum_HPL_T_PTIME_OP_34 HPL_T_PTIME_OP;
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 103 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlacpy(int const   M , int const   N , double const   *A , int const   LDA ,
                double *B , int const   LDB ) ;
#line 72 "../HPL_dlacpy.c"
void HPL_dlacpy(int const   M , int const   N , double const   *A , int const   LDA ,
                double *B , int const   LDB ) 
{ 
  double const   *A0 ;
  double const   *A1 ;
  double *B0 ;
  double *B1 ;
  int incA ;
  int incB ;
  int incA0 ;
  int incB0 ;
  int mu ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 137
  A0 = A;
#line 137
  A1 = A + LDA;
#line 138
  B0 = B;
#line 138
  B1 = B + LDB;
#line 145
  incA = (int )(((unsigned int )LDA << 1) - (unsigned int )M);
#line 145
  incB = (int )(((unsigned int )LDB << 1) - (unsigned int )M);
#line 145
  incA0 = (int )((unsigned int )LDA - (unsigned int )M);
#line 145
  incB0 = (int )((unsigned int )LDB - (unsigned int )M);
#line 157
  if (M <= 0) {
#line 157
    return;
  } else
#line 157
  if (N <= 0) {
#line 157
    return;
  }
#line 162
  mu = (int )(((unsigned int )M >> 2) << 2);
#line 164
  nu = (int )(((unsigned int )N >> 1) << 1);
#line 167
  j = 0;
#line 167
  while (j < nu) {
#line 169
    i = 0;
#line 169
    while (i < mu) {
#line 174
      *(B0 + 0) = (double )*(A0 + 0);
#line 174
      *(B1 + 0) = (double )*(A1 + 0);
#line 184
      *(B0 + 1) = (double )*(A0 + 1);
#line 184
      *(B1 + 1) = (double )*(A1 + 1);
#line 195
      *(B0 + 2) = (double )*(A0 + 2);
#line 195
      *(B1 + 2) = (double )*(A1 + 2);
#line 195
      *(B0 + 3) = (double )*(A0 + 3);
#line 195
      *(B1 + 3) = (double )*(A1 + 3);
#line 279
      A0 += 4;
#line 279
      B0 += 4;
#line 280
      A1 += 4;
#line 280
      B1 += 4;
#line 169
      i += 4;
    }
#line 289
    i = mu;
#line 289
    while (i < (int )M) {
#line 294
      *B0 = (double )*A0;
#line 294
      B0 ++;
#line 294
      A0 ++;
#line 294
      *B1 = (double )*A1;
#line 294
      B1 ++;
#line 294
      A1 ++;
#line 289
      i ++;
    }
#line 304
    A0 += incA;
#line 304
    B0 += incB;
#line 304
    A1 += incA;
#line 304
    B1 += incB;
#line 167
    j += 2;
  }
#line 311
  j = nu;
#line 311
  while (j < (int )N) {
#line 313
    i = 0;
#line 313
    while (i < mu) {
#line 316
      *(B0 + 0) = (double )*(A0 + 0);
#line 318
      *(B0 + 1) = (double )*(A0 + 1);
#line 321
      *(B0 + 2) = (double )*(A0 + 2);
#line 321
      *(B0 + 3) = (double )*(A0 + 3);
#line 313
      i += 4;
#line 313
      B0 += 4;
#line 313
      A0 += 4;
    }
#line 337
    i = mu;
#line 337
    while (i < (int )M) {
#line 337
      *B0 = (double )*A0;
#line 337
      i ++;
#line 337
      B0 ++;
#line 337
      A0 ++;
    }
#line 311
    j ++;
#line 311
    B0 += incB0;
#line 311
    A0 += incA0;
  }
#line 343
  return;
}
}
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 112 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlatcpy(int const   M , int const   N , double const   *A , int const   LDA ,
                 double *B , int const   LDB ) ;
#line 72 "../HPL_dlatcpy.c"
void HPL_dlatcpy(int const   M , int const   N , double const   *A , int const   LDA ,
                 double *B , int const   LDB ) 
{ 
  double const   *A0 ;
  double const   *A1 ;
  double *B0 ;
  double *B1 ;
  int incA ;
  int incB ;
  int incA0 ;
  int incB0 ;
  int mu ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 137
  A0 = A;
#line 137
  A1 = A + 1;
#line 138
  B0 = B;
#line 138
  B1 = B + LDB;
#line 145
  incA = (int )(- M * LDA + (int const   )(1 << 1));
#line 145
  incB = (int )(((unsigned int )LDB << 1) - (unsigned int )M);
#line 145
  incA0 = (int )(- M * LDA + 1);
#line 145
  incB0 = (int )(LDB - M);
#line 155
  if (M <= 0) {
#line 155
    return;
  } else
#line 155
  if (N <= 0) {
#line 155
    return;
  }
#line 160
  mu = (int )(((unsigned int )M >> 2) << 2);
#line 162
  nu = (int )(((unsigned int )N >> 1) << 1);
#line 165
  j = 0;
#line 165
  while (j < nu) {
#line 167
    i = 0;
#line 167
    while (i < mu) {
#line 172
      *(B0 + 0) = (double )*A0;
#line 172
      A0 += LDA;
#line 172
      *(B1 + 0) = (double )*A1;
#line 172
      A1 += LDA;
#line 183
      *(B0 + 1) = (double )*A0;
#line 183
      A0 += LDA;
#line 183
      *(B1 + 1) = (double )*A1;
#line 183
      A1 += LDA;
#line 195
      *(B0 + 2) = (double )*A0;
#line 195
      A0 += LDA;
#line 195
      *(B1 + 2) = (double )*A1;
#line 195
      A1 += LDA;
#line 196
      *(B0 + 3) = (double )*A0;
#line 196
      A0 += LDA;
#line 196
      *(B1 + 3) = (double )*A1;
#line 196
      A1 += LDA;
#line 330
      B0 += 4;
#line 330
      B1 += 4;
#line 167
      i += 4;
    }
#line 337
    i = mu;
#line 337
    while (i < (int )M) {
#line 342
      *B0 = (double )*A0;
#line 342
      B0 ++;
#line 342
      A0 += LDA;
#line 342
      *B1 = (double )*A1;
#line 342
      B1 ++;
#line 342
      A1 += LDA;
#line 337
      i ++;
    }
#line 352
    A0 += incA;
#line 352
    A1 += incA;
#line 352
    B0 += incB;
#line 352
    B1 += incB;
#line 165
    j += 2;
  }
#line 359
  j = nu;
#line 359
  while (j < (int )N) {
#line 361
    i = 0;
#line 361
    while (i < mu) {
#line 363
      *(B0 + 0) = (double )*A0;
#line 363
      A0 += LDA;
#line 365
      *(B0 + 1) = (double )*A0;
#line 365
      A0 += LDA;
#line 368
      *(B0 + 2) = (double )*A0;
#line 368
      A0 += LDA;
#line 368
      *(B0 + 3) = (double )*A0;
#line 368
      A0 += LDA;
#line 361
      i += 4;
#line 361
      B0 += 4;
    }
#line 392
    i = mu;
#line 392
    while (i < (int )M) {
#line 392
      *B0 = (double )*A0;
#line 392
      i ++;
#line 392
      B0 ++;
#line 392
      A0 += LDA;
    }
#line 359
    j ++;
#line 359
    B0 += incB0;
#line 359
    A0 += incA0;
  }
#line 398
  return;
}
}
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 242 "/usr/include/stdio.h"
extern int fflush(FILE *__stream ) ;
#line 356
extern int fprintf(FILE * __restrict  __stream , char const   * __restrict  __format 
                   , ...) ;
#line 379
extern  __attribute__((__nothrow__)) int vsprintf(char * __restrict  __s , char const   * __restrict  __format ,
                                                  __gnuc_va_list __arg ) ;
#line 82 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_fprintf(FILE *STREAM , char const   *FORM  , ...) ;
#line 53 "../HPL_fprintf.c"
void HPL_fprintf(FILE *STREAM , char const   *FORM  , ...) 
{ 
  va_list argptr ;
  char cline[256] ;

  {
#line 100
  __builtin_va_start(argptr, FORM);
#line 106
  vsprintf((char * __restrict  )(cline), (char const   * __restrict  )FORM, argptr);
#line 107
  __builtin_va_end(argptr);
#line 109
  fprintf((FILE * __restrict  )STREAM, (char const   * __restrict  )"%s", cline);
#line 110
  fflush(STREAM);
#line 114
  return;
}
}
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 88 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_warn(FILE *STREAM , int LINE , char const   *SRNAME , char const   *FORM 
              , ...) ;
#line 53 "../HPL_warn.c"
void HPL_warn(FILE *STREAM , int LINE , char const   *SRNAME , char const   *FORM 
              , ...) 
{ 
  va_list argptr ;
  char cline[128] ;

  {
#line 112
  __builtin_va_start(argptr, FORM);
#line 120
  vsprintf((char * __restrict  )(cline), (char const   * __restrict  )FORM, argptr);
#line 121
  __builtin_va_end(argptr);
#line 125
  if (LINE <= 0) {
#line 126
    HPL_fprintf(STREAM, "%s %s:\n>>> %s <<<\n\n", "HPL ERROR in function", SRNAME,
                cline);
  } else {
#line 129
    HPL_fprintf(STREAM, "%s %d %s %s:\n>>> %s <<<\n\n", "HPL ERROR on line", LINE,
                "of function", SRNAME, cline);
  }
#line 134
  return;
}
}
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 170 "/usr/include/stdio.h"
extern struct _IO_FILE *stderr ;
#line 543 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__, __noreturn__)) void ( __attribute__((__leaf__)) exit)(int __status ) ;
#line 96 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_abort(int LINE , char const   *SRNAME , char const   *FORM  , ...) ;
#line 53 "../HPL_abort.c"
void HPL_abort(int LINE , char const   *SRNAME , char const   *FORM  , ...) 
{ 
  va_list argptr ;
  char cline[128] ;

  {
#line 107
  __builtin_va_start(argptr, FORM);
#line 114
  vsprintf((char * __restrict  )(cline), (char const   * __restrict  )FORM, argptr);
#line 115
  __builtin_va_end(argptr);
#line 119
  if (LINE <= 0) {
#line 120
    HPL_fprintf(stderr, "%s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR in function",
                SRNAME, cline);
  } else {
#line 123
    HPL_fprintf(stderr, "%s %d %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR on line",
                LINE, "of function", SRNAME, cline);
  }
#line 125
  exit(0);
}
}
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 121 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
void HPL_dlaprnt(int const   M , int const   N , double *A , int const   IA , int const   JA ,
                 int const   LDA , char const   *CMATNM ) ;
#line 53 "../HPL_dlaprnt.c"
void HPL_dlaprnt(int const   M , int const   N , double *A , int const   IA , int const   JA ,
                 int const   LDA , char const   *CMATNM ) 
{ 
  int i ;
  int j ;

  {
#line 119
  j = 0;
#line 119
  while (j < (int )N) {
#line 121
    i = 0;
#line 121
    while (i < (int )M) {
#line 123
      HPL_fprintf(stderr, "%s(%6d,%6d)=%30.18f\n", CMATNM, IA + (int const   )i, JA + (int const   )j,
                  *((A + i) + j * (int )LDA));
#line 121
      i ++;
    }
#line 119
    j ++;
  }
#line 130
  return;
}
}
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 466 "/usr/include/stdlib.h"
extern  __attribute__((__nothrow__)) void *( __attribute__((__leaf__)) malloc)(size_t __size )  __attribute__((__malloc__)) ;
#line 483
extern  __attribute__((__nothrow__)) void ( __attribute__((__leaf__)) free)(void *__ptr ) ;
#line 105 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern int cblas_idamax(int const    , double const   * , int const    ) ;
#line 131 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
double HPL_dlange(HPL_T_NORM const   NORM , int const   M , int const   N , double const   *A ,
                  int const   LDA ) ;
#line 53 "../HPL_dlange.c"
double HPL_dlange(HPL_T_NORM const   NORM , int const   M , int const   N , double const   *A ,
                  int const   LDA ) 
{ 
  double s ;
  double v0 ;
  double *work ;
  int i ;
  int j ;
  double tmp___0 ;
  double tmp___1 ;
  void *tmp___2 ;
  double tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  double tmp___6 ;
  int tmp___7 ;

  {
#line 114
  v0 = 0.0;
#line 114
  work = (double *)((void *)0);
#line 119
  if (M <= 0) {
#line 119
    return (0.0);
  } else
#line 119
  if (N <= 0) {
#line 119
    return (0.0);
  }
#line 121
  if ((unsigned int const   )NORM == 800U) {
#line 126
    j = 0;
#line 126
    while (j < (int )N) {
#line 128
      i = 0;
#line 128
      while (i < (int )M) {
#line 128
        if (*A < (double const   )0) {
#line 128
          tmp___1 = (double )(- *A);
        } else {
#line 128
          tmp___1 = (double )*A;
        }
#line 128
        if (v0 > tmp___1) {
#line 128
          v0 = v0;
        } else {
#line 128
          if (*A < (double const   )0) {
#line 128
            tmp___0 = (double )(- *A);
          } else {
#line 128
            tmp___0 = (double )*A;
          }
#line 128
          v0 = tmp___0;
        }
#line 128
        A ++;
#line 128
        i ++;
      }
#line 129
      A += LDA - M;
#line 126
      j ++;
    }
  } else
#line 132
  if ((unsigned int const   )NORM == 801U) {
#line 137
    tmp___2 = malloc((unsigned long )N * sizeof(double ));
#line 137
    work = (double *)tmp___2;
#line 138
    if ((unsigned long )work == (unsigned long )((void *)0)) {
#line 139
      HPL_abort(139, "HPL_dlange", "Memory allocation failed");
    } else {
#line 142
      j = 0;
#line 142
      while (j < (int )N) {
#line 144
        s = 0.0;
#line 145
        i = 0;
#line 145
        while (i < (int )M) {
#line 145
          if (*A < (double const   )0) {
#line 145
            tmp___3 = (double )(- *A);
          } else {
#line 145
            tmp___3 = (double )*A;
          }
#line 145
          s += tmp___3;
#line 145
          A ++;
#line 145
          i ++;
        }
#line 146
        *(work + j) = s;
#line 146
        A += LDA - M;
#line 142
        j ++;
      }
#line 151
      tmp___4 = cblas_idamax(N, (double const   *)work, (int const   )1);
#line 151
      v0 = *(work + tmp___4);
#line 151
      if (v0 < (double )0) {
#line 151
        v0 = - v0;
      } else {
#line 151
        v0 = v0;
      }
#line 152
      if (work) {
#line 152
        free((void *)work);
      }
    }
  } else
#line 155
  if ((unsigned int const   )NORM == 802U) {
#line 160
    tmp___5 = malloc((unsigned long )M * sizeof(double ));
#line 160
    work = (double *)tmp___5;
#line 161
    if ((unsigned long )work == (unsigned long )((void *)0)) {
#line 162
      HPL_abort(162, "HPL_dlange", "Memory allocation failed");
    } else {
#line 165
      i = 0;
#line 165
      while (i < (int )M) {
#line 165
        *(work + i) = 0.0;
#line 165
        i ++;
      }
#line 167
      j = 0;
#line 167
      while (j < (int )N) {
#line 169
        i = 0;
#line 169
        while (i < (int )M) {
#line 169
          if (*A < (double const   )0) {
#line 169
            tmp___6 = (double )(- *A);
          } else {
#line 169
            tmp___6 = (double )*A;
          }
#line 169
          *(work + i) += tmp___6;
#line 169
          A ++;
#line 169
          i ++;
        }
#line 170
        A += LDA - M;
#line 167
        j ++;
      }
#line 175
      tmp___7 = cblas_idamax(M, (double const   *)work, (int const   )1);
#line 175
      v0 = *(work + tmp___7);
#line 175
      if (v0 < (double )0) {
#line 175
        v0 = - v0;
      } else {
#line 175
        v0 = v0;
      }
#line 176
      if (work) {
#line 176
        free((void *)work);
      }
    }
  }
#line 180
  return (v0);
}
}
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 842 "//usr/include/mpich/mpi.h"
extern int MPI_Send(void const   *buf , int count , MPI_Datatype datatype , int dest ,
                    int tag , MPI_Comm comm ) ;
#line 844
extern int MPI_Recv(void *buf , int count , MPI_Datatype datatype , int source , int tag ,
                    MPI_Comm comm , MPI_Status *status ) ;
#line 878
extern int MPI_Iprobe(int source , int tag , MPI_Comm comm , int *flag , MPI_Status *status ) ;
#line 921
extern int MPI_Type_free(MPI_Datatype *datatype ) ;
#line 122 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_packL(HPL_T_panel *PANEL , int const   INDEX , int const   LEN , int const   IBUF ) ;
#line 134
int HPL_binit_1ring(HPL_T_panel *PANEL ) ;
#line 135
int HPL_bcast_1ring(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 136
int HPL_bwait_1ring(HPL_T_panel *PANEL ) ;
#line 59 "../HPL_1ring.c"
int HPL_binit_1ring(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 77
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 77
    return (1);
  }
#line 78
  if ((PANEL->grid)->npcol <= 1) {
#line 78
    return (1);
  }
#line 89
  ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )0);
#line 91
  if (ierr == 0) {
#line 91
    tmp = 1;
  } else {
#line 91
    tmp = 0;
  }
#line 91
  return (tmp);
}
}
#line 117 "../HPL_1ring.c"
int HPL_bcast_1ring(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;

  {
#line 137
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 137
    *IFLAG = 1;
#line 137
    return (1);
  }
#line 138
  size = (PANEL->grid)->npcol;
#line 138
  if (size <= 1) {
#line 139
    *IFLAG = 1;
#line 139
    return (1);
  }
#line 147
  rank = (PANEL->grid)->mycol;
#line 147
  comm = (PANEL->grid)->row_comm;
#line 148
  root = PANEL->pcol;
#line 148
  msgid = PANEL->msgid;
#line 150
  if (rank == root) {
#line 152
    if (rank != size - 1) {
#line 152
      tmp = rank + 1;
    } else {
#line 152
      tmp = 0;
    }
#line 152
    ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    tmp, msgid, comm);
  } else {
#line 157
    if (rank != 0) {
#line 157
      prev = rank - 1;
    } else {
#line 157
      prev = size - 1;
    }
#line 159
    ierr = MPI_Iprobe(prev, msgid, comm, & go, & PANEL->status[0]);
#line 161
    if (ierr == 0) {
#line 163
      if (go != 0) {
#line 165
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        prev, msgid, comm, & PANEL->status[0]);
#line 167
        if (rank != size - 1) {
#line 167
          next = rank + 1;
        } else {
#line 167
          next = 0;
        }
#line 168
        if (ierr == 0) {
#line 168
          if (next != root) {
#line 170
            ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                            next, msgid, comm);
          }
        }
      } else {
#line 174
        *IFLAG = 2;
#line 174
        return (*IFLAG);
      }
    }
  }
#line 181
  if (ierr == 0) {
#line 181
    *IFLAG = 1;
  } else {
#line 181
    *IFLAG = 0;
  }
#line 183
  return (*IFLAG);
}
}
#line 187 "../HPL_1ring.c"
int HPL_bwait_1ring(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 205
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 205
    return (1);
  }
#line 206
  if ((PANEL->grid)->npcol <= 1) {
#line 206
    return (1);
  }
#line 211
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
#line 212
  if (ierr == 0) {
#line 212
    tmp = 1;
  } else {
#line 212
    tmp = 0;
  }
#line 212
  return (tmp);
}
}
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 138 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_1rinM(HPL_T_panel *PANEL ) ;
#line 139
int HPL_bcast_1rinM(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 140
int HPL_bwait_1rinM(HPL_T_panel *PANEL ) ;
#line 59 "../HPL_1rinM.c"
int HPL_binit_1rinM(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 77
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 77
    return (1);
  }
#line 78
  if ((PANEL->grid)->npcol <= 1) {
#line 78
    return (1);
  }
#line 89
  ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )0);
#line 91
  if (ierr == 0) {
#line 91
    tmp = 1;
  } else {
#line 91
    tmp = 0;
  }
#line 91
  return (tmp);
}
}
#line 117 "../HPL_1rinM.c"
int HPL_bcast_1rinM(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;

  {
#line 137
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 137
    *IFLAG = 1;
#line 137
    return (1);
  }
#line 138
  size = (PANEL->grid)->npcol;
#line 138
  if (size <= 1) {
#line 139
    *IFLAG = 1;
#line 139
    return (1);
  }
#line 147
  rank = (PANEL->grid)->mycol;
#line 147
  comm = (PANEL->grid)->row_comm;
#line 148
  root = PANEL->pcol;
#line 148
  msgid = PANEL->msgid;
#line 149
  if (rank != size - 1) {
#line 149
    next = rank + 1;
  } else {
#line 149
    next = 0;
  }
#line 151
  if (rank == root) {
#line 153
    ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
#line 154
    if (ierr == 0) {
#line 154
      if (size > 2) {
#line 156
        if (next != size - 1) {
#line 156
          tmp = next + 1;
        } else {
#line 156
          tmp = 0;
        }
#line 156
        ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        tmp, msgid, comm);
      }
    }
  } else {
#line 162
    if (rank != 0) {
#line 162
      prev = rank - 1;
    } else {
#line 162
      prev = size - 1;
    }
#line 163
    if (size > 2) {
#line 163
      if (prev != 0) {
#line 163
        tmp___0 = prev - 1;
      } else {
#line 163
        tmp___0 = size - 1;
      }
#line 163
      if (tmp___0 == root) {
#line 164
        partner = root;
      } else {
#line 165
        partner = prev;
      }
    } else {
#line 165
      partner = prev;
    }
#line 167
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
#line 169
    if (ierr == 0) {
#line 171
      if (go != 0) {
#line 173
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
#line 175
        if (ierr == 0) {
#line 175
          if (prev != root) {
#line 175
            if (next != root) {
#line 178
              ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0],
                              PANEL->dtypes[0], next, msgid, comm);
            }
          }
        }
      } else {
#line 182
        *IFLAG = 2;
#line 182
        return (*IFLAG);
      }
    }
  }
#line 189
  if (ierr == 0) {
#line 189
    *IFLAG = 1;
  } else {
#line 189
    *IFLAG = 0;
  }
#line 191
  return (*IFLAG);
}
}
#line 195 "../HPL_1rinM.c"
int HPL_bwait_1rinM(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 213
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 213
    return (1);
  }
#line 214
  if ((PANEL->grid)->npcol <= 1) {
#line 214
    return (1);
  }
#line 219
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
#line 220
  if (ierr == 0) {
#line 220
    tmp = 1;
  } else {
#line 220
    tmp = 0;
  }
#line 220
  return (tmp);
}
}
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_2ring(HPL_T_panel *PANEL ) ;
#line 143
int HPL_bcast_2ring(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 144
int HPL_bwait_2ring(HPL_T_panel *PANEL ) ;
#line 59 "../HPL_2ring.c"
int HPL_binit_2ring(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 77
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 77
    return (1);
  }
#line 78
  if ((PANEL->grid)->npcol <= 1) {
#line 78
    return (1);
  }
#line 89
  ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )0);
#line 91
  if (ierr == 0) {
#line 91
    tmp = 1;
  } else {
#line 91
    tmp = 0;
  }
#line 91
  return (tmp);
}
}
#line 117 "../HPL_2ring.c"
int HPL_bcast_2ring(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int rank ;
  int roo2 ;
  int root ;
  int size ;

  {
#line 137
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 137
    *IFLAG = 1;
#line 137
    return (1);
  }
#line 138
  size = (PANEL->grid)->npcol;
#line 138
  if (size <= 1) {
#line 139
    *IFLAG = 1;
#line 139
    return (1);
  }
#line 147
  rank = (PANEL->grid)->mycol;
#line 147
  comm = (PANEL->grid)->row_comm;
#line 148
  root = PANEL->pcol;
#line 148
  msgid = PANEL->msgid;
#line 149
  if (rank != size - 1) {
#line 149
    next = rank + 1;
  } else {
#line 149
    next = 0;
  }
#line 149
  roo2 = (size + 1) >> 1;
#line 150
  if (root + roo2 < size) {
#line 150
    roo2 = root + roo2;
  } else {
#line 150
    roo2 = (root + roo2) - size;
  }
#line 152
  if (rank == root) {
#line 154
    ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
#line 155
    if (ierr == 0) {
#line 155
      if (size > 2) {
#line 157
        ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        roo2, msgid, comm);
      }
    }
  } else {
#line 163
    if (rank != 0) {
#line 163
      partner = rank - 1;
    } else {
#line 163
      partner = size - 1;
    }
#line 164
    if (partner == root) {
#line 164
      partner = root;
    } else
#line 164
    if (rank == roo2) {
#line 164
      partner = root;
    }
#line 166
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
#line 168
    if (ierr == 0) {
#line 170
      if (go != 0) {
#line 172
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
#line 174
        if (ierr == 0) {
#line 174
          if (next != roo2) {
#line 174
            if (next != root) {
#line 177
              ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0],
                              PANEL->dtypes[0], next, msgid, comm);
            }
          }
        }
      } else {
#line 181
        *IFLAG = 2;
#line 181
        return (*IFLAG);
      }
    }
  }
#line 188
  if (ierr == 0) {
#line 188
    *IFLAG = 1;
  } else {
#line 188
    *IFLAG = 0;
  }
#line 190
  return (*IFLAG);
}
}
#line 194 "../HPL_2ring.c"
int HPL_bwait_2ring(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 212
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 212
    return (1);
  }
#line 213
  if ((PANEL->grid)->npcol <= 1) {
#line 213
    return (1);
  }
#line 218
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
#line 220
  if (ierr == 0) {
#line 220
    tmp = 1;
  } else {
#line 220
    tmp = 0;
  }
#line 220
  return (tmp);
}
}
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 146 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_2rinM(HPL_T_panel *PANEL ) ;
#line 147
int HPL_bcast_2rinM(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 148
int HPL_bwait_2rinM(HPL_T_panel *PANEL ) ;
#line 59 "../HPL_2rinM.c"
int HPL_binit_2rinM(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 77
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 77
    return (1);
  }
#line 78
  if ((PANEL->grid)->npcol <= 1) {
#line 78
    return (1);
  }
#line 89
  ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )0);
#line 91
  if (ierr == 0) {
#line 91
    tmp = 1;
  } else {
#line 91
    tmp = 0;
  }
#line 91
  return (tmp);
}
}
#line 117 "../HPL_2rinM.c"
int HPL_bcast_2rinM(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int ierr ;
  int go ;
  int next ;
  int msgid ;
  int partner ;
  int prev ;
  int rank ;
  int roo2 ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 137
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 137
    *IFLAG = 1;
#line 137
    return (1);
  }
#line 138
  size = (PANEL->grid)->npcol;
#line 138
  if (size <= 1) {
#line 139
    *IFLAG = 1;
#line 139
    return (1);
  }
#line 147
  rank = (PANEL->grid)->mycol;
#line 147
  comm = (PANEL->grid)->row_comm;
#line 148
  root = PANEL->pcol;
#line 148
  msgid = PANEL->msgid;
#line 149
  if (rank != size - 1) {
#line 149
    next = rank + 1;
  } else {
#line 149
    next = 0;
  }
#line 149
  roo2 = (size + 1) >> 1;
#line 150
  if (root + roo2 < size) {
#line 150
    roo2 = root + roo2;
  } else {
#line 150
    roo2 = (root + roo2) - size;
  }
#line 152
  if (rank == root) {
#line 154
    ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                    next, msgid, comm);
#line 156
    if (ierr == 0) {
#line 156
      if (size > 2) {
#line 158
        if (next != size - 1) {
#line 158
          tmp___0 = next + 1;
        } else {
#line 158
          tmp___0 = 0;
        }
#line 158
        if (tmp___0 != roo2) {
#line 160
          if (next != size - 1) {
#line 160
            tmp = next + 1;
          } else {
#line 160
            tmp = 0;
          }
#line 160
          ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          tmp, msgid, comm);
        }
#line 164
        if (ierr == 0) {
#line 166
          ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          roo2, msgid, comm);
        }
      }
    }
  } else {
#line 173
    if (rank != 0) {
#line 173
      prev = rank - 1;
    } else {
#line 173
      prev = size - 1;
    }
#line 174
    if (prev == root) {
#line 175
      partner = root;
    } else
#line 174
    if (rank == roo2) {
#line 175
      partner = root;
    } else {
#line 174
      if (prev != 0) {
#line 174
        tmp___1 = prev - 1;
      } else {
#line 174
        tmp___1 = size - 1;
      }
#line 174
      if (tmp___1 == root) {
#line 175
        partner = root;
      } else {
#line 176
        partner = prev;
      }
    }
#line 178
    ierr = MPI_Iprobe(partner, msgid, comm, & go, & PANEL->status[0]);
#line 180
    if (ierr == 0) {
#line 182
      if (go != 0) {
#line 184
        ierr = MPI_Recv((void *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                        partner, msgid, comm, & PANEL->status[0]);
#line 186
        if (ierr == 0) {
#line 186
          if (prev != root) {
#line 186
            if (next != roo2) {
#line 186
              if (next != root) {
#line 189
                ierr = MPI_Send((void const   *)PANEL->buffers[0], PANEL->counts[0],
                                PANEL->dtypes[0], next, msgid, comm);
              }
            }
          }
        }
      } else {
#line 193
        *IFLAG = 2;
#line 193
        return (*IFLAG);
      }
    }
  }
#line 200
  if (ierr == 0) {
#line 200
    *IFLAG = 1;
  } else {
#line 200
    *IFLAG = 0;
  }
#line 202
  return (*IFLAG);
}
}
#line 206 "../HPL_2rinM.c"
int HPL_bwait_2rinM(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 224
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 224
    return (1);
  }
#line 225
  if ((PANEL->grid)->npcol <= 1) {
#line 225
    return (1);
  }
#line 230
  ierr = MPI_Type_free(& PANEL->dtypes[0]);
#line 232
  if (ierr == 0) {
#line 232
    tmp = 1;
  } else {
#line 232
    tmp = 0;
  }
#line 232
  return (tmp);
}
}
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 849 "//usr/include/mpich/mpi.h"
extern int MPI_Ssend(void const   *buf , int count , MPI_Datatype datatype , int dest ,
                     int tag , MPI_Comm comm ) ;
#line 859
extern int MPI_Issend(void const   *buf , int count , MPI_Datatype datatype , int dest ,
                      int tag , MPI_Comm comm , MPI_Request *request ) ;
#line 865
extern int MPI_Wait(MPI_Request *request , MPI_Status *status ) ;
#line 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_blong(HPL_T_panel *PANEL ) ;
#line 151
int HPL_bcast_blong(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 152
int HPL_bwait_blong(HPL_T_panel *PANEL ) ;
#line 62 "../HPL_blong.c"
int HPL_binit_blong(HPL_T_panel *PANEL ) 
{ 


  {
#line 74
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 74
    return (1);
  }
#line 75
  if ((PANEL->grid)->npcol <= 1) {
#line 75
    return (1);
  }
#line 89
  return (1);
}
}
#line 131 "../HPL_blong.c"
int HPL_bcast_blong(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int COUNT ;
  int count ;
  int dummy ;
  int ierr ;
  int ibuf ;
  int ibufR ;
  int ibufS ;
  int indx ;
  int ip2 ;
  int k ;
  int l ;
  int lbuf ;
  int lbufR ;
  int lbufS ;
  int mask ;
  int msgid ;
  int mydist ;
  int mydist2 ;
  int next ;
  int npm1 ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 146
  dummy = 0;
#line 146
  ierr = 0;
#line 153
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 153
    *IFLAG = 1;
#line 153
    return (1);
  }
#line 154
  size = (PANEL->grid)->npcol;
#line 154
  if (size <= 1) {
#line 155
    *IFLAG = 1;
#line 155
    return (1);
  }
#line 163
  comm = (PANEL->grid)->row_comm;
#line 163
  rank = (PANEL->grid)->mycol;
#line 164
  mask = (PANEL->grid)->col_mask;
#line 164
  ip2 = (PANEL->grid)->col_ip2m1;
#line 165
  root = PANEL->pcol;
#line 165
  msgid = PANEL->msgid;
#line 166
  COUNT = PANEL->len;
#line 166
  npm1 = size - 1;
#line 167
  if (rank < root) {
#line 167
    mydist = (size + rank) - root;
  } else {
#line 167
    mydist = rank - root;
  }
#line 167
  mydist2 = mydist;
#line 167
  indx = ip2;
#line 168
  count = COUNT / size;
#line 168
  if (count > 1) {
#line 168
    count = count;
  } else {
#line 168
    count = 1;
  }
#line 172
  while (1) {
#line 174
    mask ^= ip2;
#line 176
    if ((mydist & mask) == 0) {
#line 178
      ibuf = indx * count;
#line 178
      lbuf = COUNT - ibuf;
#line 179
      if (indx + ip2 < size) {
#line 179
        l = ip2 * count;
#line 179
        if (lbuf < l) {
#line 179
          lbuf = lbuf;
        } else {
#line 179
          lbuf = l;
        }
      }
#line 181
      partner = mydist ^ ip2;
#line 183
      if ((mydist & ip2) != 0) {
#line 185
        if (root + partner < size) {
#line 185
          partner = root + partner;
        } else {
#line 185
          partner = (root + partner) - size;
        }
#line 200
        if (lbuf > 0) {
#line 203
          if (ierr == 0) {
#line 204
            ierr = HPL_packL(PANEL, (int const   )ibuf, (int const   )lbuf, (int const   )1);
          }
#line 206
          if (ierr == 0) {
#line 207
            ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                            partner, msgid, comm, & PANEL->status[0]);
          }
#line 210
          if (ierr == 0) {
#line 211
            ierr = MPI_Type_free(& PANEL->dtypes[1]);
          }
        } else
#line 216
        if (ierr == 0) {
#line 217
          ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm,
                          & PANEL->status[0]);
        }
      } else
#line 221
      if (partner < size) {
#line 223
        if (root + partner < size) {
#line 223
          partner = root + partner;
        } else {
#line 223
          partner = (root + partner) - size;
        }
#line 225
        if (lbuf > 0) {
#line 228
          if (ierr == 0) {
#line 229
            ierr = HPL_packL(PANEL, (int const   )ibuf, (int const   )lbuf, (int const   )0);
          }
#line 231
          if (ierr == 0) {
#line 232
            ierr = MPI_Ssend((void const   *)PANEL->buffers[0], PANEL->counts[0],
                             PANEL->dtypes[0], partner, msgid, comm);
          }
#line 235
          if (ierr == 0) {
#line 236
            ierr = MPI_Type_free(& PANEL->dtypes[0]);
          }
        } else
#line 241
        if (ierr == 0) {
#line 242
          ierr = MPI_Ssend((void const   *)((void *)(& dummy)), 0, 1275068685, partner,
                           msgid, comm);
        }
      }
    }
#line 248
    if (mydist2 < ip2) {
#line 248
      ip2 >>= 1;
#line 248
      indx -= ip2;
    } else {
#line 249
      mydist2 -= ip2;
#line 249
      ip2 >>= 1;
#line 249
      indx += ip2;
    }
#line 172
    if (! (ip2 > 0)) {
#line 172
      break;
    }
  }
#line 255
  if (rank != 0) {
#line 255
    prev = rank - 1;
  } else {
#line 255
    prev = size - 1;
  }
#line 255
  if (rank != size - 1) {
#line 255
    next = rank + 1;
  } else {
#line 255
    next = 0;
  }
#line 257
  k = 0;
#line 257
  while (k < npm1) {
#line 259
    l = k >> 1;
#line 263
    if (((mydist + k) & 1) != 0) {
#line 265
      if (mydist + l < size) {
#line 265
        indx = mydist + l;
      } else {
#line 265
        indx = (mydist + l) - size;
      }
#line 265
      ibufS = indx * count;
#line 266
      if (indx == npm1) {
#line 266
        lbufS = COUNT;
      } else {
#line 266
        lbufS = ibufS + count;
      }
#line 267
      if (COUNT < lbufS) {
#line 267
        tmp = COUNT;
      } else {
#line 267
        tmp = lbufS;
      }
#line 267
      lbufS = tmp - ibufS;
#line 267
      if (0 > lbufS) {
#line 267
        lbufS = 0;
      } else {
#line 267
        lbufS = lbufS;
      }
#line 269
      if (mydist < l + 1) {
#line 269
        indx = (size + mydist) - (l + 1);
      } else {
#line 269
        indx = mydist - (l + 1);
      }
#line 269
      ibufR = indx * count;
#line 270
      if (indx == npm1) {
#line 270
        lbufR = COUNT;
      } else {
#line 270
        lbufR = ibufR + count;
      }
#line 271
      if (COUNT < lbufR) {
#line 271
        tmp___0 = COUNT;
      } else {
#line 271
        tmp___0 = lbufR;
      }
#line 271
      lbufR = tmp___0 - ibufR;
#line 271
      if (0 > lbufR) {
#line 271
        lbufR = 0;
      } else {
#line 271
        lbufR = lbufR;
      }
#line 273
      partner = prev;
    } else {
#line 277
      if (mydist < l) {
#line 277
        indx = (size + mydist) - l;
      } else {
#line 277
        indx = mydist - l;
      }
#line 277
      ibufS = indx * count;
#line 278
      if (indx == npm1) {
#line 278
        lbufS = COUNT;
      } else {
#line 278
        lbufS = ibufS + count;
      }
#line 279
      if (COUNT < lbufS) {
#line 279
        tmp___1 = COUNT;
      } else {
#line 279
        tmp___1 = lbufS;
      }
#line 279
      lbufS = tmp___1 - ibufS;
#line 279
      if (0 > lbufS) {
#line 279
        lbufS = 0;
      } else {
#line 279
        lbufS = lbufS;
      }
#line 281
      if (mydist + (l + 1) < size) {
#line 281
        indx = mydist + (l + 1);
      } else {
#line 281
        indx = (mydist + (l + 1)) - size;
      }
#line 281
      ibufR = indx * count;
#line 282
      if (indx == npm1) {
#line 282
        lbufR = COUNT;
      } else {
#line 282
        lbufR = ibufR + count;
      }
#line 283
      if (COUNT < lbufR) {
#line 283
        tmp___2 = COUNT;
      } else {
#line 283
        tmp___2 = lbufR;
      }
#line 283
      lbufR = tmp___2 - ibufR;
#line 283
      if (0 > lbufR) {
#line 283
        lbufR = 0;
      } else {
#line 283
        lbufR = lbufR;
      }
#line 285
      partner = next;
    }
#line 290
    if (lbufS > 0) {
#line 293
      if (ierr == 0) {
#line 294
        ierr = HPL_packL(PANEL, (int const   )ibufS, (int const   )lbufS, (int const   )0);
      }
#line 296
      if (ierr == 0) {
#line 297
        ierr = MPI_Issend((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          partner, msgid, comm, & PANEL->request[0]);
      }
    } else
#line 303
    if (ierr == 0) {
#line 304
      ierr = MPI_Issend((void const   *)((void *)(& dummy)), 0, 1275068685, partner,
                        msgid, comm, & PANEL->request[0]);
    }
#line 308
    if (lbufR > 0) {
#line 311
      if (ierr == 0) {
#line 312
        ierr = HPL_packL(PANEL, (int const   )ibufR, (int const   )lbufR, (int const   )1);
      }
#line 314
      if (ierr == 0) {
#line 315
        ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                        partner, msgid, comm, & PANEL->status[0]);
      }
#line 319
      if (ierr == 0) {
#line 320
        ierr = MPI_Type_free(& PANEL->dtypes[1]);
      }
    } else
#line 325
    if (ierr == 0) {
#line 326
      ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm, & PANEL->status[0]);
    }
#line 330
    if (ierr == 0) {
#line 331
      ierr = MPI_Wait(& PANEL->request[0], & PANEL->status[0]);
    }
#line 333
    if (lbufS > 0) {
#line 333
      if (ierr == 0) {
#line 334
        ierr = MPI_Type_free(& PANEL->dtypes[0]);
      }
    }
#line 257
    k ++;
  }
#line 341
  if (ierr == 0) {
#line 341
    *IFLAG = 1;
  } else {
#line 341
    *IFLAG = 0;
  }
#line 343
  return (*IFLAG);
}
}
#line 347 "../HPL_blong.c"
int HPL_bwait_blong(HPL_T_panel *PANEL ) 
{ 


  {
#line 359
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 359
    return (1);
  }
#line 360
  if ((PANEL->grid)->npcol <= 1) {
#line 360
    return (1);
  }
#line 362
  return (1);
}
}
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 154 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit_blonM(HPL_T_panel *PANEL ) ;
#line 155
int HPL_bcast_blonM(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 156
int HPL_bwait_blonM(HPL_T_panel *PANEL ) ;
#line 62 "../HPL_blonM.c"
int HPL_binit_blonM(HPL_T_panel *PANEL ) 
{ 


  {
#line 74
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 74
    return (1);
  }
#line 75
  if ((PANEL->grid)->npcol <= 1) {
#line 75
    return (1);
  }
#line 89
  return (1);
}
}
#line 146 "../HPL_blonM.c"
int HPL_bcast_blonM(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  MPI_Comm comm ;
  int COUNT ;
  int count ;
  int go ;
  int ierr ;
  int ibuf ;
  int ibufR ;
  int ibufS ;
  int dummy ;
  int indx ;
  int ip2 ;
  int k ;
  int l ;
  int lbuf ;
  int lbufR ;
  int lbufS ;
  int mask ;
  int msgid ;
  int mydist ;
  int mydist2 ;
  int next ;
  int npm1 ;
  int npm2 ;
  int partner ;
  int prev ;
  int rank ;
  int root ;
  int size ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 161
  go = 1;
#line 161
  ierr = 0;
#line 161
  dummy = 0;
#line 161
  ip2 = 1;
#line 161
  mask = 1;
#line 169
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 169
    *IFLAG = 1;
#line 169
    return (1);
  }
#line 170
  size = (PANEL->grid)->npcol;
#line 170
  if (size <= 1) {
#line 171
    *IFLAG = 1;
#line 171
    return (1);
  }
#line 180
  comm = (PANEL->grid)->row_comm;
#line 180
  rank = (PANEL->grid)->mycol;
#line 181
  root = PANEL->pcol;
#line 181
  msgid = PANEL->msgid;
#line 182
  if (rank != 0) {
#line 182
    prev = rank - 1;
  } else {
#line 182
    prev = size - 1;
  }
#line 184
  if (rank == root) {
#line 187
    if (ierr == 0) {
#line 188
      ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )0);
    }
#line 190
    if (ierr == 0) {
#line 191
      if (rank != size - 1) {
#line 191
        tmp = rank + 1;
      } else {
#line 191
        tmp = 0;
      }
#line 191
      ierr = MPI_Ssend((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                       tmp, msgid, comm);
    }
#line 194
    if (ierr == 0) {
#line 195
      ierr = MPI_Type_free(& PANEL->dtypes[0]);
    }
  } else
#line 198
  if (prev == root) {
#line 208
    if (ierr == 0) {
#line 210
      if (go != 0) {
#line 213
        ierr = HPL_packL(PANEL, (int const   )0, (int const   )PANEL->len, (int const   )1);
#line 215
        if (ierr == 0) {
#line 216
          ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                          root, msgid, comm, & PANEL->status[0]);
        }
#line 219
        if (ierr == 0) {
#line 220
          ierr = MPI_Type_free(& PANEL->dtypes[1]);
        }
      } else {
#line 223
        *IFLAG = 2;
#line 223
        return (2);
      }
    }
  }
#line 231
  if (prev == root) {
#line 231
    goto _L;
  } else
#line 231
  if (size == 2) {
    _L: 
#line 233
    if (ierr == 0) {
#line 233
      *IFLAG = 1;
    } else {
#line 233
      *IFLAG = 0;
    }
#line 234
    return (*IFLAG);
  }
#line 240
  npm1 = size - 1;
#line 240
  npm2 = npm1 - 1;
#line 240
  COUNT = PANEL->len;
#line 242
  k = npm2;
#line 242
  while (k > 1) {
#line 242
    k >>= 1;
#line 242
    ip2 <<= 1;
#line 242
    mask <<= 1;
#line 242
    mask ++;
  }
#line 243
  if (rank == root) {
#line 243
    mydist = 0;
#line 243
    mydist2 = mydist;
  } else {
#line 244
    if (rank < root) {
#line 244
      tmp___0 = (size + rank) - root;
    } else {
#line 244
      tmp___0 = rank - root;
    }
#line 244
    mydist = tmp___0 - 1;
#line 244
    mydist2 = mydist;
  }
#line 246
  indx = ip2;
#line 246
  count = COUNT / npm1;
#line 246
  if (count > 1) {
#line 246
    count = count;
  } else {
#line 246
    count = 1;
  }
#line 248
  while (1) {
#line 250
    mask ^= ip2;
#line 252
    if ((mydist & mask) == 0) {
#line 254
      ibuf = indx * count;
#line 254
      lbuf = COUNT - ibuf;
#line 255
      if (indx + ip2 < npm1) {
#line 255
        l = ip2 * count;
#line 255
        if (lbuf < l) {
#line 255
          lbuf = lbuf;
        } else {
#line 255
          lbuf = l;
        }
      }
#line 257
      partner = mydist ^ ip2;
#line 259
      if ((mydist & ip2) != 0) {
#line 261
        if (root + partner < size) {
#line 261
          partner = root + partner;
        } else {
#line 261
          partner = (root + partner) - size;
        }
#line 262
        if (partner != root) {
#line 262
          if (partner != size - 1) {
#line 262
            partner ++;
          } else {
#line 262
            partner = 0;
          }
        }
#line 278
        if (lbuf > 0) {
#line 281
          if (ierr == 0) {
#line 282
            ierr = HPL_packL(PANEL, (int const   )ibuf, (int const   )lbuf, (int const   )1);
          }
#line 284
          if (ierr == 0) {
#line 285
            ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                            partner, msgid, comm, & PANEL->status[0]);
          }
#line 288
          if (ierr == 0) {
#line 289
            ierr = MPI_Type_free(& PANEL->dtypes[1]);
          }
        } else
#line 294
        if (ierr == 0) {
#line 295
          ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm,
                          & PANEL->status[0]);
        }
      } else
#line 299
      if (partner < npm1) {
#line 301
        if (root + partner < size) {
#line 301
          partner = root + partner;
        } else {
#line 301
          partner = (root + partner) - size;
        }
#line 302
        if (partner != root) {
#line 302
          if (partner != size - 1) {
#line 302
            partner ++;
          } else {
#line 302
            partner = 0;
          }
        }
#line 304
        if (lbuf > 0) {
#line 307
          if (ierr == 0) {
#line 308
            ierr = HPL_packL(PANEL, (int const   )ibuf, (int const   )lbuf, (int const   )0);
          }
#line 310
          if (ierr == 0) {
#line 311
            ierr = MPI_Ssend((void const   *)PANEL->buffers[0], PANEL->counts[0],
                             PANEL->dtypes[0], partner, msgid, comm);
          }
#line 314
          if (ierr == 0) {
#line 315
            ierr = MPI_Type_free(& PANEL->dtypes[0]);
          }
        } else
#line 320
        if (ierr == 0) {
#line 321
          ierr = MPI_Ssend((void const   *)((void *)(& dummy)), 0, 1275068685, partner,
                           msgid, comm);
        }
      }
    }
#line 327
    if (mydist2 < ip2) {
#line 327
      ip2 >>= 1;
#line 327
      indx -= ip2;
    } else {
#line 328
      mydist2 -= ip2;
#line 328
      ip2 >>= 1;
#line 328
      indx += ip2;
    }
#line 248
    if (! (ip2 > 0)) {
#line 248
      break;
    }
  }
#line 334
  if (rank != 0) {
#line 334
    prev = rank - 1;
  } else {
#line 334
    prev = size - 1;
  }
#line 335
  if (prev != 0) {
#line 335
    tmp___1 = prev - 1;
  } else {
#line 335
    tmp___1 = size - 1;
  }
#line 335
  if (tmp___1 == root) {
#line 335
    prev = root;
  }
#line 336
  if (rank != size - 1) {
#line 336
    next = rank + 1;
  } else {
#line 336
    next = 0;
  }
#line 337
  if (rank == root) {
#line 337
    if (next != size - 1) {
#line 337
      next ++;
    } else {
#line 337
      next = 0;
    }
  }
#line 339
  k = 0;
#line 339
  while (k < npm2) {
#line 341
    l = k >> 1;
#line 345
    if (((mydist + k) & 1) != 0) {
#line 347
      if (mydist + l < npm1) {
#line 347
        indx = mydist + l;
      } else {
#line 347
        indx = (mydist + l) - npm1;
      }
#line 347
      ibufS = indx * count;
#line 348
      if (indx == npm2) {
#line 348
        lbufS = COUNT;
      } else {
#line 348
        lbufS = ibufS + count;
      }
#line 349
      if (COUNT < lbufS) {
#line 349
        tmp___2 = COUNT;
      } else {
#line 349
        tmp___2 = lbufS;
      }
#line 349
      lbufS = tmp___2 - ibufS;
#line 349
      if (0 > lbufS) {
#line 349
        lbufS = 0;
      } else {
#line 349
        lbufS = lbufS;
      }
#line 351
      if (mydist < l + 1) {
#line 351
        indx = (npm1 + mydist) - (l + 1);
      } else {
#line 351
        indx = mydist - (l + 1);
      }
#line 351
      ibufR = indx * count;
#line 352
      if (indx == npm2) {
#line 352
        lbufR = COUNT;
      } else {
#line 352
        lbufR = ibufR + count;
      }
#line 353
      if (COUNT < lbufR) {
#line 353
        tmp___3 = COUNT;
      } else {
#line 353
        tmp___3 = lbufR;
      }
#line 353
      lbufR = tmp___3 - ibufR;
#line 353
      if (0 > lbufR) {
#line 353
        lbufR = 0;
      } else {
#line 353
        lbufR = lbufR;
      }
#line 355
      partner = prev;
    } else {
#line 359
      if (mydist < l) {
#line 359
        indx = (npm1 + mydist) - l;
      } else {
#line 359
        indx = mydist - l;
      }
#line 359
      ibufS = indx * count;
#line 360
      if (indx == npm2) {
#line 360
        lbufS = COUNT;
      } else {
#line 360
        lbufS = ibufS + count;
      }
#line 361
      if (COUNT < lbufS) {
#line 361
        tmp___4 = COUNT;
      } else {
#line 361
        tmp___4 = lbufS;
      }
#line 361
      lbufS = tmp___4 - ibufS;
#line 361
      if (0 > lbufS) {
#line 361
        lbufS = 0;
      } else {
#line 361
        lbufS = lbufS;
      }
#line 363
      if (mydist + (l + 1) < npm1) {
#line 363
        indx = mydist + (l + 1);
      } else {
#line 363
        indx = (mydist + (l + 1)) - npm1;
      }
#line 363
      ibufR = indx * count;
#line 364
      if (indx == npm2) {
#line 364
        lbufR = COUNT;
      } else {
#line 364
        lbufR = ibufR + count;
      }
#line 365
      if (COUNT < lbufR) {
#line 365
        tmp___5 = COUNT;
      } else {
#line 365
        tmp___5 = lbufR;
      }
#line 365
      lbufR = tmp___5 - ibufR;
#line 365
      if (0 > lbufR) {
#line 365
        lbufR = 0;
      } else {
#line 365
        lbufR = lbufR;
      }
#line 367
      partner = next;
    }
#line 372
    if (lbufS > 0) {
#line 375
      if (ierr == 0) {
#line 376
        ierr = HPL_packL(PANEL, (int const   )ibufS, (int const   )lbufS, (int const   )0);
      }
#line 378
      if (ierr == 0) {
#line 379
        ierr = MPI_Issend((void const   *)PANEL->buffers[0], PANEL->counts[0], PANEL->dtypes[0],
                          partner, msgid, comm, & PANEL->request[0]);
      }
    } else
#line 385
    if (ierr == 0) {
#line 386
      ierr = MPI_Issend((void const   *)((void *)(& dummy)), 0, 1275068685, partner,
                        msgid, comm, & PANEL->request[0]);
    }
#line 390
    if (lbufR > 0) {
#line 393
      if (ierr == 0) {
#line 394
        ierr = HPL_packL(PANEL, (int const   )ibufR, (int const   )lbufR, (int const   )1);
      }
#line 396
      if (ierr == 0) {
#line 397
        ierr = MPI_Recv((void *)PANEL->buffers[1], PANEL->counts[1], PANEL->dtypes[1],
                        partner, msgid, comm, & PANEL->status[0]);
      }
#line 401
      if (ierr == 0) {
#line 402
        ierr = MPI_Type_free(& PANEL->dtypes[1]);
      }
    } else
#line 407
    if (ierr == 0) {
#line 408
      ierr = MPI_Recv((void *)(& dummy), 0, 1275068685, partner, msgid, comm, & PANEL->status[0]);
    }
#line 412
    if (ierr == 0) {
#line 413
      ierr = MPI_Wait(& PANEL->request[0], & PANEL->status[0]);
    }
#line 415
    if (lbufS > 0) {
#line 415
      if (ierr == 0) {
#line 416
        ierr = MPI_Type_free(& PANEL->dtypes[0]);
      }
    }
#line 339
    k ++;
  }
#line 423
  if (ierr == 0) {
#line 423
    *IFLAG = 1;
  } else {
#line 423
    *IFLAG = 0;
  }
#line 425
  return (*IFLAG);
}
}
#line 429 "../HPL_blonM.c"
int HPL_bwait_blonM(HPL_T_panel *PANEL ) 
{ 


  {
#line 441
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 441
    return (1);
  }
#line 442
  if ((PANEL->grid)->npcol <= 1) {
#line 442
    return (1);
  }
#line 444
  return (1);
}
}
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 912 "//usr/include/mpich/mpi.h"
extern int MPI_Type_struct(int count , int const   *array_of_blocklengths , MPI_Aint const   *array_of_displacements ,
                           MPI_Datatype const   *array_of_types , MPI_Datatype *newtype ) ;
#line 915
extern int MPI_Address(void const   *location , MPI_Aint *address ) ;
#line 920
extern int MPI_Type_commit(MPI_Datatype *datatype ) ;
#line 459 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pabort(int LINE , char const   *SRNAME , char const   *FORM  , ...) ;
#line 53 "../HPL_packL.c"
int HPL_packL(HPL_T_panel *PANEL , int const   INDEX , int const   LEN , int const   IBUF ) 
{ 
  MPI_Datatype *type ;
  void ***bufs ;
  double *A ;
  int *blen ;
  MPI_Aint *disp ;
  int curr ;
  int i ;
  int i1 ;
  int ibuf ;
  int ierr ;
  int j1 ;
  int jb ;
  int jbm ;
  int jbp1 ;
  int lda ;
  int len ;
  int m ;
  int m1 ;
  int nbufs ;
  void *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;

  {
#line 102
  type = (MPI_Datatype *)((void *)0);
#line 103
  bufs = (void ***)((void *)0);
#line 105
  blen = (int *)((void *)0);
#line 106
  disp = (MPI_Aint *)((void *)0);
#line 107
  ierr = 0;
#line 133
  jb = PANEL->jb;
#line 133
  jbp1 = jb + 1;
#line 137
  tmp = malloc((unsigned long )jbp1 * sizeof(void **));
#line 137
  bufs = (void ***)tmp;
#line 138
  tmp___0 = malloc((unsigned long )jbp1 * sizeof(int ));
#line 138
  blen = (int *)tmp___0;
#line 139
  tmp___1 = malloc((unsigned long )jbp1 * sizeof(MPI_Aint ));
#line 139
  disp = (MPI_Aint *)tmp___1;
#line 140
  tmp___2 = malloc((unsigned long )jbp1 * sizeof(MPI_Datatype ));
#line 140
  type = (MPI_Datatype *)tmp___2;
#line 142
  if ((unsigned long )bufs != (unsigned long )((void *)0)) {
#line 142
    if ((unsigned long )blen != (unsigned long )((void *)0)) {
#line 142
      if ((unsigned long )disp != (unsigned long )((void *)0)) {
#line 142
        if ((unsigned long )type != (unsigned long )((void *)0)) {
#line 145
          m = PANEL->mp;
#line 145
          curr = (PANEL->grid)->myrow == PANEL->prow;
#line 146
          if (curr != 0) {
#line 146
            m -= jb;
          }
#line 148
          len = (int )LEN;
#line 148
          ibuf = (int )INDEX;
#line 148
          nbufs = 0;
#line 148
          jbm = jb * m;
#line 150
          if (m > 0) {
#line 150
            if (ibuf < jbm) {
#line 155
              if ((PANEL->grid)->mycol == PANEL->pcol) {
#line 157
                lda = PANEL->lda;
#line 158
                if (curr != 0) {
#line 158
                  A = (PANEL->A + jb) + - jb * lda;
                } else {
#line 159
                  A = (PANEL->A + 0) + - jb * lda;
                }
              } else {
#line 161
                lda = PANEL->ldl2;
#line 161
                A = PANEL->L2;
              }
#line 165
              j1 = ibuf / m;
#line 165
              i1 = ibuf - j1 * m;
#line 165
              m1 = m - i1;
#line 166
              if (len < m1) {
#line 166
                m1 = len;
              } else {
#line 166
                m1 = m1;
              }
#line 168
              *(bufs + nbufs) = (void **)((void *)((A + i1) + j1 * lda));
#line 169
              *(type + nbufs) = 1275070475;
#line 170
              *(blen + nbufs) = m1;
#line 171
              if (ierr == 0) {
#line 172
                ierr = MPI_Address((void const   *)*(bufs + nbufs), disp + nbufs);
              }
#line 174
              nbufs ++;
#line 174
              len -= m1;
#line 174
              j1 ++;
#line 174
              ibuf += m1;
#line 178
              while (1) {
#line 178
                if (len > 0) {
#line 178
                  if (! (j1 < jb)) {
#line 178
                    break;
                  }
                } else {
#line 178
                  break;
                }
#line 180
                if (len < m) {
#line 180
                  m1 = len;
                } else {
#line 180
                  m1 = m;
                }
#line 182
                *(bufs + nbufs) = (void **)((void *)((A + 0) + j1 * lda));
#line 183
                *(type + nbufs) = 1275070475;
#line 184
                *(blen + nbufs) = m1;
#line 185
                if (ierr == 0) {
#line 186
                  ierr = MPI_Address((void const   *)*(bufs + nbufs), disp + nbufs);
                }
#line 188
                nbufs ++;
#line 188
                len -= m1;
#line 188
                j1 ++;
#line 188
                ibuf += m1;
              }
            }
          }
#line 194
          if (len > 0) {
#line 196
            *(bufs + nbufs) = (void **)((void *)((PANEL->L1 + ibuf) - jbm));
#line 197
            *(type + nbufs) = 1275070475;
#line 198
            *(blen + nbufs) = len;
#line 199
            if (ierr == 0) {
#line 200
              ierr = MPI_Address((void const   *)*(bufs + nbufs), disp + nbufs);
            }
#line 201
            nbufs ++;
          }
#line 204
          i = 1;
#line 204
          while (i < nbufs) {
#line 204
            *(disp + i) -= *(disp + 0);
#line 204
            i ++;
          }
#line 204
          *(disp + 0) = (MPI_Aint )0;
#line 206
          PANEL->buffers[IBUF] = (void ***)((void *)*(bufs + 0));
#line 206
          PANEL->counts[IBUF] = 1;
#line 210
          if (ierr == 0) {
#line 211
            ierr = MPI_Type_struct(nbufs, (int const   *)blen, (MPI_Aint const   *)disp,
                                   (MPI_Datatype const   *)type, & PANEL->dtypes[IBUF]);
          }
#line 216
          if (bufs) {
#line 216
            free((void *)bufs);
          }
#line 217
          if (blen) {
#line 217
            free((void *)blen);
          }
#line 218
          if (disp) {
#line 218
            free((void *)disp);
          }
#line 219
          if (type) {
#line 219
            free((void *)type);
          }
#line 223
          if (ierr == 0) {
#line 224
            ierr = MPI_Type_commit(& PANEL->dtypes[IBUF]);
          }
#line 226
          return (ierr);
        } else {
#line 233
          HPL_pabort(233, "HPL_packL", "Memory allocation failed");
#line 234
          return (0);
        }
      } else {
#line 233
        HPL_pabort(233, "HPL_packL", "Memory allocation failed");
#line 234
        return (0);
      }
    } else {
#line 233
      HPL_pabort(233, "HPL_packL", "Memory allocation failed");
#line 234
      return (0);
    }
  } else {
#line 233
    HPL_pabort(233, "HPL_packL", "Memory allocation failed");
#line 234
    return (0);
  }
}
}
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 129 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
void HPL_copyL(HPL_T_panel *PANEL ) ;
#line 53 "../HPL_copyL.c"
void HPL_copyL(HPL_T_panel *PANEL ) 
{ 
  int jb ;
  int lda ;

  {
#line 90
  if ((PANEL->grid)->mycol == PANEL->pcol) {
#line 92
    jb = PANEL->jb;
#line 92
    lda = PANEL->lda;
#line 94
    if ((PANEL->grid)->myrow == PANEL->prow) {
#line 96
      HPL_dlacpy((int const   )(PANEL->mp - jb), (int const   )jb, (double const   *)((PANEL->A + jb) + - jb * lda),
                 (int const   )lda, PANEL->L2, (int const   )PANEL->ldl2);
    } else {
#line 101
      HPL_dlacpy((int const   )PANEL->mp, (int const   )jb, (double const   *)((PANEL->A + 0) + - jb * lda),
                 (int const   )lda, PANEL->L2, (int const   )PANEL->ldl2);
    }
  }
#line 108
  return;
}
}
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 109 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_binit(HPL_T_panel *PANEL ) ;
#line 53 "../HPL_binit.c"
int HPL_binit(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  HPL_T_TOP top ;

  {
#line 87
  if ((PANEL->grid)->npcol <= 1) {
#line 87
    return (1);
  }
#line 91
  top = (PANEL->algo)->btopo;
#line 93
  switch ((unsigned int )top) {
  case 402U: 
#line 95
  ierr = HPL_binit_1rinM(PANEL);
#line 95
  break;
  case 401U: 
#line 96
  ierr = HPL_binit_1ring(PANEL);
#line 96
  break;
  case 404U: 
#line 97
  ierr = HPL_binit_2rinM(PANEL);
#line 97
  break;
  case 403U: 
#line 98
  ierr = HPL_binit_2ring(PANEL);
#line 98
  break;
  case 406U: 
#line 99
  ierr = HPL_binit_blonM(PANEL);
#line 99
  break;
  case 405U: 
#line 100
  ierr = HPL_binit_blong(PANEL);
#line 100
  break;
  default: 
#line 101
  ierr = 1;
  }
#line 104
  return (ierr);
}
}
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 113 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bcast(HPL_T_panel *PANEL , int *IFLAG ) ;
#line 53 "../HPL_bcast.c"
int HPL_bcast(HPL_T_panel *PANEL , int *IFLAG ) 
{ 
  int ierr ;
  HPL_T_TOP top ;

  {
#line 95
  if ((unsigned long )PANEL == (unsigned long )((void *)0)) {
#line 95
    *IFLAG = 1;
#line 95
    return (1);
  }
#line 96
  if ((PANEL->grid)->npcol <= 1) {
#line 97
    *IFLAG = 1;
#line 97
    return (1);
  }
#line 101
  top = (PANEL->algo)->btopo;
#line 103
  switch ((unsigned int )top) {
  case 402U: 
#line 105
  ierr = HPL_bcast_1rinM(PANEL, IFLAG);
#line 105
  break;
  case 401U: 
#line 106
  ierr = HPL_bcast_1ring(PANEL, IFLAG);
#line 106
  break;
  case 404U: 
#line 107
  ierr = HPL_bcast_2rinM(PANEL, IFLAG);
#line 107
  break;
  case 403U: 
#line 108
  ierr = HPL_bcast_2ring(PANEL, IFLAG);
#line 108
  break;
  case 406U: 
#line 109
  ierr = HPL_bcast_blonM(PANEL, IFLAG);
#line 109
  break;
  case 405U: 
#line 110
  ierr = HPL_bcast_blong(PANEL, IFLAG);
#line 110
  break;
  default: 
#line 111
  ierr = 1;
  }
#line 114
  return (ierr);
}
}
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 118 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_bwait(HPL_T_panel *PANEL ) ;
#line 53 "../HPL_bwait.c"
int HPL_bwait(HPL_T_panel *PANEL ) 
{ 
  int ierr ;
  HPL_T_TOP top ;

  {
#line 88
  if ((PANEL->grid)->npcol <= 1) {
#line 88
    return (1);
  }
#line 92
  top = (PANEL->algo)->btopo;
#line 94
  switch ((unsigned int )top) {
  case 402U: 
#line 96
  ierr = HPL_bwait_1rinM(PANEL);
#line 96
  break;
  case 401U: 
#line 97
  ierr = HPL_bwait_1ring(PANEL);
#line 97
  break;
  case 404U: 
#line 98
  ierr = HPL_bwait_2rinM(PANEL);
#line 98
  break;
  case 403U: 
#line 99
  ierr = HPL_bwait_2ring(PANEL);
#line 99
  break;
  case 406U: 
#line 100
  ierr = HPL_bwait_blonM(PANEL);
#line 100
  break;
  case 405U: 
#line 101
  ierr = HPL_bwait_blong(PANEL);
#line 101
  break;
  default: 
#line 102
  ierr = 1;
  }
#line 105
  return (ierr);
}
}
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 82 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_send(double *SBUF , int SCOUNT , int DEST , int STAG , MPI_Comm COMM ) ;
#line 60 "../HPL_send.c"
int HPL_send(double *SBUF , int SCOUNT , int DEST , int STAG , MPI_Comm COMM ) 
{ 
  int ierr ;
  int tmp ;

  {
#line 122
  if (SCOUNT <= 0) {
#line 122
    return (1);
  }
#line 133
  ierr = MPI_Send((void const   *)((void *)SBUF), SCOUNT, 1275070475, DEST, STAG,
                  COMM);
#line 135
  if (ierr == 0) {
#line 135
    tmp = 1;
  } else {
#line 135
    tmp = 0;
  }
#line 135
  return (tmp);
}
}
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 90 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_recv(double *RBUF , int RCOUNT , int SRC , int RTAG , MPI_Comm COMM ) ;
#line 60 "../HPL_recv.c"
int HPL_recv(double *RBUF , int RCOUNT , int SRC , int RTAG , MPI_Comm COMM ) 
{ 
  MPI_Status status ;
  int ierr ;
  int tmp ;

  {
#line 123
  if (RCOUNT <= 0) {
#line 123
    return (1);
  }
#line 135
  ierr = MPI_Recv((void *)RBUF, RCOUNT, 1275070475, SRC, RTAG, COMM, & status);
#line 138
  if (ierr == 0) {
#line 138
    tmp = 1;
  } else {
#line 138
    tmp = 0;
  }
#line 138
  return (tmp);
}
}
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 863 "//usr/include/mpich/mpi.h"
extern int MPI_Irecv(void *buf , int count , MPI_Datatype datatype , int source ,
                     int tag , MPI_Comm comm , MPI_Request *request ) ;
#line 98 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_comm.h"
int HPL_sdrv(double *SBUF , int SCOUNT , int STAG , double *RBUF , int RCOUNT , int RTAG ,
             int PARTNER , MPI_Comm COMM ) ;
#line 60 "../HPL_sdrv.c"
int HPL_sdrv(double *SBUF , int SCOUNT , int STAG , double *RBUF , int RCOUNT , int RTAG ,
             int PARTNER , MPI_Comm COMM ) 
{ 
  MPI_Request request ;
  MPI_Status status ;
  int ierr ;
  int tmp ;

  {
#line 142
  if (RCOUNT > 0) {
#line 144
    if (SCOUNT > 0) {
#line 179
      ierr = MPI_Irecv((void *)RBUF, RCOUNT, 1275070475, PARTNER, RTAG, COMM, & request);
#line 184
      if (ierr == 0) {
#line 185
        ierr = MPI_Send((void const   *)((void *)SBUF), SCOUNT, 1275070475, PARTNER,
                        STAG, COMM);
      }
#line 190
      if (ierr == 0) {
#line 191
        ierr = MPI_Wait(& request, & status);
      }
    } else {
#line 209
      ierr = MPI_Recv((void *)RBUF, RCOUNT, 1275070475, PARTNER, RTAG, COMM, & status);
    }
  } else
#line 214
  if (SCOUNT > 0) {
#line 229
    ierr = MPI_Send((void const   *)((void *)SBUF), SCOUNT, 1275070475, PARTNER, STAG,
                    COMM);
  } else {
#line 233
    ierr = 0;
  }
#line 235
  if (ierr == 0) {
#line 235
    tmp = 1;
  } else {
#line 235
    tmp = 0;
  }
#line 235
  return (tmp);
}
}
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 992 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_size(MPI_Comm comm , int *size ) ;
#line 993
extern int MPI_Comm_rank(MPI_Comm comm , int *rank ) ;
#line 998
extern int MPI_Comm_split(MPI_Comm comm , int color , int key , MPI_Comm *newcomm ) ;
#line 129 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_init(MPI_Comm COMM , HPL_T_ORDER const   ORDER , int const   NPROW ,
                  int const   NPCOL , HPL_T_grid *GRID ) ;
#line 53 "../HPL_grid_init.c"
int HPL_grid_init(MPI_Comm COMM , HPL_T_ORDER const   ORDER , int const   NPROW ,
                  int const   NPCOL , HPL_T_grid *GRID ) 
{ 
  int hdim ;
  int hplerr ;
  int ierr ;
  int ip2 ;
  int k ;
  int mask ;
  int mycol ;
  int myrow ;
  int nprocs ;
  int rank ;
  int size ;
  int tmp ;

  {
#line 113
  hplerr = 0;
#line 118
  MPI_Comm_rank(COMM, & rank);
#line 118
  MPI_Comm_size(COMM, & size);
#line 122
  nprocs = (int )(NPROW * NPCOL);
#line 123
  if (nprocs > size) {
#line 124
    HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
  } else
#line 123
  if (NPROW < 1) {
#line 124
    HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
  } else
#line 123
  if (NPCOL < 1) {
#line 124
    HPL_pabort(124, "HPL_grid_init", "Illegal Grid");
  }
#line 128
  if ((unsigned int const   )ORDER == 201U) {
#line 130
    GRID->order = (HPL_T_ORDER )201;
#line 131
    myrow = rank / (int )NPCOL;
#line 131
    mycol = rank - myrow * (int )NPCOL;
  } else {
#line 135
    GRID->order = (HPL_T_ORDER )202;
#line 136
    mycol = rank / (int )NPROW;
#line 136
    myrow = rank - mycol * (int )NPROW;
  }
#line 138
  GRID->iam = rank;
#line 138
  GRID->myrow = myrow;
#line 138
  GRID->mycol = mycol;
#line 139
  GRID->nprow = (int )NPROW;
#line 139
  GRID->npcol = (int )NPCOL;
#line 139
  GRID->nprocs = nprocs;
#line 146
  hdim = 0;
#line 146
  ip2 = 1;
#line 146
  k = (int )NPROW;
#line 147
  while (k > 1) {
#line 147
    k >>= 1;
#line 147
    ip2 <<= 1;
#line 147
    hdim ++;
  }
#line 148
  GRID->row_ip2 = ip2;
#line 148
  GRID->row_hdim = hdim;
#line 150
  ip2 = 1;
#line 150
  mask = ip2;
#line 150
  k = (int )(NPROW - 1);
#line 151
  while (k > 1) {
#line 151
    k >>= 1;
#line 151
    ip2 <<= 1;
#line 151
    mask <<= 1;
#line 151
    mask ++;
  }
#line 152
  GRID->row_ip2m1 = ip2;
#line 152
  GRID->row_mask = mask;
#line 159
  hdim = 0;
#line 159
  ip2 = 1;
#line 159
  k = (int )NPCOL;
#line 160
  while (k > 1) {
#line 160
    k >>= 1;
#line 160
    ip2 <<= 1;
#line 160
    hdim ++;
  }
#line 161
  GRID->col_ip2 = ip2;
#line 161
  GRID->col_hdim = hdim;
#line 163
  ip2 = 1;
#line 163
  mask = ip2;
#line 163
  k = (int )(NPCOL - 1);
#line 164
  while (k > 1) {
#line 164
    k >>= 1;
#line 164
    ip2 <<= 1;
#line 164
    mask <<= 1;
#line 164
    mask ++;
  }
#line 165
  GRID->col_ip2m1 = ip2;
#line 165
  GRID->col_mask = mask;
#line 170
  if (rank < nprocs) {
#line 170
    tmp = 0;
  } else {
#line 170
    tmp = -32766;
  }
#line 170
  ierr = MPI_Comm_split(COMM, tmp, rank, & GRID->all_comm);
#line 172
  if (GRID->all_comm == 67108864) {
#line 172
    return (ierr);
  }
#line 174
  ierr = MPI_Comm_split(GRID->all_comm, myrow, mycol, & GRID->row_comm);
#line 175
  if (ierr != 0) {
#line 175
    hplerr = ierr;
  }
#line 177
  ierr = MPI_Comm_split(GRID->all_comm, mycol, myrow, & GRID->col_comm);
#line 178
  if (ierr != 0) {
#line 178
    hplerr = ierr;
  }
#line 180
  return (hplerr);
}
}
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_pnum(HPL_T_grid const   *GRID , int const   MYROW , int const   MYCOL ) ;
#line 53 "../HPL_pnum.c"
int HPL_pnum(HPL_T_grid const   *GRID , int const   MYROW , int const   MYCOL ) 
{ 


  {
#line 96
  if ((unsigned int const   )GRID->order == 201U) {
#line 97
    return ((int )(MYROW * GRID->npcol + MYCOL));
  } else {
#line 99
    return ((int )(MYCOL * GRID->nprow + MYROW));
  }
}
}
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_info(HPL_T_grid const   *GRID , int *NPROW , int *NPCOL , int *MYROW ,
                  int *MYCOL ) ;
#line 53 "../HPL_grid_info.c"
int HPL_grid_info(HPL_T_grid const   *GRID , int *NPROW , int *NPCOL , int *MYROW ,
                  int *MYCOL ) 
{ 


  {
#line 110
  *NPROW = (int )GRID->nprow;
#line 110
  *NPCOL = (int )GRID->npcol;
#line 111
  *MYROW = (int )GRID->myrow;
#line 111
  *MYCOL = (int )GRID->mycol;
#line 112
  return (0);
}
}
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 999 "//usr/include/mpich/mpi.h"
extern int MPI_Comm_free(MPI_Comm *comm ) ;
#line 137 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_grid_exit(HPL_T_grid *GRID ) ;
#line 53 "../HPL_grid_exit.c"
int HPL_grid_exit(HPL_T_grid *GRID ) 
{ 
  int hplerr ;
  int mpierr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 83
  hplerr = 0;
#line 87
  if (GRID->all_comm != 67108864) {
#line 89
    mpierr = MPI_Comm_free(& GRID->row_comm);
#line 90
    if (mpierr != 0) {
#line 90
      hplerr = mpierr;
    }
#line 91
    mpierr = MPI_Comm_free(& GRID->col_comm);
#line 92
    if (mpierr != 0) {
#line 92
      hplerr = mpierr;
    }
#line 93
    mpierr = MPI_Comm_free(& GRID->all_comm);
#line 94
    if (mpierr != 0) {
#line 94
      hplerr = mpierr;
    }
  }
#line 97
  GRID->order = (HPL_T_ORDER )202;
#line 99
  tmp___0 = -1;
#line 99
  GRID->mycol = tmp___0;
#line 99
  tmp = tmp___0;
#line 99
  GRID->myrow = tmp;
#line 99
  GRID->iam = tmp;
#line 100
  tmp___2 = -1;
#line 100
  GRID->nprocs = tmp___2;
#line 100
  tmp___1 = tmp___2;
#line 100
  GRID->npcol = tmp___1;
#line 100
  GRID->nprow = tmp___1;
#line 102
  tmp___5 = -1;
#line 102
  GRID->row_mask = tmp___5;
#line 102
  tmp___4 = tmp___5;
#line 102
  GRID->row_ip2m1 = tmp___4;
#line 102
  tmp___3 = tmp___4;
#line 102
  GRID->row_hdim = tmp___3;
#line 102
  GRID->row_ip2 = tmp___3;
#line 103
  tmp___8 = -1;
#line 103
  GRID->col_mask = tmp___8;
#line 103
  tmp___7 = tmp___8;
#line 103
  GRID->col_ip2m1 = tmp___7;
#line 103
  tmp___6 = tmp___7;
#line 103
  GRID->col_hdim = tmp___6;
#line 103
  GRID->col_ip2 = tmp___6;
#line 105
  return (hplerr);
}
}
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 161 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_broadcast(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , int const   ROOT ,
                  MPI_Comm COMM ) ;
#line 53 "../HPL_broadcast.c"
int HPL_broadcast(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , int const   ROOT ,
                  MPI_Comm COMM ) 
{ 
  int hplerr ;
  int ip2 ;
  int kk ;
  int mask ;
  int mpierr ;
  int mydist ;
  int partner ;
  int rank ;
  int size ;
  int tag ;
  MPI_Status status ;
  MPI_Datatype tmp ;
  MPI_Datatype tmp___0 ;

  {
#line 104
  hplerr = 0;
#line 104
  ip2 = 1;
#line 104
  mask = 1;
#line 104
  tag = 9001;
#line 111
  if (COUNT <= 0) {
#line 111
    return (0);
  }
#line 112
  mpierr = MPI_Comm_size(COMM, & size);
#line 112
  if (size <= 1) {
#line 112
    return (mpierr);
  }
#line 113
  mpierr = MPI_Comm_rank(COMM, & rank);
#line 115
  kk = size - 1;
#line 116
  while (kk > 1) {
#line 116
    kk >>= 1;
#line 116
    ip2 <<= 1;
#line 116
    mask <<= 1;
#line 116
    mask ++;
  }
#line 117
  if (rank < (int )ROOT) {
#line 117
    mydist = (size + rank) - (int )ROOT;
  } else {
#line 117
    mydist = rank - (int )ROOT;
  }
#line 119
  while (1) {
#line 121
    mask ^= ip2;
#line 122
    if ((mydist & mask) == 0) {
#line 124
      partner = mydist ^ ip2;
#line 126
      if (mydist & ip2) {
#line 128
        if (ROOT + (int const   )partner < (int const   )size) {
#line 128
          partner = (int )(ROOT + (int const   )partner);
        } else {
#line 128
          partner = (int )((ROOT + (int const   )partner) - (int const   )size);
        }
#line 129
        if ((unsigned int const   )DTYPE == 100U) {
#line 129
          tmp = 1275069445;
        } else {
#line 129
          tmp = 1275070475;
        }
#line 129
        mpierr = MPI_Recv(BUFFER, (int )COUNT, tmp, partner, tag, COMM, & status);
      } else
#line 132
      if (partner < size) {
#line 134
        if (ROOT + (int const   )partner < (int const   )size) {
#line 134
          partner = (int )(ROOT + (int const   )partner);
        } else {
#line 134
          partner = (int )((ROOT + (int const   )partner) - (int const   )size);
        }
#line 135
        if ((unsigned int const   )DTYPE == 100U) {
#line 135
          tmp___0 = 1275069445;
        } else {
#line 135
          tmp___0 = 1275070475;
        }
#line 135
        mpierr = MPI_Send((void const   *)BUFFER, (int )COUNT, tmp___0, partner, tag,
                          COMM);
      }
#line 138
      if (mpierr != 0) {
#line 138
        hplerr = mpierr;
      }
    }
#line 140
    ip2 >>= 1;
#line 119
    if (! ip2) {
#line 119
      break;
    }
  }
#line 143
  return (hplerr);
}
}
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 169 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_reduce(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , void (* const  OP)(int const    ,
                                                                                                void const   * ,
                                                                                                void * ,
                                                                                                HPL_T_TYPE const    ) ,
               int const   ROOT , MPI_Comm COMM ) ;
#line 53 "../HPL_reduce.c"
int HPL_reduce(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , void (* const  OP)(int const    ,
                                                                                                void const   * ,
                                                                                                void * ,
                                                                                                HPL_T_TYPE const    ) ,
               int const   ROOT , MPI_Comm COMM ) 
{ 
  MPI_Status status ;
  void *buffer ;
  int hplerr ;
  int d ;
  int i ;
  int ip2 ;
  int mask ;
  int mpierr ;
  int mydist ;
  int partner ;
  int rank ;
  int size ;
  int tag ;
  void *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  MPI_Datatype tmp___2 ;
  MPI_Datatype tmp___3 ;
  MPI_Datatype tmp___4 ;

  {
#line 112
  buffer = (void *)0;
#line 113
  hplerr = 0;
#line 113
  d = 1;
#line 113
  ip2 = 1;
#line 113
  mask = 0;
#line 113
  tag = 9001;
#line 119
  if (COUNT <= 0) {
#line 119
    return (0);
  }
#line 120
  mpierr = MPI_Comm_size(COMM, & size);
#line 121
  if (size == 1) {
#line 121
    return (0);
  }
#line 122
  mpierr = MPI_Comm_rank(COMM, & rank);
#line 123
  i = size - 1;
#line 123
  while (i > 1) {
#line 123
    i >>= 1;
#line 123
    d ++;
  }
#line 125
  if ((unsigned int const   )DTYPE == 100U) {
#line 126
    tmp = malloc((unsigned long )COUNT * sizeof(int ));
#line 126
    buffer = (void *)((int *)tmp);
  } else {
#line 128
    tmp___0 = malloc((unsigned long )COUNT * sizeof(double ));
#line 128
    buffer = (void *)((double *)tmp___0);
  }
#line 130
  if (! buffer) {
#line 131
    HPL_pabort(131, "HPL_reduce", "Memory allocation failed");
  }
#line 133
  if (rank < (int )ROOT) {
#line 133
    mydist = (size + rank) - (int )ROOT;
  } else {
#line 133
    mydist = rank - (int )ROOT;
  }
#line 133
  if (mydist == 0) {
#line 135
    while (1) {
#line 137
      if (ROOT + (int const   )ip2 < (int const   )size) {
#line 137
        tmp___1 = (int )(ROOT + (int const   )ip2);
      } else {
#line 137
        tmp___1 = (int )((ROOT + (int const   )ip2) - (int const   )size);
      }
#line 137
      if ((unsigned int const   )DTYPE == 100U) {
#line 137
        tmp___2 = 1275069445;
      } else {
#line 137
        tmp___2 = 1275070475;
      }
#line 137
      mpierr = MPI_Recv(buffer, (int )COUNT, tmp___2, tmp___1, tag, COMM, & status);
#line 140
      if (mpierr != 0) {
#line 140
        hplerr = mpierr;
      }
#line 141
      (*OP)(COUNT, (void const   *)buffer, BUFFER, DTYPE);
#line 142
      ip2 <<= 1;
#line 142
      d --;
#line 135
      if (! d) {
#line 135
        break;
      }
    }
  } else {
#line 147
    while (1) {
#line 149
      if ((mydist & mask) == 0) {
#line 151
        partner = mydist ^ ip2;
#line 153
        if (mydist & ip2) {
#line 155
          if (ROOT + (int const   )partner < (int const   )size) {
#line 155
            partner = (int )(ROOT + (int const   )partner);
          } else {
#line 155
            partner = (int )((ROOT + (int const   )partner) - (int const   )size);
          }
#line 156
          if ((unsigned int const   )DTYPE == 100U) {
#line 156
            tmp___3 = 1275069445;
          } else {
#line 156
            tmp___3 = 1275070475;
          }
#line 156
          mpierr = MPI_Send((void const   *)BUFFER, (int )COUNT, tmp___3, partner,
                            tag, COMM);
        } else
#line 159
        if (partner < size) {
#line 161
          if (ROOT + (int const   )partner < (int const   )size) {
#line 161
            partner = (int )(ROOT + (int const   )partner);
          } else {
#line 161
            partner = (int )((ROOT + (int const   )partner) - (int const   )size);
          }
#line 162
          if ((unsigned int const   )DTYPE == 100U) {
#line 162
            tmp___4 = 1275069445;
          } else {
#line 162
            tmp___4 = 1275070475;
          }
#line 162
          mpierr = MPI_Recv(buffer, (int )COUNT, tmp___4, partner, tag, COMM, & status);
#line 164
          (*OP)(COUNT, (void const   *)buffer, BUFFER, DTYPE);
        }
#line 166
        if (mpierr != 0) {
#line 166
          hplerr = mpierr;
        }
      }
#line 168
      mask ^= ip2;
#line 168
      ip2 <<= 1;
#line 168
      d --;
#line 147
      if (! d) {
#line 147
        break;
      }
    }
  }
#line 171
  if (buffer) {
#line 171
    free(buffer);
  }
#line 173
  return (hplerr);
}
}
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 178 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_all_reduce(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , void (* const  OP)(int const    ,
                                                                                                    void const   * ,
                                                                                                    void * ,
                                                                                                    HPL_T_TYPE const    ) ,
                   MPI_Comm COMM ) ;
#line 53 "../HPL_all_reduce.c"
int HPL_all_reduce(void *BUFFER , int const   COUNT , HPL_T_TYPE const   DTYPE , void (* const  OP)(int const    ,
                                                                                                    void const   * ,
                                                                                                    void * ,
                                                                                                    HPL_T_TYPE const    ) ,
                   MPI_Comm COMM ) 
{ 
  int hplerr ;
  int tmp ;

  {
#line 108
  hplerr = HPL_reduce(BUFFER, COUNT, DTYPE, OP, (int const   )0, COMM);
#line 109
  if (hplerr != 0) {
#line 109
    return (hplerr);
  }
#line 110
  tmp = HPL_broadcast(BUFFER, COUNT, DTYPE, (int const   )0, COMM);
#line 110
  return (tmp);
}
}
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 157 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
int HPL_barrier(MPI_Comm COMM ) ;
#line 53 "../HPL_barrier.c"
int HPL_barrier(MPI_Comm COMM ) 
{ 
  int i ;
  int tmp ;

  {
#line 82
  i = 0;
#line 86
  tmp = HPL_broadcast((void *)(& i), (int const   )1, (HPL_T_TYPE const   )100, (int const   )0,
                      COMM);
#line 86
  return (tmp);
}
}
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 194 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_min(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) ;
#line 53 "../HPL_min.c"
void HPL_min(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) 
{ 
  register int i ;
  int const   *a ;
  int *b ;
  double const   *a___0 ;
  double *b___0 ;

  {
#line 103
  if ((unsigned int const   )DTYPE == 100U) {
#line 105
    a = (int const   *)IN;
#line 106
    b = (int *)INOUT;
#line 107
    i = 0;
#line 107
    while (i < (int )N) {
#line 107
      if (*(a + i) < (int const   )*(b + i)) {
#line 107
        *(b + i) = (int )*(a + i);
      } else {
#line 107
        *(b + i) = *(b + i);
      }
#line 107
      i ++;
    }
  } else {
#line 111
    a___0 = (double const   *)IN;
#line 112
    b___0 = (double *)INOUT;
#line 113
    i = 0;
#line 113
    while (i < (int )N) {
#line 113
      if (*(a___0 + i) < (double const   )*(b___0 + i)) {
#line 113
        *(b___0 + i) = (double )*(a___0 + i);
      } else {
#line 113
        *(b___0 + i) = *(b___0 + i);
      }
#line 113
      i ++;
    }
  }
#line 118
  return;
}
}
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 187 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_max(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) ;
#line 53 "../HPL_max.c"
void HPL_max(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) 
{ 
  register int i ;
  int const   *a ;
  int *b ;
  double const   *a___0 ;
  double *b___0 ;

  {
#line 103
  if ((unsigned int const   )DTYPE == 100U) {
#line 105
    a = (int const   *)IN;
#line 106
    b = (int *)INOUT;
#line 107
    i = 0;
#line 107
    while (i < (int )N) {
#line 107
      if (*(a + i) > (int const   )*(b + i)) {
#line 107
        *(b + i) = (int )*(a + i);
      } else {
#line 107
        *(b + i) = *(b + i);
      }
#line 107
      i ++;
    }
  } else {
#line 111
    a___0 = (double const   *)IN;
#line 112
    b___0 = (double *)INOUT;
#line 113
    i = 0;
#line 113
    while (i < (int )N) {
#line 113
      if (*(a___0 + i) > (double const   )*(b___0 + i)) {
#line 113
        *(b___0 + i) = (double )*(a___0 + i);
      } else {
#line 113
        *(b___0 + i) = *(b___0 + i);
      }
#line 113
      i ++;
    }
  }
#line 118
  return;
}
}
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 201 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_grid.h"
void HPL_sum(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) ;
#line 53 "../HPL_sum.c"
void HPL_sum(int const   N , void const   *IN , void *INOUT , HPL_T_TYPE const   DTYPE ) 
{ 
  register int i ;
  int const   *a ;
  int *b ;
  double const   *a___0 ;
  double *b___0 ;

  {
#line 103
  if ((unsigned int const   )DTYPE == 100U) {
#line 105
    a = (int const   *)IN;
#line 106
    b = (int *)INOUT;
#line 107
    i = 0;
#line 107
    while (i < (int )N) {
#line 107
      *(b + i) += (int )*(a + i);
#line 107
      i ++;
    }
  } else {
#line 111
    a___0 = (double const   *)IN;
#line 112
    b___0 = (double *)INOUT;
#line 113
    i = 0;
#line 113
    while (i < (int )N) {
#line 113
      *(b___0 + i) += (double )*(a___0 + i);
#line 113
      i ++;
    }
  }
#line 118
  return;
}
}
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 109 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
void HPL_pdpanel_new(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const   M , int const   N ,
                     int const   JB , HPL_T_pmat *A , int const   IA , int const   JA ,
                     int const   TAG , HPL_T_panel **PANEL ) ;
#line 122
void HPL_pdpanel_init(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const   M , int const   N ,
                      int const   JB , HPL_T_pmat *A , int const   IA , int const   JA ,
                      int const   TAG , HPL_T_panel *PANEL ) ;
#line 53 "../HPL_pdpanel_new.c"
void HPL_pdpanel_new(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const   M , int const   N ,
                     int const   JB , HPL_T_pmat *A , int const   IA , int const   JA ,
                     int const   TAG , HPL_T_panel **PANEL ) 
{ 
  HPL_T_panel *p ;
  void *tmp ;

  {
#line 135
  p = (HPL_T_panel *)((void *)0);
#line 142
  tmp = malloc(sizeof(HPL_T_panel ));
#line 142
  p = (HPL_T_panel *)tmp;
#line 142
  if (! p) {
#line 144
    HPL_pabort(144, "HPL_pdpanel_new", "Memory allocation failed");
  }
#line 147
  HPL_pdpanel_init(GRID, ALGO, M, N, JB, A, IA, JA, TAG, p);
#line 148
  *PANEL = p;
#line 152
  return;
}
}
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 277 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_infog2l(int I , int J , int const   IMB , int const   MB , int const   INB ,
                 int const   NB , int const   RSRC , int const   CSRC , int const   MYROW ,
                 int const   MYCOL , int const   NPROW , int const   NPCOL , int *II ,
                 int *JJ , int *PROW , int *PCOL ) ;
#line 305
int HPL_numrocI(int const   N , int const   I , int const   INB , int const   NB ,
                int const   PROC , int const   SRCPROC , int const   NPROCS ) ;
#line 59 "../HPL_pdpanel_init.c"
void HPL_pdpanel_init(HPL_T_grid *GRID , HPL_T_palg *ALGO , int const   M , int const   N ,
                      int const   JB , HPL_T_pmat *A , int const   IA , int const   JA ,
                      int const   TAG , HPL_T_panel *PANEL ) 
{ 
  size_t dalign ;
  int icurcol ;
  int icurrow ;
  int ii ;
  int itmp1 ;
  int jj ;
  int lwork ;
  int ml2 ;
  int mp ;
  int mycol ;
  int myrow ;
  int nb ;
  int npcol ;
  int nprow ;
  int nq ;
  int nu ;
  int tmp ;
  int tmp___0 ;
  double *tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  double *tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  void *tmp___9 ;

  {
#line 148
  PANEL->grid = GRID;
#line 149
  PANEL->algo = ALGO;
#line 150
  PANEL->pmat = A;
#line 152
  myrow = GRID->myrow;
#line 152
  mycol = GRID->mycol;
#line 153
  nprow = GRID->nprow;
#line 153
  npcol = GRID->npcol;
#line 153
  nb = A->nb;
#line 155
  HPL_infog2l((int )IA, (int )JA, (int const   )nb, (int const   )nb, (int const   )nb,
              (int const   )nb, (int const   )0, (int const   )0, (int const   )myrow,
              (int const   )mycol, (int const   )nprow, (int const   )npcol, & ii,
              & jj, & icurrow, & icurcol);
#line 157
  mp = HPL_numrocI(M, IA, (int const   )nb, (int const   )nb, (int const   )myrow,
                   (int const   )0, (int const   )nprow);
#line 158
  nq = HPL_numrocI(N, JA, (int const   )nb, (int const   )nb, (int const   )mycol,
                   (int const   )0, (int const   )npcol);
#line 160
  PANEL->A = (A->A + ii) + jj * A->ld;
#line 164
  PANEL->WORK = (double *)((void *)0);
#line 164
  PANEL->L2 = (double *)((void *)0);
#line 164
  PANEL->L1 = (double *)((void *)0);
#line 165
  PANEL->DPIV = (double *)((void *)0);
#line 165
  PANEL->DINFO = (double *)((void *)0);
#line 165
  PANEL->U = (double *)((void *)0);
#line 166
  PANEL->IWORK = (int *)((void *)0);
#line 170
  PANEL->nb = nb;
#line 171
  PANEL->jb = (int )JB;
#line 172
  PANEL->m = (int )M;
#line 173
  PANEL->n = (int )N;
#line 174
  PANEL->ia = (int )IA;
#line 175
  PANEL->ja = (int )JA;
#line 176
  PANEL->mp = mp;
#line 177
  PANEL->nq = nq;
#line 178
  PANEL->ii = ii;
#line 179
  PANEL->jj = jj;
#line 180
  PANEL->lda = A->ld;
#line 181
  PANEL->prow = icurrow;
#line 182
  PANEL->pcol = icurcol;
#line 183
  PANEL->msgid = (int )TAG;
#line 188
  PANEL->ldl2 = 0;
#line 189
  PANEL->len = 0;
#line 204
  dalign = (unsigned long )ALGO->align * sizeof(double );
#line 206
  if (npcol == 1) {
#line 208
    tmp = (int )((JB * JB + JB) + 1);
#line 208
    PANEL->len = tmp;
#line 208
    lwork = ALGO->align + tmp;
#line 209
    if (nprow > 1) {
#line 210
      nu = nq - (int )JB;
#line 210
      if (0 > nu) {
#line 210
        tmp___0 = 0;
      } else {
#line 210
        tmp___0 = nu;
      }
#line 210
      lwork += (int )(JB * (int const   )tmp___0);
    }
#line 212
    tmp___2 = malloc((unsigned long )lwork * sizeof(double ));
#line 212
    tmp___1 = (double *)tmp___2;
#line 212
    PANEL->WORK = tmp___1;
#line 212
    if (! tmp___1) {
#line 214
      HPL_pabort(214, "HPL_pdpanel_init", "Memory allocation failed");
    }
#line 221
    if (myrow == icurrow) {
#line 221
      tmp___3 = (int )JB;
    } else {
#line 221
      tmp___3 = (int )((int const   )0);
    }
#line 221
    PANEL->L2 = PANEL->A + tmp___3;
#line 222
    PANEL->ldl2 = A->ld;
#line 223
    PANEL->L1 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
#line 224
    PANEL->DPIV = PANEL->L1 + JB * JB;
#line 225
    PANEL->DINFO = PANEL->DPIV + JB;
#line 225
    *(PANEL->DINFO) = 0.0;
#line 226
    if (nprow > 1) {
#line 226
      PANEL->U = PANEL->DINFO + 1;
    } else {
#line 226
      PANEL->U = (double *)((void *)0);
    }
  } else {
#line 230
    if (myrow == icurrow) {
#line 230
      ml2 = mp - (int )JB;
    } else {
#line 230
      ml2 = mp;
    }
#line 230
    if (0 > ml2) {
#line 230
      ml2 = 0;
    } else {
#line 230
      ml2 = ml2;
    }
#line 231
    itmp1 = (int )((JB * JB + JB) + 1);
#line 231
    PANEL->len = ml2 * (int )JB + itmp1;
#line 235
    if (mycol == icurcol) {
#line 235
      tmp___4 = itmp1;
    } else {
#line 235
      tmp___4 = PANEL->len;
    }
#line 235
    lwork = ALGO->align + tmp___4;
#line 237
    if (nprow > 1) {
#line 239
      if (mycol == icurcol) {
#line 239
        nu = nq - (int )JB;
      } else {
#line 239
        nu = nq;
      }
#line 240
      if (0 > nu) {
#line 240
        tmp___5 = 0;
      } else {
#line 240
        tmp___5 = nu;
      }
#line 240
      lwork += (int )(JB * (int const   )tmp___5);
    }
#line 243
    tmp___7 = malloc((unsigned long )lwork * sizeof(double ));
#line 243
    tmp___6 = (double *)tmp___7;
#line 243
    PANEL->WORK = tmp___6;
#line 243
    if (! tmp___6) {
#line 245
      HPL_pabort(245, "HPL_pdpanel_init", "Memory allocation failed");
    }
#line 257
    if (mycol == icurcol) {
#line 259
      if (myrow == icurrow) {
#line 259
        tmp___8 = (int )JB;
      } else {
#line 259
        tmp___8 = (int )((int const   )0);
      }
#line 259
      PANEL->L2 = PANEL->A + tmp___8;
#line 260
      PANEL->ldl2 = A->ld;
#line 261
      PANEL->L1 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
    } else {
#line 265
      PANEL->L2 = (double *)(((((size_t )PANEL->WORK + dalign) - 1UL) / dalign) * dalign);
#line 266
      if (1 > ml2) {
#line 266
        PANEL->ldl2 = 1;
      } else {
#line 266
        PANEL->ldl2 = ml2;
      }
#line 267
      PANEL->L1 = PANEL->L2 + ml2 * (int )JB;
    }
#line 270
    PANEL->DPIV = PANEL->L1 + JB * JB;
#line 271
    PANEL->DINFO = PANEL->DPIV + JB;
#line 271
    *(PANEL->DINFO) = 0.0;
#line 272
    if (nprow > 1) {
#line 272
      PANEL->U = PANEL->DINFO + 1;
    } else {
#line 272
      PANEL->U = (double *)((void *)0);
    }
  }
#line 330
  if (nprow == 1) {
#line 330
    lwork = (int )JB;
  } else {
#line 333
    itmp1 = (int )(JB << 1);
#line 333
    lwork = nprow + 1;
#line 333
    if (itmp1 > lwork) {
#line 333
      itmp1 = itmp1;
    } else {
#line 333
      itmp1 = lwork;
    }
#line 334
    lwork = ((4 + 9 * (int )JB) + 3 * nprow) + itmp1;
  }
#line 337
  tmp___9 = malloc((unsigned long )lwork * sizeof(int ));
#line 337
  PANEL->IWORK = (int *)tmp___9;
#line 339
  if ((unsigned long )PANEL->IWORK == (unsigned long )((void *)0)) {
#line 340
    HPL_pabort(340, "HPL_pdpanel_init", "Memory allocation failed");
  }
#line 342
  *(PANEL->IWORK) = -1;
#line 346
  return;
}
}
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 135 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_panel.h"
int HPL_pdpanel_disp(HPL_T_panel **PANEL ) ;
#line 139
int HPL_pdpanel_free(HPL_T_panel *PANEL ) ;
#line 53 "../HPL_pdpanel_disp.c"
int HPL_pdpanel_disp(HPL_T_panel **PANEL ) 
{ 
  int mpierr ;

  {
#line 89
  mpierr = HPL_pdpanel_free(*PANEL);
#line 90
  if (*PANEL) {
#line 90
    free((void *)*PANEL);
  }
#line 91
  *PANEL = (HPL_T_panel *)((void *)0);
#line 93
  return (mpierr);
}
}
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 50 "../HPL_pdpanel_free.c"
int HPL_pdpanel_free(HPL_T_panel *PANEL ) 
{ 


  {
#line 79
  if ((PANEL->pmat)->info == 0) {
#line 79
    (PANEL->pmat)->info = (int )*(PANEL->DINFO);
  }
#line 97
  if (PANEL->WORK) {
#line 97
    free((void *)PANEL->WORK);
  }
#line 98
  if (PANEL->IWORK) {
#line 98
    free((void *)PANEL->IWORK);
  }
#line 100
  return (0);
}
}
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 252 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxg2l(int const   IG , int const   INB , int const   NB , int const   SRCPROC ,
                int const   NPROCS ) ;
#line 53 "../HPL_indxg2l.c"
int HPL_indxg2l(int const   IG , int const   INB , int const   NB , int const   SRCPROC ,
                int const   NPROCS ) 
{ 
  int i ;
  int j ;
  int tmp ;

  {
#line 113
  if (IG < INB) {
#line 118
    return ((int )IG);
  } else
#line 113
  if (SRCPROC == -1) {
#line 118
    return ((int )IG);
  } else
#line 113
  if (NPROCS == 1) {
#line 118
    return ((int )IG);
  }
#line 131
  i = (int )((IG - INB) / NB);
#line 131
  j = i / (int )NPROCS;
#line 146
  if ((i + 1) - (j + 1) * (int )NPROCS) {
#line 146
    tmp = (int )(IG - INB);
  } else {
#line 146
    tmp = (int )IG;
  }
#line 146
  return ((int )(NB * (int const   )(j - i) + (int const   )tmp));
}
}
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 242 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_indxg2lp(int *IL , int *PROC , int const   IG , int const   INB , int const   NB ,
                  int const   SRCPROC , int const   NPROCS ) ;
#line 53 "../HPL_indxg2lp.c"
void HPL_indxg2lp(int *IL , int *PROC , int const   IG , int const   INB , int const   NB ,
                  int const   SRCPROC , int const   NPROCS ) 
{ 
  int i ;
  int j ;
  int tmp ;

  {
#line 126
  if (IG < INB) {
#line 132
    *IL = (int )IG;
#line 133
    *PROC = (int )SRCPROC;
  } else
#line 126
  if (SRCPROC == -1) {
#line 132
    *IL = (int )IG;
#line 133
    *PROC = (int )SRCPROC;
  } else
#line 126
  if (NPROCS == 1) {
#line 132
    *IL = (int )IG;
#line 133
    *PROC = (int )SRCPROC;
  } else {
#line 149
    i = (int )((IG - INB) / NB);
#line 149
    j = i / (int )NPROCS;
#line 154
    *PROC = (int )((SRCPROC + 1) + (int const   )i);
#line 155
    *PROC -= (*PROC / (int )NPROCS) * (int )NPROCS;
#line 170
    if ((i + 1) - (j + 1) * (int )NPROCS) {
#line 170
      tmp = (int )(IG - INB);
    } else {
#line 170
      tmp = (int )IG;
    }
#line 170
    *IL = (int )(NB * (int const   )(j - i) + (int const   )tmp);
  }
#line 176
  return;
}
}
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 260 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxg2p(int const   IG , int const   INB , int const   NB , int const   SRCPROC ,
                int const   NPROCS ) ;
#line 53 "../HPL_indxg2p.c"
int HPL_indxg2p(int const   IG , int const   INB , int const   NB , int const   SRCPROC ,
                int const   NPROCS ) 
{ 
  int proc ;

  {
#line 112
  if (IG < INB) {
#line 117
    return ((int )SRCPROC);
  } else
#line 112
  if (SRCPROC == -1) {
#line 117
    return ((int )SRCPROC);
  } else
#line 112
  if (NPROCS == 1) {
#line 117
    return ((int )SRCPROC);
  }
#line 123
  proc = (int )((SRCPROC + 1) + (IG - INB) / NB);
#line 124
  return (proc - (proc / (int )NPROCS) * (int )NPROCS);
}
}
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 268 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_indxl2g(int const   IL , int const   INB , int const   NB , int const   PROC ,
                int const   SRCPROC , int const   NPROCS ) ;
#line 53 "../HPL_indxl2g.c"
int HPL_indxl2g(int const   IL , int const   INB , int const   NB , int const   PROC ,
                int const   SRCPROC , int const   NPROCS ) 
{ 


  {
#line 115
  if (SRCPROC == -1) {
#line 121
    return ((int )IL);
  } else
#line 115
  if (NPROCS == 1) {
#line 121
    return ((int )IL);
  } else
#line 123
  if (PROC == SRCPROC) {
#line 128
    if (IL < INB) {
#line 133
      return ((int )IL);
    }
#line 140
    return ((int )(((NPROCS - 1) * NB) * ((IL - INB) / NB + 1) + IL));
  } else
#line 142
  if (PROC < SRCPROC) {
#line 152
    return ((int )((NB * (((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + NPROCS) + IL) + INB));
  } else {
#line 159
    return ((int )((NB * ((((NPROCS - 1) * (IL / NB) + PROC) - SRCPROC) - 1) + IL) + INB));
  }
}
}
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 53 "../HPL_infog2l.c"
void HPL_infog2l(int I , int J , int const   IMB , int const   MB , int const   INB ,
                 int const   NB , int const   RSRC , int const   CSRC , int const   MYROW ,
                 int const   MYCOL , int const   NPROW , int const   NPCOL , int *II ,
                 int *JJ , int *PROW , int *PCOL ) 
{ 
  int ilocblk ;
  int imb ;
  int inb ;
  int mb ;
  int mydist ;
  int nb ;
  int nblocks ;
  int csrc ;
  int rsrc ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 186
  imb = (int )IMB;
#line 187
  *PROW = (int )RSRC;
#line 189
  if (*PROW == -1) {
#line 195
    *II = I;
  } else
#line 189
  if (NPROW == 1) {
#line 195
    *II = I;
  } else
#line 197
  if (I < imb) {
#line 202
    if (MYROW == (int const   )*PROW) {
#line 202
      *II = I;
    } else {
#line 202
      *II = 0;
    }
  } else {
#line 206
    mb = (int )MB;
#line 207
    rsrc = *PROW;
#line 222
    if (MYROW == (int const   )rsrc) {
#line 228
      nblocks = (I - imb) / mb + 1;
#line 229
      *PROW += nblocks;
#line 230
      *PROW -= (*PROW / (int )NPROW) * (int )NPROW;
#line 250
      if (nblocks < (int )NPROW) {
#line 252
        *II = imb;
      } else {
#line 256
        ilocblk = nblocks / (int )NPROW;
#line 257
        if (ilocblk * (int )NPROW >= nblocks) {
#line 259
          if (MYROW == (int const   )*PROW) {
#line 259
            *II = I + (ilocblk - nblocks) * mb;
          } else {
#line 259
            *II = imb + (ilocblk - 1) * mb;
          }
        } else {
#line 265
          *II = imb + ilocblk * mb;
        }
      }
    } else {
#line 275
      I -= imb;
#line 275
      nblocks = I / mb + 1;
#line 276
      *PROW += nblocks;
#line 277
      *PROW -= (*PROW / (int )NPROW) * (int )NPROW;
#line 283
      mydist = (int )(MYROW - (int const   )rsrc);
#line 283
      if (mydist < 0) {
#line 283
        mydist += (int )NPROW;
      }
#line 292
      if (nblocks < (int )NPROW) {
#line 294
        mydist -= nblocks;
#line 295
        if (mydist < 0) {
#line 295
          *II = mb;
        } else {
#line 295
          if (MYROW == (int const   )*PROW) {
#line 295
            tmp = I + (1 - nblocks) * mb;
          } else {
#line 295
            tmp = 0;
          }
#line 295
          *II = tmp;
        }
      } else {
#line 301
        ilocblk = nblocks / (int )NPROW;
#line 302
        mydist -= nblocks - ilocblk * (int )NPROW;
#line 303
        if (mydist < 0) {
#line 303
          *II = (ilocblk + 1) * mb;
        } else {
#line 303
          if (MYROW == (int const   )*PROW) {
#line 303
            tmp___0 = ((ilocblk - nblocks) + 1) * mb + I;
          } else {
#line 303
            tmp___0 = ilocblk * mb;
          }
#line 303
          *II = tmp___0;
        }
      }
    }
  }
#line 313
  inb = (int )INB;
#line 314
  *PCOL = (int )CSRC;
#line 316
  if (*PCOL == -1) {
#line 318
    *JJ = J;
  } else
#line 316
  if (NPCOL == 1) {
#line 318
    *JJ = J;
  } else
#line 320
  if (J < inb) {
#line 322
    if (MYCOL == (int const   )*PCOL) {
#line 322
      *JJ = J;
    } else {
#line 322
      *JJ = 0;
    }
  } else {
#line 326
    nb = (int )NB;
#line 327
    csrc = *PCOL;
#line 329
    if (MYCOL == (int const   )csrc) {
#line 331
      nblocks = (J - inb) / nb + 1;
#line 332
      *PCOL += nblocks;
#line 333
      *PCOL -= (*PCOL / (int )NPCOL) * (int )NPCOL;
#line 335
      if (nblocks < (int )NPCOL) {
#line 337
        *JJ = inb;
      } else {
#line 341
        ilocblk = nblocks / (int )NPCOL;
#line 342
        if (ilocblk * (int )NPCOL >= nblocks) {
#line 344
          if (MYCOL == (int const   )*PCOL) {
#line 344
            *JJ = J + (ilocblk - nblocks) * nb;
          } else {
#line 344
            *JJ = inb + (ilocblk - 1) * nb;
          }
        } else {
#line 350
          *JJ = inb + ilocblk * nb;
        }
      }
    } else {
#line 356
      J -= inb;
#line 356
      nblocks = J / nb + 1;
#line 357
      *PCOL += nblocks;
#line 358
      *PCOL -= (*PCOL / (int )NPCOL) * (int )NPCOL;
#line 360
      mydist = (int )(MYCOL - (int const   )csrc);
#line 360
      if (mydist < 0) {
#line 360
        mydist += (int )NPCOL;
      }
#line 362
      if (nblocks < (int )NPCOL) {
#line 364
        mydist -= nblocks;
#line 365
        if (mydist < 0) {
#line 365
          *JJ = nb;
        } else {
#line 365
          if (MYCOL == (int const   )*PCOL) {
#line 365
            tmp___1 = J + (1 - nblocks) * nb;
          } else {
#line 365
            tmp___1 = 0;
          }
#line 365
          *JJ = tmp___1;
        }
      } else {
#line 370
        ilocblk = nblocks / (int )NPCOL;
#line 371
        mydist -= nblocks - ilocblk * (int )NPCOL;
#line 372
        if (mydist < 0) {
#line 372
          *JJ = (ilocblk + 1) * nb;
        } else {
#line 372
          if (MYCOL == (int const   )*PCOL) {
#line 372
            tmp___2 = ((ilocblk - nblocks) + 1) * nb + J;
          } else {
#line 372
            tmp___2 = ilocblk * nb;
          }
#line 372
          *JJ = tmp___2;
        }
      }
    }
  }
#line 382
  return;
}
}
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 296 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
int HPL_numroc(int const   N , int const   INB , int const   NB , int const   PROC ,
               int const   SRCPROC , int const   NPROCS ) ;
#line 53 "../HPL_numroc.c"
int HPL_numroc(int const   N , int const   INB , int const   NB , int const   PROC ,
               int const   SRCPROC , int const   NPROCS ) 
{ 
  int tmp ;

  {
#line 116
  tmp = HPL_numrocI(N, (int const   )0, INB, NB, PROC, SRCPROC, NPROCS);
#line 116
  return (tmp);
}
}
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 53 "../HPL_numrocI.c"
int HPL_numrocI(int const   N , int const   I , int const   INB , int const   NB ,
                int const   PROC , int const   SRCPROC , int const   NPROCS ) 
{ 
  int ilocblk ;
  int inb ;
  int mydist ;
  int nblocks ;
  int srcproc ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 126
  if (SRCPROC == -1) {
#line 131
    return ((int )N);
  } else
#line 126
  if (NPROCS == 1) {
#line 131
    return ((int )N);
  }
#line 135
  srcproc = (int )SRCPROC;
#line 137
  inb = (int )(INB - I);
#line 137
  if (inb <= 0) {
#line 143
    nblocks = - inb / (int )NB + 1;
#line 143
    srcproc += nblocks;
#line 144
    srcproc -= (srcproc / (int )NPROCS) * (int )NPROCS;
#line 145
    inb += nblocks * (int )NB;
  }
#line 162
  if (PROC == (int const   )srcproc) {
#line 168
    if (N <= (int const   )inb) {
#line 168
      return ((int )N);
    }
#line 173
    nblocks = (int )((N - (int const   )inb) / NB + 1);
#line 191
    if (nblocks < (int )NPROCS) {
#line 191
      return (inb);
    }
#line 193
    ilocblk = nblocks / (int )NPROCS;
#line 194
    if (nblocks - ilocblk * (int )NPROCS) {
#line 194
      tmp = inb + ilocblk * (int )NB;
    } else {
#line 194
      tmp = (int )(N + (int const   )((ilocblk - nblocks) * (int )NB));
    }
#line 194
    return (tmp);
  } else {
#line 202
    if (N <= (int const   )inb) {
#line 202
      return (0);
    }
#line 207
    nblocks = (int )((N - (int const   )inb) / NB + 1);
#line 213
    mydist = (int )(PROC - (int const   )srcproc);
#line 213
    if (mydist < 0) {
#line 213
      mydist += (int )NPROCS;
    }
#line 230
    if (nblocks < (int )NPROCS) {
#line 231
      if (mydist < nblocks) {
#line 231
        tmp___1 = (int )NB;
      } else {
#line 231
        if (mydist > nblocks) {
#line 231
          tmp___0 = 0;
        } else {
#line 231
          tmp___0 = (int )((N - (int const   )inb) + NB * (int const   )(1 - nblocks));
        }
#line 231
        tmp___1 = (int )((int const   )tmp___0);
      }
#line 231
      return (tmp___1);
    }
#line 234
    ilocblk = nblocks / (int )NPROCS;
#line 235
    mydist -= nblocks - ilocblk * (int )NPROCS;
#line 236
    if (mydist < 0) {
#line 236
      tmp___3 = (ilocblk + 1) * (int )NB;
    } else {
#line 236
      if (mydist > 0) {
#line 236
        tmp___2 = ilocblk * (int )NB;
      } else {
#line 236
        tmp___2 = (int )((N - (int const   )inb) + NB * (int const   )((ilocblk - nblocks) + 1));
      }
#line 236
      tmp___3 = tmp___2;
    }
#line 236
    return (tmp___3);
  }
}
}
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 316 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp00N(int const   M , int const   N , double *A , int const   LDA , int const   *IPIV ) ;
#line 60 "../HPL_dlaswp00N.c"
void HPL_dlaswp00N(int const   M , int const   N , double *A , int const   LDA , int const   *IPIV ) 
{ 
  register double r ;
  double *a0 ;
  double *a1 ;
  int incA ;
  int ip ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 117
  incA = (int )((unsigned int )LDA << 5);
#line 124
  if (M <= 0) {
#line 124
    return;
  } else
#line 124
  if (N <= 0) {
#line 124
    return;
  }
#line 126
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 126
  nr = (int )(N - (int const   )nu);
#line 129
  j = 0;
#line 129
  while (j < nu) {
#line 131
    i = 0;
#line 131
    while (i < (int )M) {
#line 133
      ip = (int )*(IPIV + i);
#line 133
      if (i != ip) {
#line 135
        a0 = A + i;
#line 135
        a1 = A + ip;
#line 137
        r = *a0;
#line 137
        *a0 = *a1;
#line 137
        *a1 = r;
#line 137
        a0 += LDA;
#line 137
        a1 += LDA;
#line 139
        r = *a0;
#line 139
        *a0 = *a1;
#line 139
        *a1 = r;
#line 139
        a0 += LDA;
#line 139
        a1 += LDA;
#line 142
        r = *a0;
#line 142
        *a0 = *a1;
#line 142
        *a1 = r;
#line 142
        a0 += LDA;
#line 142
        a1 += LDA;
#line 143
        r = *a0;
#line 143
        *a0 = *a1;
#line 143
        *a1 = r;
#line 143
        a0 += LDA;
#line 143
        a1 += LDA;
#line 146
        r = *a0;
#line 146
        *a0 = *a1;
#line 146
        *a1 = r;
#line 146
        a0 += LDA;
#line 146
        a1 += LDA;
#line 147
        r = *a0;
#line 147
        *a0 = *a1;
#line 147
        *a1 = r;
#line 147
        a0 += LDA;
#line 147
        a1 += LDA;
#line 148
        r = *a0;
#line 148
        *a0 = *a1;
#line 148
        *a1 = r;
#line 148
        a0 += LDA;
#line 148
        a1 += LDA;
#line 149
        r = *a0;
#line 149
        *a0 = *a1;
#line 149
        *a1 = r;
#line 149
        a0 += LDA;
#line 149
        a1 += LDA;
#line 152
        r = *a0;
#line 152
        *a0 = *a1;
#line 152
        *a1 = r;
#line 152
        a0 += LDA;
#line 152
        a1 += LDA;
#line 153
        r = *a0;
#line 153
        *a0 = *a1;
#line 153
        *a1 = r;
#line 153
        a0 += LDA;
#line 153
        a1 += LDA;
#line 154
        r = *a0;
#line 154
        *a0 = *a1;
#line 154
        *a1 = r;
#line 154
        a0 += LDA;
#line 154
        a1 += LDA;
#line 155
        r = *a0;
#line 155
        *a0 = *a1;
#line 155
        *a1 = r;
#line 155
        a0 += LDA;
#line 155
        a1 += LDA;
#line 156
        r = *a0;
#line 156
        *a0 = *a1;
#line 156
        *a1 = r;
#line 156
        a0 += LDA;
#line 156
        a1 += LDA;
#line 157
        r = *a0;
#line 157
        *a0 = *a1;
#line 157
        *a1 = r;
#line 157
        a0 += LDA;
#line 157
        a1 += LDA;
#line 158
        r = *a0;
#line 158
        *a0 = *a1;
#line 158
        *a1 = r;
#line 158
        a0 += LDA;
#line 158
        a1 += LDA;
#line 159
        r = *a0;
#line 159
        *a0 = *a1;
#line 159
        *a1 = r;
#line 159
        a0 += LDA;
#line 159
        a1 += LDA;
#line 162
        r = *a0;
#line 162
        *a0 = *a1;
#line 162
        *a1 = r;
#line 162
        a0 += LDA;
#line 162
        a1 += LDA;
#line 163
        r = *a0;
#line 163
        *a0 = *a1;
#line 163
        *a1 = r;
#line 163
        a0 += LDA;
#line 163
        a1 += LDA;
#line 164
        r = *a0;
#line 164
        *a0 = *a1;
#line 164
        *a1 = r;
#line 164
        a0 += LDA;
#line 164
        a1 += LDA;
#line 165
        r = *a0;
#line 165
        *a0 = *a1;
#line 165
        *a1 = r;
#line 165
        a0 += LDA;
#line 165
        a1 += LDA;
#line 166
        r = *a0;
#line 166
        *a0 = *a1;
#line 166
        *a1 = r;
#line 166
        a0 += LDA;
#line 166
        a1 += LDA;
#line 167
        r = *a0;
#line 167
        *a0 = *a1;
#line 167
        *a1 = r;
#line 167
        a0 += LDA;
#line 167
        a1 += LDA;
#line 168
        r = *a0;
#line 168
        *a0 = *a1;
#line 168
        *a1 = r;
#line 168
        a0 += LDA;
#line 168
        a1 += LDA;
#line 169
        r = *a0;
#line 169
        *a0 = *a1;
#line 169
        *a1 = r;
#line 169
        a0 += LDA;
#line 169
        a1 += LDA;
#line 170
        r = *a0;
#line 170
        *a0 = *a1;
#line 170
        *a1 = r;
#line 170
        a0 += LDA;
#line 170
        a1 += LDA;
#line 171
        r = *a0;
#line 171
        *a0 = *a1;
#line 171
        *a1 = r;
#line 171
        a0 += LDA;
#line 171
        a1 += LDA;
#line 172
        r = *a0;
#line 172
        *a0 = *a1;
#line 172
        *a1 = r;
#line 172
        a0 += LDA;
#line 172
        a1 += LDA;
#line 173
        r = *a0;
#line 173
        *a0 = *a1;
#line 173
        *a1 = r;
#line 173
        a0 += LDA;
#line 173
        a1 += LDA;
#line 174
        r = *a0;
#line 174
        *a0 = *a1;
#line 174
        *a1 = r;
#line 174
        a0 += LDA;
#line 174
        a1 += LDA;
#line 175
        r = *a0;
#line 175
        *a0 = *a1;
#line 175
        *a1 = r;
#line 175
        a0 += LDA;
#line 175
        a1 += LDA;
#line 176
        r = *a0;
#line 176
        *a0 = *a1;
#line 176
        *a1 = r;
#line 176
        a0 += LDA;
#line 176
        a1 += LDA;
#line 177
        r = *a0;
#line 177
        *a0 = *a1;
#line 177
        *a1 = r;
#line 177
        a0 += LDA;
#line 177
        a1 += LDA;
      }
#line 131
      i ++;
    }
#line 129
    j += 32;
#line 129
    A += incA;
  }
#line 183
  if (nr > 0) {
#line 185
    i = 0;
#line 185
    while (i < (int )M) {
#line 187
      ip = (int )*(IPIV + i);
#line 187
      if (i != ip) {
#line 189
        a0 = A + i;
#line 189
        a1 = A + ip;
#line 190
        j = 0;
#line 190
        while (j < nr) {
#line 191
          r = *a0;
#line 191
          *a0 = *a1;
#line 191
          *a1 = r;
#line 190
          j ++;
#line 190
          a0 += LDA;
#line 190
          a1 += LDA;
        }
      }
#line 185
      i ++;
    }
  }
#line 198
  return;
}
}
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 324 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp10N(int const   M , int const   N , double *A , int const   LDA , int const   *IPIV ) ;
#line 60 "../HPL_dlaswp10N.c"
void HPL_dlaswp10N(int const   M , int const   N , double *A , int const   LDA , int const   *IPIV ) 
{ 
  double r ;
  double *a0 ;
  double *a1 ;
  int incA ;
  int jp ;
  int mr ;
  int mu ;
  register int i ;
  register int j ;

  {
#line 116
  incA = 1 << 5;
#line 122
  if (M <= 0) {
#line 122
    return;
  } else
#line 122
  if (N <= 0) {
#line 122
    return;
  }
#line 124
  mu = (int )(((unsigned int )M >> 5) << 5);
#line 124
  mr = (int )(M - (int const   )mu);
#line 127
  j = 0;
#line 127
  while (j < (int )N) {
#line 129
    jp = (int )*(IPIV + j);
#line 129
    if (j != jp) {
#line 131
      a0 = A + j * (int )LDA;
#line 131
      a1 = A + jp * (int )LDA;
#line 133
      i = 0;
#line 133
      while (i < mu) {
#line 135
        r = *a0;
#line 135
        *a0 = *a1;
#line 135
        *a1 = r;
#line 137
        r = *(a0 + 1);
#line 137
        *(a0 + 1) = *(a1 + 1);
#line 137
        *(a1 + 1) = r;
#line 140
        r = *(a0 + 2);
#line 140
        *(a0 + 2) = *(a1 + 2);
#line 140
        *(a1 + 2) = r;
#line 141
        r = *(a0 + 3);
#line 141
        *(a0 + 3) = *(a1 + 3);
#line 141
        *(a1 + 3) = r;
#line 144
        r = *(a0 + 4);
#line 144
        *(a0 + 4) = *(a1 + 4);
#line 144
        *(a1 + 4) = r;
#line 145
        r = *(a0 + 5);
#line 145
        *(a0 + 5) = *(a1 + 5);
#line 145
        *(a1 + 5) = r;
#line 146
        r = *(a0 + 6);
#line 146
        *(a0 + 6) = *(a1 + 6);
#line 146
        *(a1 + 6) = r;
#line 147
        r = *(a0 + 7);
#line 147
        *(a0 + 7) = *(a1 + 7);
#line 147
        *(a1 + 7) = r;
#line 150
        r = *(a0 + 8);
#line 150
        *(a0 + 8) = *(a1 + 8);
#line 150
        *(a1 + 8) = r;
#line 151
        r = *(a0 + 9);
#line 151
        *(a0 + 9) = *(a1 + 9);
#line 151
        *(a1 + 9) = r;
#line 152
        r = *(a0 + 10);
#line 152
        *(a0 + 10) = *(a1 + 10);
#line 152
        *(a1 + 10) = r;
#line 153
        r = *(a0 + 11);
#line 153
        *(a0 + 11) = *(a1 + 11);
#line 153
        *(a1 + 11) = r;
#line 154
        r = *(a0 + 12);
#line 154
        *(a0 + 12) = *(a1 + 12);
#line 154
        *(a1 + 12) = r;
#line 155
        r = *(a0 + 13);
#line 155
        *(a0 + 13) = *(a1 + 13);
#line 155
        *(a1 + 13) = r;
#line 156
        r = *(a0 + 14);
#line 156
        *(a0 + 14) = *(a1 + 14);
#line 156
        *(a1 + 14) = r;
#line 157
        r = *(a0 + 15);
#line 157
        *(a0 + 15) = *(a1 + 15);
#line 157
        *(a1 + 15) = r;
#line 160
        r = *(a0 + 16);
#line 160
        *(a0 + 16) = *(a1 + 16);
#line 160
        *(a1 + 16) = r;
#line 161
        r = *(a0 + 17);
#line 161
        *(a0 + 17) = *(a1 + 17);
#line 161
        *(a1 + 17) = r;
#line 162
        r = *(a0 + 18);
#line 162
        *(a0 + 18) = *(a1 + 18);
#line 162
        *(a1 + 18) = r;
#line 163
        r = *(a0 + 19);
#line 163
        *(a0 + 19) = *(a1 + 19);
#line 163
        *(a1 + 19) = r;
#line 164
        r = *(a0 + 20);
#line 164
        *(a0 + 20) = *(a1 + 20);
#line 164
        *(a1 + 20) = r;
#line 165
        r = *(a0 + 21);
#line 165
        *(a0 + 21) = *(a1 + 21);
#line 165
        *(a1 + 21) = r;
#line 166
        r = *(a0 + 22);
#line 166
        *(a0 + 22) = *(a1 + 22);
#line 166
        *(a1 + 22) = r;
#line 167
        r = *(a0 + 23);
#line 167
        *(a0 + 23) = *(a1 + 23);
#line 167
        *(a1 + 23) = r;
#line 168
        r = *(a0 + 24);
#line 168
        *(a0 + 24) = *(a1 + 24);
#line 168
        *(a1 + 24) = r;
#line 169
        r = *(a0 + 25);
#line 169
        *(a0 + 25) = *(a1 + 25);
#line 169
        *(a1 + 25) = r;
#line 170
        r = *(a0 + 26);
#line 170
        *(a0 + 26) = *(a1 + 26);
#line 170
        *(a1 + 26) = r;
#line 171
        r = *(a0 + 27);
#line 171
        *(a0 + 27) = *(a1 + 27);
#line 171
        *(a1 + 27) = r;
#line 172
        r = *(a0 + 28);
#line 172
        *(a0 + 28) = *(a1 + 28);
#line 172
        *(a1 + 28) = r;
#line 173
        r = *(a0 + 29);
#line 173
        *(a0 + 29) = *(a1 + 29);
#line 173
        *(a1 + 29) = r;
#line 174
        r = *(a0 + 30);
#line 174
        *(a0 + 30) = *(a1 + 30);
#line 174
        *(a1 + 30) = r;
#line 175
        r = *(a0 + 31);
#line 175
        *(a0 + 31) = *(a1 + 31);
#line 175
        *(a1 + 31) = r;
#line 133
        i += incA;
#line 133
        a0 += incA;
#line 133
        a1 += incA;
      }
#line 179
      i = 0;
#line 179
      while (i < mr) {
#line 180
        r = *(a0 + i);
#line 180
        *(a0 + i) = *(a1 + i);
#line 180
        *(a1 + i) = r;
#line 179
        i ++;
      }
    }
#line 127
    j ++;
  }
#line 186
  return;
}
}
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 332 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp01N(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp01N.c"
void HPL_dlaswp01N(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double *a0 ;
  double *a1 ;
  int incA ;
  int incU ;
  int lda1 ;
  int nu ;
  int nr ;
  register int i ;
  register int j ;

  {
#line 144
  incA = (int )((unsigned int )LDA << 5);
#line 144
  incU = (int )((unsigned int )LDU << 5);
#line 153
  if (M <= 0) {
#line 153
    return;
  } else
#line 153
  if (N <= 0) {
#line 153
    return;
  }
#line 155
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 155
  nr = (int )(N - (int const   )nu);
#line 158
  j = 0;
#line 158
  while (j < nu) {
#line 160
    i = 0;
#line 160
    while (i < (int )M) {
#line 162
      a0 = A + *(LINDXA + i);
#line 163
      if (*(LINDXAU + i) >= 0) {
#line 163
        a1 = U + *(LINDXAU + i);
#line 163
        lda1 = (int )LDU;
      } else {
#line 164
        a1 = A - *(LINDXAU + i);
#line 164
        lda1 = (int )LDA;
      }
#line 166
      *a1 = *a0;
#line 166
      a1 += lda1;
#line 166
      a0 += LDA;
#line 168
      *a1 = *a0;
#line 168
      a1 += lda1;
#line 168
      a0 += LDA;
#line 171
      *a1 = *a0;
#line 171
      a1 += lda1;
#line 171
      a0 += LDA;
#line 171
      *a1 = *a0;
#line 171
      a1 += lda1;
#line 171
      a0 += LDA;
#line 174
      *a1 = *a0;
#line 174
      a1 += lda1;
#line 174
      a0 += LDA;
#line 174
      *a1 = *a0;
#line 174
      a1 += lda1;
#line 174
      a0 += LDA;
#line 175
      *a1 = *a0;
#line 175
      a1 += lda1;
#line 175
      a0 += LDA;
#line 175
      *a1 = *a0;
#line 175
      a1 += lda1;
#line 175
      a0 += LDA;
#line 178
      *a1 = *a0;
#line 178
      a1 += lda1;
#line 178
      a0 += LDA;
#line 178
      *a1 = *a0;
#line 178
      a1 += lda1;
#line 178
      a0 += LDA;
#line 179
      *a1 = *a0;
#line 179
      a1 += lda1;
#line 179
      a0 += LDA;
#line 179
      *a1 = *a0;
#line 179
      a1 += lda1;
#line 179
      a0 += LDA;
#line 180
      *a1 = *a0;
#line 180
      a1 += lda1;
#line 180
      a0 += LDA;
#line 180
      *a1 = *a0;
#line 180
      a1 += lda1;
#line 180
      a0 += LDA;
#line 181
      *a1 = *a0;
#line 181
      a1 += lda1;
#line 181
      a0 += LDA;
#line 181
      *a1 = *a0;
#line 181
      a1 += lda1;
#line 181
      a0 += LDA;
#line 184
      *a1 = *a0;
#line 184
      a1 += lda1;
#line 184
      a0 += LDA;
#line 184
      *a1 = *a0;
#line 184
      a1 += lda1;
#line 184
      a0 += LDA;
#line 185
      *a1 = *a0;
#line 185
      a1 += lda1;
#line 185
      a0 += LDA;
#line 185
      *a1 = *a0;
#line 185
      a1 += lda1;
#line 185
      a0 += LDA;
#line 186
      *a1 = *a0;
#line 186
      a1 += lda1;
#line 186
      a0 += LDA;
#line 186
      *a1 = *a0;
#line 186
      a1 += lda1;
#line 186
      a0 += LDA;
#line 187
      *a1 = *a0;
#line 187
      a1 += lda1;
#line 187
      a0 += LDA;
#line 187
      *a1 = *a0;
#line 187
      a1 += lda1;
#line 187
      a0 += LDA;
#line 188
      *a1 = *a0;
#line 188
      a1 += lda1;
#line 188
      a0 += LDA;
#line 188
      *a1 = *a0;
#line 188
      a1 += lda1;
#line 188
      a0 += LDA;
#line 189
      *a1 = *a0;
#line 189
      a1 += lda1;
#line 189
      a0 += LDA;
#line 189
      *a1 = *a0;
#line 189
      a1 += lda1;
#line 189
      a0 += LDA;
#line 190
      *a1 = *a0;
#line 190
      a1 += lda1;
#line 190
      a0 += LDA;
#line 190
      *a1 = *a0;
#line 190
      a1 += lda1;
#line 190
      a0 += LDA;
#line 191
      *a1 = *a0;
#line 191
      a1 += lda1;
#line 191
      a0 += LDA;
#line 191
      *a1 = *a0;
#line 191
      a1 += lda1;
#line 191
      a0 += LDA;
#line 160
      i ++;
    }
#line 158
    j += 32;
#line 158
    A += incA;
#line 158
    U += incU;
  }
#line 196
  if (nr) {
#line 198
    i = 0;
#line 198
    while (i < (int )M) {
#line 200
      a0 = A + *(LINDXA + i);
#line 201
      if (*(LINDXAU + i) >= 0) {
#line 201
        a1 = U + *(LINDXAU + i);
#line 201
        lda1 = (int )LDU;
      } else {
#line 202
        a1 = A - *(LINDXAU + i);
#line 202
        lda1 = (int )LDA;
      }
#line 204
      j = 0;
#line 204
      while (j < nr) {
#line 204
        *a1 = *a0;
#line 204
        j ++;
#line 204
        a1 += lda1;
#line 204
        a0 += LDA;
      }
#line 198
      i ++;
    }
  }
#line 210
  return;
}
}
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 343 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp01T(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp01T.c"
void HPL_dlaswp01T(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double *a0 ;
  double *a1 ;
  int incA ;
  int incU ;
  int nu ;
  int nr ;
  register int i ;
  register int j ;

  {
#line 145
  incA = (int )((unsigned int )LDA << 5);
#line 145
  incU = 1 << 5;
#line 153
  if (M <= 0) {
#line 153
    return;
  } else
#line 153
  if (N <= 0) {
#line 153
    return;
  }
#line 155
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 155
  nr = (int )(N - (int const   )nu);
#line 158
  j = 0;
#line 158
  while (j < nu) {
#line 160
    i = 0;
#line 160
    while (i < (int )M) {
#line 162
      a0 = A + *(LINDXA + i);
#line 164
      if (*(LINDXAU + i) >= 0) {
#line 166
        a1 = U + *(LINDXAU + i) * LDU;
#line 168
        *(a1 + 0) = *a0;
#line 168
        a0 += LDA;
#line 170
        *(a1 + 1) = *a0;
#line 170
        a0 += LDA;
#line 173
        *(a1 + 2) = *a0;
#line 173
        a0 += LDA;
#line 173
        *(a1 + 3) = *a0;
#line 173
        a0 += LDA;
#line 176
        *(a1 + 4) = *a0;
#line 176
        a0 += LDA;
#line 176
        *(a1 + 5) = *a0;
#line 176
        a0 += LDA;
#line 177
        *(a1 + 6) = *a0;
#line 177
        a0 += LDA;
#line 177
        *(a1 + 7) = *a0;
#line 177
        a0 += LDA;
#line 180
        *(a1 + 8) = *a0;
#line 180
        a0 += LDA;
#line 180
        *(a1 + 9) = *a0;
#line 180
        a0 += LDA;
#line 181
        *(a1 + 10) = *a0;
#line 181
        a0 += LDA;
#line 181
        *(a1 + 11) = *a0;
#line 181
        a0 += LDA;
#line 182
        *(a1 + 12) = *a0;
#line 182
        a0 += LDA;
#line 182
        *(a1 + 13) = *a0;
#line 182
        a0 += LDA;
#line 183
        *(a1 + 14) = *a0;
#line 183
        a0 += LDA;
#line 183
        *(a1 + 15) = *a0;
#line 183
        a0 += LDA;
#line 186
        *(a1 + 16) = *a0;
#line 186
        a0 += LDA;
#line 186
        *(a1 + 17) = *a0;
#line 186
        a0 += LDA;
#line 187
        *(a1 + 18) = *a0;
#line 187
        a0 += LDA;
#line 187
        *(a1 + 19) = *a0;
#line 187
        a0 += LDA;
#line 188
        *(a1 + 20) = *a0;
#line 188
        a0 += LDA;
#line 188
        *(a1 + 21) = *a0;
#line 188
        a0 += LDA;
#line 189
        *(a1 + 22) = *a0;
#line 189
        a0 += LDA;
#line 189
        *(a1 + 23) = *a0;
#line 189
        a0 += LDA;
#line 190
        *(a1 + 24) = *a0;
#line 190
        a0 += LDA;
#line 190
        *(a1 + 25) = *a0;
#line 190
        a0 += LDA;
#line 191
        *(a1 + 26) = *a0;
#line 191
        a0 += LDA;
#line 191
        *(a1 + 27) = *a0;
#line 191
        a0 += LDA;
#line 192
        *(a1 + 28) = *a0;
#line 192
        a0 += LDA;
#line 192
        *(a1 + 29) = *a0;
#line 192
        a0 += LDA;
#line 193
        *(a1 + 30) = *a0;
#line 193
        a0 += LDA;
#line 193
        *(a1 + 31) = *a0;
#line 193
        a0 += LDA;
      } else {
#line 198
        a1 = A - *(LINDXAU + i);
#line 200
        *a1 = *a0;
#line 200
        a1 += LDA;
#line 200
        a0 += LDA;
#line 202
        *a1 = *a0;
#line 202
        a1 += LDA;
#line 202
        a0 += LDA;
#line 205
        *a1 = *a0;
#line 205
        a1 += LDA;
#line 205
        a0 += LDA;
#line 205
        *a1 = *a0;
#line 205
        a1 += LDA;
#line 205
        a0 += LDA;
#line 208
        *a1 = *a0;
#line 208
        a1 += LDA;
#line 208
        a0 += LDA;
#line 208
        *a1 = *a0;
#line 208
        a1 += LDA;
#line 208
        a0 += LDA;
#line 209
        *a1 = *a0;
#line 209
        a1 += LDA;
#line 209
        a0 += LDA;
#line 209
        *a1 = *a0;
#line 209
        a1 += LDA;
#line 209
        a0 += LDA;
#line 212
        *a1 = *a0;
#line 212
        a1 += LDA;
#line 212
        a0 += LDA;
#line 212
        *a1 = *a0;
#line 212
        a1 += LDA;
#line 212
        a0 += LDA;
#line 213
        *a1 = *a0;
#line 213
        a1 += LDA;
#line 213
        a0 += LDA;
#line 213
        *a1 = *a0;
#line 213
        a1 += LDA;
#line 213
        a0 += LDA;
#line 214
        *a1 = *a0;
#line 214
        a1 += LDA;
#line 214
        a0 += LDA;
#line 214
        *a1 = *a0;
#line 214
        a1 += LDA;
#line 214
        a0 += LDA;
#line 215
        *a1 = *a0;
#line 215
        a1 += LDA;
#line 215
        a0 += LDA;
#line 215
        *a1 = *a0;
#line 215
        a1 += LDA;
#line 215
        a0 += LDA;
#line 218
        *a1 = *a0;
#line 218
        a1 += LDA;
#line 218
        a0 += LDA;
#line 218
        *a1 = *a0;
#line 218
        a1 += LDA;
#line 218
        a0 += LDA;
#line 219
        *a1 = *a0;
#line 219
        a1 += LDA;
#line 219
        a0 += LDA;
#line 219
        *a1 = *a0;
#line 219
        a1 += LDA;
#line 219
        a0 += LDA;
#line 220
        *a1 = *a0;
#line 220
        a1 += LDA;
#line 220
        a0 += LDA;
#line 220
        *a1 = *a0;
#line 220
        a1 += LDA;
#line 220
        a0 += LDA;
#line 221
        *a1 = *a0;
#line 221
        a1 += LDA;
#line 221
        a0 += LDA;
#line 221
        *a1 = *a0;
#line 221
        a1 += LDA;
#line 221
        a0 += LDA;
#line 222
        *a1 = *a0;
#line 222
        a1 += LDA;
#line 222
        a0 += LDA;
#line 222
        *a1 = *a0;
#line 222
        a1 += LDA;
#line 222
        a0 += LDA;
#line 223
        *a1 = *a0;
#line 223
        a1 += LDA;
#line 223
        a0 += LDA;
#line 223
        *a1 = *a0;
#line 223
        a1 += LDA;
#line 223
        a0 += LDA;
#line 224
        *a1 = *a0;
#line 224
        a1 += LDA;
#line 224
        a0 += LDA;
#line 224
        *a1 = *a0;
#line 224
        a1 += LDA;
#line 224
        a0 += LDA;
#line 225
        *a1 = *a0;
#line 225
        a1 += LDA;
#line 225
        a0 += LDA;
#line 225
        *a1 = *a0;
#line 225
        a1 += LDA;
#line 225
        a0 += LDA;
      }
#line 160
      i ++;
    }
#line 158
    j += 32;
#line 158
    A += incA;
#line 158
    U += incU;
  }
#line 231
  if (nr > 0) {
#line 233
    i = 0;
#line 233
    while (i < (int )M) {
#line 235
      a0 = A + *(LINDXA + i);
#line 237
      if (*(LINDXAU + i) >= 0) {
#line 239
        a1 = U + *(LINDXAU + i) * LDU;
#line 240
        j = 0;
#line 240
        while (j < nr) {
#line 240
          *(a1 + j) = *a0;
#line 240
          j ++;
#line 240
          a0 += LDA;
        }
      } else {
#line 244
        a1 = A - *(LINDXAU + i);
#line 245
        j = 0;
#line 245
        while (j < nr) {
#line 245
          *a1 = *a0;
#line 245
          j ++;
#line 245
          a1 += LDA;
#line 245
          a0 += LDA;
        }
      }
#line 233
      i ++;
    }
  }
#line 252
  return;
}
}
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 354 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp02N(int const   M , int const   N , double const   *A , int const   LDA ,
                   double *W0 , double *W , int const   LDW , int const   *LINDXA ,
                   int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp02N.c"
void HPL_dlaswp02N(int const   M , int const   N , double const   *A , int const   LDA ,
                   double *W0 , double *W , int const   LDW , int const   *LINDXA ,
                   int const   *LINDXAU ) 
{ 
  double const   *A0 ;
  double const   *a0 ;
  double *w0 ;
  int incA ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 140
  A0 = A;
#line 142
  incA = (int )((unsigned int )LDA << 5);
#line 149
  if (M <= 0) {
#line 149
    return;
  } else
#line 149
  if (N <= 0) {
#line 149
    return;
  }
#line 151
  i = 0;
#line 151
  while (i < (int )M) {
#line 151
    *(W0 + i * (int )LDW) = (double )*(LINDXAU + i);
#line 151
    i ++;
  }
#line 153
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 153
  nr = (int )(N - (int const   )nu);
#line 156
  j = 0;
#line 156
  while (j < nu) {
#line 159
    i = 0;
#line 159
    while (i < (int )M) {
#line 161
      a0 = A0 + *(LINDXA + i);
#line 161
      w0 = W + i * (int )LDW;
#line 163
      *(w0 + 0) = (double )*a0;
#line 163
      a0 += LDA;
#line 165
      *(w0 + 1) = (double )*a0;
#line 165
      a0 += LDA;
#line 168
      *(w0 + 2) = (double )*a0;
#line 168
      a0 += LDA;
#line 168
      *(w0 + 3) = (double )*a0;
#line 168
      a0 += LDA;
#line 171
      *(w0 + 4) = (double )*a0;
#line 171
      a0 += LDA;
#line 171
      *(w0 + 5) = (double )*a0;
#line 171
      a0 += LDA;
#line 172
      *(w0 + 6) = (double )*a0;
#line 172
      a0 += LDA;
#line 172
      *(w0 + 7) = (double )*a0;
#line 172
      a0 += LDA;
#line 175
      *(w0 + 8) = (double )*a0;
#line 175
      a0 += LDA;
#line 175
      *(w0 + 9) = (double )*a0;
#line 175
      a0 += LDA;
#line 176
      *(w0 + 10) = (double )*a0;
#line 176
      a0 += LDA;
#line 176
      *(w0 + 11) = (double )*a0;
#line 176
      a0 += LDA;
#line 177
      *(w0 + 12) = (double )*a0;
#line 177
      a0 += LDA;
#line 177
      *(w0 + 13) = (double )*a0;
#line 177
      a0 += LDA;
#line 178
      *(w0 + 14) = (double )*a0;
#line 178
      a0 += LDA;
#line 178
      *(w0 + 15) = (double )*a0;
#line 178
      a0 += LDA;
#line 181
      *(w0 + 16) = (double )*a0;
#line 181
      a0 += LDA;
#line 181
      *(w0 + 17) = (double )*a0;
#line 181
      a0 += LDA;
#line 182
      *(w0 + 18) = (double )*a0;
#line 182
      a0 += LDA;
#line 182
      *(w0 + 19) = (double )*a0;
#line 182
      a0 += LDA;
#line 183
      *(w0 + 20) = (double )*a0;
#line 183
      a0 += LDA;
#line 183
      *(w0 + 21) = (double )*a0;
#line 183
      a0 += LDA;
#line 184
      *(w0 + 22) = (double )*a0;
#line 184
      a0 += LDA;
#line 184
      *(w0 + 23) = (double )*a0;
#line 184
      a0 += LDA;
#line 185
      *(w0 + 24) = (double )*a0;
#line 185
      a0 += LDA;
#line 185
      *(w0 + 25) = (double )*a0;
#line 185
      a0 += LDA;
#line 186
      *(w0 + 26) = (double )*a0;
#line 186
      a0 += LDA;
#line 186
      *(w0 + 27) = (double )*a0;
#line 186
      a0 += LDA;
#line 187
      *(w0 + 28) = (double )*a0;
#line 187
      a0 += LDA;
#line 187
      *(w0 + 29) = (double )*a0;
#line 187
      a0 += LDA;
#line 188
      *(w0 + 30) = (double )*a0;
#line 188
      a0 += LDA;
#line 188
      *(w0 + 31) = (double )*a0;
#line 188
      a0 += LDA;
#line 159
      i ++;
    }
#line 156
    j += 32;
#line 156
    A0 += incA;
#line 156
    W += 32;
  }
#line 193
  if (nr > 0) {
#line 195
    i = 0;
#line 195
    while (i < (int )M) {
#line 197
      a0 = A0 + *(LINDXA + i);
#line 197
      w0 = W + i * (int )LDW;
#line 198
      j = 0;
#line 198
      while (j < nr) {
#line 198
        *(w0 + j) = (double )*a0;
#line 198
        j ++;
#line 198
        a0 += LDA;
      }
#line 195
      i ++;
    }
  }
#line 204
  return;
}
}
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 366 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp03N(int const   M , int const   N , double *U , int const   LDU , double const   *W0 ,
                   double const   *W , int const   LDW ) ;
#line 60 "../HPL_dlaswp03N.c"
void HPL_dlaswp03N(int const   M , int const   N , double *U , int const   LDU , double const   *W0 ,
                   double const   *W , int const   LDW ) 
{ 
  double const   *w ;
  double const   *w0 ;
  double *u0 ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 130
  w = W;
#line 132
  incU = (int )((unsigned int )LDU << 5);
#line 139
  if (M <= 0) {
#line 139
    return;
  } else
#line 139
  if (N <= 0) {
#line 139
    return;
  }
#line 141
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 141
  nr = (int )(N - (int const   )nu);
#line 144
  j = 0;
#line 144
  while (j < nu) {
#line 147
    i = 0;
#line 147
    while (i < (int )M) {
#line 149
      u0 = U + (int )*(W0 + i * (int )LDW);
#line 149
      w0 = w + i * (int )LDW;
#line 151
      *u0 = (double )*(w0 + 0);
#line 151
      u0 += LDU;
#line 153
      *u0 = (double )*(w0 + 1);
#line 153
      u0 += LDU;
#line 156
      *u0 = (double )*(w0 + 2);
#line 156
      u0 += LDU;
#line 156
      *u0 = (double )*(w0 + 3);
#line 156
      u0 += LDU;
#line 159
      *u0 = (double )*(w0 + 4);
#line 159
      u0 += LDU;
#line 159
      *u0 = (double )*(w0 + 5);
#line 159
      u0 += LDU;
#line 160
      *u0 = (double )*(w0 + 6);
#line 160
      u0 += LDU;
#line 160
      *u0 = (double )*(w0 + 7);
#line 160
      u0 += LDU;
#line 163
      *u0 = (double )*(w0 + 8);
#line 163
      u0 += LDU;
#line 163
      *u0 = (double )*(w0 + 9);
#line 163
      u0 += LDU;
#line 164
      *u0 = (double )*(w0 + 10);
#line 164
      u0 += LDU;
#line 164
      *u0 = (double )*(w0 + 11);
#line 164
      u0 += LDU;
#line 165
      *u0 = (double )*(w0 + 12);
#line 165
      u0 += LDU;
#line 165
      *u0 = (double )*(w0 + 13);
#line 165
      u0 += LDU;
#line 166
      *u0 = (double )*(w0 + 14);
#line 166
      u0 += LDU;
#line 166
      *u0 = (double )*(w0 + 15);
#line 166
      u0 += LDU;
#line 169
      *u0 = (double )*(w0 + 16);
#line 169
      u0 += LDU;
#line 169
      *u0 = (double )*(w0 + 17);
#line 169
      u0 += LDU;
#line 170
      *u0 = (double )*(w0 + 18);
#line 170
      u0 += LDU;
#line 170
      *u0 = (double )*(w0 + 19);
#line 170
      u0 += LDU;
#line 171
      *u0 = (double )*(w0 + 20);
#line 171
      u0 += LDU;
#line 171
      *u0 = (double )*(w0 + 21);
#line 171
      u0 += LDU;
#line 172
      *u0 = (double )*(w0 + 22);
#line 172
      u0 += LDU;
#line 172
      *u0 = (double )*(w0 + 23);
#line 172
      u0 += LDU;
#line 173
      *u0 = (double )*(w0 + 24);
#line 173
      u0 += LDU;
#line 173
      *u0 = (double )*(w0 + 25);
#line 173
      u0 += LDU;
#line 174
      *u0 = (double )*(w0 + 26);
#line 174
      u0 += LDU;
#line 174
      *u0 = (double )*(w0 + 27);
#line 174
      u0 += LDU;
#line 175
      *u0 = (double )*(w0 + 28);
#line 175
      u0 += LDU;
#line 175
      *u0 = (double )*(w0 + 29);
#line 175
      u0 += LDU;
#line 176
      *u0 = (double )*(w0 + 30);
#line 176
      u0 += LDU;
#line 176
      *u0 = (double )*(w0 + 31);
#line 176
      u0 += LDU;
#line 147
      i ++;
    }
#line 144
    j += 32;
#line 144
    U += incU;
#line 144
    w += 32;
  }
#line 181
  if (nr) {
#line 183
    i = 0;
#line 183
    while (i < (int )M) {
#line 185
      u0 = U + (int )*(W0 + i * (int )LDW);
#line 185
      w0 = w + i * (int )LDW;
#line 186
      j = 0;
#line 186
      while (j < nr) {
#line 186
        *u0 = (double )*(w0 + j);
#line 186
        j ++;
#line 186
        u0 += LDU;
      }
#line 183
      i ++;
    }
  }
#line 192
  return;
}
}
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 376 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp03T(int const   M , int const   N , double *U , int const   LDU , double const   *W0 ,
                   double const   *W , int const   LDW ) ;
#line 60 "../HPL_dlaswp03T.c"
void HPL_dlaswp03T(int const   M , int const   N , double *U , int const   LDU , double const   *W0 ,
                   double const   *W , int const   LDW ) 
{ 
  double const   *w ;
  double const   *w0 ;
  double *u0 ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 130
  w = W;
#line 132
  incU = 1 << 5;
#line 138
  if (M <= 0) {
#line 138
    return;
  } else
#line 138
  if (N <= 0) {
#line 138
    return;
  }
#line 140
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 140
  nr = (int )(N - (int const   )nu);
#line 143
  j = 0;
#line 143
  while (j < nu) {
#line 146
    i = 0;
#line 146
    while (i < (int )M) {
#line 148
      u0 = U + (int )*(W0 + i * (int )LDW) * (int )LDU;
#line 148
      w0 = w + i * (int )LDW;
#line 150
      *(u0 + 0) = (double )*(w0 + 0);
#line 152
      *(u0 + 1) = (double )*(w0 + 1);
#line 155
      *(u0 + 2) = (double )*(w0 + 2);
#line 155
      *(u0 + 3) = (double )*(w0 + 3);
#line 158
      *(u0 + 4) = (double )*(w0 + 4);
#line 158
      *(u0 + 5) = (double )*(w0 + 5);
#line 158
      *(u0 + 6) = (double )*(w0 + 6);
#line 158
      *(u0 + 7) = (double )*(w0 + 7);
#line 161
      *(u0 + 8) = (double )*(w0 + 8);
#line 161
      *(u0 + 9) = (double )*(w0 + 9);
#line 161
      *(u0 + 10) = (double )*(w0 + 10);
#line 161
      *(u0 + 11) = (double )*(w0 + 11);
#line 162
      *(u0 + 12) = (double )*(w0 + 12);
#line 162
      *(u0 + 13) = (double )*(w0 + 13);
#line 162
      *(u0 + 14) = (double )*(w0 + 14);
#line 162
      *(u0 + 15) = (double )*(w0 + 15);
#line 165
      *(u0 + 16) = (double )*(w0 + 16);
#line 165
      *(u0 + 17) = (double )*(w0 + 17);
#line 165
      *(u0 + 18) = (double )*(w0 + 18);
#line 165
      *(u0 + 19) = (double )*(w0 + 19);
#line 166
      *(u0 + 20) = (double )*(w0 + 20);
#line 166
      *(u0 + 21) = (double )*(w0 + 21);
#line 166
      *(u0 + 22) = (double )*(w0 + 22);
#line 166
      *(u0 + 23) = (double )*(w0 + 23);
#line 167
      *(u0 + 24) = (double )*(w0 + 24);
#line 167
      *(u0 + 25) = (double )*(w0 + 25);
#line 167
      *(u0 + 26) = (double )*(w0 + 26);
#line 167
      *(u0 + 27) = (double )*(w0 + 27);
#line 168
      *(u0 + 28) = (double )*(w0 + 28);
#line 168
      *(u0 + 29) = (double )*(w0 + 29);
#line 168
      *(u0 + 30) = (double )*(w0 + 30);
#line 168
      *(u0 + 31) = (double )*(w0 + 31);
#line 146
      i ++;
    }
#line 143
    j += 32;
#line 143
    U += incU;
#line 143
    w += 32;
  }
#line 173
  if (nr > 0) {
#line 175
    i = 0;
#line 175
    while (i < (int )M) {
#line 177
      u0 = U + (int )*(W0 + i * (int )LDW) * (int )LDU;
#line 177
      w0 = w + i * (int )LDW;
#line 178
      j = 0;
#line 178
      while (j < nr) {
#line 178
        *(u0 + j) = (double )*(w0 + j);
#line 178
        j ++;
      }
#line 175
      i ++;
    }
  }
#line 184
  return;
}
}
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 386 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp04N(int const   M0 , int const   M1 , int const   N , double *U , int const   LDU ,
                   double *A , int const   LDA , double const   *W0 , double const   *W ,
                   int const   LDW , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp04N.c"
void HPL_dlaswp04N(int const   M0 , int const   M1 , int const   N , double *U , int const   LDU ,
                   double *A , int const   LDA , double const   *W0 , double const   *W ,
                   int const   LDW , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double const   *w ;
  double const   *w0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 161
  w = W;
#line 163
  incA = (int )((unsigned int )LDA << 5);
#line 163
  incU = (int )((unsigned int )LDU << 5);
#line 172
  if (M0 <= 0) {
#line 172
    if (M1 <= 0) {
#line 172
      return;
    } else {
#line 172
      goto _L;
    }
  } else
  _L: 
#line 172
  if (N <= 0) {
#line 172
    return;
  }
#line 174
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 174
  nr = (int )(N - (int const   )nu);
#line 177
  j = 0;
#line 177
  while (j < nu) {
#line 180
    i = 0;
#line 180
    while (i < (int )M0) {
#line 182
      a0 = A + *(LINDXA + i);
#line 182
      u0 = U + *(LINDXAU + i);
#line 182
      w0 = w + i * (int )LDW;
#line 184
      *a0 = *u0;
#line 184
      *u0 = (double )*(w0 + 0);
#line 184
      a0 += LDA;
#line 184
      u0 += LDU;
#line 186
      *a0 = *u0;
#line 186
      *u0 = (double )*(w0 + 1);
#line 186
      a0 += LDA;
#line 186
      u0 += LDU;
#line 189
      *a0 = *u0;
#line 189
      *u0 = (double )*(w0 + 2);
#line 189
      a0 += LDA;
#line 189
      u0 += LDU;
#line 190
      *a0 = *u0;
#line 190
      *u0 = (double )*(w0 + 3);
#line 190
      a0 += LDA;
#line 190
      u0 += LDU;
#line 193
      *a0 = *u0;
#line 193
      *u0 = (double )*(w0 + 4);
#line 193
      a0 += LDA;
#line 193
      u0 += LDU;
#line 194
      *a0 = *u0;
#line 194
      *u0 = (double )*(w0 + 5);
#line 194
      a0 += LDA;
#line 194
      u0 += LDU;
#line 195
      *a0 = *u0;
#line 195
      *u0 = (double )*(w0 + 6);
#line 195
      a0 += LDA;
#line 195
      u0 += LDU;
#line 196
      *a0 = *u0;
#line 196
      *u0 = (double )*(w0 + 7);
#line 196
      a0 += LDA;
#line 196
      u0 += LDU;
#line 199
      *a0 = *u0;
#line 199
      *u0 = (double )*(w0 + 8);
#line 199
      a0 += LDA;
#line 199
      u0 += LDU;
#line 200
      *a0 = *u0;
#line 200
      *u0 = (double )*(w0 + 9);
#line 200
      a0 += LDA;
#line 200
      u0 += LDU;
#line 201
      *a0 = *u0;
#line 201
      *u0 = (double )*(w0 + 10);
#line 201
      a0 += LDA;
#line 201
      u0 += LDU;
#line 202
      *a0 = *u0;
#line 202
      *u0 = (double )*(w0 + 11);
#line 202
      a0 += LDA;
#line 202
      u0 += LDU;
#line 203
      *a0 = *u0;
#line 203
      *u0 = (double )*(w0 + 12);
#line 203
      a0 += LDA;
#line 203
      u0 += LDU;
#line 204
      *a0 = *u0;
#line 204
      *u0 = (double )*(w0 + 13);
#line 204
      a0 += LDA;
#line 204
      u0 += LDU;
#line 205
      *a0 = *u0;
#line 205
      *u0 = (double )*(w0 + 14);
#line 205
      a0 += LDA;
#line 205
      u0 += LDU;
#line 206
      *a0 = *u0;
#line 206
      *u0 = (double )*(w0 + 15);
#line 206
      a0 += LDA;
#line 206
      u0 += LDU;
#line 209
      *a0 = *u0;
#line 209
      *u0 = (double )*(w0 + 16);
#line 209
      a0 += LDA;
#line 209
      u0 += LDU;
#line 210
      *a0 = *u0;
#line 210
      *u0 = (double )*(w0 + 17);
#line 210
      a0 += LDA;
#line 210
      u0 += LDU;
#line 211
      *a0 = *u0;
#line 211
      *u0 = (double )*(w0 + 18);
#line 211
      a0 += LDA;
#line 211
      u0 += LDU;
#line 212
      *a0 = *u0;
#line 212
      *u0 = (double )*(w0 + 19);
#line 212
      a0 += LDA;
#line 212
      u0 += LDU;
#line 213
      *a0 = *u0;
#line 213
      *u0 = (double )*(w0 + 20);
#line 213
      a0 += LDA;
#line 213
      u0 += LDU;
#line 214
      *a0 = *u0;
#line 214
      *u0 = (double )*(w0 + 21);
#line 214
      a0 += LDA;
#line 214
      u0 += LDU;
#line 215
      *a0 = *u0;
#line 215
      *u0 = (double )*(w0 + 22);
#line 215
      a0 += LDA;
#line 215
      u0 += LDU;
#line 216
      *a0 = *u0;
#line 216
      *u0 = (double )*(w0 + 23);
#line 216
      a0 += LDA;
#line 216
      u0 += LDU;
#line 217
      *a0 = *u0;
#line 217
      *u0 = (double )*(w0 + 24);
#line 217
      a0 += LDA;
#line 217
      u0 += LDU;
#line 218
      *a0 = *u0;
#line 218
      *u0 = (double )*(w0 + 25);
#line 218
      a0 += LDA;
#line 218
      u0 += LDU;
#line 219
      *a0 = *u0;
#line 219
      *u0 = (double )*(w0 + 26);
#line 219
      a0 += LDA;
#line 219
      u0 += LDU;
#line 220
      *a0 = *u0;
#line 220
      *u0 = (double )*(w0 + 27);
#line 220
      a0 += LDA;
#line 220
      u0 += LDU;
#line 221
      *a0 = *u0;
#line 221
      *u0 = (double )*(w0 + 28);
#line 221
      a0 += LDA;
#line 221
      u0 += LDU;
#line 222
      *a0 = *u0;
#line 222
      *u0 = (double )*(w0 + 29);
#line 222
      a0 += LDA;
#line 222
      u0 += LDU;
#line 223
      *a0 = *u0;
#line 223
      *u0 = (double )*(w0 + 30);
#line 223
      a0 += LDA;
#line 223
      u0 += LDU;
#line 224
      *a0 = *u0;
#line 224
      *u0 = (double )*(w0 + 31);
#line 224
      a0 += LDA;
#line 224
      u0 += LDU;
#line 180
      i ++;
    }
#line 228
    i = (int )M0;
#line 228
    while (i < (int )M1) {
#line 230
      u0 = U + (int )*(W0 + i * (int )LDW);
#line 230
      w0 = w + i * (int )LDW;
#line 232
      *u0 = (double )*(w0 + 0);
#line 232
      u0 += LDU;
#line 234
      *u0 = (double )*(w0 + 1);
#line 234
      u0 += LDU;
#line 237
      *u0 = (double )*(w0 + 2);
#line 237
      u0 += LDU;
#line 237
      *u0 = (double )*(w0 + 3);
#line 237
      u0 += LDU;
#line 240
      *u0 = (double )*(w0 + 4);
#line 240
      u0 += LDU;
#line 240
      *u0 = (double )*(w0 + 5);
#line 240
      u0 += LDU;
#line 241
      *u0 = (double )*(w0 + 6);
#line 241
      u0 += LDU;
#line 241
      *u0 = (double )*(w0 + 7);
#line 241
      u0 += LDU;
#line 244
      *u0 = (double )*(w0 + 8);
#line 244
      u0 += LDU;
#line 244
      *u0 = (double )*(w0 + 9);
#line 244
      u0 += LDU;
#line 245
      *u0 = (double )*(w0 + 10);
#line 245
      u0 += LDU;
#line 245
      *u0 = (double )*(w0 + 11);
#line 245
      u0 += LDU;
#line 246
      *u0 = (double )*(w0 + 12);
#line 246
      u0 += LDU;
#line 246
      *u0 = (double )*(w0 + 13);
#line 246
      u0 += LDU;
#line 247
      *u0 = (double )*(w0 + 14);
#line 247
      u0 += LDU;
#line 247
      *u0 = (double )*(w0 + 15);
#line 247
      u0 += LDU;
#line 250
      *u0 = (double )*(w0 + 16);
#line 250
      u0 += LDU;
#line 250
      *u0 = (double )*(w0 + 17);
#line 250
      u0 += LDU;
#line 251
      *u0 = (double )*(w0 + 18);
#line 251
      u0 += LDU;
#line 251
      *u0 = (double )*(w0 + 19);
#line 251
      u0 += LDU;
#line 252
      *u0 = (double )*(w0 + 20);
#line 252
      u0 += LDU;
#line 252
      *u0 = (double )*(w0 + 21);
#line 252
      u0 += LDU;
#line 253
      *u0 = (double )*(w0 + 22);
#line 253
      u0 += LDU;
#line 253
      *u0 = (double )*(w0 + 23);
#line 253
      u0 += LDU;
#line 254
      *u0 = (double )*(w0 + 24);
#line 254
      u0 += LDU;
#line 254
      *u0 = (double )*(w0 + 25);
#line 254
      u0 += LDU;
#line 255
      *u0 = (double )*(w0 + 26);
#line 255
      u0 += LDU;
#line 255
      *u0 = (double )*(w0 + 27);
#line 255
      u0 += LDU;
#line 256
      *u0 = (double )*(w0 + 28);
#line 256
      u0 += LDU;
#line 256
      *u0 = (double )*(w0 + 29);
#line 256
      u0 += LDU;
#line 257
      *u0 = (double )*(w0 + 30);
#line 257
      u0 += LDU;
#line 257
      *u0 = (double )*(w0 + 31);
#line 257
      u0 += LDU;
#line 228
      i ++;
    }
#line 177
    j += 32;
#line 177
    A += incA;
#line 177
    U += incU;
#line 177
    w += 32;
  }
#line 262
  if (nr) {
#line 264
    i = 0;
#line 264
    while (i < (int )M0) {
#line 266
      a0 = A + *(LINDXA + i);
#line 266
      u0 = U + *(LINDXAU + i);
#line 266
      w0 = w + i * (int )LDW;
#line 267
      j = 0;
#line 267
      while (j < nr) {
#line 268
        *a0 = *u0;
#line 268
        *u0 = (double )*(w0 + j);
#line 267
        j ++;
#line 267
        a0 += LDA;
#line 267
        u0 += LDU;
      }
#line 264
      i ++;
    }
#line 270
    i = (int )M0;
#line 270
    while (i < (int )M1) {
#line 272
      u0 = U + (int )*(W0 + i * (int )LDW);
#line 272
      w0 = w + i * (int )LDW;
#line 273
      j = 0;
#line 273
      while (j < nr) {
#line 273
        *u0 = (double )*(w0 + j);
#line 273
        j ++;
#line 273
        u0 += LDU;
      }
#line 270
      i ++;
    }
  }
#line 279
  return;
}
}
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 401 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp04T(int const   M0 , int const   M1 , int const   N , double *U , int const   LDU ,
                   double *A , int const   LDA , double const   *W0 , double const   *W ,
                   int const   LDW , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp04T.c"
void HPL_dlaswp04T(int const   M0 , int const   M1 , int const   N , double *U , int const   LDU ,
                   double *A , int const   LDA , double const   *W0 , double const   *W ,
                   int const   LDW , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double const   *w ;
  double const   *w0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 162
  w = W;
#line 164
  incA = (int )((unsigned int )LDA << 5);
#line 164
  incU = 1 << 5;
#line 172
  if (M0 <= 0) {
#line 172
    if (M1 <= 0) {
#line 172
      return;
    } else {
#line 172
      goto _L;
    }
  } else
  _L: 
#line 172
  if (N <= 0) {
#line 172
    return;
  }
#line 174
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 174
  nr = (int )(N - (int const   )nu);
#line 177
  j = 0;
#line 177
  while (j < nu) {
#line 180
    i = 0;
#line 180
    while (i < (int )M0) {
#line 182
      a0 = A + *(LINDXA + i);
#line 182
      u0 = U + *(LINDXAU + i) * LDU;
#line 182
      w0 = w + i * (int )LDW;
#line 184
      *a0 = *(u0 + 0);
#line 184
      *(u0 + 0) = (double )*(w0 + 0);
#line 184
      a0 += LDA;
#line 186
      *a0 = *(u0 + 1);
#line 186
      *(u0 + 1) = (double )*(w0 + 1);
#line 186
      a0 += LDA;
#line 189
      *a0 = *(u0 + 2);
#line 189
      *(u0 + 2) = (double )*(w0 + 2);
#line 189
      a0 += LDA;
#line 190
      *a0 = *(u0 + 3);
#line 190
      *(u0 + 3) = (double )*(w0 + 3);
#line 190
      a0 += LDA;
#line 193
      *a0 = *(u0 + 4);
#line 193
      *(u0 + 4) = (double )*(w0 + 4);
#line 193
      a0 += LDA;
#line 194
      *a0 = *(u0 + 5);
#line 194
      *(u0 + 5) = (double )*(w0 + 5);
#line 194
      a0 += LDA;
#line 195
      *a0 = *(u0 + 6);
#line 195
      *(u0 + 6) = (double )*(w0 + 6);
#line 195
      a0 += LDA;
#line 196
      *a0 = *(u0 + 7);
#line 196
      *(u0 + 7) = (double )*(w0 + 7);
#line 196
      a0 += LDA;
#line 199
      *a0 = *(u0 + 8);
#line 199
      *(u0 + 8) = (double )*(w0 + 8);
#line 199
      a0 += LDA;
#line 200
      *a0 = *(u0 + 9);
#line 200
      *(u0 + 9) = (double )*(w0 + 9);
#line 200
      a0 += LDA;
#line 201
      *a0 = *(u0 + 10);
#line 201
      *(u0 + 10) = (double )*(w0 + 10);
#line 201
      a0 += LDA;
#line 202
      *a0 = *(u0 + 11);
#line 202
      *(u0 + 11) = (double )*(w0 + 11);
#line 202
      a0 += LDA;
#line 203
      *a0 = *(u0 + 12);
#line 203
      *(u0 + 12) = (double )*(w0 + 12);
#line 203
      a0 += LDA;
#line 204
      *a0 = *(u0 + 13);
#line 204
      *(u0 + 13) = (double )*(w0 + 13);
#line 204
      a0 += LDA;
#line 205
      *a0 = *(u0 + 14);
#line 205
      *(u0 + 14) = (double )*(w0 + 14);
#line 205
      a0 += LDA;
#line 206
      *a0 = *(u0 + 15);
#line 206
      *(u0 + 15) = (double )*(w0 + 15);
#line 206
      a0 += LDA;
#line 209
      *a0 = *(u0 + 16);
#line 209
      *(u0 + 16) = (double )*(w0 + 16);
#line 209
      a0 += LDA;
#line 210
      *a0 = *(u0 + 17);
#line 210
      *(u0 + 17) = (double )*(w0 + 17);
#line 210
      a0 += LDA;
#line 211
      *a0 = *(u0 + 18);
#line 211
      *(u0 + 18) = (double )*(w0 + 18);
#line 211
      a0 += LDA;
#line 212
      *a0 = *(u0 + 19);
#line 212
      *(u0 + 19) = (double )*(w0 + 19);
#line 212
      a0 += LDA;
#line 213
      *a0 = *(u0 + 20);
#line 213
      *(u0 + 20) = (double )*(w0 + 20);
#line 213
      a0 += LDA;
#line 214
      *a0 = *(u0 + 21);
#line 214
      *(u0 + 21) = (double )*(w0 + 21);
#line 214
      a0 += LDA;
#line 215
      *a0 = *(u0 + 22);
#line 215
      *(u0 + 22) = (double )*(w0 + 22);
#line 215
      a0 += LDA;
#line 216
      *a0 = *(u0 + 23);
#line 216
      *(u0 + 23) = (double )*(w0 + 23);
#line 216
      a0 += LDA;
#line 217
      *a0 = *(u0 + 24);
#line 217
      *(u0 + 24) = (double )*(w0 + 24);
#line 217
      a0 += LDA;
#line 218
      *a0 = *(u0 + 25);
#line 218
      *(u0 + 25) = (double )*(w0 + 25);
#line 218
      a0 += LDA;
#line 219
      *a0 = *(u0 + 26);
#line 219
      *(u0 + 26) = (double )*(w0 + 26);
#line 219
      a0 += LDA;
#line 220
      *a0 = *(u0 + 27);
#line 220
      *(u0 + 27) = (double )*(w0 + 27);
#line 220
      a0 += LDA;
#line 221
      *a0 = *(u0 + 28);
#line 221
      *(u0 + 28) = (double )*(w0 + 28);
#line 221
      a0 += LDA;
#line 222
      *a0 = *(u0 + 29);
#line 222
      *(u0 + 29) = (double )*(w0 + 29);
#line 222
      a0 += LDA;
#line 223
      *a0 = *(u0 + 30);
#line 223
      *(u0 + 30) = (double )*(w0 + 30);
#line 223
      a0 += LDA;
#line 224
      *a0 = *(u0 + 31);
#line 224
      *(u0 + 31) = (double )*(w0 + 31);
#line 224
      a0 += LDA;
#line 180
      i ++;
    }
#line 227
    i = (int )M0;
#line 227
    while (i < (int )M1) {
#line 229
      u0 = U + (int )*(W0 + i * (int )LDW) * (int )LDU;
#line 229
      w0 = w + i * (int )LDW;
#line 231
      *(u0 + 0) = (double )*(w0 + 0);
#line 233
      *(u0 + 1) = (double )*(w0 + 1);
#line 236
      *(u0 + 2) = (double )*(w0 + 2);
#line 236
      *(u0 + 3) = (double )*(w0 + 3);
#line 239
      *(u0 + 4) = (double )*(w0 + 4);
#line 239
      *(u0 + 5) = (double )*(w0 + 5);
#line 239
      *(u0 + 6) = (double )*(w0 + 6);
#line 239
      *(u0 + 7) = (double )*(w0 + 7);
#line 242
      *(u0 + 8) = (double )*(w0 + 8);
#line 242
      *(u0 + 9) = (double )*(w0 + 9);
#line 242
      *(u0 + 10) = (double )*(w0 + 10);
#line 242
      *(u0 + 11) = (double )*(w0 + 11);
#line 243
      *(u0 + 12) = (double )*(w0 + 12);
#line 243
      *(u0 + 13) = (double )*(w0 + 13);
#line 243
      *(u0 + 14) = (double )*(w0 + 14);
#line 243
      *(u0 + 15) = (double )*(w0 + 15);
#line 246
      *(u0 + 16) = (double )*(w0 + 16);
#line 246
      *(u0 + 17) = (double )*(w0 + 17);
#line 246
      *(u0 + 18) = (double )*(w0 + 18);
#line 246
      *(u0 + 19) = (double )*(w0 + 19);
#line 247
      *(u0 + 20) = (double )*(w0 + 20);
#line 247
      *(u0 + 21) = (double )*(w0 + 21);
#line 247
      *(u0 + 22) = (double )*(w0 + 22);
#line 247
      *(u0 + 23) = (double )*(w0 + 23);
#line 248
      *(u0 + 24) = (double )*(w0 + 24);
#line 248
      *(u0 + 25) = (double )*(w0 + 25);
#line 248
      *(u0 + 26) = (double )*(w0 + 26);
#line 248
      *(u0 + 27) = (double )*(w0 + 27);
#line 249
      *(u0 + 28) = (double )*(w0 + 28);
#line 249
      *(u0 + 29) = (double )*(w0 + 29);
#line 249
      *(u0 + 30) = (double )*(w0 + 30);
#line 249
      *(u0 + 31) = (double )*(w0 + 31);
#line 227
      i ++;
    }
#line 177
    j += 32;
#line 177
    A += incA;
#line 177
    U += incU;
#line 177
    w += 32;
  }
#line 254
  if (nr > 0) {
#line 256
    i = 0;
#line 256
    while (i < (int )M0) {
#line 258
      a0 = A + *(LINDXA + i);
#line 258
      u0 = U + *(LINDXAU + i) * LDU;
#line 258
      w0 = w + i * (int )LDW;
#line 259
      j = 0;
#line 259
      while (j < nr) {
#line 259
        *a0 = *(u0 + j);
#line 259
        *(u0 + j) = (double )*(w0 + j);
#line 259
        j ++;
#line 259
        a0 += LDA;
      }
#line 256
      i ++;
    }
#line 261
    i = (int )M0;
#line 261
    while (i < (int )M1) {
#line 263
      u0 = U + (int )*(W0 + i * (int )LDW) * (int )LDU;
#line 263
      w0 = w + i * (int )LDW;
#line 264
      j = 0;
#line 264
      while (j < nr) {
#line 264
        *(u0 + j) = (double )*(w0 + j);
#line 264
        j ++;
      }
#line 261
      i ++;
    }
  }
#line 270
  return;
}
}
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 416 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp05N(int const   M , int const   N , double *A , int const   LDA , double const   *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp05N.c"
void HPL_dlaswp05N(int const   M , int const   N , double *A , int const   LDA , double const   *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double const   *U0 ;
  double const   *u0 ;
  double *a0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 132
  U0 = U;
#line 134
  incA = (int )((unsigned int )LDA << 5);
#line 134
  incU = (int )((unsigned int )LDU << 5);
#line 143
  if (M <= 0) {
#line 143
    return;
  } else
#line 143
  if (N <= 0) {
#line 143
    return;
  }
#line 145
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 145
  nr = (int )(N - (int const   )nu);
#line 148
  j = 0;
#line 148
  while (j < nu) {
#line 150
    i = 0;
#line 150
    while (i < (int )M) {
#line 152
      a0 = A + *(LINDXA + i);
#line 152
      u0 = U0 + *(LINDXAU + i);
#line 154
      *a0 = (double )*u0;
#line 154
      a0 += LDA;
#line 154
      u0 += LDU;
#line 156
      *a0 = (double )*u0;
#line 156
      a0 += LDA;
#line 156
      u0 += LDU;
#line 159
      *a0 = (double )*u0;
#line 159
      a0 += LDA;
#line 159
      u0 += LDU;
#line 159
      *a0 = (double )*u0;
#line 159
      a0 += LDA;
#line 159
      u0 += LDU;
#line 162
      *a0 = (double )*u0;
#line 162
      a0 += LDA;
#line 162
      u0 += LDU;
#line 162
      *a0 = (double )*u0;
#line 162
      a0 += LDA;
#line 162
      u0 += LDU;
#line 163
      *a0 = (double )*u0;
#line 163
      a0 += LDA;
#line 163
      u0 += LDU;
#line 163
      *a0 = (double )*u0;
#line 163
      a0 += LDA;
#line 163
      u0 += LDU;
#line 166
      *a0 = (double )*u0;
#line 166
      a0 += LDA;
#line 166
      u0 += LDU;
#line 166
      *a0 = (double )*u0;
#line 166
      a0 += LDA;
#line 166
      u0 += LDU;
#line 167
      *a0 = (double )*u0;
#line 167
      a0 += LDA;
#line 167
      u0 += LDU;
#line 167
      *a0 = (double )*u0;
#line 167
      a0 += LDA;
#line 167
      u0 += LDU;
#line 168
      *a0 = (double )*u0;
#line 168
      a0 += LDA;
#line 168
      u0 += LDU;
#line 168
      *a0 = (double )*u0;
#line 168
      a0 += LDA;
#line 168
      u0 += LDU;
#line 169
      *a0 = (double )*u0;
#line 169
      a0 += LDA;
#line 169
      u0 += LDU;
#line 169
      *a0 = (double )*u0;
#line 169
      a0 += LDA;
#line 169
      u0 += LDU;
#line 172
      *a0 = (double )*u0;
#line 172
      a0 += LDA;
#line 172
      u0 += LDU;
#line 172
      *a0 = (double )*u0;
#line 172
      a0 += LDA;
#line 172
      u0 += LDU;
#line 173
      *a0 = (double )*u0;
#line 173
      a0 += LDA;
#line 173
      u0 += LDU;
#line 173
      *a0 = (double )*u0;
#line 173
      a0 += LDA;
#line 173
      u0 += LDU;
#line 174
      *a0 = (double )*u0;
#line 174
      a0 += LDA;
#line 174
      u0 += LDU;
#line 174
      *a0 = (double )*u0;
#line 174
      a0 += LDA;
#line 174
      u0 += LDU;
#line 175
      *a0 = (double )*u0;
#line 175
      a0 += LDA;
#line 175
      u0 += LDU;
#line 175
      *a0 = (double )*u0;
#line 175
      a0 += LDA;
#line 175
      u0 += LDU;
#line 176
      *a0 = (double )*u0;
#line 176
      a0 += LDA;
#line 176
      u0 += LDU;
#line 176
      *a0 = (double )*u0;
#line 176
      a0 += LDA;
#line 176
      u0 += LDU;
#line 177
      *a0 = (double )*u0;
#line 177
      a0 += LDA;
#line 177
      u0 += LDU;
#line 177
      *a0 = (double )*u0;
#line 177
      a0 += LDA;
#line 177
      u0 += LDU;
#line 178
      *a0 = (double )*u0;
#line 178
      a0 += LDA;
#line 178
      u0 += LDU;
#line 178
      *a0 = (double )*u0;
#line 178
      a0 += LDA;
#line 178
      u0 += LDU;
#line 179
      *a0 = (double )*u0;
#line 179
      a0 += LDA;
#line 179
      u0 += LDU;
#line 179
      *a0 = (double )*u0;
#line 179
      a0 += LDA;
#line 179
      u0 += LDU;
#line 150
      i ++;
    }
#line 148
    j += 32;
#line 148
    A += incA;
#line 148
    U0 += incU;
  }
#line 184
  if (nr) {
#line 186
    i = 0;
#line 186
    while (i < (int )M) {
#line 188
      a0 = A + *(LINDXA + i);
#line 188
      u0 = U0 + *(LINDXAU + i);
#line 189
      j = 0;
#line 189
      while (j < nr) {
#line 189
        *a0 = (double )*u0;
#line 189
        j ++;
#line 189
        a0 += LDA;
#line 189
        u0 += LDU;
      }
#line 186
      i ++;
    }
  }
#line 195
  return;
}
}
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 427 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp05T(int const   M , int const   N , double *A , int const   LDA , double const   *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) ;
#line 60 "../HPL_dlaswp05T.c"
void HPL_dlaswp05T(int const   M , int const   N , double *A , int const   LDA , double const   *U ,
                   int const   LDU , int const   *LINDXA , int const   *LINDXAU ) 
{ 
  double const   *U0 ;
  double const   *u0 ;
  double *a0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 132
  U0 = U;
#line 134
  incA = (int )((unsigned int )LDA << 5);
#line 134
  incU = 1 << 5;
#line 142
  if (M <= 0) {
#line 142
    return;
  } else
#line 142
  if (N <= 0) {
#line 142
    return;
  }
#line 144
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 144
  nr = (int )(N - (int const   )nu);
#line 147
  j = 0;
#line 147
  while (j < nu) {
#line 149
    i = 0;
#line 149
    while (i < (int )M) {
#line 151
      a0 = A + *(LINDXA + i);
#line 151
      u0 = U0 + *(LINDXAU + i) * LDU;
#line 153
      *a0 = (double )*(u0 + 0);
#line 153
      a0 += LDA;
#line 155
      *a0 = (double )*(u0 + 1);
#line 155
      a0 += LDA;
#line 158
      *a0 = (double )*(u0 + 2);
#line 158
      a0 += LDA;
#line 158
      *a0 = (double )*(u0 + 3);
#line 158
      a0 += LDA;
#line 161
      *a0 = (double )*(u0 + 4);
#line 161
      a0 += LDA;
#line 161
      *a0 = (double )*(u0 + 5);
#line 161
      a0 += LDA;
#line 162
      *a0 = (double )*(u0 + 6);
#line 162
      a0 += LDA;
#line 162
      *a0 = (double )*(u0 + 7);
#line 162
      a0 += LDA;
#line 165
      *a0 = (double )*(u0 + 8);
#line 165
      a0 += LDA;
#line 165
      *a0 = (double )*(u0 + 9);
#line 165
      a0 += LDA;
#line 166
      *a0 = (double )*(u0 + 10);
#line 166
      a0 += LDA;
#line 166
      *a0 = (double )*(u0 + 11);
#line 166
      a0 += LDA;
#line 167
      *a0 = (double )*(u0 + 12);
#line 167
      a0 += LDA;
#line 167
      *a0 = (double )*(u0 + 13);
#line 167
      a0 += LDA;
#line 168
      *a0 = (double )*(u0 + 14);
#line 168
      a0 += LDA;
#line 168
      *a0 = (double )*(u0 + 15);
#line 168
      a0 += LDA;
#line 171
      *a0 = (double )*(u0 + 16);
#line 171
      a0 += LDA;
#line 171
      *a0 = (double )*(u0 + 17);
#line 171
      a0 += LDA;
#line 172
      *a0 = (double )*(u0 + 18);
#line 172
      a0 += LDA;
#line 172
      *a0 = (double )*(u0 + 19);
#line 172
      a0 += LDA;
#line 173
      *a0 = (double )*(u0 + 20);
#line 173
      a0 += LDA;
#line 173
      *a0 = (double )*(u0 + 21);
#line 173
      a0 += LDA;
#line 174
      *a0 = (double )*(u0 + 22);
#line 174
      a0 += LDA;
#line 174
      *a0 = (double )*(u0 + 23);
#line 174
      a0 += LDA;
#line 175
      *a0 = (double )*(u0 + 24);
#line 175
      a0 += LDA;
#line 175
      *a0 = (double )*(u0 + 25);
#line 175
      a0 += LDA;
#line 176
      *a0 = (double )*(u0 + 26);
#line 176
      a0 += LDA;
#line 176
      *a0 = (double )*(u0 + 27);
#line 176
      a0 += LDA;
#line 177
      *a0 = (double )*(u0 + 28);
#line 177
      a0 += LDA;
#line 177
      *a0 = (double )*(u0 + 29);
#line 177
      a0 += LDA;
#line 178
      *a0 = (double )*(u0 + 30);
#line 178
      a0 += LDA;
#line 178
      *a0 = (double )*(u0 + 31);
#line 178
      a0 += LDA;
#line 149
      i ++;
    }
#line 147
    j += 32;
#line 147
    A += incA;
#line 147
    U0 += incU;
  }
#line 183
  if (nr > 0) {
#line 185
    i = 0;
#line 185
    while (i < (int )M) {
#line 187
      a0 = A + *(LINDXA + i);
#line 187
      u0 = U0 + *(LINDXAU + i) * LDU;
#line 188
      j = 0;
#line 188
      while (j < nr) {
#line 188
        *a0 = (double )*(u0 + j);
#line 188
        j ++;
#line 188
        a0 += LDA;
      }
#line 185
      i ++;
    }
  }
#line 194
  return;
}
}
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 438 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp06N(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA ) ;
#line 60 "../HPL_dlaswp06N.c"
void HPL_dlaswp06N(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA ) 
{ 
  double r ;
  double *U0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 128
  U0 = U;
#line 129
  incA = (int )((unsigned int )LDA << 5);
#line 129
  incU = (int )((unsigned int )LDU << 5);
#line 138
  if (M <= 0) {
#line 138
    return;
  } else
#line 138
  if (N <= 0) {
#line 138
    return;
  }
#line 140
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 140
  nr = (int )(N - (int const   )nu);
#line 143
  j = 0;
#line 143
  while (j < nu) {
#line 145
    i = 0;
#line 145
    while (i < (int )M) {
#line 147
      a0 = A + *(LINDXA + i);
#line 147
      u0 = U0 + i;
#line 149
      r = *a0;
#line 149
      *a0 = *u0;
#line 149
      *u0 = r;
#line 149
      a0 += LDA;
#line 149
      u0 += LDU;
#line 151
      r = *a0;
#line 151
      *a0 = *u0;
#line 151
      *u0 = r;
#line 151
      a0 += LDA;
#line 151
      u0 += LDU;
#line 154
      r = *a0;
#line 154
      *a0 = *u0;
#line 154
      *u0 = r;
#line 154
      a0 += LDA;
#line 154
      u0 += LDU;
#line 155
      r = *a0;
#line 155
      *a0 = *u0;
#line 155
      *u0 = r;
#line 155
      a0 += LDA;
#line 155
      u0 += LDU;
#line 158
      r = *a0;
#line 158
      *a0 = *u0;
#line 158
      *u0 = r;
#line 158
      a0 += LDA;
#line 158
      u0 += LDU;
#line 159
      r = *a0;
#line 159
      *a0 = *u0;
#line 159
      *u0 = r;
#line 159
      a0 += LDA;
#line 159
      u0 += LDU;
#line 160
      r = *a0;
#line 160
      *a0 = *u0;
#line 160
      *u0 = r;
#line 160
      a0 += LDA;
#line 160
      u0 += LDU;
#line 161
      r = *a0;
#line 161
      *a0 = *u0;
#line 161
      *u0 = r;
#line 161
      a0 += LDA;
#line 161
      u0 += LDU;
#line 164
      r = *a0;
#line 164
      *a0 = *u0;
#line 164
      *u0 = r;
#line 164
      a0 += LDA;
#line 164
      u0 += LDU;
#line 165
      r = *a0;
#line 165
      *a0 = *u0;
#line 165
      *u0 = r;
#line 165
      a0 += LDA;
#line 165
      u0 += LDU;
#line 166
      r = *a0;
#line 166
      *a0 = *u0;
#line 166
      *u0 = r;
#line 166
      a0 += LDA;
#line 166
      u0 += LDU;
#line 167
      r = *a0;
#line 167
      *a0 = *u0;
#line 167
      *u0 = r;
#line 167
      a0 += LDA;
#line 167
      u0 += LDU;
#line 168
      r = *a0;
#line 168
      *a0 = *u0;
#line 168
      *u0 = r;
#line 168
      a0 += LDA;
#line 168
      u0 += LDU;
#line 169
      r = *a0;
#line 169
      *a0 = *u0;
#line 169
      *u0 = r;
#line 169
      a0 += LDA;
#line 169
      u0 += LDU;
#line 170
      r = *a0;
#line 170
      *a0 = *u0;
#line 170
      *u0 = r;
#line 170
      a0 += LDA;
#line 170
      u0 += LDU;
#line 171
      r = *a0;
#line 171
      *a0 = *u0;
#line 171
      *u0 = r;
#line 171
      a0 += LDA;
#line 171
      u0 += LDU;
#line 174
      r = *a0;
#line 174
      *a0 = *u0;
#line 174
      *u0 = r;
#line 174
      a0 += LDA;
#line 174
      u0 += LDU;
#line 175
      r = *a0;
#line 175
      *a0 = *u0;
#line 175
      *u0 = r;
#line 175
      a0 += LDA;
#line 175
      u0 += LDU;
#line 176
      r = *a0;
#line 176
      *a0 = *u0;
#line 176
      *u0 = r;
#line 176
      a0 += LDA;
#line 176
      u0 += LDU;
#line 177
      r = *a0;
#line 177
      *a0 = *u0;
#line 177
      *u0 = r;
#line 177
      a0 += LDA;
#line 177
      u0 += LDU;
#line 178
      r = *a0;
#line 178
      *a0 = *u0;
#line 178
      *u0 = r;
#line 178
      a0 += LDA;
#line 178
      u0 += LDU;
#line 179
      r = *a0;
#line 179
      *a0 = *u0;
#line 179
      *u0 = r;
#line 179
      a0 += LDA;
#line 179
      u0 += LDU;
#line 180
      r = *a0;
#line 180
      *a0 = *u0;
#line 180
      *u0 = r;
#line 180
      a0 += LDA;
#line 180
      u0 += LDU;
#line 181
      r = *a0;
#line 181
      *a0 = *u0;
#line 181
      *u0 = r;
#line 181
      a0 += LDA;
#line 181
      u0 += LDU;
#line 182
      r = *a0;
#line 182
      *a0 = *u0;
#line 182
      *u0 = r;
#line 182
      a0 += LDA;
#line 182
      u0 += LDU;
#line 183
      r = *a0;
#line 183
      *a0 = *u0;
#line 183
      *u0 = r;
#line 183
      a0 += LDA;
#line 183
      u0 += LDU;
#line 184
      r = *a0;
#line 184
      *a0 = *u0;
#line 184
      *u0 = r;
#line 184
      a0 += LDA;
#line 184
      u0 += LDU;
#line 185
      r = *a0;
#line 185
      *a0 = *u0;
#line 185
      *u0 = r;
#line 185
      a0 += LDA;
#line 185
      u0 += LDU;
#line 186
      r = *a0;
#line 186
      *a0 = *u0;
#line 186
      *u0 = r;
#line 186
      a0 += LDA;
#line 186
      u0 += LDU;
#line 187
      r = *a0;
#line 187
      *a0 = *u0;
#line 187
      *u0 = r;
#line 187
      a0 += LDA;
#line 187
      u0 += LDU;
#line 188
      r = *a0;
#line 188
      *a0 = *u0;
#line 188
      *u0 = r;
#line 188
      a0 += LDA;
#line 188
      u0 += LDU;
#line 189
      r = *a0;
#line 189
      *a0 = *u0;
#line 189
      *u0 = r;
#line 189
      a0 += LDA;
#line 189
      u0 += LDU;
#line 145
      i ++;
    }
#line 143
    j += 32;
#line 143
    A += incA;
#line 143
    U0 += incU;
  }
#line 194
  if (nr) {
#line 196
    i = 0;
#line 196
    while (i < (int )M) {
#line 198
      a0 = A + *(LINDXA + i);
#line 198
      u0 = U0 + i;
#line 199
      j = 0;
#line 199
      while (j < nr) {
#line 200
        r = *a0;
#line 200
        *a0 = *u0;
#line 200
        *u0 = r;
#line 199
        j ++;
#line 199
        a0 += LDA;
#line 199
        u0 += LDU;
      }
#line 196
      i ++;
    }
  }
#line 206
  return;
}
}
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 448 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_dlaswp06T(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA ) ;
#line 60 "../HPL_dlaswp06T.c"
void HPL_dlaswp06T(int const   M , int const   N , double *A , int const   LDA , double *U ,
                   int const   LDU , int const   *LINDXA ) 
{ 
  double r ;
  double *U0 ;
  double *a0 ;
  double *u0 ;
  int incA ;
  int incU ;
  int nr ;
  int nu ;
  register int i ;
  register int j ;

  {
#line 128
  U0 = U;
#line 129
  incA = (int )((unsigned int )LDA << 5);
#line 129
  incU = 1 << 5;
#line 137
  if (M <= 0) {
#line 137
    return;
  } else
#line 137
  if (N <= 0) {
#line 137
    return;
  }
#line 139
  nu = (int )(((unsigned int )N >> 5) << 5);
#line 139
  nr = (int )(N - (int const   )nu);
#line 142
  j = 0;
#line 142
  while (j < nu) {
#line 144
    i = 0;
#line 144
    while (i < (int )M) {
#line 146
      a0 = A + *(LINDXA + i);
#line 146
      u0 = U0 + i * (int )LDU;
#line 148
      r = *a0;
#line 148
      *a0 = *(u0 + 0);
#line 148
      *(u0 + 0) = r;
#line 148
      a0 += LDA;
#line 150
      r = *a0;
#line 150
      *a0 = *(u0 + 1);
#line 150
      *(u0 + 1) = r;
#line 150
      a0 += LDA;
#line 153
      r = *a0;
#line 153
      *a0 = *(u0 + 2);
#line 153
      *(u0 + 2) = r;
#line 153
      a0 += LDA;
#line 154
      r = *a0;
#line 154
      *a0 = *(u0 + 3);
#line 154
      *(u0 + 3) = r;
#line 154
      a0 += LDA;
#line 157
      r = *a0;
#line 157
      *a0 = *(u0 + 4);
#line 157
      *(u0 + 4) = r;
#line 157
      a0 += LDA;
#line 158
      r = *a0;
#line 158
      *a0 = *(u0 + 5);
#line 158
      *(u0 + 5) = r;
#line 158
      a0 += LDA;
#line 159
      r = *a0;
#line 159
      *a0 = *(u0 + 6);
#line 159
      *(u0 + 6) = r;
#line 159
      a0 += LDA;
#line 160
      r = *a0;
#line 160
      *a0 = *(u0 + 7);
#line 160
      *(u0 + 7) = r;
#line 160
      a0 += LDA;
#line 163
      r = *a0;
#line 163
      *a0 = *(u0 + 8);
#line 163
      *(u0 + 8) = r;
#line 163
      a0 += LDA;
#line 164
      r = *a0;
#line 164
      *a0 = *(u0 + 9);
#line 164
      *(u0 + 9) = r;
#line 164
      a0 += LDA;
#line 165
      r = *a0;
#line 165
      *a0 = *(u0 + 10);
#line 165
      *(u0 + 10) = r;
#line 165
      a0 += LDA;
#line 166
      r = *a0;
#line 166
      *a0 = *(u0 + 11);
#line 166
      *(u0 + 11) = r;
#line 166
      a0 += LDA;
#line 167
      r = *a0;
#line 167
      *a0 = *(u0 + 12);
#line 167
      *(u0 + 12) = r;
#line 167
      a0 += LDA;
#line 168
      r = *a0;
#line 168
      *a0 = *(u0 + 13);
#line 168
      *(u0 + 13) = r;
#line 168
      a0 += LDA;
#line 169
      r = *a0;
#line 169
      *a0 = *(u0 + 14);
#line 169
      *(u0 + 14) = r;
#line 169
      a0 += LDA;
#line 170
      r = *a0;
#line 170
      *a0 = *(u0 + 15);
#line 170
      *(u0 + 15) = r;
#line 170
      a0 += LDA;
#line 173
      r = *a0;
#line 173
      *a0 = *(u0 + 16);
#line 173
      *(u0 + 16) = r;
#line 173
      a0 += LDA;
#line 174
      r = *a0;
#line 174
      *a0 = *(u0 + 17);
#line 174
      *(u0 + 17) = r;
#line 174
      a0 += LDA;
#line 175
      r = *a0;
#line 175
      *a0 = *(u0 + 18);
#line 175
      *(u0 + 18) = r;
#line 175
      a0 += LDA;
#line 176
      r = *a0;
#line 176
      *a0 = *(u0 + 19);
#line 176
      *(u0 + 19) = r;
#line 176
      a0 += LDA;
#line 177
      r = *a0;
#line 177
      *a0 = *(u0 + 20);
#line 177
      *(u0 + 20) = r;
#line 177
      a0 += LDA;
#line 178
      r = *a0;
#line 178
      *a0 = *(u0 + 21);
#line 178
      *(u0 + 21) = r;
#line 178
      a0 += LDA;
#line 179
      r = *a0;
#line 179
      *a0 = *(u0 + 22);
#line 179
      *(u0 + 22) = r;
#line 179
      a0 += LDA;
#line 180
      r = *a0;
#line 180
      *a0 = *(u0 + 23);
#line 180
      *(u0 + 23) = r;
#line 180
      a0 += LDA;
#line 181
      r = *a0;
#line 181
      *a0 = *(u0 + 24);
#line 181
      *(u0 + 24) = r;
#line 181
      a0 += LDA;
#line 182
      r = *a0;
#line 182
      *a0 = *(u0 + 25);
#line 182
      *(u0 + 25) = r;
#line 182
      a0 += LDA;
#line 183
      r = *a0;
#line 183
      *a0 = *(u0 + 26);
#line 183
      *(u0 + 26) = r;
#line 183
      a0 += LDA;
#line 184
      r = *a0;
#line 184
      *a0 = *(u0 + 27);
#line 184
      *(u0 + 27) = r;
#line 184
      a0 += LDA;
#line 185
      r = *a0;
#line 185
      *a0 = *(u0 + 28);
#line 185
      *(u0 + 28) = r;
#line 185
      a0 += LDA;
#line 186
      r = *a0;
#line 186
      *a0 = *(u0 + 29);
#line 186
      *(u0 + 29) = r;
#line 186
      a0 += LDA;
#line 187
      r = *a0;
#line 187
      *a0 = *(u0 + 30);
#line 187
      *(u0 + 30) = r;
#line 187
      a0 += LDA;
#line 188
      r = *a0;
#line 188
      *a0 = *(u0 + 31);
#line 188
      *(u0 + 31) = r;
#line 188
      a0 += LDA;
#line 144
      i ++;
    }
#line 142
    j += 32;
#line 142
    A += incA;
#line 142
    U0 += incU;
  }
#line 193
  if (nr > 0) {
#line 195
    i = 0;
#line 195
    while (i < (int )M) {
#line 197
      a0 = A + *(LINDXA + i);
#line 197
      u0 = U0 + i * (int )LDU;
#line 198
      j = 0;
#line 198
      while (j < nr) {
#line 199
        r = *a0;
#line 199
        *a0 = *(u0 + j);
#line 199
        *(u0 + j) = r;
#line 198
        j ++;
#line 198
        a0 += LDA;
      }
#line 195
      i ++;
    }
  }
#line 205
  return;
}
}
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 466 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pwarn(FILE *STREAM , int LINE , char const   *SRNAME , char const   *FORM 
               , ...) ;
#line 53 "../HPL_pwarn.c"
void HPL_pwarn(FILE *STREAM , int LINE , char const   *SRNAME , char const   *FORM 
               , ...) 
{ 
  va_list argptr ;
  int rank ;
  char cline[128] ;

  {
#line 113
  __builtin_va_start(argptr, FORM);
#line 121
  vsprintf((char * __restrict  )(cline), (char const   * __restrict  )FORM, argptr);
#line 122
  __builtin_va_end(argptr);
#line 124
  MPI_Comm_rank(1140850688, & rank);
#line 128
  if (LINE <= 0) {
#line 129
    HPL_fprintf(STREAM, "%s %s %d, %s %s:\n>>> %s <<<\n\n", "HPL ERROR", "from process #",
                rank, "in function", SRNAME, cline);
  } else {
#line 133
    HPL_fprintf(STREAM, "%s %s %d, %s %d %s %s:\n>>> %s <<<\n\n", "HPL ERROR", "from process #",
                rank, "on line", LINE, "of function", SRNAME, cline);
  }
#line 139
  return;
}
}
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1044 "//usr/include/mpich/mpi.h"
extern int MPI_Abort(MPI_Comm comm , int errorcode ) ;
#line 53 "../HPL_pabort.c"
void HPL_pabort(int LINE , char const   *SRNAME , char const   *FORM  , ...) 
{ 
  va_list argptr ;
  int rank ;
  char cline[128] ;

  {
#line 108
  __builtin_va_start(argptr, FORM);
#line 115
  vsprintf((char * __restrict  )(cline), (char const   * __restrict  )FORM, argptr);
#line 116
  __builtin_va_end(argptr);
#line 118
  MPI_Comm_rank(1140850688, & rank);
#line 122
  if (LINE <= 0) {
#line 123
    HPL_fprintf(stderr, "%s %s %d, %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR",
                "from process #", rank, "in function", SRNAME, cline);
  } else {
#line 127
    HPL_fprintf(stderr, "%s %s %d, %s %d %s %s:\n>>> %s <<< Abort ...\n\n", "HPL ERROR",
                "from process #", rank, "on line", LINE, "of function", SRNAME, cline);
  }
#line 132
  MPI_Abort(1140850688, -1);
#line 133
  exit(-1);
}
}
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 474 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
void HPL_pdlaprnt(HPL_T_grid const   *GRID , int const   M , int const   N , int const   NB ,
                  double *A , int const   LDA , int const   IAROW , int const   IACOL ,
                  char const   *CMATNM ) ;
#line 53 "../HPL_pdlaprnt.c"
void HPL_pdlaprnt(HPL_T_grid const   *GRID , int const   M , int const   N , int const   NB ,
                  double *A , int const   LDA , int const   IAROW , int const   IACOL ,
                  char const   *CMATNM ) 
{ 
  MPI_Comm Acomm ;
  double *buf ;
  int h ;
  int i ;
  int ib ;
  int icurcol ;
  int icurrow ;
  int ii ;
  int j ;
  int jb ;
  int jj ;
  int mycol ;
  int myrow ;
  int npcol ;
  int nprow ;
  int src ;
  void *tmp ;

  {
#line 133
  buf = (double *)((void *)0);
#line 134
  icurcol = (int )IACOL;
#line 134
  icurrow = (int )IAROW;
#line 134
  ii = 0;
#line 134
  jj = 0;
#line 140
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
#line 141
  Acomm = (MPI_Comm )GRID->all_comm;
#line 142
  if (myrow == 0) {
#line 142
    if (mycol == 0) {
#line 143
      tmp = malloc((unsigned long )NB * sizeof(double ));
#line 143
      buf = (double *)tmp;
    }
  }
#line 145
  j = 0;
#line 145
  while (j < (int )N) {
#line 147
    jb = (int )(N - (int const   )j);
#line 147
    if (jb < (int )NB) {
#line 147
      jb = jb;
    } else {
#line 147
      jb = (int )NB;
    }
#line 148
    h = 0;
#line 148
    while (h < jb) {
#line 150
      HPL_barrier(Acomm);
#line 152
      i = 0;
#line 152
      while (i < (int )M) {
#line 154
        ib = (int )(M - (int const   )i);
#line 154
        if (ib < (int )NB) {
#line 154
          ib = ib;
        } else {
#line 154
          ib = (int )NB;
        }
#line 155
        if (icurrow == 0) {
#line 155
          if (icurcol == 0) {
#line 157
            if (myrow == 0) {
#line 157
              if (mycol == 0) {
#line 158
                HPL_dlaprnt((int const   )ib, (int const   )1, (A + ii) + (jj + h) * (int )LDA,
                            (int const   )(i + 1), (int const   )((j + h) + 1), LDA,
                            CMATNM);
              }
            }
          } else {
#line 155
            goto _L___0;
          }
        } else
        _L___0: 
#line 163
        if (myrow == icurrow) {
#line 163
          if (mycol == icurcol) {
#line 165
            HPL_send((A + ii) + (jj + h) * (int )LDA, ib, 0, (9000 + (j + h) * (int )M) + i,
                     Acomm);
          } else {
#line 163
            goto _L;
          }
        } else
        _L: 
#line 168
        if (myrow == 0) {
#line 168
          if (mycol == 0) {
#line 170
            src = HPL_pnum(GRID, (int const   )icurrow, (int const   )icurcol);
#line 171
            HPL_recv(buf, ib, src, (9000 + (j + h) * (int )M) + i, Acomm);
#line 173
            HPL_dlaprnt((int const   )ib, (int const   )1, buf, (int const   )(i + 1),
                        (int const   )((j + h) + 1), NB, CMATNM);
          }
        }
#line 176
        if (myrow == icurrow) {
#line 176
          ii += ib;
        }
#line 177
        if (icurrow != nprow - 1) {
#line 177
          icurrow ++;
        } else {
#line 177
          icurrow = 0;
        }
#line 178
        HPL_barrier(Acomm);
#line 152
        i += (int )NB;
      }
#line 180
      ii = 0;
#line 180
      icurrow = (int )IAROW;
#line 148
      h ++;
    }
#line 182
    if (mycol == icurcol) {
#line 182
      jj += jb;
    }
#line 183
    if (icurcol != npcol - 1) {
#line 183
      icurcol ++;
    } else {
#line 183
      icurcol = 0;
    }
#line 184
    HPL_barrier(Acomm);
#line 145
    j += (int )NB;
  }
#line 186
  if (myrow == 0) {
#line 186
    if (mycol == 0) {
#line 186
      if (buf) {
#line 186
        free((void *)buf);
      }
    }
  }
#line 190
  return;
}
}
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 139 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_auxil.h"
extern double HPL_dlamch(HPL_T_MACH const    ) ;
#line 486 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
double HPL_pdlamch(MPI_Comm COMM , HPL_T_MACH const   CMACH ) ;
#line 53 "../HPL_pdlamch.c"
double HPL_pdlamch(MPI_Comm COMM , HPL_T_MACH const   CMACH ) 
{ 
  double param ;

  {
#line 119
  param = HPL_dlamch(CMACH);
#line 121
  switch ((unsigned int const   )CMACH) {
  case 900U: 
  case 901U: 
  case 906U: 
  case 907U: 
#line 127
  HPL_all_reduce((void *)(& param), (int const   )1, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                                 void const   * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const    ))(& HPL_max),
                 COMM);
#line 129
  break;
  case 908U: 
  case 909U: 
#line 132
  HPL_all_reduce((void *)(& param), (int const   )1, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                                 void const   * ,
                                                                                                 void * ,
                                                                                                 HPL_T_TYPE const    ))(& HPL_min),
                 COMM);
#line 134
  break;
  default: 
#line 136
  break;
  }
#line 139
  return (param);
}
}
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 491 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pauxil.h"
double HPL_pdlange(HPL_T_grid const   *GRID , HPL_T_NORM const   NORM , int const   M ,
                   int const   N , int const   NB , double const   *A , int const   LDA ) ;
#line 53 "../HPL_pdlange.c"
double HPL_pdlange(HPL_T_grid const   *GRID , HPL_T_NORM const   NORM , int const   M ,
                   int const   N , int const   NB , double const   *A , int const   LDA ) 
{ 
  double s ;
  double v0 ;
  double *work ;
  MPI_Comm Acomm ;
  MPI_Comm Ccomm ;
  MPI_Comm Rcomm ;
  int ii ;
  int jj ;
  int mp ;
  int mycol ;
  int myrow ;
  int npcol ;
  int nprow ;
  int nq ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;
  double tmp___0 ;
  double tmp___1 ;
  void *tmp___2 ;
  double tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  double tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 127
  v0 = 0.0;
#line 127
  work = (double *)((void *)0);
#line 134
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
#line 135
  Rcomm = (MPI_Comm )GRID->row_comm;
#line 135
  Ccomm = (MPI_Comm )GRID->col_comm;
#line 136
  Acomm = (MPI_Comm )GRID->all_comm;
#line 138
  if (nprow > 1) {
#line 138
    inb__ = (int )NB;
#line 138
    if (inb__ <= 0) {
#line 138
      nblk__ = - inb__ / (int )NB + 1;
#line 138
      src__ = nblk__;
#line 138
      src__ -= (src__ / nprow) * nprow;
#line 138
      inb__ += nblk__ * (int )NB;
#line 138
      n__ = (int )(M - (int const   )inb__);
#line 138
      if (n__ <= 0) {
#line 138
        if (myrow == src__) {
#line 138
          mp = (int )M;
        } else {
#line 138
          mp = 0;
        }
      } else {
#line 138
        mydist__ = myrow - src__;
#line 138
        if (mydist__ < 0) {
#line 138
          mydist__ += nprow;
        }
#line 138
        nblk__ = n__ / (int )NB + 1;
#line 138
        quot__ = nblk__ / nprow;
#line 138
        mydist__ -= nblk__ - quot__ * nprow;
#line 138
        if (mydist__ < 0) {
#line 138
          if (myrow != src__) {
#line 138
            mp = (int )(NB + NB * (int const   )quot__);
          } else {
#line 138
            mp = inb__ + (int )(NB * (int const   )quot__);
          }
        } else
#line 138
        if (mydist__ > 0) {
#line 138
          mp = (int )(NB * (int const   )quot__);
        } else
#line 138
        if (myrow != src__) {
#line 138
          mp = (n__ + (int )NB) + (int )(NB * (int const   )(quot__ - nblk__));
        } else {
#line 138
          mp = (int )(M + NB * (int const   )(quot__ - nblk__));
        }
      }
    } else {
#line 138
      n__ = (int )(M - (int const   )inb__);
#line 138
      if (n__ <= 0) {
#line 138
        if (myrow == 0) {
#line 138
          mp = (int )M;
        } else {
#line 138
          mp = 0;
        }
      } else {
#line 138
        mydist__ = myrow;
#line 138
        if (mydist__ < 0) {
#line 138
          mydist__ += nprow;
        }
#line 138
        nblk__ = n__ / (int )NB + 1;
#line 138
        quot__ = nblk__ / nprow;
#line 138
        mydist__ -= nblk__ - quot__ * nprow;
#line 138
        if (mydist__ < 0) {
#line 138
          if (myrow != 0) {
#line 138
            mp = (int )(NB + NB * (int const   )quot__);
          } else {
#line 138
            mp = inb__ + (int )(NB * (int const   )quot__);
          }
        } else
#line 138
        if (mydist__ > 0) {
#line 138
          mp = (int )(NB * (int const   )quot__);
        } else
#line 138
        if (myrow != 0) {
#line 138
          mp = (n__ + (int )NB) + (int )(NB * (int const   )(quot__ - nblk__));
        } else {
#line 138
          mp = (int )(M + NB * (int const   )(quot__ - nblk__));
        }
      }
    }
  } else {
#line 138
    mp = (int )M;
  }
#line 139
  if (npcol > 1) {
#line 139
    inb_____0 = (int )NB;
#line 139
    if (inb_____0 <= 0) {
#line 139
      nblk_____0 = - inb_____0 / (int )NB + 1;
#line 139
      src_____0 = nblk_____0;
#line 139
      src_____0 -= (src_____0 / npcol) * npcol;
#line 139
      inb_____0 += nblk_____0 * (int )NB;
#line 139
      n_____0 = (int )(N - (int const   )inb_____0);
#line 139
      if (n_____0 <= 0) {
#line 139
        if (mycol == src_____0) {
#line 139
          nq = (int )N;
        } else {
#line 139
          nq = 0;
        }
      } else {
#line 139
        mydist_____0 = mycol - src_____0;
#line 139
        if (mydist_____0 < 0) {
#line 139
          mydist_____0 += npcol;
        }
#line 139
        nblk_____0 = n_____0 / (int )NB + 1;
#line 139
        quot_____0 = nblk_____0 / npcol;
#line 139
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 139
        if (mydist_____0 < 0) {
#line 139
          if (mycol != src_____0) {
#line 139
            nq = (int )(NB + NB * (int const   )quot_____0);
          } else {
#line 139
            nq = inb_____0 + (int )(NB * (int const   )quot_____0);
          }
        } else
#line 139
        if (mydist_____0 > 0) {
#line 139
          nq = (int )(NB * (int const   )quot_____0);
        } else
#line 139
        if (mycol != src_____0) {
#line 139
          nq = (n_____0 + (int )NB) + (int )(NB * (int const   )(quot_____0 - nblk_____0));
        } else {
#line 139
          nq = (int )(N + NB * (int const   )(quot_____0 - nblk_____0));
        }
      }
    } else {
#line 139
      n_____0 = (int )(N - (int const   )inb_____0);
#line 139
      if (n_____0 <= 0) {
#line 139
        if (mycol == 0) {
#line 139
          nq = (int )N;
        } else {
#line 139
          nq = 0;
        }
      } else {
#line 139
        mydist_____0 = mycol;
#line 139
        if (mydist_____0 < 0) {
#line 139
          mydist_____0 += npcol;
        }
#line 139
        nblk_____0 = n_____0 / (int )NB + 1;
#line 139
        quot_____0 = nblk_____0 / npcol;
#line 139
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 139
        if (mydist_____0 < 0) {
#line 139
          if (mycol != 0) {
#line 139
            nq = (int )(NB + NB * (int const   )quot_____0);
          } else {
#line 139
            nq = inb_____0 + (int )(NB * (int const   )quot_____0);
          }
        } else
#line 139
        if (mydist_____0 > 0) {
#line 139
          nq = (int )(NB * (int const   )quot_____0);
        } else
#line 139
        if (mycol != 0) {
#line 139
          nq = (n_____0 + (int )NB) + (int )(NB * (int const   )(quot_____0 - nblk_____0));
        } else {
#line 139
          nq = (int )(N + NB * (int const   )(quot_____0 - nblk_____0));
        }
      }
    }
  } else {
#line 139
    nq = (int )N;
  }
#line 141
  if (M < N) {
#line 141
    tmp___8 = (int )M;
  } else {
#line 141
    tmp___8 = (int )N;
  }
#line 141
  if (tmp___8 == 0) {
#line 141
    return (v0);
  } else
#line 142
  if ((unsigned int const   )NORM == 800U) {
#line 147
    if (nq > 0) {
#line 147
      if (mp > 0) {
#line 149
        jj = 0;
#line 149
        while (jj < nq) {
#line 151
          ii = 0;
#line 151
          while (ii < mp) {
#line 152
            if (*A < (double const   )0) {
#line 152
              tmp___1 = (double )(- *A);
            } else {
#line 152
              tmp___1 = (double )*A;
            }
#line 152
            if (v0 > tmp___1) {
#line 152
              v0 = v0;
            } else {
#line 152
              if (*A < (double const   )0) {
#line 152
                tmp___0 = (double )(- *A);
              } else {
#line 152
                tmp___0 = (double )*A;
              }
#line 152
              v0 = tmp___0;
            }
#line 152
            A ++;
#line 151
            ii ++;
          }
#line 153
          A += LDA - (int const   )mp;
#line 149
          jj ++;
        }
      }
    }
#line 156
    HPL_reduce((void *)(& v0), (int const   )1, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                            void const   * ,
                                                                                            void * ,
                                                                                            HPL_T_TYPE const    ))(& HPL_max),
               (int const   )0, Acomm);
  } else
#line 159
  if ((unsigned int const   )NORM == 801U) {
#line 164
    if (nq > 0) {
#line 166
      tmp___2 = malloc((unsigned long )nq * sizeof(double ));
#line 166
      work = (double *)tmp___2;
#line 167
      if ((unsigned long )work == (unsigned long )((void *)0)) {
#line 168
        HPL_pabort(168, "HPL_pdlange", "Memory allocation failed");
      }
#line 170
      jj = 0;
#line 170
      while (jj < nq) {
#line 172
        s = 0.0;
#line 173
        ii = 0;
#line 173
        while (ii < mp) {
#line 173
          if (*A < (double const   )0) {
#line 173
            tmp___3 = (double )(- *A);
          } else {
#line 173
            tmp___3 = (double )*A;
          }
#line 173
          s += tmp___3;
#line 173
          A ++;
#line 173
          ii ++;
        }
#line 174
        *(work + jj) = s;
#line 174
        A += LDA - (int const   )mp;
#line 170
        jj ++;
      }
#line 179
      HPL_reduce((void *)work, (int const   )nq, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                             void const   * ,
                                                                                             void * ,
                                                                                             HPL_T_TYPE const    ))(& HPL_sum),
                 (int const   )0, Ccomm);
#line 184
      if (myrow == 0) {
#line 185
        tmp___4 = cblas_idamax((int const   )nq, (double const   *)work, (int const   )1);
#line 185
        v0 = *(work + tmp___4);
#line 185
        if (v0 < (double )0) {
#line 185
          v0 = - v0;
        } else {
#line 185
          v0 = v0;
        }
      }
#line 186
      if (work) {
#line 186
        free((void *)work);
      }
    }
#line 191
    if (myrow == 0) {
#line 192
      HPL_reduce((void *)(& v0), (int const   )1, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                              void const   * ,
                                                                                              void * ,
                                                                                              HPL_T_TYPE const    ))(& HPL_max),
                 (int const   )0, Rcomm);
    }
  } else
#line 195
  if ((unsigned int const   )NORM == 802U) {
#line 200
    if (mp > 0) {
#line 202
      tmp___5 = malloc((unsigned long )mp * sizeof(double ));
#line 202
      work = (double *)tmp___5;
#line 203
      if ((unsigned long )work == (unsigned long )((void *)0)) {
#line 204
        HPL_pabort(204, "HPL_pdlange", "Memory allocation failed");
      }
#line 206
      ii = 0;
#line 206
      while (ii < mp) {
#line 206
        *(work + ii) = 0.0;
#line 206
        ii ++;
      }
#line 208
      jj = 0;
#line 208
      while (jj < nq) {
#line 210
        ii = 0;
#line 210
        while (ii < mp) {
#line 211
          if (*A < (double const   )0) {
#line 211
            tmp___6 = (double )(- *A);
          } else {
#line 211
            tmp___6 = (double )*A;
          }
#line 211
          *(work + ii) += tmp___6;
#line 211
          A ++;
#line 210
          ii ++;
        }
#line 212
        A += LDA - (int const   )mp;
#line 208
        jj ++;
      }
#line 217
      HPL_reduce((void *)work, (int const   )mp, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                             void const   * ,
                                                                                             void * ,
                                                                                             HPL_T_TYPE const    ))(& HPL_sum),
                 (int const   )0, Rcomm);
#line 222
      if (mycol == 0) {
#line 223
        tmp___7 = cblas_idamax((int const   )mp, (double const   *)work, (int const   )1);
#line 223
        v0 = *(work + tmp___7);
#line 223
        if (v0 < (double )0) {
#line 223
          v0 = - v0;
        } else {
#line 223
          v0 = v0;
        }
      }
#line 224
      if (work) {
#line 224
        free((void *)work);
      }
    }
#line 229
    if (mycol == 0) {
#line 230
      HPL_reduce((void *)(& v0), (int const   )1, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                              void const   * ,
                                                                                              void * ,
                                                                                              HPL_T_TYPE const    ))(& HPL_max),
                 (int const   )0, Ccomm);
    }
  }
#line 236
  HPL_broadcast((void *)(& v0), (int const   )1, (HPL_T_TYPE const   )101, (int const   )0,
                Acomm);
#line 238
  return (v0);
}
}
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 78 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocmax(HPL_T_panel *PANEL , int const   N , int const   II , int const   JJ ,
                 double *WORK ) ;
#line 53 "../HPL_dlocmax.c"
void HPL_dlocmax(HPL_T_panel *PANEL , int const   N , int const   II , int const   JJ ,
                 double *WORK ) 
{ 
  double *A ;
  int kk ;
  int igindx ;
  int ilindx ;
  int myrow ;
  int nb ;
  int nprow ;
  double tmp ;
  double tmp___0 ;

  {
#line 119
  if (N > 0) {
#line 121
    A = (PANEL->A + II) + JJ * (int const   )PANEL->lda;
#line 122
    myrow = (PANEL->grid)->myrow;
#line 123
    nprow = (PANEL->grid)->nprow;
#line 124
    nb = PANEL->nb;
#line 125
    ilindx = cblas_idamax(N, (double const   *)A, (int const   )1);
#line 125
    kk = (PANEL->ii + (int )II) + ilindx;
#line 126
    if (nprow > 1) {
#line 126
      if (myrow == 0) {
#line 126
        if (kk < nb) {
#line 126
          igindx = kk;
        } else {
#line 126
          igindx = kk + (nb * (nprow - 1)) * ((kk - nb) / nb + 1);
        }
      } else
#line 126
      if (myrow < 0) {
#line 126
        igindx = (kk + nb) + nb * ((((nprow - 1) * (kk / nb) + myrow) - 1) + nprow);
      } else {
#line 126
        igindx = (kk + nb) + nb * (((nprow - 1) * (kk / nb) + myrow) - 1);
      }
    } else {
#line 126
      igindx = kk;
    }
#line 133
    *(WORK + 0) = *(A + ilindx);
#line 133
    *(WORK + 1) = (double )ilindx;
#line 134
    *(WORK + 2) = (double )igindx;
#line 134
    *(WORK + 3) = (double )myrow;
  } else {
#line 143
    tmp___0 = 0.0;
#line 143
    *(WORK + 2) = tmp___0;
#line 143
    tmp = tmp___0;
#line 143
    *(WORK + 1) = tmp;
#line 143
    *(WORK + 0) = tmp;
#line 144
    *(WORK + 3) = (double )(PANEL->grid)->nprow;
  }
#line 149
  return;
}
}
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 87 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocswpN(HPL_T_panel *PANEL , int const   II , int const   JJ , double *WORK ) ;
#line 60 "../HPL_dlocswpN.c"
void HPL_dlocswpN(HPL_T_panel *PANEL , int const   II , int const   JJ , double *WORK ) 
{ 
  double gmax ;
  double *A1 ;
  double *A2 ;
  double *L ;
  double *Wr0 ;
  double *Wmx ;
  int ilindx ;
  int lda ;
  int myrow ;
  int n0 ;
  int nr ;
  int nu ;
  register int i ;
  double tmp ;
  double tmp___0 ;
  double tmp___1 ;
  double tmp___2 ;
  double tmp___3 ;
  double tmp___4 ;
  double tmp___5 ;
  double tmp___6 ;
  double tmp___7 ;
  double tmp___8 ;
  double tmp___9 ;
  double tmp___10 ;
  double tmp___11 ;
  double tmp___12 ;
  double tmp___13 ;
  double tmp___14 ;
  double tmp___15 ;
  double tmp___16 ;
  double tmp___17 ;
  double tmp___18 ;
  double tmp___19 ;
  double tmp___20 ;
  double tmp___21 ;
  double tmp___22 ;
  double tmp___23 ;
  double tmp___24 ;
  double tmp___25 ;
  double tmp___26 ;
  double tmp___27 ;
  double tmp___28 ;
  double tmp___29 ;
  double tmp___30 ;
  double tmp___31 ;
  double tmp___32 ;
  double tmp___33 ;
  double tmp___34 ;
  double tmp___35 ;
  double tmp___36 ;
  double tmp___37 ;
  double tmp___38 ;
  double tmp___39 ;
  double tmp___40 ;
  double tmp___41 ;
  double tmp___42 ;
  double tmp___43 ;
  double tmp___44 ;
  double tmp___45 ;
  double tmp___46 ;
  double tmp___47 ;
  double tmp___48 ;
  double tmp___49 ;
  double tmp___50 ;
  double tmp___51 ;
  double tmp___52 ;
  double tmp___53 ;
  double tmp___54 ;
  double tmp___55 ;
  double tmp___56 ;
  double tmp___57 ;
  double tmp___58 ;
  double tmp___59 ;
  double tmp___60 ;
  double tmp___61 ;
  double tmp___62 ;
  double tmp___63 ;
  double tmp___64 ;

  {
#line 121
  myrow = (PANEL->grid)->myrow;
#line 121
  n0 = PANEL->jb;
#line 121
  lda = PANEL->lda;
#line 123
  Wmx = WORK + 4;
#line 123
  Wr0 = Wmx + n0;
#line 123
  gmax = *(WORK + 0);
#line 123
  *(Wmx + JJ) = gmax;
#line 124
  nu = (int )(((unsigned int )n0 >> 5) << 5);
#line 126
  nr = n0 - nu;
#line 130
  L = (PANEL->L1 + JJ) + 0;
#line 134
  if (gmax != 0.0) {
#line 139
    if (myrow == PANEL->prow) {
#line 144
      if (myrow == (int )*(WORK + 3)) {
#line 149
        ilindx = (int )*(WORK + 1);
#line 149
        if (ilindx != 0) {
#line 154
          A1 = (PANEL->A + II) + 0;
#line 155
          A2 = (A1 + ilindx) + 0;
#line 157
          i = 0;
#line 157
          while (i < nu) {
#line 160
            tmp = *(Wmx + 0);
#line 160
            *A1 = tmp;
#line 160
            *L = tmp;
#line 160
            *A2 = *(Wr0 + 0);
#line 160
            L += n0;
#line 160
            A1 += lda;
#line 160
            A2 += lda;
#line 162
            tmp___0 = *(Wmx + 1);
#line 162
            *A1 = tmp___0;
#line 162
            *L = tmp___0;
#line 162
            *A2 = *(Wr0 + 1);
#line 162
            L += n0;
#line 162
            A1 += lda;
#line 162
            A2 += lda;
#line 165
            tmp___1 = *(Wmx + 2);
#line 165
            *A1 = tmp___1;
#line 165
            *L = tmp___1;
#line 165
            *A2 = *(Wr0 + 2);
#line 165
            L += n0;
#line 165
            A1 += lda;
#line 165
            A2 += lda;
#line 166
            tmp___2 = *(Wmx + 3);
#line 166
            *A1 = tmp___2;
#line 166
            *L = tmp___2;
#line 166
            *A2 = *(Wr0 + 3);
#line 166
            L += n0;
#line 166
            A1 += lda;
#line 166
            A2 += lda;
#line 169
            tmp___3 = *(Wmx + 4);
#line 169
            *A1 = tmp___3;
#line 169
            *L = tmp___3;
#line 169
            *A2 = *(Wr0 + 4);
#line 169
            L += n0;
#line 169
            A1 += lda;
#line 169
            A2 += lda;
#line 170
            tmp___4 = *(Wmx + 5);
#line 170
            *A1 = tmp___4;
#line 170
            *L = tmp___4;
#line 170
            *A2 = *(Wr0 + 5);
#line 170
            L += n0;
#line 170
            A1 += lda;
#line 170
            A2 += lda;
#line 171
            tmp___5 = *(Wmx + 6);
#line 171
            *A1 = tmp___5;
#line 171
            *L = tmp___5;
#line 171
            *A2 = *(Wr0 + 6);
#line 171
            L += n0;
#line 171
            A1 += lda;
#line 171
            A2 += lda;
#line 172
            tmp___6 = *(Wmx + 7);
#line 172
            *A1 = tmp___6;
#line 172
            *L = tmp___6;
#line 172
            *A2 = *(Wr0 + 7);
#line 172
            L += n0;
#line 172
            A1 += lda;
#line 172
            A2 += lda;
#line 175
            tmp___7 = *(Wmx + 8);
#line 175
            *A1 = tmp___7;
#line 175
            *L = tmp___7;
#line 175
            *A2 = *(Wr0 + 8);
#line 175
            L += n0;
#line 175
            A1 += lda;
#line 175
            A2 += lda;
#line 176
            tmp___8 = *(Wmx + 9);
#line 176
            *A1 = tmp___8;
#line 176
            *L = tmp___8;
#line 176
            *A2 = *(Wr0 + 9);
#line 176
            L += n0;
#line 176
            A1 += lda;
#line 176
            A2 += lda;
#line 177
            tmp___9 = *(Wmx + 10);
#line 177
            *A1 = tmp___9;
#line 177
            *L = tmp___9;
#line 177
            *A2 = *(Wr0 + 10);
#line 177
            L += n0;
#line 177
            A1 += lda;
#line 177
            A2 += lda;
#line 178
            tmp___10 = *(Wmx + 11);
#line 178
            *A1 = tmp___10;
#line 178
            *L = tmp___10;
#line 178
            *A2 = *(Wr0 + 11);
#line 178
            L += n0;
#line 178
            A1 += lda;
#line 178
            A2 += lda;
#line 179
            tmp___11 = *(Wmx + 12);
#line 179
            *A1 = tmp___11;
#line 179
            *L = tmp___11;
#line 179
            *A2 = *(Wr0 + 12);
#line 179
            L += n0;
#line 179
            A1 += lda;
#line 179
            A2 += lda;
#line 180
            tmp___12 = *(Wmx + 13);
#line 180
            *A1 = tmp___12;
#line 180
            *L = tmp___12;
#line 180
            *A2 = *(Wr0 + 13);
#line 180
            L += n0;
#line 180
            A1 += lda;
#line 180
            A2 += lda;
#line 181
            tmp___13 = *(Wmx + 14);
#line 181
            *A1 = tmp___13;
#line 181
            *L = tmp___13;
#line 181
            *A2 = *(Wr0 + 14);
#line 181
            L += n0;
#line 181
            A1 += lda;
#line 181
            A2 += lda;
#line 182
            tmp___14 = *(Wmx + 15);
#line 182
            *A1 = tmp___14;
#line 182
            *L = tmp___14;
#line 182
            *A2 = *(Wr0 + 15);
#line 182
            L += n0;
#line 182
            A1 += lda;
#line 182
            A2 += lda;
#line 185
            tmp___15 = *(Wmx + 16);
#line 185
            *A1 = tmp___15;
#line 185
            *L = tmp___15;
#line 185
            *A2 = *(Wr0 + 16);
#line 185
            L += n0;
#line 185
            A1 += lda;
#line 185
            A2 += lda;
#line 186
            tmp___16 = *(Wmx + 17);
#line 186
            *A1 = tmp___16;
#line 186
            *L = tmp___16;
#line 186
            *A2 = *(Wr0 + 17);
#line 186
            L += n0;
#line 186
            A1 += lda;
#line 186
            A2 += lda;
#line 187
            tmp___17 = *(Wmx + 18);
#line 187
            *A1 = tmp___17;
#line 187
            *L = tmp___17;
#line 187
            *A2 = *(Wr0 + 18);
#line 187
            L += n0;
#line 187
            A1 += lda;
#line 187
            A2 += lda;
#line 188
            tmp___18 = *(Wmx + 19);
#line 188
            *A1 = tmp___18;
#line 188
            *L = tmp___18;
#line 188
            *A2 = *(Wr0 + 19);
#line 188
            L += n0;
#line 188
            A1 += lda;
#line 188
            A2 += lda;
#line 189
            tmp___19 = *(Wmx + 20);
#line 189
            *A1 = tmp___19;
#line 189
            *L = tmp___19;
#line 189
            *A2 = *(Wr0 + 20);
#line 189
            L += n0;
#line 189
            A1 += lda;
#line 189
            A2 += lda;
#line 190
            tmp___20 = *(Wmx + 21);
#line 190
            *A1 = tmp___20;
#line 190
            *L = tmp___20;
#line 190
            *A2 = *(Wr0 + 21);
#line 190
            L += n0;
#line 190
            A1 += lda;
#line 190
            A2 += lda;
#line 191
            tmp___21 = *(Wmx + 22);
#line 191
            *A1 = tmp___21;
#line 191
            *L = tmp___21;
#line 191
            *A2 = *(Wr0 + 22);
#line 191
            L += n0;
#line 191
            A1 += lda;
#line 191
            A2 += lda;
#line 192
            tmp___22 = *(Wmx + 23);
#line 192
            *A1 = tmp___22;
#line 192
            *L = tmp___22;
#line 192
            *A2 = *(Wr0 + 23);
#line 192
            L += n0;
#line 192
            A1 += lda;
#line 192
            A2 += lda;
#line 193
            tmp___23 = *(Wmx + 24);
#line 193
            *A1 = tmp___23;
#line 193
            *L = tmp___23;
#line 193
            *A2 = *(Wr0 + 24);
#line 193
            L += n0;
#line 193
            A1 += lda;
#line 193
            A2 += lda;
#line 194
            tmp___24 = *(Wmx + 25);
#line 194
            *A1 = tmp___24;
#line 194
            *L = tmp___24;
#line 194
            *A2 = *(Wr0 + 25);
#line 194
            L += n0;
#line 194
            A1 += lda;
#line 194
            A2 += lda;
#line 195
            tmp___25 = *(Wmx + 26);
#line 195
            *A1 = tmp___25;
#line 195
            *L = tmp___25;
#line 195
            *A2 = *(Wr0 + 26);
#line 195
            L += n0;
#line 195
            A1 += lda;
#line 195
            A2 += lda;
#line 196
            tmp___26 = *(Wmx + 27);
#line 196
            *A1 = tmp___26;
#line 196
            *L = tmp___26;
#line 196
            *A2 = *(Wr0 + 27);
#line 196
            L += n0;
#line 196
            A1 += lda;
#line 196
            A2 += lda;
#line 197
            tmp___27 = *(Wmx + 28);
#line 197
            *A1 = tmp___27;
#line 197
            *L = tmp___27;
#line 197
            *A2 = *(Wr0 + 28);
#line 197
            L += n0;
#line 197
            A1 += lda;
#line 197
            A2 += lda;
#line 198
            tmp___28 = *(Wmx + 29);
#line 198
            *A1 = tmp___28;
#line 198
            *L = tmp___28;
#line 198
            *A2 = *(Wr0 + 29);
#line 198
            L += n0;
#line 198
            A1 += lda;
#line 198
            A2 += lda;
#line 199
            tmp___29 = *(Wmx + 30);
#line 199
            *A1 = tmp___29;
#line 199
            *L = tmp___29;
#line 199
            *A2 = *(Wr0 + 30);
#line 199
            L += n0;
#line 199
            A1 += lda;
#line 199
            A2 += lda;
#line 200
            tmp___30 = *(Wmx + 31);
#line 200
            *A1 = tmp___30;
#line 200
            *L = tmp___30;
#line 200
            *A2 = *(Wr0 + 31);
#line 200
            L += n0;
#line 200
            A1 += lda;
#line 200
            A2 += lda;
#line 157
            i += 32;
#line 157
            Wmx += 32;
#line 157
            Wr0 += 32;
          }
#line 203
          i = 0;
#line 203
          while (i < nr) {
#line 204
            tmp___31 = *(Wmx + i);
#line 204
            *A1 = tmp___31;
#line 204
            *L = tmp___31;
#line 204
            *A2 = *(Wr0 + i);
#line 203
            i ++;
#line 203
            L += n0;
#line 203
            A1 += lda;
#line 203
            A2 += lda;
          }
        } else {
#line 212
          *((PANEL->A + II) + JJ * (int const   )lda) = gmax;
#line 214
          i = 0;
#line 214
          while (i < nu) {
#line 217
            *L = *(Wmx + 0);
#line 217
            L += n0;
#line 219
            *L = *(Wmx + 1);
#line 219
            L += n0;
#line 222
            *L = *(Wmx + 2);
#line 222
            L += n0;
#line 222
            *L = *(Wmx + 3);
#line 222
            L += n0;
#line 225
            *L = *(Wmx + 4);
#line 225
            L += n0;
#line 225
            *L = *(Wmx + 5);
#line 225
            L += n0;
#line 226
            *L = *(Wmx + 6);
#line 226
            L += n0;
#line 226
            *L = *(Wmx + 7);
#line 226
            L += n0;
#line 229
            *L = *(Wmx + 8);
#line 229
            L += n0;
#line 229
            *L = *(Wmx + 9);
#line 229
            L += n0;
#line 230
            *L = *(Wmx + 10);
#line 230
            L += n0;
#line 230
            *L = *(Wmx + 11);
#line 230
            L += n0;
#line 231
            *L = *(Wmx + 12);
#line 231
            L += n0;
#line 231
            *L = *(Wmx + 13);
#line 231
            L += n0;
#line 232
            *L = *(Wmx + 14);
#line 232
            L += n0;
#line 232
            *L = *(Wmx + 15);
#line 232
            L += n0;
#line 235
            *L = *(Wmx + 16);
#line 235
            L += n0;
#line 235
            *L = *(Wmx + 17);
#line 235
            L += n0;
#line 236
            *L = *(Wmx + 18);
#line 236
            L += n0;
#line 236
            *L = *(Wmx + 19);
#line 236
            L += n0;
#line 237
            *L = *(Wmx + 20);
#line 237
            L += n0;
#line 237
            *L = *(Wmx + 21);
#line 237
            L += n0;
#line 238
            *L = *(Wmx + 22);
#line 238
            L += n0;
#line 238
            *L = *(Wmx + 23);
#line 238
            L += n0;
#line 239
            *L = *(Wmx + 24);
#line 239
            L += n0;
#line 239
            *L = *(Wmx + 25);
#line 239
            L += n0;
#line 240
            *L = *(Wmx + 26);
#line 240
            L += n0;
#line 240
            *L = *(Wmx + 27);
#line 240
            L += n0;
#line 241
            *L = *(Wmx + 28);
#line 241
            L += n0;
#line 241
            *L = *(Wmx + 29);
#line 241
            L += n0;
#line 242
            *L = *(Wmx + 30);
#line 242
            L += n0;
#line 242
            *L = *(Wmx + 31);
#line 242
            L += n0;
#line 214
            i += 32;
#line 214
            Wmx += 32;
#line 214
            Wr0 += 32;
          }
#line 245
          i = 0;
#line 245
          while (i < nr) {
#line 245
            *L = *(Wmx + i);
#line 245
            i ++;
#line 245
            L += n0;
          }
        }
      } else {
#line 254
        A1 = (PANEL->A + II) + 0;
#line 256
        i = 0;
#line 256
        while (i < nu) {
#line 259
          tmp___32 = *(Wmx + 0);
#line 259
          *A1 = tmp___32;
#line 259
          *L = tmp___32;
#line 259
          L += n0;
#line 259
          A1 += lda;
#line 261
          tmp___33 = *(Wmx + 1);
#line 261
          *A1 = tmp___33;
#line 261
          *L = tmp___33;
#line 261
          L += n0;
#line 261
          A1 += lda;
#line 264
          tmp___34 = *(Wmx + 2);
#line 264
          *A1 = tmp___34;
#line 264
          *L = tmp___34;
#line 264
          L += n0;
#line 264
          A1 += lda;
#line 265
          tmp___35 = *(Wmx + 3);
#line 265
          *A1 = tmp___35;
#line 265
          *L = tmp___35;
#line 265
          L += n0;
#line 265
          A1 += lda;
#line 268
          tmp___36 = *(Wmx + 4);
#line 268
          *A1 = tmp___36;
#line 268
          *L = tmp___36;
#line 268
          L += n0;
#line 268
          A1 += lda;
#line 269
          tmp___37 = *(Wmx + 5);
#line 269
          *A1 = tmp___37;
#line 269
          *L = tmp___37;
#line 269
          L += n0;
#line 269
          A1 += lda;
#line 270
          tmp___38 = *(Wmx + 6);
#line 270
          *A1 = tmp___38;
#line 270
          *L = tmp___38;
#line 270
          L += n0;
#line 270
          A1 += lda;
#line 271
          tmp___39 = *(Wmx + 7);
#line 271
          *A1 = tmp___39;
#line 271
          *L = tmp___39;
#line 271
          L += n0;
#line 271
          A1 += lda;
#line 274
          tmp___40 = *(Wmx + 8);
#line 274
          *A1 = tmp___40;
#line 274
          *L = tmp___40;
#line 274
          L += n0;
#line 274
          A1 += lda;
#line 275
          tmp___41 = *(Wmx + 9);
#line 275
          *A1 = tmp___41;
#line 275
          *L = tmp___41;
#line 275
          L += n0;
#line 275
          A1 += lda;
#line 276
          tmp___42 = *(Wmx + 10);
#line 276
          *A1 = tmp___42;
#line 276
          *L = tmp___42;
#line 276
          L += n0;
#line 276
          A1 += lda;
#line 277
          tmp___43 = *(Wmx + 11);
#line 277
          *A1 = tmp___43;
#line 277
          *L = tmp___43;
#line 277
          L += n0;
#line 277
          A1 += lda;
#line 278
          tmp___44 = *(Wmx + 12);
#line 278
          *A1 = tmp___44;
#line 278
          *L = tmp___44;
#line 278
          L += n0;
#line 278
          A1 += lda;
#line 279
          tmp___45 = *(Wmx + 13);
#line 279
          *A1 = tmp___45;
#line 279
          *L = tmp___45;
#line 279
          L += n0;
#line 279
          A1 += lda;
#line 280
          tmp___46 = *(Wmx + 14);
#line 280
          *A1 = tmp___46;
#line 280
          *L = tmp___46;
#line 280
          L += n0;
#line 280
          A1 += lda;
#line 281
          tmp___47 = *(Wmx + 15);
#line 281
          *A1 = tmp___47;
#line 281
          *L = tmp___47;
#line 281
          L += n0;
#line 281
          A1 += lda;
#line 284
          tmp___48 = *(Wmx + 16);
#line 284
          *A1 = tmp___48;
#line 284
          *L = tmp___48;
#line 284
          L += n0;
#line 284
          A1 += lda;
#line 285
          tmp___49 = *(Wmx + 17);
#line 285
          *A1 = tmp___49;
#line 285
          *L = tmp___49;
#line 285
          L += n0;
#line 285
          A1 += lda;
#line 286
          tmp___50 = *(Wmx + 18);
#line 286
          *A1 = tmp___50;
#line 286
          *L = tmp___50;
#line 286
          L += n0;
#line 286
          A1 += lda;
#line 287
          tmp___51 = *(Wmx + 19);
#line 287
          *A1 = tmp___51;
#line 287
          *L = tmp___51;
#line 287
          L += n0;
#line 287
          A1 += lda;
#line 288
          tmp___52 = *(Wmx + 20);
#line 288
          *A1 = tmp___52;
#line 288
          *L = tmp___52;
#line 288
          L += n0;
#line 288
          A1 += lda;
#line 289
          tmp___53 = *(Wmx + 21);
#line 289
          *A1 = tmp___53;
#line 289
          *L = tmp___53;
#line 289
          L += n0;
#line 289
          A1 += lda;
#line 290
          tmp___54 = *(Wmx + 22);
#line 290
          *A1 = tmp___54;
#line 290
          *L = tmp___54;
#line 290
          L += n0;
#line 290
          A1 += lda;
#line 291
          tmp___55 = *(Wmx + 23);
#line 291
          *A1 = tmp___55;
#line 291
          *L = tmp___55;
#line 291
          L += n0;
#line 291
          A1 += lda;
#line 292
          tmp___56 = *(Wmx + 24);
#line 292
          *A1 = tmp___56;
#line 292
          *L = tmp___56;
#line 292
          L += n0;
#line 292
          A1 += lda;
#line 293
          tmp___57 = *(Wmx + 25);
#line 293
          *A1 = tmp___57;
#line 293
          *L = tmp___57;
#line 293
          L += n0;
#line 293
          A1 += lda;
#line 294
          tmp___58 = *(Wmx + 26);
#line 294
          *A1 = tmp___58;
#line 294
          *L = tmp___58;
#line 294
          L += n0;
#line 294
          A1 += lda;
#line 295
          tmp___59 = *(Wmx + 27);
#line 295
          *A1 = tmp___59;
#line 295
          *L = tmp___59;
#line 295
          L += n0;
#line 295
          A1 += lda;
#line 296
          tmp___60 = *(Wmx + 28);
#line 296
          *A1 = tmp___60;
#line 296
          *L = tmp___60;
#line 296
          L += n0;
#line 296
          A1 += lda;
#line 297
          tmp___61 = *(Wmx + 29);
#line 297
          *A1 = tmp___61;
#line 297
          *L = tmp___61;
#line 297
          L += n0;
#line 297
          A1 += lda;
#line 298
          tmp___62 = *(Wmx + 30);
#line 298
          *A1 = tmp___62;
#line 298
          *L = tmp___62;
#line 298
          L += n0;
#line 298
          A1 += lda;
#line 299
          tmp___63 = *(Wmx + 31);
#line 299
          *A1 = tmp___63;
#line 299
          *L = tmp___63;
#line 299
          L += n0;
#line 299
          A1 += lda;
#line 256
          i += 32;
#line 256
          Wmx += 32;
        }
#line 303
        i = 0;
#line 303
        while (i < nr) {
#line 304
          tmp___64 = *(Wmx + i);
#line 304
          *A1 = tmp___64;
#line 304
          *L = tmp___64;
#line 303
          i ++;
#line 303
          L += n0;
#line 303
          A1 += lda;
        }
      }
    } else {
#line 313
      i = 0;
#line 313
      while (i < nu) {
#line 316
        *L = *(Wmx + 0);
#line 316
        L += n0;
#line 318
        *L = *(Wmx + 1);
#line 318
        L += n0;
#line 321
        *L = *(Wmx + 2);
#line 321
        L += n0;
#line 321
        *L = *(Wmx + 3);
#line 321
        L += n0;
#line 324
        *L = *(Wmx + 4);
#line 324
        L += n0;
#line 324
        *L = *(Wmx + 5);
#line 324
        L += n0;
#line 325
        *L = *(Wmx + 6);
#line 325
        L += n0;
#line 325
        *L = *(Wmx + 7);
#line 325
        L += n0;
#line 328
        *L = *(Wmx + 8);
#line 328
        L += n0;
#line 328
        *L = *(Wmx + 9);
#line 328
        L += n0;
#line 329
        *L = *(Wmx + 10);
#line 329
        L += n0;
#line 329
        *L = *(Wmx + 11);
#line 329
        L += n0;
#line 330
        *L = *(Wmx + 12);
#line 330
        L += n0;
#line 330
        *L = *(Wmx + 13);
#line 330
        L += n0;
#line 331
        *L = *(Wmx + 14);
#line 331
        L += n0;
#line 331
        *L = *(Wmx + 15);
#line 331
        L += n0;
#line 334
        *L = *(Wmx + 16);
#line 334
        L += n0;
#line 334
        *L = *(Wmx + 17);
#line 334
        L += n0;
#line 335
        *L = *(Wmx + 18);
#line 335
        L += n0;
#line 335
        *L = *(Wmx + 19);
#line 335
        L += n0;
#line 336
        *L = *(Wmx + 20);
#line 336
        L += n0;
#line 336
        *L = *(Wmx + 21);
#line 336
        L += n0;
#line 337
        *L = *(Wmx + 22);
#line 337
        L += n0;
#line 337
        *L = *(Wmx + 23);
#line 337
        L += n0;
#line 338
        *L = *(Wmx + 24);
#line 338
        L += n0;
#line 338
        *L = *(Wmx + 25);
#line 338
        L += n0;
#line 339
        *L = *(Wmx + 26);
#line 339
        L += n0;
#line 339
        *L = *(Wmx + 27);
#line 339
        L += n0;
#line 340
        *L = *(Wmx + 28);
#line 340
        L += n0;
#line 340
        *L = *(Wmx + 29);
#line 340
        L += n0;
#line 341
        *L = *(Wmx + 30);
#line 341
        L += n0;
#line 341
        *L = *(Wmx + 31);
#line 341
        L += n0;
#line 313
        i += 32;
#line 313
        Wmx += 32;
      }
#line 344
      i = 0;
#line 344
      while (i < nr) {
#line 344
        *L = *(Wmx + i);
#line 344
        i ++;
#line 344
        L += n0;
      }
#line 348
      if (myrow == (int )*(WORK + 3)) {
#line 350
        A2 = (PANEL->A + (II + (int const   )((int )*(WORK + 1)))) + 0;
#line 352
        i = 0;
#line 352
        while (i < nu) {
#line 355
          *A2 = *(Wr0 + 0);
#line 355
          A2 += lda;
#line 357
          *A2 = *(Wr0 + 1);
#line 357
          A2 += lda;
#line 360
          *A2 = *(Wr0 + 2);
#line 360
          A2 += lda;
#line 360
          *A2 = *(Wr0 + 3);
#line 360
          A2 += lda;
#line 363
          *A2 = *(Wr0 + 4);
#line 363
          A2 += lda;
#line 363
          *A2 = *(Wr0 + 5);
#line 363
          A2 += lda;
#line 364
          *A2 = *(Wr0 + 6);
#line 364
          A2 += lda;
#line 364
          *A2 = *(Wr0 + 7);
#line 364
          A2 += lda;
#line 367
          *A2 = *(Wr0 + 8);
#line 367
          A2 += lda;
#line 367
          *A2 = *(Wr0 + 9);
#line 367
          A2 += lda;
#line 368
          *A2 = *(Wr0 + 10);
#line 368
          A2 += lda;
#line 368
          *A2 = *(Wr0 + 11);
#line 368
          A2 += lda;
#line 369
          *A2 = *(Wr0 + 12);
#line 369
          A2 += lda;
#line 369
          *A2 = *(Wr0 + 13);
#line 369
          A2 += lda;
#line 370
          *A2 = *(Wr0 + 14);
#line 370
          A2 += lda;
#line 370
          *A2 = *(Wr0 + 15);
#line 370
          A2 += lda;
#line 373
          *A2 = *(Wr0 + 16);
#line 373
          A2 += lda;
#line 373
          *A2 = *(Wr0 + 17);
#line 373
          A2 += lda;
#line 374
          *A2 = *(Wr0 + 18);
#line 374
          A2 += lda;
#line 374
          *A2 = *(Wr0 + 19);
#line 374
          A2 += lda;
#line 375
          *A2 = *(Wr0 + 20);
#line 375
          A2 += lda;
#line 375
          *A2 = *(Wr0 + 21);
#line 375
          A2 += lda;
#line 376
          *A2 = *(Wr0 + 22);
#line 376
          A2 += lda;
#line 376
          *A2 = *(Wr0 + 23);
#line 376
          A2 += lda;
#line 377
          *A2 = *(Wr0 + 24);
#line 377
          A2 += lda;
#line 377
          *A2 = *(Wr0 + 25);
#line 377
          A2 += lda;
#line 378
          *A2 = *(Wr0 + 26);
#line 378
          A2 += lda;
#line 378
          *A2 = *(Wr0 + 27);
#line 378
          A2 += lda;
#line 379
          *A2 = *(Wr0 + 28);
#line 379
          A2 += lda;
#line 379
          *A2 = *(Wr0 + 29);
#line 379
          A2 += lda;
#line 380
          *A2 = *(Wr0 + 30);
#line 380
          A2 += lda;
#line 380
          *A2 = *(Wr0 + 31);
#line 380
          A2 += lda;
#line 352
          i += 32;
#line 352
          Wr0 += 32;
        }
#line 384
        i = 0;
#line 384
        while (i < nr) {
#line 384
          *A2 = *(Wr0 + i);
#line 384
          i ++;
#line 384
          A2 += lda;
        }
      }
    }
  } else {
#line 394
    i = 0;
#line 394
    while (i < nu) {
#line 397
      *L = *(Wr0 + 0);
#line 397
      L += n0;
#line 399
      *L = *(Wr0 + 1);
#line 399
      L += n0;
#line 402
      *L = *(Wr0 + 2);
#line 402
      L += n0;
#line 402
      *L = *(Wr0 + 3);
#line 402
      L += n0;
#line 405
      *L = *(Wr0 + 4);
#line 405
      L += n0;
#line 405
      *L = *(Wr0 + 5);
#line 405
      L += n0;
#line 406
      *L = *(Wr0 + 6);
#line 406
      L += n0;
#line 406
      *L = *(Wr0 + 7);
#line 406
      L += n0;
#line 409
      *L = *(Wr0 + 8);
#line 409
      L += n0;
#line 409
      *L = *(Wr0 + 9);
#line 409
      L += n0;
#line 410
      *L = *(Wr0 + 10);
#line 410
      L += n0;
#line 410
      *L = *(Wr0 + 11);
#line 410
      L += n0;
#line 411
      *L = *(Wr0 + 12);
#line 411
      L += n0;
#line 411
      *L = *(Wr0 + 13);
#line 411
      L += n0;
#line 412
      *L = *(Wr0 + 14);
#line 412
      L += n0;
#line 412
      *L = *(Wr0 + 15);
#line 412
      L += n0;
#line 415
      *L = *(Wr0 + 16);
#line 415
      L += n0;
#line 415
      *L = *(Wr0 + 17);
#line 415
      L += n0;
#line 416
      *L = *(Wr0 + 18);
#line 416
      L += n0;
#line 416
      *L = *(Wr0 + 19);
#line 416
      L += n0;
#line 417
      *L = *(Wr0 + 20);
#line 417
      L += n0;
#line 417
      *L = *(Wr0 + 21);
#line 417
      L += n0;
#line 418
      *L = *(Wr0 + 22);
#line 418
      L += n0;
#line 418
      *L = *(Wr0 + 23);
#line 418
      L += n0;
#line 419
      *L = *(Wr0 + 24);
#line 419
      L += n0;
#line 419
      *L = *(Wr0 + 25);
#line 419
      L += n0;
#line 420
      *L = *(Wr0 + 26);
#line 420
      L += n0;
#line 420
      *L = *(Wr0 + 27);
#line 420
      L += n0;
#line 421
      *L = *(Wr0 + 28);
#line 421
      L += n0;
#line 421
      *L = *(Wr0 + 29);
#line 421
      L += n0;
#line 422
      *L = *(Wr0 + 30);
#line 422
      L += n0;
#line 422
      *L = *(Wr0 + 31);
#line 422
      L += n0;
#line 394
      i += 32;
#line 394
      Wr0 += 32;
    }
#line 426
    i = 0;
#line 426
    while (i < nr) {
#line 426
      *L = *(Wr0 + i);
#line 426
      i ++;
#line 426
      L += n0;
    }
#line 430
    if (*(PANEL->DINFO) == 0.0) {
#line 431
      *(PANEL->DINFO) = (double )((PANEL->ia + (int )JJ) + 1);
    }
  }
#line 436
  return;
}
}
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 94 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_dlocswpT(HPL_T_panel *PANEL , int const   II , int const   JJ , double *WORK ) ;
#line 60 "../HPL_dlocswpT.c"
void HPL_dlocswpT(HPL_T_panel *PANEL , int const   II , int const   JJ , double *WORK ) 
{ 
  double gmax ;
  double *A1 ;
  double *A2 ;
  double *L ;
  double *Wr0 ;
  double *Wmx ;
  int ilindx ;
  int lda ;
  int myrow ;
  int n0 ;
  int nr ;
  int nu ;
  register int i ;
  double tmp ;
  double tmp___0 ;
  double tmp___1 ;
  double tmp___2 ;
  double tmp___3 ;
  double tmp___4 ;
  double tmp___5 ;
  double tmp___6 ;
  double tmp___7 ;
  double tmp___8 ;
  double tmp___9 ;
  double tmp___10 ;
  double tmp___11 ;
  double tmp___12 ;
  double tmp___13 ;
  double tmp___14 ;
  double tmp___15 ;
  double tmp___16 ;
  double tmp___17 ;
  double tmp___18 ;
  double tmp___19 ;
  double tmp___20 ;
  double tmp___21 ;
  double tmp___22 ;
  double tmp___23 ;
  double tmp___24 ;
  double tmp___25 ;
  double tmp___26 ;
  double tmp___27 ;
  double tmp___28 ;
  double tmp___29 ;
  double tmp___30 ;
  double tmp___31 ;
  double tmp___32 ;
  double tmp___33 ;
  double tmp___34 ;
  double tmp___35 ;
  double tmp___36 ;
  double tmp___37 ;
  double tmp___38 ;
  double tmp___39 ;
  double tmp___40 ;
  double tmp___41 ;
  double tmp___42 ;
  double tmp___43 ;
  double tmp___44 ;
  double tmp___45 ;
  double tmp___46 ;
  double tmp___47 ;
  double tmp___48 ;
  double tmp___49 ;
  double tmp___50 ;
  double tmp___51 ;
  double tmp___52 ;
  double tmp___53 ;
  double tmp___54 ;
  double tmp___55 ;
  double tmp___56 ;
  double tmp___57 ;
  double tmp___58 ;
  double tmp___59 ;
  double tmp___60 ;
  double tmp___61 ;
  double tmp___62 ;
  double tmp___63 ;
  double tmp___64 ;

  {
#line 121
  myrow = (PANEL->grid)->myrow;
#line 121
  n0 = PANEL->jb;
#line 121
  lda = PANEL->lda;
#line 123
  Wmx = WORK + 4;
#line 123
  Wr0 = Wmx + n0;
#line 123
  gmax = *(WORK + 0);
#line 123
  *(Wmx + JJ) = gmax;
#line 124
  nu = (int )(((unsigned int )n0 >> 5) << 5);
#line 126
  nr = n0 - nu;
#line 130
  L = (PANEL->L1 + 0) + JJ * (int const   )n0;
#line 134
  if (gmax != 0.0) {
#line 139
    if (myrow == PANEL->prow) {
#line 144
      if (myrow == (int )*(WORK + 3)) {
#line 149
        ilindx = (int )*(WORK + 1);
#line 149
        if (ilindx != 0) {
#line 154
          A1 = (PANEL->A + II) + 0;
#line 155
          A2 = (A1 + ilindx) + 0;
#line 157
          i = 0;
#line 157
          while (i < nu) {
#line 161
            tmp = *(Wmx + 0);
#line 161
            *A1 = tmp;
#line 161
            *(L + 0) = tmp;
#line 161
            *A2 = *(Wr0 + 0);
#line 161
            A1 += lda;
#line 161
            A2 += lda;
#line 163
            tmp___0 = *(Wmx + 1);
#line 163
            *A1 = tmp___0;
#line 163
            *(L + 1) = tmp___0;
#line 163
            *A2 = *(Wr0 + 1);
#line 163
            A1 += lda;
#line 163
            A2 += lda;
#line 166
            tmp___1 = *(Wmx + 2);
#line 166
            *A1 = tmp___1;
#line 166
            *(L + 2) = tmp___1;
#line 166
            *A2 = *(Wr0 + 2);
#line 166
            A1 += lda;
#line 166
            A2 += lda;
#line 167
            tmp___2 = *(Wmx + 3);
#line 167
            *A1 = tmp___2;
#line 167
            *(L + 3) = tmp___2;
#line 167
            *A2 = *(Wr0 + 3);
#line 167
            A1 += lda;
#line 167
            A2 += lda;
#line 170
            tmp___3 = *(Wmx + 4);
#line 170
            *A1 = tmp___3;
#line 170
            *(L + 4) = tmp___3;
#line 170
            *A2 = *(Wr0 + 4);
#line 170
            A1 += lda;
#line 170
            A2 += lda;
#line 171
            tmp___4 = *(Wmx + 5);
#line 171
            *A1 = tmp___4;
#line 171
            *(L + 5) = tmp___4;
#line 171
            *A2 = *(Wr0 + 5);
#line 171
            A1 += lda;
#line 171
            A2 += lda;
#line 172
            tmp___5 = *(Wmx + 6);
#line 172
            *A1 = tmp___5;
#line 172
            *(L + 6) = tmp___5;
#line 172
            *A2 = *(Wr0 + 6);
#line 172
            A1 += lda;
#line 172
            A2 += lda;
#line 173
            tmp___6 = *(Wmx + 7);
#line 173
            *A1 = tmp___6;
#line 173
            *(L + 7) = tmp___6;
#line 173
            *A2 = *(Wr0 + 7);
#line 173
            A1 += lda;
#line 173
            A2 += lda;
#line 176
            tmp___7 = *(Wmx + 8);
#line 176
            *A1 = tmp___7;
#line 176
            *(L + 8) = tmp___7;
#line 176
            *A2 = *(Wr0 + 8);
#line 176
            A1 += lda;
#line 176
            A2 += lda;
#line 177
            tmp___8 = *(Wmx + 9);
#line 177
            *A1 = tmp___8;
#line 177
            *(L + 9) = tmp___8;
#line 177
            *A2 = *(Wr0 + 9);
#line 177
            A1 += lda;
#line 177
            A2 += lda;
#line 178
            tmp___9 = *(Wmx + 10);
#line 178
            *A1 = tmp___9;
#line 178
            *(L + 10) = tmp___9;
#line 178
            *A2 = *(Wr0 + 10);
#line 178
            A1 += lda;
#line 178
            A2 += lda;
#line 179
            tmp___10 = *(Wmx + 11);
#line 179
            *A1 = tmp___10;
#line 179
            *(L + 11) = tmp___10;
#line 179
            *A2 = *(Wr0 + 11);
#line 179
            A1 += lda;
#line 179
            A2 += lda;
#line 180
            tmp___11 = *(Wmx + 12);
#line 180
            *A1 = tmp___11;
#line 180
            *(L + 12) = tmp___11;
#line 180
            *A2 = *(Wr0 + 12);
#line 180
            A1 += lda;
#line 180
            A2 += lda;
#line 181
            tmp___12 = *(Wmx + 13);
#line 181
            *A1 = tmp___12;
#line 181
            *(L + 13) = tmp___12;
#line 181
            *A2 = *(Wr0 + 13);
#line 181
            A1 += lda;
#line 181
            A2 += lda;
#line 182
            tmp___13 = *(Wmx + 14);
#line 182
            *A1 = tmp___13;
#line 182
            *(L + 14) = tmp___13;
#line 182
            *A2 = *(Wr0 + 14);
#line 182
            A1 += lda;
#line 182
            A2 += lda;
#line 183
            tmp___14 = *(Wmx + 15);
#line 183
            *A1 = tmp___14;
#line 183
            *(L + 15) = tmp___14;
#line 183
            *A2 = *(Wr0 + 15);
#line 183
            A1 += lda;
#line 183
            A2 += lda;
#line 186
            tmp___15 = *(Wmx + 16);
#line 186
            *A1 = tmp___15;
#line 186
            *(L + 16) = tmp___15;
#line 186
            *A2 = *(Wr0 + 16);
#line 186
            A1 += lda;
#line 186
            A2 += lda;
#line 187
            tmp___16 = *(Wmx + 17);
#line 187
            *A1 = tmp___16;
#line 187
            *(L + 17) = tmp___16;
#line 187
            *A2 = *(Wr0 + 17);
#line 187
            A1 += lda;
#line 187
            A2 += lda;
#line 188
            tmp___17 = *(Wmx + 18);
#line 188
            *A1 = tmp___17;
#line 188
            *(L + 18) = tmp___17;
#line 188
            *A2 = *(Wr0 + 18);
#line 188
            A1 += lda;
#line 188
            A2 += lda;
#line 189
            tmp___18 = *(Wmx + 19);
#line 189
            *A1 = tmp___18;
#line 189
            *(L + 19) = tmp___18;
#line 189
            *A2 = *(Wr0 + 19);
#line 189
            A1 += lda;
#line 189
            A2 += lda;
#line 190
            tmp___19 = *(Wmx + 20);
#line 190
            *A1 = tmp___19;
#line 190
            *(L + 20) = tmp___19;
#line 190
            *A2 = *(Wr0 + 20);
#line 190
            A1 += lda;
#line 190
            A2 += lda;
#line 191
            tmp___20 = *(Wmx + 21);
#line 191
            *A1 = tmp___20;
#line 191
            *(L + 21) = tmp___20;
#line 191
            *A2 = *(Wr0 + 21);
#line 191
            A1 += lda;
#line 191
            A2 += lda;
#line 192
            tmp___21 = *(Wmx + 22);
#line 192
            *A1 = tmp___21;
#line 192
            *(L + 22) = tmp___21;
#line 192
            *A2 = *(Wr0 + 22);
#line 192
            A1 += lda;
#line 192
            A2 += lda;
#line 193
            tmp___22 = *(Wmx + 23);
#line 193
            *A1 = tmp___22;
#line 193
            *(L + 23) = tmp___22;
#line 193
            *A2 = *(Wr0 + 23);
#line 193
            A1 += lda;
#line 193
            A2 += lda;
#line 194
            tmp___23 = *(Wmx + 24);
#line 194
            *A1 = tmp___23;
#line 194
            *(L + 24) = tmp___23;
#line 194
            *A2 = *(Wr0 + 24);
#line 194
            A1 += lda;
#line 194
            A2 += lda;
#line 195
            tmp___24 = *(Wmx + 25);
#line 195
            *A1 = tmp___24;
#line 195
            *(L + 25) = tmp___24;
#line 195
            *A2 = *(Wr0 + 25);
#line 195
            A1 += lda;
#line 195
            A2 += lda;
#line 196
            tmp___25 = *(Wmx + 26);
#line 196
            *A1 = tmp___25;
#line 196
            *(L + 26) = tmp___25;
#line 196
            *A2 = *(Wr0 + 26);
#line 196
            A1 += lda;
#line 196
            A2 += lda;
#line 197
            tmp___26 = *(Wmx + 27);
#line 197
            *A1 = tmp___26;
#line 197
            *(L + 27) = tmp___26;
#line 197
            *A2 = *(Wr0 + 27);
#line 197
            A1 += lda;
#line 197
            A2 += lda;
#line 198
            tmp___27 = *(Wmx + 28);
#line 198
            *A1 = tmp___27;
#line 198
            *(L + 28) = tmp___27;
#line 198
            *A2 = *(Wr0 + 28);
#line 198
            A1 += lda;
#line 198
            A2 += lda;
#line 199
            tmp___28 = *(Wmx + 29);
#line 199
            *A1 = tmp___28;
#line 199
            *(L + 29) = tmp___28;
#line 199
            *A2 = *(Wr0 + 29);
#line 199
            A1 += lda;
#line 199
            A2 += lda;
#line 200
            tmp___29 = *(Wmx + 30);
#line 200
            *A1 = tmp___29;
#line 200
            *(L + 30) = tmp___29;
#line 200
            *A2 = *(Wr0 + 30);
#line 200
            A1 += lda;
#line 200
            A2 += lda;
#line 201
            tmp___30 = *(Wmx + 31);
#line 201
            *A1 = tmp___30;
#line 201
            *(L + 31) = tmp___30;
#line 201
            *A2 = *(Wr0 + 31);
#line 201
            A1 += lda;
#line 201
            A2 += lda;
#line 157
            i += 32;
#line 157
            Wmx += 32;
#line 157
            Wr0 += 32;
#line 157
            L += 32;
          }
#line 205
          i = 0;
#line 205
          while (i < nr) {
#line 206
            tmp___31 = *(Wmx + i);
#line 206
            *A1 = tmp___31;
#line 206
            *(L + i) = tmp___31;
#line 206
            *A2 = *(Wr0 + i);
#line 205
            i ++;
#line 205
            A1 += lda;
#line 205
            A2 += lda;
          }
        } else {
#line 214
          *((PANEL->A + II) + JJ * (int const   )lda) = gmax;
#line 216
          i = 0;
#line 216
          while (i < nu) {
#line 219
            *(L + 0) = *(Wmx + 0);
#line 221
            *(L + 1) = *(Wmx + 1);
#line 224
            *(L + 2) = *(Wmx + 2);
#line 224
            *(L + 3) = *(Wmx + 3);
#line 227
            *(L + 4) = *(Wmx + 4);
#line 227
            *(L + 5) = *(Wmx + 5);
#line 228
            *(L + 6) = *(Wmx + 6);
#line 228
            *(L + 7) = *(Wmx + 7);
#line 231
            *(L + 8) = *(Wmx + 8);
#line 231
            *(L + 12) = *(Wmx + 12);
#line 232
            *(L + 9) = *(Wmx + 9);
#line 232
            *(L + 13) = *(Wmx + 13);
#line 233
            *(L + 10) = *(Wmx + 10);
#line 233
            *(L + 14) = *(Wmx + 14);
#line 234
            *(L + 11) = *(Wmx + 11);
#line 234
            *(L + 15) = *(Wmx + 15);
#line 237
            *(L + 16) = *(Wmx + 16);
#line 237
            *(L + 20) = *(Wmx + 20);
#line 238
            *(L + 17) = *(Wmx + 17);
#line 238
            *(L + 21) = *(Wmx + 21);
#line 239
            *(L + 18) = *(Wmx + 18);
#line 239
            *(L + 22) = *(Wmx + 22);
#line 240
            *(L + 19) = *(Wmx + 19);
#line 240
            *(L + 23) = *(Wmx + 23);
#line 241
            *(L + 24) = *(Wmx + 24);
#line 241
            *(L + 28) = *(Wmx + 28);
#line 242
            *(L + 25) = *(Wmx + 25);
#line 242
            *(L + 29) = *(Wmx + 29);
#line 243
            *(L + 26) = *(Wmx + 26);
#line 243
            *(L + 30) = *(Wmx + 30);
#line 244
            *(L + 27) = *(Wmx + 27);
#line 244
            *(L + 31) = *(Wmx + 31);
#line 216
            i += 32;
#line 216
            Wmx += 32;
#line 216
            L += 32;
          }
#line 247
          i = 0;
#line 247
          while (i < nr) {
#line 247
            *(L + i) = *(Wmx + i);
#line 247
            i ++;
          }
        }
      } else {
#line 256
        A1 = (PANEL->A + II) + 0;
#line 258
        i = 0;
#line 258
        while (i < nu) {
#line 261
          tmp___32 = *(Wmx + 0);
#line 261
          *A1 = tmp___32;
#line 261
          *(L + 0) = tmp___32;
#line 261
          A1 += lda;
#line 263
          tmp___33 = *(Wmx + 1);
#line 263
          *A1 = tmp___33;
#line 263
          *(L + 1) = tmp___33;
#line 263
          A1 += lda;
#line 266
          tmp___34 = *(Wmx + 2);
#line 266
          *A1 = tmp___34;
#line 266
          *(L + 2) = tmp___34;
#line 266
          A1 += lda;
#line 266
          tmp___35 = *(Wmx + 3);
#line 266
          *A1 = tmp___35;
#line 266
          *(L + 3) = tmp___35;
#line 266
          A1 += lda;
#line 269
          tmp___36 = *(Wmx + 4);
#line 269
          *A1 = tmp___36;
#line 269
          *(L + 4) = tmp___36;
#line 269
          A1 += lda;
#line 269
          tmp___37 = *(Wmx + 5);
#line 269
          *A1 = tmp___37;
#line 269
          *(L + 5) = tmp___37;
#line 269
          A1 += lda;
#line 270
          tmp___38 = *(Wmx + 6);
#line 270
          *A1 = tmp___38;
#line 270
          *(L + 6) = tmp___38;
#line 270
          A1 += lda;
#line 270
          tmp___39 = *(Wmx + 7);
#line 270
          *A1 = tmp___39;
#line 270
          *(L + 7) = tmp___39;
#line 270
          A1 += lda;
#line 273
          tmp___40 = *(Wmx + 8);
#line 273
          *A1 = tmp___40;
#line 273
          *(L + 8) = tmp___40;
#line 273
          A1 += lda;
#line 273
          tmp___41 = *(Wmx + 9);
#line 273
          *A1 = tmp___41;
#line 273
          *(L + 9) = tmp___41;
#line 273
          A1 += lda;
#line 274
          tmp___42 = *(Wmx + 10);
#line 274
          *A1 = tmp___42;
#line 274
          *(L + 10) = tmp___42;
#line 274
          A1 += lda;
#line 274
          tmp___43 = *(Wmx + 11);
#line 274
          *A1 = tmp___43;
#line 274
          *(L + 11) = tmp___43;
#line 274
          A1 += lda;
#line 275
          tmp___44 = *(Wmx + 12);
#line 275
          *A1 = tmp___44;
#line 275
          *(L + 12) = tmp___44;
#line 275
          A1 += lda;
#line 275
          tmp___45 = *(Wmx + 13);
#line 275
          *A1 = tmp___45;
#line 275
          *(L + 13) = tmp___45;
#line 275
          A1 += lda;
#line 276
          tmp___46 = *(Wmx + 14);
#line 276
          *A1 = tmp___46;
#line 276
          *(L + 14) = tmp___46;
#line 276
          A1 += lda;
#line 276
          tmp___47 = *(Wmx + 15);
#line 276
          *A1 = tmp___47;
#line 276
          *(L + 15) = tmp___47;
#line 276
          A1 += lda;
#line 279
          tmp___48 = *(Wmx + 16);
#line 279
          *A1 = tmp___48;
#line 279
          *(L + 16) = tmp___48;
#line 279
          A1 += lda;
#line 279
          tmp___49 = *(Wmx + 17);
#line 279
          *A1 = tmp___49;
#line 279
          *(L + 17) = tmp___49;
#line 279
          A1 += lda;
#line 280
          tmp___50 = *(Wmx + 18);
#line 280
          *A1 = tmp___50;
#line 280
          *(L + 18) = tmp___50;
#line 280
          A1 += lda;
#line 280
          tmp___51 = *(Wmx + 19);
#line 280
          *A1 = tmp___51;
#line 280
          *(L + 19) = tmp___51;
#line 280
          A1 += lda;
#line 281
          tmp___52 = *(Wmx + 20);
#line 281
          *A1 = tmp___52;
#line 281
          *(L + 20) = tmp___52;
#line 281
          A1 += lda;
#line 281
          tmp___53 = *(Wmx + 21);
#line 281
          *A1 = tmp___53;
#line 281
          *(L + 21) = tmp___53;
#line 281
          A1 += lda;
#line 282
          tmp___54 = *(Wmx + 22);
#line 282
          *A1 = tmp___54;
#line 282
          *(L + 22) = tmp___54;
#line 282
          A1 += lda;
#line 282
          tmp___55 = *(Wmx + 23);
#line 282
          *A1 = tmp___55;
#line 282
          *(L + 23) = tmp___55;
#line 282
          A1 += lda;
#line 283
          tmp___56 = *(Wmx + 24);
#line 283
          *A1 = tmp___56;
#line 283
          *(L + 24) = tmp___56;
#line 283
          A1 += lda;
#line 283
          tmp___57 = *(Wmx + 25);
#line 283
          *A1 = tmp___57;
#line 283
          *(L + 25) = tmp___57;
#line 283
          A1 += lda;
#line 284
          tmp___58 = *(Wmx + 26);
#line 284
          *A1 = tmp___58;
#line 284
          *(L + 26) = tmp___58;
#line 284
          A1 += lda;
#line 284
          tmp___59 = *(Wmx + 27);
#line 284
          *A1 = tmp___59;
#line 284
          *(L + 27) = tmp___59;
#line 284
          A1 += lda;
#line 285
          tmp___60 = *(Wmx + 28);
#line 285
          *A1 = tmp___60;
#line 285
          *(L + 28) = tmp___60;
#line 285
          A1 += lda;
#line 285
          tmp___61 = *(Wmx + 29);
#line 285
          *A1 = tmp___61;
#line 285
          *(L + 29) = tmp___61;
#line 285
          A1 += lda;
#line 286
          tmp___62 = *(Wmx + 30);
#line 286
          *A1 = tmp___62;
#line 286
          *(L + 30) = tmp___62;
#line 286
          A1 += lda;
#line 286
          tmp___63 = *(Wmx + 31);
#line 286
          *A1 = tmp___63;
#line 286
          *(L + 31) = tmp___63;
#line 286
          A1 += lda;
#line 258
          i += 32;
#line 258
          Wmx += 32;
#line 258
          L += 32;
        }
#line 290
        i = 0;
#line 290
        while (i < nr) {
#line 290
          tmp___64 = *(Wmx + i);
#line 290
          *A1 = tmp___64;
#line 290
          *(L + i) = tmp___64;
#line 290
          i ++;
#line 290
          A1 += lda;
        }
      }
    } else {
#line 299
      i = 0;
#line 299
      while (i < nu) {
#line 302
        *(L + 0) = *(Wmx + 0);
#line 304
        *(L + 1) = *(Wmx + 1);
#line 307
        *(L + 2) = *(Wmx + 2);
#line 307
        *(L + 3) = *(Wmx + 3);
#line 310
        *(L + 4) = *(Wmx + 4);
#line 310
        *(L + 5) = *(Wmx + 5);
#line 310
        *(L + 6) = *(Wmx + 6);
#line 310
        *(L + 7) = *(Wmx + 7);
#line 313
        *(L + 8) = *(Wmx + 8);
#line 313
        *(L + 9) = *(Wmx + 9);
#line 313
        *(L + 10) = *(Wmx + 10);
#line 313
        *(L + 11) = *(Wmx + 11);
#line 314
        *(L + 12) = *(Wmx + 12);
#line 314
        *(L + 13) = *(Wmx + 13);
#line 314
        *(L + 14) = *(Wmx + 14);
#line 314
        *(L + 15) = *(Wmx + 15);
#line 317
        *(L + 16) = *(Wmx + 16);
#line 317
        *(L + 17) = *(Wmx + 17);
#line 317
        *(L + 18) = *(Wmx + 18);
#line 317
        *(L + 19) = *(Wmx + 19);
#line 318
        *(L + 20) = *(Wmx + 20);
#line 318
        *(L + 21) = *(Wmx + 21);
#line 318
        *(L + 22) = *(Wmx + 22);
#line 318
        *(L + 23) = *(Wmx + 23);
#line 319
        *(L + 24) = *(Wmx + 24);
#line 319
        *(L + 25) = *(Wmx + 25);
#line 319
        *(L + 26) = *(Wmx + 26);
#line 319
        *(L + 27) = *(Wmx + 27);
#line 320
        *(L + 28) = *(Wmx + 28);
#line 320
        *(L + 29) = *(Wmx + 29);
#line 320
        *(L + 30) = *(Wmx + 30);
#line 320
        *(L + 31) = *(Wmx + 31);
#line 299
        i += 32;
#line 299
        Wmx += 32;
#line 299
        L += 32;
      }
#line 323
      i = 0;
#line 323
      while (i < nr) {
#line 323
        *(L + i) = *(Wmx + i);
#line 323
        i ++;
      }
#line 327
      if (myrow == (int )*(WORK + 3)) {
#line 329
        A2 = (PANEL->A + (II + (int const   )((int )*(WORK + 1)))) + 0;
#line 331
        i = 0;
#line 331
        while (i < nu) {
#line 334
          *A2 = *(Wr0 + 0);
#line 334
          A2 += lda;
#line 336
          *A2 = *(Wr0 + 1);
#line 336
          A2 += lda;
#line 339
          *A2 = *(Wr0 + 2);
#line 339
          A2 += lda;
#line 339
          *A2 = *(Wr0 + 3);
#line 339
          A2 += lda;
#line 342
          *A2 = *(Wr0 + 4);
#line 342
          A2 += lda;
#line 342
          *A2 = *(Wr0 + 5);
#line 342
          A2 += lda;
#line 343
          *A2 = *(Wr0 + 6);
#line 343
          A2 += lda;
#line 343
          *A2 = *(Wr0 + 7);
#line 343
          A2 += lda;
#line 346
          *A2 = *(Wr0 + 8);
#line 346
          A2 += lda;
#line 346
          *A2 = *(Wr0 + 9);
#line 346
          A2 += lda;
#line 347
          *A2 = *(Wr0 + 10);
#line 347
          A2 += lda;
#line 347
          *A2 = *(Wr0 + 11);
#line 347
          A2 += lda;
#line 348
          *A2 = *(Wr0 + 12);
#line 348
          A2 += lda;
#line 348
          *A2 = *(Wr0 + 13);
#line 348
          A2 += lda;
#line 349
          *A2 = *(Wr0 + 14);
#line 349
          A2 += lda;
#line 349
          *A2 = *(Wr0 + 15);
#line 349
          A2 += lda;
#line 352
          *A2 = *(Wr0 + 16);
#line 352
          A2 += lda;
#line 352
          *A2 = *(Wr0 + 17);
#line 352
          A2 += lda;
#line 353
          *A2 = *(Wr0 + 18);
#line 353
          A2 += lda;
#line 353
          *A2 = *(Wr0 + 19);
#line 353
          A2 += lda;
#line 354
          *A2 = *(Wr0 + 20);
#line 354
          A2 += lda;
#line 354
          *A2 = *(Wr0 + 21);
#line 354
          A2 += lda;
#line 355
          *A2 = *(Wr0 + 22);
#line 355
          A2 += lda;
#line 355
          *A2 = *(Wr0 + 23);
#line 355
          A2 += lda;
#line 356
          *A2 = *(Wr0 + 24);
#line 356
          A2 += lda;
#line 356
          *A2 = *(Wr0 + 25);
#line 356
          A2 += lda;
#line 357
          *A2 = *(Wr0 + 26);
#line 357
          A2 += lda;
#line 357
          *A2 = *(Wr0 + 27);
#line 357
          A2 += lda;
#line 358
          *A2 = *(Wr0 + 28);
#line 358
          A2 += lda;
#line 358
          *A2 = *(Wr0 + 29);
#line 358
          A2 += lda;
#line 359
          *A2 = *(Wr0 + 30);
#line 359
          A2 += lda;
#line 359
          *A2 = *(Wr0 + 31);
#line 359
          A2 += lda;
#line 331
          i += 32;
#line 331
          Wr0 += 32;
        }
#line 362
        i = 0;
#line 362
        while (i < nr) {
#line 362
          *A2 = *(Wr0 + i);
#line 362
          i ++;
#line 362
          A2 += lda;
        }
      }
    }
  } else {
#line 372
    i = 0;
#line 372
    while (i < nu) {
#line 375
      *(L + 0) = *(Wr0 + 0);
#line 377
      *(L + 1) = *(Wr0 + 1);
#line 380
      *(L + 2) = *(Wr0 + 2);
#line 380
      *(L + 3) = *(Wr0 + 3);
#line 383
      *(L + 4) = *(Wr0 + 4);
#line 383
      *(L + 5) = *(Wr0 + 5);
#line 383
      *(L + 6) = *(Wr0 + 6);
#line 383
      *(L + 7) = *(Wr0 + 7);
#line 386
      *(L + 8) = *(Wr0 + 8);
#line 386
      *(L + 12) = *(Wr0 + 12);
#line 386
      *(L + 9) = *(Wr0 + 9);
#line 386
      *(L + 13) = *(Wr0 + 13);
#line 387
      *(L + 10) = *(Wr0 + 10);
#line 387
      *(L + 14) = *(Wr0 + 14);
#line 387
      *(L + 11) = *(Wr0 + 11);
#line 387
      *(L + 15) = *(Wr0 + 15);
#line 390
      *(L + 16) = *(Wr0 + 16);
#line 390
      *(L + 20) = *(Wr0 + 20);
#line 390
      *(L + 17) = *(Wr0 + 17);
#line 390
      *(L + 21) = *(Wr0 + 21);
#line 391
      *(L + 18) = *(Wr0 + 18);
#line 391
      *(L + 22) = *(Wr0 + 22);
#line 391
      *(L + 19) = *(Wr0 + 19);
#line 391
      *(L + 23) = *(Wr0 + 23);
#line 392
      *(L + 24) = *(Wr0 + 24);
#line 392
      *(L + 28) = *(Wr0 + 28);
#line 392
      *(L + 25) = *(Wr0 + 25);
#line 392
      *(L + 29) = *(Wr0 + 29);
#line 393
      *(L + 26) = *(Wr0 + 26);
#line 393
      *(L + 30) = *(Wr0 + 30);
#line 393
      *(L + 27) = *(Wr0 + 27);
#line 393
      *(L + 31) = *(Wr0 + 31);
#line 372
      i += 32;
#line 372
      Wr0 += 32;
#line 372
      L += 32;
    }
#line 396
    i = 0;
#line 396
    while (i < nr) {
#line 396
      *(L + i) = *(Wr0 + i);
#line 396
      i ++;
    }
#line 400
    if (*(PANEL->DINFO) == 0.0) {
#line 401
      *(PANEL->DINFO) = (double )((PANEL->ia + (int )JJ) + 1);
    }
  }
#line 406
  return;
}
}
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 112 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dcopy(int const    , double const   * , int const    , double * ,
                        int const    ) ;
#line 101 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdmxswp(HPL_T_panel *PANEL , int const   M , int const   II , int const   JJ ,
                 double *WORK ) ;
#line 53 "../HPL_pdmxswp.c"
void HPL_pdmxswp(HPL_T_panel *PANEL , int const   M , int const   II , int const   JJ ,
                 double *WORK ) 
{ 
  double gmax ;
  double tmp1 ;
  double *A0 ;
  double *Wmx ;
  double *Wwork ;
  HPL_T_grid *grid ;
  MPI_Comm comm ;
  unsigned int hdim ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipow ;
  unsigned int k ;
  unsigned int mask ;
  int Np2 ;
  int cnt_ ;
  int cnt0 ;
  int i ;
  int icurrow ;
  int lda ;
  int mydist ;
  int mydis_ ;
  int myrow ;
  int n0 ;
  int nprow ;
  int partner ;
  int rcnt ;
  int root ;
  int scnt ;
  int size_ ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 137
  grid = PANEL->grid;
#line 137
  myrow = grid->myrow;
#line 137
  nprow = grid->nprow;
#line 143
  comm = grid->col_comm;
#line 143
  ip2 = (unsigned int )grid->row_ip2;
#line 144
  hdim = (unsigned int )grid->row_hdim;
#line 144
  n0 = PANEL->jb;
#line 145
  icurrow = PANEL->prow;
#line 145
  size_ = (int )((unsigned int )nprow - ip2);
#line 145
  Np2 = size_ != 0;
#line 146
  if (myrow < icurrow) {
#line 146
    mydist = (nprow + myrow) - icurrow;
  } else {
#line 146
    mydist = myrow - icurrow;
  }
#line 153
  cnt_ = n0 + 4;
#line 153
  cnt0 = cnt_ + n0;
#line 153
  Wmx = WORK + 4;
#line 153
  A0 = Wmx + n0;
#line 154
  Wwork = WORK + cnt0;
#line 161
  if (M > 0) {
#line 163
    lda = PANEL->lda;
#line 164
    cblas_dcopy((int const   )n0, (double const   *)((PANEL->A + (II + (int const   )((int )*(WORK + 1)))) + 0),
                (int const   )lda, Wmx, (int const   )1);
#line 166
    if (myrow == icurrow) {
#line 167
      cblas_dcopy((int const   )n0, (double const   *)((PANEL->A + II) + 0), (int const   )lda,
                  A0, (int const   )1);
    }
  } else {
#line 169
    i = 0;
#line 169
    while (i < n0) {
#line 169
      *(Wmx + i) = 0.0;
#line 169
      i ++;
    }
  }
#line 180
  if (Np2 != 0) {
#line 180
    partner = (int )((unsigned int )mydist ^ ip2);
#line 180
    if (partner < nprow) {
#line 183
      if (((unsigned int )mydist & ip2) != 0U) {
#line 185
        if (mydist == (int )ip2) {
#line 186
          if (partner + icurrow < nprow) {
#line 186
            tmp = partner + icurrow;
          } else {
#line 186
            tmp = (partner + icurrow) - nprow;
          }
#line 186
          HPL_sdrv(WORK, cnt_, 1001, A0, n0, 1001, tmp, comm);
        } else {
#line 190
          if (partner + icurrow < nprow) {
#line 190
            tmp___0 = partner + icurrow;
          } else {
#line 190
            tmp___0 = (partner + icurrow) - nprow;
          }
#line 190
          HPL_send(WORK, cnt_, tmp___0, 1001, comm);
        }
      } else {
#line 195
        if (mydist == 0) {
#line 196
          if (partner + icurrow < nprow) {
#line 196
            tmp___1 = partner + icurrow;
          } else {
#line 196
            tmp___1 = (partner + icurrow) - nprow;
          }
#line 196
          HPL_sdrv(A0, n0, 1001, Wwork, cnt_, 1001, tmp___1, comm);
        } else {
#line 200
          if (partner + icurrow < nprow) {
#line 200
            tmp___2 = partner + icurrow;
          } else {
#line 200
            tmp___2 = (partner + icurrow) - nprow;
          }
#line 200
          HPL_recv(Wwork, cnt_, tmp___2, 1001, comm);
        }
#line 203
        if (*(Wwork + 0) < (double )0) {
#line 203
          tmp1 = - *(Wwork + 0);
        } else {
#line 203
          tmp1 = *(Wwork + 0);
        }
#line 203
        if (*(WORK + 0) < (double )0) {
#line 203
          gmax = - *(WORK + 0);
        } else {
#line 203
          gmax = *(WORK + 0);
        }
#line 204
        if (tmp1 > gmax) {
#line 206
          cblas_dcopy((int const   )cnt_, (double const   *)Wwork, (int const   )1,
                      WORK, (int const   )1);
        } else
#line 204
        if (tmp1 == gmax) {
#line 204
          if (*(Wwork + 3) < *(WORK + 3)) {
#line 206
            cblas_dcopy((int const   )cnt_, (double const   *)Wwork, (int const   )1,
                        WORK, (int const   )1);
          }
        }
      }
    }
  }
#line 210
  if (mydist < (int )ip2) {
#line 220
    k = 0U;
#line 220
    ipow = 1U;
#line 222
    while (k < hdim) {
#line 224
      if ((unsigned int )mydist >> (k + 1U) == 0U) {
#line 226
        if ((unsigned int )mydist >> k == 0U) {
#line 227
          scnt = cnt0;
#line 227
          rcnt = cnt_;
        } else {
#line 229
          scnt = cnt_;
#line 229
          rcnt = cnt0;
        }
      } else {
#line 231
        rcnt = cnt_;
#line 231
        scnt = rcnt;
      }
#line 233
      partner = (int )((unsigned int )mydist ^ ipow);
#line 234
      if (partner + icurrow < nprow) {
#line 234
        tmp___3 = partner + icurrow;
      } else {
#line 234
        tmp___3 = (partner + icurrow) - nprow;
      }
#line 234
      HPL_sdrv(WORK, scnt, 1001, Wwork, rcnt, 1001, tmp___3, comm);
#line 238
      if (*(Wwork + 0) < (double )0) {
#line 238
        tmp1 = - *(Wwork + 0);
      } else {
#line 238
        tmp1 = *(Wwork + 0);
      }
#line 238
      if (*(WORK + 0) < (double )0) {
#line 238
        gmax = - *(WORK + 0);
      } else {
#line 238
        gmax = *(WORK + 0);
      }
#line 239
      if (tmp1 > gmax) {
#line 239
        goto _L;
      } else
#line 239
      if (tmp1 == gmax) {
#line 239
        if (*(Wwork + 3) < *(WORK + 3)) {
          _L: 
#line 242
          if (rcnt == cnt0) {
#line 242
            tmp___4 = cnt0;
          } else {
#line 242
            tmp___4 = cnt_;
          }
#line 242
          cblas_dcopy((int const   )tmp___4, (double const   *)Wwork, (int const   )1,
                      WORK, (int const   )1);
        } else {
#line 239
          goto _L___0;
        }
      } else
      _L___0: 
#line 245
      if (rcnt == cnt0) {
#line 246
        cblas_dcopy((int const   )n0, (double const   *)(Wwork + cnt_), (int const   )1,
                    A0, (int const   )1);
      }
#line 248
      ipow <<= 1;
#line 248
      k ++;
    }
  } else
#line 251
  if (size_ > 1) {
#line 256
    k = (unsigned int )size_ - 1U;
#line 256
    mask = 1U;
#line 256
    ip2_ = mask;
#line 257
    while (k > 1U) {
#line 257
      k >>= 1;
#line 257
      ip2_ <<= 1;
#line 257
      mask <<= 1;
#line 257
      mask ++;
    }
#line 259
    if (icurrow + (int )ip2 < nprow) {
#line 259
      root = icurrow + (int )ip2;
    } else {
#line 259
      root = (icurrow + (int )ip2) - nprow;
    }
#line 260
    if (myrow < root) {
#line 260
      mydis_ = (nprow + myrow) - root;
    } else {
#line 260
      mydis_ = myrow - root;
    }
#line 262
    while (1) {
#line 264
      mask ^= ip2_;
#line 265
      if (((unsigned int )mydis_ & mask) == 0U) {
#line 267
        partner = (int )((unsigned int )mydis_ ^ ip2_);
#line 268
        if (((unsigned int )mydis_ & ip2_) != 0U) {
#line 270
          if (root + partner < nprow) {
#line 270
            tmp___5 = root + partner;
          } else {
#line 270
            tmp___5 = (root + partner) - nprow;
          }
#line 270
          HPL_recv(A0, n0, tmp___5, 1001, comm);
        } else
#line 273
        if (partner < size_) {
#line 275
          if (root + partner < nprow) {
#line 275
            tmp___6 = root + partner;
          } else {
#line 275
            tmp___6 = (root + partner) - nprow;
          }
#line 275
          HPL_send(A0, n0, tmp___6, 1001, comm);
        }
      }
#line 279
      ip2_ >>= 1;
#line 262
      if (! (ip2_ > 0U)) {
#line 262
        break;
      }
    }
  }
#line 287
  if (Np2 != 0) {
#line 287
    partner = (int )((unsigned int )mydist ^ ip2);
#line 287
    if (partner < nprow) {
#line 290
      if (((unsigned int )mydist & ip2) != 0U) {
#line 292
        if (partner + icurrow < nprow) {
#line 292
          tmp___7 = partner + icurrow;
        } else {
#line 292
          tmp___7 = (partner + icurrow) - nprow;
        }
#line 292
        HPL_recv(WORK, cnt_, tmp___7, 1001, comm);
      } else {
#line 297
        if (partner + icurrow < nprow) {
#line 297
          tmp___8 = partner + icurrow;
        } else {
#line 297
          tmp___8 = (partner + icurrow) - nprow;
        }
#line 297
        HPL_send(WORK, cnt_, tmp___8, 1001, comm);
      }
    }
  }
#line 304
  *(PANEL->DPIV + JJ) = *(WORK + 2);
#line 311
  return;
}
}
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 120 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dscal(int const    , double const    , double * , int const    ) ;
#line 124
extern void cblas_dgemv(enum HPL_ORDER  const   , enum HPL_TRANS  const   , int const    ,
                        int const    , double const    , double const   * , int const    ,
                        double const   * , int const    , double const    , double * ,
                        int const    ) ;
#line 110 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpancrN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpancrN.c"
void HPL_pdpancrN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;

  {
#line 138
  kk = 0;
#line 138
  m = (int )M;
#line 146
  A = PANEL->A;
#line 146
  lda = PANEL->lda;
#line 147
  L1 = PANEL->L1;
#line 147
  n0 = PANEL->jb;
#line 148
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 150
  Nm1 = (int )(N - 1);
#line 150
  jj = (int )ICOFF;
#line 151
  if (curr != 0) {
#line 151
    ii = (int )ICOFF;
#line 151
    iip1 = ii + 1;
#line 151
    Mm1 = m - 1;
  } else {
#line 152
    ii = 0;
#line 152
    iip1 = ii;
#line 152
    Mm1 = m;
  }
#line 168
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 170
  while (Nm1 > 0) {
#line 175
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 176
    HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 180
    if (kk > 0) {
#line 182
      L1ptr = (L1 + jj) + (jj + 1) * n0;
#line 200
      cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )112, (int const   )kk,
                  (int const   )Nm1, (double const   )(- 1.0), (double const   *)((L1 + ICOFF) + (jj + 1) * n0),
                  (int const   )n0, (double const   *)((L1 + jj) + ICOFF * (int const   )n0),
                  (int const   )n0, (double const   )1.0, L1ptr, (int const   )n0);
#line 204
      if (curr != 0) {
#line 205
        cblas_dcopy((int const   )Nm1, (double const   *)L1ptr, (int const   )n0,
                    (A + ii) + (jj + 1) * lda, (int const   )lda);
      }
    }
#line 214
    if (*(WORK + 0) != 0.0) {
#line 215
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                  (int const   )1);
    }
#line 233
    cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )Mm1,
                (int const   )(kk + 1), (double const   )(- 1.0), (double const   *)((A + iip1) + ICOFF * (int const   )lda),
                (int const   )lda, (double const   *)((L1 + ICOFF) + (jj + 1) * n0),
                (int const   )1, (double const   )1.0, (A + iip1) + (jj + 1) * lda,
                (int const   )1);
#line 238
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 239
    if (curr != 0) {
#line 239
      ii = iip1;
#line 239
      iip1 ++;
#line 239
      m = Mm1;
#line 239
      Mm1 --;
    }
#line 241
    Nm1 --;
#line 241
    jj ++;
#line 241
    kk ++;
  }
#line 247
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 248
  HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 249
  if (*(WORK + 0) != 0.0) {
#line 250
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 270
  return;
}
}
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 118 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpancrT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpancrT.c"
void HPL_pdpancrT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;

  {
#line 137
  kk = 0;
#line 137
  m = (int )M;
#line 145
  A = PANEL->A;
#line 145
  lda = PANEL->lda;
#line 146
  L1 = PANEL->L1;
#line 146
  n0 = PANEL->jb;
#line 147
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 149
  Nm1 = (int )(N - 1);
#line 149
  jj = (int )ICOFF;
#line 150
  if (curr != 0) {
#line 150
    ii = (int )ICOFF;
#line 150
    iip1 = ii + 1;
#line 150
    Mm1 = m - 1;
  } else {
#line 151
    ii = 0;
#line 151
    iip1 = ii;
#line 151
    Mm1 = m;
  }
#line 167
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 169
  while (Nm1 > 0) {
#line 174
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 175
    HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 179
    if (kk > 0) {
#line 181
      L1ptr = (L1 + (jj + 1)) + jj * n0;
#line 199
      cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )Nm1,
                  (int const   )kk, (double const   )(- 1.0), (double const   *)((L1 + (jj + 1)) + ICOFF * (int const   )n0),
                  (int const   )n0, (double const   *)((L1 + ICOFF) + jj * n0), (int const   )1,
                  (double const   )1.0, L1ptr, (int const   )1);
#line 203
      if (curr != 0) {
#line 204
        cblas_dcopy((int const   )Nm1, (double const   *)L1ptr, (int const   )1, (A + ii) + (jj + 1) * lda,
                    (int const   )lda);
      }
    }
#line 213
    if (*(WORK + 0) != 0.0) {
#line 214
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                  (int const   )1);
    }
#line 232
    cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )Mm1,
                (int const   )(kk + 1), (double const   )(- 1.0), (double const   *)((A + iip1) + ICOFF * (int const   )lda),
                (int const   )lda, (double const   *)((L1 + (jj + 1)) + ICOFF * (int const   )n0),
                (int const   )n0, (double const   )1.0, (A + iip1) + (jj + 1) * lda,
                (int const   )1);
#line 236
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 237
    if (curr != 0) {
#line 237
      ii = iip1;
#line 237
      iip1 ++;
#line 237
      m = Mm1;
#line 237
      Mm1 --;
    }
#line 239
    Nm1 --;
#line 239
    jj ++;
#line 239
    kk ++;
  }
#line 245
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 246
  HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 247
  if (*(WORK + 0) != 0.0) {
#line 248
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 267
  return;
}
}
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 136 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dtrsv(enum HPL_ORDER  const   , enum HPL_UPLO  const   , enum HPL_TRANS  const   ,
                        enum HPL_DIAG  const   , int const    , double const   * ,
                        int const    , double * , int const    ) ;
#line 126 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanllN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpanllN.c"
void HPL_pdpanllN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;

  {
#line 138
  m = (int )M;
#line 146
  A = PANEL->A;
#line 146
  lda = PANEL->lda;
#line 147
  L1 = PANEL->L1;
#line 147
  n0 = PANEL->jb;
#line 148
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 150
  Nm1 = (int )(N - 1);
#line 150
  jj = (int )ICOFF;
#line 151
  if (curr != 0) {
#line 151
    ii = (int )ICOFF;
#line 151
    iip1 = ii + 1;
#line 151
    Mm1 = m - 1;
  } else {
#line 152
    ii = 0;
#line 152
    iip1 = ii;
#line 152
    Mm1 = m;
  }
#line 168
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 170
  while (Nm1 > 0) {
#line 175
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 176
    HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 178
    L1ptr = (L1 + ICOFF) + (jj + 1) * n0;
#line 178
    kk = (jj + 1) - (int )ICOFF;
#line 179
    cblas_dtrsv((enum HPL_ORDER  const  )102, (enum HPL_UPLO  const  )122, (enum HPL_TRANS  const  )111,
                (enum HPL_DIAG  const  )132, (int const   )kk, (double const   *)((L1 + ICOFF) + ICOFF * (int const   )n0),
                (int const   )n0, L1ptr, (int const   )1);
#line 187
    if (*(WORK + 0) != 0.0) {
#line 188
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                  (int const   )1);
    }
#line 206
    cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )Mm1,
                (int const   )kk, (double const   )(- 1.0), (double const   *)((A + iip1) + ICOFF * (int const   )lda),
                (int const   )lda, (double const   *)L1ptr, (int const   )1, (double const   )1.0,
                (A + iip1) + (jj + 1) * lda, (int const   )1);
#line 210
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 211
    if (curr != 0) {
#line 213
      cblas_dcopy((int const   )kk, (double const   *)L1ptr, (int const   )1, (A + ICOFF) + (jj + 1) * lda,
                  (int const   )1);
#line 214
      ii = iip1;
#line 214
      iip1 ++;
#line 214
      m = Mm1;
#line 214
      Mm1 --;
    }
#line 216
    Nm1 --;
#line 216
    jj ++;
  }
#line 222
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 223
  HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 224
  if (*(WORK + 0) != 0.0) {
#line 225
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 244
  return;
}
}
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 134 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanllT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpanllT.c"
void HPL_pdpanllT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *L1 ;
  double *L1ptr ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int kk ;
  int lda ;
  int m ;
  int n0 ;

  {
#line 137
  m = (int )M;
#line 145
  A = PANEL->A;
#line 145
  lda = PANEL->lda;
#line 146
  L1 = PANEL->L1;
#line 146
  n0 = PANEL->jb;
#line 147
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 149
  Nm1 = (int )(N - 1);
#line 149
  jj = (int )ICOFF;
#line 150
  if (curr != 0) {
#line 150
    ii = (int )ICOFF;
#line 150
    iip1 = ii + 1;
#line 150
    Mm1 = m - 1;
  } else {
#line 151
    ii = 0;
#line 151
    iip1 = ii;
#line 151
    Mm1 = m;
  }
#line 167
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 169
  while (Nm1 > 0) {
#line 174
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 175
    HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 177
    L1ptr = (L1 + (jj + 1)) + ICOFF * (int const   )n0;
#line 177
    kk = (jj + 1) - (int )ICOFF;
#line 178
    cblas_dtrsv((enum HPL_ORDER  const  )102, (enum HPL_UPLO  const  )121, (enum HPL_TRANS  const  )112,
                (enum HPL_DIAG  const  )132, (int const   )kk, (double const   *)((L1 + ICOFF) + ICOFF * (int const   )n0),
                (int const   )n0, L1ptr, (int const   )n0);
#line 186
    if (*(WORK + 0) != 0.0) {
#line 187
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                  (int const   )1);
    }
#line 205
    cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )Mm1,
                (int const   )kk, (double const   )(- 1.0), (double const   *)((A + iip1) + ICOFF * (int const   )lda),
                (int const   )lda, (double const   *)L1ptr, (int const   )n0, (double const   )1.0,
                (A + iip1) + (jj + 1) * lda, (int const   )1);
#line 209
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 210
    if (curr != 0) {
#line 212
      cblas_dcopy((int const   )kk, (double const   *)L1ptr, (int const   )n0, (A + ICOFF) + (jj + 1) * lda,
                  (int const   )1);
#line 213
      ii = iip1;
#line 213
      iip1 ++;
#line 213
      m = Mm1;
#line 213
      Mm1 --;
    }
#line 215
    Nm1 --;
#line 215
    jj ++;
  }
#line 221
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 222
  HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 223
  if (*(WORK + 0) != 0.0) {
#line 224
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 244
  return;
}
}
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 116 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_daxpy(int const    , double const    , double const   * , int const    ,
                        double * , int const    ) ;
#line 131
extern void cblas_dger(enum HPL_ORDER  const   , int const    , int const    , double const    ,
                       double const   * , int const    , double const   * , int const    ,
                       double * , int const    ) ;
#line 142 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanrlN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpanrlN.c"
void HPL_pdpanrlN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *Acur ;
  double *Anxt ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int lda ;
  int m ;

  {
#line 138
  m = (int )M;
#line 145
  A = PANEL->A;
#line 145
  lda = PANEL->lda;
#line 146
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 148
  Nm1 = (int )(N - 1);
#line 148
  jj = (int )ICOFF;
#line 149
  if (curr != 0) {
#line 149
    ii = (int )ICOFF;
#line 149
    iip1 = ii + 1;
#line 149
    Mm1 = m - 1;
  } else {
#line 150
    ii = 0;
#line 150
    iip1 = ii;
#line 150
    Mm1 = m;
  }
#line 166
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 168
  while (Nm1 >= 1) {
#line 170
    Acur = (A + iip1) + jj * lda;
#line 170
    Anxt = (Acur + 0) + lda;
#line 174
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 175
    HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 182
    if (*(WORK + 0) != 0.0) {
#line 183
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), Acur, (int const   )1);
    }
#line 184
    cblas_daxpy((int const   )Mm1, (double const   )(- *(WORK + ((4 + jj) + 1))),
                (double const   *)Acur, (int const   )1, Anxt, (int const   )1);
#line 185
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 208
    if (Nm1 > 1) {
#line 209
      cblas_dger((enum HPL_ORDER  const  )102, (int const   )Mm1, (int const   )(Nm1 - 1),
                 (double const   )(- 1.0), (double const   *)Acur, (int const   )1,
                 (double const   *)(((WORK + 4) + jj) + 2), (int const   )1, (Anxt + 0) + lda,
                 (int const   )lda);
    }
#line 220
    if (curr != 0) {
#line 220
      ii = iip1;
#line 220
      iip1 ++;
#line 220
      m = Mm1;
#line 220
      Mm1 --;
    }
#line 222
    Nm1 --;
#line 222
    jj ++;
  }
#line 228
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 229
  HPL_dlocswpN(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 230
  if (*(WORK + 0) != 0.0) {
#line 231
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 250
  return;
}
}
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 150 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdpanrlT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) ;
#line 53 "../HPL_pdpanrlT.c"
void HPL_pdpanrlT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                  double *WORK ) 
{ 
  double *A ;
  double *Acur ;
  double *Anxt ;
  double *L1 ;
  int Mm1 ;
  int Nm1 ;
  int curr ;
  int ii ;
  int iip1 ;
  int jj ;
  int lda ;
  int m ;
  int n0 ;

  {
#line 137
  m = (int )M;
#line 145
  A = PANEL->A;
#line 145
  lda = PANEL->lda;
#line 146
  L1 = PANEL->L1;
#line 146
  n0 = PANEL->jb;
#line 147
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 149
  Nm1 = (int )(N - 1);
#line 149
  jj = (int )ICOFF;
#line 150
  if (curr != 0) {
#line 150
    ii = (int )ICOFF;
#line 150
    iip1 = ii + 1;
#line 150
    Mm1 = m - 1;
  } else {
#line 151
    ii = 0;
#line 151
    iip1 = ii;
#line 151
    Mm1 = m;
  }
#line 167
  HPL_dlocmax(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 169
  while (Nm1 >= 1) {
#line 171
    Acur = (A + iip1) + jj * lda;
#line 171
    Anxt = (Acur + 0) + lda;
#line 175
    HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 176
    HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 183
    if (*(WORK + 0) != 0.0) {
#line 184
      cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), Acur, (int const   )1);
    }
#line 185
    cblas_daxpy((int const   )Mm1, (double const   )(- *((L1 + (jj + 1)) + jj * n0)),
                (double const   *)Acur, (int const   )1, Anxt, (int const   )1);
#line 186
    HPL_dlocmax(PANEL, (int const   )Mm1, (int const   )iip1, (int const   )(jj + 1),
                WORK);
#line 188
    if (Nm1 > 1) {
#line 209
      cblas_dger((enum HPL_ORDER  const  )102, (int const   )Mm1, (int const   )(Nm1 - 1),
                 (double const   )(- 1.0), (double const   *)Acur, (int const   )1,
                 (double const   *)((L1 + (jj + 2)) + jj * n0), (int const   )1, (Anxt + 0) + lda,
                 (int const   )lda);
    }
#line 214
    if (curr != 0) {
#line 214
      ii = iip1;
#line 214
      iip1 ++;
#line 214
      m = Mm1;
#line 214
      Mm1 --;
    }
#line 216
    Nm1 --;
#line 216
    jj ++;
  }
#line 222
  HPL_pdmxswp(PANEL, (int const   )m, (int const   )ii, (int const   )jj, WORK);
#line 223
  HPL_dlocswpT(PANEL, (int const   )ii, (int const   )jj, WORK);
#line 224
  if (*(WORK + 0) != 0.0) {
#line 225
    cblas_dscal((int const   )Mm1, (double const   )(1.0 / *(WORK + 0)), (A + iip1) + jj * lda,
                (int const   )1);
  }
#line 244
  return;
}
}
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 143 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_blas.h"
extern void cblas_dgemm(enum HPL_ORDER  const   , enum HPL_TRANS  const   , enum HPL_TRANS  const   ,
                        int const    , int const    , int const    , double const    ,
                        double const   * , int const    , double const   * , int const    ,
                        double const    , double * , int const    ) ;
#line 150
extern void cblas_dtrsm(enum HPL_ORDER  const   , enum HPL_SIDE  const   , enum HPL_UPLO  const   ,
                        enum HPL_TRANS  const   , enum HPL_DIAG  const   , int const    ,
                        int const    , double const    , double const   * , int const    ,
                        double * , int const    ) ;
#line 175 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanllN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpanllN.c"
void HPL_pdrpanllN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 169
    cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jj,
                (int const   )jb, (double const   )1.0, (double const   *)L1ptr, (int const   )n0,
                (L1ptr + 0) + jj * n0, (int const   )n0);
#line 219
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                (int const   )m, (int const   )jb, (int const   )jj, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + 0), (int const   )lda, (double const   *)((L1ptr + 0) + jj * n0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + jj * lda, (int const   )lda);
#line 224
    HPL_pdrpanllN(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 228
    if (curr != 0) {
#line 230
      HPL_dlacpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + 0) + ioff * n0),
                 (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
#line 232
      ii += jb;
#line 232
      m -= jb;
    }
#line 234
    jj += jb;
#line 234
    if (n < nb) {
#line 234
      jb = n;
    } else {
#line 234
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 240
  return;
}
}
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 183 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanllT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpanllT.c"
void HPL_pdrpanllT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 169
    cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )121,
                (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                (int const   )jj, (double const   )1.0, (double const   *)L1ptr, (int const   )n0,
                (L1ptr + jj) + 0, (int const   )n0);
#line 219
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                (int const   )m, (int const   )jb, (int const   )jj, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + 0), (int const   )lda, (double const   *)((L1ptr + jj) + 0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + jj * lda, (int const   )lda);
#line 224
    HPL_pdrpanllT(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 228
    if (curr != 0) {
#line 230
      HPL_dlatcpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + ioff) + 0),
                  (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
#line 232
      ii += jb;
#line 232
      m -= jb;
    }
#line 234
    jj += jb;
#line 234
    if (n < nb) {
#line 234
      jb = n;
    } else {
#line 234
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 240
  return;
}
}
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 159 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpancrN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpancrN.c"
void HPL_pdrpancrN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 216
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                (int const   )m, (int const   )jb, (int const   )jj, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + 0), (int const   )lda, (double const   *)((L1ptr + 0) + jj * n0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + jj * lda, (int const   )lda);
#line 221
    HPL_pdrpancrN(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 223
    if (n > 0) {
#line 258
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )jb, (int const   )n, (int const   )jj, (double const   )(- 1.0),
                  (double const   *)((L1ptr + jj) + 0), (int const   )n0, (double const   *)((L1ptr + 0) + (jj + jb) * n0),
                  (int const   )n0, (double const   )1.0, (L1ptr + jj) + (jj + jb) * n0,
                  (int const   )n0);
#line 263
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )n, (double const   )1.0, (double const   *)((L1ptr + jj) + jj * n0),
                  (int const   )n0, (L1ptr + jj) + (jj + jb) * n0, (int const   )n0);
    }
#line 270
    if (curr != 0) {
#line 272
      HPL_dlacpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + 0) + ioff * n0),
                 (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
#line 274
      ii += jb;
#line 274
      m -= jb;
    }
#line 276
    jj += jb;
#line 276
    if (n < nb) {
#line 276
      jb = n;
    } else {
#line 276
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 282
  return;
}
}
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 167 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpancrT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpancrT.c"
void HPL_pdrpancrT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 216
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                (int const   )m, (int const   )jb, (int const   )jj, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + 0), (int const   )lda, (double const   *)((L1ptr + jj) + 0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + jj * lda, (int const   )lda);
#line 221
    HPL_pdrpancrT(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 223
    if (n > 0) {
#line 258
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )n, (int const   )jb, (int const   )jj, (double const   )(- 1.0),
                  (double const   *)((L1ptr + (jj + jb)) + 0), (int const   )n0, (double const   *)((L1ptr + 0) + jj * n0),
                  (int const   )n0, (double const   )1.0, (L1ptr + (jj + jb)) + jj * n0,
                  (int const   )n0);
#line 263
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )n,
                  (int const   )jb, (double const   )1.0, (double const   *)((L1ptr + jj) + jj * n0),
                  (int const   )n0, (L1ptr + (jj + jb)) + jj * n0, (int const   )n0);
    }
#line 270
    if (curr != 0) {
#line 272
      HPL_dlatcpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + ioff) + 0),
                  (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
#line 274
      ii += jb;
#line 274
      m -= jb;
    }
#line 276
    jj += jb;
#line 276
    if (n < nb) {
#line 276
      jb = n;
    } else {
#line 276
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 282
  return;
}
}
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 191 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanrlN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpanrlN.c"
void HPL_pdrpanrlN(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 169
    HPL_pdrpanrlN(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 170
    cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                (int const   )n, (double const   )1.0, (double const   *)((L1ptr + jj) + jj * n0),
                (int const   )n0, (L1ptr + jj) + (jj + jb) * n0, (int const   )n0);
#line 173
    if (curr != 0) {
#line 173
      ii += jb;
#line 173
      m -= jb;
    }
#line 221
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                (int const   )m, (int const   )n, (int const   )jb, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + jj * lda), (int const   )lda, (double const   *)((L1ptr + jj) + (jj + jb) * n0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + (jj + jb) * lda,
                (int const   )lda);
#line 229
    if (curr != 0) {
#line 231
      HPL_dlacpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + 0) + ioff * n0),
                 (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
    }
#line 234
    jj += jb;
#line 234
    if (n < nb) {
#line 234
      jb = n;
    } else {
#line 234
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 240
  return;
}
}
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 199 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdrpanrlT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) ;
#line 53 "../HPL_pdrpanrlT.c"
void HPL_pdrpanrlT(HPL_T_panel *PANEL , int const   M , int const   N , int const   ICOFF ,
                   double *WORK ) 
{ 
  double *A ;
  double *Aptr ;
  double *L1 ;
  double *L1ptr ;
  int curr ;
  int ii ;
  int ioff ;
  int jb ;
  int jj ;
  int lda ;
  int m ;
  int n ;
  int n0 ;
  int nb ;
  int nbdiv ;
  int nbmin ;

  {
#line 133
  nbmin = (PANEL->algo)->nbmin;
#line 133
  if (N <= (int const   )nbmin) {
#line 134
    (*((PANEL->algo)->pffun))(PANEL, M, N, ICOFF, WORK);
#line 134
    return;
  }
#line 146
  nbdiv = (PANEL->algo)->nbdiv;
#line 146
  jj = 0;
#line 146
  ii = jj;
#line 146
  m = (int )M;
#line 146
  n = (int )N;
#line 147
  jb = (int )((((((N + (int const   )nbmin) - 1) / (int const   )nbmin + (int const   )nbdiv) - 1) / (int const   )nbdiv) * (int const   )nbmin);
#line 147
  nb = jb;
#line 149
  A = PANEL->A;
#line 149
  lda = PANEL->lda;
#line 150
  L1 = PANEL->L1;
#line 150
  n0 = PANEL->jb;
#line 151
  L1ptr = (L1 + ICOFF) + ICOFF * (int const   )n0;
#line 152
  curr = (PANEL->grid)->myrow == PANEL->prow;
#line 154
  if (curr != 0) {
#line 154
    Aptr = (A + ICOFF) + ICOFF * (int const   )lda;
  } else {
#line 155
    Aptr = (A + 0) + ICOFF * (int const   )lda;
  }
#line 163
  while (1) {
#line 165
    n -= jb;
#line 165
    ioff = (int )(ICOFF + (int const   )jj);
#line 169
    HPL_pdrpanrlT(PANEL, (int const   )m, (int const   )jb, (int const   )ioff, WORK);
#line 170
    cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )121,
                (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )n,
                (int const   )jb, (double const   )1.0, (double const   *)((L1ptr + jj) + jj * n0),
                (int const   )n0, (L1ptr + (jj + jb)) + jj * n0, (int const   )n0);
#line 173
    if (curr != 0) {
#line 173
      ii += jb;
#line 173
      m -= jb;
    }
#line 221
    cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                (int const   )m, (int const   )n, (int const   )jb, (double const   )(- 1.0),
                (double const   *)((Aptr + ii) + jj * lda), (int const   )lda, (double const   *)((L1ptr + (jj + jb)) + jj * n0),
                (int const   )n0, (double const   )1.0, (Aptr + ii) + (jj + jb) * lda,
                (int const   )lda);
#line 229
    if (curr != 0) {
#line 231
      HPL_dlatcpy((int const   )ioff, (int const   )jb, (double const   *)((L1 + ioff) + 0),
                  (int const   )n0, (A + 0) + ioff * lda, (int const   )lda);
    }
#line 234
    jj += jb;
#line 234
    if (n < nb) {
#line 234
      jb = n;
    } else {
#line 234
      jb = nb;
    }
#line 163
    if (! (n > 0)) {
#line 163
      break;
    }
  }
#line 240
  return;
}
}
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 208 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pfact.h"
void HPL_pdfact(HPL_T_panel *PANEL ) ;
#line 53 "../HPL_pdfact.c"
void HPL_pdfact(HPL_T_panel *PANEL ) 
{ 
  void *vptr ;
  int align ;
  int jb ;
  void *tmp ;

  {
#line 109
  vptr = (void *)0;
#line 114
  jb = PANEL->jb;
#line 114
  PANEL->n -= jb;
#line 114
  PANEL->ja += jb;
#line 116
  if ((PANEL->grid)->mycol != PANEL->pcol) {
#line 116
    return;
  } else
#line 116
  if (jb <= 0) {
#line 116
    return;
  }
#line 120
  align = (PANEL->algo)->align;
#line 121
  tmp = malloc((unsigned long )((unsigned int )align + ((4U + ((unsigned int )jb << 1)) << 1)) * sizeof(double ));
#line 121
  vptr = tmp;
#line 124
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
#line 125
    HPL_pabort(125, "HPL_pdfact", "Memory allocation failed");
  }
#line 129
  (*((PANEL->algo)->rffun))(PANEL, (int const   )PANEL->mp, (int const   )jb, (int const   )0,
                            (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double ))));
#line 131
  if (vptr) {
#line 131
    free(vptr);
  }
#line 133
  PANEL->A = (PANEL->A + 0) + jb * PANEL->lda;
#line 134
  PANEL->nq -= jb;
#line 134
  PANEL->jj += jb;
#line 141
  return;
}
}
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 134 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pipid(HPL_T_panel *PANEL , int *K , int *IPID ) ;
#line 53 "../HPL_pipid.c"
void HPL_pipid(HPL_T_panel *PANEL , int *K , int *IPID ) 
{ 
  int dst ;
  int fndd ;
  int fnds ;
  int ia ;
  int i ;
  int j ;
  int jb ;
  int lst ;
  int off ;
  int src ;
  double *dpiv ;

  {
#line 142
  dpiv = PANEL->DPIV;
#line 142
  jb = PANEL->jb;
#line 142
  ia = PANEL->ia;
#line 142
  src = ia;
#line 143
  dst = (int )*(dpiv + 0);
#line 143
  *(IPID + 0) = dst;
#line 143
  *(IPID + 1) = src;
#line 143
  *K = 2;
#line 144
  if (src != dst) {
#line 144
    *(IPID + 2) = src;
#line 144
    *(IPID + 3) = dst;
#line 144
    *K += 2;
  }
#line 146
  i = 1;
#line 146
  while (i < jb) {
#line 148
    fnds = 0;
#line 148
    j = 1;
#line 150
    src = ia + i;
#line 150
    dst = (int )*(dpiv + i);
#line 150
    if (src == dst) {
#line 152
      while (1) {
#line 152
        if (src == *(IPID + j)) {
#line 152
          fnds = j;
        } else {
#line 152
          j += 2;
        }
#line 152
        if (! fnds) {
#line 152
          if (! (j < *K)) {
#line 152
            break;
          }
        } else {
#line 152
          break;
        }
      }
#line 154
      if (! fnds) {
#line 154
        lst = *K;
#line 154
        off = 2;
#line 154
        *(IPID + lst) = src;
      } else {
#line 155
        lst = fnds - 1;
#line 155
        off = 0;
      }
#line 156
      *(IPID + (lst + 1)) = dst;
    } else {
#line 160
      fndd = 0;
#line 161
      while (1) {
#line 163
        if (src == *(IPID + j)) {
#line 163
          fnds = j;
        } else
#line 164
        if (dst == *(IPID + j)) {
#line 164
          fndd = j;
        }
#line 165
        j += 2;
#line 161
        if (! fnds) {
#line 161
          goto _L;
        } else
#line 161
        if (! fndd) {
          _L: 
#line 161
          if (! (j < *K)) {
#line 161
            break;
          }
        } else {
#line 161
          break;
        }
      }
#line 168
      if (! fnds) {
#line 168
        *(IPID + *K) = src;
#line 168
        *(IPID + (*K + 1)) = dst;
#line 168
        off = 2;
      } else {
#line 169
        *(IPID + fnds) = dst;
#line 169
        off = 0;
      }
#line 170
      if (! fndd) {
#line 170
        lst = *K + off;
#line 170
        *(IPID + lst) = dst;
#line 170
        off += 2;
      } else {
#line 171
        lst = fndd - 1;
      }
#line 172
      *(IPID + (lst + 1)) = src;
    }
#line 177
    j = i << 1;
#line 177
    if (lst != j) {
#line 179
      src = *(IPID + j);
#line 179
      *(IPID + j) = *(IPID + lst);
#line 179
      *(IPID + lst) = src;
#line 180
      dst = *(IPID + (j + 1));
#line 180
      *(IPID + (j + 1)) = *(IPID + (lst + 1));
#line 180
      *(IPID + (lst + 1)) = dst;
    }
#line 182
    *K += off;
#line 146
    i ++;
  }
#line 187
  return;
}
}
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 140 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx0(HPL_T_panel *PANEL , int const   K , int *IPID , int *LINDXA , int *LINDXAU ,
                 int *LLEN ) ;
#line 53 "../HPL_plindx0.c"
void HPL_plindx0(HPL_T_panel *PANEL , int const   K , int *IPID , int *LINDXA , int *LINDXAU ,
                 int *LLEN ) 
{ 
  int dst ;
  int dstrow ;
  int fndd ;
  int i ;
  int ia ;
  int icurrow ;
  int il ;
  int ip ;
  int iroff ;
  int j ;
  int jb ;
  int myrow ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;
  int i__ ;
  int j__ ;
  int tmp ;
  int i_____0 ;
  int j_____0 ;
  int tmp___0 ;

  {
#line 225
  ip = 0;
#line 236
  myrow = (PANEL->grid)->myrow;
#line 236
  nprow = (PANEL->grid)->nprow;
#line 237
  icurrow = PANEL->prow;
#line 237
  jb = PANEL->jb;
#line 238
  nb = PANEL->nb;
#line 238
  ia = PANEL->ia;
#line 239
  iroff = PANEL->ii;
#line 241
  i = 0;
#line 241
  while (i < nprow) {
#line 241
    *(LLEN + i) = 0;
#line 241
    i ++;
  }
#line 243
  i = 0;
#line 243
  while (i < (int )K) {
#line 245
    src = *(IPID + i);
#line 246
    if (src >= nb) {
#line 246
      if (nprow > 1) {
#line 246
        srcrow = 1 + (src - nb) / nb;
#line 246
        srcrow -= (srcrow / nprow) * nprow;
      } else {
#line 246
        srcrow = 0;
      }
    } else {
#line 246
      srcrow = 0;
    }
#line 246
    (*(LLEN + srcrow)) ++;
#line 248
    if (myrow == srcrow) {
#line 250
      if (src < nb) {
#line 250
        il = src;
      } else
#line 250
      if (nprow == 1) {
#line 250
        il = src;
      } else {
#line 250
        i__ = (src - nb) / nb;
#line 250
        j__ = i__ / nprow;
#line 250
        if ((i__ + 1) - (j__ + 1) * nprow) {
#line 250
          tmp = src - nb;
        } else {
#line 250
          tmp = src;
        }
#line 250
        il = nb * (j__ - i__) + tmp;
      }
#line 251
      *(LINDXA + ip) = il - iroff;
#line 251
      dst = *(IPID + (i + 1));
#line 253
      if (myrow == icurrow) {
#line 255
        if (dst >= nb) {
#line 255
          if (nprow > 1) {
#line 255
            dstrow = 1 + (dst - nb) / nb;
#line 255
            dstrow -= (dstrow / nprow) * nprow;
          } else {
#line 255
            dstrow = 0;
          }
        } else {
#line 255
          dstrow = 0;
        }
#line 256
        if (dstrow == icurrow) {
#line 258
          if (dst - ia < jb) {
#line 258
            *(LINDXAU + ip) = dst - ia;
          } else {
#line 261
            if (dst < nb) {
#line 261
              il = dst;
            } else
#line 261
            if (nprow == 1) {
#line 261
              il = dst;
            } else {
#line 261
              i_____0 = (dst - nb) / nb;
#line 261
              j_____0 = i_____0 / nprow;
#line 261
              if ((i_____0 + 1) - (j_____0 + 1) * nprow) {
#line 261
                tmp___0 = dst - nb;
              } else {
#line 261
                tmp___0 = dst;
              }
#line 261
              il = nb * (j_____0 - i_____0) + tmp___0;
            }
#line 262
            *(LINDXAU + ip) = iroff - il;
          }
        } else {
#line 267
          j = 0;
#line 268
          while (1) {
#line 268
            fndd = dst == *(IPID + j);
#line 268
            j += 2;
#line 268
            if (! fndd) {
#line 268
              if (! (j < (int )K)) {
#line 268
                break;
              }
            } else {
#line 268
              break;
            }
          }
#line 270
          *(LINDXAU + ip) = *(IPID + (j - 1)) - ia;
        }
      } else {
#line 273
        *(LINDXAU + ip) = dst - ia;
      }
#line 275
      ip ++;
    }
#line 243
    i += 2;
  }
#line 281
  return;
}
}
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 149 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp00N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 53 "../HPL_pdlaswp00N.c"
void HPL_pdlaswp00N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  MPI_Comm comm ;
  HPL_T_grid *grid ;
  double *A ;
  double *U ;
  double *W ;
  void *vptr ;
  int *ipID ;
  int *lindxA ;
  int *lindxAU ;
  int *llen ;
  int *llen_sv ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipdist ;
  unsigned int ipow ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydis_ ;
  int Cmsgid ;
  int Np2 ;
  int align ;
  int hdim ;
  int i ;
  int icurrow ;
  int *iflag ;
  int ipA ;
  int ipW ;
  int *ipl ;
  int iprow ;
  int jb ;
  int k ;
  int lda ;
  int ldW ;
  int myrow ;
  int n ;
  int nprow ;
  int partner ;
  int root ;
  int size_ ;
  int usize ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 118
  vptr = (void *)0;
#line 121
  ip2_ = 1U;
#line 121
  ipow = 1U;
#line 121
  mask = 1U;
#line 123
  Cmsgid = 1001;
#line 131
  if (NN < (int const   )PANEL->n) {
#line 131
    n = (int )NN;
  } else {
#line 131
    n = PANEL->n;
  }
#line 131
  jb = PANEL->jb;
#line 135
  if (n <= 0) {
#line 135
    return;
  } else
#line 135
  if (jb <= 0) {
#line 135
    return;
  }
#line 143
  grid = PANEL->grid;
#line 143
  nprow = grid->nprow;
#line 143
  myrow = grid->myrow;
#line 144
  comm = grid->col_comm;
#line 144
  ip2 = (unsigned int )grid->row_ip2;
#line 145
  hdim = grid->row_hdim;
#line 145
  align = (PANEL->algo)->align;
#line 146
  A = PANEL->A;
#line 146
  U = PANEL->U;
#line 146
  iflag = PANEL->IWORK;
#line 147
  lda = PANEL->lda;
#line 147
  icurrow = PANEL->prow;
#line 147
  usize = jb * n;
#line 148
  ldW = n + 1;
#line 152
  tmp = malloc((unsigned long )(align + jb * ldW) * sizeof(double ));
#line 152
  vptr = tmp;
#line 153
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
#line 154
    HPL_pabort(154, "HPL_pdlaswp00N", "Memory allocation failed");
  }
#line 156
  W = (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double )));
#line 163
  k = (int )((unsigned int )jb << 1);
#line 163
  ipl = iflag + 1;
#line 163
  ipID = ipl + 1;
#line 164
  lindxA = ipID + ((unsigned int )k << 1);
#line 164
  lindxAU = lindxA + k;
#line 165
  llen = lindxAU + k;
#line 165
  llen_sv = llen + nprow;
#line 167
  if (*iflag == -1) {
#line 169
    HPL_pipid(PANEL, ipl, ipID);
#line 170
    HPL_plindx0(PANEL, (int const   )*ipl, ipID, lindxA, lindxAU, llen_sv);
#line 171
    *iflag = 0;
  } else
#line 173
  if (*iflag == 1) {
#line 175
    HPL_plindx0(PANEL, (int const   )*ipl, ipID, lindxA, lindxAU, llen_sv);
#line 176
    *iflag = 0;
  }
#line 181
  ipA = *(llen_sv + myrow);
#line 182
  i = 0;
#line 182
  while (i < nprow) {
#line 182
    *(llen + i) = *(llen_sv + i);
#line 182
    i ++;
  }
#line 190
  if (myrow == icurrow) {
#line 192
    HPL_dlaswp01N((int const   )ipA, (int const   )n, A, (int const   )lda, U, (int const   )jb,
                  (int const   *)lindxA, (int const   *)lindxAU);
  } else {
#line 196
    HPL_dlaswp02N((int const   )ipA, (int const   )n, (double const   *)A, (int const   )lda,
                  W, W + 1, (int const   )ldW, (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 201
  if (*IFLAG == 2) {
#line 201
    HPL_bcast(PBCST, IFLAG);
  }
#line 236
  if (myrow == icurrow) {
#line 236
    *(llen + myrow) = 0;
#line 236
    ipA = 0;
  }
#line 237
  ipW = ipA;
#line 238
  size_ = (int )((unsigned int )nprow - ip2);
#line 238
  Np2 = size_ != 0;
#line 239
  if (myrow < icurrow) {
#line 239
    tmp___0 = (nprow + myrow) - icurrow;
  } else {
#line 239
    tmp___0 = myrow - icurrow;
  }
#line 239
  mydist = (unsigned int )tmp___0;
#line 245
  if (Np2 != 0) {
#line 245
    partner = (int )(mydist ^ ip2);
#line 245
    if (partner < nprow) {
#line 247
      if (icurrow + partner < nprow) {
#line 247
        partner = icurrow + partner;
      } else {
#line 247
        partner = (icurrow + partner) - nprow;
      }
#line 249
      if (mydist == 0U) {
#line 251
        HPL_sdrv(U, usize, Cmsgid, W, *(llen + partner) * ldW, Cmsgid, partner, comm);
#line 253
        if (*(llen + partner) > 0) {
#line 254
          HPL_dlaswp03N((int const   )*(llen + partner), (int const   )n, U, (int const   )jb,
                        (double const   *)W, (double const   *)(W + 1), (int const   )ldW);
        }
      } else
#line 256
      if (mydist == ip2) {
#line 258
        HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
      } else
#line 263
      if ((mydist & ip2) != 0U) {
#line 265
        HPL_send(W, *(llen + myrow) * ldW, partner, Cmsgid, comm);
      } else {
#line 269
        HPL_recv((W + 0) + ipW * ldW, *(llen + partner) * ldW, partner, Cmsgid, comm);
#line 271
        if (*(llen + partner) > 0) {
#line 271
          ipW += *(llen + partner);
        }
      }
    }
  }
#line 278
  i = 1;
#line 278
  while (i < size_) {
#line 280
    if (icurrow + i < nprow) {
#line 280
      iprow = icurrow + i;
    } else {
#line 280
      iprow = (icurrow + i) - nprow;
    }
#line 281
    if (iprow + (int )ip2 < nprow) {
#line 281
      partner = iprow + (int )ip2;
    } else {
#line 281
      partner = (iprow + (int )ip2) - nprow;
    }
#line 282
    *(llen + iprow) += *(llen + partner);
#line 278
    i ++;
  }
#line 287
  if (*IFLAG == 2) {
#line 287
    HPL_bcast(PBCST, IFLAG);
  }
#line 296
  if (mydist < ip2) {
#line 298
    k = 0;
#line 300
    while (k < hdim) {
#line 302
      partner = (int )(mydist ^ ipow);
#line 303
      if (icurrow + partner < nprow) {
#line 303
        partner = icurrow + partner;
      } else {
#line 303
        partner = (icurrow + partner) - nprow;
      }
#line 312
      if (mydist >> (unsigned int )(k + 1) == 0U) {
#line 314
        if (mydist >> (unsigned int )k == 0U) {
#line 316
          HPL_sdrv(U, usize, Cmsgid, (W + 0) + ipW * ldW, *(llen + partner) * ldW,
                   Cmsgid, partner, comm);
#line 319
          HPL_dlaswp03N((int const   )*(llen + partner), (int const   )n, U, (int const   )jb,
                        (double const   *)((W + 0) + ipW * ldW), (double const   *)((W + 1) + ipW * ldW),
                        (int const   )ldW);
#line 321
          ipW += *(llen + partner);
        } else {
#line 325
          HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
#line 327
          HPL_dlaswp04N((int const   )ipA, (int const   )*(llen + myrow), (int const   )n,
                        U, (int const   )jb, A, (int const   )lda, (double const   *)W,
                        (double const   *)(W + 1), (int const   )ldW, (int const   *)lindxA,
                        (int const   *)lindxAU);
        }
      } else {
#line 333
        HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, (W + 0) + ipW * ldW, *(llen + partner) * ldW,
                 Cmsgid, partner, comm);
#line 336
        ipW += *(llen + partner);
      }
#line 341
      iprow = icurrow;
#line 341
      ipdist = 0U;
#line 342
      while (1) {
#line 344
        partner = (int )(ipdist ^ ipow);
#line 344
        if ((unsigned int )partner > ipdist) {
#line 346
          if (icurrow + partner < nprow) {
#line 346
            partner = icurrow + partner;
          } else {
#line 346
            partner = (icurrow + partner) - nprow;
          }
#line 347
          *(llen + iprow) += *(llen + partner);
#line 348
          *(llen + partner) = *(llen + iprow);
        }
#line 350
        if (iprow + 1 < nprow) {
#line 350
          iprow ++;
        } else {
#line 350
          iprow = (iprow + 1) - nprow;
        }
#line 350
        ipdist ++;
#line 342
        if (! (ipdist < ip2)) {
#line 342
          break;
        }
      }
#line 354
      ipow <<= 1;
#line 354
      k ++;
#line 358
      if (*IFLAG == 2) {
#line 358
        HPL_bcast(PBCST, IFLAG);
      }
    }
  } else {
#line 367
    if (size_ > 1) {
#line 369
      k = size_ - 1;
#line 370
      while (k > 1) {
#line 370
        k >>= 1;
#line 370
        ip2_ <<= 1;
#line 370
        mask <<= 1;
#line 370
        mask ++;
      }
#line 371
      if (icurrow + (int )ip2 < nprow) {
#line 371
        root = icurrow + (int )ip2;
      } else {
#line 371
        root = (icurrow + (int )ip2) - nprow;
      }
#line 372
      if (myrow < root) {
#line 372
        tmp___1 = (nprow + myrow) - root;
      } else {
#line 372
        tmp___1 = myrow - root;
      }
#line 372
      mydis_ = (unsigned int )tmp___1;
#line 374
      while (1) {
#line 376
        mask ^= ip2_;
#line 377
        if ((mydis_ & mask) == 0U) {
#line 379
          partner = (int )(mydis_ ^ ip2_);
#line 380
          if ((mydis_ & ip2_) != 0U) {
#line 382
            if (root + partner < nprow) {
#line 382
              tmp___2 = root + partner;
            } else {
#line 382
              tmp___2 = (root + partner) - nprow;
            }
#line 382
            HPL_recv(U, usize, tmp___2, Cmsgid, comm);
          } else
#line 386
          if (partner < size_) {
#line 388
            if (root + partner < nprow) {
#line 388
              tmp___3 = root + partner;
            } else {
#line 388
              tmp___3 = (root + partner) - nprow;
            }
#line 388
            HPL_send(U, usize, tmp___3, Cmsgid, comm);
          }
        }
#line 392
        ip2_ >>= 1;
#line 396
        if (*IFLAG == 2) {
#line 396
          HPL_bcast(PBCST, IFLAG);
        }
#line 374
        if (! (ip2_ > 0U)) {
#line 374
          break;
        }
      }
    }
#line 404
    HPL_dlaswp05N((int const   )ipA, (int const   )n, A, (int const   )lda, (double const   *)U,
                  (int const   )jb, (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 410
  if (Np2 != 0) {
#line 410
    partner = (int )(mydist ^ ip2);
#line 410
    if (partner < nprow) {
#line 412
      if (icurrow + partner < nprow) {
#line 412
        partner = icurrow + partner;
      } else {
#line 412
        partner = (icurrow + partner) - nprow;
      }
#line 413
      if ((mydist & ip2) != 0U) {
#line 414
        HPL_recv(U, usize, partner, Cmsgid, comm);
      } else {
#line 416
        HPL_send(U, usize, partner, Cmsgid, comm);
      }
    }
  }
#line 419
  if (vptr) {
#line 419
    free(vptr);
  }
#line 423
  if (*IFLAG == 2) {
#line 423
    HPL_bcast(PBCST, IFLAG);
  }
#line 431
  return;
}
}
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 156 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp00T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 53 "../HPL_pdlaswp00T.c"
void HPL_pdlaswp00T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  MPI_Comm comm ;
  HPL_T_grid *grid ;
  double *A ;
  double *U ;
  double *W ;
  void *vptr ;
  int *ipID ;
  int *lindxA ;
  int *lindxAU ;
  int *llen ;
  int *llen_sv ;
  unsigned int ip2 ;
  unsigned int ip2_ ;
  unsigned int ipdist ;
  unsigned int ipow ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydis_ ;
  int Cmsgid ;
  int Np2 ;
  int align ;
  int hdim ;
  int i ;
  int icurrow ;
  int *iflag ;
  int ipA ;
  int ipW ;
  int *ipl ;
  int iprow ;
  int jb ;
  int k ;
  int lda ;
  int ldW ;
  int myrow ;
  int n ;
  int nprow ;
  int partner ;
  int root ;
  int size_ ;
  int usize ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 118
  vptr = (void *)0;
#line 121
  ip2_ = 1U;
#line 121
  ipow = 1U;
#line 121
  mask = 1U;
#line 123
  Cmsgid = 1001;
#line 131
  if (NN < (int const   )PANEL->n) {
#line 131
    n = (int )NN;
  } else {
#line 131
    n = PANEL->n;
  }
#line 131
  jb = PANEL->jb;
#line 135
  if (n <= 0) {
#line 135
    return;
  } else
#line 135
  if (jb <= 0) {
#line 135
    return;
  }
#line 143
  grid = PANEL->grid;
#line 143
  nprow = grid->nprow;
#line 143
  myrow = grid->myrow;
#line 144
  comm = grid->col_comm;
#line 144
  ip2 = (unsigned int )grid->row_ip2;
#line 145
  hdim = grid->row_hdim;
#line 145
  align = (PANEL->algo)->align;
#line 146
  A = PANEL->A;
#line 146
  U = PANEL->U;
#line 146
  iflag = PANEL->IWORK;
#line 147
  lda = PANEL->lda;
#line 147
  icurrow = PANEL->prow;
#line 147
  usize = jb * n;
#line 148
  ldW = n + 1;
#line 152
  tmp = malloc((unsigned long )(align + jb * ldW) * sizeof(double ));
#line 152
  vptr = tmp;
#line 153
  if ((unsigned long )vptr == (unsigned long )((void *)0)) {
#line 154
    HPL_pabort(154, "HPL_pdlaswp00T", "Memory allocation failed");
  }
#line 156
  W = (double *)(((((size_t )vptr + (size_t )align * sizeof(double )) - 1UL) / ((size_t )align * sizeof(double ))) * ((size_t )align * sizeof(double )));
#line 163
  k = (int )((unsigned int )jb << 1);
#line 163
  ipl = iflag + 1;
#line 163
  ipID = ipl + 1;
#line 164
  lindxA = ipID + ((unsigned int )k << 1);
#line 164
  lindxAU = lindxA + k;
#line 165
  llen = lindxAU + k;
#line 165
  llen_sv = llen + nprow;
#line 167
  if (*iflag == -1) {
#line 169
    HPL_pipid(PANEL, ipl, ipID);
#line 170
    HPL_plindx0(PANEL, (int const   )*ipl, ipID, lindxA, lindxAU, llen_sv);
#line 171
    *iflag = 0;
  } else
#line 173
  if (*iflag == 1) {
#line 175
    HPL_plindx0(PANEL, (int const   )*ipl, ipID, lindxA, lindxAU, llen_sv);
#line 176
    *iflag = 0;
  }
#line 181
  ipA = *(llen_sv + myrow);
#line 182
  i = 0;
#line 182
  while (i < nprow) {
#line 182
    *(llen + i) = *(llen_sv + i);
#line 182
    i ++;
  }
#line 190
  if (myrow == icurrow) {
#line 192
    HPL_dlaswp01T((int const   )ipA, (int const   )n, A, (int const   )lda, U, (int const   )n,
                  (int const   *)lindxA, (int const   *)lindxAU);
  } else {
#line 196
    HPL_dlaswp02N((int const   )ipA, (int const   )n, (double const   *)A, (int const   )lda,
                  W, W + 1, (int const   )ldW, (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 201
  if (*IFLAG == 2) {
#line 201
    HPL_bcast(PBCST, IFLAG);
  }
#line 236
  if (myrow == icurrow) {
#line 236
    *(llen + myrow) = 0;
#line 236
    ipA = 0;
  }
#line 237
  ipW = ipA;
#line 238
  size_ = (int )((unsigned int )nprow - ip2);
#line 238
  Np2 = size_ != 0;
#line 239
  if (myrow < icurrow) {
#line 239
    tmp___0 = (nprow + myrow) - icurrow;
  } else {
#line 239
    tmp___0 = myrow - icurrow;
  }
#line 239
  mydist = (unsigned int )tmp___0;
#line 245
  if (Np2 != 0) {
#line 245
    partner = (int )(mydist ^ ip2);
#line 245
    if (partner < nprow) {
#line 247
      if (icurrow + partner < nprow) {
#line 247
        partner = icurrow + partner;
      } else {
#line 247
        partner = (icurrow + partner) - nprow;
      }
#line 249
      if (mydist == 0U) {
#line 251
        HPL_sdrv(U, usize, Cmsgid, W, *(llen + partner) * ldW, Cmsgid, partner, comm);
#line 253
        if (*(llen + partner) > 0) {
#line 254
          HPL_dlaswp03T((int const   )*(llen + partner), (int const   )n, U, (int const   )n,
                        (double const   *)W, (double const   *)(W + 1), (int const   )ldW);
        }
      } else
#line 256
      if (mydist == ip2) {
#line 258
        HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
      } else
#line 263
      if ((mydist & ip2) != 0U) {
#line 265
        HPL_send(W, *(llen + myrow) * ldW, partner, Cmsgid, comm);
      } else {
#line 269
        HPL_recv((W + 0) + ipW * ldW, *(llen + partner) * ldW, partner, Cmsgid, comm);
#line 271
        if (*(llen + partner) > 0) {
#line 271
          ipW += *(llen + partner);
        }
      }
    }
  }
#line 278
  i = 1;
#line 278
  while (i < size_) {
#line 280
    if (icurrow + i < nprow) {
#line 280
      iprow = icurrow + i;
    } else {
#line 280
      iprow = (icurrow + i) - nprow;
    }
#line 281
    if (iprow + (int )ip2 < nprow) {
#line 281
      partner = iprow + (int )ip2;
    } else {
#line 281
      partner = (iprow + (int )ip2) - nprow;
    }
#line 282
    *(llen + iprow) += *(llen + partner);
#line 278
    i ++;
  }
#line 287
  if (*IFLAG == 2) {
#line 287
    HPL_bcast(PBCST, IFLAG);
  }
#line 296
  if (mydist < ip2) {
#line 298
    k = 0;
#line 300
    while (k < hdim) {
#line 302
      partner = (int )(mydist ^ ipow);
#line 303
      if (icurrow + partner < nprow) {
#line 303
        partner = icurrow + partner;
      } else {
#line 303
        partner = (icurrow + partner) - nprow;
      }
#line 312
      if (mydist >> (unsigned int )(k + 1) == 0U) {
#line 314
        if (mydist >> (unsigned int )k == 0U) {
#line 316
          HPL_sdrv(U, usize, Cmsgid, (W + 0) + ipW * ldW, *(llen + partner) * ldW,
                   Cmsgid, partner, comm);
#line 319
          HPL_dlaswp03T((int const   )*(llen + partner), (int const   )n, U, (int const   )n,
                        (double const   *)((W + 0) + ipW * ldW), (double const   *)((W + 1) + ipW * ldW),
                        (int const   )ldW);
#line 321
          ipW += *(llen + partner);
        } else {
#line 325
          HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, U, usize, Cmsgid, partner, comm);
#line 327
          HPL_dlaswp04T((int const   )ipA, (int const   )*(llen + myrow), (int const   )n,
                        U, (int const   )n, A, (int const   )lda, (double const   *)W,
                        (double const   *)(W + 1), (int const   )ldW, (int const   *)lindxA,
                        (int const   *)lindxAU);
        }
      } else {
#line 333
        HPL_sdrv(W, *(llen + myrow) * ldW, Cmsgid, (W + 0) + ipW * ldW, *(llen + partner) * ldW,
                 Cmsgid, partner, comm);
#line 336
        ipW += *(llen + partner);
      }
#line 341
      iprow = icurrow;
#line 341
      ipdist = 0U;
#line 342
      while (1) {
#line 344
        partner = (int )(ipdist ^ ipow);
#line 344
        if ((unsigned int )partner > ipdist) {
#line 346
          if (icurrow + partner < nprow) {
#line 346
            partner = icurrow + partner;
          } else {
#line 346
            partner = (icurrow + partner) - nprow;
          }
#line 347
          *(llen + iprow) += *(llen + partner);
#line 348
          *(llen + partner) = *(llen + iprow);
        }
#line 350
        if (iprow + 1 < nprow) {
#line 350
          iprow ++;
        } else {
#line 350
          iprow = (iprow + 1) - nprow;
        }
#line 350
        ipdist ++;
#line 342
        if (! (ipdist < ip2)) {
#line 342
          break;
        }
      }
#line 354
      ipow <<= 1;
#line 354
      k ++;
#line 358
      if (*IFLAG == 2) {
#line 358
        HPL_bcast(PBCST, IFLAG);
      }
    }
  } else {
#line 367
    if (size_ > 1) {
#line 369
      k = size_ - 1;
#line 370
      while (k > 1) {
#line 370
        k >>= 1;
#line 370
        ip2_ <<= 1;
#line 370
        mask <<= 1;
#line 370
        mask ++;
      }
#line 371
      if (icurrow + (int )ip2 < nprow) {
#line 371
        root = icurrow + (int )ip2;
      } else {
#line 371
        root = (icurrow + (int )ip2) - nprow;
      }
#line 372
      if (myrow < root) {
#line 372
        tmp___1 = (nprow + myrow) - root;
      } else {
#line 372
        tmp___1 = myrow - root;
      }
#line 372
      mydis_ = (unsigned int )tmp___1;
#line 374
      while (1) {
#line 376
        mask ^= ip2_;
#line 377
        if ((mydis_ & mask) == 0U) {
#line 379
          partner = (int )(mydis_ ^ ip2_);
#line 380
          if ((mydis_ & ip2_) != 0U) {
#line 382
            if (root + partner < nprow) {
#line 382
              tmp___2 = root + partner;
            } else {
#line 382
              tmp___2 = (root + partner) - nprow;
            }
#line 382
            HPL_recv(U, usize, tmp___2, Cmsgid, comm);
          } else
#line 386
          if (partner < size_) {
#line 388
            if (root + partner < nprow) {
#line 388
              tmp___3 = root + partner;
            } else {
#line 388
              tmp___3 = (root + partner) - nprow;
            }
#line 388
            HPL_send(U, usize, tmp___3, Cmsgid, comm);
          }
        }
#line 392
        ip2_ >>= 1;
#line 396
        if (*IFLAG == 2) {
#line 396
          HPL_bcast(PBCST, IFLAG);
        }
#line 374
        if (! (ip2_ > 0U)) {
#line 374
          break;
        }
      }
    }
#line 404
    HPL_dlaswp05T((int const   )ipA, (int const   )n, A, (int const   )lda, (double const   *)U,
                  (int const   )n, (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 410
  if (Np2 != 0) {
#line 410
    partner = (int )(mydist ^ ip2);
#line 410
    if (partner < nprow) {
#line 412
      if (icurrow + partner < nprow) {
#line 412
        partner = icurrow + partner;
      } else {
#line 412
        partner = (icurrow + partner) - nprow;
      }
#line 413
      if ((mydist & ip2) != 0U) {
#line 414
        HPL_recv(U, usize, partner, Cmsgid, comm);
      } else {
#line 416
        HPL_send(U, usize, partner, Cmsgid, comm);
      }
    }
  }
#line 419
  if (vptr) {
#line 419
    free(vptr);
  }
#line 423
  if (*IFLAG == 2) {
#line 423
    HPL_bcast(PBCST, IFLAG);
  }
#line 431
  return;
}
}
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 164 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_perm(int const   N , int *LINDXA , int *LINDXAU , int *IWORK ) ;
#line 53 "../HPL_perm.c"
void HPL_perm(int const   N , int *LINDXA , int *LINDXAU , int *IWORK ) 
{ 
  int i ;
  int j ;
  int k ;
  int fndd ;

  {
#line 115
  i = 0;
#line 115
  while (i < (int )N) {
#line 115
    *(IWORK + *(LINDXA + i)) = i;
#line 115
    i ++;
  }
#line 116
  i = 0;
#line 116
  while (i < (int )N) {
#line 116
    *(LINDXA + i) = *(LINDXAU + *(IWORK + i));
#line 116
    *(IWORK + i) = i;
#line 116
    i ++;
  }
#line 118
  i = 0;
#line 118
  while (i < (int )N) {
#line 121
    j = 0;
#line 121
    while (1) {
#line 121
      fndd = *(LINDXA + j) == i;
#line 121
      j ++;
#line 121
      if (! (! fndd)) {
#line 121
        break;
      }
    }
#line 121
    j --;
#line 123
    k = 0;
#line 123
    while (1) {
#line 123
      fndd = *(IWORK + k) == j;
#line 123
      k ++;
#line 123
      if (! (! fndd)) {
#line 123
        break;
      }
    }
#line 123
    k --;
#line 125
    j = *(IWORK + i);
#line 125
    *(IWORK + i) = *(IWORK + k);
#line 125
    *(IWORK + k) = j;
#line 126
    *(LINDXAU + i) = k;
#line 118
    i ++;
  }
#line 131
  return;
}
}
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 171 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_logsort(int const   NPROCS , int const   ICURROC , int *IPLEN , int *IPMAP ,
                 int *IPMAPM1 ) ;
#line 53 "../HPL_logsort.c"
void HPL_logsort(int const   NPROCS , int const   ICURROC , int *IPLEN , int *IPMAP ,
                 int *IPMAPM1 ) 
{ 
  int dist ;
  int i ;
  int ip ;
  int iplen_i ;
  int iplen_j ;
  int itmp ;
  int j ;
  int k ;

  {
#line 130
  j = 0;
#line 130
  dist = 0;
#line 130
  while (j < (int )NPROCS) {
#line 132
    if (j + (int )ICURROC < (int )NPROCS) {
#line 132
      *(IPMAP + j) = j + (int )ICURROC;
    } else {
#line 132
      *(IPMAP + j) = (j + (int )ICURROC) - (int )NPROCS;
    }
#line 132
    ip = j;
#line 132
    itmp = 0;
#line 133
    while (1) {
#line 133
      if (ip & 1) {
#line 133
        itmp ++;
      }
#line 133
      ip >>= 1;
#line 133
      if (! ip) {
#line 133
        break;
      }
    }
#line 134
    *(IPMAPM1 + j) = itmp;
#line 134
    if (itmp > dist) {
#line 134
      dist = itmp;
    }
#line 130
    j ++;
  }
#line 141
  j = 0;
#line 141
  while (j < (int )ICURROC) {
#line 143
    i = 2;
#line 143
    itmp = *(IPLEN + 1);
#line 143
    while (i <= (int )NPROCS) {
#line 143
      *(IPLEN + (i - 1)) = *(IPLEN + i);
#line 143
      i ++;
    }
#line 144
    *(IPLEN + NPROCS) = itmp;
#line 141
    j ++;
  }
#line 149
  k = 1;
#line 149
  while (k <= dist) {
#line 151
    j = 1;
#line 151
    while (j < (int )NPROCS) {
#line 153
      if (*(IPMAPM1 + j) == k) {
#line 155
        i = 2;
#line 155
        while (i < (int )NPROCS) {
#line 157
          if (k < *(IPMAPM1 + i)) {
#line 159
            iplen_i = *(IPLEN + (i + 1));
#line 159
            iplen_j = *(IPLEN + (j + 1));
#line 161
            if (iplen_j < iplen_i) {
#line 163
              *(IPLEN + (j + 1)) = iplen_i;
#line 163
              *(IPLEN + (i + 1)) = iplen_j;
#line 164
              itmp = *(IPMAP + j);
#line 164
              *(IPMAP + j) = *(IPMAP + i);
#line 165
              *(IPMAP + i) = itmp;
            }
          }
#line 155
          i ++;
        }
      }
#line 151
      j ++;
    }
#line 149
    k ++;
  }
#line 175
  *(IPLEN + 0) = 0;
#line 177
  i = 0;
#line 177
  while (i < (int )NPROCS) {
#line 179
    *(IPMAPM1 + *(IPMAP + i)) = i;
#line 180
    *(IPLEN + (i + 1)) += *(IPLEN + i);
#line 177
    i ++;
  }
#line 185
  return;
}
}
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 179 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx10(HPL_T_panel *PANEL , int const   K , int const   *IPID , int *IPLEN ,
                  int *IPMAP , int *IPMAPM1 ) ;
#line 53 "../HPL_plindx10.c"
void HPL_plindx10(HPL_T_panel *PANEL , int const   K , int const   *IPID , int *IPLEN ,
                  int *IPMAP , int *IPMAPM1 ) 
{ 
  int dst ;
  int dstrow ;
  int i ;
  int ia ;
  int icurrow ;
  int jb ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;

  {
#line 130
  nprow = (PANEL->grid)->nprow;
#line 130
  jb = PANEL->jb;
#line 130
  nb = PANEL->nb;
#line 131
  ia = PANEL->ia;
#line 131
  icurrow = PANEL->prow;
#line 136
  i = 0;
#line 136
  while (i <= nprow) {
#line 136
    *(IPLEN + i) = 0;
#line 136
    i ++;
  }
#line 138
  i = 0;
#line 138
  while (i < (int )K) {
#line 140
    src = (int )*(IPID + i);
#line 140
    if (src >= nb) {
#line 140
      if (nprow > 1) {
#line 140
        srcrow = 1 + (src - nb) / nb;
#line 140
        srcrow -= (srcrow / nprow) * nprow;
      } else {
#line 140
        srcrow = 0;
      }
    } else {
#line 140
      srcrow = 0;
    }
#line 141
    if (srcrow == icurrow) {
#line 143
      dst = (int )*(IPID + (i + 1));
#line 143
      if (dst >= nb) {
#line 143
        if (nprow > 1) {
#line 143
          dstrow = 1 + (dst - nb) / nb;
#line 143
          dstrow -= (dstrow / nprow) * nprow;
        } else {
#line 143
          dstrow = 0;
        }
      } else {
#line 143
        dstrow = 0;
      }
#line 144
      if (dstrow != srcrow) {
#line 144
        (*(IPLEN + (dstrow + 1))) ++;
      } else
#line 144
      if (dst - ia < jb) {
#line 144
        (*(IPLEN + (dstrow + 1))) ++;
      }
    }
#line 138
    i += 2;
  }
#line 151
  HPL_logsort((int const   )nprow, (int const   )icurrow, IPLEN, IPMAP, IPMAPM1);
#line 155
  return;
}
}
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 188 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_plindx1(HPL_T_panel *PANEL , int const   K , int const   *IPID , int *IPA ,
                 int *LINDXA , int *LINDXAU , int *IPLEN , int *IPMAP , int *IPMAPM1 ,
                 int *PERMU , int *IWORK ) ;
#line 53 "../HPL_plindx1.c"
void HPL_plindx1(HPL_T_panel *PANEL , int const   K , int const   *IPID , int *IPA ,
                 int *LINDXA , int *LINDXAU , int *IPLEN , int *IPMAP , int *IPMAPM1 ,
                 int *PERMU , int *IWORK ) 
{ 
  int *iwork ;
  int dst ;
  int dstrow ;
  int fndd ;
  int i ;
  int ia ;
  int icurrow ;
  int il ;
  int ip ;
  int ipU ;
  int iroff ;
  int j ;
  int jb ;
  int myrow ;
  int nb ;
  int nprow ;
  int src ;
  int srcrow ;
  int i__ ;
  int j__ ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int i_____0 ;
  int j_____0 ;
  int tmp___2 ;
  int i_____1 ;
  int j_____1 ;
  int tmp___3 ;

  {
#line 173
  HPL_plindx10(PANEL, K, IPID, IPLEN, IPMAP, IPMAPM1);
#line 180
  myrow = (PANEL->grid)->myrow;
#line 180
  nprow = (PANEL->grid)->nprow;
#line 181
  jb = PANEL->jb;
#line 181
  nb = PANEL->nb;
#line 181
  ia = PANEL->ia;
#line 182
  iroff = PANEL->ii;
#line 182
  icurrow = PANEL->prow;
#line 184
  iwork = IWORK + jb;
#line 186
  if (myrow == icurrow) {
#line 188
    i = 0;
#line 188
    ip = 0;
#line 188
    ipU = 0;
#line 188
    while (i < (int )K) {
#line 190
      src = (int )*(IPID + i);
#line 190
      if (src >= nb) {
#line 190
        if (nprow > 1) {
#line 190
          srcrow = 1 + (src - nb) / nb;
#line 190
          srcrow -= (srcrow / nprow) * nprow;
        } else {
#line 190
          srcrow = 0;
        }
      } else {
#line 190
        srcrow = 0;
      }
#line 192
      if (srcrow == icurrow) {
#line 194
        dst = (int )*(IPID + (i + 1));
#line 194
        if (dst >= nb) {
#line 194
          if (nprow > 1) {
#line 194
            dstrow = 1 + (dst - nb) / nb;
#line 194
            dstrow -= (dstrow / nprow) * nprow;
          } else {
#line 194
            dstrow = 0;
          }
        } else {
#line 194
          dstrow = 0;
        }
#line 196
        if (src < nb) {
#line 196
          il = src;
        } else
#line 196
        if (nprow == 1) {
#line 196
          il = src;
        } else {
#line 196
          i__ = (src - nb) / nb;
#line 196
          j__ = i__ / nprow;
#line 196
          if ((i__ + 1) - (j__ + 1) * nprow) {
#line 196
            tmp = src - nb;
          } else {
#line 196
            tmp = src;
          }
#line 196
          il = nb * (j__ - i__) + tmp;
        }
#line 197
        *(LINDXA + ip) = il - iroff;
#line 199
        if (dstrow == icurrow) {
#line 199
          if (dst - ia < jb) {
#line 201
            *(PERMU + ipU) = dst - ia;
#line 201
            il = *(IPMAPM1 + dstrow);
#line 202
            j = *(IPLEN + il);
#line 202
            tmp___0 = j;
#line 202
            *(LINDXAU + ip) = tmp___0;
#line 202
            *(iwork + ipU) = tmp___0;
#line 203
            (*(IPLEN + il)) ++;
#line 203
            ipU ++;
          } else {
#line 199
            goto _L;
          }
        } else
        _L: 
#line 205
        if (dstrow != icurrow) {
#line 207
          j = 0;
#line 208
          while (1) {
#line 208
            fndd = dst == (int )*(IPID + j);
#line 208
            j += 2;
#line 208
            if (! fndd) {
#line 208
              if (! (j < (int )K)) {
#line 208
                break;
              }
            } else {
#line 208
              break;
            }
          }
#line 211
          *(PERMU + ipU) = (int )(*(IPID + (j - 1)) - (int const   )ia);
#line 211
          il = *(IPMAPM1 + dstrow);
#line 212
          j = *(IPLEN + il);
#line 212
          tmp___1 = j;
#line 212
          *(LINDXAU + ip) = tmp___1;
#line 212
          *(iwork + ipU) = tmp___1;
#line 213
          (*(IPLEN + il)) ++;
#line 213
          ipU ++;
        } else
#line 215
        if (dstrow == icurrow) {
#line 215
          if (dst - ia >= jb) {
#line 217
            if (dst < nb) {
#line 217
              il = dst;
            } else
#line 217
            if (nprow == 1) {
#line 217
              il = dst;
            } else {
#line 217
              i_____0 = (dst - nb) / nb;
#line 217
              j_____0 = i_____0 / nprow;
#line 217
              if ((i_____0 + 1) - (j_____0 + 1) * nprow) {
#line 217
                tmp___2 = dst - nb;
              } else {
#line 217
                tmp___2 = dst;
              }
#line 217
              il = nb * (j_____0 - i_____0) + tmp___2;
            }
#line 218
            *(LINDXAU + ip) = iroff - il;
          }
        }
#line 220
        ip ++;
      }
#line 188
      i += 2;
    }
#line 223
    *IPA = ip;
  } else {
#line 227
    i = 0;
#line 227
    ip = 0;
#line 227
    ipU = 0;
#line 227
    while (i < (int )K) {
#line 229
      src = (int )*(IPID + i);
#line 229
      if (src >= nb) {
#line 229
        if (nprow > 1) {
#line 229
          srcrow = 1 + (src - nb) / nb;
#line 229
          srcrow -= (srcrow / nprow) * nprow;
        } else {
#line 229
          srcrow = 0;
        }
      } else {
#line 229
        srcrow = 0;
      }
#line 230
      dst = (int )*(IPID + (i + 1));
#line 230
      if (dst >= nb) {
#line 230
        if (nprow > 1) {
#line 230
          dstrow = 1 + (dst - nb) / nb;
#line 230
          dstrow -= (dstrow / nprow) * nprow;
        } else {
#line 230
          dstrow = 0;
        }
      } else {
#line 230
        dstrow = 0;
      }
#line 234
      if (myrow == dstrow) {
#line 236
        if (dst < nb) {
#line 236
          il = dst;
        } else
#line 236
        if (nprow == 1) {
#line 236
          il = dst;
        } else {
#line 236
          i_____1 = (dst - nb) / nb;
#line 236
          j_____1 = i_____1 / nprow;
#line 236
          if ((i_____1 + 1) - (j_____1 + 1) * nprow) {
#line 236
            tmp___3 = dst - nb;
          } else {
#line 236
            tmp___3 = dst;
          }
#line 236
          il = nb * (j_____1 - i_____1) + tmp___3;
        }
#line 237
        *(LINDXA + ip) = il - iroff;
#line 237
        ip ++;
      }
#line 243
      if (srcrow == icurrow) {
#line 245
        if (dstrow == icurrow) {
#line 245
          if (dst - ia < jb) {
#line 247
            *(PERMU + ipU) = dst - ia;
#line 247
            il = *(IPMAPM1 + dstrow);
#line 248
            *(iwork + ipU) = *(IPLEN + il);
#line 248
            (*(IPLEN + il)) ++;
#line 248
            ipU ++;
          } else {
#line 245
            goto _L___0;
          }
        } else
        _L___0: 
#line 250
        if (dstrow != icurrow) {
#line 252
          j = 0;
#line 253
          while (1) {
#line 253
            fndd = dst == (int )*(IPID + j);
#line 253
            j += 2;
#line 253
            if (! fndd) {
#line 253
              if (! (j < (int )K)) {
#line 253
                break;
              }
            } else {
#line 253
              break;
            }
          }
#line 255
          *(PERMU + ipU) = (int )(*(IPID + (j - 1)) - (int const   )ia);
#line 255
          il = *(IPMAPM1 + dstrow);
#line 256
          *(iwork + ipU) = *(IPLEN + il);
#line 256
          (*(IPLEN + il)) ++;
#line 256
          ipU ++;
        }
      }
#line 227
      i += 2;
    }
#line 260
    *IPA = 0;
  }
#line 266
  HPL_perm((int const   )jb, iwork, PERMU, IWORK);
#line 270
  i = nprow;
#line 270
  while (i > 0) {
#line 270
    *(IPLEN + i) = *(IPLEN + (i - 1));
#line 270
    i --;
  }
#line 271
  *(IPLEN + 0) = 0;
#line 275
  return;
}
}
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 902 "//usr/include/mpich/mpi.h"
extern int MPI_Type_vector(int count , int blocklength , int stride , MPI_Datatype oldtype ,
                           MPI_Datatype *newtype ) ;
#line 202 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_spreadN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE  const  SIDE ,
                 int const   N , double *U , int const   LDU , int const   SRCDIST ,
                 int const   *IPLEN , int const   *IPMAP , int const   *IPMAPM1 ) ;
#line 53 "../HPL_spreadN.c"
void HPL_spreadN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE  const  SIDE ,
                 int const   N , double *U , int const   LDU , int const   SRCDIST ,
                 int const   *IPLEN , int const   *IPMAP , int const   *IPMAPM1 ) 
{ 
  MPI_Datatype type ;
  MPI_Status status ;
  MPI_Comm comm ;
  unsigned int ip2 ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydist2 ;
  int Cmsgid ;
  int ibuf ;
  int ierr ;
  int il ;
  int k ;
  int lbuf ;
  int lgth ;
  int myrow ;
  int npm1 ;
  int nprow ;
  int partner ;
  int tmp ;
  int tmp___0 ;

  {
#line 159
  ip2 = 1U;
#line 159
  mask = 1U;
#line 160
  Cmsgid = 1001;
#line 160
  ierr = 0;
#line 166
  myrow = (PANEL->grid)->myrow;
#line 166
  nprow = (PANEL->grid)->nprow;
#line 167
  comm = (PANEL->grid)->col_comm;
#line 171
  if ((unsigned int const   )SIDE == 141U) {
#line 173
    npm1 = (int )SRCDIST;
#line 173
    nprow = npm1 + 1;
#line 174
    mydist = (unsigned int )*(IPMAPM1 + myrow);
#line 174
    if (mydist > (unsigned int )SRCDIST) {
#line 175
      return;
    } else
#line 174
    if (npm1 == 0) {
#line 175
      return;
    }
#line 177
    k = npm1;
#line 177
    while (k > 1) {
#line 177
      k >>= 1;
#line 177
      ip2 <<= 1;
#line 177
      mask <<= 1;
#line 177
      mask ++;
    }
#line 178
    mydist = (unsigned int )npm1 - mydist;
#line 178
    mydist2 = mydist;
#line 178
    il = (int )((unsigned int )npm1 - ip2);
#line 179
    lgth = (int )*(IPLEN + nprow);
#line 181
    while (1) {
#line 183
      mask ^= ip2;
#line 185
      if ((mydist & mask) == 0U) {
#line 187
        if (il < (int )ip2) {
#line 187
          tmp = il;
        } else {
#line 187
          tmp = (int )ip2;
        }
#line 187
        ibuf = (int )*(IPLEN + (il - tmp));
#line 187
        lbuf = (int )(*(IPLEN + (il + 1)) - (int const   )ibuf);
#line 189
        if (lbuf > 0) {
#line 191
          partner = (int )(mydist ^ ip2);
#line 193
          if (mydist & ip2) {
#line 195
            if (ierr == 0) {
#line 196
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
            }
#line 198
            if (ierr == 0) {
#line 199
              ierr = MPI_Type_commit(& type);
            }
#line 200
            if (ierr == 0) {
#line 201
              ierr = MPI_Recv((void *)((U + ibuf) + 0), 1, type, (int )*(IPMAP + (npm1 - partner)),
                              Cmsgid, comm, & status);
            }
#line 204
            if (ierr == 0) {
#line 205
              ierr = MPI_Type_free(& type);
            }
          } else
#line 207
          if (partner < nprow) {
#line 209
            if (ierr == 0) {
#line 210
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
            }
#line 212
            if (ierr == 0) {
#line 213
              ierr = MPI_Type_commit(& type);
            }
#line 214
            if (ierr == 0) {
#line 215
              ierr = MPI_Send((void const   *)((U + ibuf) + 0), 1, type, (int )*(IPMAP + (npm1 - partner)),
                              Cmsgid, comm);
            }
#line 217
            if (ierr == 0) {
#line 218
              ierr = MPI_Type_free(& type);
            }
          }
        }
      }
#line 223
      if (mydist2 < ip2) {
#line 223
        ip2 >>= 1;
#line 223
        il = (int )((unsigned int )il + ip2);
      } else {
#line 224
        mydist2 -= ip2;
#line 224
        ip2 >>= 1;
#line 224
        il = (int )((unsigned int )il - ip2);
      }
#line 228
      if (*IFLAG == 2) {
#line 228
        HPL_bcast(PBCST, IFLAG);
      }
#line 181
      if (! (ip2 > 0U)) {
#line 181
        break;
      }
    }
  } else {
#line 234
    nprow -= (int )SRCDIST;
#line 234
    npm1 = nprow - 1;
#line 235
    mydist = (unsigned int )*(IPMAPM1 + myrow);
#line 235
    if (mydist < (unsigned int )SRCDIST) {
#line 236
      return;
    } else
#line 235
    if (npm1 == 0) {
#line 236
      return;
    }
#line 238
    k = npm1;
#line 238
    while (k > 1) {
#line 238
      k >>= 1;
#line 238
      ip2 <<= 1;
#line 238
      mask <<= 1;
#line 238
      mask ++;
    }
#line 239
    mydist -= (unsigned int )SRCDIST;
#line 239
    mydist2 = mydist;
#line 239
    il = (int )ip2;
#line 240
    lgth = (int )*(IPLEN + (SRCDIST + (int const   )nprow));
#line 244
    while (1) {
#line 246
      mask ^= ip2;
#line 248
      if ((mydist & mask) == 0U) {
#line 250
        k = (int )((unsigned int )il + ip2);
#line 250
        ibuf = (int )*(IPLEN + (SRCDIST + (int const   )il));
#line 251
        if (k >= nprow) {
#line 251
          tmp___0 = lgth;
        } else {
#line 251
          tmp___0 = (int )*(IPLEN + (SRCDIST + (int const   )k));
        }
#line 251
        lbuf = tmp___0 - ibuf;
#line 253
        if (lbuf > 0) {
#line 255
          partner = (int )(mydist ^ ip2);
#line 257
          if (mydist & ip2) {
#line 259
            if (ierr == 0) {
#line 260
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
            }
#line 262
            if (ierr == 0) {
#line 263
              ierr = MPI_Type_commit(& type);
            }
#line 264
            if (ierr == 0) {
#line 265
              ierr = MPI_Recv((void *)((U + ibuf) + 0), 1, type, (int )*(IPMAP + (SRCDIST + (int const   )partner)),
                              Cmsgid, comm, & status);
            }
#line 268
            if (ierr == 0) {
#line 269
              ierr = MPI_Type_free(& type);
            }
          } else
#line 271
          if (partner < nprow) {
#line 273
            if (ierr == 0) {
#line 274
              ierr = MPI_Type_vector((int )N, lbuf, (int )LDU, 1275070475, & type);
            }
#line 276
            if (ierr == 0) {
#line 277
              ierr = MPI_Type_commit(& type);
            }
#line 278
            if (ierr == 0) {
#line 279
              ierr = MPI_Send((void const   *)((U + ibuf) + 0), 1, type, (int )*(IPMAP + (SRCDIST + (int const   )partner)),
                              Cmsgid, comm);
            }
#line 282
            if (ierr == 0) {
#line 283
              ierr = MPI_Type_free(& type);
            }
          }
        }
      }
#line 288
      if (mydist2 < ip2) {
#line 288
        ip2 >>= 1;
#line 288
        il = (int )((unsigned int )il - ip2);
      } else {
#line 289
        mydist2 -= ip2;
#line 289
        ip2 >>= 1;
#line 289
        il = (int )((unsigned int )il + ip2);
      }
#line 293
      if (*IFLAG == 2) {
#line 293
        HPL_bcast(PBCST, IFLAG);
      }
#line 244
      if (! (ip2 > 0U)) {
#line 244
        break;
      }
    }
  }
#line 298
  if (ierr != 0) {
#line 299
    HPL_pabort(299, "HPL_spreadN", "MPI call failed");
  }
#line 303
  return;
}
}
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 216 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_spreadT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE  const  SIDE ,
                 int const   N , double *U , int const   LDU , int const   SRCDIST ,
                 int const   *IPLEN , int const   *IPMAP , int const   *IPMAPM1 ) ;
#line 53 "../HPL_spreadT.c"
void HPL_spreadT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_SIDE  const  SIDE ,
                 int const   N , double *U , int const   LDU , int const   SRCDIST ,
                 int const   *IPLEN , int const   *IPMAP , int const   *IPMAPM1 ) 
{ 
  MPI_Status status ;
  MPI_Comm comm ;
  unsigned int ip2 ;
  unsigned int mask ;
  unsigned int mydist ;
  unsigned int mydist2 ;
  int Cmsgid ;
  int ibuf ;
  int ierr ;
  int il ;
  int k ;
  int lbuf ;
  int lgth ;
  int myrow ;
  int npm1 ;
  int nprow ;
  int partner ;
  int tmp ;
  int tmp___0 ;

  {
#line 161
  ip2 = 1U;
#line 161
  mask = 1U;
#line 162
  Cmsgid = 1001;
#line 162
  ierr = 0;
#line 168
  myrow = (PANEL->grid)->myrow;
#line 168
  nprow = (PANEL->grid)->nprow;
#line 169
  comm = (PANEL->grid)->col_comm;
#line 173
  if ((unsigned int const   )SIDE == 141U) {
#line 175
    npm1 = (int )SRCDIST;
#line 175
    nprow = npm1 + 1;
#line 176
    mydist = (unsigned int )*(IPMAPM1 + myrow);
#line 176
    if (mydist > (unsigned int )SRCDIST) {
#line 177
      return;
    } else
#line 176
    if (npm1 == 0) {
#line 177
      return;
    }
#line 179
    k = npm1;
#line 179
    while (k > 1) {
#line 179
      k >>= 1;
#line 179
      ip2 <<= 1;
#line 179
      mask <<= 1;
#line 179
      mask ++;
    }
#line 180
    mydist = (unsigned int )npm1 - mydist;
#line 180
    mydist2 = mydist;
#line 180
    il = (int )((unsigned int )npm1 - ip2);
#line 181
    lgth = (int )*(IPLEN + nprow);
#line 183
    while (1) {
#line 185
      mask ^= ip2;
#line 187
      if ((mydist & mask) == 0U) {
#line 189
        if (il < (int )ip2) {
#line 189
          tmp = il;
        } else {
#line 189
          tmp = (int )ip2;
        }
#line 189
        ibuf = (int )*(IPLEN + (il - tmp));
#line 189
        lbuf = (int )(*(IPLEN + (il + 1)) - (int const   )ibuf);
#line 191
        if (lbuf > 0) {
#line 193
          partner = (int )(mydist ^ ip2);
#line 195
          if (mydist & ip2) {
#line 219
            if (ierr == 0) {
#line 220
              ierr = MPI_Recv((void *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*(IPMAP + (npm1 - partner)), Cmsgid,
                              comm, & status);
            }
          } else
#line 225
          if (partner < nprow) {
#line 248
            if (ierr == 0) {
#line 249
              ierr = MPI_Send((void const   *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*(IPMAP + (npm1 - partner)), Cmsgid,
                              comm);
            }
          }
        }
      }
#line 257
      if (mydist2 < ip2) {
#line 257
        ip2 >>= 1;
#line 257
        il = (int )((unsigned int )il + ip2);
      } else {
#line 258
        mydist2 -= ip2;
#line 258
        ip2 >>= 1;
#line 258
        il = (int )((unsigned int )il - ip2);
      }
#line 262
      if (*IFLAG == 2) {
#line 262
        HPL_bcast(PBCST, IFLAG);
      }
#line 183
      if (! (ip2 > 0U)) {
#line 183
        break;
      }
    }
  } else {
#line 268
    nprow -= (int )SRCDIST;
#line 268
    npm1 = nprow - 1;
#line 269
    mydist = (unsigned int )*(IPMAPM1 + myrow);
#line 269
    if (mydist < (unsigned int )SRCDIST) {
#line 270
      return;
    } else
#line 269
    if (npm1 == 0) {
#line 270
      return;
    }
#line 272
    k = npm1;
#line 272
    while (k > 1) {
#line 272
      k >>= 1;
#line 272
      ip2 <<= 1;
#line 272
      mask <<= 1;
#line 272
      mask ++;
    }
#line 273
    mydist -= (unsigned int )SRCDIST;
#line 273
    mydist2 = mydist;
#line 273
    il = (int )ip2;
#line 277
    lgth = (int )*(IPLEN + (SRCDIST + (int const   )nprow));
#line 281
    while (1) {
#line 283
      mask ^= ip2;
#line 285
      if ((mydist & mask) == 0U) {
#line 287
        k = (int )((unsigned int )il + ip2);
#line 287
        ibuf = (int )*(IPLEN + (SRCDIST + (int const   )il));
#line 288
        if (k >= nprow) {
#line 288
          tmp___0 = lgth;
        } else {
#line 288
          tmp___0 = (int )*(IPLEN + (SRCDIST + (int const   )k));
        }
#line 288
        lbuf = tmp___0 - ibuf;
#line 290
        if (lbuf > 0) {
#line 292
          partner = (int )(mydist ^ ip2);
#line 294
          if (mydist & ip2) {
#line 318
            if (ierr == 0) {
#line 319
              ierr = MPI_Recv((void *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*(IPMAP + (SRCDIST + (int const   )partner)),
                              Cmsgid, comm, & status);
            }
          } else
#line 324
          if (partner < nprow) {
#line 348
            if (ierr == 0) {
#line 349
              ierr = MPI_Send((void const   *)((U + 0) + ibuf * (int )LDU), lbuf * (int )N,
                              1275070475, (int )*(IPMAP + (SRCDIST + (int const   )partner)),
                              Cmsgid, comm);
            }
          }
        }
      }
#line 357
      if (mydist2 < ip2) {
#line 357
        ip2 >>= 1;
#line 357
        il = (int )((unsigned int )il - ip2);
      } else {
#line 358
        mydist2 -= ip2;
#line 358
        ip2 >>= 1;
#line 358
        il = (int )((unsigned int )il + ip2);
      }
#line 362
      if (*IFLAG == 2) {
#line 362
        HPL_bcast(PBCST, IFLAG);
      }
#line 281
      if (! (ip2 > 0U)) {
#line 281
        break;
      }
    }
  }
#line 367
  if (ierr != 0) {
#line 368
    HPL_pabort(368, "HPL_spreadT", "MPI call failed");
  }
#line 372
  return;
}
}
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 244 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_rollN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   N ,
               double *U , int const   LDU , int const   *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 ) ;
#line 56 "../HPL_rollN.c"
void HPL_rollN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   N ,
               double *U , int const   LDU , int const   *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 ) 
{ 
  MPI_Datatype type[2] ;
  MPI_Status status ;
  MPI_Request request ;
  MPI_Comm comm ;
  int Cmsgid ;
  int ibufR ;
  int ibufS ;
  int ierr ;
  int il ;
  int k ;
  int l ;
  int lengthR ;
  int lengthS ;
  int mydist ;
  int myrow ;
  int next ;
  int npm1 ;
  int nprow ;
  int partner ;
  int prev ;
  int tmp ;
  int tmp___0 ;

  {
#line 144
  Cmsgid = 1001;
#line 144
  ierr = 0;
#line 151
  if (N <= 0) {
#line 151
    return;
  }
#line 153
  nprow = (PANEL->grid)->nprow;
#line 153
  npm1 = nprow - 1;
#line 153
  myrow = (PANEL->grid)->myrow;
#line 154
  comm = (PANEL->grid)->col_comm;
#line 158
  mydist = (int )*(IPMAPM1 + myrow);
#line 159
  if (mydist != 0) {
#line 159
    tmp = mydist - 1;
  } else {
#line 159
    tmp = nprow - 1;
  }
#line 159
  prev = (int )*(IPMAP + tmp);
#line 160
  if (mydist != nprow - 1) {
#line 160
    tmp___0 = mydist + 1;
  } else {
#line 160
    tmp___0 = 0;
  }
#line 160
  next = (int )*(IPMAP + tmp___0);
#line 162
  k = 0;
#line 162
  while (k < npm1) {
#line 164
    l = (int )((unsigned int )k >> 1);
#line 166
    if (((mydist + k) & 1) != 0) {
#line 168
      if (mydist + l < nprow) {
#line 168
        il = mydist + l;
      } else {
#line 168
        il = (mydist + l) - nprow;
      }
#line 169
      ibufS = (int )*(IPLEN + il);
#line 169
      lengthS = (int )(*(IPLEN + (il + 1)) - (int const   )ibufS);
#line 170
      if (mydist < l + 1) {
#line 170
        il = (nprow + mydist) - (l + 1);
      } else {
#line 170
        il = mydist - (l + 1);
      }
#line 171
      ibufR = (int )*(IPLEN + il);
#line 171
      lengthR = (int )(*(IPLEN + (il + 1)) - (int const   )ibufR);
#line 171
      partner = prev;
    } else {
#line 175
      if (mydist < l) {
#line 175
        il = (nprow + mydist) - l;
      } else {
#line 175
        il = mydist - l;
      }
#line 176
      ibufS = (int )*(IPLEN + il);
#line 176
      lengthS = (int )(*(IPLEN + (il + 1)) - (int const   )ibufS);
#line 177
      if (mydist + (l + 1) < nprow) {
#line 177
        il = mydist + (l + 1);
      } else {
#line 177
        il = (mydist + (l + 1)) - nprow;
      }
#line 178
      ibufR = (int )*(IPLEN + il);
#line 178
      lengthR = (int )(*(IPLEN + (il + 1)) - (int const   )ibufR);
#line 178
      partner = next;
    }
#line 181
    if (lengthR > 0) {
#line 183
      if (ierr == 0) {
#line 184
        ierr = MPI_Type_vector((int )N, lengthR, (int )LDU, 1275070475, & type[1]);
      }
#line 186
      if (ierr == 0) {
#line 187
        ierr = MPI_Type_commit(& type[1]);
      }
#line 188
      if (ierr == 0) {
#line 189
        ierr = MPI_Irecv((void *)((U + ibufR) + 0), 1, type[1], partner, Cmsgid, comm,
                         & request);
      }
    }
#line 193
    if (lengthS > 0) {
#line 195
      if (ierr == 0) {
#line 196
        ierr = MPI_Type_vector((int )N, lengthS, (int )LDU, 1275070475, & type[0]);
      }
#line 198
      if (ierr == 0) {
#line 199
        ierr = MPI_Type_commit(& type[0]);
      }
#line 200
      if (ierr == 0) {
#line 201
        ierr = MPI_Send((void const   *)((U + ibufS) + 0), 1, type[0], partner, Cmsgid,
                        comm);
      }
#line 203
      if (ierr == 0) {
#line 204
        ierr = MPI_Type_free(& type[0]);
      }
    }
#line 207
    if (lengthR > 0) {
#line 209
      if (ierr == 0) {
#line 210
        ierr = MPI_Wait(& request, & status);
      }
#line 211
      if (ierr == 0) {
#line 212
        ierr = MPI_Type_free(& type[1]);
      }
    }
#line 217
    if (*IFLAG == 2) {
#line 217
      HPL_bcast(PBCST, IFLAG);
    }
#line 162
    k ++;
  }
#line 220
  if (ierr != 0) {
#line 221
    HPL_pabort(221, "HPL_rollN", "MPI call failed");
  }
#line 225
  return;
}
}
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 256 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_rollT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   N ,
               double *U , int const   LDU , int const   *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 ) ;
#line 56 "../HPL_rollT.c"
void HPL_rollT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   N ,
               double *U , int const   LDU , int const   *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 ) 
{ 
  MPI_Status status ;
  MPI_Request request ;
  MPI_Comm comm ;
  int Cmsgid ;
  int ibufR ;
  int ibufS ;
  int ierr ;
  int il ;
  int k ;
  int l ;
  int lengthR ;
  int lengthS ;
  int mydist ;
  int myrow ;
  int next ;
  int npm1 ;
  int nprow ;
  int partner ;
  int prev ;
  int tmp ;
  int tmp___0 ;

  {
#line 146
  Cmsgid = 1001;
#line 146
  ierr = 0;
#line 153
  if (N <= 0) {
#line 153
    return;
  }
#line 155
  nprow = (PANEL->grid)->nprow;
#line 155
  npm1 = nprow - 1;
#line 155
  myrow = (PANEL->grid)->myrow;
#line 156
  comm = (PANEL->grid)->col_comm;
#line 160
  mydist = (int )*(IPMAPM1 + myrow);
#line 161
  if (mydist != 0) {
#line 161
    tmp = mydist - 1;
  } else {
#line 161
    tmp = nprow - 1;
  }
#line 161
  prev = (int )*(IPMAP + tmp);
#line 162
  if (mydist != nprow - 1) {
#line 162
    tmp___0 = mydist + 1;
  } else {
#line 162
    tmp___0 = 0;
  }
#line 162
  next = (int )*(IPMAP + tmp___0);
#line 164
  k = 0;
#line 164
  while (k < npm1) {
#line 166
    l = (int )((unsigned int )k >> 1);
#line 168
    if (((mydist + k) & 1) != 0) {
#line 170
      if (mydist + l < nprow) {
#line 170
        il = mydist + l;
      } else {
#line 170
        il = (mydist + l) - nprow;
      }
#line 171
      ibufS = (int )*(IPLEN + il);
#line 171
      lengthS = (int )(*(IPLEN + (il + 1)) - (int const   )ibufS);
#line 172
      if (mydist < l + 1) {
#line 172
        il = (nprow + mydist) - (l + 1);
      } else {
#line 172
        il = mydist - (l + 1);
      }
#line 173
      ibufR = (int )*(IPLEN + il);
#line 173
      lengthR = (int )(*(IPLEN + (il + 1)) - (int const   )ibufR);
#line 173
      partner = prev;
    } else {
#line 177
      if (mydist < l) {
#line 177
        il = (nprow + mydist) - l;
      } else {
#line 177
        il = mydist - l;
      }
#line 178
      ibufS = (int )*(IPLEN + il);
#line 178
      lengthS = (int )(*(IPLEN + (il + 1)) - (int const   )ibufS);
#line 179
      if (mydist + (l + 1) < nprow) {
#line 179
        il = mydist + (l + 1);
      } else {
#line 179
        il = (mydist + (l + 1)) - nprow;
      }
#line 180
      ibufR = (int )*(IPLEN + il);
#line 180
      lengthR = (int )(*(IPLEN + (il + 1)) - (int const   )ibufR);
#line 180
      partner = next;
    }
#line 183
    if (lengthR > 0) {
#line 204
      if (ierr == 0) {
#line 205
        ierr = MPI_Irecv((void *)((U + 0) + ibufR * (int )LDU), lengthR * (int )LDU,
                         1275070475, partner, Cmsgid, comm, & request);
      }
    }
#line 210
    if (lengthS > 0) {
#line 233
      if (ierr == 0) {
#line 234
        ierr = MPI_Send((void const   *)((U + 0) + ibufS * (int )LDU), lengthS * (int )LDU,
                        1275070475, partner, Cmsgid, comm);
      }
    }
#line 239
    if (lengthR > 0) {
#line 241
      if (ierr == 0) {
#line 242
        ierr = MPI_Wait(& request, & status);
      }
    }
#line 251
    if (*IFLAG == 2) {
#line 251
      HPL_bcast(PBCST, IFLAG);
    }
#line 164
    k ++;
  }
#line 254
  if (ierr != 0) {
#line 255
    HPL_pabort(255, "HPL_rollT", "MPI call failed");
  }
#line 259
  return;
}
}
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 230 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_equil(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_TRANS  const  TRANS ,
               int const   N , double *U , int const   LDU , int *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 , int *IWORK ) ;
#line 53 "../HPL_equil.c"
void HPL_equil(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , enum HPL_TRANS  const  TRANS ,
               int const   N , double *U , int const   LDU , int *IPLEN , int const   *IPMAP ,
               int const   *IPMAPM1 , int *IWORK ) 
{ 
  int i ;
  int ip ;
  int ipU ;
  int ipcur ;
  int iprow ;
  int iptgt ;
  int lastrow ;
  int left ;
  int npm1 ;
  int nprow ;
  int ll ;
  int llU ;
  int llcur ;
  int lltgt ;
  int right ;
  int slen ;
  int smax ;
  int smin ;

  {
#line 156
  nprow = (PANEL->grid)->nprow;
#line 156
  npm1 = nprow - 1;
#line 156
  if (npm1 <= 1) {
#line 156
    return;
  }
#line 164
  slen = *(IPLEN + nprow);
#line 164
  smax = (slen + npm1) / nprow;
#line 165
  smin = slen / nprow;
#line 165
  ip = slen - nprow * smin;
#line 167
  iprow = 0;
#line 168
  while (1) {
#line 170
    ll = *(IPLEN + (iprow + 1)) - *(IPLEN + iprow);
#line 170
    iprow ++;
#line 168
    if (iprow < nprow) {
#line 168
      if (! (ll == smin)) {
#line 168
        if (! (ll == smax)) {
#line 168
          break;
        }
      }
    } else {
#line 168
      break;
    }
  }
#line 173
  if (iprow == nprow) {
#line 173
    return;
  }
#line 183
  *(IWORK + nprow) = slen;
#line 185
  iprow = 0;
#line 185
  while (iprow < nprow) {
#line 187
    ipU = *(IPLEN + iprow);
#line 187
    llU = *(IPLEN + (iprow + 1)) - ipU;
#line 188
    if (iprow < ip) {
#line 188
      lltgt = smax;
#line 188
      iptgt = iprow * smax;
    } else {
#line 189
      lltgt = smin;
#line 189
      iptgt = iprow * smin + ip;
    }
#line 191
    left = ipU < iptgt;
#line 191
    right = iptgt + lltgt < ipU + llU;
#line 195
    if (llU > 0) {
#line 195
      if (left) {
#line 195
        goto _L;
      } else
#line 195
      if (right) {
        _L: 
#line 198
        ipcur = ipU;
#line 198
        llcur = llU;
#line 200
        i = 0;
#line 200
        while (i < nprow) {
#line 202
          if (i < ip) {
#line 202
            lltgt = smax;
#line 202
            iptgt = i * smax;
          } else {
#line 203
            lltgt = smin;
#line 203
            iptgt = i * smin + ip;
          }
#line 204
          lastrow = (iptgt + lltgt) - 1;
#line 206
          if (lastrow >= ipcur) {
#line 206
            if (llcur > 0) {
#line 207
              ll = (lastrow - ipcur) + 1;
#line 207
              if (ll < llcur) {
#line 207
                ll = ll;
              } else {
#line 207
                ll = llcur;
              }
#line 207
              llcur -= ll;
            } else {
#line 208
              ll = 0;
            }
          } else {
#line 208
            ll = 0;
          }
#line 210
          *(IWORK + i) = ipcur;
#line 210
          ipcur += ll;
#line 210
          *(IWORK + (i + 1)) = ipcur;
#line 200
          i ++;
        }
#line 215
        if ((unsigned int const   )TRANS == 111U) {
#line 217
          if (left) {
#line 219
            HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )141, N, U, LDU,
                        (int const   )iprow, (int const   *)IWORK, IPMAP, IPMAPM1);
          }
#line 223
          if (right) {
#line 225
            HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )142, N, U, LDU,
                        (int const   )iprow, (int const   *)IWORK, IPMAP, IPMAPM1);
          }
        } else {
#line 231
          if (left) {
#line 233
            HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )141, N, U, LDU,
                        (int const   )iprow, (int const   *)IWORK, IPMAP, IPMAPM1);
          }
#line 237
          if (right) {
#line 239
            HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )142, N, U, LDU,
                        (int const   )iprow, (int const   *)IWORK, IPMAP, IPMAPM1);
          }
        }
      }
    }
#line 185
    iprow ++;
  }
#line 249
  i = 0;
#line 249
  while (i < nprow) {
#line 249
    if (i < ip) {
#line 249
      *(IPLEN + i) = i * smax;
    } else {
#line 249
      *(IPLEN + i) = i * smin + ip;
    }
#line 249
    i ++;
  }
#line 253
  return;
}
}
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 268 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp01N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 121 "../HPL_pdlaswp01N.c"
static int equil  =    -1;
#line 53 "../HPL_pdlaswp01N.c"
void HPL_pdlaswp01N(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *A ;
  double *U ;
  int *ipID ;
  int *iplen ;
  int *ipmap ;
  int *ipmapm1 ;
  int *iwork ;
  int *lindxA ;
  int *lindxAU ;
  int *permU ;
  int icurrow ;
  int *iflag ;
  int *ipA ;
  int *ipl ;
  int jb ;
  int k ;
  int lda ;
  int myrow ;
  int n ;
  int nprow ;

  {
#line 118
  lindxA = (int *)((void *)0);
#line 128
  n = PANEL->n;
#line 128
  if (NN < (int const   )n) {
#line 128
    n = (int )NN;
  } else {
#line 128
    n = n;
  }
#line 128
  jb = PANEL->jb;
#line 132
  if (n <= 0) {
#line 132
    return;
  } else
#line 132
  if (jb <= 0) {
#line 132
    return;
  }
#line 139
  if (equil == -1) {
#line 139
    equil = (PANEL->algo)->equil;
  }
#line 143
  nprow = (PANEL->grid)->nprow;
#line 143
  myrow = (PANEL->grid)->myrow;
#line 144
  A = PANEL->A;
#line 144
  U = PANEL->U;
#line 144
  iflag = PANEL->IWORK;
#line 145
  lda = PANEL->lda;
#line 145
  icurrow = PANEL->prow;
#line 154
  k = (int )((unsigned int )jb << 1);
#line 154
  ipl = iflag + 1;
#line 154
  ipID = ipl + 1;
#line 155
  ipA = ipID + ((unsigned int )k << 1);
#line 155
  lindxA = ipA + 1;
#line 156
  lindxAU = lindxA + k;
#line 156
  iplen = lindxAU + k;
#line 156
  ipmap = (iplen + nprow) + 1;
#line 157
  ipmapm1 = ipmap + nprow;
#line 157
  permU = ipmapm1 + nprow;
#line 157
  iwork = permU + jb;
#line 159
  if (*iflag == -1) {
#line 161
    HPL_pipid(PANEL, ipl, ipID);
#line 162
    HPL_plindx1(PANEL, (int const   )*ipl, (int const   *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
#line 164
    *iflag = 1;
  } else
#line 166
  if (*iflag == 0) {
#line 168
    HPL_plindx1(PANEL, (int const   )*ipl, (int const   *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
#line 170
    *iflag = 1;
  } else
#line 172
  if (*iflag == 1) {
#line 172
    if (equil != 0) {
#line 174
      HPL_plindx10(PANEL, (int const   )*ipl, (int const   *)ipID, iplen, ipmap, ipmapm1);
#line 175
      *iflag = 1;
    }
  }
#line 180
  if (myrow == icurrow) {
#line 181
    HPL_dlaswp01N((int const   )*ipA, (int const   )n, A, (int const   )lda, U, (int const   )jb,
                  (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 185
  HPL_spreadN(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )142, (int const   )n, U,
              (int const   )jb, (int const   )0, (int const   *)iplen, (int const   *)ipmap,
              (int const   *)ipmapm1);
#line 190
  if (myrow != icurrow) {
#line 192
    k = *(ipmapm1 + myrow);
#line 193
    HPL_dlaswp06N((int const   )(*(iplen + (k + 1)) - *(iplen + k)), (int const   )n,
                  A, (int const   )lda, (U + *(iplen + k)) + 0, (int const   )jb,
                  (int const   *)lindxA);
  }
#line 199
  if (equil != 0) {
#line 200
    HPL_equil(PBCST, IFLAG, PANEL, (enum HPL_TRANS  const  )111, (int const   )n,
              U, (int const   )jb, iplen, (int const   *)ipmap, (int const   *)ipmapm1,
              iwork);
  }
#line 205
  HPL_rollN(PBCST, IFLAG, PANEL, (int const   )n, U, (int const   )jb, (int const   *)iplen,
            (int const   *)ipmap, (int const   *)ipmapm1);
#line 209
  HPL_dlaswp00N((int const   )jb, (int const   )n, U, (int const   )jb, (int const   *)permU);
#line 217
  return;
}
}
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 275 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdlaswp01T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 121 "../HPL_pdlaswp01T.c"
static int equil___0  =    -1;
#line 53 "../HPL_pdlaswp01T.c"
void HPL_pdlaswp01T(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *A ;
  double *U ;
  int *ipID ;
  int *iplen ;
  int *ipmap ;
  int *ipmapm1 ;
  int *iwork ;
  int *lindxA ;
  int *lindxAU ;
  int *permU ;
  int icurrow ;
  int *iflag ;
  int *ipA ;
  int *ipl ;
  int jb ;
  int k ;
  int lda ;
  int myrow ;
  int n ;
  int nprow ;

  {
#line 118
  lindxA = (int *)((void *)0);
#line 128
  n = PANEL->n;
#line 128
  if (NN < (int const   )n) {
#line 128
    n = (int )NN;
  } else {
#line 128
    n = n;
  }
#line 128
  jb = PANEL->jb;
#line 132
  if (n <= 0) {
#line 132
    return;
  } else
#line 132
  if (jb <= 0) {
#line 132
    return;
  }
#line 139
  if (equil___0 == -1) {
#line 139
    equil___0 = (PANEL->algo)->equil;
  }
#line 143
  nprow = (PANEL->grid)->nprow;
#line 143
  myrow = (PANEL->grid)->myrow;
#line 144
  A = PANEL->A;
#line 144
  U = PANEL->U;
#line 144
  iflag = PANEL->IWORK;
#line 145
  lda = PANEL->lda;
#line 145
  icurrow = PANEL->prow;
#line 154
  k = (int )((unsigned int )jb << 1);
#line 154
  ipl = iflag + 1;
#line 154
  ipID = ipl + 1;
#line 155
  ipA = ipID + ((unsigned int )k << 1);
#line 155
  lindxA = ipA + 1;
#line 156
  lindxAU = lindxA + k;
#line 156
  iplen = lindxAU + k;
#line 156
  ipmap = (iplen + nprow) + 1;
#line 157
  ipmapm1 = ipmap + nprow;
#line 157
  permU = ipmapm1 + nprow;
#line 157
  iwork = permU + jb;
#line 159
  if (*iflag == -1) {
#line 161
    HPL_pipid(PANEL, ipl, ipID);
#line 162
    HPL_plindx1(PANEL, (int const   )*ipl, (int const   *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
#line 164
    *iflag = 1;
  } else
#line 166
  if (*iflag == 0) {
#line 168
    HPL_plindx1(PANEL, (int const   )*ipl, (int const   *)ipID, ipA, lindxA, lindxAU,
                iplen, ipmap, ipmapm1, permU, iwork);
#line 170
    *iflag = 1;
  } else
#line 172
  if (*iflag == 1) {
#line 172
    if (equil___0 != 0) {
#line 174
      HPL_plindx10(PANEL, (int const   )*ipl, (int const   *)ipID, iplen, ipmap, ipmapm1);
#line 175
      *iflag = 1;
    }
  }
#line 180
  if (myrow == icurrow) {
#line 181
    HPL_dlaswp01T((int const   )*ipA, (int const   )n, A, (int const   )lda, U, (int const   )n,
                  (int const   *)lindxA, (int const   *)lindxAU);
  }
#line 185
  HPL_spreadT(PBCST, IFLAG, PANEL, (enum HPL_SIDE  const  )142, (int const   )n, U,
              (int const   )n, (int const   )0, (int const   *)iplen, (int const   *)ipmap,
              (int const   *)ipmapm1);
#line 190
  if (myrow != icurrow) {
#line 192
    k = *(ipmapm1 + myrow);
#line 193
    HPL_dlaswp06T((int const   )(*(iplen + (k + 1)) - *(iplen + k)), (int const   )n,
                  A, (int const   )lda, (U + 0) + *(iplen + k) * n, (int const   )n,
                  (int const   *)lindxA);
  }
#line 199
  if (equil___0 != 0) {
#line 200
    HPL_equil(PBCST, IFLAG, PANEL, (enum HPL_TRANS  const  )112, (int const   )n,
              U, (int const   )n, iplen, (int const   *)ipmap, (int const   *)ipmapm1,
              iwork);
  }
#line 205
  HPL_rollT(PBCST, IFLAG, PANEL, (int const   )n, U, (int const   )n, (int const   *)iplen,
            (int const   *)ipmap, (int const   *)ipmapm1);
#line 209
  HPL_dlaswp10N((int const   )n, (int const   )jb, U, (int const   )n, (int const   *)permU);
#line 217
  return;
}
}
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 283 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateNN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 110 "../HPL_pdupdateNN.c"
static int tswap  =    0;
#line 111 "../HPL_pdupdateNN.c"
static HPL_T_SWAP fswap  =    (HPL_T_SWAP )499;
#line 53 "../HPL_pdupdateNN.c"
void HPL_pdupdateNN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;

  {
#line 119
  nb = PANEL->nb;
#line 119
  jb = PANEL->jb;
#line 119
  n = PANEL->nq;
#line 119
  lda = PANEL->lda;
#line 120
  if (NN >= 0) {
#line 120
    if (NN < (int const   )n) {
#line 120
      n = (int )NN;
    } else {
#line 120
      n = n;
    }
  }
#line 124
  if (n <= 0) {
#line 124
    goto _L;
  } else
#line 124
  if (jb <= 0) {
    _L: 
#line 126
    if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 128
      while (1) {
#line 128
        HPL_bcast(PBCST, IFLAG);
#line 128
        if (! (*IFLAG != 1)) {
#line 128
          break;
        }
      }
    }
#line 134
    return;
  }
#line 139
  HPL_bcast(PBCST, & test);
#line 143
  if ((PANEL->grid)->nprow == 1) {
#line 145
    Aptr = PANEL->A;
#line 145
    L2ptr = PANEL->L2;
#line 145
    L1ptr = PANEL->L1;
#line 146
    ldl2 = PANEL->ldl2;
#line 146
    dpiv = PANEL->DPIV;
#line 146
    ipiv = PANEL->IWORK;
#line 147
    mp = PANEL->mp - jb;
#line 147
    iroff = PANEL->ii;
#line 147
    nq0 = 0;
#line 164
    i = 0;
#line 164
    while (i < jb) {
#line 164
      *(ipiv + i) = (int )*(dpiv + i) - iroff;
#line 164
      i ++;
    }
#line 170
    while (test == 2) {
#line 172
      nn = n - nq0;
#line 172
      if (nb < nn) {
#line 172
        nn = nb;
      } else {
#line 172
        nn = nn;
      }
#line 181
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 183
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 200
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 204
      Aptr = (Aptr + 0) + nn * lda;
#line 204
      nq0 += nn;
#line 206
      HPL_bcast(PBCST, & test);
    }
#line 211
    nn = n - nq0;
#line 211
    if (nn > 0) {
#line 218
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 220
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 237
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
    }
  } else {
#line 264
    if ((unsigned int )fswap == 499U) {
#line 265
      fswap = (PANEL->algo)->fswap;
#line 265
      tswap = (PANEL->algo)->fsthr;
    }
#line 267
    if ((unsigned int )fswap == 452U) {
#line 269
      HPL_pdlaswp01N(PBCST, & test, PANEL, (int const   )n);
    } else
#line 267
    if ((unsigned int )fswap == 453U) {
#line 267
      if (n > tswap) {
#line 269
        HPL_pdlaswp01N(PBCST, & test, PANEL, (int const   )n);
      } else {
#line 271
        HPL_pdlaswp00N(PBCST, & test, PANEL, (int const   )n);
      }
    } else {
#line 271
      HPL_pdlaswp00N(PBCST, & test, PANEL, (int const   )n);
    }
#line 275
    nq0 = 0;
#line 275
    if ((PANEL->grid)->myrow == PANEL->prow) {
#line 275
      curr = 1;
    } else {
#line 275
      curr = 0;
    }
#line 276
    Aptr = PANEL->A;
#line 276
    L2ptr = PANEL->L2;
#line 276
    L1ptr = PANEL->L1;
#line 277
    Uptr = PANEL->U;
#line 277
    ldl2 = PANEL->ldl2;
#line 278
    if (curr != 0) {
#line 278
      tmp = jb;
    } else {
#line 278
      tmp = 0;
    }
#line 278
    mp = PANEL->mp - tmp;
#line 300
    while (test == 2) {
#line 302
      nn = n - nq0;
#line 302
      if (nb < nn) {
#line 302
        nn = nb;
      } else {
#line 302
        nn = nn;
      }
#line 304
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )jb);
#line 306
      if (curr != 0) {
#line 323
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 327
        HPL_dlacpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )jb,
                   Aptr, (int const   )lda);
      } else {
#line 346
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, Aptr, (int const   )lda);
      }
#line 351
      Uptr = (Uptr + 0) + nn * jb;
#line 352
      Aptr = (Aptr + 0) + nn * lda;
#line 352
      nq0 += nn;
#line 354
      HPL_bcast(PBCST, & test);
    }
#line 359
    nn = n - nq0;
#line 359
    if (nn > 0) {
#line 361
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )jb);
#line 364
      if (curr != 0) {
#line 381
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 385
        HPL_dlacpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )jb,
                   Aptr, (int const   )lda);
      } else {
#line 404
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, Aptr, (int const   )lda);
      }
    }
  }
#line 430
  PANEL->A = (PANEL->A + 0) + n * lda;
#line 430
  PANEL->nq -= n;
#line 430
  PANEL->jj += n;
#line 435
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 435
    *IFLAG = test;
  }
#line 442
  return;
}
}
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 290 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateNT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 110 "../HPL_pdupdateNT.c"
static int tswap___0  =    0;
#line 111 "../HPL_pdupdateNT.c"
static HPL_T_SWAP fswap___0  =    (HPL_T_SWAP )499;
#line 53 "../HPL_pdupdateNT.c"
void HPL_pdupdateNT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;

  {
#line 119
  nb = PANEL->nb;
#line 119
  jb = PANEL->jb;
#line 119
  n = PANEL->nq;
#line 119
  lda = PANEL->lda;
#line 120
  if (NN >= 0) {
#line 120
    if (NN < (int const   )n) {
#line 120
      n = (int )NN;
    } else {
#line 120
      n = n;
    }
  }
#line 124
  if (n <= 0) {
#line 124
    goto _L;
  } else
#line 124
  if (jb <= 0) {
    _L: 
#line 126
    if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 128
      while (1) {
#line 128
        HPL_bcast(PBCST, IFLAG);
#line 128
        if (! (*IFLAG != 1)) {
#line 128
          break;
        }
      }
    }
#line 134
    return;
  }
#line 139
  HPL_bcast(PBCST, & test);
#line 143
  if ((PANEL->grid)->nprow == 1) {
#line 145
    Aptr = PANEL->A;
#line 145
    L2ptr = PANEL->L2;
#line 145
    L1ptr = PANEL->L1;
#line 146
    ldl2 = PANEL->ldl2;
#line 146
    dpiv = PANEL->DPIV;
#line 146
    ipiv = PANEL->IWORK;
#line 147
    mp = PANEL->mp - jb;
#line 147
    iroff = PANEL->ii;
#line 147
    nq0 = 0;
#line 164
    i = 0;
#line 164
    while (i < jb) {
#line 164
      *(ipiv + i) = (int )*(dpiv + i) - iroff;
#line 164
      i ++;
    }
#line 170
    while (test == 2) {
#line 172
      nn = n - nq0;
#line 172
      if (nb < nn) {
#line 172
        nn = nb;
      } else {
#line 172
        nn = nn;
      }
#line 181
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 183
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 200
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 204
      Aptr = (Aptr + 0) + nn * lda;
#line 204
      nq0 += nn;
#line 206
      HPL_bcast(PBCST, & test);
    }
#line 211
    nn = n - nq0;
#line 211
    if (nn > 0) {
#line 218
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 220
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 237
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
    }
  } else {
#line 264
    if ((unsigned int )fswap___0 == 499U) {
#line 265
      fswap___0 = (PANEL->algo)->fswap;
#line 265
      tswap___0 = (PANEL->algo)->fsthr;
    }
#line 267
    if ((unsigned int )fswap___0 == 452U) {
#line 269
      HPL_pdlaswp01T(PBCST, & test, PANEL, (int const   )n);
    } else
#line 267
    if ((unsigned int )fswap___0 == 453U) {
#line 267
      if (n > tswap___0) {
#line 269
        HPL_pdlaswp01T(PBCST, & test, PANEL, (int const   )n);
      } else {
#line 271
        HPL_pdlaswp00T(PBCST, & test, PANEL, (int const   )n);
      }
    } else {
#line 271
      HPL_pdlaswp00T(PBCST, & test, PANEL, (int const   )n);
    }
#line 275
    nq0 = 0;
#line 275
    if ((PANEL->grid)->myrow == PANEL->prow) {
#line 275
      curr = 1;
    } else {
#line 275
      curr = 0;
    }
#line 276
    Aptr = PANEL->A;
#line 276
    L2ptr = PANEL->L2;
#line 276
    L1ptr = PANEL->L1;
#line 277
    Uptr = PANEL->U;
#line 277
    ldl2 = PANEL->ldl2;
#line 278
    if (curr != 0) {
#line 278
      tmp = jb;
    } else {
#line 278
      tmp = 0;
    }
#line 278
    mp = PANEL->mp - tmp;
#line 300
    while (test == 2) {
#line 302
      nn = n - nq0;
#line 302
      if (nb < nn) {
#line 302
        nn = nb;
      } else {
#line 302
        nn = nn;
      }
#line 304
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )nn,
                  (int const   )jb, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )n);
#line 307
      if (curr != 0) {
#line 324
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 328
        HPL_dlatcpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )n,
                    Aptr, (int const   )lda);
      } else {
#line 347
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, Aptr, (int const   )lda);
      }
#line 352
      Uptr = (Uptr + nn) + 0;
#line 353
      Aptr = (Aptr + 0) + nn * lda;
#line 353
      nq0 += nn;
#line 355
      HPL_bcast(PBCST, & test);
    }
#line 360
    nn = n - nq0;
#line 360
    if (nn > 0) {
#line 362
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )122,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )nn,
                  (int const   )jb, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )n);
#line 365
      if (curr != 0) {
#line 382
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 386
        HPL_dlatcpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )n,
                    Aptr, (int const   )lda);
      } else {
#line 405
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, Aptr, (int const   )lda);
      }
    }
  }
#line 431
  PANEL->A = (PANEL->A + 0) + n * lda;
#line 431
  PANEL->nq -= n;
#line 431
  PANEL->jj += n;
#line 436
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 436
    *IFLAG = test;
  }
#line 443
  return;
}
}
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 297 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateTN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 110 "../HPL_pdupdateTN.c"
static int tswap___1  =    0;
#line 111 "../HPL_pdupdateTN.c"
static HPL_T_SWAP fswap___1  =    (HPL_T_SWAP )499;
#line 53 "../HPL_pdupdateTN.c"
void HPL_pdupdateTN(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;

  {
#line 119
  nb = PANEL->nb;
#line 119
  jb = PANEL->jb;
#line 119
  n = PANEL->nq;
#line 119
  lda = PANEL->lda;
#line 120
  if (NN >= 0) {
#line 120
    if (NN < (int const   )n) {
#line 120
      n = (int )NN;
    } else {
#line 120
      n = n;
    }
  }
#line 124
  if (n <= 0) {
#line 124
    goto _L;
  } else
#line 124
  if (jb <= 0) {
    _L: 
#line 126
    if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 128
      while (1) {
#line 128
        HPL_bcast(PBCST, IFLAG);
#line 128
        if (! (*IFLAG != 1)) {
#line 128
          break;
        }
      }
    }
#line 134
    return;
  }
#line 139
  HPL_bcast(PBCST, & test);
#line 143
  if ((PANEL->grid)->nprow == 1) {
#line 145
    Aptr = PANEL->A;
#line 145
    L2ptr = PANEL->L2;
#line 145
    L1ptr = PANEL->L1;
#line 146
    ldl2 = PANEL->ldl2;
#line 146
    dpiv = PANEL->DPIV;
#line 146
    ipiv = PANEL->IWORK;
#line 147
    mp = PANEL->mp - jb;
#line 147
    iroff = PANEL->ii;
#line 147
    nq0 = 0;
#line 164
    i = 0;
#line 164
    while (i < jb) {
#line 164
      *(ipiv + i) = (int )*(dpiv + i) - iroff;
#line 164
      i ++;
    }
#line 170
    while (test == 2) {
#line 172
      nn = n - nq0;
#line 172
      if (nb < nn) {
#line 172
        nn = nb;
      } else {
#line 172
        nn = nn;
      }
#line 181
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 183
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 200
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 204
      Aptr = (Aptr + 0) + nn * lda;
#line 204
      nq0 += nn;
#line 206
      HPL_bcast(PBCST, & test);
    }
#line 211
    nn = n - nq0;
#line 211
    if (nn > 0) {
#line 218
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 220
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 237
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
    }
  } else {
#line 264
    if ((unsigned int )fswap___1 == 499U) {
#line 265
      fswap___1 = (PANEL->algo)->fswap;
#line 265
      tswap___1 = (PANEL->algo)->fsthr;
    }
#line 267
    if ((unsigned int )fswap___1 == 452U) {
#line 269
      HPL_pdlaswp01N(PBCST, & test, PANEL, (int const   )n);
    } else
#line 267
    if ((unsigned int )fswap___1 == 453U) {
#line 267
      if (n > tswap___1) {
#line 269
        HPL_pdlaswp01N(PBCST, & test, PANEL, (int const   )n);
      } else {
#line 271
        HPL_pdlaswp00N(PBCST, & test, PANEL, (int const   )n);
      }
    } else {
#line 271
      HPL_pdlaswp00N(PBCST, & test, PANEL, (int const   )n);
    }
#line 275
    nq0 = 0;
#line 275
    if ((PANEL->grid)->myrow == PANEL->prow) {
#line 275
      curr = 1;
    } else {
#line 275
      curr = 0;
    }
#line 276
    Aptr = PANEL->A;
#line 276
    L2ptr = PANEL->L2;
#line 276
    L1ptr = PANEL->L1;
#line 277
    Uptr = PANEL->U;
#line 277
    ldl2 = PANEL->ldl2;
#line 278
    if (curr != 0) {
#line 278
      tmp = jb;
    } else {
#line 278
      tmp = 0;
    }
#line 278
    mp = PANEL->mp - tmp;
#line 300
    while (test == 2) {
#line 302
      nn = n - nq0;
#line 302
      if (nb < nn) {
#line 302
        nn = nb;
      } else {
#line 302
        nn = nn;
      }
#line 304
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )jb);
#line 307
      if (curr != 0) {
#line 324
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 328
        HPL_dlacpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )jb,
                   Aptr, (int const   )lda);
      } else {
#line 347
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, Aptr, (int const   )lda);
      }
#line 352
      Uptr = (Uptr + 0) + nn * jb;
#line 353
      Aptr = (Aptr + 0) + nn * lda;
#line 353
      nq0 += nn;
#line 355
      HPL_bcast(PBCST, & test);
    }
#line 360
    nn = n - nq0;
#line 360
    if (nn > 0) {
#line 362
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )jb);
#line 365
      if (curr != 0) {
#line 382
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 386
        HPL_dlacpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )jb,
                   Aptr, (int const   )lda);
      } else {
#line 405
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )jb, (double const   )1.0, Aptr, (int const   )lda);
      }
    }
  }
#line 431
  PANEL->A = (PANEL->A + 0) + n * lda;
#line 431
  PANEL->nq -= n;
#line 431
  PANEL->jj += n;
#line 436
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 436
    *IFLAG = test;
  }
#line 443
  return;
}
}
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 304 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdupdateTT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) ;
#line 110 "../HPL_pdupdateTT.c"
static int tswap___2  =    0;
#line 111 "../HPL_pdupdateTT.c"
static HPL_T_SWAP fswap___2  =    (HPL_T_SWAP )499;
#line 53 "../HPL_pdupdateTT.c"
void HPL_pdupdateTT(HPL_T_panel *PBCST , int *IFLAG , HPL_T_panel *PANEL , int const   NN ) 
{ 
  double *Aptr ;
  double *L1ptr ;
  double *L2ptr ;
  double *Uptr ;
  double *dpiv ;
  int *ipiv ;
  int curr ;
  int i ;
  int iroff ;
  int jb ;
  int lda ;
  int ldl2 ;
  int mp ;
  int n ;
  int nb ;
  int nq0 ;
  int nn ;
  int test ;
  int tmp ;

  {
#line 119
  nb = PANEL->nb;
#line 119
  jb = PANEL->jb;
#line 119
  n = PANEL->nq;
#line 119
  lda = PANEL->lda;
#line 120
  if (NN >= 0) {
#line 120
    if (NN < (int const   )n) {
#line 120
      n = (int )NN;
    } else {
#line 120
      n = n;
    }
  }
#line 124
  if (n <= 0) {
#line 124
    goto _L;
  } else
#line 124
  if (jb <= 0) {
    _L: 
#line 126
    if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 128
      while (1) {
#line 128
        HPL_bcast(PBCST, IFLAG);
#line 128
        if (! (*IFLAG != 1)) {
#line 128
          break;
        }
      }
    }
#line 134
    return;
  }
#line 139
  HPL_bcast(PBCST, & test);
#line 143
  if ((PANEL->grid)->nprow == 1) {
#line 145
    Aptr = PANEL->A;
#line 145
    L2ptr = PANEL->L2;
#line 145
    L1ptr = PANEL->L1;
#line 146
    ldl2 = PANEL->ldl2;
#line 146
    dpiv = PANEL->DPIV;
#line 146
    ipiv = PANEL->IWORK;
#line 147
    mp = PANEL->mp - jb;
#line 147
    iroff = PANEL->ii;
#line 147
    nq0 = 0;
#line 164
    i = 0;
#line 164
    while (i < jb) {
#line 164
      *(ipiv + i) = (int )*(dpiv + i) - iroff;
#line 164
      i ++;
    }
#line 170
    while (test == 2) {
#line 172
      nn = n - nq0;
#line 172
      if (nb < nn) {
#line 172
        nn = nb;
      } else {
#line 172
        nn = nn;
      }
#line 181
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 183
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 200
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 204
      Aptr = (Aptr + 0) + nn * lda;
#line 204
      nq0 += nn;
#line 206
      HPL_bcast(PBCST, & test);
    }
#line 211
    nn = n - nq0;
#line 211
    if (nn > 0) {
#line 218
      HPL_dlaswp00N((int const   )jb, (int const   )nn, Aptr, (int const   )lda, (int const   *)ipiv);
#line 220
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )141, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )112, (enum HPL_DIAG  const  )132, (int const   )jb,
                  (int const   )nn, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Aptr, (int const   )lda);
#line 237
      cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )111,
                  (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                  (double const   *)L2ptr, (int const   )ldl2, (double const   *)Aptr,
                  (int const   )lda, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
    }
  } else {
#line 264
    if ((unsigned int )fswap___2 == 499U) {
#line 265
      fswap___2 = (PANEL->algo)->fswap;
#line 265
      tswap___2 = (PANEL->algo)->fsthr;
    }
#line 267
    if ((unsigned int )fswap___2 == 452U) {
#line 269
      HPL_pdlaswp01T(PBCST, & test, PANEL, (int const   )n);
    } else
#line 267
    if ((unsigned int )fswap___2 == 453U) {
#line 267
      if (n > tswap___2) {
#line 269
        HPL_pdlaswp01T(PBCST, & test, PANEL, (int const   )n);
      } else {
#line 271
        HPL_pdlaswp00T(PBCST, & test, PANEL, (int const   )n);
      }
    } else {
#line 271
      HPL_pdlaswp00T(PBCST, & test, PANEL, (int const   )n);
    }
#line 275
    nq0 = 0;
#line 275
    if ((PANEL->grid)->myrow == PANEL->prow) {
#line 275
      curr = 1;
    } else {
#line 275
      curr = 0;
    }
#line 276
    Aptr = PANEL->A;
#line 276
    L2ptr = PANEL->L2;
#line 276
    L1ptr = PANEL->L1;
#line 277
    Uptr = PANEL->U;
#line 277
    ldl2 = PANEL->ldl2;
#line 278
    if (curr != 0) {
#line 278
      tmp = jb;
    } else {
#line 278
      tmp = 0;
    }
#line 278
    mp = PANEL->mp - tmp;
#line 300
    while (test == 2) {
#line 302
      nn = n - nq0;
#line 302
      if (nb < nn) {
#line 302
        nn = nb;
      } else {
#line 302
        nn = nn;
      }
#line 304
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )nn,
                  (int const   )jb, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )n);
#line 307
      if (curr != 0) {
#line 324
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 328
        HPL_dlatcpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )n,
                    Aptr, (int const   )lda);
      } else {
#line 347
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, Aptr, (int const   )lda);
      }
#line 352
      Uptr = (Uptr + nn) + 0;
#line 353
      Aptr = (Aptr + 0) + nn * lda;
#line 353
      nq0 += nn;
#line 355
      HPL_bcast(PBCST, & test);
    }
#line 360
    nn = n - nq0;
#line 360
    if (nn > 0) {
#line 362
      cblas_dtrsm((enum HPL_ORDER  const  )102, (enum HPL_SIDE  const  )142, (enum HPL_UPLO  const  )121,
                  (enum HPL_TRANS  const  )111, (enum HPL_DIAG  const  )132, (int const   )nn,
                  (int const   )jb, (double const   )1.0, (double const   *)L1ptr,
                  (int const   )jb, Uptr, (int const   )n);
#line 365
      if (curr != 0) {
#line 382
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, (Aptr + jb) + 0, (int const   )lda);
#line 386
        HPL_dlatcpy((int const   )jb, (int const   )nn, (double const   *)Uptr, (int const   )n,
                    Aptr, (int const   )lda);
      } else {
#line 405
        cblas_dgemm((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (enum HPL_TRANS  const  )112,
                    (int const   )mp, (int const   )nn, (int const   )jb, (double const   )(- 1.0),
                    (double const   *)L2ptr, (int const   )ldl2, (double const   *)Uptr,
                    (int const   )n, (double const   )1.0, Aptr, (int const   )lda);
      }
    }
  }
#line 431
  PANEL->A = (PANEL->A + 0) + n * lda;
#line 431
  PANEL->nq -= n;
#line 431
  PANEL->jj += n;
#line 436
  if ((unsigned long )PBCST != (unsigned long )((void *)0)) {
#line 436
    *IFLAG = test;
  }
#line 443
  return;
}
}
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 337 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdtrsv(HPL_T_grid *GRID , HPL_T_pmat *AMAT ) ;
#line 53 "../HPL_pdtrsv.c"
void HPL_pdtrsv(HPL_T_grid *GRID , HPL_T_pmat *AMAT ) 
{ 
  MPI_Comm Ccomm ;
  MPI_Comm Rcomm ;
  double *A ;
  double *Aprev ;
  double *Aptr ;
  double *XC ;
  double *XR ;
  double *Xd ;
  double *Xdprev ;
  double *W ;
  int Alcol ;
  int Alrow ;
  int Anpprev ;
  int Anp ;
  int Anq ;
  int Bcol ;
  int Cmsgid ;
  int GridIsNotPx1 ;
  int GridIsNot1xQ ;
  int Rmsgid ;
  int Wfr ;
  int colprev ;
  int kb ;
  int kbprev ;
  int lda ;
  int mycol ;
  int myrow ;
  int n ;
  int n1 ;
  int n1p ;
  int n1pprev ;
  int nb ;
  int npcol ;
  int nprow ;
  int rowprev ;
  int tmp1 ;
  int tmp2 ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;
  int tmp ;
  void *tmp___0 ;
  int inb_____1 ;
  int mydist_____1 ;
  int n_____1 ;
  int nblk_____1 ;
  int quot_____1 ;
  int src_____1 ;
  int tmp___1 ;
  int inb_____2 ;
  int mydist_____2 ;
  int n_____2 ;
  int nblk_____2 ;
  int quot_____2 ;
  int src_____2 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int inb_____3 ;
  int mydist_____3 ;
  int n_____3 ;
  int nblk_____3 ;
  int quot_____3 ;
  int src_____3 ;
  int tmp___7 ;

  {
#line 110
  A = (double *)((void *)0);
#line 110
  Aprev = (double *)((void *)0);
#line 110
  XC = (double *)((void *)0);
#line 110
  XR = (double *)((void *)0);
#line 110
  Xd = (double *)((void *)0);
#line 110
  Xdprev = (double *)((void *)0);
#line 110
  W = (double *)((void *)0);
#line 113
  Wfr = 0;
#line 113
  n1pprev = 0;
#line 124
  n = AMAT->n;
#line 124
  if (n <= 0) {
#line 124
    return;
  }
#line 125
  nb = AMAT->nb;
#line 125
  lda = AMAT->ld;
#line 125
  A = AMAT->A;
#line 125
  XR = AMAT->X;
#line 127
  HPL_grid_info((HPL_T_grid const   *)GRID, & nprow, & npcol, & myrow, & mycol);
#line 128
  Rcomm = GRID->row_comm;
#line 128
  Rmsgid = 3001;
#line 129
  Ccomm = GRID->col_comm;
#line 129
  Cmsgid = 3002;
#line 130
  GridIsNot1xQ = nprow > 1;
#line 130
  GridIsNotPx1 = npcol > 1;
#line 134
  if (nprow > 1) {
#line 134
    inb__ = nb;
#line 134
    if (inb__ <= 0) {
#line 134
      nblk__ = - inb__ / nb + 1;
#line 134
      src__ = nblk__;
#line 134
      src__ -= (src__ / nprow) * nprow;
#line 134
      inb__ += nblk__ * nb;
#line 134
      n__ = n - inb__;
#line 134
      if (n__ <= 0) {
#line 134
        if (myrow == src__) {
#line 134
          Anp = n;
        } else {
#line 134
          Anp = 0;
        }
      } else {
#line 134
        mydist__ = myrow - src__;
#line 134
        if (mydist__ < 0) {
#line 134
          mydist__ += nprow;
        }
#line 134
        nblk__ = n__ / nb + 1;
#line 134
        quot__ = nblk__ / nprow;
#line 134
        mydist__ -= nblk__ - quot__ * nprow;
#line 134
        if (mydist__ < 0) {
#line 134
          if (myrow != src__) {
#line 134
            Anp = nb + nb * quot__;
          } else {
#line 134
            Anp = inb__ + nb * quot__;
          }
        } else
#line 134
        if (mydist__ > 0) {
#line 134
          Anp = nb * quot__;
        } else
#line 134
        if (myrow != src__) {
#line 134
          Anp = (n__ + nb) + nb * (quot__ - nblk__);
        } else {
#line 134
          Anp = n + nb * (quot__ - nblk__);
        }
      }
    } else {
#line 134
      n__ = n - inb__;
#line 134
      if (n__ <= 0) {
#line 134
        if (myrow == 0) {
#line 134
          Anp = n;
        } else {
#line 134
          Anp = 0;
        }
      } else {
#line 134
        mydist__ = myrow;
#line 134
        if (mydist__ < 0) {
#line 134
          mydist__ += nprow;
        }
#line 134
        nblk__ = n__ / nb + 1;
#line 134
        quot__ = nblk__ / nprow;
#line 134
        mydist__ -= nblk__ - quot__ * nprow;
#line 134
        if (mydist__ < 0) {
#line 134
          if (myrow != 0) {
#line 134
            Anp = nb + nb * quot__;
          } else {
#line 134
            Anp = inb__ + nb * quot__;
          }
        } else
#line 134
        if (mydist__ > 0) {
#line 134
          Anp = nb * quot__;
        } else
#line 134
        if (myrow != 0) {
#line 134
          Anp = (n__ + nb) + nb * (quot__ - nblk__);
        } else {
#line 134
          Anp = n + nb * (quot__ - nblk__);
        }
      }
    }
  } else {
#line 134
    Anp = n;
  }
#line 135
  if (npcol > 1) {
#line 135
    inb_____0 = nb;
#line 135
    if (inb_____0 <= 0) {
#line 135
      nblk_____0 = - inb_____0 / nb + 1;
#line 135
      src_____0 = nblk_____0;
#line 135
      src_____0 -= (src_____0 / npcol) * npcol;
#line 135
      inb_____0 += nblk_____0 * nb;
#line 135
      n_____0 = n - inb_____0;
#line 135
      if (n_____0 <= 0) {
#line 135
        if (mycol == src_____0) {
#line 135
          Anq = n;
        } else {
#line 135
          Anq = 0;
        }
      } else {
#line 135
        mydist_____0 = mycol - src_____0;
#line 135
        if (mydist_____0 < 0) {
#line 135
          mydist_____0 += npcol;
        }
#line 135
        nblk_____0 = n_____0 / nb + 1;
#line 135
        quot_____0 = nblk_____0 / npcol;
#line 135
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 135
        if (mydist_____0 < 0) {
#line 135
          if (mycol != src_____0) {
#line 135
            Anq = nb + nb * quot_____0;
          } else {
#line 135
            Anq = inb_____0 + nb * quot_____0;
          }
        } else
#line 135
        if (mydist_____0 > 0) {
#line 135
          Anq = nb * quot_____0;
        } else
#line 135
        if (mycol != src_____0) {
#line 135
          Anq = (n_____0 + nb) + nb * (quot_____0 - nblk_____0);
        } else {
#line 135
          Anq = n + nb * (quot_____0 - nblk_____0);
        }
      }
    } else {
#line 135
      n_____0 = n - inb_____0;
#line 135
      if (n_____0 <= 0) {
#line 135
        if (mycol == 0) {
#line 135
          Anq = n;
        } else {
#line 135
          Anq = 0;
        }
      } else {
#line 135
        mydist_____0 = mycol;
#line 135
        if (mydist_____0 < 0) {
#line 135
          mydist_____0 += npcol;
        }
#line 135
        nblk_____0 = n_____0 / nb + 1;
#line 135
        quot_____0 = nblk_____0 / npcol;
#line 135
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 135
        if (mydist_____0 < 0) {
#line 135
          if (mycol != 0) {
#line 135
            Anq = nb + nb * quot_____0;
          } else {
#line 135
            Anq = inb_____0 + nb * quot_____0;
          }
        } else
#line 135
        if (mydist_____0 > 0) {
#line 135
          Anq = nb * quot_____0;
        } else
#line 135
        if (mycol != 0) {
#line 135
          Anq = (n_____0 + nb) + nb * (quot_____0 - nblk_____0);
        } else {
#line 135
          Anq = n + nb * (quot_____0 - nblk_____0);
        }
      }
    }
  } else {
#line 135
    Anq = n;
  }
#line 137
  tmp1 = (n - 1) / nb;
#line 138
  Alrow = tmp1 - (tmp1 / nprow) * nprow;
#line 139
  Alcol = tmp1 - (tmp1 / npcol) * npcol;
#line 140
  kb = n - tmp1 * nb;
#line 142
  Aptr = A;
#line 142
  XC = (Aptr + 0) + Anq * lda;
#line 143
  if (n >= nb) {
#line 143
    if (npcol > 1) {
#line 143
      Bcol = 1 + (n - nb) / nb;
#line 143
      Bcol -= (Bcol / npcol) * npcol;
    } else {
#line 143
      Bcol = 0;
    }
  } else {
#line 143
    Bcol = 0;
  }
#line 145
  if (Anp > 0) {
#line 145
    if (Alcol != Bcol) {
#line 147
      if (mycol == Bcol) {
#line 148
        HPL_send(XC, Anp, Alcol, Rmsgid, Rcomm);
      } else
#line 149
      if (mycol == Alcol) {
#line 150
        HPL_recv(XC, Anp, Bcol, Rmsgid, Rcomm);
      }
    }
  }
#line 152
  if (Rmsgid + 2 > 4000) {
#line 152
    Rmsgid = 3001;
  } else {
#line 152
    Rmsgid += 2;
  }
#line 154
  if (mycol != Alcol) {
#line 155
    tmp1 = 0;
#line 155
    while (tmp1 < Anp) {
#line 155
      *(XC + tmp1) = 0.0;
#line 155
      tmp1 ++;
    }
  }
#line 159
  n1 = (npcol - 1) * nb;
#line 159
  if (n1 > nb) {
#line 159
    n1 = n1;
  } else {
#line 159
    n1 = nb;
  }
#line 160
  if (Anp > 0) {
#line 162
    if (n1 < Anp) {
#line 162
      tmp = n1;
    } else {
#line 162
      tmp = Anp;
    }
#line 162
    tmp___0 = malloc((unsigned long )tmp * sizeof(double ));
#line 162
    W = (double *)tmp___0;
#line 163
    if ((unsigned long )W == (unsigned long )((void *)0)) {
#line 164
      HPL_pabort(164, "HPL_pdtrsv", "Memory allocation failed");
    }
#line 165
    Wfr = 1;
  }
#line 168
  Anpprev = Anp;
#line 168
  Xdprev = XR;
#line 168
  Aptr = (Aptr + 0) + Anq * lda;
#line 168
  Aprev = Aptr;
#line 169
  tmp1 = n - kb;
#line 169
  if (tmp1 < n1) {
#line 169
    tmp2 = tmp1;
  } else {
#line 169
    tmp2 = n1;
  }
#line 169
  tmp1 -= tmp2;
#line 170
  if (nprow > 1) {
#line 170
    if (0 > tmp1) {
#line 170
      tmp___1 = 0;
    } else {
#line 170
      tmp___1 = tmp1;
    }
#line 170
    inb_____1 = nb - tmp___1;
#line 170
    if (inb_____1 <= 0) {
#line 170
      nblk_____1 = - inb_____1 / nb + 1;
#line 170
      src_____1 = nblk_____1;
#line 170
      src_____1 -= (src_____1 / nprow) * nprow;
#line 170
      inb_____1 += nblk_____1 * nb;
#line 170
      n_____1 = tmp2 - inb_____1;
#line 170
      if (n_____1 <= 0) {
#line 170
        if (myrow == src_____1) {
#line 170
          n1pprev = tmp2;
        } else {
#line 170
          n1pprev = 0;
        }
      } else {
#line 170
        mydist_____1 = myrow - src_____1;
#line 170
        if (mydist_____1 < 0) {
#line 170
          mydist_____1 += nprow;
        }
#line 170
        nblk_____1 = n_____1 / nb + 1;
#line 170
        quot_____1 = nblk_____1 / nprow;
#line 170
        mydist_____1 -= nblk_____1 - quot_____1 * nprow;
#line 170
        if (mydist_____1 < 0) {
#line 170
          if (myrow != src_____1) {
#line 170
            n1pprev = nb + nb * quot_____1;
          } else {
#line 170
            n1pprev = inb_____1 + nb * quot_____1;
          }
        } else
#line 170
        if (mydist_____1 > 0) {
#line 170
          n1pprev = nb * quot_____1;
        } else
#line 170
        if (myrow != src_____1) {
#line 170
          n1pprev = (n_____1 + nb) + nb * (quot_____1 - nblk_____1);
        } else {
#line 170
          n1pprev = tmp2 + nb * (quot_____1 - nblk_____1);
        }
      }
    } else {
#line 170
      n_____1 = tmp2 - inb_____1;
#line 170
      if (n_____1 <= 0) {
#line 170
        if (myrow == 0) {
#line 170
          n1pprev = tmp2;
        } else {
#line 170
          n1pprev = 0;
        }
      } else {
#line 170
        mydist_____1 = myrow;
#line 170
        if (mydist_____1 < 0) {
#line 170
          mydist_____1 += nprow;
        }
#line 170
        nblk_____1 = n_____1 / nb + 1;
#line 170
        quot_____1 = nblk_____1 / nprow;
#line 170
        mydist_____1 -= nblk_____1 - quot_____1 * nprow;
#line 170
        if (mydist_____1 < 0) {
#line 170
          if (myrow != 0) {
#line 170
            n1pprev = nb + nb * quot_____1;
          } else {
#line 170
            n1pprev = inb_____1 + nb * quot_____1;
          }
        } else
#line 170
        if (mydist_____1 > 0) {
#line 170
          n1pprev = nb * quot_____1;
        } else
#line 170
        if (myrow != 0) {
#line 170
          n1pprev = (n_____1 + nb) + nb * (quot_____1 - nblk_____1);
        } else {
#line 170
          n1pprev = tmp2 + nb * (quot_____1 - nblk_____1);
        }
      }
    }
  } else {
#line 170
    n1pprev = tmp2;
  }
#line 172
  if (myrow == Alrow) {
#line 172
    Anp -= kb;
#line 172
    Anpprev = Anp;
  }
#line 173
  if (mycol == Alcol) {
#line 175
    Aptr -= lda * kb;
#line 175
    Aprev = Aptr;
#line 175
    Anq -= kb;
#line 175
    Xd = XR + Anq;
#line 175
    Xdprev = Xd;
#line 176
    if (myrow == Alrow) {
#line 178
      cblas_dtrsv((enum HPL_ORDER  const  )102, (enum HPL_UPLO  const  )121, (enum HPL_TRANS  const  )111,
                  (enum HPL_DIAG  const  )131, (int const   )kb, (double const   *)(Aptr + Anp),
                  (int const   )lda, XC + Anp, (int const   )1);
#line 180
      cblas_dcopy((int const   )kb, (double const   *)(XC + Anp), (int const   )1,
                  Xd, (int const   )1);
    }
  }
#line 184
  rowprev = Alrow;
#line 184
  if (Alrow != 0) {
#line 184
    Alrow --;
  } else {
#line 184
    Alrow = nprow - 1;
  }
#line 185
  colprev = Alcol;
#line 185
  if (Alcol != 0) {
#line 185
    Alcol --;
  } else {
#line 185
    Alcol = npcol - 1;
  }
#line 186
  kbprev = kb;
#line 186
  n -= kb;
#line 187
  kb = nb;
#line 187
  tmp1 = n - kb;
#line 187
  if (tmp1 < n1) {
#line 187
    tmp2 = tmp1;
  } else {
#line 187
    tmp2 = n1;
  }
#line 187
  tmp1 -= tmp2;
#line 188
  if (nprow > 1) {
#line 188
    if (0 > tmp1) {
#line 188
      tmp___2 = 0;
    } else {
#line 188
      tmp___2 = tmp1;
    }
#line 188
    inb_____2 = nb - tmp___2;
#line 188
    if (inb_____2 <= 0) {
#line 188
      nblk_____2 = - inb_____2 / nb + 1;
#line 188
      src_____2 = nblk_____2;
#line 188
      src_____2 -= (src_____2 / nprow) * nprow;
#line 188
      inb_____2 += nblk_____2 * nb;
#line 188
      n_____2 = tmp2 - inb_____2;
#line 188
      if (n_____2 <= 0) {
#line 188
        if (myrow == src_____2) {
#line 188
          n1p = tmp2;
        } else {
#line 188
          n1p = 0;
        }
      } else {
#line 188
        mydist_____2 = myrow - src_____2;
#line 188
        if (mydist_____2 < 0) {
#line 188
          mydist_____2 += nprow;
        }
#line 188
        nblk_____2 = n_____2 / nb + 1;
#line 188
        quot_____2 = nblk_____2 / nprow;
#line 188
        mydist_____2 -= nblk_____2 - quot_____2 * nprow;
#line 188
        if (mydist_____2 < 0) {
#line 188
          if (myrow != src_____2) {
#line 188
            n1p = nb + nb * quot_____2;
          } else {
#line 188
            n1p = inb_____2 + nb * quot_____2;
          }
        } else
#line 188
        if (mydist_____2 > 0) {
#line 188
          n1p = nb * quot_____2;
        } else
#line 188
        if (myrow != src_____2) {
#line 188
          n1p = (n_____2 + nb) + nb * (quot_____2 - nblk_____2);
        } else {
#line 188
          n1p = tmp2 + nb * (quot_____2 - nblk_____2);
        }
      }
    } else {
#line 188
      n_____2 = tmp2 - inb_____2;
#line 188
      if (n_____2 <= 0) {
#line 188
        if (myrow == 0) {
#line 188
          n1p = tmp2;
        } else {
#line 188
          n1p = 0;
        }
      } else {
#line 188
        mydist_____2 = myrow;
#line 188
        if (mydist_____2 < 0) {
#line 188
          mydist_____2 += nprow;
        }
#line 188
        nblk_____2 = n_____2 / nb + 1;
#line 188
        quot_____2 = nblk_____2 / nprow;
#line 188
        mydist_____2 -= nblk_____2 - quot_____2 * nprow;
#line 188
        if (mydist_____2 < 0) {
#line 188
          if (myrow != 0) {
#line 188
            n1p = nb + nb * quot_____2;
          } else {
#line 188
            n1p = inb_____2 + nb * quot_____2;
          }
        } else
#line 188
        if (mydist_____2 > 0) {
#line 188
          n1p = nb * quot_____2;
        } else
#line 188
        if (myrow != 0) {
#line 188
          n1p = (n_____2 + nb) + nb * (quot_____2 - nblk_____2);
        } else {
#line 188
          n1p = tmp2 + nb * (quot_____2 - nblk_____2);
        }
      }
    }
  } else {
#line 188
    n1p = tmp2;
  }
#line 192
  while (n > 0) {
#line 194
    if (mycol == Alcol) {
#line 194
      Aptr -= lda * kb;
#line 194
      Anq -= kb;
#line 194
      Xd = XR + Anq;
    }
#line 195
    if (myrow == Alrow) {
#line 195
      Anp -= kb;
    }
#line 201
    if (mycol == colprev) {
#line 206
      if (myrow == rowprev) {
#line 208
        if (GridIsNot1xQ) {
#line 209
          if (myrow != 0) {
#line 209
            tmp___3 = myrow - 1;
          } else {
#line 209
            tmp___3 = nprow - 1;
          }
#line 209
          HPL_send(Xdprev, kbprev, tmp___3, Cmsgid, Ccomm);
        }
      } else {
#line 214
        if (myrow != nprow - 1) {
#line 214
          tmp___4 = myrow + 1;
        } else {
#line 214
          tmp___4 = 0;
        }
#line 214
        HPL_recv(Xdprev, kbprev, tmp___4, Cmsgid, Ccomm);
      }
#line 221
      if (n1pprev > 0) {
#line 223
        tmp1 = Anpprev - n1pprev;
#line 224
        cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )n1pprev,
                    (int const   )kbprev, (double const   )(- 1.0), (double const   *)(Aprev + tmp1),
                    (int const   )lda, (double const   *)Xdprev, (int const   )1,
                    (double const   )1.0, XC + tmp1, (int const   )1);
#line 227
        if (GridIsNotPx1) {
#line 228
          HPL_send(XC + tmp1, n1pprev, Alcol, Rmsgid, Rcomm);
        }
      }
#line 234
      if (myrow != rowprev) {
#line 234
        if (rowprev != nprow - 1) {
#line 234
          tmp___6 = rowprev + 1;
        } else {
#line 234
          tmp___6 = 0;
        }
#line 234
        if (myrow != tmp___6) {
#line 236
          if (myrow != 0) {
#line 236
            tmp___5 = myrow - 1;
          } else {
#line 236
            tmp___5 = nprow - 1;
          }
#line 236
          HPL_send(Xdprev, kbprev, tmp___5, Cmsgid, Ccomm);
        }
      }
    } else
#line 239
    if (mycol == Alcol) {
#line 245
      if (n1pprev > 0) {
#line 247
        HPL_recv(W, n1pprev, colprev, Rmsgid, Rcomm);
#line 248
        cblas_daxpy((int const   )n1pprev, (double const   )1.0, (double const   *)W,
                    (int const   )1, (XC + Anpprev) - n1pprev, (int const   )1);
      }
    }
#line 254
    if (mycol == Alcol) {
#line 254
      if (myrow == Alrow) {
#line 256
        cblas_dtrsv((enum HPL_ORDER  const  )102, (enum HPL_UPLO  const  )121, (enum HPL_TRANS  const  )111,
                    (enum HPL_DIAG  const  )131, (int const   )kb, (double const   *)(Aptr + Anp),
                    (int const   )lda, XC + Anp, (int const   )1);
#line 258
        cblas_dcopy((int const   )kb, (double const   *)(XC + Anp), (int const   )1,
                    XR + Anq, (int const   )1);
      }
    }
#line 263
    if (mycol == colprev) {
#line 263
      tmp1 = Anpprev - n1pprev;
#line 263
      if (tmp1 > 0) {
#line 264
        cblas_dgemv((enum HPL_ORDER  const  )102, (enum HPL_TRANS  const  )111, (int const   )tmp1,
                    (int const   )kbprev, (double const   )(- 1.0), (double const   *)Aprev,
                    (int const   )lda, (double const   *)Xdprev, (int const   )1,
                    (double const   )1.0, XC, (int const   )1);
      }
    }
#line 269
    if (mycol == Alcol) {
#line 269
      Xdprev = Xd;
#line 269
      Aprev = Aptr;
    }
#line 270
    if (myrow == Alrow) {
#line 270
      Anpprev -= kb;
    }
#line 271
    rowprev = Alrow;
#line 271
    colprev = Alcol;
#line 272
    n1pprev = n1p;
#line 272
    kbprev = kb;
#line 272
    n -= kb;
#line 273
    if (Alrow != 0) {
#line 273
      Alrow --;
    } else {
#line 273
      Alrow = nprow - 1;
    }
#line 273
    if (Alcol != 0) {
#line 273
      Alcol --;
    } else {
#line 273
      Alcol = npcol - 1;
    }
#line 274
    kb = nb;
#line 274
    tmp1 = n - kb;
#line 274
    if (tmp1 < n1) {
#line 274
      tmp2 = tmp1;
    } else {
#line 274
      tmp2 = n1;
    }
#line 274
    tmp1 -= tmp2;
#line 275
    if (nprow > 1) {
#line 275
      if (0 > tmp1) {
#line 275
        tmp___7 = 0;
      } else {
#line 275
        tmp___7 = tmp1;
      }
#line 275
      inb_____3 = nb - tmp___7;
#line 275
      if (inb_____3 <= 0) {
#line 275
        nblk_____3 = - inb_____3 / nb + 1;
#line 275
        src_____3 = nblk_____3;
#line 275
        src_____3 -= (src_____3 / nprow) * nprow;
#line 275
        inb_____3 += nblk_____3 * nb;
#line 275
        n_____3 = tmp2 - inb_____3;
#line 275
        if (n_____3 <= 0) {
#line 275
          if (myrow == src_____3) {
#line 275
            n1p = tmp2;
          } else {
#line 275
            n1p = 0;
          }
        } else {
#line 275
          mydist_____3 = myrow - src_____3;
#line 275
          if (mydist_____3 < 0) {
#line 275
            mydist_____3 += nprow;
          }
#line 275
          nblk_____3 = n_____3 / nb + 1;
#line 275
          quot_____3 = nblk_____3 / nprow;
#line 275
          mydist_____3 -= nblk_____3 - quot_____3 * nprow;
#line 275
          if (mydist_____3 < 0) {
#line 275
            if (myrow != src_____3) {
#line 275
              n1p = nb + nb * quot_____3;
            } else {
#line 275
              n1p = inb_____3 + nb * quot_____3;
            }
          } else
#line 275
          if (mydist_____3 > 0) {
#line 275
            n1p = nb * quot_____3;
          } else
#line 275
          if (myrow != src_____3) {
#line 275
            n1p = (n_____3 + nb) + nb * (quot_____3 - nblk_____3);
          } else {
#line 275
            n1p = tmp2 + nb * (quot_____3 - nblk_____3);
          }
        }
      } else {
#line 275
        n_____3 = tmp2 - inb_____3;
#line 275
        if (n_____3 <= 0) {
#line 275
          if (myrow == 0) {
#line 275
            n1p = tmp2;
          } else {
#line 275
            n1p = 0;
          }
        } else {
#line 275
          mydist_____3 = myrow;
#line 275
          if (mydist_____3 < 0) {
#line 275
            mydist_____3 += nprow;
          }
#line 275
          nblk_____3 = n_____3 / nb + 1;
#line 275
          quot_____3 = nblk_____3 / nprow;
#line 275
          mydist_____3 -= nblk_____3 - quot_____3 * nprow;
#line 275
          if (mydist_____3 < 0) {
#line 275
            if (myrow != 0) {
#line 275
              n1p = nb + nb * quot_____3;
            } else {
#line 275
              n1p = inb_____3 + nb * quot_____3;
            }
          } else
#line 275
          if (mydist_____3 > 0) {
#line 275
            n1p = nb * quot_____3;
          } else
#line 275
          if (myrow != 0) {
#line 275
            n1p = (n_____3 + nb) + nb * (quot_____3 - nblk_____3);
          } else {
#line 275
            n1p = tmp2 + nb * (quot_____3 - nblk_____3);
          }
        }
      }
    } else {
#line 275
      n1p = tmp2;
    }
#line 277
    if (Rmsgid + 2 > 4000) {
#line 277
      Rmsgid = 3001;
    } else {
#line 277
      Rmsgid += 2;
    }
#line 279
    if (Cmsgid + 2 > 4000) {
#line 279
      Cmsgid = 3002;
    } else {
#line 279
      Cmsgid += 2;
    }
  }
#line 285
  if (mycol == colprev) {
#line 286
    HPL_broadcast((void *)XR, (int const   )kbprev, (HPL_T_TYPE const   )101, (int const   )rowprev,
                  Ccomm);
  }
#line 289
  if (Wfr) {
#line 289
    free((void *)W);
  }
#line 296
  return;
}
}
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 312 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesv0(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
#line 53 "../HPL_pdgesv0.c"
void HPL_pdgesv0(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) 
{ 
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const    ) ;
  int N ;
  int j ;
  int jb ;
  int n ;
  int nb ;
  int tag ;
  int test ;
  void *tmp ;
  int tmp___0 ;

  {
#line 97
  panel = (HPL_T_panel **)((void *)0);
#line 99
  tag = 2001;
#line 99
  test = 2;
#line 104
  N = A->n;
#line 104
  if (N <= 0) {
#line 104
    return;
  }
#line 106
  HPL_pdupdate = ALGO->upfun;
#line 106
  nb = A->nb;
#line 110
  tmp = malloc(sizeof(HPL_T_panel *));
#line 110
  panel = (HPL_T_panel **)tmp;
#line 111
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
#line 112
    HPL_pabort(112, "HPL_pdgesv0", "Memory allocation failed");
  }
#line 114
  if (N < nb) {
#line 114
    tmp___0 = N;
  } else {
#line 114
    tmp___0 = nb;
  }
#line 114
  HPL_pdpanel_new(GRID, ALGO, (int const   )N, (int const   )(N + 1), (int const   )tmp___0,
                  A, (int const   )0, (int const   )0, (int const   )tag, panel + 0);
#line 119
  j = 0;
#line 119
  while (j < N) {
#line 121
    n = N - j;
#line 121
    if (n < nb) {
#line 121
      jb = n;
    } else {
#line 121
      jb = nb;
    }
#line 125
    HPL_pdpanel_free(*(panel + 0));
#line 126
    HPL_pdpanel_init(GRID, ALGO, (int const   )n, (int const   )(n + 1), (int const   )jb,
                     A, (int const   )j, (int const   )j, (int const   )tag, *(panel + 0));
#line 130
    HPL_pdfact(*(panel + 0));
#line 131
    HPL_binit(*(panel + 0));
#line 132
    while (1) {
#line 133
      HPL_bcast(*(panel + 0), & test);
#line 132
      if (! (test != 1)) {
#line 132
        break;
      }
    }
#line 135
    HPL_bwait(*(panel + 0));
#line 136
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + 0),
                    (int const   )-1);
#line 140
    if (tag + 1 > 3000) {
#line 140
      tag = 2001;
    } else {
#line 140
      tag ++;
    }
#line 119
    j += nb;
  }
#line 145
  HPL_pdpanel_disp(panel + 0);
#line 147
  if (panel) {
#line 147
    free((void *)panel);
  }
#line 151
  return;
}
}
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 318 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesvK1(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
#line 53 "../HPL_pdgesvK1.c"
void HPL_pdgesvK1(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) 
{ 
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const    ) ;
  int N ;
  int depth ;
  int icurcol ;
  int j ;
  int jb ;
  int jj ;
  int jstart ;
  int k ;
  int mycol ;
  int n ;
  int nb ;
  int nn ;
  int npcol ;
  int nq ;
  int tag ;
  int test ;
  void *tmp ;

  {
#line 97
  panel = (HPL_T_panel **)((void *)0);
#line 99
  icurcol = 0;
#line 99
  jj = 0;
#line 99
  tag = 2001;
#line 99
  test = 2;
#line 105
  mycol = GRID->mycol;
#line 105
  npcol = GRID->npcol;
#line 106
  depth = ALGO->depth;
#line 106
  HPL_pdupdate = ALGO->upfun;
#line 107
  N = A->n;
#line 107
  nb = A->nb;
#line 109
  if (N <= 0) {
#line 109
    return;
  }
#line 113
  tmp = malloc((unsigned long )(depth + 1) * sizeof(HPL_T_panel *));
#line 113
  panel = (HPL_T_panel **)tmp;
#line 114
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
#line 115
    HPL_pabort(115, "HPL_pdgesvK1", "Memory allocation failed");
  }
#line 119
  nq = HPL_numroc((int const   )(N + 1), (int const   )nb, (int const   )nb, (int const   )mycol,
                  (int const   )0, (int const   )npcol);
#line 119
  nn = N;
#line 119
  jstart = 0;
#line 121
  k = 0;
#line 121
  while (k < depth) {
#line 123
    if (nn < nb) {
#line 123
      jb = nn;
    } else {
#line 123
      jb = nb;
    }
#line 124
    HPL_pdpanel_new(GRID, ALGO, (int const   )nn, (int const   )(nn + 1), (int const   )jb,
                    A, (int const   )jstart, (int const   )jstart, (int const   )tag,
                    panel + k);
#line 126
    nn -= jb;
#line 126
    jstart += jb;
#line 127
    if (mycol == icurcol) {
#line 127
      jj += jb;
#line 127
      nq -= jb;
    }
#line 128
    if (icurcol != npcol - 1) {
#line 128
      icurcol ++;
    } else {
#line 128
      icurcol = 0;
    }
#line 129
    if (tag + 1 > 3000) {
#line 129
      tag = 2001;
    } else {
#line 129
      tag ++;
    }
#line 121
    k ++;
  }
#line 134
  k = 0;
#line 134
  j = 0;
#line 134
  while (k < depth) {
#line 136
    jb = jstart - j;
#line 136
    if (jb < nb) {
#line 136
      jb = jb;
    } else {
#line 136
      jb = nb;
    }
#line 136
    j += jb;
#line 140
    HPL_pdfact(*(panel + k));
#line 141
    HPL_binit(*(panel + k));
#line 142
    while (1) {
#line 143
      HPL_bcast(*(panel + k), & test);
#line 142
      if (! (test != 1)) {
#line 142
        break;
      }
    }
#line 145
    HPL_bwait(*(panel + k));
#line 149
    if (k < depth - 1) {
#line 151
      nn = HPL_numrocI((int const   )(jstart - j), (int const   )j, (int const   )nb,
                       (int const   )nb, (int const   )mycol, (int const   )0, (int const   )npcol);
#line 152
      (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                      (int const   )nn);
    }
#line 134
    k ++;
  }
#line 158
  j = jstart;
#line 158
  while (j < N) {
#line 160
    n = N - j;
#line 160
    if (n < nb) {
#line 160
      jb = n;
    } else {
#line 160
      jb = nb;
    }
#line 165
    HPL_pdpanel_new(GRID, ALGO, (int const   )n, (int const   )(n + 1), (int const   )jb,
                    A, (int const   )j, (int const   )j, (int const   )tag, panel + depth);
#line 167
    if (mycol == icurcol) {
#line 169
      nn = HPL_numrocI((int const   )jb, (int const   )j, (int const   )nb, (int const   )nb,
                       (int const   )mycol, (int const   )0, (int const   )npcol);
#line 170
      k = 0;
#line 170
      while (k < depth) {
#line 171
        (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                        (int const   )nn);
#line 170
        k ++;
      }
#line 172
      HPL_pdfact(*(panel + depth));
    } else {
#line 174
      nn = 0;
    }
#line 176
    HPL_binit(*(panel + depth));
#line 177
    (*HPL_pdupdate)(*(panel + depth), & test, *(panel + 0), (int const   )(nq - nn));
#line 178
    HPL_bwait(*(panel + depth));
#line 184
    HPL_pdpanel_disp(panel + 0);
#line 185
    k = 0;
#line 185
    while (k < depth) {
#line 185
      *(panel + k) = *(panel + (k + 1));
#line 185
      k ++;
    }
#line 187
    if (mycol == icurcol) {
#line 187
      jj += jb;
#line 187
      nq -= jb;
    }
#line 188
    if (icurcol != npcol - 1) {
#line 188
      icurcol ++;
    } else {
#line 188
      icurcol = 0;
    }
#line 189
    if (tag + 1 > 3000) {
#line 189
      tag = 2001;
    } else {
#line 189
      tag ++;
    }
#line 158
    j += nb;
  }
#line 194
  nn = HPL_numrocI((int const   )1, (int const   )N, (int const   )nb, (int const   )nb,
                   (int const   )mycol, (int const   )0, (int const   )npcol);
#line 195
  k = 0;
#line 195
  while (k < depth) {
#line 197
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                    (int const   )nn);
#line 198
    HPL_pdpanel_disp(panel + k);
#line 195
    k ++;
  }
#line 201
  if (panel) {
#line 201
    free((void *)panel);
  }
#line 205
  return;
}
}
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 324 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesvK2(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
#line 53 "../HPL_pdgesvK2.c"
void HPL_pdgesvK2(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) 
{ 
  HPL_T_panel *p ;
  HPL_T_panel **panel ;
  void (*HPL_pdupdate)(HPL_T_panel * , int * , HPL_T_panel * , int const    ) ;
  int N ;
  int depth ;
  int icurcol ;
  int j ;
  int jb ;
  int jj ;
  int jstart ;
  int k ;
  int mycol ;
  int n ;
  int nb ;
  int nn ;
  int npcol ;
  int nq ;
  int tag ;
  int test ;
  void *tmp ;
  int tmp___0 ;

  {
#line 97
  panel = (HPL_T_panel **)((void *)0);
#line 99
  icurcol = 0;
#line 99
  jj = 0;
#line 99
  tag = 2001;
#line 99
  test = 2;
#line 105
  mycol = GRID->mycol;
#line 105
  npcol = GRID->npcol;
#line 106
  depth = ALGO->depth;
#line 106
  HPL_pdupdate = ALGO->upfun;
#line 107
  N = A->n;
#line 107
  nb = A->nb;
#line 109
  if (N <= 0) {
#line 109
    return;
  }
#line 113
  tmp = malloc((unsigned long )(depth + 1) * sizeof(HPL_T_panel *));
#line 113
  panel = (HPL_T_panel **)tmp;
#line 114
  if ((unsigned long )panel == (unsigned long )((void *)0)) {
#line 115
    HPL_pabort(115, "HPL_pdgesvK2", "Memory allocation failed");
  }
#line 119
  nq = HPL_numroc((int const   )(N + 1), (int const   )nb, (int const   )nb, (int const   )mycol,
                  (int const   )0, (int const   )npcol);
#line 119
  nn = N;
#line 119
  jstart = 0;
#line 121
  k = 0;
#line 121
  while (k < depth) {
#line 123
    if (nn < nb) {
#line 123
      jb = nn;
    } else {
#line 123
      jb = nb;
    }
#line 124
    HPL_pdpanel_new(GRID, ALGO, (int const   )nn, (int const   )(nn + 1), (int const   )jb,
                    A, (int const   )jstart, (int const   )jstart, (int const   )tag,
                    panel + k);
#line 126
    nn -= jb;
#line 126
    jstart += jb;
#line 127
    if (mycol == icurcol) {
#line 127
      jj += jb;
#line 127
      nq -= jb;
    }
#line 128
    if (icurcol != npcol - 1) {
#line 128
      icurcol ++;
    } else {
#line 128
      icurcol = 0;
    }
#line 129
    if (tag + 1 > 3000) {
#line 129
      tag = 2001;
    } else {
#line 129
      tag ++;
    }
#line 121
    k ++;
  }
#line 134
  if (nn < nb) {
#line 134
    tmp___0 = nn;
  } else {
#line 134
    tmp___0 = nb;
  }
#line 134
  HPL_pdpanel_new(GRID, ALGO, (int const   )nn, (int const   )(nn + 1), (int const   )tmp___0,
                  A, (int const   )jstart, (int const   )jstart, (int const   )tag,
                  panel + depth);
#line 136
  if (tag + 1 > 3000) {
#line 136
    tag = 2001;
  } else {
#line 136
    tag ++;
  }
#line 140
  k = 0;
#line 140
  j = 0;
#line 140
  while (k < depth) {
#line 142
    jb = jstart - j;
#line 142
    if (jb < nb) {
#line 142
      jb = jb;
    } else {
#line 142
      jb = nb;
    }
#line 142
    j += jb;
#line 146
    HPL_pdfact(*(panel + k));
#line 147
    HPL_binit(*(panel + k));
#line 148
    while (1) {
#line 149
      HPL_bcast(*(panel + k), & test);
#line 148
      if (! (test != 1)) {
#line 148
        break;
      }
    }
#line 151
    HPL_bwait(*(panel + k));
#line 155
    if (k < depth - 1) {
#line 157
      nn = HPL_numrocI((int const   )(jstart - j), (int const   )j, (int const   )nb,
                       (int const   )nb, (int const   )mycol, (int const   )0, (int const   )npcol);
#line 158
      (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                      (int const   )nn);
    }
#line 140
    k ++;
  }
#line 164
  j = jstart;
#line 164
  while (j < N) {
#line 166
    n = N - j;
#line 166
    if (n < nb) {
#line 166
      jb = n;
    } else {
#line 166
      jb = nb;
    }
#line 171
    HPL_pdpanel_free(*(panel + depth));
#line 172
    HPL_pdpanel_init(GRID, ALGO, (int const   )n, (int const   )(n + 1), (int const   )jb,
                     A, (int const   )j, (int const   )j, (int const   )tag, *(panel + depth));
#line 174
    if (mycol == icurcol) {
#line 176
      nn = HPL_numrocI((int const   )jb, (int const   )j, (int const   )nb, (int const   )nb,
                       (int const   )mycol, (int const   )0, (int const   )npcol);
#line 177
      k = 0;
#line 177
      while (k < depth) {
#line 178
        (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                        (int const   )nn);
#line 177
        k ++;
      }
#line 179
      HPL_pdfact(*(panel + depth));
    } else {
#line 181
      nn = 0;
    }
#line 183
    HPL_binit(*(panel + depth));
#line 184
    (*HPL_pdupdate)(*(panel + depth), & test, *(panel + 0), (int const   )(nq - nn));
#line 185
    HPL_bwait(*(panel + depth));
#line 192
    p = *(panel + 0);
#line 192
    k = 0;
#line 192
    while (k < depth) {
#line 192
      *(panel + k) = *(panel + (k + 1));
#line 192
      k ++;
    }
#line 193
    *(panel + depth) = p;
#line 195
    if (mycol == icurcol) {
#line 195
      jj += jb;
#line 195
      nq -= jb;
    }
#line 196
    if (icurcol != npcol - 1) {
#line 196
      icurcol ++;
    } else {
#line 196
      icurcol = 0;
    }
#line 197
    if (tag + 1 > 3000) {
#line 197
      tag = 2001;
    } else {
#line 197
      tag ++;
    }
#line 164
    j += nb;
  }
#line 202
  nn = HPL_numrocI((int const   )1, (int const   )N, (int const   )nb, (int const   )nb,
                   (int const   )mycol, (int const   )0, (int const   )npcol);
#line 203
  k = 0;
#line 203
  while (k < depth) {
#line 205
    (*HPL_pdupdate)((HPL_T_panel *)((void *)0), (int *)((void *)0), *(panel + k),
                    (int const   )nn);
#line 206
    HPL_pdpanel_disp(panel + k);
#line 203
    k ++;
  }
#line 208
  HPL_pdpanel_disp(panel + depth);
#line 210
  if (panel) {
#line 210
    free((void *)panel);
  }
#line 214
  return;
}
}
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 330 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pgesv.h"
void HPL_pdgesv(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) ;
#line 53 "../HPL_pdgesv.c"
void HPL_pdgesv(HPL_T_grid *GRID , HPL_T_palg *ALGO , HPL_T_pmat *A ) 
{ 


  {
#line 97
  if (A->n <= 0) {
#line 97
    return;
  }
#line 99
  A->info = 0;
#line 101
  if (ALGO->depth == 0) {
#line 103
    HPL_pdgesv0(GRID, ALGO, A);
  } else
#line 101
  if (GRID->npcol == 1) {
#line 103
    HPL_pdgesv0(GRID, ALGO, A);
  } else {
#line 107
    HPL_pdgesvK2(GRID, ALGO, A);
  }
#line 112
  if (A->info == 0) {
#line 112
    HPL_pdtrsv(GRID, A);
  }
#line 116
  return;
}
}
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 73 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_dmatgen(int const   M , int const   N , double *A , int const   LDA , int const   ISEED ) ;
#line 93
void HPL_xjumpm(int const   JUMPM , int *MULT , int *IADD , int *IRANN , int *IRANM ,
                int *IAM , int *ICM ) ;
#line 103
void HPL_setran(int const   OPTION , int *IRAN ) ;
#line 115
double HPL_rand(void) ;
#line 53 "../HPL_dmatgen.c"
void HPL_dmatgen(int const   M , int const   N , double *A , int const   LDA , int const   ISEED ) 
{ 
  int iadd[2] ;
  int ia1[2] ;
  int ic1[2] ;
  int iran1[2] ;
  int jseed[2] ;
  int mult[2] ;
  int i ;
  int incA ;
  int j ;

  {
#line 112
  incA = (int )(LDA - M);
#line 116
  if (M <= 0) {
#line 116
    return;
  } else
#line 116
  if (N <= 0) {
#line 116
    return;
  }
#line 120
  mult[0] = 20077;
#line 120
  mult[1] = 16838;
#line 121
  iadd[0] = 12345;
#line 121
  iadd[1] = 0;
#line 122
  jseed[0] = (int )ISEED;
#line 122
  jseed[1] = 0;
#line 124
  HPL_xjumpm((int const   )1, mult, iadd, jseed, iran1, ia1, ic1);
#line 125
  HPL_setran((int const   )0, iran1);
#line 125
  HPL_setran((int const   )1, ia1);
#line 125
  HPL_setran((int const   )2, ic1);
#line 129
  j = 0;
#line 129
  while (j < (int )N) {
#line 130
    i = 0;
#line 130
    while (i < (int )M) {
#line 130
      *A = HPL_rand();
#line 130
      A ++;
#line 130
      i ++;
    }
#line 129
    A += incA;
#line 129
    j ++;
  }
#line 134
  return;
}
}
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 87 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_ladd(int *J , int *K , int *I ) ;
#line 53 "../HPL_ladd.c"
void HPL_ladd(int *J , int *K , int *I ) 
{ 
  int itmp0 ;
  int itmp1 ;

  {
#line 97
  itmp0 = *(K + 0) + *(J + 0);
#line 111
  itmp1 = itmp0 >> 16;
#line 111
  *(I + 0) = itmp0 - (itmp1 << 16);
#line 112
  itmp0 = (itmp1 + *(K + 1)) + *(J + 1);
#line 112
  *(I + 1) = itmp0 - ((itmp0 >> 15) << 15);
#line 116
  return;
}
}
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 81 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_lmul(int *K , int *J , int *I ) ;
#line 98 "../HPL_lmul.c"
static int ipow30  =    1 << 30;
#line 53 "../HPL_lmul.c"
void HPL_lmul(int *K , int *J , int *I ) 
{ 
  int kt ;
  int lt ;

  {
#line 114
  kt = *(K + 0) * *(J + 0);
#line 114
  if (kt < 0) {
#line 114
    kt = (kt + ipow30) + ipow30;
  }
#line 115
  *(I + 0) = kt - ((kt >> 16) << 16);
#line 116
  lt = *(K + 0) * *(J + 1) + *(K + 1) * *(J + 0);
#line 117
  if (lt < 0) {
#line 117
    lt = (lt + ipow30) + ipow30;
  }
#line 118
  kt = (kt >> 16) + lt;
#line 119
  if (kt < 0) {
#line 119
    kt = (kt + ipow30) + ipow30;
  }
#line 120
  *(I + 1) = kt - ((kt >> 15) << 15);
#line 124
  return;
}
}
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 53 "../HPL_xjumpm.c"
void HPL_xjumpm(int const   JUMPM , int *MULT , int *IADD , int *IRANN , int *IRANM ,
                int *IAM , int *ICM ) 
{ 
  int j[2] ;
  int k ;

  {
#line 137
  if (JUMPM > 0) {
#line 139
    *(IAM + 0) = *(MULT + 0);
#line 139
    *(IAM + 1) = *(MULT + 1);
#line 140
    *(ICM + 0) = *(IADD + 0);
#line 140
    *(ICM + 1) = *(IADD + 1);
#line 141
    k = 1;
#line 141
    while (k <= (int )(JUMPM - 1)) {
#line 143
      HPL_lmul(IAM, MULT, j);
#line 144
      *(IAM + 0) = j[0];
#line 144
      *(IAM + 1) = j[1];
#line 145
      HPL_lmul(ICM, MULT, j);
#line 146
      HPL_ladd(IADD, j, ICM);
#line 141
      k ++;
    }
#line 148
    HPL_lmul(IRANN, IAM, j);
#line 149
    HPL_ladd(j, ICM, IRANM);
  } else {
#line 153
    *(IRANM + 0) = *(IRANN + 0);
#line 153
    *(IRANM + 1) = *(IRANN + 1);
  }
#line 158
  return;
}
}
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 108 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_matgen.h"
void HPL_jumpit(int *MULT , int *IADD , int *IRANN , int *IRANM ) ;
#line 53 "../HPL_jumpit.c"
void HPL_jumpit(int *MULT , int *IADD , int *IRANN , int *IRANM ) 
{ 
  int j[2] ;

  {
#line 108
  HPL_lmul(IRANN, MULT, j);
#line 109
  HPL_ladd(j, IADD, IRANM);
#line 110
  HPL_setran((int const   )0, IRANM);
#line 114
  return;
}
}
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 53 "../HPL_rand.c"
double HPL_rand(void) 
{ 
  int j[2] ;

  {
#line 84
  HPL_setran((int const   )3, j);
#line 88
  return (0.5 - ((double )j[0] + 65536.0 * (double )j[1]) / 2147483648.0);
}
}
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 56 "../HPL_setran.c"
static int ias[2]  ;
#line 56 "../HPL_setran.c"
static int ics[2]  ;
#line 56 "../HPL_setran.c"
static int irand[2]  ;
#line 59 "../HPL_setran.c"
void HPL_setran(int const   OPTION , int *IRAN ) 
{ 
  int j[2] ;

  {
#line 103
  if (OPTION == 3) {
#line 105
    *(IRAN + 0) = irand[0];
#line 105
    *(IRAN + 1) = irand[1];
#line 106
    HPL_lmul(irand, ias, j);
#line 107
    HPL_ladd(j, ics, irand);
  } else
#line 109
  if (OPTION == 0) {
#line 109
    irand[0] = *(IRAN + 0);
#line 109
    irand[1] = *(IRAN + 1);
  } else
#line 110
  if (OPTION == 1) {
#line 110
    ias[0] = *(IRAN + 0);
#line 110
    ias[1] = *(IRAN + 1);
  } else
#line 111
  if (OPTION == 2) {
#line 111
    ics[0] = *(IRAN + 0);
#line 111
    ics[1] = *(IRAN + 1);
  }
#line 115
  return;
}
}
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 74 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_timer.h"
double HPL_timer_cputime(void) ;
#line 75
double HPL_timer_walltime(void) ;
#line 77
void HPL_timer(int const   I ) ;
#line 78
void HPL_timer_boot(void) ;
#line 79
void HPL_timer_enable(void) ;
#line 80
void HPL_timer_disable(void) ;
#line 81
double HPL_timer_inquire(HPL_T_TIME const   TMTYPE , int const   I ) ;
#line 56 "../HPL_timer.c"
static int HPL_timer_disabled  ;
#line 57 "../HPL_timer.c"
static double HPL_timer_cpusec[64]  ;
#line 57 "../HPL_timer.c"
static double HPL_timer_cpustart[64]  ;
#line 57 "../HPL_timer.c"
static double HPL_timer_wallsec[64]  ;
#line 57 "../HPL_timer.c"
static double HPL_timer_wallstart[64]  ;
#line 67 "../HPL_timer.c"
void HPL_timer_boot(void) 
{ 
  int i ;
  double tmp ;
  double tmp___0 ;

  {
#line 82
  HPL_timer_disabled = 0;
#line 84
  i = 0;
#line 84
  while (i < 64) {
#line 86
    tmp = 0.0;
#line 86
    HPL_timer_wallsec[i] = tmp;
#line 86
    HPL_timer_cpusec[i] = tmp;
#line 87
    tmp___0 = 5.0;
#line 87
    HPL_timer_wallstart[i] = tmp___0;
#line 87
    HPL_timer_cpustart[i] = tmp___0;
#line 84
    i ++;
  }
#line 92
  return;
}
}
#line 95 "../HPL_timer.c"
void HPL_timer(int const   I ) 
{ 
  double tmp ;
  double tmp___0 ;

  {
#line 132
  if (HPL_timer_disabled) {
#line 132
    return;
  }
#line 137
  if (HPL_timer_wallstart[I] == 5.0) {
#line 139
    HPL_timer_wallstart[I] = HPL_timer_walltime();
#line 140
    HPL_timer_cpustart[I] = HPL_timer_cputime();
  } else {
#line 144
    tmp = HPL_timer_cputime();
#line 144
    HPL_timer_cpusec[I] += tmp - HPL_timer_cpustart[I];
#line 145
    tmp___0 = HPL_timer_walltime();
#line 145
    HPL_timer_wallsec[I] += tmp___0 - HPL_timer_wallstart[I];
#line 146
    HPL_timer_wallstart[I] = 5.0;
  }
#line 151
  return;
}
}
#line 154 "../HPL_timer.c"
void HPL_timer_enable(void) 
{ 


  {
#line 165
  HPL_timer_disabled = 0;
#line 166
  return;
}
}
#line 173 "../HPL_timer.c"
void HPL_timer_disable(void) 
{ 


  {
#line 184
  HPL_timer_disabled = 1;
#line 185
  return;
}
}
#line 192 "../HPL_timer.c"
double HPL_timer_inquire(HPL_T_TIME const   TMTYPE , int const   I ) 
{ 
  double time ;
  double tmp ;
  double tmp___0 ;

  {
#line 235
  if ((unsigned int const   )TMTYPE == 101U) {
#line 237
    tmp = HPL_timer_walltime();
#line 237
    if (tmp == - 1.0) {
#line 238
      time = - 1.0;
    } else {
#line 240
      time = HPL_timer_wallsec[I];
    }
  } else {
#line 244
    tmp___0 = HPL_timer_cputime();
#line 244
    if (tmp___0 == - 1.0) {
#line 245
      time = - 1.0;
    } else {
#line 247
      time = HPL_timer_cpusec[I];
    }
  }
#line 249
  return (time);
}
}
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 87 "/usr/include/x86_64-linux-gnu/sys/resource.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__leaf__)) getrusage)(__rusage_who_t __who ,
                                                                                struct rusage *__usage ) ;
#line 118 "../HPL_timer_cputime.c"
double HPL_timer_cputime(void) 
{ 
  struct rusage ruse ;

  {
#line 124
  getrusage(0, & ruse);
#line 125
  return ((double )ruse.ru_utime.tv_sec + (double )ruse.ru_utime.tv_usec / 1000000.0);
}
}
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 71 "/usr/include/x86_64-linux-gnu/sys/time.h"
extern  __attribute__((__nothrow__)) int ( __attribute__((__nonnull__(1), __leaf__)) gettimeofday)(struct timeval * __restrict  __tv ,
                                                                                                   __timezone_ptr_t __tz ) ;
#line 72 "../HPL_timer_walltime.c"
static long start  =    0L;
#line 72 "../HPL_timer_walltime.c"
static long startu  ;
#line 66 "../HPL_timer_walltime.c"
double HPL_timer_walltime(void) 
{ 
  struct timeval tp ;

  {
#line 74
  if (! start) {
#line 76
    gettimeofday((struct timeval * __restrict  )(& tp), (__timezone_ptr_t )((void *)0));
#line 77
    start = tp.tv_sec;
#line 78
    startu = tp.tv_usec;
#line 79
    return (0.0);
  }
#line 81
  gettimeofday((struct timeval * __restrict  )(& tp), (__timezone_ptr_t )((void *)0));
#line 83
  return ((double )(tp.tv_sec - start) + (double )(tp.tv_usec - startu) / 1000000.0);
}
}
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 63 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_pmatgen.h"
void HPL_pdmatgen(HPL_T_grid const   *GRID , int const   M , int const   N , int const   NB ,
                  double *A , int const   LDA , int const   ISEED ) ;
#line 53 "../HPL_pdmatgen.c"
void HPL_pdmatgen(HPL_T_grid const   *GRID , int const   M , int const   N , int const   NB ,
                  double *A , int const   LDA , int const   ISEED ) 
{ 
  int iadd[2] ;
  int ia1[2] ;
  int ia2[2] ;
  int ia3[2] ;
  int ia4[2] ;
  int ia5[2] ;
  int ib1[2] ;
  int ib2[2] ;
  int ib3[2] ;
  int ic1[2] ;
  int ic2[2] ;
  int ic3[2] ;
  int ic4[2] ;
  int ic5[2] ;
  int iran1[2] ;
  int iran2[2] ;
  int iran3[2] ;
  int iran4[2] ;
  int itmp1[2] ;
  int itmp2[2] ;
  int itmp3[2] ;
  int jseed[2] ;
  int mult[2] ;
  int ib ;
  int iblk ;
  int ik ;
  int jb ;
  int jblk ;
  int jk ;
  int jump1 ;
  int jump2 ;
  int jump3 ;
  int jump4 ;
  int jump5 ;
  int jump6 ;
  int jump7 ;
  int lmb ;
  int lnb ;
  int mblks ;
  int mp ;
  int mycol ;
  int myrow ;
  int nblks ;
  int npcol ;
  int nprow ;
  int nq ;
  int inb__ ;
  int mydist__ ;
  int n__ ;
  int nblk__ ;
  int quot__ ;
  int src__ ;
  int inb_____0 ;
  int mydist_____0 ;
  int n_____0 ;
  int nblk_____0 ;
  int quot_____0 ;
  int src_____0 ;

  {
#line 135
  HPL_grid_info(GRID, & nprow, & npcol, & myrow, & mycol);
#line 137
  mult[0] = 20077;
#line 137
  mult[1] = 16838;
#line 138
  iadd[0] = 12345;
#line 138
  iadd[1] = 0;
#line 139
  jseed[0] = (int )ISEED;
#line 139
  jseed[1] = 0;
#line 143
  if (nprow > 1) {
#line 143
    inb__ = (int )NB;
#line 143
    if (inb__ <= 0) {
#line 143
      nblk__ = - inb__ / (int )NB + 1;
#line 143
      src__ = nblk__;
#line 143
      src__ -= (src__ / nprow) * nprow;
#line 143
      inb__ += nblk__ * (int )NB;
#line 143
      n__ = (int )(M - (int const   )inb__);
#line 143
      if (n__ <= 0) {
#line 143
        if (myrow == src__) {
#line 143
          mp = (int )M;
        } else {
#line 143
          mp = 0;
        }
      } else {
#line 143
        mydist__ = myrow - src__;
#line 143
        if (mydist__ < 0) {
#line 143
          mydist__ += nprow;
        }
#line 143
        nblk__ = n__ / (int )NB + 1;
#line 143
        quot__ = nblk__ / nprow;
#line 143
        mydist__ -= nblk__ - quot__ * nprow;
#line 143
        if (mydist__ < 0) {
#line 143
          if (myrow != src__) {
#line 143
            mp = (int )(NB + NB * (int const   )quot__);
          } else {
#line 143
            mp = inb__ + (int )(NB * (int const   )quot__);
          }
        } else
#line 143
        if (mydist__ > 0) {
#line 143
          mp = (int )(NB * (int const   )quot__);
        } else
#line 143
        if (myrow != src__) {
#line 143
          mp = (n__ + (int )NB) + (int )(NB * (int const   )(quot__ - nblk__));
        } else {
#line 143
          mp = (int )(M + NB * (int const   )(quot__ - nblk__));
        }
      }
    } else {
#line 143
      n__ = (int )(M - (int const   )inb__);
#line 143
      if (n__ <= 0) {
#line 143
        if (myrow == 0) {
#line 143
          mp = (int )M;
        } else {
#line 143
          mp = 0;
        }
      } else {
#line 143
        mydist__ = myrow;
#line 143
        if (mydist__ < 0) {
#line 143
          mydist__ += nprow;
        }
#line 143
        nblk__ = n__ / (int )NB + 1;
#line 143
        quot__ = nblk__ / nprow;
#line 143
        mydist__ -= nblk__ - quot__ * nprow;
#line 143
        if (mydist__ < 0) {
#line 143
          if (myrow != 0) {
#line 143
            mp = (int )(NB + NB * (int const   )quot__);
          } else {
#line 143
            mp = inb__ + (int )(NB * (int const   )quot__);
          }
        } else
#line 143
        if (mydist__ > 0) {
#line 143
          mp = (int )(NB * (int const   )quot__);
        } else
#line 143
        if (myrow != 0) {
#line 143
          mp = (n__ + (int )NB) + (int )(NB * (int const   )(quot__ - nblk__));
        } else {
#line 143
          mp = (int )(M + NB * (int const   )(quot__ - nblk__));
        }
      }
    }
  } else {
#line 143
    mp = (int )M;
  }
#line 144
  if (npcol > 1) {
#line 144
    inb_____0 = (int )NB;
#line 144
    if (inb_____0 <= 0) {
#line 144
      nblk_____0 = - inb_____0 / (int )NB + 1;
#line 144
      src_____0 = nblk_____0;
#line 144
      src_____0 -= (src_____0 / npcol) * npcol;
#line 144
      inb_____0 += nblk_____0 * (int )NB;
#line 144
      n_____0 = (int )(N - (int const   )inb_____0);
#line 144
      if (n_____0 <= 0) {
#line 144
        if (mycol == src_____0) {
#line 144
          nq = (int )N;
        } else {
#line 144
          nq = 0;
        }
      } else {
#line 144
        mydist_____0 = mycol - src_____0;
#line 144
        if (mydist_____0 < 0) {
#line 144
          mydist_____0 += npcol;
        }
#line 144
        nblk_____0 = n_____0 / (int )NB + 1;
#line 144
        quot_____0 = nblk_____0 / npcol;
#line 144
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 144
        if (mydist_____0 < 0) {
#line 144
          if (mycol != src_____0) {
#line 144
            nq = (int )(NB + NB * (int const   )quot_____0);
          } else {
#line 144
            nq = inb_____0 + (int )(NB * (int const   )quot_____0);
          }
        } else
#line 144
        if (mydist_____0 > 0) {
#line 144
          nq = (int )(NB * (int const   )quot_____0);
        } else
#line 144
        if (mycol != src_____0) {
#line 144
          nq = (n_____0 + (int )NB) + (int )(NB * (int const   )(quot_____0 - nblk_____0));
        } else {
#line 144
          nq = (int )(N + NB * (int const   )(quot_____0 - nblk_____0));
        }
      }
    } else {
#line 144
      n_____0 = (int )(N - (int const   )inb_____0);
#line 144
      if (n_____0 <= 0) {
#line 144
        if (mycol == 0) {
#line 144
          nq = (int )N;
        } else {
#line 144
          nq = 0;
        }
      } else {
#line 144
        mydist_____0 = mycol;
#line 144
        if (mydist_____0 < 0) {
#line 144
          mydist_____0 += npcol;
        }
#line 144
        nblk_____0 = n_____0 / (int )NB + 1;
#line 144
        quot_____0 = nblk_____0 / npcol;
#line 144
        mydist_____0 -= nblk_____0 - quot_____0 * npcol;
#line 144
        if (mydist_____0 < 0) {
#line 144
          if (mycol != 0) {
#line 144
            nq = (int )(NB + NB * (int const   )quot_____0);
          } else {
#line 144
            nq = inb_____0 + (int )(NB * (int const   )quot_____0);
          }
        } else
#line 144
        if (mydist_____0 > 0) {
#line 144
          nq = (int )(NB * (int const   )quot_____0);
        } else
#line 144
        if (mycol != 0) {
#line 144
          nq = (n_____0 + (int )NB) + (int )(NB * (int const   )(quot_____0 - nblk_____0));
        } else {
#line 144
          nq = (int )(N + NB * (int const   )(quot_____0 - nblk_____0));
        }
      }
    }
  } else {
#line 144
    nq = (int )N;
  }
#line 146
  if (mp <= 0) {
#line 146
    return;
  } else
#line 146
  if (nq <= 0) {
#line 146
    return;
  }
#line 150
  mblks = ((mp + (int )NB) - 1) / (int )NB;
#line 150
  lmb = mp - ((mp - 1) / (int )NB) * (int )NB;
#line 151
  nblks = ((nq + (int )NB) - 1) / (int )NB;
#line 151
  lnb = nq - ((nq - 1) / (int )NB) * (int )NB;
#line 155
  jump1 = 1;
#line 155
  jump2 = nprow * (int )NB;
#line 155
  jump3 = (int )M;
#line 155
  jump4 = npcol * (int )NB;
#line 156
  jump5 = (int )NB;
#line 156
  jump6 = mycol;
#line 156
  jump7 = myrow * (int )NB;
#line 158
  HPL_xjumpm((int const   )jump1, mult, iadd, jseed, iran1, ia1, ic1);
#line 159
  HPL_xjumpm((int const   )jump2, mult, iadd, iran1, itmp1, ia2, ic2);
#line 160
  HPL_xjumpm((int const   )jump3, mult, iadd, iran1, itmp1, ia3, ic3);
#line 161
  HPL_xjumpm((int const   )jump4, ia3, ic3, iran1, itmp1, ia4, ic4);
#line 162
  HPL_xjumpm((int const   )jump5, ia3, ic3, iran1, itmp1, ia5, ic5);
#line 163
  HPL_xjumpm((int const   )jump6, ia5, ic5, iran1, itmp3, itmp1, itmp2);
#line 164
  HPL_xjumpm((int const   )jump7, mult, iadd, itmp3, iran1, itmp1, itmp2);
#line 165
  HPL_setran((int const   )0, iran1);
#line 165
  HPL_setran((int const   )1, ia1);
#line 165
  HPL_setran((int const   )2, ic1);
#line 169
  ib1[0] = iran1[0];
#line 169
  ib1[1] = iran1[1];
#line 170
  ib2[0] = iran1[0];
#line 170
  ib2[1] = iran1[1];
#line 171
  ib3[0] = iran1[0];
#line 171
  ib3[1] = iran1[1];
#line 173
  jblk = 0;
#line 173
  while (jblk < nblks) {
#line 175
    if (jblk == nblks - 1) {
#line 175
      jb = lnb;
    } else {
#line 175
      jb = (int )NB;
    }
#line 176
    jk = 0;
#line 176
    while (jk < jb) {
#line 178
      iblk = 0;
#line 178
      while (iblk < mblks) {
#line 180
        if (iblk == mblks - 1) {
#line 180
          ib = lmb;
        } else {
#line 180
          ib = (int )NB;
        }
#line 181
        ik = 0;
#line 181
        while (ik < ib) {
#line 181
          *A = HPL_rand();
#line 181
          A ++;
#line 181
          ik ++;
        }
#line 182
        HPL_jumpit(ia2, ic2, ib1, iran2);
#line 183
        ib1[0] = iran2[0];
#line 183
        ib1[1] = iran2[1];
#line 178
        iblk ++;
      }
#line 185
      A += LDA - (int const   )mp;
#line 186
      HPL_jumpit(ia3, ic3, ib2, iran3);
#line 187
      ib1[0] = iran3[0];
#line 187
      ib1[1] = iran3[1];
#line 188
      ib2[0] = iran3[0];
#line 188
      ib2[1] = iran3[1];
#line 176
      jk ++;
    }
#line 190
    HPL_jumpit(ia4, ic4, ib3, iran4);
#line 191
    ib1[0] = iran4[0];
#line 191
    ib1[1] = iran4[1];
#line 192
    ib2[0] = iran4[0];
#line 192
    ib2[1] = iran4[1];
#line 193
    ib3[0] = iran4[0];
#line 193
    ib3[1] = iran4[1];
#line 173
    jblk ++;
  }
#line 198
  return;
}
}
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 78 "/home/westwind/mpibench/1hpl/hpl-1.0/include/hpl_ptimer.h"
double HPL_ptimer_cputime(void) ;
#line 79
double HPL_ptimer_walltime(void) ;
#line 81
void HPL_ptimer(int const   I ) ;
#line 82
void HPL_ptimer_boot(void) ;
#line 83
void HPL_ptimer_combine(MPI_Comm COMM , HPL_T_PTIME_OP const   OPE , HPL_T_PTIME const   TMTYPE ,
                        int const   N , int const   IBEG , double *TIMES ) ;
#line 87
void HPL_ptimer_disable(void) ;
#line 88
void HPL_ptimer_enable(void) ;
#line 89
double HPL_ptimer_inquire(HPL_T_PTIME const   TMTYPE , int const   I ) ;
#line 56 "../HPL_ptimer.c"
static int HPL_ptimer_disabled  ;
#line 57 "../HPL_ptimer.c"
static double HPL_ptimer_cpusec[64]  ;
#line 57 "../HPL_ptimer.c"
static double HPL_ptimer_cpustart[64]  ;
#line 57 "../HPL_ptimer.c"
static double HPL_ptimer_wallsec[64]  ;
#line 57 "../HPL_ptimer.c"
static double HPL_ptimer_wallstart[64]  ;
#line 67 "../HPL_ptimer.c"
void HPL_ptimer_boot(void) 
{ 
  int i ;
  double tmp ;
  double tmp___0 ;

  {
#line 82
  HPL_ptimer_disabled = 0;
#line 84
  i = 0;
#line 84
  while (i < 64) {
#line 86
    tmp = 0.0;
#line 86
    HPL_ptimer_wallsec[i] = tmp;
#line 86
    HPL_ptimer_cpusec[i] = tmp;
#line 87
    tmp___0 = 5.0;
#line 87
    HPL_ptimer_wallstart[i] = tmp___0;
#line 87
    HPL_ptimer_cpustart[i] = tmp___0;
#line 84
    i ++;
  }
#line 92
  return;
}
}
#line 95 "../HPL_ptimer.c"
void HPL_ptimer(int const   I ) 
{ 
  double tmp ;
  double tmp___0 ;

  {
#line 132
  if (HPL_ptimer_disabled) {
#line 132
    return;
  }
#line 137
  if (HPL_ptimer_wallstart[I] == 5.0) {
#line 139
    HPL_ptimer_wallstart[I] = HPL_ptimer_walltime();
#line 140
    HPL_ptimer_cpustart[I] = HPL_ptimer_cputime();
  } else {
#line 144
    tmp = HPL_ptimer_cputime();
#line 144
    HPL_ptimer_cpusec[I] += tmp - HPL_ptimer_cpustart[I];
#line 145
    tmp___0 = HPL_ptimer_walltime();
#line 145
    HPL_ptimer_wallsec[I] += tmp___0 - HPL_ptimer_wallstart[I];
#line 146
    HPL_ptimer_wallstart[I] = 5.0;
  }
#line 151
  return;
}
}
#line 154 "../HPL_ptimer.c"
void HPL_ptimer_enable(void) 
{ 


  {
#line 165
  HPL_ptimer_disabled = 0;
#line 166
  return;
}
}
#line 173 "../HPL_ptimer.c"
void HPL_ptimer_disable(void) 
{ 


  {
#line 184
  HPL_ptimer_disabled = 1;
#line 185
  return;
}
}
#line 192 "../HPL_ptimer.c"
double HPL_ptimer_inquire(HPL_T_PTIME const   TMTYPE , int const   I ) 
{ 
  double time ;
  double tmp ;
  double tmp___0 ;

  {
#line 235
  if ((unsigned int const   )TMTYPE == 101U) {
#line 237
    tmp = HPL_ptimer_walltime();
#line 237
    if (tmp == - 1.0) {
#line 238
      time = - 1.0;
    } else {
#line 240
      time = HPL_ptimer_wallsec[I];
    }
  } else {
#line 244
    tmp___0 = HPL_ptimer_cputime();
#line 244
    if (tmp___0 == - 1.0) {
#line 245
      time = - 1.0;
    } else {
#line 247
      time = HPL_ptimer_cpusec[I];
    }
  }
#line 249
  return (time);
}
}
#line 256 "../HPL_ptimer.c"
void HPL_ptimer_combine(MPI_Comm COMM , HPL_T_PTIME_OP const   OPE , HPL_T_PTIME const   TMTYPE ,
                        int const   N , int const   IBEG , double *TIMES ) 
{ 
  int i ;
  int tmpdis ;
  double tmp ;
  double tmp___0 ;

  {
#line 320
  tmpdis = HPL_ptimer_disabled;
#line 320
  HPL_ptimer_disabled = 1;
#line 326
  if ((unsigned int const   )TMTYPE == 101U) {
#line 328
    tmp = HPL_ptimer_walltime();
#line 328
    if (tmp == - 1.0) {
#line 329
      i = 0;
#line 329
      while (i < (int )N) {
#line 329
        *(TIMES + i) = - 1.0;
#line 329
        i ++;
      }
#line 329
      return;
    } else {
#line 331
      i = 0;
#line 331
      while (i < (int )N) {
#line 331
        *(TIMES + i) = HPL_ptimer_wallsec[IBEG + (int const   )i];
#line 331
        i ++;
      }
    }
  } else {
#line 335
    tmp___0 = HPL_ptimer_cputime();
#line 335
    if (tmp___0 == - 1.0) {
#line 336
      i = 0;
#line 336
      while (i < (int )N) {
#line 336
        *(TIMES + i) = - 1.0;
#line 336
        i ++;
      }
#line 336
      return;
    } else {
#line 338
      i = 0;
#line 338
      while (i < (int )N) {
#line 338
        *(TIMES + i) = HPL_ptimer_cpusec[IBEG + (int const   )i];
#line 338
        i ++;
      }
    }
  }
#line 343
  i = 0;
#line 343
  while (i < (int )N) {
#line 343
    if (0.0 > *(TIMES + i)) {
#line 343
      *(TIMES + i) = 0.0;
    } else {
#line 343
      *(TIMES + i) = *(TIMES + i);
    }
#line 343
    i ++;
  }
#line 345
  if ((unsigned int const   )OPE == 201U) {
#line 346
    HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                 void const   * ,
                                                                                 void * ,
                                                                                 HPL_T_TYPE const    ))(& HPL_max),
                   COMM);
  } else
#line 347
  if ((unsigned int const   )OPE == 202U) {
#line 348
    HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                 void const   * ,
                                                                                 void * ,
                                                                                 HPL_T_TYPE const    ))(& HPL_min),
                   COMM);
  } else
#line 349
  if ((unsigned int const   )OPE == 203U) {
#line 350
    HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                 void const   * ,
                                                                                 void * ,
                                                                                 HPL_T_TYPE const    ))(& HPL_sum),
                   COMM);
  } else {
#line 352
    HPL_all_reduce((void *)TIMES, N, (HPL_T_TYPE const   )101, (void (* const  )(int const    ,
                                                                                 void const   * ,
                                                                                 void * ,
                                                                                 HPL_T_TYPE const    ))(& HPL_max),
                   COMM);
  }
#line 354
  HPL_ptimer_disabled = tmpdis;
#line 358
  return;
}
}
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 118 "../HPL_ptimer_cputime.c"
double HPL_ptimer_cputime(void) 
{ 
  struct rusage ruse ;

  {
#line 125
  getrusage(0, & ruse);
#line 126
  return ((double )ruse.ru_utime.tv_sec + (double )ruse.ru_utime.tv_usec / 1000000.0);
}
}
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1039 "//usr/include/mpich/mpi.h"
extern double MPI_Wtime(void) ;
#line 92 "../HPL_ptimer_walltime.c"
double HPL_ptimer_walltime(void) 
{ 
  double tmp ;

  {
#line 97
  tmp = MPI_Wtime();
#line 97
  return (tmp);
}
}
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer.o"
#pragma merger("0","./HPL_ptimer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_cputime.o"
#pragma merger("0","./HPL_ptimer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ptimer_walltime.o"
#pragma merger("0","./HPL_ptimer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlacpy.o"
#pragma merger("0","./HPL_dlacpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlatcpy.o"
#pragma merger("0","./HPL_dlatcpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_fprintf.o"
#pragma merger("0","./HPL_fprintf.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_warn.o"
#pragma merger("0","./HPL_warn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_abort.o"
#pragma merger("0","./HPL_abort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaprnt.o"
#pragma merger("0","./HPL_dlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlange.o"
#pragma merger("0","./HPL_dlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dcopy.o"
#pragma merger("0","./HPL_dcopy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_daxpy.o"
#pragma merger("0","./HPL_daxpy.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dscal.o"
#pragma merger("0","./HPL_dscal.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_idamax.o"
#pragma merger("0","./HPL_idamax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemv.o"
#pragma merger("0","./HPL_dgemv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsv.o"
#pragma merger("0","./HPL_dtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dger.o"
#pragma merger("0","./HPL_dger.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dgemm.o"
#pragma merger("0","./HPL_dgemm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dtrsm.o"
#pragma merger("0","./HPL_dtrsm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1ring.o"
#pragma merger("0","./HPL_1ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_1rinM.o"
#pragma merger("0","./HPL_1rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2ring.o"
#pragma merger("0","./HPL_2ring.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_2rinM.o"
#pragma merger("0","./HPL_2rinM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blong.o"
#pragma merger("0","./HPL_blong.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_blonM.o"
#pragma merger("0","./HPL_blonM.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_packL.o"
#pragma merger("0","./HPL_packL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_copyL.o"
#pragma merger("0","./HPL_copyL.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_binit.o"
#pragma merger("0","./HPL_binit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bcast.o"
#pragma merger("0","./HPL_bcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_bwait.o"
#pragma merger("0","./HPL_bwait.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_send.o"
#pragma merger("0","./HPL_send.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_recv.o"
#pragma merger("0","./HPL_recv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sdrv.o"
#pragma merger("0","./HPL_sdrv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_init.o"
#pragma merger("0","./HPL_grid_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pnum.o"
#pragma merger("0","./HPL_pnum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_info.o"
#pragma merger("0","./HPL_grid_info.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_grid_exit.o"
#pragma merger("0","./HPL_grid_exit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_broadcast.o"
#pragma merger("0","./HPL_broadcast.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_reduce.o"
#pragma merger("0","./HPL_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_all_reduce.o"
#pragma merger("0","./HPL_all_reduce.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_barrier.o"
#pragma merger("0","./HPL_barrier.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_min.o"
#pragma merger("0","./HPL_min.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_max.o"
#pragma merger("0","./HPL_max.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_sum.o"
#pragma merger("0","./HPL_sum.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_new.o"
#pragma merger("0","./HPL_pdpanel_new.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_init.o"
#pragma merger("0","./HPL_pdpanel_init.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_disp.o"
#pragma merger("0","./HPL_pdpanel_disp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanel_free.o"
#pragma merger("0","./HPL_pdpanel_free.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2l.o"
#pragma merger("0","./HPL_indxg2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2lp.o"
#pragma merger("0","./HPL_indxg2lp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxg2p.o"
#pragma merger("0","./HPL_indxg2p.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_indxl2g.o"
#pragma merger("0","./HPL_indxl2g.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_infog2l.o"
#pragma merger("0","./HPL_infog2l.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numroc.o"
#pragma merger("0","./HPL_numroc.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_numrocI.o"
#pragma merger("0","./HPL_numrocI.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp00N.o"
#pragma merger("0","./HPL_dlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp10N.o"
#pragma merger("0","./HPL_dlaswp10N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01N.o"
#pragma merger("0","./HPL_dlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp01T.o"
#pragma merger("0","./HPL_dlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp02N.o"
#pragma merger("0","./HPL_dlaswp02N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03N.o"
#pragma merger("0","./HPL_dlaswp03N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp03T.o"
#pragma merger("0","./HPL_dlaswp03T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04N.o"
#pragma merger("0","./HPL_dlaswp04N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp04T.o"
#pragma merger("0","./HPL_dlaswp04T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05N.o"
#pragma merger("0","./HPL_dlaswp05N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp05T.o"
#pragma merger("0","./HPL_dlaswp05T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06N.o"
#pragma merger("0","./HPL_dlaswp06N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlaswp06T.o"
#pragma merger("0","./HPL_dlaswp06T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pwarn.o"
#pragma merger("0","./HPL_pwarn.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pabort.o"
#pragma merger("0","./HPL_pabort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaprnt.o"
#pragma merger("0","./HPL_pdlaprnt.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlamch.o"
#pragma merger("0","./HPL_pdlamch.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlange.o"
#pragma merger("0","./HPL_pdlange.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocmax.o"
#pragma merger("0","./HPL_dlocmax.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpN.o"
#pragma merger("0","./HPL_dlocswpN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dlocswpT.o"
#pragma merger("0","./HPL_dlocswpT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmxswp.o"
#pragma merger("0","./HPL_pdmxswp.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrN.o"
#pragma merger("0","./HPL_pdpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpancrT.o"
#pragma merger("0","./HPL_pdpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllN.o"
#pragma merger("0","./HPL_pdpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanllT.o"
#pragma merger("0","./HPL_pdpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlN.o"
#pragma merger("0","./HPL_pdpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdpanrlT.o"
#pragma merger("0","./HPL_pdpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllN.o"
#pragma merger("0","./HPL_pdrpanllN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanllT.o"
#pragma merger("0","./HPL_pdrpanllT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrN.o"
#pragma merger("0","./HPL_pdrpancrN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpancrT.o"
#pragma merger("0","./HPL_pdrpancrT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlN.o"
#pragma merger("0","./HPL_pdrpanrlN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdrpanrlT.o"
#pragma merger("0","./HPL_pdrpanrlT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdfact.o"
#pragma merger("0","./HPL_pdfact.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pipid.o"
#pragma merger("0","./HPL_pipid.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx0.o"
#pragma merger("0","./HPL_plindx0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00N.o"
#pragma merger("0","./HPL_pdlaswp00N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp00T.o"
#pragma merger("0","./HPL_pdlaswp00T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_perm.o"
#pragma merger("0","./HPL_perm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_logsort.o"
#pragma merger("0","./HPL_logsort.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx10.o"
#pragma merger("0","./HPL_plindx10.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_plindx1.o"
#pragma merger("0","./HPL_plindx1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadN.o"
#pragma merger("0","./HPL_spreadN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_spreadT.o"
#pragma merger("0","./HPL_spreadT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollN.o"
#pragma merger("0","./HPL_rollN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rollT.o"
#pragma merger("0","./HPL_rollT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_equil.o"
#pragma merger("0","./HPL_equil.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01N.o"
#pragma merger("0","./HPL_pdlaswp01N.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdlaswp01T.o"
#pragma merger("0","./HPL_pdlaswp01T.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNN.o"
#pragma merger("0","./HPL_pdupdateNN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateNT.o"
#pragma merger("0","./HPL_pdupdateNT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTN.o"
#pragma merger("0","./HPL_pdupdateTN.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdupdateTT.o"
#pragma merger("0","./HPL_pdupdateTT.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdtrsv.o"
#pragma merger("0","./HPL_pdtrsv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv0.o"
#pragma merger("0","./HPL_pdgesv0.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK1.o"
#pragma merger("0","./HPL_pdgesvK1.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesvK2.o"
#pragma merger("0","./HPL_pdgesvK2.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdgesv.o"
#pragma merger("0","./HPL_pdgesv.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_dmatgen.o"
#pragma merger("0","./HPL_dmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_ladd.o"
#pragma merger("0","./HPL_ladd.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_lmul.o"
#pragma merger("0","./HPL_lmul.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_xjumpm.o"
#pragma merger("0","./HPL_xjumpm.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_jumpit.o"
#pragma merger("0","./HPL_jumpit.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_rand.o"
#pragma merger("0","./HPL_rand.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_setran.o"
#pragma merger("0","./HPL_setran.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer.o"
#pragma merger("0","./HPL_timer.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_cputime.o"
#pragma merger("0","./HPL_timer_cputime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_timer_walltime.o"
#pragma merger("0","./HPL_timer_walltime.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
#line 1 "HPL_pdmatgen.o"
#pragma merger("0","./HPL_pdmatgen.i","-fomit-frame-pointer,-funroll-loops,-W,-Wall,-O0,-g")
